	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\.lowpan6.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Rtl8211f -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\lowpan6.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\lowpan6.src ..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\lowpan6.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\lowpan6.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	733
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\lowpan6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L5
	.byte	2
	.byte	'int',0,4,5,3
	.word	170
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	177
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	219
	.byte	7
	.word	219
	.byte	8
	.byte	'__cmpswapw',0
	.word	235
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	240
	.byte	9
	.byte	'value',0
	.word	219
	.byte	9
	.byte	'compare',0
	.word	219
	.byte	0,2
	.byte	'short int',0,2,5,10
	.byte	'__wchar_t',0,1,1,1
	.word	297
	.byte	10
	.byte	'__size_t',0,1,1,1
	.word	219
	.byte	10
	.byte	'__ptrdiff_t',0,1,1,1
	.word	170
	.byte	11,1,7
	.word	365
	.byte	10
	.byte	'__codeptr',0,1,1,1
	.word	367
	.byte	10
	.byte	'__intptr_t',0,1,1,1
	.word	170
	.byte	10
	.byte	'__uintptr_t',0,1,1,1
	.word	219
	.byte	2
	.byte	'unsigned char',0,1,8,10
	.byte	'uint8',0,2,108,29
	.word	429
	.byte	2
	.byte	'unsigned short int',0,2,7,10
	.byte	'uint16',0,2,112,29
	.word	460
	.byte	2
	.byte	'unsigned long int',0,4,7,10
	.byte	'uint32',0,2,116,29
	.word	497
	.byte	2
	.byte	'char',0,1,6,10
	.byte	'sint8',0,2,125,29
	.word	533
	.byte	10
	.byte	'sint16',0,2,129,1,29
	.word	297
	.byte	2
	.byte	'long int',0,4,5,10
	.byte	'sint32',0,2,134,1,29
	.word	571
	.byte	2
	.byte	'long long int',0,8,5,10
	.byte	'sint64',0,2,141,1,29
	.word	599
	.byte	2
	.byte	'float',0,4,4,10
	.byte	'float32',0,2,170,1,29
	.word	632
	.byte	12
	.byte	'void',0,7
	.word	658
	.byte	10
	.byte	'pvoid',0,3,54,28
	.word	664
	.byte	10
	.byte	'Ifx_TickTime',0,3,76,28
	.word	599
	.byte	10
	.byte	'u32_t',0,4,87,16
	.word	497
	.byte	10
	.byte	'intmax_t',0,5,198,2,41
	.word	599
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,22,0,3,8,58,15,59,15,57,15,73,19,0,0,11,21,0,54,15,0,0,12,59,0
	.byte	3,8,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\lowpan6.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'cc.h',0,2,0,0
	.byte	'stdint.h',0,3,0,0,0
.L9:
.L7:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	     1  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	     2   * @file
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	     3   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	     4   * 6LowPAN output for IPv6. Uses ND tables for link-layer addressing. Fragments packets to 6LowPAN units.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	     5   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	     6   * This implementation aims to conform to IEEE 802.15.4(-2015), RFC 4944 and RFC 6282.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	     7   * @todo: RFC 6775.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	     8   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	     9  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    10  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    11   * Copyright (c) 2015 Inico Technologies Ltd.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    12   * All rights reserved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    13   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    14   * Redistribution and use in source and binary forms, with or without modification,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    15   * are permitted provided that the following conditions are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    16   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    17   * 1. Redistributions of source code must retain the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    18   *    this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    19   * 2. Redistributions in binary form must reproduce the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    20   *    this list of conditions and the following disclaimer in the documentation
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    21   *    and/or other materials provided with the distribution.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    22   * 3. The name of the author may not be used to endorse or promote products
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    23   *    derived from this software without specific prior written permission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    24   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    25   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    26   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    27   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    28   * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    29   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    30   * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    31   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    32   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    33   * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    34   * OF SUCH DAMAGE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    35   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    36   * This file is part of the lwIP TCP/IP stack.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    37   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    38   * Author: Ivan Delamer <delamer@inicotech.com>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    39   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    40   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    41   * Please coordinate changes and requests with Ivan Delamer
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    42   * <delamer@inicotech.com>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    43   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    44  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    45  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    46   * @defgroup sixlowpan 6LoWPAN (RFC4944)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    47   * @ingroup netifs
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    48   * 6LowPAN netif implementation
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    49   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    50  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    51  #include "netif/lowpan6.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    52  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    53  #if LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    54  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    55  #include "lwip/ip.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    56  #include "lwip/pbuf.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    57  #include "lwip/ip_addr.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    58  #include "lwip/netif.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    59  #include "lwip/nd6.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    60  #include "lwip/mem.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    61  #include "lwip/udp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    62  #include "lwip/tcpip.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    63  #include "lwip/snmp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    64  #include "netif/ieee802154.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    65  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    66  #include <string.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    67  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    68  #if LWIP_6LOWPAN_802154_HW_CRC
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    69  #define LWIP_6LOWPAN_DO_CALC_CRC(buf, len) 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    70  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    71  #define LWIP_6LOWPAN_DO_CALC_CRC(buf, len) LWIP_6LOWPAN_CALC_CRC(buf, len)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    72  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    73  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    74  /** This is a helper struct for reassembly of fragments
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    75   * (IEEE 802.15.4 limits to 127 bytes)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    76   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    77  struct lowpan6_reass_helper {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    78    struct lowpan6_reass_helper *next_packet;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    79    struct pbuf *reass;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    80    struct pbuf *frags;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    81    u8_t timer;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    82    struct lowpan6_link_addr sender_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    83    u16_t datagram_size;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    84    u16_t datagram_tag;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    85  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    86  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    87  /** This struct keeps track of per-netif state */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    88  struct lowpan6_ieee802154_data {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    89    /** fragment reassembly list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    90    struct lowpan6_reass_helper *reass_list;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    91  #if LWIP_6LOWPAN_NUM_CONTEXTS > 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    92    /** address context for compression */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    93    ip6_addr_t lowpan6_context[LWIP_6LOWPAN_NUM_CONTEXTS];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    94  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    95    /** Datagram Tag for fragmentation */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    96    u16_t tx_datagram_tag;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    97    /** local PAN ID for IEEE 802.15.4 header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    98    u16_t ieee_802154_pan_id;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	    99    /** Sequence Number for IEEE 802.15.4 transmission */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   100    u8_t tx_frame_seq_num;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   101  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   102  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   103  /* Maximum frame size is 127 bytes minus CRC size */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   104  #define LOWPAN6_MAX_PAYLOAD (127 - 2)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   105  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   106  /** Currently, this state is global, since there's only one 6LoWPAN netif */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   107  static struct lowpan6_ieee802154_data lowpan6_data;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   108  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   109  #if LWIP_6LOWPAN_NUM_CONTEXTS > 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   110  #define LWIP_6LOWPAN_CONTEXTS(netif) lowpan6_data.lowpan6_context
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   111  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   112  #define LWIP_6LOWPAN_CONTEXTS(netif) NULL
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   113  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   114  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   115  static const struct lowpan6_link_addr ieee_802154_broadcast = {2, {0xff, 0xff}};
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   116  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   117  #if LWIP_6LOWPAN_INFER_SHORT_ADDRESS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   118  static struct lowpan6_link_addr short_mac_addr = {2, {0, 0}};
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   119  #endif /* LWIP_6LOWPAN_INFER_SHORT_ADDRESS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   120  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   121  /* IEEE 802.15.4 specific functions: */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   122  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   123  /** Write the IEEE 802.15.4 header that encapsulates the 6LoWPAN frame.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   124   * Src and dst PAN IDs are filled with the ID set by @ref lowpan6_set_pan_id.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   125   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   126   * Since the length is variable:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   127   * @returns the header length
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   128   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   129  static u8_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   130  lowpan6_write_iee802154_header(struct ieee_802154_hdr *hdr, const struct lowpan6_link_addr *src,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   131                                 const struct lowpan6_link_addr *dst)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   132  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   133    u8_t ieee_header_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   134    u8_t *buffer;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   135    u8_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   136    u16_t fc;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   137  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   138    fc = IEEE_802154_FC_FT_DATA; /* send data packet (2003 frame version) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   139    fc |= IEEE_802154_FC_PANID_COMPR; /* set PAN ID compression, for now src and dst PANs are equal */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   140    if (dst != &ieee_802154_broadcast) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   141      fc |= IEEE_802154_FC_ACK_REQ; /* data packet, no broadcast: ack required. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   142    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   143    if (dst->addr_len == 2) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   144      fc |= IEEE_802154_FC_DST_ADDR_MODE_SHORT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   145    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   146      LWIP_ASSERT("invalid dst address length", dst->addr_len == 8);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   147      fc |= IEEE_802154_FC_DST_ADDR_MODE_EXT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   148    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   149    if (src->addr_len == 2) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   150      fc |= IEEE_802154_FC_SRC_ADDR_MODE_SHORT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   151    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   152      LWIP_ASSERT("invalid src address length", src->addr_len == 8);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   153      fc |= IEEE_802154_FC_SRC_ADDR_MODE_EXT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   154    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   155    hdr->frame_control = fc;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   156    hdr->sequence_number = lowpan6_data.tx_frame_seq_num++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   157    hdr->destination_pan_id = lowpan6_data.ieee_802154_pan_id; /* pan id */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   158  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   159    buffer = (u8_t *)hdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   160    ieee_header_len = 5;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   161    i = dst->addr_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   162    /* reverse memcpy of dst addr */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   163    while (i-- > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   164      buffer[ieee_header_len++] = dst->addr[i];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   165    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   166    /* Source PAN ID skipped due to PAN ID Compression */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   167    i = src->addr_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   168    /* reverse memcpy of src addr */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   169    while (i-- > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   170      buffer[ieee_header_len++] = src->addr[i];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   171    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   172    return ieee_header_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   173  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   174  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   175  /** Parse the IEEE 802.15.4 header from a pbuf.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   176   * If successful, the header is hidden from the pbuf.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   177   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   178   * PAN IDs and seuqence number are not checked
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   179   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   180   * @param p input pbuf, p->payload pointing at the IEEE 802.15.4 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   181   * @param src pointer to source address filled from the header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   182   * @param dest pointer to destination address filled from the header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   183   * @returns ERR_OK if successful
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   184   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   185  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   186  lowpan6_parse_iee802154_header(struct pbuf *p, struct lowpan6_link_addr *src,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   187                                 struct lowpan6_link_addr *dest)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   188  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   189    u8_t *puc;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   190    s8_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   191    u16_t frame_control, addr_mode;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   192    u16_t datagram_offset;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   193  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   194    /* Parse IEEE 802.15.4 header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   195    puc = (u8_t *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   196    frame_control = puc[0] | (puc[1] << 8);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   197    datagram_offset = 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   198    if (frame_control & IEEE_802154_FC_SEQNO_SUPPR) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   199      if (IEEE_802154_FC_FRAME_VERSION_GET(frame_control) <= 1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   200        /* sequence number suppressed, this is not valid for versions 0/1 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   201        return ERR_VAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   202      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   203    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   204      datagram_offset++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   205    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   206    datagram_offset += 2; /* Skip destination PAN ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   207    addr_mode = frame_control & IEEE_802154_FC_DST_ADDR_MODE_MASK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   208    if (addr_mode == IEEE_802154_FC_DST_ADDR_MODE_EXT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   209      /* extended address (64 bit) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   210      dest->addr_len = 8;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   211      /* reverse memcpy: */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   212      for (i = 0; i < 8; i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   213        dest->addr[i] = puc[datagram_offset + 7 - i];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   214      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   215      datagram_offset += 8;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   216    } else if (addr_mode == IEEE_802154_FC_DST_ADDR_MODE_SHORT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   217      /* short address (16 bit) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   218      dest->addr_len = 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   219      /* reverse memcpy: */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   220      dest->addr[0] = puc[datagram_offset + 1];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   221      dest->addr[1] = puc[datagram_offset];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   222      datagram_offset += 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   223    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   224      /* unsupported address mode (do we need "no address"?) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   225      return ERR_VAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   226    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   227  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   228    if (!(frame_control & IEEE_802154_FC_PANID_COMPR)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   229      /* No PAN ID compression, skip source PAN ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   230      datagram_offset += 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   231    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   232  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   233    addr_mode = frame_control & IEEE_802154_FC_SRC_ADDR_MODE_MASK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   234    if (addr_mode == IEEE_802154_FC_SRC_ADDR_MODE_EXT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   235      /* extended address (64 bit) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   236      src->addr_len = 8;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   237      /* reverse memcpy: */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   238      for (i = 0; i < 8; i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   239        src->addr[i] = puc[datagram_offset + 7 - i];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   240      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   241      datagram_offset += 8;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   242    } else if (addr_mode == IEEE_802154_FC_DST_ADDR_MODE_SHORT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   243      /* short address (16 bit) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   244      src->addr_len = 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   245      src->addr[0] = puc[datagram_offset + 1];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   246      src->addr[1] = puc[datagram_offset];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   247      datagram_offset += 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   248    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   249      /* unsupported address mode (do we need "no address"?) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   250      return ERR_VAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   251    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   252  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   253    /* hide IEEE802.15.4 header. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   254    if (pbuf_remove_header(p, datagram_offset)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   255      return ERR_VAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   256    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   257    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   258  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   259  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   260  /** Calculate the 16-bit CRC as required by IEEE 802.15.4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   261  u16_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   262  lowpan6_calc_crc(const void* buf, u16_t len)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   263  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   264  #define CCITT_POLY_16 0x8408U
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   265    u16_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   266    u8_t b;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   267    u16_t crc = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   268    const u8_t* p = (const u8_t*)buf;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   269  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   270    for (i = 0; i < len; i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   271      u8_t data = *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   272      for (b = 0U; b < 8U; b++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   273        if (((data ^ crc) & 1) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   274          crc = (u16_t)((crc >> 1) ^ CCITT_POLY_16);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   275        } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   276          crc = (u16_t)(crc >> 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   277        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   278        data = (u8_t)(data >> 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   279      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   280      p++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   281    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   282    return crc;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   283  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   284  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   285  /* Fragmentation specific functions: */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   286  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   287  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   288  free_reass_datagram(struct lowpan6_reass_helper *lrh)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   289  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   290    if (lrh->reass) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   291      pbuf_free(lrh->reass);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   292    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   293    if (lrh->frags) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   294      pbuf_free(lrh->frags);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   295    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   296    mem_free(lrh);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   297  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   298  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   299  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   300   * Removes a datagram from the reassembly queue.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   301   **/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   302  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   303  dequeue_datagram(struct lowpan6_reass_helper *lrh, struct lowpan6_reass_helper *prev)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   304  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   305    if (lowpan6_data.reass_list == lrh) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   306      lowpan6_data.reass_list = lowpan6_data.reass_list->next_packet;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   307    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   308      /* it wasn't the first, so it must have a valid 'prev' */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   309      LWIP_ASSERT("sanity check linked list", prev != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   310      prev->next_packet = lrh->next_packet;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   311    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   312  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   313  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   314  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   315   * Periodic timer for 6LowPAN functions:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   316   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   317   * - Remove incomplete/old packets
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   318   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   319  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   320  lowpan6_tmr(void)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   321  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   322    struct lowpan6_reass_helper *lrh, *lrh_next, *lrh_prev = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   323  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   324    lrh = lowpan6_data.reass_list;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   325    while (lrh != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   326      lrh_next = lrh->next_packet;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   327      if ((--lrh->timer) == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   328        dequeue_datagram(lrh, lrh_prev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   329        free_reass_datagram(lrh);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   330      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   331        lrh_prev = lrh;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   332      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   333      lrh = lrh_next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   334    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   335  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   336  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   337  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   338   * Encapsulates data into IEEE 802.15.4 frames.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   339   * Fragments an IPv6 datagram into 6LowPAN units, which fit into IEEE 802.15.4 frames.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   340   * If configured, will compress IPv6 and or UDP headers.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   341   * */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   342  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   343  lowpan6_frag(struct netif *netif, struct pbuf *p, const struct lowpan6_link_addr *src, const struct lowpan6_link_addr *dst)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   344  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   345    struct pbuf *p_frag;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   346    u16_t frag_len, remaining_len, max_data_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   347    u8_t *buffer;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   348    u8_t ieee_header_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   349    u8_t lowpan6_header_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   350    u8_t hidden_header_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   351    u16_t crc;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   352    u16_t datagram_offset;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   353    err_t err = ERR_IF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   354  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   355    LWIP_ASSERT("lowpan6_frag: netif->linkoutput not set", netif->linkoutput != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   356  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   357    /* We'll use a dedicated pbuf for building 6LowPAN fragments. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   358    p_frag = pbuf_alloc(PBUF_RAW, 127, PBUF_RAM);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   359    if (p_frag == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   360      MIB2_STATS_NETIF_INC(netif, ifoutdiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   361      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   362    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   363    LWIP_ASSERT("this needs a pbuf in one piece", p_frag->len == p_frag->tot_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   364  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   365    /* Write IEEE 802.15.4 header. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   366    buffer = (u8_t *)p_frag->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   367    ieee_header_len = lowpan6_write_iee802154_header((struct ieee_802154_hdr *)buffer, src, dst);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   368    LWIP_ASSERT("ieee_header_len < p_frag->len", ieee_header_len < p_frag->len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   369  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   370  #if LWIP_6LOWPAN_IPHC
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   371    /* Perform 6LowPAN IPv6 header compression according to RFC 6282 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   372    /* do the header compression (this does NOT copy any non-compressed data) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   373    err = lowpan6_compress_headers(netif, (u8_t *)p->payload, p->len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   374      &buffer[ieee_header_len], p_frag->len - ieee_header_len, &lowpan6_header_len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   375      &hidden_header_len, LWIP_6LOWPAN_CONTEXTS(netif), src, dst);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   376    if (err != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   377      MIB2_STATS_NETIF_INC(netif, ifoutdiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   378      pbuf_free(p_frag);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   379      return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   380    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   381    pbuf_remove_header(p, hidden_header_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   382  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   383  #else /* LWIP_6LOWPAN_IPHC */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   384    /* Send uncompressed IPv6 header with appropriate dispatch byte. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   385    lowpan6_header_len = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   386    buffer[ieee_header_len] = 0x41; /* IPv6 dispatch */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   387  #endif /* LWIP_6LOWPAN_IPHC */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   388  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   389    /* Calculate remaining packet length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   390    remaining_len = p->tot_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   391  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   392    if (remaining_len > 0x7FF) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   393      MIB2_STATS_NETIF_INC(netif, ifoutdiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   394      /* datagram_size must fit into 11 bit */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   395      pbuf_free(p_frag);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   396      return ERR_VAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   397    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   398  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   399    /* Fragment, or 1 packet? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   400    max_data_len = LOWPAN6_MAX_PAYLOAD - ieee_header_len - lowpan6_header_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   401    if (remaining_len > max_data_len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   402      u16_t data_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   403      /* We must move the 6LowPAN header to make room for the FRAG header. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   404      memmove(&buffer[ieee_header_len + 4], &buffer[ieee_header_len], lowpan6_header_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   405  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   406      /* Now we need to fragment the packet. FRAG1 header first */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   407      buffer[ieee_header_len] = 0xc0 | (((p->tot_len + hidden_header_len) >> 8) & 0x7);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   408      buffer[ieee_header_len + 1] = (p->tot_len + hidden_header_len) & 0xff;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   409  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   410      lowpan6_data.tx_datagram_tag++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   411      buffer[ieee_header_len + 2] = (lowpan6_data.tx_datagram_tag >> 8) & 0xff;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   412      buffer[ieee_header_len + 3] = lowpan6_data.tx_datagram_tag & 0xff;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   413  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   414      /* Fragment follows. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   415      data_len = (max_data_len - 4) & 0xf8;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   416      frag_len = data_len + lowpan6_header_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   417  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   418      pbuf_copy_partial(p, buffer + ieee_header_len + lowpan6_header_len + 4, frag_len - lowpan6_header_len, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   419      remaining_len -= frag_len - lowpan6_header_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   420      /* datagram offset holds the offset before compression */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   421      datagram_offset = frag_len - lowpan6_header_len + hidden_header_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   422      LWIP_ASSERT("datagram offset must be a multiple of 8", (datagram_offset & 7) == 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   423  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   424      /* Calculate frame length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   425      p_frag->len = p_frag->tot_len = ieee_header_len + 4 + frag_len + 2; /* add 2 bytes for crc*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   426  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   427      /* 2 bytes CRC */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   428      crc = LWIP_6LOWPAN_DO_CALC_CRC(p_frag->payload, p_frag->len - 2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   429      pbuf_take_at(p_frag, &crc, 2, p_frag->len - 2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   430  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   431      /* send the packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   432      MIB2_STATS_NETIF_ADD(netif, ifoutoctets, p_frag->tot_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   433      LWIP_DEBUGF(LWIP_LOWPAN6_DEBUG | LWIP_DBG_TRACE, ("lowpan6_send: sending packet %p\n", (void *)p));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   434      err = netif->linkoutput(netif, p_frag);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   435  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   436      while ((remaining_len > 0) && (err == ERR_OK)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   437        struct ieee_802154_hdr *hdr = (struct ieee_802154_hdr *)buffer;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   438        /* new frame, new seq num for ACK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   439        hdr->sequence_number = lowpan6_data.tx_frame_seq_num++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   440  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   441        buffer[ieee_header_len] |= 0x20; /* Change FRAG1 to FRAGN */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   442  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   443        LWIP_ASSERT("datagram offset must be a multiple of 8", (datagram_offset & 7) == 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   444        buffer[ieee_header_len + 4] = (u8_t)(datagram_offset >> 3); /* datagram offset in FRAGN header (datagram_offset is max. 11 bit) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   445  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   446        frag_len = (127 - ieee_header_len - 5 - 2) & 0xf8;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   447        if (frag_len > remaining_len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   448          frag_len = remaining_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   449        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   450  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   451        pbuf_copy_partial(p, buffer + ieee_header_len + 5, frag_len, p->tot_len - remaining_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   452        remaining_len -= frag_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   453        datagram_offset += frag_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   454  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   455        /* Calculate frame length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   456        p_frag->len = p_frag->tot_len = frag_len + 5 + ieee_header_len + 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   457  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   458        /* 2 bytes CRC */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   459        crc = LWIP_6LOWPAN_DO_CALC_CRC(p_frag->payload, p_frag->len - 2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   460        pbuf_take_at(p_frag, &crc, 2, p_frag->len - 2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   461  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   462        /* send the packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   463        MIB2_STATS_NETIF_ADD(netif, ifoutoctets, p_frag->tot_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   464        LWIP_DEBUGF(LWIP_LOWPAN6_DEBUG | LWIP_DBG_TRACE, ("lowpan6_send: sending packet %p\n", (void *)p));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   465        err = netif->linkoutput(netif, p_frag);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   466      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   467    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   468      /* It fits in one frame. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   469      frag_len = remaining_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   470  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   471      /* Copy IPv6 packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   472      pbuf_copy_partial(p, buffer + ieee_header_len + lowpan6_header_len, frag_len, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   473      remaining_len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   474  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   475      /* Calculate frame length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   476      p_frag->len = p_frag->tot_len = frag_len + lowpan6_header_len + ieee_header_len + 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   477      LWIP_ASSERT("", p_frag->len <= 127);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   478  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   479      /* 2 bytes CRC */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   480      crc = LWIP_6LOWPAN_DO_CALC_CRC(p_frag->payload, p_frag->len - 2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   481      pbuf_take_at(p_frag, &crc, 2, p_frag->len - 2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   482  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   483      /* send the packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   484      MIB2_STATS_NETIF_ADD(netif, ifoutoctets, p_frag->tot_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   485      LWIP_DEBUGF(LWIP_LOWPAN6_DEBUG | LWIP_DBG_TRACE, ("lowpan6_send: sending packet %p\n", (void *)p));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   486      err = netif->linkoutput(netif, p_frag);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   487    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   488  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   489    pbuf_free(p_frag);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   490  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   491    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   492  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   493  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   494  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   495   * @ingroup sixlowpan
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   496   * Set context
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   497   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   498  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   499  lowpan6_set_context(u8_t idx, const ip6_addr_t *context)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   500  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   501  #if LWIP_6LOWPAN_NUM_CONTEXTS > 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   502    if (idx >= LWIP_6LOWPAN_NUM_CONTEXTS) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   503      return ERR_ARG;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   504    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   505  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   506    IP6_ADDR_ZONECHECK(context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   507  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   508    ip6_addr_set(&lowpan6_data.lowpan6_context[idx], context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   509  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   510    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   511  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   512    LWIP_UNUSED_ARG(idx);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   513    LWIP_UNUSED_ARG(context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   514    return ERR_ARG;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   515  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   516  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   517  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   518  #if LWIP_6LOWPAN_INFER_SHORT_ADDRESS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   519  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   520   * @ingroup sixlowpan
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   521   * Set short address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   522   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   523  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   524  lowpan6_set_short_addr(u8_t addr_high, u8_t addr_low)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   525  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   526    short_mac_addr.addr[0] = addr_high;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   527    short_mac_addr.addr[1] = addr_low;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   528  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   529    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   530  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   531  #endif /* LWIP_6LOWPAN_INFER_SHORT_ADDRESS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   532  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   533  /* Create IEEE 802.15.4 address from netif address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   534  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   535  lowpan6_hwaddr_to_addr(struct netif *netif, struct lowpan6_link_addr *addr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   536  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   537    addr->addr_len = 8;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   538    if (netif->hwaddr_len == 8) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   539      LWIP_ERROR("NETIF_MAX_HWADDR_LEN >= 8 required", sizeof(netif->hwaddr) >= 8, return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   540      SMEMCPY(addr->addr, netif->hwaddr, 8);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   541    } else if (netif->hwaddr_len == 6) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   542      /* Copy from MAC-48 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   543      SMEMCPY(addr->addr, netif->hwaddr, 3);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   544      addr->addr[3] = addr->addr[4] = 0xff;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   545      SMEMCPY(&addr->addr[5], &netif->hwaddr[3], 3);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   546    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   547      /* Invalid address length, don't know how to convert this */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   548      return ERR_VAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   549    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   550    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   551  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   552  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   553  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   554   * @ingroup sixlowpan
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   555   * Resolve and fill-in IEEE 802.15.4 address header for outgoing IPv6 packet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   556   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   557   * Perform Header Compression and fragment if necessary.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   558   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   559   * @param netif The lwIP network interface which the IP packet will be sent on.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   560   * @param q The pbuf(s) containing the IP packet to be sent.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   561   * @param ip6addr The IP address of the packet destination.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   562   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   563   * @return err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   564   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   565  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   566  lowpan6_output(struct netif *netif, struct pbuf *q, const ip6_addr_t *ip6addr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   567  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   568    err_t result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   569    const u8_t *hwaddr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   570    struct lowpan6_link_addr src, dest;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   571  #if LWIP_6LOWPAN_INFER_SHORT_ADDRESS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   572    ip6_addr_t ip6_src;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   573    struct ip6_hdr *ip6_hdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   574  #endif /* LWIP_6LOWPAN_INFER_SHORT_ADDRESS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   575  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   576  #if LWIP_6LOWPAN_INFER_SHORT_ADDRESS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   577    /* Check if we can compress source address (use aligned copy) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   578    ip6_hdr = (struct ip6_hdr *)q->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   579    ip6_addr_copy_from_packed(ip6_src, ip6_hdr->src);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   580    ip6_addr_assign_zone(&ip6_src, IP6_UNICAST, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   581    if (lowpan6_get_address_mode(&ip6_src, &short_mac_addr) == 3) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   582      src.addr_len = 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   583      src.addr[0] = short_mac_addr.addr[0];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   584      src.addr[1] = short_mac_addr.addr[1];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   585    } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   586  #endif /* LWIP_6LOWPAN_INFER_SHORT_ADDRESS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   587    {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   588      result = lowpan6_hwaddr_to_addr(netif, &src);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   589      if (result != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   590        MIB2_STATS_NETIF_INC(netif, ifoutdiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   591        return result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   592      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   593    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   594  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   595    /* multicast destination IP address? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   596    if (ip6_addr_ismulticast(ip6addr)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   597      MIB2_STATS_NETIF_INC(netif, ifoutnucastpkts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   598      /* We need to send to the broadcast address.*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   599      return lowpan6_frag(netif, q, &src, &ieee_802154_broadcast);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   600    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   601  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   602    /* We have a unicast destination IP address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   603    /* @todo anycast? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   604  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   605  #if LWIP_6LOWPAN_INFER_SHORT_ADDRESS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   606    if (src.addr_len == 2) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   607      /* If source address was compressable to short_mac_addr, and dest has same subnet and
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   608       * is also compressable to 2-bytes, assume we can infer dest as a short address too. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   609      dest.addr_len = 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   610      dest.addr[0] = ((u8_t *)q->payload)[38];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   611      dest.addr[1] = ((u8_t *)q->payload)[39];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   612      if ((src.addr_len == 2) && (ip6_addr_netcmp_zoneless(&ip6_hdr->src, &ip6_hdr->dest)) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   613          (lowpan6_get_address_mode(ip6addr, &dest) == 3)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   614        MIB2_STATS_NETIF_INC(netif, ifoutucastpkts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   615        return lowpan6_frag(netif, q, &src, &dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   616      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   617    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   618  #endif /* LWIP_6LOWPAN_INFER_SHORT_ADDRESS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   619  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   620    /* Ask ND6 what to do with the packet. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   621    result = nd6_get_next_hop_addr_or_queue(netif, q, ip6addr, &hwaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   622    if (result != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   623      MIB2_STATS_NETIF_INC(netif, ifoutdiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   624      return result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   625    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   626  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   627    /* If no hardware address is returned, nd6 has queued the packet for later. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   628    if (hwaddr == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   629      return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   630    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   631  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   632    /* Send out the packet using the returned hardware address. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   633    dest.addr_len = netif->hwaddr_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   634    /* XXX: Inferring the length of the source address from the destination address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   635     * is not correct for IEEE 802.15.4, but currently we don't get this information
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   636     * from the neighbor cache */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   637    SMEMCPY(dest.addr, hwaddr, netif->hwaddr_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   638    MIB2_STATS_NETIF_INC(netif, ifoutucastpkts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   639    return lowpan6_frag(netif, q, &src, &dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   640  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   641  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   642   * @ingroup sixlowpan
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   643   * NETIF input function: don't free the input pbuf when returning != ERR_OK!
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   644   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   645  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   646  lowpan6_input(struct pbuf *p, struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   647  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   648    u8_t *puc, b;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   649    s8_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   650    struct lowpan6_link_addr src, dest;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   651    u16_t datagram_size = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   652    u16_t datagram_offset, datagram_tag;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   653    struct lowpan6_reass_helper *lrh, *lrh_next, *lrh_prev = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   654  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   655    if (p == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   656      return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   657    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   658  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   659    MIB2_STATS_NETIF_ADD(netif, ifinoctets, p->tot_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   660  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   661    if (p->len != p->tot_len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   662      /* for now, this needs a pbuf in one piece */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   663      goto lowpan6_input_discard;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   664    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   665  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   666    if (lowpan6_parse_iee802154_header(p, &src, &dest) != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   667      goto lowpan6_input_discard;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   668    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   669  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   670    /* Check dispatch. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   671    puc = (u8_t *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   672  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   673    b = *puc;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   674    if ((b & 0xf8) == 0xc0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   675      /* FRAG1 dispatch. add this packet to reassembly list. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   676      datagram_size = ((u16_t)(puc[0] & 0x07) << 8) | (u16_t)puc[1];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   677      datagram_tag = ((u16_t)puc[2] << 8) | (u16_t)puc[3];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   678  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   679      /* check for duplicate */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   680      lrh = lowpan6_data.reass_list;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   681      while (lrh != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   682        uint8_t discard = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   683        lrh_next = lrh->next_packet;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   684        if ((lrh->sender_addr.addr_len == src.addr_len) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   685            (memcmp(lrh->sender_addr.addr, src.addr, src.addr_len) == 0)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   686          /* address match with packet in reassembly. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   687          if ((datagram_tag == lrh->datagram_tag) && (datagram_size == lrh->datagram_size)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   688            /* duplicate fragment. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   689            goto lowpan6_input_discard;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   690          } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   691            /* We are receiving the start of a new datagram. Discard old one (incomplete). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   692            discard = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   693          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   694        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   695        if (discard) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   696          dequeue_datagram(lrh, lrh_prev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   697          free_reass_datagram(lrh);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   698        } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   699          lrh_prev = lrh;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   700        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   701        /* Check next datagram in queue. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   702        lrh = lrh_next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   703      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   704  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   705      pbuf_remove_header(p, 4); /* hide frag1 dispatch */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   706  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   707      lrh = (struct lowpan6_reass_helper *) mem_malloc(sizeof(struct lowpan6_reass_helper));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   708      if (lrh == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   709        goto lowpan6_input_discard;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   710      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   711  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   712      lrh->sender_addr.addr_len = src.addr_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   713      for (i = 0; i < src.addr_len; i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   714        lrh->sender_addr.addr[i] = src.addr[i];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   715      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   716      lrh->datagram_size = datagram_size;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   717      lrh->datagram_tag = datagram_tag;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   718      lrh->frags = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   719      if (*(u8_t *)p->payload == 0x41) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   720        /* This is a complete IPv6 packet, just skip dispatch byte. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   721        pbuf_remove_header(p, 1); /* hide dispatch byte. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   722        lrh->reass = p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   723      } else if ((*(u8_t *)p->payload & 0xe0 ) == 0x60) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   724        lrh->reass = lowpan6_decompress(p, datagram_size, LWIP_6LOWPAN_CONTEXTS(netif), &src, &dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   725        if (lrh->reass == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   726          /* decompression failed */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   727          mem_free(lrh);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   728          goto lowpan6_input_discard;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   729        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   730      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   731      /* TODO: handle the case where we already have FRAGN received */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   732      lrh->next_packet = lowpan6_data.reass_list;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   733      lrh->timer = 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   734      lowpan6_data.reass_list = lrh;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   735  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   736      return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   737    } else if ((b & 0xf8) == 0xe0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   738      /* FRAGN dispatch, find packet being reassembled. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   739      datagram_size = ((u16_t)(puc[0] & 0x07) << 8) | (u16_t)puc[1];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   740      datagram_tag = ((u16_t)puc[2] << 8) | (u16_t)puc[3];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   741      datagram_offset = (u16_t)puc[4] << 3;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   742      pbuf_remove_header(p, 4); /* hide frag1 dispatch but keep datagram offset for reassembly */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   743  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   744      for (lrh = lowpan6_data.reass_list; lrh != NULL; lrh_prev = lrh, lrh = lrh->next_packet) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   745        if ((lrh->sender_addr.addr_len == src.addr_len) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   746            (memcmp(lrh->sender_addr.addr, src.addr, src.addr_len) == 0) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   747            (datagram_tag == lrh->datagram_tag) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   748            (datagram_size == lrh->datagram_size)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   749          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   750        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   751      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   752      if (lrh == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   753        /* rogue fragment */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   754        goto lowpan6_input_discard;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   755      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   756      /* Insert new pbuf into list of fragments. Each fragment is a pbuf,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   757         this only works for unchained pbufs. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   758      LWIP_ASSERT("p->next == NULL", p->next == NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   759      if (lrh->reass != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   760        /* FRAG1 already received, check this offset against first len */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   761        if (datagram_offset < lrh->reass->len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   762          /* fragment overlap, discard old fragments */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   763          dequeue_datagram(lrh, lrh_prev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   764          free_reass_datagram(lrh);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   765          goto lowpan6_input_discard;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   766        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   767      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   768      if (lrh->frags == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   769        /* first FRAGN */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   770        lrh->frags = p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   771      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   772        /* find the correct place to insert */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   773        struct pbuf *q, *last;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   774        u16_t new_frag_len = p->len - 1; /* p->len includes datagram_offset byte */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   775        for (q = lrh->frags, last = NULL; q != NULL; last = q, q = q->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   776          u16_t q_datagram_offset = ((u8_t *)q->payload)[0] << 3;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   777          u16_t q_frag_len = q->len - 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   778          if (datagram_offset < q_datagram_offset) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   779            if (datagram_offset + new_frag_len > q_datagram_offset) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   780              /* overlap, discard old fragments */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   781              dequeue_datagram(lrh, lrh_prev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   782              free_reass_datagram(lrh);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   783              goto lowpan6_input_discard;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   784            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   785            /* insert here */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   786            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   787          } else if (datagram_offset == q_datagram_offset) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   788            if (q_frag_len != new_frag_len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   789              /* fragment mismatch, discard old fragments */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   790              dequeue_datagram(lrh, lrh_prev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   791              free_reass_datagram(lrh);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   792              goto lowpan6_input_discard;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   793            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   794            /* duplicate, ignore */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   795            pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   796            return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   797          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   798        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   799        /* insert fragment */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   800        if (last == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   801          lrh->frags = p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   802        } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   803          last->next = p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   804          p->next = q;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   805        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   806      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   807      /* check if all fragments were received */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   808      if (lrh->reass) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   809        u16_t offset = lrh->reass->len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   810        struct pbuf *q;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   811        for (q = lrh->frags; q != NULL; q = q->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   812          u16_t q_datagram_offset = ((u8_t *)q->payload)[0] << 3;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   813          if (q_datagram_offset != offset) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   814            /* not complete, wait for more fragments */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   815            return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   816          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   817          offset += q->len - 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   818        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   819        if (offset == datagram_size) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   820          /* all fragments received, combine pbufs */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   821          u16_t datagram_left = datagram_size - lrh->reass->len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   822          for (q = lrh->frags; q != NULL; q = q->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   823            /* hide datagram_offset byte now */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   824            pbuf_remove_header(q, 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   825            q->tot_len = datagram_left;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   826            datagram_left -= q->len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   827          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   828          LWIP_ASSERT("datagram_left == 0", datagram_left == 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   829          q = lrh->reass;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   830          q->tot_len = datagram_size;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   831          q->next = lrh->frags;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   832          lrh->frags = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   833          lrh->reass = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   834          dequeue_datagram(lrh, lrh_prev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   835          mem_free(lrh);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   836  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   837          /* @todo: distinguish unicast/multicast */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   838          MIB2_STATS_NETIF_INC(netif, ifinucastpkts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   839          return ip6_input(q, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   840        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   841      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   842      /* pbuf enqueued, waiting for more fragments */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   843      return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   844    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   845      if (b == 0x41) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   846        /* This is a complete IPv6 packet, just skip dispatch byte. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   847        pbuf_remove_header(p, 1); /* hide dispatch byte. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   848      } else if ((b & 0xe0 ) == 0x60) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   849        /* IPv6 headers are compressed using IPHC. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   850        p = lowpan6_decompress(p, datagram_size, LWIP_6LOWPAN_CONTEXTS(netif), &src, &dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   851        if (p == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   852          MIB2_STATS_NETIF_INC(netif, ifindiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   853          return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   854        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   855      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   856        goto lowpan6_input_discard;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   857      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   858  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   859      /* @todo: distinguish unicast/multicast */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   860      MIB2_STATS_NETIF_INC(netif, ifinucastpkts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   861  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   862      return ip6_input(p, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   863    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   864  lowpan6_input_discard:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   865    MIB2_STATS_NETIF_INC(netif, ifindiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   866    pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   867    /* always return ERR_OK here to prevent the caller freeing the pbuf */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   868    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   869  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   870  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   871  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   872   * @ingroup sixlowpan
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   873   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   874  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   875  lowpan6_if_init(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   876  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   877    netif->name[0] = 'L';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   878    netif->name[1] = '6';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   879    netif->output_ip6 = lowpan6_output;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   880  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   881    MIB2_INIT_NETIF(netif, snmp_ifType_other, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   882  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   883    /* maximum transfer unit */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   884    netif->mtu = 1280;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   885  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   886    /* broadcast capability */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   887    netif->flags = NETIF_FLAG_BROADCAST /* | NETIF_FLAG_LOWPAN6 */;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   888  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   889    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   890  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   891  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   892  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   893   * @ingroup sixlowpan
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   894   * Set PAN ID
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   895   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   896  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   897  lowpan6_set_pan_id(u16_t pan_id)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   898  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   899    lowpan6_data.ieee_802154_pan_id = pan_id;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   900  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   901    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   902  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   903  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   904  #if !NO_SYS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   905  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   906   * @ingroup sixlowpan
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   907   * Pass a received packet to tcpip_thread for input processing
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   908   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   909   * @param p the received packet, p->payload pointing to the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   910   *          IEEE 802.15.4 header.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   911   * @param inp the network interface on which the packet was received
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   912   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   913  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   914  tcpip_6lowpan_input(struct pbuf *p, struct netif *inp)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   915  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   916    return tcpip_inpkt(p, inp, lowpan6_input);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   917  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   918  #endif /* !NO_SYS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   919  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\lowpan6.c	   920  #endif /* LWIP_IPV6 */

	; Module end
