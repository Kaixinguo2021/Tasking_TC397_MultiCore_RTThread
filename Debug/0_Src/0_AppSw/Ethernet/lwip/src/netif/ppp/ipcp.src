	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\.ipcp.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Rtl8211f -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\ipcp.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\ipcp.src ..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\ipcp.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\ipcp.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	734
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\ipcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L5
	.byte	2
	.byte	'int',0,4,5,3
	.word	171
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	178
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	220
	.byte	7
	.word	220
	.byte	8
	.byte	'__cmpswapw',0
	.word	236
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	241
	.byte	9
	.byte	'value',0
	.word	220
	.byte	9
	.byte	'compare',0
	.word	220
	.byte	0,2
	.byte	'short int',0,2,5,10
	.byte	'__wchar_t',0,1,1,1
	.word	298
	.byte	10
	.byte	'__size_t',0,1,1,1
	.word	220
	.byte	10
	.byte	'__ptrdiff_t',0,1,1,1
	.word	171
	.byte	11,1,7
	.word	366
	.byte	10
	.byte	'__codeptr',0,1,1,1
	.word	368
	.byte	10
	.byte	'__intptr_t',0,1,1,1
	.word	171
	.byte	10
	.byte	'__uintptr_t',0,1,1,1
	.word	220
	.byte	2
	.byte	'unsigned char',0,1,8,10
	.byte	'uint8',0,2,108,29
	.word	430
	.byte	2
	.byte	'unsigned short int',0,2,7,10
	.byte	'uint16',0,2,112,29
	.word	461
	.byte	2
	.byte	'unsigned long int',0,4,7,10
	.byte	'uint32',0,2,116,29
	.word	498
	.byte	2
	.byte	'char',0,1,6,10
	.byte	'sint8',0,2,125,29
	.word	534
	.byte	10
	.byte	'sint16',0,2,129,1,29
	.word	298
	.byte	2
	.byte	'long int',0,4,5,10
	.byte	'sint32',0,2,134,1,29
	.word	572
	.byte	2
	.byte	'long long int',0,8,5,10
	.byte	'sint64',0,2,141,1,29
	.word	600
	.byte	2
	.byte	'float',0,4,4,10
	.byte	'float32',0,2,170,1,29
	.word	633
	.byte	12
	.byte	'void',0,7
	.word	659
	.byte	10
	.byte	'pvoid',0,3,54,28
	.word	665
	.byte	10
	.byte	'Ifx_TickTime',0,3,76,28
	.word	600
	.byte	10
	.byte	'u32_t',0,4,87,16
	.word	498
	.byte	10
	.byte	'intmax_t',0,5,198,2,41
	.word	600
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,22,0,3,8,58,15,59,15,57,15,73,19,0,0,11,21,0,54,15,0,0,12,59,0
	.byte	3,8,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\ipcp.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'cc.h',0,2,0,0
	.byte	'stdint.h',0,3,0,0,0
.L9:
.L7:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	     1  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	     2   * ipcp.c - PPP IP Control Protocol.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	     3   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	     4   * Copyright (c) 1984-2000 Carnegie Mellon University. All rights reserved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	     5   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	     6   * Redistribution and use in source and binary forms, with or without
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	     7   * modification, are permitted provided that the following conditions
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	     8   * are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	     9   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    10   * 1. Redistributions of source code must retain the above copyright
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    11   *    notice, this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    12   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    13   * 2. Redistributions in binary form must reproduce the above copyright
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    14   *    notice, this list of conditions and the following disclaimer in
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    15   *    the documentation and/or other materials provided with the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    16   *    distribution.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    17   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    18   * 3. The name "Carnegie Mellon University" must not be used to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    19   *    endorse or promote products derived from this software without
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    20   *    prior written permission. For permission or any legal
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    21   *    details, please contact
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    22   *      Office of Technology Transfer
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    23   *      Carnegie Mellon University
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    24   *      5000 Forbes Avenue
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    25   *      Pittsburgh, PA  15213-3890
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    26   *      (412) 268-4387, fax: (412) 268-7395
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    27   *      tech-transfer@andrew.cmu.edu
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    28   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    29   * 4. Redistributions of any form whatsoever must retain the following
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    30   *    acknowledgment:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    31   *    "This product includes software developed by Computing Services
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    32   *     at Carnegie Mellon University (http://www.cmu.edu/computing/)."
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    33   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    34   * CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    35   * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    36   * AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    37   * FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    38   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    39   * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    40   * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    41   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    42  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    43  #include "netif/ppp/ppp_opts.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    44  #if PPP_SUPPORT && PPP_IPV4_SUPPORT /* don't build if not configured for use in lwipopts.h */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    45  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    46  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    47   * @todo:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    48   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    49  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    50  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    51  #include <stdio.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    52  #include <string.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    53  #include <stdlib.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    54  #include <netdb.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    55  #include <sys/param.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    56  #include <sys/types.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    57  #include <sys/socket.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    58  #include <netinet/in.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    59  #include <arpa/inet.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    60  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    61  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    62  #include "netif/ppp/ppp_impl.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    63  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    64  #include "netif/ppp/fsm.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    65  #include "netif/ppp/ipcp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    66  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    67  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    68  /* global vars */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    69  u32_t netmask = 0;		/* IP netmask to set on interface */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    70  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    71  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    72  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    73  bool	disable_defaultip = 0;	/* Don't use hostname for default IP adrs */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    74  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    75  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    76  #if 0 /* moved to ppp_settings */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    77  bool	noremoteip = 0;		/* Let him have no IP address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    78  #endif /* moved to ppp_setting */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    79  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    80  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    81  /* Hook for a plugin to know when IP protocol has come up */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    82  void (*ip_up_hook) (void) = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    83  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    84  /* Hook for a plugin to know when IP protocol has come down */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    85  void (*ip_down_hook) (void) = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    86  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    87  /* Hook for a plugin to choose the remote IP address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    88  void (*ip_choose_hook) (u32_t *) = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    89  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    90  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    91  #if PPP_NOTIFY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    92  /* Notifiers for when IPCP goes up and down */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    93  struct notifier *ip_up_notifier = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    94  struct notifier *ip_down_notifier = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    95  #endif /* PPP_NOTIFY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    96  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    97  /* local vars */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    98  #if 0 /* moved to ppp_pcb */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	    99  static int default_route_set[NUM_PPP];	/* Have set up a default route */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   100  static int proxy_arp_set[NUM_PPP];	/* Have created proxy arp entry */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   101  static int ipcp_is_up;			/* have called np_up() */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   102  static int ipcp_is_open;		/* haven't called np_finished() */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   103  static bool ask_for_local;		/* request our address from peer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   104  #endif /* moved to ppp_pcb */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   105  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   106  static char vj_value[8];		/* string form of vj option value */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   107  static char netmask_str[20];		/* string form of netmask value */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   108  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   109  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   110  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   111   * Callbacks for fsm code.  (CI = Configuration Information)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   112   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   113  static void ipcp_resetci(fsm *f);	/* Reset our CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   114  static int  ipcp_cilen(fsm *f);	        /* Return length of our CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   115  static void ipcp_addci(fsm *f, u_char *ucp, int *lenp); /* Add our CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   116  static int  ipcp_ackci(fsm *f, u_char *p, int len);	/* Peer ack'd our CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   117  static int  ipcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject);/* Peer nak'd our CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   118  static int  ipcp_rejci(fsm *f, u_char *p, int len);	/* Peer rej'd our CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   119  static int  ipcp_reqci(fsm *f, u_char *inp, int *len, int reject_if_disagree); /* Rcv CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   120  static void ipcp_up(fsm *f);		/* We're UP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   121  static void ipcp_down(fsm *f);		/* We're DOWN */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   122  static void ipcp_finished(fsm *f);	/* Don't need lower layer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   123  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   124  static const fsm_callbacks ipcp_callbacks = { /* IPCP callback routines */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   125      ipcp_resetci,		/* Reset our Configuration Information */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   126      ipcp_cilen,			/* Length of our Configuration Information */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   127      ipcp_addci,			/* Add our Configuration Information */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   128      ipcp_ackci,			/* ACK our Configuration Information */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   129      ipcp_nakci,			/* NAK our Configuration Information */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   130      ipcp_rejci,			/* Reject our Configuration Information */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   131      ipcp_reqci,			/* Request peer's Configuration Information */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   132      ipcp_up,			/* Called when fsm reaches OPENED state */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   133      ipcp_down,			/* Called when fsm leaves OPENED state */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   134      NULL,			/* Called when we want the lower layer up */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   135      ipcp_finished,		/* Called when we want the lower layer down */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   136      NULL,			/* Called when Protocol-Reject received */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   137      NULL,			/* Retransmission is necessary */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   138      NULL,			/* Called to handle protocol-specific codes */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   139      "IPCP"			/* String name of protocol */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   140  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   141  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   142  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   143   * Command-line options.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   144   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   145  #if PPP_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   146  static int setvjslots (char **);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   147  static int setdnsaddr (char **);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   148  static int setwinsaddr (char **);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   149  static int setnetmask (char **);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   150  int setipaddr (char *, char **, int);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   151  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   152  static void printipaddr (option_t *, void (*)(void *, char *,...),void *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   153  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   154  static option_t ipcp_option_list[] = {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   155      { "noip", o_bool, &ipcp_protent.enabled_flag,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   156        "Disable IP and IPCP" },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   157      { "-ip", o_bool, &ipcp_protent.enabled_flag,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   158        "Disable IP and IPCP", OPT_ALIAS },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   159  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   160      { "novj", o_bool, &ipcp_wantoptions[0].neg_vj,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   161        "Disable VJ compression", OPT_A2CLR, &ipcp_allowoptions[0].neg_vj },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   162      { "-vj", o_bool, &ipcp_wantoptions[0].neg_vj,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   163        "Disable VJ compression", OPT_ALIAS | OPT_A2CLR,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   164        &ipcp_allowoptions[0].neg_vj },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   165  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   166      { "novjccomp", o_bool, &ipcp_wantoptions[0].cflag,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   167        "Disable VJ connection-ID compression", OPT_A2CLR,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   168        &ipcp_allowoptions[0].cflag },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   169      { "-vjccomp", o_bool, &ipcp_wantoptions[0].cflag,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   170        "Disable VJ connection-ID compression", OPT_ALIAS | OPT_A2CLR,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   171        &ipcp_allowoptions[0].cflag },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   172  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   173      { "vj-max-slots", o_special, (void *)setvjslots,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   174        "Set maximum VJ header slots",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   175        OPT_PRIO | OPT_A2STRVAL | OPT_STATIC, vj_value },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   176  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   177      { "ipcp-accept-local", o_bool, &ipcp_wantoptions[0].accept_local,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   178        "Accept peer's address for us", 1 },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   179      { "ipcp-accept-remote", o_bool, &ipcp_wantoptions[0].accept_remote,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   180        "Accept peer's address for it", 1 },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   181  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   182      { "ipparam", o_string, &ipparam,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   183        "Set ip script parameter", OPT_PRIO },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   184  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   185      { "noipdefault", o_bool, &disable_defaultip,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   186        "Don't use name for default IP adrs", 1 },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   187  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   188      { "ms-dns", 1, (void *)setdnsaddr,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   189        "DNS address for the peer's use" },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   190      { "ms-wins", 1, (void *)setwinsaddr,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   191        "Nameserver for SMB over TCP/IP for peer" },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   192  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   193      { "ipcp-restart", o_int, &ipcp_fsm[0].timeouttime,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   194        "Set timeout for IPCP", OPT_PRIO },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   195      { "ipcp-max-terminate", o_int, &ipcp_fsm[0].maxtermtransmits,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   196        "Set max #xmits for term-reqs", OPT_PRIO },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   197      { "ipcp-max-configure", o_int, &ipcp_fsm[0].maxconfreqtransmits,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   198        "Set max #xmits for conf-reqs", OPT_PRIO },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   199      { "ipcp-max-failure", o_int, &ipcp_fsm[0].maxnakloops,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   200        "Set max #conf-naks for IPCP", OPT_PRIO },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   201  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   202      { "defaultroute", o_bool, &ipcp_wantoptions[0].default_route,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   203        "Add default route", OPT_ENABLE|1, &ipcp_allowoptions[0].default_route },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   204      { "nodefaultroute", o_bool, &ipcp_allowoptions[0].default_route,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   205        "disable defaultroute option", OPT_A2CLR,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   206        &ipcp_wantoptions[0].default_route },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   207      { "-defaultroute", o_bool, &ipcp_allowoptions[0].default_route,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   208        "disable defaultroute option", OPT_ALIAS | OPT_A2CLR,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   209        &ipcp_wantoptions[0].default_route },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   210  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   211      { "replacedefaultroute", o_bool,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   212  				&ipcp_wantoptions[0].replace_default_route,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   213        "Replace default route", 1
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   214      },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   215      { "noreplacedefaultroute", o_bool,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   216  				&ipcp_allowoptions[0].replace_default_route,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   217        "Never replace default route", OPT_A2COPY,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   218  				&ipcp_wantoptions[0].replace_default_route },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   219      { "proxyarp", o_bool, &ipcp_wantoptions[0].proxy_arp,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   220        "Add proxy ARP entry", OPT_ENABLE|1, &ipcp_allowoptions[0].proxy_arp },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   221      { "noproxyarp", o_bool, &ipcp_allowoptions[0].proxy_arp,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   222        "disable proxyarp option", OPT_A2CLR,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   223        &ipcp_wantoptions[0].proxy_arp },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   224      { "-proxyarp", o_bool, &ipcp_allowoptions[0].proxy_arp,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   225        "disable proxyarp option", OPT_ALIAS | OPT_A2CLR,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   226        &ipcp_wantoptions[0].proxy_arp },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   227  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   228      { "usepeerdns", o_bool, &usepeerdns,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   229        "Ask peer for DNS address(es)", 1 },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   230  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   231      { "netmask", o_special, (void *)setnetmask,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   232        "set netmask", OPT_PRIO | OPT_A2STRVAL | OPT_STATIC, netmask_str },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   233  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   234      { "ipcp-no-addresses", o_bool, &ipcp_wantoptions[0].old_addrs,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   235        "Disable old-style IP-Addresses usage", OPT_A2CLR,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   236        &ipcp_allowoptions[0].old_addrs },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   237      { "ipcp-no-address", o_bool, &ipcp_wantoptions[0].neg_addr,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   238        "Disable IP-Address usage", OPT_A2CLR,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   239        &ipcp_allowoptions[0].neg_addr },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   240  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   241      { "noremoteip", o_bool, &noremoteip,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   242        "Allow peer to have no IP address", 1 },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   243  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   244      { "nosendip", o_bool, &ipcp_wantoptions[0].neg_addr,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   245        "Don't send our IP address to peer", OPT_A2CLR,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   246        &ipcp_wantoptions[0].old_addrs},
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   247  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   248      { "IP addresses", o_wild, (void *) &setipaddr,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   249        "set local and remote IP addresses",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   250        OPT_NOARG | OPT_A2PRINTER, (void *) &printipaddr },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   251  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   252      { NULL }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   253  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   254  #endif /* PPP_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   255  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   256  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   257   * Protocol entry points from main code.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   258   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   259  static void ipcp_init(ppp_pcb *pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   260  static void ipcp_open(ppp_pcb *pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   261  static void ipcp_close(ppp_pcb *pcb, const char *reason);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   262  static void ipcp_lowerup(ppp_pcb *pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   263  static void ipcp_lowerdown(ppp_pcb *pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   264  static void ipcp_input(ppp_pcb *pcb, u_char *p, int len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   265  static void ipcp_protrej(ppp_pcb *pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   266  #if PRINTPKT_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   267  static int ipcp_printpkt(const u_char *p, int plen,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   268  		void (*printer) (void *, const char *, ...), void *arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   269  #endif /* PRINTPKT_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   270  #if PPP_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   271  static void ip_check_options (void);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   272  #endif /* PPP_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   273  #if DEMAND_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   274  static int  ip_demand_conf (int);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   275  static int  ip_active_pkt (u_char *, int);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   276  #endif /* DEMAND_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   277  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   278  static void create_resolv (u32_t, u32_t);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   279  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   280  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   281  const struct protent ipcp_protent = {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   282      PPP_IPCP,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   283      ipcp_init,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   284      ipcp_input,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   285      ipcp_protrej,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   286      ipcp_lowerup,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   287      ipcp_lowerdown,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   288      ipcp_open,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   289      ipcp_close,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   290  #if PRINTPKT_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   291      ipcp_printpkt,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   292  #endif /* PRINTPKT_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   293  #if PPP_DATAINPUT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   294      NULL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   295  #endif /* PPP_DATAINPUT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   296  #if PRINTPKT_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   297      "IPCP",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   298      "IP",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   299  #endif /* PRINTPKT_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   300  #if PPP_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   301      ipcp_option_list,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   302      ip_check_options,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   303  #endif /* PPP_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   304  #if DEMAND_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   305      ip_demand_conf,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   306      ip_active_pkt
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   307  #endif /* DEMAND_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   308  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   309  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   310  static void ipcp_clear_addrs(ppp_pcb *pcb, u32_t ouraddr, u32_t hisaddr, u8_t replacedefaultroute);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   311  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   312  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   313   * Lengths of configuration options.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   314   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   315  #define CILEN_VOID	2
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   316  #define CILEN_COMPRESS	4	/* min length for compression protocol opt. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   317  #define CILEN_VJ	6	/* length for RFC1332 Van-Jacobson opt. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   318  #define CILEN_ADDR	6	/* new-style single address option */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   319  #define CILEN_ADDRS	10	/* old-style dual address option */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   320  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   321  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   322  #define CODENAME(x)	((x) == CONFACK ? "ACK" : \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   323  			 (x) == CONFNAK ? "NAK" : "REJ")
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   324  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   325  #if 0 /* UNUSED, already defined by lwIP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   326  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   327   * Make a string representation of a network IP address.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   328   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   329  char *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   330  ip_ntoa(ipaddr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   331  u32_t ipaddr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   332  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   333      static char b[64];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   334  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   335      slprintf(b, sizeof(b), "%I", ipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   336      return b;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   337  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   338  #endif /* UNUSED, already defined by lwIP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   339  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   340  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   341   * Option parsing.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   342   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   343  #if PPP_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   344  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   345   * setvjslots - set maximum number of connection slots for VJ compression
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   346   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   347  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   348  setvjslots(argv)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   349      char **argv;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   350  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   351      int value;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   352  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   353      if (!int_option(*argv, &value))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   354  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   355  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   356      if (value < 2 || value > 16) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   357  	option_error("vj-max-slots value must be between 2 and 16");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   358  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   359      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   360      ipcp_wantoptions [0].maxslotindex =
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   361          ipcp_allowoptions[0].maxslotindex = value - 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   362      slprintf(vj_value, sizeof(vj_value), "%d", value);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   363      return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   364  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   365  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   366  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   367   * setdnsaddr - set the dns address(es)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   368   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   369  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   370  setdnsaddr(argv)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   371      char **argv;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   372  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   373      u32_t dns;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   374      struct hostent *hp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   375  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   376      dns = inet_addr(*argv);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   377      if (dns == (u32_t) -1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   378  	if ((hp = gethostbyname(*argv)) == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   379  	    option_error("invalid address parameter '%s' for ms-dns option",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   380  			 *argv);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   381  	    return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   382  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   383  	dns = *(u32_t *)hp->h_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   384      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   385  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   386      /* We take the last 2 values given, the 2nd-last as the primary
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   387         and the last as the secondary.  If only one is given it
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   388         becomes both primary and secondary. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   389      if (ipcp_allowoptions[0].dnsaddr[1] == 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   390  	ipcp_allowoptions[0].dnsaddr[0] = dns;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   391      else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   392  	ipcp_allowoptions[0].dnsaddr[0] = ipcp_allowoptions[0].dnsaddr[1];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   393  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   394      /* always set the secondary address value. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   395      ipcp_allowoptions[0].dnsaddr[1] = dns;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   396  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   397      return (1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   398  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   399  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   400  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   401   * setwinsaddr - set the wins address(es)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   402   * This is primrarly used with the Samba package under UNIX or for pointing
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   403   * the caller to the existing WINS server on a Windows NT platform.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   404   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   405  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   406  setwinsaddr(argv)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   407      char **argv;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   408  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   409      u32_t wins;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   410      struct hostent *hp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   411  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   412      wins = inet_addr(*argv);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   413      if (wins == (u32_t) -1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   414  	if ((hp = gethostbyname(*argv)) == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   415  	    option_error("invalid address parameter '%s' for ms-wins option",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   416  			 *argv);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   417  	    return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   418  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   419  	wins = *(u32_t *)hp->h_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   420      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   421  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   422      /* We take the last 2 values given, the 2nd-last as the primary
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   423         and the last as the secondary.  If only one is given it
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   424         becomes both primary and secondary. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   425      if (ipcp_allowoptions[0].winsaddr[1] == 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   426  	ipcp_allowoptions[0].winsaddr[0] = wins;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   427      else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   428  	ipcp_allowoptions[0].winsaddr[0] = ipcp_allowoptions[0].winsaddr[1];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   429  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   430      /* always set the secondary address value. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   431      ipcp_allowoptions[0].winsaddr[1] = wins;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   432  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   433      return (1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   434  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   435  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   436  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   437   * setipaddr - Set the IP address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   438   * If doit is 0, the call is to check whether this option is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   439   * potentially an IP address specification.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   440   * Not static so that plugins can call it to set the addresses
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   441   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   442  int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   443  setipaddr(arg, argv, doit)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   444      char *arg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   445      char **argv;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   446      int doit;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   447  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   448      struct hostent *hp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   449      char *colon;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   450      u32_t local, remote;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   451      ipcp_options *wo = &ipcp_wantoptions[0];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   452      static int prio_local = 0, prio_remote = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   453  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   454      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   455       * IP address pair separated by ":".
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   456       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   457      if ((colon = strchr(arg, ':')) == NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   458  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   459      if (!doit)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   460  	return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   461    
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   462      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   463       * If colon first character, then no local addr.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   464       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   465      if (colon != arg && option_priority >= prio_local) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   466  	*colon = '\0';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   467  	if ((local = inet_addr(arg)) == (u32_t) -1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   468  	    if ((hp = gethostbyname(arg)) == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   469  		option_error("unknown host: %s", arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   470  		return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   471  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   472  	    local = *(u32_t *)hp->h_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   473  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   474  	if (bad_ip_adrs(local)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   475  	    option_error("bad local IP address %s", ip_ntoa(local));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   476  	    return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   477  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   478  	if (local != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   479  	    wo->ouraddr = local;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   480  	*colon = ':';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   481  	prio_local = option_priority;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   482      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   483    
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   484      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   485       * If colon last character, then no remote addr.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   486       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   487      if (*++colon != '\0' && option_priority >= prio_remote) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   488  	if ((remote = inet_addr(colon)) == (u32_t) -1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   489  	    if ((hp = gethostbyname(colon)) == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   490  		option_error("unknown host: %s", colon);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   491  		return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   492  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   493  	    remote = *(u32_t *)hp->h_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   494  	    if (remote_name[0] == 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   495  		strlcpy(remote_name, colon, sizeof(remote_name));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   496  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   497  	if (bad_ip_adrs(remote)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   498  	    option_error("bad remote IP address %s", ip_ntoa(remote));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   499  	    return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   500  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   501  	if (remote != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   502  	    wo->hisaddr = remote;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   503  	prio_remote = option_priority;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   504      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   505  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   506      return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   507  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   508  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   509  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   510  printipaddr(opt, printer, arg)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   511      option_t *opt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   512      void (*printer) (void *, char *, ...);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   513      void *arg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   514  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   515  	ipcp_options *wo = &ipcp_wantoptions[0];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   516  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   517  	if (wo->ouraddr != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   518  		printer(arg, "%I", wo->ouraddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   519  	printer(arg, ":");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   520  	if (wo->hisaddr != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   521  		printer(arg, "%I", wo->hisaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   522  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   523  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   524  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   525   * setnetmask - set the netmask to be used on the interface.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   526   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   527  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   528  setnetmask(argv)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   529      char **argv;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   530  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   531      u32_t mask;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   532      int n;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   533      char *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   534  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   535      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   536       * Unfortunately, if we use inet_addr, we can't tell whether
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   537       * a result of all 1s is an error or a valid 255.255.255.255.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   538       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   539      p = *argv;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   540      n = parse_dotted_ip(p, &mask);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   541  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   542      mask = lwip_htonl(mask);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   543  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   544      if (n == 0 || p[n] != 0 || (netmask & ~mask) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   545  	option_error("invalid netmask value '%s'", *argv);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   546  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   547      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   548  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   549      netmask = mask;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   550      slprintf(netmask_str, sizeof(netmask_str), "%I", mask);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   551  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   552      return (1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   553  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   554  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   555  int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   556  parse_dotted_ip(p, vp)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   557      char *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   558      u32_t *vp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   559  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   560      int n;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   561      u32_t v, b;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   562      char *endp, *p0 = p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   563  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   564      v = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   565      for (n = 3;; --n) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   566  	b = strtoul(p, &endp, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   567  	if (endp == p)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   568  	    return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   569  	if (b > 255) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   570  	    if (n < 3)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   571  		return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   572  	    /* accept e.g. 0xffffff00 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   573  	    *vp = b;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   574  	    return endp - p0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   575  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   576  	v |= b << (n * 8);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   577  	p = endp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   578  	if (n == 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   579  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   580  	if (*p != '.')
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   581  	    return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   582  	++p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   583      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   584      *vp = v;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   585      return p - p0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   586  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   587  #endif /* PPP_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   588  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   589  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   590   * ipcp_init - Initialize IPCP.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   591   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   592  static void ipcp_init(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   593      fsm *f = &pcb->ipcp_fsm;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   594  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   595      ipcp_options *wo = &pcb->ipcp_wantoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   596      ipcp_options *ao = &pcb->ipcp_allowoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   597  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   598      f->pcb = pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   599      f->protocol = PPP_IPCP;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   600      f->callbacks = &ipcp_callbacks;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   601      fsm_init(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   602  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   603      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   604       * Some 3G modems use repeated IPCP NAKs as a way of stalling
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   605       * until they can contact a server on the network, so we increase
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   606       * the default number of NAKs we accept before we start treating
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   607       * them as rejects.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   608       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   609      f->maxnakloops = 100;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   610  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   611  #if 0 /* Not necessary, everything is cleared in ppp_new() */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   612      memset(wo, 0, sizeof(*wo));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   613      memset(ao, 0, sizeof(*ao));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   614  #endif /* 0 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   615  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   616      wo->neg_addr = wo->old_addrs = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   617  #if VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   618      wo->neg_vj = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   619      wo->vj_protocol = IPCP_VJ_COMP;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   620      wo->maxslotindex = MAX_STATES - 1; /* really max index */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   621      wo->cflag = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   622  #endif /* VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   623  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   624  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   625      /* wanting default route by default */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   626      wo->default_route = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   627  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   628  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   629      ao->neg_addr = ao->old_addrs = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   630  #if VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   631      /* max slots and slot-id compression are currently hardwired in */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   632      /* ppp_if.c to 16 and 1, this needs to be changed (among other */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   633      /* things) gmc */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   634  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   635      ao->neg_vj = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   636      ao->maxslotindex = MAX_STATES - 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   637      ao->cflag = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   638  #endif /* #if VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   639  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   640  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   641      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   642       * XXX These control whether the user may use the proxyarp
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   643       * and defaultroute options.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   644       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   645      ao->proxy_arp = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   646      ao->default_route = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   647  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   648  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   649  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   650  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   651  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   652   * ipcp_open - IPCP is allowed to come up.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   653   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   654  static void ipcp_open(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   655      fsm *f = &pcb->ipcp_fsm;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   656      fsm_open(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   657      pcb->ipcp_is_open = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   658  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   659  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   660  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   661  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   662   * ipcp_close - Take IPCP down.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   663   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   664  static void ipcp_close(ppp_pcb *pcb, const char *reason) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   665      fsm *f = &pcb->ipcp_fsm;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   666      fsm_close(f, reason);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   667  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   668  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   669  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   670  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   671   * ipcp_lowerup - The lower layer is up.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   672   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   673  static void ipcp_lowerup(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   674      fsm *f = &pcb->ipcp_fsm;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   675      fsm_lowerup(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   676  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   677  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   678  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   679  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   680   * ipcp_lowerdown - The lower layer is down.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   681   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   682  static void ipcp_lowerdown(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   683      fsm *f = &pcb->ipcp_fsm;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   684      fsm_lowerdown(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   685  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   686  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   687  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   688  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   689   * ipcp_input - Input IPCP packet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   690   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   691  static void ipcp_input(ppp_pcb *pcb, u_char *p, int len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   692      fsm *f = &pcb->ipcp_fsm;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   693      fsm_input(f, p, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   694  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   695  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   696  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   697  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   698   * ipcp_protrej - A Protocol-Reject was received for IPCP.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   699   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   700   * Pretend the lower layer went down, so we shut up.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   701   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   702  static void ipcp_protrej(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   703      fsm *f = &pcb->ipcp_fsm;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   704      fsm_lowerdown(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   705  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   706  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   707  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   708  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   709   * ipcp_resetci - Reset our CI.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   710   * Called by fsm_sconfreq, Send Configure Request.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   711   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   712  static void ipcp_resetci(fsm *f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   713      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   714      ipcp_options *wo = &pcb->ipcp_wantoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   715      ipcp_options *go = &pcb->ipcp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   716      ipcp_options *ao = &pcb->ipcp_allowoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   717  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   718      wo->req_addr = (wo->neg_addr || wo->old_addrs) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   719  	(ao->neg_addr || ao->old_addrs);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   720      if (wo->ouraddr == 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   721  	wo->accept_local = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   722      if (wo->hisaddr == 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   723  	wo->accept_remote = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   724  #if LWIP_DNS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   725      wo->req_dns1 = wo->req_dns2 = pcb->settings.usepeerdns;	/* Request DNS addresses from the peer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   726  #endif /* LWIP_DNS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   727      *go = *wo;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   728      if (!pcb->ask_for_local)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   729  	go->ouraddr = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   730  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   731      if (ip_choose_hook) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   732  	ip_choose_hook(&wo->hisaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   733  	if (wo->hisaddr) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   734  	    wo->accept_remote = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   735  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   736      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   737  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   738      BZERO(&pcb->ipcp_hisoptions, sizeof(ipcp_options));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   739  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   740  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   741  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   742  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   743   * ipcp_cilen - Return length of our CI.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   744   * Called by fsm_sconfreq, Send Configure Request.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   745   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   746  static int ipcp_cilen(fsm *f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   747      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   748      ipcp_options *go = &pcb->ipcp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   749  #if VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   750      ipcp_options *wo = &pcb->ipcp_wantoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   751  #endif /* VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   752      ipcp_options *ho = &pcb->ipcp_hisoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   753  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   754  #define LENCIADDRS(neg)		(neg ? CILEN_ADDRS : 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   755  #if VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   756  #define LENCIVJ(neg, old)	(neg ? (old? CILEN_COMPRESS : CILEN_VJ) : 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   757  #endif /* VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   758  #define LENCIADDR(neg)		(neg ? CILEN_ADDR : 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   759  #if LWIP_DNS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   760  #define LENCIDNS(neg)		LENCIADDR(neg)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   761  #endif /* LWIP_DNS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   762  #if 0 /* UNUSED - WINS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   763  #define LENCIWINS(neg)		LENCIADDR(neg)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   764  #endif /* UNUSED - WINS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   765  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   766      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   767       * First see if we want to change our options to the old
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   768       * forms because we have received old forms from the peer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   769       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   770      if (go->neg_addr && go->old_addrs && !ho->neg_addr && ho->old_addrs)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   771  	go->neg_addr = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   772  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   773  #if VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   774      if (wo->neg_vj && !go->neg_vj && !go->old_vj) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   775  	/* try an older style of VJ negotiation */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   776  	/* use the old style only if the peer did */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   777  	if (ho->neg_vj && ho->old_vj) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   778  	    go->neg_vj = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   779  	    go->old_vj = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   780  	    go->vj_protocol = ho->vj_protocol;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   781  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   782      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   783  #endif /* VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   784  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   785      return (LENCIADDRS(!go->neg_addr && go->old_addrs) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   786  #if VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   787  	    LENCIVJ(go->neg_vj, go->old_vj) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   788  #endif /* VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   789  	    LENCIADDR(go->neg_addr) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   790  #if LWIP_DNS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   791  	    LENCIDNS(go->req_dns1) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   792  	    LENCIDNS(go->req_dns2) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   793  #endif /* LWIP_DNS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   794  #if 0 /* UNUSED - WINS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   795  	    LENCIWINS(go->winsaddr[0]) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   796  	    LENCIWINS(go->winsaddr[1]) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   797  #endif /* UNUSED - WINS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   798  	    0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   799  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   800  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   801  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   802  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   803   * ipcp_addci - Add our desired CIs to a packet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   804   * Called by fsm_sconfreq, Send Configure Request.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   805   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   806  static void ipcp_addci(fsm *f, u_char *ucp, int *lenp) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   807      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   808      ipcp_options *go = &pcb->ipcp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   809      int len = *lenp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   810  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   811  #define ADDCIADDRS(opt, neg, val1, val2) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   812      if (neg) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   813  	if (len >= CILEN_ADDRS) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   814  	    u32_t l; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   815  	    PUTCHAR(opt, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   816  	    PUTCHAR(CILEN_ADDRS, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   817  	    l = lwip_ntohl(val1); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   818  	    PUTLONG(l, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   819  	    l = lwip_ntohl(val2); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   820  	    PUTLONG(l, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   821  	    len -= CILEN_ADDRS; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   822  	} else \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   823  	    go->old_addrs = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   824      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   825  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   826  #if VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   827  #define ADDCIVJ(opt, neg, val, old, maxslotindex, cflag) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   828      if (neg) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   829  	int vjlen = old? CILEN_COMPRESS : CILEN_VJ; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   830  	if (len >= vjlen) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   831  	    PUTCHAR(opt, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   832  	    PUTCHAR(vjlen, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   833  	    PUTSHORT(val, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   834  	    if (!old) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   835  		PUTCHAR(maxslotindex, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   836  		PUTCHAR(cflag, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   837  	    } \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   838  	    len -= vjlen; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   839  	} else \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   840  	    neg = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   841      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   842  #endif /* VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   843  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   844  #define ADDCIADDR(opt, neg, val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   845      if (neg) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   846  	if (len >= CILEN_ADDR) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   847  	    u32_t l; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   848  	    PUTCHAR(opt, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   849  	    PUTCHAR(CILEN_ADDR, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   850  	    l = lwip_ntohl(val); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   851  	    PUTLONG(l, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   852  	    len -= CILEN_ADDR; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   853  	} else \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   854  	    neg = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   855      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   856  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   857  #if LWIP_DNS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   858  #define ADDCIDNS(opt, neg, addr) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   859      if (neg) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   860  	if (len >= CILEN_ADDR) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   861  	    u32_t l; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   862  	    PUTCHAR(opt, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   863  	    PUTCHAR(CILEN_ADDR, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   864  	    l = lwip_ntohl(addr); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   865  	    PUTLONG(l, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   866  	    len -= CILEN_ADDR; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   867  	} else \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   868  	    neg = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   869      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   870  #endif /* LWIP_DNS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   871  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   872  #if 0 /* UNUSED - WINS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   873  #define ADDCIWINS(opt, addr) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   874      if (addr) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   875  	if (len >= CILEN_ADDR) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   876  	    u32_t l; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   877  	    PUTCHAR(opt, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   878  	    PUTCHAR(CILEN_ADDR, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   879  	    l = lwip_ntohl(addr); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   880  	    PUTLONG(l, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   881  	    len -= CILEN_ADDR; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   882  	} else \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   883  	    addr = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   884      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   885  #endif /* UNUSED - WINS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   886  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   887      ADDCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   888  	       go->hisaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   889  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   890  #if VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   891      ADDCIVJ(CI_COMPRESSTYPE, go->neg_vj, go->vj_protocol, go->old_vj,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   892  	    go->maxslotindex, go->cflag);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   893  #endif /* VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   894  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   895      ADDCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   896  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   897  #if LWIP_DNS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   898      ADDCIDNS(CI_MS_DNS1, go->req_dns1, go->dnsaddr[0]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   899  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   900      ADDCIDNS(CI_MS_DNS2, go->req_dns2, go->dnsaddr[1]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   901  #endif /* LWIP_DNS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   902  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   903  #if 0 /* UNUSED - WINS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   904      ADDCIWINS(CI_MS_WINS1, go->winsaddr[0]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   905  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   906      ADDCIWINS(CI_MS_WINS2, go->winsaddr[1]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   907  #endif /* UNUSED - WINS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   908      
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   909      *lenp -= len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   910  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   911  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   912  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   913  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   914   * ipcp_ackci - Ack our CIs.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   915   * Called by fsm_rconfack, Receive Configure ACK.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   916   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   917   * Returns:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   918   *	0 - Ack was bad.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   919   *	1 - Ack was good.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   920   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   921  static int ipcp_ackci(fsm *f, u_char *p, int len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   922      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   923      ipcp_options *go = &pcb->ipcp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   924      u_short cilen, citype;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   925      u32_t cilong;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   926  #if VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   927      u_short cishort;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   928      u_char cimaxslotindex, cicflag;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   929  #endif /* VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   930  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   931      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   932       * CIs must be in exactly the same order that we sent...
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   933       * Check packet length and CI length at each step.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   934       * If we find any deviations, then this packet is bad.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   935       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   936  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   937  #define ACKCIADDRS(opt, neg, val1, val2) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   938      if (neg) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   939  	u32_t l; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   940  	if ((len -= CILEN_ADDRS) < 0) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   941  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   942  	GETCHAR(citype, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   943  	GETCHAR(cilen, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   944  	if (cilen != CILEN_ADDRS || \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   945  	    citype != opt) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   946  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   947  	GETLONG(l, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   948  	cilong = lwip_htonl(l); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   949  	if (val1 != cilong) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   950  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   951  	GETLONG(l, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   952  	cilong = lwip_htonl(l); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   953  	if (val2 != cilong) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   954  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   955      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   956  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   957  #if VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   958  #define ACKCIVJ(opt, neg, val, old, maxslotindex, cflag) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   959      if (neg) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   960  	int vjlen = old? CILEN_COMPRESS : CILEN_VJ; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   961  	if ((len -= vjlen) < 0) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   962  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   963  	GETCHAR(citype, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   964  	GETCHAR(cilen, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   965  	if (cilen != vjlen || \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   966  	    citype != opt)  \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   967  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   968  	GETSHORT(cishort, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   969  	if (cishort != val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   970  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   971  	if (!old) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   972  	    GETCHAR(cimaxslotindex, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   973  	    if (cimaxslotindex != maxslotindex) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   974  		goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   975  	    GETCHAR(cicflag, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   976  	    if (cicflag != cflag) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   977  		goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   978  	} \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   979      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   980  #endif /* VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   981  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   982  #define ACKCIADDR(opt, neg, val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   983      if (neg) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   984  	u32_t l; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   985  	if ((len -= CILEN_ADDR) < 0) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   986  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   987  	GETCHAR(citype, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   988  	GETCHAR(cilen, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   989  	if (cilen != CILEN_ADDR || \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   990  	    citype != opt) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   991  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   992  	GETLONG(l, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   993  	cilong = lwip_htonl(l); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   994  	if (val != cilong) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   995  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   996      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   997  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   998  #if LWIP_DNS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	   999  #define ACKCIDNS(opt, neg, addr) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1000      if (neg) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1001  	u32_t l; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1002  	if ((len -= CILEN_ADDR) < 0) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1003  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1004  	GETCHAR(citype, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1005  	GETCHAR(cilen, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1006  	if (cilen != CILEN_ADDR || citype != opt) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1007  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1008  	GETLONG(l, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1009  	cilong = lwip_htonl(l); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1010  	if (addr != cilong) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1011  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1012      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1013  #endif /* LWIP_DNS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1014  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1015  #if 0 /* UNUSED - WINS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1016  #define ACKCIWINS(opt, addr) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1017      if (addr) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1018  	u32_t l; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1019  	if ((len -= CILEN_ADDR) < 0) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1020  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1021  	GETCHAR(citype, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1022  	GETCHAR(cilen, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1023  	if (cilen != CILEN_ADDR || citype != opt) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1024  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1025  	GETLONG(l, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1026  	cilong = lwip_htonl(l); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1027  	if (addr != cilong) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1028  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1029      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1030  #endif /* UNUSED - WINS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1031  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1032      ACKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs, go->ouraddr,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1033  	       go->hisaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1034  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1035  #if VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1036      ACKCIVJ(CI_COMPRESSTYPE, go->neg_vj, go->vj_protocol, go->old_vj,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1037  	    go->maxslotindex, go->cflag);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1038  #endif /* VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1039  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1040      ACKCIADDR(CI_ADDR, go->neg_addr, go->ouraddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1041  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1042  #if LWIP_DNS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1043      ACKCIDNS(CI_MS_DNS1, go->req_dns1, go->dnsaddr[0]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1044  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1045      ACKCIDNS(CI_MS_DNS2, go->req_dns2, go->dnsaddr[1]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1046  #endif /* LWIP_DNS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1047  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1048  #if 0 /* UNUSED - WINS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1049      ACKCIWINS(CI_MS_WINS1, go->winsaddr[0]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1050  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1051      ACKCIWINS(CI_MS_WINS2, go->winsaddr[1]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1052  #endif /* UNUSED - WINS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1053  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1054      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1055       * If there are any remaining CIs, then this packet is bad.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1056       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1057      if (len != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1058  	goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1059      return (1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1060  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1061  bad:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1062      IPCPDEBUG(("ipcp_ackci: received bad Ack!"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1063      return (0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1064  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1065  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1066  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1067   * ipcp_nakci - Peer has sent a NAK for some of our CIs.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1068   * This should not modify any state if the Nak is bad
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1069   * or if IPCP is in the OPENED state.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1070   * Calback from fsm_rconfnakrej - Receive Configure-Nak or Configure-Reject.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1071   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1072   * Returns:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1073   *	0 - Nak was bad.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1074   *	1 - Nak was good.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1075   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1076  static int ipcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1077      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1078      ipcp_options *go = &pcb->ipcp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1079      u_char citype, cilen, *next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1080  #if VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1081      u_char cimaxslotindex, cicflag;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1082      u_short cishort;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1083  #endif /* VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1084      u32_t ciaddr1, ciaddr2, l;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1085  #if LWIP_DNS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1086      u32_t cidnsaddr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1087  #endif /* LWIP_DNS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1088      ipcp_options no;		/* options we've seen Naks for */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1089      ipcp_options try_;		/* options to request next time */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1090  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1091      BZERO(&no, sizeof(no));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1092      try_ = *go;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1093  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1094      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1095       * Any Nak'd CIs must be in exactly the same order that we sent.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1096       * Check packet length and CI length at each step.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1097       * If we find any deviations, then this packet is bad.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1098       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1099  #define NAKCIADDRS(opt, neg, code) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1100      if ((neg) && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1101  	(cilen = p[1]) == CILEN_ADDRS && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1102  	len >= cilen && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1103  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1104  	len -= cilen; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1105  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1106  	GETLONG(l, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1107  	ciaddr1 = lwip_htonl(l); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1108  	GETLONG(l, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1109  	ciaddr2 = lwip_htonl(l); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1110  	no.old_addrs = 1; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1111  	code \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1112      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1113  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1114  #if VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1115  #define NAKCIVJ(opt, neg, code) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1116      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1117  	((cilen = p[1]) == CILEN_COMPRESS || cilen == CILEN_VJ) && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1118  	len >= cilen && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1119  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1120  	len -= cilen; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1121  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1122  	GETSHORT(cishort, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1123  	no.neg = 1; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1124          code \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1125      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1126  #endif /* VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1127  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1128  #define NAKCIADDR(opt, neg, code) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1129      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1130  	(cilen = p[1]) == CILEN_ADDR && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1131  	len >= cilen && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1132  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1133  	len -= cilen; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1134  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1135  	GETLONG(l, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1136  	ciaddr1 = lwip_htonl(l); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1137  	no.neg = 1; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1138  	code \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1139      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1140  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1141  #if LWIP_DNS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1142  #define NAKCIDNS(opt, neg, code) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1143      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1144  	((cilen = p[1]) == CILEN_ADDR) && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1145  	len >= cilen && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1146  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1147  	len -= cilen; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1148  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1149  	GETLONG(l, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1150  	cidnsaddr = lwip_htonl(l); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1151  	no.neg = 1; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1152  	code \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1153      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1154  #endif /* LWIP_DNS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1155  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1156      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1157       * Accept the peer's idea of {our,his} address, if different
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1158       * from our idea, only if the accept_{local,remote} flag is set.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1159       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1160      NAKCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1161  	       if (treat_as_reject) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1162  		   try_.old_addrs = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1163  	       } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1164  		   if (go->accept_local && ciaddr1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1165  		       /* take his idea of our address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1166  		       try_.ouraddr = ciaddr1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1167  		   }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1168  		   if (go->accept_remote && ciaddr2) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1169  		       /* take his idea of his address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1170  		       try_.hisaddr = ciaddr2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1171  		   }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1172  	       }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1173  	);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1174  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1175  #if VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1176      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1177       * Accept the peer's value of maxslotindex provided that it
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1178       * is less than what we asked for.  Turn off slot-ID compression
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1179       * if the peer wants.  Send old-style compress-type option if
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1180       * the peer wants.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1181       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1182      NAKCIVJ(CI_COMPRESSTYPE, neg_vj,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1183  	    if (treat_as_reject) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1184  		try_.neg_vj = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1185  	    } else if (cilen == CILEN_VJ) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1186  		GETCHAR(cimaxslotindex, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1187  		GETCHAR(cicflag, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1188  		if (cishort == IPCP_VJ_COMP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1189  		    try_.old_vj = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1190  		    if (cimaxslotindex < go->maxslotindex)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1191  			try_.maxslotindex = cimaxslotindex;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1192  		    if (!cicflag)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1193  			try_.cflag = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1194  		} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1195  		    try_.neg_vj = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1196  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1197  	    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1198  		if (cishort == IPCP_VJ_COMP || cishort == IPCP_VJ_COMP_OLD) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1199  		    try_.old_vj = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1200  		    try_.vj_protocol = cishort;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1201  		} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1202  		    try_.neg_vj = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1203  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1204  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1205  	    );
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1206  #endif /* VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1207  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1208      NAKCIADDR(CI_ADDR, neg_addr,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1209  	      if (treat_as_reject) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1210  		  try_.neg_addr = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1211  		  try_.old_addrs = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1212  	      } else if (go->accept_local && ciaddr1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1213  		  /* take his idea of our address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1214  		  try_.ouraddr = ciaddr1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1215  	      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1216  	      );
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1217  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1218  #if LWIP_DNS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1219      NAKCIDNS(CI_MS_DNS1, req_dns1,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1220  	     if (treat_as_reject) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1221  		 try_.req_dns1 = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1222  	     } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1223  		 try_.dnsaddr[0] = cidnsaddr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1224  	     }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1225  	     );
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1226  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1227      NAKCIDNS(CI_MS_DNS2, req_dns2,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1228  	     if (treat_as_reject) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1229  		 try_.req_dns2 = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1230  	     } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1231  		 try_.dnsaddr[1] = cidnsaddr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1232  	     }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1233  	     );
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1234  #endif /* #if LWIP_DNS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1235  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1236      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1237       * There may be remaining CIs, if the peer is requesting negotiation
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1238       * on an option that we didn't include in our request packet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1239       * If they want to negotiate about IP addresses, we comply.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1240       * If they want us to ask for compression, we refuse.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1241       * If they want us to ask for ms-dns, we do that, since some
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1242       * peers get huffy if we don't.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1243       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1244      while (len >= CILEN_VOID) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1245  	GETCHAR(citype, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1246  	GETCHAR(cilen, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1247  	if ( cilen < CILEN_VOID || (len -= cilen) < 0 )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1248  	    goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1249  	next = p + cilen - 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1250  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1251  	switch (citype) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1252  #if VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1253  	case CI_COMPRESSTYPE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1254  	    if (go->neg_vj || no.neg_vj ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1255  		(cilen != CILEN_VJ && cilen != CILEN_COMPRESS))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1256  		goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1257  	    no.neg_vj = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1258  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1259  #endif /* VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1260  	case CI_ADDRS:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1261  	    if ((!go->neg_addr && go->old_addrs) || no.old_addrs
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1262  		|| cilen != CILEN_ADDRS)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1263  		goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1264  	    try_.neg_addr = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1265  	    GETLONG(l, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1266  	    ciaddr1 = lwip_htonl(l);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1267  	    if (ciaddr1 && go->accept_local)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1268  		try_.ouraddr = ciaddr1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1269  	    GETLONG(l, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1270  	    ciaddr2 = lwip_htonl(l);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1271  	    if (ciaddr2 && go->accept_remote)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1272  		try_.hisaddr = ciaddr2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1273  	    no.old_addrs = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1274  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1275  	case CI_ADDR:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1276  	    if (go->neg_addr || no.neg_addr || cilen != CILEN_ADDR)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1277  		goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1278  	    try_.old_addrs = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1279  	    GETLONG(l, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1280  	    ciaddr1 = lwip_htonl(l);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1281  	    if (ciaddr1 && go->accept_local)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1282  		try_.ouraddr = ciaddr1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1283  	    if (try_.ouraddr != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1284  		try_.neg_addr = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1285  	    no.neg_addr = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1286  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1287  #if LWIP_DNS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1288  	case CI_MS_DNS1:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1289  	    if (go->req_dns1 || no.req_dns1 || cilen != CILEN_ADDR)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1290  		goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1291  	    GETLONG(l, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1292  	    try_.dnsaddr[0] = lwip_htonl(l);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1293  	    try_.req_dns1 = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1294  	    no.req_dns1 = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1295  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1296  	case CI_MS_DNS2:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1297  	    if (go->req_dns2 || no.req_dns2 || cilen != CILEN_ADDR)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1298  		goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1299  	    GETLONG(l, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1300  	    try_.dnsaddr[1] = lwip_htonl(l);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1301  	    try_.req_dns2 = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1302  	    no.req_dns2 = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1303  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1304  #endif /* LWIP_DNS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1305  #if 0 /* UNUSED - WINS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1306  	case CI_MS_WINS1:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1307  	case CI_MS_WINS2:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1308  	    if (cilen != CILEN_ADDR)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1309  		goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1310  	    GETLONG(l, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1311  	    ciaddr1 = lwip_htonl(l);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1312  	    if (ciaddr1)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1313  		try_.winsaddr[citype == CI_MS_WINS2] = ciaddr1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1314  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1315  #endif /* UNUSED - WINS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1316  	default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1317  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1318  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1319  	p = next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1320      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1321  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1322      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1323       * OK, the Nak is good.  Now we can update state.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1324       * If there are any remaining options, we ignore them.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1325       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1326      if (f->state != PPP_FSM_OPENED)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1327  	*go = try_;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1328  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1329      return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1330  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1331  bad:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1332      IPCPDEBUG(("ipcp_nakci: received bad Nak!"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1333      return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1334  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1335  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1336  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1337  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1338   * ipcp_rejci - Reject some of our CIs.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1339   * Callback from fsm_rconfnakrej.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1340   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1341  static int ipcp_rejci(fsm *f, u_char *p, int len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1342      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1343      ipcp_options *go = &pcb->ipcp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1344      u_char cilen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1345  #if VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1346      u_char cimaxslotindex, ciflag;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1347      u_short cishort;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1348  #endif /* VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1349      u32_t cilong;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1350      ipcp_options try_;		/* options to request next time */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1351  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1352      try_ = *go;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1353      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1354       * Any Rejected CIs must be in exactly the same order that we sent.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1355       * Check packet length and CI length at each step.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1356       * If we find any deviations, then this packet is bad.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1357       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1358  #define REJCIADDRS(opt, neg, val1, val2) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1359      if ((neg) && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1360  	(cilen = p[1]) == CILEN_ADDRS && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1361  	len >= cilen && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1362  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1363  	u32_t l; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1364  	len -= cilen; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1365  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1366  	GETLONG(l, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1367  	cilong = lwip_htonl(l); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1368  	/* Check rejected value. */ \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1369  	if (cilong != val1) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1370  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1371  	GETLONG(l, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1372  	cilong = lwip_htonl(l); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1373  	/* Check rejected value. */ \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1374  	if (cilong != val2) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1375  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1376  	try_.old_addrs = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1377      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1378  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1379  #if VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1380  #define REJCIVJ(opt, neg, val, old, maxslot, cflag) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1381      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1382  	p[1] == (old? CILEN_COMPRESS : CILEN_VJ) && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1383  	len >= p[1] && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1384  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1385  	len -= p[1]; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1386  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1387  	GETSHORT(cishort, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1388  	/* Check rejected value. */  \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1389  	if (cishort != val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1390  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1391  	if (!old) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1392  	   GETCHAR(cimaxslotindex, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1393  	   if (cimaxslotindex != maxslot) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1394  	     goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1395  	   GETCHAR(ciflag, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1396  	   if (ciflag != cflag) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1397  	     goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1398          } \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1399  	try_.neg = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1400       }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1401  #endif /* VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1402  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1403  #define REJCIADDR(opt, neg, val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1404      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1405  	(cilen = p[1]) == CILEN_ADDR && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1406  	len >= cilen && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1407  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1408  	u32_t l; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1409  	len -= cilen; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1410  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1411  	GETLONG(l, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1412  	cilong = lwip_htonl(l); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1413  	/* Check rejected value. */ \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1414  	if (cilong != val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1415  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1416  	try_.neg = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1417      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1418  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1419  #if LWIP_DNS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1420  #define REJCIDNS(opt, neg, dnsaddr) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1421      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1422  	((cilen = p[1]) == CILEN_ADDR) && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1423  	len >= cilen && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1424  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1425  	u32_t l; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1426  	len -= cilen; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1427  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1428  	GETLONG(l, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1429  	cilong = lwip_htonl(l); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1430  	/* Check rejected value. */ \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1431  	if (cilong != dnsaddr) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1432  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1433  	try_.neg = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1434      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1435  #endif /* LWIP_DNS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1436  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1437  #if 0 /* UNUSED - WINS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1438  #define REJCIWINS(opt, addr) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1439      if (addr && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1440  	((cilen = p[1]) == CILEN_ADDR) && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1441  	len >= cilen && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1442  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1443  	u32_t l; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1444  	len -= cilen; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1445  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1446  	GETLONG(l, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1447  	cilong = lwip_htonl(l); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1448  	/* Check rejected value. */ \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1449  	if (cilong != addr) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1450  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1451  	try_.winsaddr[opt == CI_MS_WINS2] = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1452      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1453  #endif /* UNUSED - WINS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1454  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1455      REJCIADDRS(CI_ADDRS, !go->neg_addr && go->old_addrs,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1456  	       go->ouraddr, go->hisaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1457  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1458  #if VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1459      REJCIVJ(CI_COMPRESSTYPE, neg_vj, go->vj_protocol, go->old_vj,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1460  	    go->maxslotindex, go->cflag);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1461  #endif /* VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1462  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1463      REJCIADDR(CI_ADDR, neg_addr, go->ouraddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1464  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1465  #if LWIP_DNS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1466      REJCIDNS(CI_MS_DNS1, req_dns1, go->dnsaddr[0]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1467  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1468      REJCIDNS(CI_MS_DNS2, req_dns2, go->dnsaddr[1]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1469  #endif /* LWIP_DNS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1470  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1471  #if 0 /* UNUSED - WINS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1472      REJCIWINS(CI_MS_WINS1, go->winsaddr[0]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1473  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1474      REJCIWINS(CI_MS_WINS2, go->winsaddr[1]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1475  #endif /* UNUSED - WINS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1476  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1477      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1478       * If there are any remaining CIs, then this packet is bad.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1479       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1480      if (len != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1481  	goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1482      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1483       * Now we can update state.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1484       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1485      if (f->state != PPP_FSM_OPENED)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1486  	*go = try_;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1487      return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1488  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1489  bad:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1490      IPCPDEBUG(("ipcp_rejci: received bad Reject!"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1491      return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1492  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1493  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1494  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1495  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1496   * ipcp_reqci - Check the peer's requested CIs and send appropriate response.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1497   * Callback from fsm_rconfreq, Receive Configure Request
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1498   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1499   * Returns: CONFACK, CONFNAK or CONFREJ and input packet modified
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1500   * appropriately.  If reject_if_disagree is non-zero, doesn't return
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1501   * CONFNAK; returns CONFREJ if it can't return CONFACK.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1502   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1503   * inp = Requested CIs
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1504   * len = Length of requested CIs
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1505   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1506  static int ipcp_reqci(fsm *f, u_char *inp, int *len, int reject_if_disagree) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1507      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1508      ipcp_options *wo = &pcb->ipcp_wantoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1509      ipcp_options *ho = &pcb->ipcp_hisoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1510      ipcp_options *ao = &pcb->ipcp_allowoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1511      u_char *cip, *next;		/* Pointer to current and next CIs */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1512      u_short cilen, citype;	/* Parsed len, type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1513  #if VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1514      u_short cishort;		/* Parsed short value */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1515  #endif /* VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1516      u32_t tl, ciaddr1, ciaddr2;/* Parsed address values */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1517      int rc = CONFACK;		/* Final packet return code */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1518      int orc;			/* Individual option return code */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1519      u_char *p;			/* Pointer to next char to parse */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1520      u_char *ucp = inp;		/* Pointer to current output char */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1521      int l = *len;		/* Length left */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1522  #if VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1523      u_char maxslotindex, cflag;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1524  #endif /* VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1525  #if LWIP_DNS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1526      int d;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1527  #endif /* LWIP_DNS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1528  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1529      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1530       * Reset all his options.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1531       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1532      BZERO(ho, sizeof(*ho));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1533      
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1534      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1535       * Process all his options.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1536       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1537      next = inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1538      while (l) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1539  	orc = CONFACK;			/* Assume success */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1540  	cip = p = next;			/* Remember begining of CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1541  	if (l < 2 ||			/* Not enough data for CI header or */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1542  	    p[1] < 2 ||			/*  CI length too small or */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1543  	    p[1] > l) {			/*  CI length too big? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1544  	    IPCPDEBUG(("ipcp_reqci: bad CI length!"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1545  	    orc = CONFREJ;		/* Reject bad CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1546  	    cilen = l;			/* Reject till end of packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1547  	    l = 0;			/* Don't loop again */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1548  	    goto endswitch;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1549  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1550  	GETCHAR(citype, p);		/* Parse CI type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1551  	GETCHAR(cilen, p);		/* Parse CI length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1552  	l -= cilen;			/* Adjust remaining length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1553  	next += cilen;			/* Step to next CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1554  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1555  	switch (citype) {		/* Check CI type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1556  	case CI_ADDRS:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1557  	    if (!ao->old_addrs || ho->neg_addr ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1558  		cilen != CILEN_ADDRS) {	/* Check CI length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1559  		orc = CONFREJ;		/* Reject CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1560  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1561  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1562  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1563  	    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1564  	     * If he has no address, or if we both have his address but
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1565  	     * disagree about it, then NAK it with our idea.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1566  	     * In particular, if we don't know his address, but he does,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1567  	     * then accept it.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1568  	     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1569  	    GETLONG(tl, p);		/* Parse source address (his) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1570  	    ciaddr1 = lwip_htonl(tl);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1571  	    if (ciaddr1 != wo->hisaddr
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1572  		&& (ciaddr1 == 0 || !wo->accept_remote)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1573  		orc = CONFNAK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1574  		if (!reject_if_disagree) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1575  		    DECPTR(sizeof(u32_t), p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1576  		    tl = lwip_ntohl(wo->hisaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1577  		    PUTLONG(tl, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1578  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1579  	    } else if (ciaddr1 == 0 && wo->hisaddr == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1580  		/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1581  		 * If neither we nor he knows his address, reject the option.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1582  		 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1583  		orc = CONFREJ;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1584  		wo->req_addr = 0;	/* don't NAK with 0.0.0.0 later */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1585  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1586  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1587  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1588  	    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1589  	     * If he doesn't know our address, or if we both have our address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1590  	     * but disagree about it, then NAK it with our idea.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1591  	     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1592  	    GETLONG(tl, p);		/* Parse desination address (ours) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1593  	    ciaddr2 = lwip_htonl(tl);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1594  	    if (ciaddr2 != wo->ouraddr) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1595  		if (ciaddr2 == 0 || !wo->accept_local) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1596  		    orc = CONFNAK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1597  		    if (!reject_if_disagree) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1598  			DECPTR(sizeof(u32_t), p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1599  			tl = lwip_ntohl(wo->ouraddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1600  			PUTLONG(tl, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1601  		    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1602  		} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1603  		    wo->ouraddr = ciaddr2;	/* accept peer's idea */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1604  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1605  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1606  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1607  	    ho->old_addrs = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1608  	    ho->hisaddr = ciaddr1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1609  	    ho->ouraddr = ciaddr2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1610  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1611  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1612  	case CI_ADDR:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1613  	    if (!ao->neg_addr || ho->old_addrs ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1614  		cilen != CILEN_ADDR) {	/* Check CI length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1615  		orc = CONFREJ;		/* Reject CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1616  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1617  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1618  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1619  	    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1620  	     * If he has no address, or if we both have his address but
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1621  	     * disagree about it, then NAK it with our idea.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1622  	     * In particular, if we don't know his address, but he does,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1623  	     * then accept it.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1624  	     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1625  	    GETLONG(tl, p);	/* Parse source address (his) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1626  	    ciaddr1 = lwip_htonl(tl);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1627  	    if (ciaddr1 != wo->hisaddr
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1628  		&& (ciaddr1 == 0 || !wo->accept_remote)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1629  		orc = CONFNAK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1630  		if (!reject_if_disagree) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1631  		    DECPTR(sizeof(u32_t), p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1632  		    tl = lwip_ntohl(wo->hisaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1633  		    PUTLONG(tl, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1634  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1635  	    } else if (ciaddr1 == 0 && wo->hisaddr == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1636  		/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1637  		 * Don't ACK an address of 0.0.0.0 - reject it instead.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1638  		 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1639  		orc = CONFREJ;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1640  		wo->req_addr = 0;	/* don't NAK with 0.0.0.0 later */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1641  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1642  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1643  	
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1644  	    ho->neg_addr = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1645  	    ho->hisaddr = ciaddr1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1646  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1647  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1648  #if LWIP_DNS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1649  	case CI_MS_DNS1:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1650  	case CI_MS_DNS2:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1651  	    /* Microsoft primary or secondary DNS request */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1652  	    d = citype == CI_MS_DNS2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1653  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1654  	    /* If we do not have a DNS address then we cannot send it */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1655  	    if (ao->dnsaddr[d] == 0 ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1656  		cilen != CILEN_ADDR) {	/* Check CI length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1657  		orc = CONFREJ;		/* Reject CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1658  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1659  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1660  	    GETLONG(tl, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1661  	    if (lwip_htonl(tl) != ao->dnsaddr[d]) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1662                  DECPTR(sizeof(u32_t), p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1663  		tl = lwip_ntohl(ao->dnsaddr[d]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1664  		PUTLONG(tl, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1665  		orc = CONFNAK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1666              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1667              break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1668  #endif /* LWIP_DNS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1669  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1670  #if 0 /* UNUSED - WINS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1671  	case CI_MS_WINS1:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1672  	case CI_MS_WINS2:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1673  	    /* Microsoft primary or secondary WINS request */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1674  	    d = citype == CI_MS_WINS2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1675  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1676  	    /* If we do not have a DNS address then we cannot send it */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1677  	    if (ao->winsaddr[d] == 0 ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1678  		cilen != CILEN_ADDR) {	/* Check CI length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1679  		orc = CONFREJ;		/* Reject CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1680  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1681  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1682  	    GETLONG(tl, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1683  	    if (lwip_htonl(tl) != ao->winsaddr[d]) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1684                  DECPTR(sizeof(u32_t), p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1685  		tl = lwip_ntohl(ao->winsaddr[d]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1686  		PUTLONG(tl, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1687  		orc = CONFNAK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1688              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1689              break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1690  #endif /* UNUSED - WINS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1691  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1692  #if VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1693  	case CI_COMPRESSTYPE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1694  	    if (!ao->neg_vj ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1695  		(cilen != CILEN_VJ && cilen != CILEN_COMPRESS)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1696  		orc = CONFREJ;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1697  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1698  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1699  	    GETSHORT(cishort, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1700  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1701  	    if (!(cishort == IPCP_VJ_COMP ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1702  		  (cishort == IPCP_VJ_COMP_OLD && cilen == CILEN_COMPRESS))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1703  		orc = CONFREJ;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1704  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1705  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1706  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1707  	    ho->neg_vj = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1708  	    ho->vj_protocol = cishort;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1709  	    if (cilen == CILEN_VJ) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1710  		GETCHAR(maxslotindex, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1711  		if (maxslotindex > ao->maxslotindex) { 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1712  		    orc = CONFNAK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1713  		    if (!reject_if_disagree){
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1714  			DECPTR(1, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1715  			PUTCHAR(ao->maxslotindex, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1716  		    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1717  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1718  		GETCHAR(cflag, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1719  		if (cflag && !ao->cflag) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1720  		    orc = CONFNAK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1721  		    if (!reject_if_disagree){
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1722  			DECPTR(1, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1723  			PUTCHAR(wo->cflag, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1724  		    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1725  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1726  		ho->maxslotindex = maxslotindex;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1727  		ho->cflag = cflag;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1728  	    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1729  		ho->old_vj = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1730  		ho->maxslotindex = MAX_STATES - 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1731  		ho->cflag = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1732  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1733  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1734  #endif /* VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1735  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1736  	default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1737  	    orc = CONFREJ;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1738  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1739  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1740  endswitch:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1741  	if (orc == CONFACK &&		/* Good CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1742  	    rc != CONFACK)		/*  but prior CI wasnt? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1743  	    continue;			/* Don't send this one */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1744  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1745  	if (orc == CONFNAK) {		/* Nak this CI? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1746  	    if (reject_if_disagree)	/* Getting fed up with sending NAKs? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1747  		orc = CONFREJ;		/* Get tough if so */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1748  	    else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1749  		if (rc == CONFREJ)	/* Rejecting prior CI? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1750  		    continue;		/* Don't send this one */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1751  		if (rc == CONFACK) {	/* Ack'd all prior CIs? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1752  		    rc = CONFNAK;	/* Not anymore... */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1753  		    ucp = inp;		/* Backup */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1754  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1755  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1756  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1757  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1758  	if (orc == CONFREJ &&		/* Reject this CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1759  	    rc != CONFREJ) {		/*  but no prior ones? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1760  	    rc = CONFREJ;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1761  	    ucp = inp;			/* Backup */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1762  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1763  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1764  	/* Need to move CI? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1765  	if (ucp != cip)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1766  	    MEMCPY(ucp, cip, cilen);	/* Move it */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1767  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1768  	/* Update output pointer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1769  	INCPTR(cilen, ucp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1770      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1771  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1772      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1773       * If we aren't rejecting this packet, and we want to negotiate
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1774       * their address, and they didn't send their address, then we
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1775       * send a NAK with a CI_ADDR option appended.  We assume the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1776       * input buffer is long enough that we can append the extra
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1777       * option safely.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1778       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1779      if (rc != CONFREJ && !ho->neg_addr && !ho->old_addrs &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1780  	wo->req_addr && !reject_if_disagree && !pcb->settings.noremoteip) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1781  	if (rc == CONFACK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1782  	    rc = CONFNAK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1783  	    ucp = inp;			/* reset pointer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1784  	    wo->req_addr = 0;		/* don't ask again */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1785  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1786  	PUTCHAR(CI_ADDR, ucp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1787  	PUTCHAR(CILEN_ADDR, ucp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1788  	tl = lwip_ntohl(wo->hisaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1789  	PUTLONG(tl, ucp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1790      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1791  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1792      *len = ucp - inp;			/* Compute output length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1793      IPCPDEBUG(("ipcp: returning Configure-%s", CODENAME(rc)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1794      return (rc);			/* Return final code */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1795  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1796  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1797  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1798  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1799  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1800   * ip_check_options - check that any IP-related options are OK,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1801   * and assign appropriate defaults.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1802   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1803  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1804  ip_check_options()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1805  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1806      struct hostent *hp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1807      u32_t local;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1808      ipcp_options *wo = &ipcp_wantoptions[0];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1809  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1810      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1811       * Default our local IP address based on our hostname.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1812       * If local IP address already given, don't bother.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1813       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1814      if (wo->ouraddr == 0 && !disable_defaultip) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1815  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1816  	 * Look up our hostname (possibly with domain name appended)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1817  	 * and take the first IP address as our local IP address.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1818  	 * If there isn't an IP address for our hostname, too bad.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1819  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1820  	wo->accept_local = 1;	/* don't insist on this default value */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1821  	if ((hp = gethostbyname(hostname)) != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1822  	    local = *(u32_t *)hp->h_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1823  	    if (local != 0 && !bad_ip_adrs(local))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1824  		wo->ouraddr = local;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1825  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1826      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1827      ask_for_local = wo->ouraddr != 0 || !disable_defaultip;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1828  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1829  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1830  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1831  #if DEMAND_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1832  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1833   * ip_demand_conf - configure the interface as though
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1834   * IPCP were up, for use with dial-on-demand.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1835   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1836  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1837  ip_demand_conf(u)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1838      int u;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1839  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1840      ppp_pcb *pcb = &ppp_pcb_list[u];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1841      ipcp_options *wo = &ipcp_wantoptions[u];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1842  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1843      if (wo->hisaddr == 0 && !pcb->settings.noremoteip) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1844  	/* make up an arbitrary address for the peer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1845  	wo->hisaddr = lwip_htonl(0x0a707070 + ifunit);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1846  	wo->accept_remote = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1847      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1848      if (wo->ouraddr == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1849  	/* make up an arbitrary address for us */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1850  	wo->ouraddr = lwip_htonl(0x0a404040 + ifunit);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1851  	wo->accept_local = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1852  	ask_for_local = 0;	/* don't tell the peer this address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1853      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1854      if (!sifaddr(pcb, wo->ouraddr, wo->hisaddr, get_mask(wo->ouraddr)))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1855  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1856      if (!sifup(pcb))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1857  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1858      if (!sifnpmode(pcb, PPP_IP, NPMODE_QUEUE))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1859  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1860  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1861      if (wo->default_route)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1862  	if (sifdefaultroute(pcb, wo->ouraddr, wo->hisaddr,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1863  		wo->replace_default_route))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1864  	    default_route_set[u] = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1865  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1866  #if 0 /* UNUSED - PROXY ARP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1867      if (wo->proxy_arp)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1868  	if (sifproxyarp(pcb, wo->hisaddr))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1869  	    proxy_arp_set[u] = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1870  #endif /* UNUSED - PROXY ARP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1871  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1872      ppp_notice("local  IP address %I", wo->ouraddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1873      if (wo->hisaddr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1874  	ppp_notice("remote IP address %I", wo->hisaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1875  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1876      return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1877  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1878  #endif /* DEMAND_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1879  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1880  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1881   * ipcp_up - IPCP has come UP.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1882   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1883   * Configure the IP network interface appropriately and bring it up.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1884   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1885  static void ipcp_up(fsm *f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1886      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1887      u32_t mask;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1888      ipcp_options *ho = &pcb->ipcp_hisoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1889      ipcp_options *go = &pcb->ipcp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1890      ipcp_options *wo = &pcb->ipcp_wantoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1891  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1892      IPCPDEBUG(("ipcp: up"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1893  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1894      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1895       * We must have a non-zero IP address for both ends of the link.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1896       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1897      if (!ho->neg_addr && !ho->old_addrs)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1898  	ho->hisaddr = wo->hisaddr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1899  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1900      if (!(go->neg_addr || go->old_addrs) && (wo->neg_addr || wo->old_addrs)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1901  	&& wo->ouraddr != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1902  	ppp_error("Peer refused to agree to our IP address");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1903  	ipcp_close(f->pcb, "Refused our IP address");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1904  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1905      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1906      if (go->ouraddr == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1907  	ppp_error("Could not determine local IP address");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1908  	ipcp_close(f->pcb, "Could not determine local IP address");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1909  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1910      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1911      if (ho->hisaddr == 0 && !pcb->settings.noremoteip) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1912  	ho->hisaddr = lwip_htonl(0x0a404040);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1913  	ppp_warn("Could not determine remote IP address: defaulting to %I",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1914  	     ho->hisaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1915      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1916  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1917      script_setenv("IPLOCAL", ip_ntoa(go->ouraddr), 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1918      if (ho->hisaddr != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1919  	script_setenv("IPREMOTE", ip_ntoa(ho->hisaddr), 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1920  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1921  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1922  #if LWIP_DNS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1923      if (!go->req_dns1)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1924  	    go->dnsaddr[0] = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1925      if (!go->req_dns2)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1926  	    go->dnsaddr[1] = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1927  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1928      if (go->dnsaddr[0])
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1929  	script_setenv("DNS1", ip_ntoa(go->dnsaddr[0]), 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1930      if (go->dnsaddr[1])
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1931  	script_setenv("DNS2", ip_ntoa(go->dnsaddr[1]), 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1932  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1933      if (pcb->settings.usepeerdns && (go->dnsaddr[0] || go->dnsaddr[1])) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1934  	sdns(pcb, go->dnsaddr[0], go->dnsaddr[1]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1935  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1936  	script_setenv("USEPEERDNS", "1", 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1937  	create_resolv(go->dnsaddr[0], go->dnsaddr[1]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1938  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1939      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1940  #endif /* LWIP_DNS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1941  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1942      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1943       * Check that the peer is allowed to use the IP address it wants.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1944       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1945      if (ho->hisaddr != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1946  	u32_t addr = lwip_ntohl(ho->hisaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1947  	if ((addr >> IP_CLASSA_NSHIFT) == IP_LOOPBACKNET
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1948  	    || IP_MULTICAST(addr) || IP_BADCLASS(addr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1949  	    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1950  	     * For now, consider that PPP in server mode with peer required
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1951  	     * to authenticate must provide the peer IP address, reject any
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1952  	     * IP address wanted by peer different than the one we wanted.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1953  	     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1954  #if PPP_SERVER && PPP_AUTH_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1955  	    || (pcb->settings.auth_required && wo->hisaddr != ho->hisaddr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1956  #endif /* PPP_SERVER && PPP_AUTH_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1957  	    ) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1958  		ppp_error("Peer is not authorized to use remote address %I", ho->hisaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1959  		ipcp_close(pcb, "Unauthorized remote IP address");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1960  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1961  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1962      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1963  #if 0 /* Unused */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1964      /* Upstream checking code */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1965      if (ho->hisaddr != 0 && !auth_ip_addr(f->unit, ho->hisaddr)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1966  	ppp_error("Peer is not authorized to use remote address %I", ho->hisaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1967  	ipcp_close(f->unit, "Unauthorized remote IP address");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1968  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1969      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1970  #endif /* Unused */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1971  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1972  #if VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1973      /* set tcp compression */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1974      sifvjcomp(pcb, ho->neg_vj, ho->cflag, ho->maxslotindex);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1975  #endif /* VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1976  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1977  #if DEMAND_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1978      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1979       * If we are doing dial-on-demand, the interface is already
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1980       * configured, so we put out any saved-up packets, then set the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1981       * interface to pass IP packets.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1982       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1983      if (demand) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1984  	if (go->ouraddr != wo->ouraddr || ho->hisaddr != wo->hisaddr) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1985  	    ipcp_clear_addrs(f->unit, wo->ouraddr, wo->hisaddr,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1986  				      wo->replace_default_route);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1987  	    if (go->ouraddr != wo->ouraddr) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1988  		ppp_warn("Local IP address changed to %I", go->ouraddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1989  		script_setenv("OLDIPLOCAL", ip_ntoa(wo->ouraddr), 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1990  		wo->ouraddr = go->ouraddr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1991  	    } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1992  		script_unsetenv("OLDIPLOCAL");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1993  	    if (ho->hisaddr != wo->hisaddr && wo->hisaddr != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1994  		ppp_warn("Remote IP address changed to %I", ho->hisaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1995  		script_setenv("OLDIPREMOTE", ip_ntoa(wo->hisaddr), 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1996  		wo->hisaddr = ho->hisaddr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1997  	    } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1998  		script_unsetenv("OLDIPREMOTE");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  1999  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2000  	    /* Set the interface to the new addresses */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2001  	    mask = get_mask(go->ouraddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2002  	    if (!sifaddr(pcb, go->ouraddr, ho->hisaddr, mask)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2003  #if PPP_DEBUG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2004  		ppp_warn("Interface configuration failed");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2005  #endif /* PPP_DEBUG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2006  		ipcp_close(f->unit, "Interface configuration failed");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2007  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2008  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2009  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2010  	    /* assign a default route through the interface if required */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2011  	    if (ipcp_wantoptions[f->unit].default_route) 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2012  		if (sifdefaultroute(pcb, go->ouraddr, ho->hisaddr,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2013  			wo->replace_default_route))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2014  		    default_route_set[f->unit] = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2015  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2016  #if 0 /* UNUSED - PROXY ARP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2017  	    /* Make a proxy ARP entry if requested. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2018  	    if (ho->hisaddr != 0 && ipcp_wantoptions[f->unit].proxy_arp)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2019  		if (sifproxyarp(pcb, ho->hisaddr))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2020  		    proxy_arp_set[f->unit] = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2021  #endif /* UNUSED - PROXY ARP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2022  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2023  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2024  	demand_rexmit(PPP_IP,go->ouraddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2025  	sifnpmode(pcb, PPP_IP, NPMODE_PASS);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2026  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2027      } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2028  #endif /* DEMAND_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2029      {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2030  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2031  	 * Set IP addresses and (if specified) netmask.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2032  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2033  	mask = get_mask(go->ouraddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2034  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2035  #if !(defined(SVR4) && (defined(SNI) || defined(__USLC__)))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2036  	if (!sifaddr(pcb, go->ouraddr, ho->hisaddr, mask)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2037  #if PPP_DEBUG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2038  	    ppp_warn("Interface configuration failed");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2039  #endif /* PPP_DEBUG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2040  	    ipcp_close(f->pcb, "Interface configuration failed");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2041  	    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2042  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2043  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2044  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2045  	/* bring the interface up for IP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2046  	if (!sifup(pcb)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2047  #if PPP_DEBUG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2048  	    ppp_warn("Interface failed to come up");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2049  #endif /* PPP_DEBUG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2050  	    ipcp_close(f->pcb, "Interface configuration failed");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2051  	    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2052  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2053  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2054  #if (defined(SVR4) && (defined(SNI) || defined(__USLC__)))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2055  	if (!sifaddr(pcb, go->ouraddr, ho->hisaddr, mask)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2056  #if PPP_DEBUG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2057  	    ppp_warn("Interface configuration failed");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2058  #endif /* PPP_DEBUG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2059  	    ipcp_close(f->unit, "Interface configuration failed");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2060  	    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2061  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2062  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2063  #if DEMAND_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2064  	sifnpmode(pcb, PPP_IP, NPMODE_PASS);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2065  #endif /* DEMAND_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2066  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2067  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2068  	/* assign a default route through the interface if required */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2069  	if (wo->default_route)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2070  	    if (sifdefaultroute(pcb, go->ouraddr, ho->hisaddr,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2071  		    wo->replace_default_route))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2072  		    pcb->default_route_set = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2073  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2074  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2075  #if 0 /* UNUSED - PROXY ARP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2076  	/* Make a proxy ARP entry if requested. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2077  	if (ho->hisaddr != 0 && wo->proxy_arp)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2078  	    if (sifproxyarp(pcb, ho->hisaddr))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2079  		pcb->proxy_arp_set = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2080  #endif /* UNUSED - PROXY ARP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2081  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2082  	wo->ouraddr = go->ouraddr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2083  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2084  	ppp_notice("local  IP address %I", go->ouraddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2085  	if (ho->hisaddr != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2086  	    ppp_notice("remote IP address %I", ho->hisaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2087  #if LWIP_DNS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2088  	if (go->dnsaddr[0])
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2089  	    ppp_notice("primary   DNS address %I", go->dnsaddr[0]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2090  	if (go->dnsaddr[1])
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2091  	    ppp_notice("secondary DNS address %I", go->dnsaddr[1]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2092  #endif /* LWIP_DNS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2093      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2094  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2095  #if PPP_STATS_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2096      reset_link_stats(f->unit);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2097  #endif /* PPP_STATS_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2098  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2099      np_up(pcb, PPP_IP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2100      pcb->ipcp_is_up = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2101  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2102  #if PPP_NOTIFY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2103      notify(ip_up_notifier, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2104  #endif /* PPP_NOTIFY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2105  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2106      if (ip_up_hook)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2107  	ip_up_hook();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2108  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2109  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2110  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2111  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2112  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2113   * ipcp_down - IPCP has gone DOWN.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2114   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2115   * Take the IP network interface down, clear its addresses
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2116   * and delete routes through it.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2117   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2118  static void ipcp_down(fsm *f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2119      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2120      ipcp_options *ho = &pcb->ipcp_hisoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2121      ipcp_options *go = &pcb->ipcp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2122  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2123      IPCPDEBUG(("ipcp: down"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2124  #if PPP_STATS_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2125      /* XXX a bit IPv4-centric here, we only need to get the stats
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2126       * before the interface is marked down. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2127      /* XXX more correct: we must get the stats before running the notifiers,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2128       * at least for the radius plugin */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2129      update_link_stats(f->unit);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2130  #endif /* PPP_STATS_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2131  #if PPP_NOTIFY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2132      notify(ip_down_notifier, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2133  #endif /* PPP_NOTIFY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2134  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2135      if (ip_down_hook)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2136  	ip_down_hook();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2137  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2138      if (pcb->ipcp_is_up) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2139  	pcb->ipcp_is_up = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2140  	np_down(pcb, PPP_IP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2141      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2142  #if VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2143      sifvjcomp(pcb, 0, 0, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2144  #endif /* VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2145  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2146  #if PPP_STATS_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2147      print_link_stats(); /* _after_ running the notifiers and ip_down_hook(),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2148  			 * because print_link_stats() sets link_stats_valid
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2149  			 * to 0 (zero) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2150  #endif /* PPP_STATS_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2151  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2152  #if DEMAND_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2153      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2154       * If we are doing dial-on-demand, set the interface
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2155       * to queue up outgoing packets (for now).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2156       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2157      if (demand) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2158  	sifnpmode(pcb, PPP_IP, NPMODE_QUEUE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2159      } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2160  #endif /* DEMAND_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2161      {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2162  #if DEMAND_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2163  	sifnpmode(pcb, PPP_IP, NPMODE_DROP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2164  #endif /* DEMAND_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2165  	sifdown(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2166  	ipcp_clear_addrs(pcb, go->ouraddr,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2167  			 ho->hisaddr, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2168  #if LWIP_DNS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2169  	cdns(pcb, go->dnsaddr[0], go->dnsaddr[1]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2170  #endif /* LWIP_DNS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2171      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2172  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2173  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2174  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2175  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2176   * ipcp_clear_addrs() - clear the interface addresses, routes,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2177   * proxy arp entries, etc.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2178   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2179  static void ipcp_clear_addrs(ppp_pcb *pcb, u32_t ouraddr, u32_t hisaddr, u8_t replacedefaultroute) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2180      LWIP_UNUSED_ARG(replacedefaultroute);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2181  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2182  #if 0 /* UNUSED - PROXY ARP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2183      if (pcb->proxy_arp_set) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2184  	cifproxyarp(pcb, hisaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2185  	pcb->proxy_arp_set = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2186      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2187  #endif /* UNUSED - PROXY ARP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2188  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2189      /* If replacedefaultroute, sifdefaultroute will be called soon
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2190       * with replacedefaultroute set and that will overwrite the current
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2191       * default route. This is the case only when doing demand, otherwise
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2192       * during demand, this cifdefaultroute would restore the old default
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2193       * route which is not what we want in this case. In the non-demand
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2194       * case, we'll delete the default route and restore the old if there
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2195       * is one saved by an sifdefaultroute with replacedefaultroute.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2196       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2197      if (!replacedefaultroute && pcb->default_route_set) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2198  	cifdefaultroute(pcb, ouraddr, hisaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2199  	pcb->default_route_set = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2200      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2201  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2202      cifaddr(pcb, ouraddr, hisaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2203  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2204  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2205  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2206  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2207   * ipcp_finished - possibly shut down the lower layers.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2208   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2209  static void ipcp_finished(fsm *f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2210  	ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2211  	if (pcb->ipcp_is_open) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2212  		pcb->ipcp_is_open = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2213  		np_finished(pcb, PPP_IP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2214  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2215  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2216  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2217  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2218  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2219  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2220   * create_resolv - create the replacement resolv.conf file
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2221   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2222  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2223  create_resolv(peerdns1, peerdns2)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2224      u32_t peerdns1, peerdns2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2225  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2226  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2227  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2228  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2229  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2230  #if PRINTPKT_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2231  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2232   * ipcp_printpkt - print the contents of an IPCP packet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2233   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2234  static const char* const ipcp_codenames[] = {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2235      "ConfReq", "ConfAck", "ConfNak", "ConfRej",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2236      "TermReq", "TermAck", "CodeRej"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2237  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2238  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2239  static int ipcp_printpkt(const u_char *p, int plen,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2240  		void (*printer) (void *, const char *, ...), void *arg) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2241      int code, id, len, olen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2242      const u_char *pstart, *optend;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2243  #if VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2244      u_short cishort;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2245  #endif /* VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2246      u32_t cilong;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2247  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2248      if (plen < HEADERLEN)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2249  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2250      pstart = p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2251      GETCHAR(code, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2252      GETCHAR(id, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2253      GETSHORT(len, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2254      if (len < HEADERLEN || len > plen)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2255  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2256  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2257      if (code >= 1 && code <= (int)LWIP_ARRAYSIZE(ipcp_codenames))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2258  	printer(arg, " %s", ipcp_codenames[code-1]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2259      else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2260  	printer(arg, " code=0x%x", code);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2261      printer(arg, " id=0x%x", id);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2262      len -= HEADERLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2263      switch (code) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2264      case CONFREQ:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2265      case CONFACK:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2266      case CONFNAK:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2267      case CONFREJ:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2268  	/* print option list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2269  	while (len >= 2) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2270  	    GETCHAR(code, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2271  	    GETCHAR(olen, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2272  	    p -= 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2273  	    if (olen < 2 || olen > len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2274  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2275  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2276  	    printer(arg, " <");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2277  	    len -= olen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2278  	    optend = p + olen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2279  	    switch (code) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2280  	    case CI_ADDRS:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2281  		if (olen == CILEN_ADDRS) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2282  		    p += 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2283  		    GETLONG(cilong, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2284  		    printer(arg, "addrs %I", lwip_htonl(cilong));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2285  		    GETLONG(cilong, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2286  		    printer(arg, " %I", lwip_htonl(cilong));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2287  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2288  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2289  #if VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2290  	    case CI_COMPRESSTYPE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2291  		if (olen >= CILEN_COMPRESS) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2292  		    p += 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2293  		    GETSHORT(cishort, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2294  		    printer(arg, "compress ");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2295  		    switch (cishort) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2296  		    case IPCP_VJ_COMP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2297  			printer(arg, "VJ");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2298  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2299  		    case IPCP_VJ_COMP_OLD:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2300  			printer(arg, "old-VJ");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2301  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2302  		    default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2303  			printer(arg, "0x%x", cishort);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2304  		    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2305  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2306  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2307  #endif /* VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2308  	    case CI_ADDR:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2309  		if (olen == CILEN_ADDR) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2310  		    p += 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2311  		    GETLONG(cilong, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2312  		    printer(arg, "addr %I", lwip_htonl(cilong));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2313  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2314  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2315  #if LWIP_DNS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2316  	    case CI_MS_DNS1:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2317  	    case CI_MS_DNS2:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2318  	        p += 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2319  		GETLONG(cilong, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2320  		printer(arg, "ms-dns%d %I", (code == CI_MS_DNS1? 1: 2),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2321  			htonl(cilong));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2322  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2323  #endif /* LWIP_DNS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2324  #if 0 /* UNUSED - WINS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2325  	    case CI_MS_WINS1:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2326  	    case CI_MS_WINS2:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2327  	        p += 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2328  		GETLONG(cilong, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2329  		printer(arg, "ms-wins %I", lwip_htonl(cilong));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2330  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2331  #endif /* UNUSED - WINS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2332  	    default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2333  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2334  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2335  	    while (p < optend) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2336  		GETCHAR(code, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2337  		printer(arg, " %.2x", code);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2338  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2339  	    printer(arg, ">");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2340  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2341  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2342  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2343      case TERMACK:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2344      case TERMREQ:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2345  	if (len > 0 && *p >= ' ' && *p < 0x7f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2346  	    printer(arg, " ");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2347  	    ppp_print_string(p, len, printer, arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2348  	    p += len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2349  	    len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2350  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2351  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2352      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2353  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2354      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2355  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2356      /* print the rest of the bytes in the packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2357      for (; len > 0; --len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2358  	GETCHAR(code, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2359  	printer(arg, " %.2x", code);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2360      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2361  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2362      return p - pstart;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2363  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2364  #endif /* PRINTPKT_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2365  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2366  #if DEMAND_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2367  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2368   * ip_active_pkt - see if this IP packet is worth bringing the link up for.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2369   * We don't bring the link up for IP fragments or for TCP FIN packets
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2370   * with no data.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2371   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2372  #define IP_HDRLEN	20	/* bytes */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2373  #define IP_OFFMASK	0x1fff
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2374  #ifndef IPPROTO_TCP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2375  #define IPPROTO_TCP	6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2376  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2377  #define TCP_HDRLEN	20
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2378  #define TH_FIN		0x01
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2379  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2380  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2381   * We use these macros because the IP header may be at an odd address,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2382   * and some compilers might use word loads to get th_off or ip_hl.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2383   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2384  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2385  #define net_short(x)	(((x)[0] << 8) + (x)[1])
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2386  #define get_iphl(x)	(((unsigned char *)(x))[0] & 0xF)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2387  #define get_ipoff(x)	net_short((unsigned char *)(x) + 6)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2388  #define get_ipproto(x)	(((unsigned char *)(x))[9])
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2389  #define get_tcpoff(x)	(((unsigned char *)(x))[12] >> 4)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2390  #define get_tcpflags(x)	(((unsigned char *)(x))[13])
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2391  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2392  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2393  ip_active_pkt(pkt, len)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2394      u_char *pkt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2395      int len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2396  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2397      u_char *tcp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2398      int hlen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2399  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2400      len -= PPP_HDRLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2401      pkt += PPP_HDRLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2402      if (len < IP_HDRLEN)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2403  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2404      if ((get_ipoff(pkt) & IP_OFFMASK) != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2405  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2406      if (get_ipproto(pkt) != IPPROTO_TCP)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2407  	return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2408      hlen = get_iphl(pkt) * 4;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2409      if (len < hlen + TCP_HDRLEN)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2410  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2411      tcp = pkt + hlen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2412      if ((get_tcpflags(tcp) & TH_FIN) != 0 && len == hlen + get_tcpoff(tcp) * 4)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2413  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2414      return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2415  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2416  #endif /* DEMAND_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2417  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipcp.c	  2418  #endif /* PPP_SUPPORT && PPP_IPV4_SUPPORT */

	; Module end
