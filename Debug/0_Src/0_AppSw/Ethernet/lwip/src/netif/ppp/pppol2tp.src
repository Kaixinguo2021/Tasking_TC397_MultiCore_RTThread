	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\.pppol2tp.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Rtl8211f -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\pppol2tp.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\pppol2tp.src ..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\pppol2tp.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\pppol2tp.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	738
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\pppol2tp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L5
	.byte	2
	.byte	'int',0,4,5,3
	.word	175
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	182
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	224
	.byte	7
	.word	224
	.byte	8
	.byte	'__cmpswapw',0
	.word	240
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	245
	.byte	9
	.byte	'value',0
	.word	224
	.byte	9
	.byte	'compare',0
	.word	224
	.byte	0,2
	.byte	'short int',0,2,5,10
	.byte	'__wchar_t',0,1,1,1
	.word	302
	.byte	10
	.byte	'__size_t',0,1,1,1
	.word	224
	.byte	10
	.byte	'__ptrdiff_t',0,1,1,1
	.word	175
	.byte	11,1,7
	.word	370
	.byte	10
	.byte	'__codeptr',0,1,1,1
	.word	372
	.byte	10
	.byte	'__intptr_t',0,1,1,1
	.word	175
	.byte	10
	.byte	'__uintptr_t',0,1,1,1
	.word	224
	.byte	2
	.byte	'unsigned char',0,1,8,10
	.byte	'uint8',0,2,108,29
	.word	434
	.byte	2
	.byte	'unsigned short int',0,2,7,10
	.byte	'uint16',0,2,112,29
	.word	465
	.byte	2
	.byte	'unsigned long int',0,4,7,10
	.byte	'uint32',0,2,116,29
	.word	502
	.byte	2
	.byte	'char',0,1,6,10
	.byte	'sint8',0,2,125,29
	.word	538
	.byte	10
	.byte	'sint16',0,2,129,1,29
	.word	302
	.byte	2
	.byte	'long int',0,4,5,10
	.byte	'sint32',0,2,134,1,29
	.word	576
	.byte	2
	.byte	'long long int',0,8,5,10
	.byte	'sint64',0,2,141,1,29
	.word	604
	.byte	2
	.byte	'float',0,4,4,10
	.byte	'float32',0,2,170,1,29
	.word	637
	.byte	12
	.byte	'void',0,7
	.word	663
	.byte	10
	.byte	'pvoid',0,3,54,28
	.word	669
	.byte	10
	.byte	'Ifx_TickTime',0,3,76,28
	.word	604
	.byte	10
	.byte	'u32_t',0,4,87,16
	.word	502
	.byte	10
	.byte	'intmax_t',0,5,198,2,41
	.word	604
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,22,0,3,8,58,15,59,15,57,15,73,19,0,0,11,21,0,54,15,0,0,12,59,0
	.byte	3,8,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\pppol2tp.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'cc.h',0,2,0,0
	.byte	'stdint.h',0,3,0,0,0
.L9:
.L7:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	     1  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	     2   * @file
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	     3   * Network Point to Point Protocol over Layer 2 Tunneling Protocol program file.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	     4   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	     5   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	     6  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	     7  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	     8   * Redistribution and use in source and binary forms, with or without modification,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	     9   * are permitted provided that the following conditions are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    10   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    11   * 1. Redistributions of source code must retain the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    12   *    this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    13   * 2. Redistributions in binary form must reproduce the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    14   *    this list of conditions and the following disclaimer in the documentation
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    15   *    and/or other materials provided with the distribution.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    16   * 3. The name of the author may not be used to endorse or promote products
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    17   *    derived from this software without specific prior written permission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    18   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    19   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    20   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    21   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    22   * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    23   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    24   * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    25   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    26   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    27   * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    28   * OF SUCH DAMAGE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    29   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    30   * This file is part of the lwIP TCP/IP stack.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    31   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    32   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    33  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    34  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    35   * L2TP Support status:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    36   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    37   * Supported:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    38   * - L2TPv2 (PPP over L2TP, a.k.a. UDP tunnels)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    39   * - LAC
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    40   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    41   * Not supported:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    42   * - LNS (require PPP server support)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    43   * - L2TPv3 ethernet pseudowires
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    44   * - L2TPv3 VLAN pseudowire
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    45   * - L2TPv3 PPP pseudowires
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    46   * - L2TPv3 IP encapsulation
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    47   * - L2TPv3 IP pseudowire
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    48   * - L2TP tunnel switching - http://tools.ietf.org/html/draft-ietf-l2tpext-tunnel-switching-08
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    49   * - Multiple tunnels per UDP socket, as well as multiple sessions per tunnel
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    50   * - Hidden AVPs
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    51   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    52  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    53  #include "netif/ppp/ppp_opts.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    54  #if PPP_SUPPORT && PPPOL2TP_SUPPORT /* don't build if not configured for use in lwipopts.h */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    55  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    56  #include "lwip/err.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    57  #include "lwip/memp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    58  #include "lwip/netif.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    59  #include "lwip/udp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    60  #include "lwip/snmp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    61  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    62  #include "netif/ppp/ppp_impl.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    63  #include "netif/ppp/lcp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    64  #include "netif/ppp/ipcp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    65  #include "netif/ppp/pppol2tp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    66  #include "netif/ppp/pppcrypt.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    67  #include "netif/ppp/magic.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    68  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    69  /* Memory pool */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    70  LWIP_MEMPOOL_DECLARE(PPPOL2TP_PCB, MEMP_NUM_PPPOL2TP_INTERFACES, sizeof(pppol2tp_pcb), "PPPOL2TP_PCB")
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    71  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    72  /* callbacks called from PPP core */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    73  static err_t pppol2tp_write(ppp_pcb *ppp, void *ctx, struct pbuf *p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    74  static err_t pppol2tp_netif_output(ppp_pcb *ppp, void *ctx, struct pbuf *p, u_short protocol);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    75  static err_t pppol2tp_destroy(ppp_pcb *ppp, void *ctx);    /* Destroy a L2TP control block */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    76  static void pppol2tp_connect(ppp_pcb *ppp, void *ctx);    /* Be a LAC, connect to a LNS. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    77  static void pppol2tp_disconnect(ppp_pcb *ppp, void *ctx);  /* Disconnect */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    78  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    79   /* Prototypes for procedures local to this file. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    80  static void pppol2tp_input(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    81  static void pppol2tp_dispatch_control_packet(pppol2tp_pcb *l2tp, u16_t port, struct pbuf *p, u16_t ns, u16_t nr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    82  static void pppol2tp_timeout(void *arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    83  static void pppol2tp_abort_connect(pppol2tp_pcb *l2tp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    84  static err_t pppol2tp_send_sccrq(pppol2tp_pcb *l2tp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    85  static err_t pppol2tp_send_scccn(pppol2tp_pcb *l2tp, u16_t ns);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    86  static err_t pppol2tp_send_icrq(pppol2tp_pcb *l2tp, u16_t ns);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    87  static err_t pppol2tp_send_iccn(pppol2tp_pcb *l2tp, u16_t ns);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    88  static err_t pppol2tp_send_zlb(pppol2tp_pcb *l2tp, u16_t ns, u16_t nr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    89  static err_t pppol2tp_send_stopccn(pppol2tp_pcb *l2tp, u16_t ns);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    90  static err_t pppol2tp_xmit(pppol2tp_pcb *l2tp, struct pbuf *pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    91  static err_t pppol2tp_udp_send(pppol2tp_pcb *l2tp, struct pbuf *pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    92  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    93  /* Callbacks structure for PPP core */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    94  static const struct link_callbacks pppol2tp_callbacks = {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    95    pppol2tp_connect,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    96  #if PPP_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    97    NULL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    98  #endif /* PPP_SERVER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	    99    pppol2tp_disconnect,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   100    pppol2tp_destroy,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   101    pppol2tp_write,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   102    pppol2tp_netif_output,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   103    NULL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   104    NULL
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   105  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   106  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   107  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   108  /* Create a new L2TP session. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   109  ppp_pcb *pppol2tp_create(struct netif *pppif,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   110         struct netif *netif, const ip_addr_t *ipaddr, u16_t port,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   111         const u8_t *secret, u8_t secret_len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   112         ppp_link_status_cb_fn link_status_cb, void *ctx_cb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   113    ppp_pcb *ppp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   114    pppol2tp_pcb *l2tp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   115    struct udp_pcb *udp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   116  #if !PPPOL2TP_AUTH_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   117    LWIP_UNUSED_ARG(secret);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   118    LWIP_UNUSED_ARG(secret_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   119  #endif /* !PPPOL2TP_AUTH_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   120  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   121    if (ipaddr == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   122      goto ipaddr_check_failed;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   123    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   124  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   125    l2tp = (pppol2tp_pcb *)LWIP_MEMPOOL_ALLOC(PPPOL2TP_PCB);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   126    if (l2tp == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   127      goto memp_malloc_l2tp_failed;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   128    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   129  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   130    udp = udp_new_ip_type(IP_GET_TYPE(ipaddr));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   131    if (udp == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   132      goto udp_new_failed;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   133    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   134    udp_recv(udp, pppol2tp_input, l2tp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   135  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   136    ppp = ppp_new(pppif, &pppol2tp_callbacks, l2tp, link_status_cb, ctx_cb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   137    if (ppp == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   138      goto ppp_new_failed;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   139    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   140  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   141    memset(l2tp, 0, sizeof(pppol2tp_pcb));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   142    l2tp->phase = PPPOL2TP_STATE_INITIAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   143    l2tp->ppp = ppp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   144    l2tp->udp = udp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   145    l2tp->netif = netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   146    ip_addr_copy(l2tp->remote_ip, *ipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   147    l2tp->remote_port = port;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   148  #if PPPOL2TP_AUTH_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   149    l2tp->secret = secret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   150    l2tp->secret_len = secret_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   151  #endif /* PPPOL2TP_AUTH_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   152  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   153    return ppp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   154  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   155  ppp_new_failed:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   156    udp_remove(udp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   157  udp_new_failed:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   158    LWIP_MEMPOOL_FREE(PPPOL2TP_PCB, l2tp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   159  memp_malloc_l2tp_failed:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   160  ipaddr_check_failed:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   161    return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   162  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   163  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   164  /* Called by PPP core */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   165  static err_t pppol2tp_write(ppp_pcb *ppp, void *ctx, struct pbuf *p) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   166    pppol2tp_pcb *l2tp = (pppol2tp_pcb *)ctx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   167    struct pbuf *ph; /* UDP + L2TP header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   168    err_t ret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   169  #if MIB2_STATS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   170    u16_t tot_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   171  #else /* MIB2_STATS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   172    LWIP_UNUSED_ARG(ppp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   173  #endif /* MIB2_STATS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   174  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   175    ph = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(PPPOL2TP_OUTPUT_DATA_HEADER_LEN), PBUF_RAM);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   176    if(!ph) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   177      LINK_STATS_INC(link.memerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   178      LINK_STATS_INC(link.proterr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   179      MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   180      pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   181      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   182    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   183  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   184    pbuf_remove_header(ph, PPPOL2TP_OUTPUT_DATA_HEADER_LEN); /* hide L2TP header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   185    pbuf_cat(ph, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   186  #if MIB2_STATS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   187    tot_len = ph->tot_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   188  #endif /* MIB2_STATS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   189  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   190    ret = pppol2tp_xmit(l2tp, ph);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   191    if (ret != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   192      LINK_STATS_INC(link.err);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   193      MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   194      return ret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   195    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   196  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   197    MIB2_STATS_NETIF_ADD(ppp->netif, ifoutoctets, (u16_t)tot_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   198    MIB2_STATS_NETIF_INC(ppp->netif, ifoutucastpkts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   199    LINK_STATS_INC(link.xmit);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   200    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   201  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   202  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   203  /* Called by PPP core */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   204  static err_t pppol2tp_netif_output(ppp_pcb *ppp, void *ctx, struct pbuf *p, u_short protocol) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   205    pppol2tp_pcb *l2tp = (pppol2tp_pcb *)ctx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   206    struct pbuf *pb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   207    u8_t *pl;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   208    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   209  #if MIB2_STATS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   210    u16_t tot_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   211  #else /* MIB2_STATS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   212    LWIP_UNUSED_ARG(ppp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   213  #endif /* MIB2_STATS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   214  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   215    /* @todo: try to use pbuf_header() here! */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   216    pb = pbuf_alloc(PBUF_TRANSPORT, PPPOL2TP_OUTPUT_DATA_HEADER_LEN + sizeof(protocol), PBUF_RAM);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   217    if(!pb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   218      LINK_STATS_INC(link.memerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   219      LINK_STATS_INC(link.proterr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   220      MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   221      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   222    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   223  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   224    pbuf_remove_header(pb, PPPOL2TP_OUTPUT_DATA_HEADER_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   225  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   226    pl = (u8_t*)pb->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   227    PUTSHORT(protocol, pl);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   228  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   229    pbuf_chain(pb, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   230  #if MIB2_STATS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   231    tot_len = pb->tot_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   232  #endif /* MIB2_STATS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   233  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   234    if( (err = pppol2tp_xmit(l2tp, pb)) != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   235      LINK_STATS_INC(link.err);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   236      MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   237      return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   238    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   239  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   240    MIB2_STATS_NETIF_ADD(ppp->netif, ifoutoctets, tot_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   241    MIB2_STATS_NETIF_INC(ppp->netif, ifoutucastpkts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   242    LINK_STATS_INC(link.xmit);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   243    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   244  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   245  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   246  /* Destroy a L2TP control block */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   247  static err_t pppol2tp_destroy(ppp_pcb *ppp, void *ctx) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   248    pppol2tp_pcb *l2tp = (pppol2tp_pcb *)ctx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   249    LWIP_UNUSED_ARG(ppp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   250  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   251    sys_untimeout(pppol2tp_timeout, l2tp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   252    udp_remove(l2tp->udp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   253    LWIP_MEMPOOL_FREE(PPPOL2TP_PCB, l2tp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   254    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   255  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   256  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   257  /* Be a LAC, connect to a LNS. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   258  static void pppol2tp_connect(ppp_pcb *ppp, void *ctx) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   259    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   260    pppol2tp_pcb *l2tp = (pppol2tp_pcb *)ctx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   261    lcp_options *lcp_wo;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   262    lcp_options *lcp_ao;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   263  #if PPP_IPV4_SUPPORT && VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   264    ipcp_options *ipcp_wo;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   265    ipcp_options *ipcp_ao;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   266  #endif /* PPP_IPV4_SUPPORT && VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   267  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   268    l2tp->tunnel_port = l2tp->remote_port;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   269    l2tp->our_ns = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   270    l2tp->peer_nr = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   271    l2tp->peer_ns = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   272    l2tp->source_tunnel_id = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   273    l2tp->remote_tunnel_id = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   274    l2tp->source_session_id = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   275    l2tp->remote_session_id = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   276    /* l2tp->*_retried are cleared when used */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   277  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   278    lcp_wo = &ppp->lcp_wantoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   279    lcp_wo->mru = PPPOL2TP_DEFMRU;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   280    lcp_wo->neg_asyncmap = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   281    lcp_wo->neg_pcompression = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   282    lcp_wo->neg_accompression = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   283    lcp_wo->passive = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   284    lcp_wo->silent = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   285  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   286    lcp_ao = &ppp->lcp_allowoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   287    lcp_ao->mru = PPPOL2TP_DEFMRU;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   288    lcp_ao->neg_asyncmap = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   289    lcp_ao->neg_pcompression = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   290    lcp_ao->neg_accompression = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   291  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   292  #if PPP_IPV4_SUPPORT && VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   293    ipcp_wo = &ppp->ipcp_wantoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   294    ipcp_wo->neg_vj = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   295    ipcp_wo->old_vj = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   296  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   297    ipcp_ao = &ppp->ipcp_allowoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   298    ipcp_ao->neg_vj = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   299    ipcp_ao->old_vj = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   300  #endif /* PPP_IPV4_SUPPORT && VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   301  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   302    /* Listen to a random source port, we need to do that instead of using udp_connect()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   303     * because the L2TP LNS might answer with its own random source port (!= 1701)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   304     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   305  #if LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   306    if (IP_IS_V6_VAL(l2tp->udp->local_ip)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   307      udp_bind(l2tp->udp, IP6_ADDR_ANY, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   308    } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   309  #endif /* LWIP_IPV6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   310    udp_bind(l2tp->udp, IP_ADDR_ANY, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   311  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   312  #if PPPOL2TP_AUTH_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   313    /* Generate random vector */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   314    if (l2tp->secret != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   315      magic_random_bytes(l2tp->secret_rv, sizeof(l2tp->secret_rv));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   316    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   317  #endif /* PPPOL2TP_AUTH_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   318  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   319    do {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   320      l2tp->remote_tunnel_id = magic();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   321    } while(l2tp->remote_tunnel_id == 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   322    /* save state, in case we fail to send SCCRQ */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   323    l2tp->sccrq_retried = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   324    l2tp->phase = PPPOL2TP_STATE_SCCRQ_SENT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   325    if ((err = pppol2tp_send_sccrq(l2tp)) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   326      PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send SCCRQ, error=%d\n", err));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   327    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   328    sys_timeout(PPPOL2TP_CONTROL_TIMEOUT, pppol2tp_timeout, l2tp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   329  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   330  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   331  /* Disconnect */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   332  static void pppol2tp_disconnect(ppp_pcb *ppp, void *ctx) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   333    pppol2tp_pcb *l2tp = (pppol2tp_pcb *)ctx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   334  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   335    l2tp->our_ns++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   336    pppol2tp_send_stopccn(l2tp, l2tp->our_ns);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   337  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   338    /* stop any timer, disconnect can be called while initiating is in progress */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   339    sys_untimeout(pppol2tp_timeout, l2tp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   340    l2tp->phase = PPPOL2TP_STATE_INITIAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   341    ppp_link_end(ppp); /* notify upper layers */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   342  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   343  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   344  /* UDP Callback for incoming IPv4 L2TP frames */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   345  static void pppol2tp_input(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   346    pppol2tp_pcb *l2tp = (pppol2tp_pcb*)arg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   347    u16_t hflags, hlen, len=0, tunnel_id=0, session_id=0, ns=0, nr=0, offset=0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   348    u8_t *inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   349    LWIP_UNUSED_ARG(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   350  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   351    /* we can't unbound a UDP pcb, thus we can still receive UDP frames after the link is closed */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   352    if (l2tp->phase < PPPOL2TP_STATE_SCCRQ_SENT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   353      goto free_and_return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   354    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   355  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   356    if (!ip_addr_cmp(&l2tp->remote_ip, addr)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   357      goto free_and_return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   358    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   359  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   360    /* discard packet if port mismatch, but only if we received a SCCRP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   361    if (l2tp->phase > PPPOL2TP_STATE_SCCRQ_SENT && l2tp->tunnel_port != port) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   362      goto free_and_return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   363    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   364  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   365    /* printf("-----------\nL2TP INPUT, %d\n", p->len); */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   366  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   367    /* L2TP header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   368    if (p->len < sizeof(hflags) + sizeof(tunnel_id) + sizeof(session_id) ) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   369      goto packet_too_short;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   370    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   371  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   372    inp = (u8_t*)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   373    GETSHORT(hflags, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   374  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   375    if (hflags & PPPOL2TP_HEADERFLAG_CONTROL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   376      /* check mandatory flags for a control packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   377      if ( (hflags & PPPOL2TP_HEADERFLAG_CONTROL_MANDATORY) != PPPOL2TP_HEADERFLAG_CONTROL_MANDATORY ) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   378        PPPDEBUG(LOG_DEBUG, ("pppol2tp: mandatory header flags for control packet not set\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   379        goto free_and_return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   380      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   381      /* check forbidden flags for a control packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   382      if (hflags & PPPOL2TP_HEADERFLAG_CONTROL_FORBIDDEN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   383        PPPDEBUG(LOG_DEBUG, ("pppol2tp: forbidden header flags for control packet found\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   384        goto free_and_return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   385      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   386    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   387      /* check mandatory flags for a data packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   388      if ( (hflags & PPPOL2TP_HEADERFLAG_DATA_MANDATORY) != PPPOL2TP_HEADERFLAG_DATA_MANDATORY) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   389        PPPDEBUG(LOG_DEBUG, ("pppol2tp: mandatory header flags for data packet not set\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   390        goto free_and_return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   391      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   392    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   393  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   394    /* Expected header size  */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   395    hlen = sizeof(hflags) + sizeof(tunnel_id) + sizeof(session_id);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   396    if (hflags & PPPOL2TP_HEADERFLAG_LENGTH) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   397      hlen += sizeof(len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   398    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   399    if (hflags & PPPOL2TP_HEADERFLAG_SEQUENCE) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   400      hlen += sizeof(ns) + sizeof(nr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   401    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   402    if (hflags & PPPOL2TP_HEADERFLAG_OFFSET) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   403      hlen += sizeof(offset);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   404    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   405    if (p->len < hlen) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   406      goto packet_too_short;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   407    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   408  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   409    if (hflags & PPPOL2TP_HEADERFLAG_LENGTH) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   410      GETSHORT(len, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   411      if (p->len < len || len < hlen) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   412        goto packet_too_short;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   413      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   414    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   415    GETSHORT(tunnel_id, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   416    GETSHORT(session_id, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   417    if (hflags & PPPOL2TP_HEADERFLAG_SEQUENCE) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   418      GETSHORT(ns, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   419      GETSHORT(nr, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   420    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   421    if (hflags & PPPOL2TP_HEADERFLAG_OFFSET) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   422      GETSHORT(offset, inp)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   423      if (offset > 4096) { /* don't be fooled with large offset which might overflow hlen */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   424        PPPDEBUG(LOG_DEBUG, ("pppol2tp: strange packet received, offset=%d\n", offset));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   425        goto free_and_return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   426      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   427      hlen += offset;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   428      if (p->len < hlen) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   429        goto packet_too_short;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   430      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   431      INCPTR(offset, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   432    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   433  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   434    /* printf("HLEN = %d\n", hlen); */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   435  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   436    /* skip L2TP header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   437    if (pbuf_remove_header(p, hlen) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   438      goto free_and_return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   439    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   440  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   441    /* printf("LEN=%d, TUNNEL_ID=%d, SESSION_ID=%d, NS=%d, NR=%d, OFFSET=%d\n", len, tunnel_id, session_id, ns, nr, offset); */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   442    PPPDEBUG(LOG_DEBUG, ("pppol2tp: input packet, len=%"U16_F", tunnel=%"U16_F", session=%"U16_F", ns=%"U16_F", nr=%"U16_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   443      len, tunnel_id, session_id, ns, nr));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   444  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   445    /* Control packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   446    if (hflags & PPPOL2TP_HEADERFLAG_CONTROL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   447      pppol2tp_dispatch_control_packet(l2tp, port, p, ns, nr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   448      goto free_and_return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   449    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   450  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   451    /* Data packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   452    if(l2tp->phase != PPPOL2TP_STATE_DATA) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   453      goto free_and_return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   454    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   455    if(tunnel_id != l2tp->remote_tunnel_id) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   456       PPPDEBUG(LOG_DEBUG, ("pppol2tp: tunnel ID mismatch, assigned=%d, received=%d\n", l2tp->remote_tunnel_id, tunnel_id));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   457       goto free_and_return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   458    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   459    if(session_id != l2tp->remote_session_id) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   460       PPPDEBUG(LOG_DEBUG, ("pppol2tp: session ID mismatch, assigned=%d, received=%d\n", l2tp->remote_session_id, session_id));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   461       goto free_and_return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   462    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   463    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   464     * skip address & flags if necessary
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   465     *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   466     * RFC 2661 does not specify whether the PPP frame in the L2TP payload should
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   467     * have a HDLC header or not. We handle both cases for compatibility.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   468     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   469    if (p->len >= 2) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   470      GETSHORT(hflags, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   471      if (hflags == 0xff03) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   472        pbuf_remove_header(p, 2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   473      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   474    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   475    /* Dispatch the packet thereby consuming it. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   476    ppp_input(l2tp->ppp, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   477    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   478  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   479  packet_too_short:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   480    PPPDEBUG(LOG_DEBUG, ("pppol2tp: packet too short: %d\n", p->len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   481  free_and_return:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   482    pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   483  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   484  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   485  /* L2TP Control packet entry point */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   486  static void pppol2tp_dispatch_control_packet(pppol2tp_pcb *l2tp, u16_t port, struct pbuf *p, u16_t ns, u16_t nr) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   487    u8_t *inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   488    u16_t avplen, avpflags, vendorid, attributetype, messagetype=0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   489    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   490  #if PPPOL2TP_AUTH_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   491    lwip_md5_context md5_ctx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   492    u8_t md5_hash[16];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   493    u8_t challenge_id = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   494  #endif /* PPPOL2TP_AUTH_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   495  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   496    /* printf("L2TP CTRL INPUT, ns=%d, nr=%d, len=%d\n", ns, nr, p->len); */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   497  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   498    /* Drop unexpected packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   499    if (ns != l2tp->peer_ns) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   500      PPPDEBUG(LOG_DEBUG, ("pppol2tp: drop unexpected packet: received NS=%d, expected NS=%d\n", ns, l2tp->peer_ns));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   501      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   502       * In order to ensure that all messages are acknowledged properly
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   503       * (particularly in the case of a lost ZLB ACK message), receipt
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   504       * of duplicate messages MUST be acknowledged.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   505       *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   506       * In this very special case we Ack a packet we previously received.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   507       * Therefore our NS is the NR we just received. And our NR is the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   508       * NS we just received plus one.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   509       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   510      if ((s16_t)(ns - l2tp->peer_ns) < 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   511        pppol2tp_send_zlb(l2tp, nr, ns+1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   512      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   513      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   514    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   515  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   516    l2tp->peer_nr = nr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   517  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   518    /* Handle the special case of the ICCN acknowledge */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   519    if (l2tp->phase == PPPOL2TP_STATE_ICCN_SENT && (s16_t)(l2tp->peer_nr - l2tp->our_ns) > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   520      l2tp->phase = PPPOL2TP_STATE_DATA;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   521      sys_untimeout(pppol2tp_timeout, l2tp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   522      ppp_start(l2tp->ppp); /* notify upper layers */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   523    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   524  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   525    /* ZLB packets */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   526    if (p->tot_len == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   527      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   528    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   529    /* A ZLB packet does not consume a NS slot thus we don't record the NS value for ZLB packets */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   530    l2tp->peer_ns = ns+1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   531  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   532    p = pbuf_coalesce(p, PBUF_RAW);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   533    inp = (u8_t*)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   534    /* Decode AVPs */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   535    while (p->len > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   536      if (p->len < sizeof(avpflags) + sizeof(vendorid) + sizeof(attributetype) ) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   537        goto packet_too_short;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   538      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   539      GETSHORT(avpflags, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   540      avplen = avpflags & PPPOL2TP_AVPHEADERFLAG_LENGTHMASK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   541      /* printf("AVPLEN = %d\n", avplen); */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   542      if (p->len < avplen || avplen < sizeof(avpflags) + sizeof(vendorid) + sizeof(attributetype)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   543        goto packet_too_short;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   544      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   545      GETSHORT(vendorid, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   546      GETSHORT(attributetype, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   547      avplen -= sizeof(avpflags) + sizeof(vendorid) + sizeof(attributetype);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   548  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   549      /* Message type must be the first AVP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   550      if (messagetype == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   551        if (attributetype != 0 || vendorid != 0 || avplen != sizeof(messagetype) ) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   552          PPPDEBUG(LOG_DEBUG, ("pppol2tp: message type must be the first AVP\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   553          return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   554        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   555        GETSHORT(messagetype, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   556        /* printf("Message type = %d\n", messagetype); */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   557        switch(messagetype) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   558          /* Start Control Connection Reply */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   559          case PPPOL2TP_MESSAGETYPE_SCCRP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   560            /* Only accept SCCRP packet if we sent a SCCRQ */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   561            if (l2tp->phase != PPPOL2TP_STATE_SCCRQ_SENT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   562              goto send_zlb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   563            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   564            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   565          /* Incoming Call Reply */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   566          case PPPOL2TP_MESSAGETYPE_ICRP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   567            /* Only accept ICRP packet if we sent a IRCQ */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   568            if (l2tp->phase != PPPOL2TP_STATE_ICRQ_SENT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   569              goto send_zlb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   570            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   571            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   572          /* Stop Control Connection Notification */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   573          case PPPOL2TP_MESSAGETYPE_STOPCCN:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   574            pppol2tp_send_zlb(l2tp, l2tp->our_ns+1, l2tp->peer_ns); /* Ack the StopCCN before we switch to down state */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   575            if (l2tp->phase < PPPOL2TP_STATE_DATA) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   576              pppol2tp_abort_connect(l2tp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   577            } else if (l2tp->phase == PPPOL2TP_STATE_DATA) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   578              /* Don't disconnect here, we let the LCP Echo/Reply find the fact
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   579               * that PPP session is down. Asking the PPP stack to end the session
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   580               * require strict checking about the PPP phase to prevent endless
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   581               * disconnection loops.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   582               */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   583            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   584            return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   585          default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   586            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   587        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   588        goto nextavp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   589      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   590  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   591      /* Skip proprietary L2TP extensions */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   592      if (vendorid != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   593        goto skipavp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   594      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   595  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   596      switch (messagetype) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   597        /* Start Control Connection Reply */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   598        case PPPOL2TP_MESSAGETYPE_SCCRP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   599         switch (attributetype) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   600            case PPPOL2TP_AVPTYPE_TUNNELID:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   601              if (avplen != sizeof(l2tp->source_tunnel_id) ) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   602                 PPPDEBUG(LOG_DEBUG, ("pppol2tp: AVP Assign tunnel ID length check failed\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   603                 return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   604              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   605              GETSHORT(l2tp->source_tunnel_id, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   606              PPPDEBUG(LOG_DEBUG, ("pppol2tp: Assigned tunnel ID %"U16_F"\n", l2tp->source_tunnel_id));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   607              goto nextavp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   608  #if PPPOL2TP_AUTH_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   609            case PPPOL2TP_AVPTYPE_CHALLENGE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   610              if (avplen == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   611                 PPPDEBUG(LOG_DEBUG, ("pppol2tp: Challenge length check failed\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   612                 return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   613              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   614              if (l2tp->secret == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   615                PPPDEBUG(LOG_DEBUG, ("pppol2tp: Received challenge from peer and no secret key available\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   616                pppol2tp_abort_connect(l2tp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   617                return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   618              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   619              /* Generate hash of ID, secret, challenge */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   620              lwip_md5_init(&md5_ctx);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   621              lwip_md5_starts(&md5_ctx);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   622              challenge_id = PPPOL2TP_MESSAGETYPE_SCCCN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   623              lwip_md5_update(&md5_ctx, &challenge_id, 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   624              lwip_md5_update(&md5_ctx, l2tp->secret, l2tp->secret_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   625              lwip_md5_update(&md5_ctx, inp, avplen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   626              lwip_md5_finish(&md5_ctx, l2tp->challenge_hash);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   627              lwip_md5_free(&md5_ctx);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   628              l2tp->send_challenge = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   629              goto skipavp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   630            case PPPOL2TP_AVPTYPE_CHALLENGERESPONSE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   631              if (avplen != PPPOL2TP_AVPTYPE_CHALLENGERESPONSE_SIZE) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   632                 PPPDEBUG(LOG_DEBUG, ("pppol2tp: AVP Challenge Response length check failed\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   633                 return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   634              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   635              /* Generate hash of ID, secret, challenge */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   636              lwip_md5_init(&md5_ctx);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   637              lwip_md5_starts(&md5_ctx);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   638              challenge_id = PPPOL2TP_MESSAGETYPE_SCCRP;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   639              lwip_md5_update(&md5_ctx, &challenge_id, 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   640              lwip_md5_update(&md5_ctx, l2tp->secret, l2tp->secret_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   641              lwip_md5_update(&md5_ctx, l2tp->secret_rv, sizeof(l2tp->secret_rv));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   642              lwip_md5_finish(&md5_ctx, md5_hash);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   643              lwip_md5_free(&md5_ctx);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   644              if ( memcmp(inp, md5_hash, sizeof(md5_hash)) ) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   645                PPPDEBUG(LOG_DEBUG, ("pppol2tp: Received challenge response from peer and secret key do not match\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   646                pppol2tp_abort_connect(l2tp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   647                return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   648              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   649              goto skipavp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   650  #endif /* PPPOL2TP_AUTH_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   651            default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   652              break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   653          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   654          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   655        /* Incoming Call Reply */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   656        case PPPOL2TP_MESSAGETYPE_ICRP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   657          switch (attributetype) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   658           case PPPOL2TP_AVPTYPE_SESSIONID:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   659              if (avplen != sizeof(l2tp->source_session_id) ) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   660                 PPPDEBUG(LOG_DEBUG, ("pppol2tp: AVP Assign session ID length check failed\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   661                 return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   662              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   663              GETSHORT(l2tp->source_session_id, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   664              PPPDEBUG(LOG_DEBUG, ("pppol2tp: Assigned session ID %"U16_F"\n", l2tp->source_session_id));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   665              goto nextavp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   666            default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   667              break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   668          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   669          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   670        default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   671          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   672      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   673  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   674  skipavp:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   675      INCPTR(avplen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   676  nextavp:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   677      /* printf("AVP Found, vendor=%d, attribute=%d, len=%d\n", vendorid, attributetype, avplen); */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   678      /* next AVP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   679      if (pbuf_remove_header(p, avplen + sizeof(avpflags) + sizeof(vendorid) + sizeof(attributetype)) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   680        return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   681      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   682    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   683  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   684    switch(messagetype) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   685      /* Start Control Connection Reply */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   686      case PPPOL2TP_MESSAGETYPE_SCCRP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   687        do {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   688          l2tp->remote_session_id = magic();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   689        } while(l2tp->remote_session_id == 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   690        l2tp->tunnel_port = port; /* LNS server might have chosen its own local port */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   691        l2tp->icrq_retried = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   692        l2tp->phase = PPPOL2TP_STATE_ICRQ_SENT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   693        l2tp->our_ns++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   694        if ((err = pppol2tp_send_scccn(l2tp, l2tp->our_ns)) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   695          PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send SCCCN, error=%d\n", err));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   696          LWIP_UNUSED_ARG(err); /* if PPPDEBUG is disabled */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   697        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   698        l2tp->our_ns++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   699        if ((err = pppol2tp_send_icrq(l2tp, l2tp->our_ns)) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   700          PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send ICRQ, error=%d\n", err));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   701          LWIP_UNUSED_ARG(err); /* if PPPDEBUG is disabled */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   702        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   703        sys_untimeout(pppol2tp_timeout, l2tp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   704        sys_timeout(PPPOL2TP_CONTROL_TIMEOUT, pppol2tp_timeout, l2tp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   705        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   706      /* Incoming Call Reply */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   707      case PPPOL2TP_MESSAGETYPE_ICRP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   708        l2tp->iccn_retried = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   709        l2tp->phase = PPPOL2TP_STATE_ICCN_SENT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   710        l2tp->our_ns++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   711        if ((err = pppol2tp_send_iccn(l2tp, l2tp->our_ns)) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   712          PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send ICCN, error=%d\n", err));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   713          LWIP_UNUSED_ARG(err); /* if PPPDEBUG is disabled */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   714        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   715        sys_untimeout(pppol2tp_timeout, l2tp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   716        sys_timeout(PPPOL2TP_CONTROL_TIMEOUT, pppol2tp_timeout, l2tp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   717        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   718      /* Unhandled packet, send ZLB ACK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   719      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   720        goto send_zlb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   721    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   722    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   723  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   724  send_zlb:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   725    pppol2tp_send_zlb(l2tp, l2tp->our_ns+1, l2tp->peer_ns);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   726    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   727  packet_too_short:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   728    PPPDEBUG(LOG_DEBUG, ("pppol2tp: packet too short: %d\n", p->len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   729  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   730  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   731  /* L2TP Timeout handler */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   732  static void pppol2tp_timeout(void *arg) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   733    pppol2tp_pcb *l2tp = (pppol2tp_pcb*)arg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   734    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   735    u32_t retry_wait;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   736  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   737    PPPDEBUG(LOG_DEBUG, ("pppol2tp: timeout\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   738  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   739    switch (l2tp->phase) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   740      case PPPOL2TP_STATE_SCCRQ_SENT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   741        /* backoff wait */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   742        if (l2tp->sccrq_retried < 0xff) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   743          l2tp->sccrq_retried++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   744        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   745        if (!l2tp->ppp->settings.persist && l2tp->sccrq_retried >= PPPOL2TP_MAXSCCRQ) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   746          pppol2tp_abort_connect(l2tp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   747          return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   748        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   749        retry_wait = LWIP_MIN(PPPOL2TP_CONTROL_TIMEOUT * l2tp->sccrq_retried, PPPOL2TP_SLOW_RETRY);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   750        PPPDEBUG(LOG_DEBUG, ("pppol2tp: sccrq_retried=%d\n", l2tp->sccrq_retried));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   751        if ((err = pppol2tp_send_sccrq(l2tp)) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   752          l2tp->sccrq_retried--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   753          PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send SCCRQ, error=%d\n", err));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   754          LWIP_UNUSED_ARG(err); /* if PPPDEBUG is disabled */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   755        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   756        sys_timeout(retry_wait, pppol2tp_timeout, l2tp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   757        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   758  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   759      case PPPOL2TP_STATE_ICRQ_SENT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   760        l2tp->icrq_retried++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   761        if (l2tp->icrq_retried >= PPPOL2TP_MAXICRQ) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   762          pppol2tp_abort_connect(l2tp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   763          return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   764        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   765        PPPDEBUG(LOG_DEBUG, ("pppol2tp: icrq_retried=%d\n", l2tp->icrq_retried));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   766        if ((s16_t)(l2tp->peer_nr - l2tp->our_ns) < 0) { /* the SCCCN was not acknowledged */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   767          if ((err = pppol2tp_send_scccn(l2tp, l2tp->our_ns -1)) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   768            l2tp->icrq_retried--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   769            PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send SCCCN, error=%d\n", err));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   770            LWIP_UNUSED_ARG(err); /* if PPPDEBUG is disabled */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   771            sys_timeout(PPPOL2TP_CONTROL_TIMEOUT, pppol2tp_timeout, l2tp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   772            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   773          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   774        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   775        if ((err = pppol2tp_send_icrq(l2tp, l2tp->our_ns)) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   776          l2tp->icrq_retried--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   777          PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send ICRQ, error=%d\n", err));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   778          LWIP_UNUSED_ARG(err); /* if PPPDEBUG is disabled */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   779        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   780        sys_timeout(PPPOL2TP_CONTROL_TIMEOUT, pppol2tp_timeout, l2tp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   781        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   782  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   783      case PPPOL2TP_STATE_ICCN_SENT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   784        l2tp->iccn_retried++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   785        if (l2tp->iccn_retried >= PPPOL2TP_MAXICCN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   786          pppol2tp_abort_connect(l2tp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   787          return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   788        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   789        PPPDEBUG(LOG_DEBUG, ("pppol2tp: iccn_retried=%d\n", l2tp->iccn_retried));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   790        if ((err = pppol2tp_send_iccn(l2tp, l2tp->our_ns)) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   791          l2tp->iccn_retried--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   792          PPPDEBUG(LOG_DEBUG, ("pppol2tp: failed to send ICCN, error=%d\n", err));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   793          LWIP_UNUSED_ARG(err); /* if PPPDEBUG is disabled */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   794        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   795        sys_timeout(PPPOL2TP_CONTROL_TIMEOUT, pppol2tp_timeout, l2tp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   796        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   797  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   798      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   799        return;  /* all done, work in peace */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   800    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   801  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   802  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   803  /* Connection attempt aborted */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   804  static void pppol2tp_abort_connect(pppol2tp_pcb *l2tp) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   805    PPPDEBUG(LOG_DEBUG, ("pppol2tp: could not establish connection\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   806    l2tp->phase = PPPOL2TP_STATE_INITIAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   807    ppp_link_failed(l2tp->ppp); /* notify upper layers */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   808  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   809  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   810  /* Initiate a new tunnel */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   811  static err_t pppol2tp_send_sccrq(pppol2tp_pcb *l2tp) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   812    struct pbuf *pb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   813    u8_t *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   814    u16_t len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   815  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   816    /* calculate UDP packet length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   817    len = 12 +8 +8 +10 +10 +6+sizeof(PPPOL2TP_HOSTNAME)-1 +6+sizeof(PPPOL2TP_VENDORNAME)-1 +8 +8;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   818  #if PPPOL2TP_AUTH_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   819    if (l2tp->secret != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   820      len += 6 + sizeof(l2tp->secret_rv);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   821    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   822  #endif /* PPPOL2TP_AUTH_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   823  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   824    /* allocate a buffer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   825    pb = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   826    if (pb == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   827      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   828    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   829    LWIP_ASSERT("pb->tot_len == pb->len", pb->tot_len == pb->len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   830  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   831    p = (u8_t*)pb->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   832    /* fill in pkt */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   833    /* L2TP control header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   834    PUTSHORT(PPPOL2TP_HEADERFLAG_CONTROL_MANDATORY, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   835    PUTSHORT(len, p); /* Length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   836    PUTSHORT(0, p); /* Tunnel Id */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   837    PUTSHORT(0, p); /* Session Id */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   838    PUTSHORT(0, p); /* NS Sequence number - to peer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   839    PUTSHORT(0, p); /* NR Sequence number - expected for peer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   840  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   841    /* AVP - Message type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   842    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 8, p); /* Mandatory flag + len field */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   843    PUTSHORT(0, p); /* Vendor ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   844    PUTSHORT(PPPOL2TP_AVPTYPE_MESSAGE, p); /* Attribute type: Message Type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   845    PUTSHORT(PPPOL2TP_MESSAGETYPE_SCCRQ, p); /* Attribute value: Message type: SCCRQ */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   846  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   847    /* AVP - L2TP Version */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   848    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 8, p); /* Mandatory flag + len field */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   849    PUTSHORT(0, p); /* Vendor ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   850    PUTSHORT(PPPOL2TP_AVPTYPE_VERSION, p); /* Attribute type: Version */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   851    PUTSHORT(PPPOL2TP_VERSION, p); /* Attribute value: L2TP Version */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   852  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   853    /* AVP - Framing capabilities */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   854    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 10, p); /* Mandatory flag + len field */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   855    PUTSHORT(0, p); /* Vendor ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   856    PUTSHORT(PPPOL2TP_AVPTYPE_FRAMINGCAPABILITIES, p); /* Attribute type: Framing capabilities */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   857    PUTLONG(PPPOL2TP_FRAMINGCAPABILITIES, p); /* Attribute value: Framing capabilities */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   858  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   859    /* AVP - Bearer capabilities */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   860    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 10, p); /* Mandatory flag + len field */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   861    PUTSHORT(0, p); /* Vendor ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   862    PUTSHORT(PPPOL2TP_AVPTYPE_BEARERCAPABILITIES, p); /* Attribute type: Bearer capabilities */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   863    PUTLONG(PPPOL2TP_BEARERCAPABILITIES, p); /* Attribute value: Bearer capabilities */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   864  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   865    /* AVP - Host name */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   866    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 6+sizeof(PPPOL2TP_HOSTNAME)-1, p); /* Mandatory flag + len field */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   867    PUTSHORT(0, p); /* Vendor ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   868    PUTSHORT(PPPOL2TP_AVPTYPE_HOSTNAME, p); /* Attribute type: Hostname */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   869    MEMCPY(p, PPPOL2TP_HOSTNAME, sizeof(PPPOL2TP_HOSTNAME)-1); /* Attribute value: Hostname */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   870    INCPTR(sizeof(PPPOL2TP_HOSTNAME)-1, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   871  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   872    /* AVP - Vendor name */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   873    PUTSHORT(6+sizeof(PPPOL2TP_VENDORNAME)-1, p); /* len field */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   874    PUTSHORT(0, p); /* Vendor ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   875    PUTSHORT(PPPOL2TP_AVPTYPE_VENDORNAME, p); /* Attribute type: Vendor name */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   876    MEMCPY(p, PPPOL2TP_VENDORNAME, sizeof(PPPOL2TP_VENDORNAME)-1); /* Attribute value: Vendor name */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   877    INCPTR(sizeof(PPPOL2TP_VENDORNAME)-1, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   878  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   879    /* AVP - Assign tunnel ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   880    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 8, p); /* Mandatory flag + len field */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   881    PUTSHORT(0, p); /* Vendor ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   882    PUTSHORT(PPPOL2TP_AVPTYPE_TUNNELID, p); /* Attribute type: Tunnel ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   883    PUTSHORT(l2tp->remote_tunnel_id, p); /* Attribute value: Tunnel ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   884  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   885    /* AVP - Receive window size */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   886    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 8, p); /* Mandatory flag + len field */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   887    PUTSHORT(0, p); /* Vendor ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   888    PUTSHORT(PPPOL2TP_AVPTYPE_RECEIVEWINDOWSIZE, p); /* Attribute type: Receive window size */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   889    PUTSHORT(PPPOL2TP_RECEIVEWINDOWSIZE, p); /* Attribute value: Receive window size */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   890  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   891  #if PPPOL2TP_AUTH_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   892    /* AVP - Challenge */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   893    if (l2tp->secret != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   894      PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 6 + sizeof(l2tp->secret_rv), p); /* Mandatory flag + len field */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   895      PUTSHORT(0, p); /* Vendor ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   896      PUTSHORT(PPPOL2TP_AVPTYPE_CHALLENGE, p); /* Attribute type: Challenge */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   897      MEMCPY(p, l2tp->secret_rv, sizeof(l2tp->secret_rv)); /* Attribute value: Random vector */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   898      INCPTR(sizeof(l2tp->secret_rv), p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   899    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   900  #endif /* PPPOL2TP_AUTH_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   901  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   902    return pppol2tp_udp_send(l2tp, pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   903  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   904  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   905  /* Complete tunnel establishment */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   906  static err_t pppol2tp_send_scccn(pppol2tp_pcb *l2tp, u16_t ns) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   907    struct pbuf *pb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   908    u8_t *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   909    u16_t len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   910  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   911    /* calculate UDP packet length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   912    len = 12 +8;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   913  #if PPPOL2TP_AUTH_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   914    if (l2tp->send_challenge) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   915      len += 6 + sizeof(l2tp->challenge_hash);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   916    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   917  #endif /* PPPOL2TP_AUTH_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   918  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   919    /* allocate a buffer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   920    pb = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   921    if (pb == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   922      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   923    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   924    LWIP_ASSERT("pb->tot_len == pb->len", pb->tot_len == pb->len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   925  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   926    p = (u8_t*)pb->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   927    /* fill in pkt */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   928    /* L2TP control header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   929    PUTSHORT(PPPOL2TP_HEADERFLAG_CONTROL_MANDATORY, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   930    PUTSHORT(len, p); /* Length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   931    PUTSHORT(l2tp->source_tunnel_id, p); /* Tunnel Id */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   932    PUTSHORT(0, p); /* Session Id */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   933    PUTSHORT(ns, p); /* NS Sequence number - to peer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   934    PUTSHORT(l2tp->peer_ns, p); /* NR Sequence number - expected for peer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   935  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   936    /* AVP - Message type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   937    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 8, p); /* Mandatory flag + len field */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   938    PUTSHORT(0, p); /* Vendor ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   939    PUTSHORT(PPPOL2TP_AVPTYPE_MESSAGE, p); /* Attribute type: Message Type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   940    PUTSHORT(PPPOL2TP_MESSAGETYPE_SCCCN, p); /* Attribute value: Message type: SCCCN */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   941  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   942  #if PPPOL2TP_AUTH_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   943    /* AVP - Challenge response */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   944    if (l2tp->send_challenge) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   945      PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 6 + sizeof(l2tp->challenge_hash), p); /* Mandatory flag + len field */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   946      PUTSHORT(0, p); /* Vendor ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   947      PUTSHORT(PPPOL2TP_AVPTYPE_CHALLENGERESPONSE, p); /* Attribute type: Challenge response */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   948      MEMCPY(p, l2tp->challenge_hash, sizeof(l2tp->challenge_hash)); /* Attribute value: Computed challenge */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   949      INCPTR(sizeof(l2tp->challenge_hash), p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   950    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   951  #endif /* PPPOL2TP_AUTH_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   952  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   953    return pppol2tp_udp_send(l2tp, pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   954  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   955  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   956  /* Initiate a new session */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   957  static err_t pppol2tp_send_icrq(pppol2tp_pcb *l2tp, u16_t ns) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   958    struct pbuf *pb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   959    u8_t *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   960    u16_t len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   961    u32_t serialnumber;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   962  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   963    /* calculate UDP packet length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   964    len = 12 +8 +8 +10;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   965  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   966    /* allocate a buffer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   967    pb = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   968    if (pb == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   969      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   970    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   971    LWIP_ASSERT("pb->tot_len == pb->len", pb->tot_len == pb->len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   972  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   973    p = (u8_t*)pb->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   974    /* fill in pkt */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   975    /* L2TP control header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   976    PUTSHORT(PPPOL2TP_HEADERFLAG_CONTROL_MANDATORY, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   977    PUTSHORT(len, p); /* Length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   978    PUTSHORT(l2tp->source_tunnel_id, p); /* Tunnel Id */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   979    PUTSHORT(0, p); /* Session Id */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   980    PUTSHORT(ns, p); /* NS Sequence number - to peer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   981    PUTSHORT(l2tp->peer_ns, p); /* NR Sequence number - expected for peer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   982  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   983    /* AVP - Message type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   984    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 8, p); /* Mandatory flag + len field */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   985    PUTSHORT(0, p); /* Vendor ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   986    PUTSHORT(PPPOL2TP_AVPTYPE_MESSAGE, p); /* Attribute type: Message Type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   987    PUTSHORT(PPPOL2TP_MESSAGETYPE_ICRQ, p); /* Attribute value: Message type: ICRQ */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   988  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   989    /* AVP - Assign session ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   990    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 8, p); /* Mandatory flag + len field */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   991    PUTSHORT(0, p); /* Vendor ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   992    PUTSHORT(PPPOL2TP_AVPTYPE_SESSIONID, p); /* Attribute type: Session ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   993    PUTSHORT(l2tp->remote_session_id, p); /* Attribute value: Session ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   994  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   995    /* AVP - Call Serial Number */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   996    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 10, p); /* Mandatory flag + len field */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   997    PUTSHORT(0, p); /* Vendor ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   998    PUTSHORT(PPPOL2TP_AVPTYPE_CALLSERIALNUMBER, p); /* Attribute type: Serial number */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	   999    serialnumber = magic();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1000    PUTLONG(serialnumber, p); /* Attribute value: Serial number */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1001  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1002    return pppol2tp_udp_send(l2tp, pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1003  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1004  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1005  /* Complete tunnel establishment */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1006  static err_t pppol2tp_send_iccn(pppol2tp_pcb *l2tp, u16_t ns) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1007    struct pbuf *pb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1008    u8_t *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1009    u16_t len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1010  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1011    /* calculate UDP packet length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1012    len = 12 +8 +10 +10;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1013  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1014    /* allocate a buffer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1015    pb = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1016    if (pb == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1017      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1018    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1019    LWIP_ASSERT("pb->tot_len == pb->len", pb->tot_len == pb->len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1020  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1021    p = (u8_t*)pb->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1022    /* fill in pkt */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1023    /* L2TP control header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1024    PUTSHORT(PPPOL2TP_HEADERFLAG_CONTROL_MANDATORY, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1025    PUTSHORT(len, p); /* Length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1026    PUTSHORT(l2tp->source_tunnel_id, p); /* Tunnel Id */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1027    PUTSHORT(l2tp->source_session_id, p); /* Session Id */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1028    PUTSHORT(ns, p); /* NS Sequence number - to peer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1029    PUTSHORT(l2tp->peer_ns, p); /* NR Sequence number - expected for peer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1030  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1031    /* AVP - Message type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1032    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 8, p); /* Mandatory flag + len field */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1033    PUTSHORT(0, p); /* Vendor ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1034    PUTSHORT(PPPOL2TP_AVPTYPE_MESSAGE, p); /* Attribute type: Message Type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1035    PUTSHORT(PPPOL2TP_MESSAGETYPE_ICCN, p); /* Attribute value: Message type: ICCN */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1036  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1037    /* AVP - Framing type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1038    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 10, p); /* Mandatory flag + len field */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1039    PUTSHORT(0, p); /* Vendor ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1040    PUTSHORT(PPPOL2TP_AVPTYPE_FRAMINGTYPE, p); /* Attribute type: Framing type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1041    PUTLONG(PPPOL2TP_FRAMINGTYPE, p); /* Attribute value: Framing type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1042  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1043    /* AVP - TX Connect speed */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1044    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 10, p); /* Mandatory flag + len field */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1045    PUTSHORT(0, p); /* Vendor ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1046    PUTSHORT(PPPOL2TP_AVPTYPE_TXCONNECTSPEED, p); /* Attribute type: TX Connect speed */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1047    PUTLONG(PPPOL2TP_TXCONNECTSPEED, p); /* Attribute value: TX Connect speed */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1048  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1049    return pppol2tp_udp_send(l2tp, pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1050  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1051  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1052  /* Send a ZLB ACK packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1053  static err_t pppol2tp_send_zlb(pppol2tp_pcb *l2tp, u16_t ns, u16_t nr) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1054    struct pbuf *pb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1055    u8_t *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1056    u16_t len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1057  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1058    /* calculate UDP packet length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1059    len = 12;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1060  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1061    /* allocate a buffer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1062    pb = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1063    if (pb == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1064      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1065    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1066    LWIP_ASSERT("pb->tot_len == pb->len", pb->tot_len == pb->len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1067  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1068    p = (u8_t*)pb->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1069    /* fill in pkt */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1070    /* L2TP control header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1071    PUTSHORT(PPPOL2TP_HEADERFLAG_CONTROL_MANDATORY, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1072    PUTSHORT(len, p); /* Length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1073    PUTSHORT(l2tp->source_tunnel_id, p); /* Tunnel Id */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1074    PUTSHORT(0, p); /* Session Id */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1075    PUTSHORT(ns, p); /* NS Sequence number - to peer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1076    PUTSHORT(nr, p); /* NR Sequence number - expected for peer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1077  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1078    return pppol2tp_udp_send(l2tp, pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1079  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1080  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1081  /* Send a StopCCN packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1082  static err_t pppol2tp_send_stopccn(pppol2tp_pcb *l2tp, u16_t ns) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1083    struct pbuf *pb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1084    u8_t *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1085    u16_t len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1086  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1087    /* calculate UDP packet length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1088    len = 12 +8 +8 +8;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1089  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1090    /* allocate a buffer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1091    pb = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1092    if (pb == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1093      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1094    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1095    LWIP_ASSERT("pb->tot_len == pb->len", pb->tot_len == pb->len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1096  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1097    p = (u8_t*)pb->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1098    /* fill in pkt */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1099    /* L2TP control header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1100    PUTSHORT(PPPOL2TP_HEADERFLAG_CONTROL_MANDATORY, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1101    PUTSHORT(len, p); /* Length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1102    PUTSHORT(l2tp->source_tunnel_id, p); /* Tunnel Id */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1103    PUTSHORT(0, p); /* Session Id */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1104    PUTSHORT(ns, p); /* NS Sequence number - to peer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1105    PUTSHORT(l2tp->peer_ns, p); /* NR Sequence number - expected for peer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1106  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1107    /* AVP - Message type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1108    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 8, p); /* Mandatory flag + len field */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1109    PUTSHORT(0, p); /* Vendor ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1110    PUTSHORT(PPPOL2TP_AVPTYPE_MESSAGE, p); /* Attribute type: Message Type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1111    PUTSHORT(PPPOL2TP_MESSAGETYPE_STOPCCN, p); /* Attribute value: Message type: StopCCN */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1112  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1113    /* AVP - Assign tunnel ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1114    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 8, p); /* Mandatory flag + len field */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1115    PUTSHORT(0, p); /* Vendor ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1116    PUTSHORT(PPPOL2TP_AVPTYPE_TUNNELID, p); /* Attribute type: Tunnel ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1117    PUTSHORT(l2tp->remote_tunnel_id, p); /* Attribute value: Tunnel ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1118  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1119    /* AVP - Result code */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1120    PUTSHORT(PPPOL2TP_AVPHEADERFLAG_MANDATORY + 8, p); /* Mandatory flag + len field */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1121    PUTSHORT(0, p); /* Vendor ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1122    PUTSHORT(PPPOL2TP_AVPTYPE_RESULTCODE, p); /* Attribute type: Result code */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1123    PUTSHORT(PPPOL2TP_RESULTCODE, p); /* Attribute value: Result code */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1124  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1125    return pppol2tp_udp_send(l2tp, pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1126  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1127  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1128  static err_t pppol2tp_xmit(pppol2tp_pcb *l2tp, struct pbuf *pb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1129    u8_t *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1130  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1131    /* make room for L2TP header - should not fail */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1132    if (pbuf_add_header(pb, PPPOL2TP_OUTPUT_DATA_HEADER_LEN) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1133      /* bail out */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1134      PPPDEBUG(LOG_ERR, ("pppol2tp: pppol2tp_pcb: could not allocate room for L2TP header\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1135      LINK_STATS_INC(link.lenerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1136      pbuf_free(pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1137      return ERR_BUF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1138    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1139  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1140    p = (u8_t*)pb->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1141    PUTSHORT(PPPOL2TP_HEADERFLAG_DATA_MANDATORY, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1142    PUTSHORT(l2tp->source_tunnel_id, p); /* Tunnel Id */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1143    PUTSHORT(l2tp->source_session_id, p); /* Session Id */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1144  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1145    return pppol2tp_udp_send(l2tp, pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1146  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1147  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1148  static err_t pppol2tp_udp_send(pppol2tp_pcb *l2tp, struct pbuf *pb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1149    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1150    if (l2tp->netif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1151      err = udp_sendto_if(l2tp->udp, pb, &l2tp->remote_ip, l2tp->tunnel_port, l2tp->netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1152    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1153      err = udp_sendto(l2tp->udp, pb, &l2tp->remote_ip, l2tp->tunnel_port);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1154    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1155    pbuf_free(pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1156    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1157  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1158  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppol2tp.c	  1159  #endif /* PPP_SUPPORT && PPPOL2TP_SUPPORT */

	; Module end
