	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\.fsm.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Rtl8211f -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\fsm.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\fsm.src ..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\fsm.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\fsm.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	733
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\fsm.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L5
	.byte	2
	.byte	'int',0,4,5,3
	.word	170
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	177
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	219
	.byte	7
	.word	219
	.byte	8
	.byte	'__cmpswapw',0
	.word	235
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	240
	.byte	9
	.byte	'value',0
	.word	219
	.byte	9
	.byte	'compare',0
	.word	219
	.byte	0,2
	.byte	'short int',0,2,5,10
	.byte	'__wchar_t',0,1,1,1
	.word	297
	.byte	10
	.byte	'__size_t',0,1,1,1
	.word	219
	.byte	10
	.byte	'__ptrdiff_t',0,1,1,1
	.word	170
	.byte	11,1,7
	.word	365
	.byte	10
	.byte	'__codeptr',0,1,1,1
	.word	367
	.byte	10
	.byte	'__intptr_t',0,1,1,1
	.word	170
	.byte	10
	.byte	'__uintptr_t',0,1,1,1
	.word	219
	.byte	2
	.byte	'unsigned char',0,1,8,10
	.byte	'uint8',0,2,108,29
	.word	429
	.byte	2
	.byte	'unsigned short int',0,2,7,10
	.byte	'uint16',0,2,112,29
	.word	460
	.byte	2
	.byte	'unsigned long int',0,4,7,10
	.byte	'uint32',0,2,116,29
	.word	497
	.byte	2
	.byte	'char',0,1,6,10
	.byte	'sint8',0,2,125,29
	.word	533
	.byte	10
	.byte	'sint16',0,2,129,1,29
	.word	297
	.byte	2
	.byte	'long int',0,4,5,10
	.byte	'sint32',0,2,134,1,29
	.word	571
	.byte	2
	.byte	'long long int',0,8,5,10
	.byte	'sint64',0,2,141,1,29
	.word	599
	.byte	2
	.byte	'float',0,4,4,10
	.byte	'float32',0,2,170,1,29
	.word	632
	.byte	12
	.byte	'void',0,7
	.word	658
	.byte	10
	.byte	'pvoid',0,3,54,28
	.word	664
	.byte	10
	.byte	'Ifx_TickTime',0,3,76,28
	.word	599
	.byte	10
	.byte	'u32_t',0,4,87,16
	.word	497
	.byte	10
	.byte	'intmax_t',0,5,198,2,41
	.word	599
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,22,0,3,8,58,15,59,15,57,15,73,19,0,0,11,21,0,54,15,0,0,12,59,0
	.byte	3,8,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\fsm.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'cc.h',0,2,0,0
	.byte	'stdint.h',0,3,0,0,0
.L9:
.L7:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	     1  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	     2   * fsm.c - {Link, IP} Control Protocol Finite State Machine.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	     3   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	     4   * Copyright (c) 1984-2000 Carnegie Mellon University. All rights reserved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	     5   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	     6   * Redistribution and use in source and binary forms, with or without
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	     7   * modification, are permitted provided that the following conditions
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	     8   * are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	     9   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    10   * 1. Redistributions of source code must retain the above copyright
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    11   *    notice, this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    12   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    13   * 2. Redistributions in binary form must reproduce the above copyright
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    14   *    notice, this list of conditions and the following disclaimer in
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    15   *    the documentation and/or other materials provided with the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    16   *    distribution.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    17   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    18   * 3. The name "Carnegie Mellon University" must not be used to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    19   *    endorse or promote products derived from this software without
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    20   *    prior written permission. For permission or any legal
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    21   *    details, please contact
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    22   *      Office of Technology Transfer
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    23   *      Carnegie Mellon University
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    24   *      5000 Forbes Avenue
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    25   *      Pittsburgh, PA  15213-3890
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    26   *      (412) 268-4387, fax: (412) 268-7395
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    27   *      tech-transfer@andrew.cmu.edu
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    28   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    29   * 4. Redistributions of any form whatsoever must retain the following
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    30   *    acknowledgment:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    31   *    "This product includes software developed by Computing Services
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    32   *     at Carnegie Mellon University (http://www.cmu.edu/computing/)."
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    33   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    34   * CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    35   * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    36   * AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    37   * FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    38   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    39   * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    40   * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    41   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    42  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    43  #include "netif/ppp/ppp_opts.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    44  #if PPP_SUPPORT /* don't build if not configured for use in lwipopts.h */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    45  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    46  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    47   * @todo:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    48   * Randomize fsm id on link/init.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    49   * Deal with variable outgoing MTU.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    50   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    51  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    52  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    53  #include <stdio.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    54  #include <string.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    55  #include <sys/types.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    56  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    57  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    58  #include "netif/ppp/ppp_impl.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    59  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    60  #include "netif/ppp/fsm.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    61  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    62  static void fsm_timeout (void *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    63  static void fsm_rconfreq(fsm *f, u_char id, u_char *inp, int len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    64  static void fsm_rconfack(fsm *f, int id, u_char *inp, int len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    65  static void fsm_rconfnakrej(fsm *f, int code, int id, u_char *inp, int len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    66  static void fsm_rtermreq(fsm *f, int id, u_char *p, int len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    67  static void fsm_rtermack(fsm *f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    68  static void fsm_rcoderej(fsm *f, u_char *inp, int len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    69  static void fsm_sconfreq(fsm *f, int retransmit);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    70  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    71  #define PROTO_NAME(f)	((f)->callbacks->proto_name)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    72  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    73  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    74   * fsm_init - Initialize fsm.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    75   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    76   * Initialize fsm state.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    77   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    78  void fsm_init(fsm *f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    79      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    80      f->state = PPP_FSM_INITIAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    81      f->flags = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    82      f->id = 0;				/* XXX Start with random id? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    83      f->maxnakloops = pcb->settings.fsm_max_nak_loops;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    84      f->term_reason_len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    85  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    86  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    87  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    88  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    89   * fsm_lowerup - The lower layer is up.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    90   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    91  void fsm_lowerup(fsm *f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    92      switch( f->state ){
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    93      case PPP_FSM_INITIAL:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    94  	f->state = PPP_FSM_CLOSED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    95  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    96  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    97      case PPP_FSM_STARTING:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    98  	if( f->flags & OPT_SILENT )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	    99  	    f->state = PPP_FSM_STOPPED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   100  	else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   101  	    /* Send an initial configure-request */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   102  	    fsm_sconfreq(f, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   103  	    f->state = PPP_FSM_REQSENT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   104  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   105  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   106  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   107      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   108  	FSMDEBUG(("%s: Up event in state %d!", PROTO_NAME(f), f->state));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   109  	/* no break */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   110      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   111  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   112  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   113  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   114  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   115   * fsm_lowerdown - The lower layer is down.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   116   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   117   * Cancel all timeouts and inform upper layers.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   118   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   119  void fsm_lowerdown(fsm *f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   120      switch( f->state ){
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   121      case PPP_FSM_CLOSED:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   122  	f->state = PPP_FSM_INITIAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   123  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   124  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   125      case PPP_FSM_STOPPED:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   126  	f->state = PPP_FSM_STARTING;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   127  	if( f->callbacks->starting )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   128  	    (*f->callbacks->starting)(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   129  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   130  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   131      case PPP_FSM_CLOSING:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   132  	f->state = PPP_FSM_INITIAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   133  	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   134  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   135  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   136      case PPP_FSM_STOPPING:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   137      case PPP_FSM_REQSENT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   138      case PPP_FSM_ACKRCVD:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   139      case PPP_FSM_ACKSENT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   140  	f->state = PPP_FSM_STARTING;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   141  	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   142  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   143  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   144      case PPP_FSM_OPENED:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   145  	if( f->callbacks->down )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   146  	    (*f->callbacks->down)(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   147  	f->state = PPP_FSM_STARTING;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   148  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   149  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   150      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   151  	FSMDEBUG(("%s: Down event in state %d!", PROTO_NAME(f), f->state));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   152  	/* no break */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   153      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   154  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   155  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   156  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   157  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   158   * fsm_open - Link is allowed to come up.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   159   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   160  void fsm_open(fsm *f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   161      switch( f->state ){
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   162      case PPP_FSM_INITIAL:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   163  	f->state = PPP_FSM_STARTING;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   164  	if( f->callbacks->starting )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   165  	    (*f->callbacks->starting)(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   166  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   167  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   168      case PPP_FSM_CLOSED:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   169  	if( f->flags & OPT_SILENT )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   170  	    f->state = PPP_FSM_STOPPED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   171  	else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   172  	    /* Send an initial configure-request */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   173  	    fsm_sconfreq(f, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   174  	    f->state = PPP_FSM_REQSENT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   175  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   176  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   177  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   178      case PPP_FSM_CLOSING:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   179  	f->state = PPP_FSM_STOPPING;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   180  	/* fall through */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   181  	/* no break */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   182      case PPP_FSM_STOPPED:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   183      case PPP_FSM_OPENED:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   184  	if( f->flags & OPT_RESTART ){
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   185  	    fsm_lowerdown(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   186  	    fsm_lowerup(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   187  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   188  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   189      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   190  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   191      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   192  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   193  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   194  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   195   * terminate_layer - Start process of shutting down the FSM
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   196   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   197   * Cancel any timeout running, notify upper layers we're done, and
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   198   * send a terminate-request message as configured.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   199   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   200  static void terminate_layer(fsm *f, int nextstate) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   201      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   202  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   203      if( f->state != PPP_FSM_OPENED )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   204  	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   205      else if( f->callbacks->down )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   206  	(*f->callbacks->down)(f);	/* Inform upper layers we're down */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   207  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   208      /* Init restart counter and send Terminate-Request */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   209      f->retransmits = pcb->settings.fsm_max_term_transmits;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   210      fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   211  	      (const u_char *) f->term_reason, f->term_reason_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   212  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   213      if (f->retransmits == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   214  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   215  	 * User asked for no terminate requests at all; just close it.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   216  	 * We've already fired off one Terminate-Request just to be nice
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   217  	 * to the peer, but we're not going to wait for a reply.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   218  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   219  	f->state = nextstate == PPP_FSM_CLOSING ? PPP_FSM_CLOSED : PPP_FSM_STOPPED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   220  	if( f->callbacks->finished )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   221  	    (*f->callbacks->finished)(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   222  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   223      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   224  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   225      TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   226      --f->retransmits;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   227  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   228      f->state = nextstate;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   229  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   230  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   231  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   232   * fsm_close - Start closing connection.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   233   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   234   * Cancel timeouts and either initiate close or possibly go directly to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   235   * the PPP_FSM_CLOSED state.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   236   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   237  void fsm_close(fsm *f, const char *reason) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   238      f->term_reason = reason;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   239      f->term_reason_len = (reason == NULL? 0: (u8_t)LWIP_MIN(strlen(reason), 0xFF) );
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   240      switch( f->state ){
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   241      case PPP_FSM_STARTING:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   242  	f->state = PPP_FSM_INITIAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   243  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   244      case PPP_FSM_STOPPED:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   245  	f->state = PPP_FSM_CLOSED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   246  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   247      case PPP_FSM_STOPPING:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   248  	f->state = PPP_FSM_CLOSING;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   249  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   250  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   251      case PPP_FSM_REQSENT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   252      case PPP_FSM_ACKRCVD:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   253      case PPP_FSM_ACKSENT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   254      case PPP_FSM_OPENED:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   255  	terminate_layer(f, PPP_FSM_CLOSING);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   256  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   257      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   258  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   259      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   260  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   261  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   262  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   263  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   264   * fsm_timeout - Timeout expired.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   265   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   266  static void fsm_timeout(void *arg) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   267      fsm *f = (fsm *) arg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   268      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   269  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   270      switch (f->state) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   271      case PPP_FSM_CLOSING:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   272      case PPP_FSM_STOPPING:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   273  	if( f->retransmits <= 0 ){
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   274  	    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   275  	     * We've waited for an ack long enough.  Peer probably heard us.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   276  	     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   277  	    f->state = (f->state == PPP_FSM_CLOSING)? PPP_FSM_CLOSED: PPP_FSM_STOPPED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   278  	    if( f->callbacks->finished )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   279  		(*f->callbacks->finished)(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   280  	} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   281  	    /* Send Terminate-Request */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   282  	    fsm_sdata(f, TERMREQ, f->reqid = ++f->id,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   283  		      (const u_char *) f->term_reason, f->term_reason_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   284  	    TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   285  	    --f->retransmits;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   286  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   287  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   288  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   289      case PPP_FSM_REQSENT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   290      case PPP_FSM_ACKRCVD:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   291      case PPP_FSM_ACKSENT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   292  	if (f->retransmits <= 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   293  	    ppp_warn("%s: timeout sending Config-Requests", PROTO_NAME(f));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   294  	    f->state = PPP_FSM_STOPPED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   295  	    if( (f->flags & OPT_PASSIVE) == 0 && f->callbacks->finished )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   296  		(*f->callbacks->finished)(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   297  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   298  	} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   299  	    /* Retransmit the configure-request */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   300  	    if (f->callbacks->retransmit)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   301  		(*f->callbacks->retransmit)(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   302  	    fsm_sconfreq(f, 1);		/* Re-send Configure-Request */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   303  	    if( f->state == PPP_FSM_ACKRCVD )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   304  		f->state = PPP_FSM_REQSENT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   305  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   306  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   307  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   308      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   309  	FSMDEBUG(("%s: Timeout event in state %d!", PROTO_NAME(f), f->state));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   310  	/* no break */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   311      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   312  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   313  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   314  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   315  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   316   * fsm_input - Input packet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   317   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   318  void fsm_input(fsm *f, u_char *inpacket, int l) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   319      u_char *inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   320      u_char code, id;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   321      int len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   322  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   323      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   324       * Parse header (code, id and length).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   325       * If packet too short, drop it.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   326       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   327      inp = inpacket;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   328      if (l < HEADERLEN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   329  	FSMDEBUG(("fsm_input(%x): Rcvd short header.", f->protocol));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   330  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   331      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   332      GETCHAR(code, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   333      GETCHAR(id, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   334      GETSHORT(len, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   335      if (len < HEADERLEN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   336  	FSMDEBUG(("fsm_input(%x): Rcvd illegal length.", f->protocol));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   337  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   338      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   339      if (len > l) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   340  	FSMDEBUG(("fsm_input(%x): Rcvd short packet.", f->protocol));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   341  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   342      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   343      len -= HEADERLEN;		/* subtract header length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   344  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   345      if( f->state == PPP_FSM_INITIAL || f->state == PPP_FSM_STARTING ){
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   346  	FSMDEBUG(("fsm_input(%x): Rcvd packet in state %d.",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   347  		  f->protocol, f->state));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   348  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   349      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   350  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   351      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   352       * Action depends on code.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   353       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   354      switch (code) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   355      case CONFREQ:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   356  	fsm_rconfreq(f, id, inp, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   357  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   358      
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   359      case CONFACK:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   360  	fsm_rconfack(f, id, inp, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   361  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   362      
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   363      case CONFNAK:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   364      case CONFREJ:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   365  	fsm_rconfnakrej(f, code, id, inp, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   366  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   367      
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   368      case TERMREQ:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   369  	fsm_rtermreq(f, id, inp, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   370  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   371      
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   372      case TERMACK:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   373  	fsm_rtermack(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   374  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   375      
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   376      case CODEREJ:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   377  	fsm_rcoderej(f, inp, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   378  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   379      
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   380      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   381  	if( !f->callbacks->extcode
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   382  	   || !(*f->callbacks->extcode)(f, code, id, inp, len) )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   383  	    fsm_sdata(f, CODEREJ, ++f->id, inpacket, len + HEADERLEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   384  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   385      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   386  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   387  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   388  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   389  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   390   * fsm_rconfreq - Receive Configure-Request.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   391   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   392  static void fsm_rconfreq(fsm *f, u_char id, u_char *inp, int len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   393      int code, reject_if_disagree;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   394  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   395      switch( f->state ){
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   396      case PPP_FSM_CLOSED:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   397  	/* Go away, we're closed */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   398  	fsm_sdata(f, TERMACK, id, NULL, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   399  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   400      case PPP_FSM_CLOSING:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   401      case PPP_FSM_STOPPING:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   402  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   403  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   404      case PPP_FSM_OPENED:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   405  	/* Go down and restart negotiation */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   406  	if( f->callbacks->down )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   407  	    (*f->callbacks->down)(f);	/* Inform upper layers */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   408  	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   409  	f->state = PPP_FSM_REQSENT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   410  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   411  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   412      case PPP_FSM_STOPPED:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   413  	/* Negotiation started by our peer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   414  	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   415  	f->state = PPP_FSM_REQSENT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   416  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   417      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   418  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   419      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   420  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   421      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   422       * Pass the requested configuration options
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   423       * to protocol-specific code for checking.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   424       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   425      if (f->callbacks->reqci){		/* Check CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   426  	reject_if_disagree = (f->nakloops >= f->maxnakloops);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   427  	code = (*f->callbacks->reqci)(f, inp, &len, reject_if_disagree);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   428      } else if (len)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   429  	code = CONFREJ;			/* Reject all CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   430      else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   431  	code = CONFACK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   432  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   433      /* send the Ack, Nak or Rej to the peer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   434      fsm_sdata(f, code, id, inp, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   435  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   436      if (code == CONFACK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   437  	if (f->state == PPP_FSM_ACKRCVD) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   438  	    UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   439  	    f->state = PPP_FSM_OPENED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   440  	    if (f->callbacks->up)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   441  		(*f->callbacks->up)(f);	/* Inform upper layers */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   442  	} else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   443  	    f->state = PPP_FSM_ACKSENT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   444  	f->nakloops = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   445  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   446      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   447  	/* we sent CONFACK or CONFREJ */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   448  	if (f->state != PPP_FSM_ACKRCVD)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   449  	    f->state = PPP_FSM_REQSENT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   450  	if( code == CONFNAK )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   451  	    ++f->nakloops;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   452      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   453  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   454  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   455  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   456  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   457   * fsm_rconfack - Receive Configure-Ack.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   458   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   459  static void fsm_rconfack(fsm *f, int id, u_char *inp, int len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   460      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   461  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   462      if (id != f->reqid || f->seen_ack)		/* Expected id? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   463  	return;					/* Nope, toss... */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   464      if( !(f->callbacks->ackci? (*f->callbacks->ackci)(f, inp, len):
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   465  	  (len == 0)) ){
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   466  	/* Ack is bad - ignore it */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   467  	ppp_error("Received bad configure-ack: %P", inp, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   468  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   469      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   470      f->seen_ack = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   471      f->rnakloops = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   472  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   473      switch (f->state) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   474      case PPP_FSM_CLOSED:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   475      case PPP_FSM_STOPPED:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   476  	fsm_sdata(f, TERMACK, id, NULL, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   477  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   478  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   479      case PPP_FSM_REQSENT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   480  	f->state = PPP_FSM_ACKRCVD;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   481  	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   482  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   483  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   484      case PPP_FSM_ACKRCVD:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   485  	/* Huh? an extra valid Ack? oh well... */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   486  	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   487  	fsm_sconfreq(f, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   488  	f->state = PPP_FSM_REQSENT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   489  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   490  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   491      case PPP_FSM_ACKSENT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   492  	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   493  	f->state = PPP_FSM_OPENED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   494  	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   495  	if (f->callbacks->up)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   496  	    (*f->callbacks->up)(f);	/* Inform upper layers */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   497  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   498  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   499      case PPP_FSM_OPENED:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   500  	/* Go down and restart negotiation */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   501  	if (f->callbacks->down)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   502  	    (*f->callbacks->down)(f);	/* Inform upper layers */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   503  	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   504  	f->state = PPP_FSM_REQSENT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   505  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   506      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   507  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   508      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   509  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   510  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   511  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   512  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   513   * fsm_rconfnakrej - Receive Configure-Nak or Configure-Reject.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   514   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   515  static void fsm_rconfnakrej(fsm *f, int code, int id, u_char *inp, int len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   516      int ret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   517      int treat_as_reject;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   518  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   519      if (id != f->reqid || f->seen_ack)	/* Expected id? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   520  	return;				/* Nope, toss... */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   521  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   522      if (code == CONFNAK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   523  	++f->rnakloops;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   524  	treat_as_reject = (f->rnakloops >= f->maxnakloops);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   525  	if (f->callbacks->nakci == NULL
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   526  	    || !(ret = f->callbacks->nakci(f, inp, len, treat_as_reject))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   527  	    ppp_error("Received bad configure-nak: %P", inp, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   528  	    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   529  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   530      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   531  	f->rnakloops = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   532  	if (f->callbacks->rejci == NULL
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   533  	    || !(ret = f->callbacks->rejci(f, inp, len))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   534  	    ppp_error("Received bad configure-rej: %P", inp, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   535  	    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   536  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   537      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   538  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   539      f->seen_ack = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   540  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   541      switch (f->state) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   542      case PPP_FSM_CLOSED:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   543      case PPP_FSM_STOPPED:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   544  	fsm_sdata(f, TERMACK, id, NULL, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   545  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   546  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   547      case PPP_FSM_REQSENT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   548      case PPP_FSM_ACKSENT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   549  	/* They didn't agree to what we wanted - try another request */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   550  	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   551  	if (ret < 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   552  	    f->state = PPP_FSM_STOPPED;		/* kludge for stopping CCP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   553  	else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   554  	    fsm_sconfreq(f, 0);		/* Send Configure-Request */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   555  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   556  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   557      case PPP_FSM_ACKRCVD:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   558  	/* Got a Nak/reject when we had already had an Ack?? oh well... */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   559  	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   560  	fsm_sconfreq(f, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   561  	f->state = PPP_FSM_REQSENT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   562  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   563  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   564      case PPP_FSM_OPENED:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   565  	/* Go down and restart negotiation */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   566  	if (f->callbacks->down)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   567  	    (*f->callbacks->down)(f);	/* Inform upper layers */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   568  	fsm_sconfreq(f, 0);		/* Send initial Configure-Request */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   569  	f->state = PPP_FSM_REQSENT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   570  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   571      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   572  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   573      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   574  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   575  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   576  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   577  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   578   * fsm_rtermreq - Receive Terminate-Req.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   579   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   580  static void fsm_rtermreq(fsm *f, int id, u_char *p, int len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   581      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   582  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   583      switch (f->state) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   584      case PPP_FSM_ACKRCVD:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   585      case PPP_FSM_ACKSENT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   586  	f->state = PPP_FSM_REQSENT;		/* Start over but keep trying */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   587  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   588  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   589      case PPP_FSM_OPENED:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   590  	if (len > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   591  	    ppp_info("%s terminated by peer (%0.*v)", PROTO_NAME(f), len, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   592  	} else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   593  	    ppp_info("%s terminated by peer", PROTO_NAME(f));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   594  	f->retransmits = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   595  	f->state = PPP_FSM_STOPPING;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   596  	if (f->callbacks->down)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   597  	    (*f->callbacks->down)(f);	/* Inform upper layers */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   598  	TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   599  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   600      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   601  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   602      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   603  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   604      fsm_sdata(f, TERMACK, id, NULL, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   605  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   606  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   607  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   608  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   609   * fsm_rtermack - Receive Terminate-Ack.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   610   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   611  static void fsm_rtermack(fsm *f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   612      switch (f->state) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   613      case PPP_FSM_CLOSING:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   614  	UNTIMEOUT(fsm_timeout, f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   615  	f->state = PPP_FSM_CLOSED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   616  	if( f->callbacks->finished )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   617  	    (*f->callbacks->finished)(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   618  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   619      case PPP_FSM_STOPPING:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   620  	UNTIMEOUT(fsm_timeout, f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   621  	f->state = PPP_FSM_STOPPED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   622  	if( f->callbacks->finished )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   623  	    (*f->callbacks->finished)(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   624  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   625  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   626      case PPP_FSM_ACKRCVD:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   627  	f->state = PPP_FSM_REQSENT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   628  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   629  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   630      case PPP_FSM_OPENED:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   631  	if (f->callbacks->down)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   632  	    (*f->callbacks->down)(f);	/* Inform upper layers */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   633  	fsm_sconfreq(f, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   634  	f->state = PPP_FSM_REQSENT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   635  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   636      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   637  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   638      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   639  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   640  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   641  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   642  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   643   * fsm_rcoderej - Receive an Code-Reject.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   644   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   645  static void fsm_rcoderej(fsm *f, u_char *inp, int len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   646      u_char code, id;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   647  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   648      if (len < HEADERLEN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   649  	FSMDEBUG(("fsm_rcoderej: Rcvd short Code-Reject packet!"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   650  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   651      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   652      GETCHAR(code, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   653      GETCHAR(id, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   654      ppp_warn("%s: Rcvd Code-Reject for code %d, id %d", PROTO_NAME(f), code, id);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   655  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   656      if( f->state == PPP_FSM_ACKRCVD )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   657  	f->state = PPP_FSM_REQSENT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   658  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   659  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   660  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   661  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   662   * fsm_protreject - Peer doesn't speak this protocol.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   663   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   664   * Treat this as a catastrophic error (RXJ-).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   665   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   666  void fsm_protreject(fsm *f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   667      switch( f->state ){
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   668      case PPP_FSM_CLOSING:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   669  	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   670  	/* fall through */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   671  	/* no break */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   672      case PPP_FSM_CLOSED:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   673  	f->state = PPP_FSM_CLOSED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   674  	if( f->callbacks->finished )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   675  	    (*f->callbacks->finished)(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   676  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   677  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   678      case PPP_FSM_STOPPING:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   679      case PPP_FSM_REQSENT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   680      case PPP_FSM_ACKRCVD:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   681      case PPP_FSM_ACKSENT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   682  	UNTIMEOUT(fsm_timeout, f);	/* Cancel timeout */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   683  	/* fall through */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   684  	/* no break */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   685      case PPP_FSM_STOPPED:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   686  	f->state = PPP_FSM_STOPPED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   687  	if( f->callbacks->finished )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   688  	    (*f->callbacks->finished)(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   689  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   690  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   691      case PPP_FSM_OPENED:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   692  	terminate_layer(f, PPP_FSM_STOPPING);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   693  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   694  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   695      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   696  	FSMDEBUG(("%s: Protocol-reject event in state %d!",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   697  		  PROTO_NAME(f), f->state));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   698  	/* no break */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   699      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   700  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   701  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   702  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   703  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   704   * fsm_sconfreq - Send a Configure-Request.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   705   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   706  static void fsm_sconfreq(fsm *f, int retransmit) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   707      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   708      struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   709      u_char *outp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   710      int cilen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   711  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   712      if( f->state != PPP_FSM_REQSENT && f->state != PPP_FSM_ACKRCVD && f->state != PPP_FSM_ACKSENT ){
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   713  	/* Not currently negotiating - reset options */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   714  	if( f->callbacks->resetci )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   715  	    (*f->callbacks->resetci)(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   716  	f->nakloops = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   717  	f->rnakloops = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   718      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   719  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   720      if( !retransmit ){
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   721  	/* New request - reset retransmission counter, use new ID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   722  	f->retransmits = pcb->settings.fsm_max_conf_req_transmits;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   723  	f->reqid = ++f->id;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   724      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   725  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   726      f->seen_ack = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   727  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   728      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   729       * Make up the request packet
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   730       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   731      if( f->callbacks->cilen && f->callbacks->addci ){
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   732  	cilen = (*f->callbacks->cilen)(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   733  	if( cilen > pcb->peer_mru - HEADERLEN )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   734  	    cilen = pcb->peer_mru - HEADERLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   735      } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   736  	cilen = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   737  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   738      p = pbuf_alloc(PBUF_RAW, (u16_t)(cilen + HEADERLEN + PPP_HDRLEN), PPP_CTRL_PBUF_TYPE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   739      if(NULL == p)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   740          return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   741      if(p->tot_len != p->len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   742          pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   743          return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   744      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   745  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   746      /* send the request to our peer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   747      outp = (u_char*)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   748      MAKEHEADER(outp, f->protocol);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   749      PUTCHAR(CONFREQ, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   750      PUTCHAR(f->reqid, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   751      PUTSHORT(cilen + HEADERLEN, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   752      if (cilen != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   753  	(*f->callbacks->addci)(f, outp, &cilen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   754  	LWIP_ASSERT("cilen == p->len - HEADERLEN - PPP_HDRLEN", cilen == p->len - HEADERLEN - PPP_HDRLEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   755      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   756  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   757      ppp_write(pcb, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   758  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   759      /* start the retransmit timer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   760      --f->retransmits;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   761      TIMEOUT(fsm_timeout, f, pcb->settings.fsm_timeout_time);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   762  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   763  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   764  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   765  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   766   * fsm_sdata - Send some data.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   767   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   768   * Used for all packets sent to our peer by this module.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   769   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   770  void fsm_sdata(fsm *f, u_char code, u_char id, const u_char *data, int datalen) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   771      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   772      struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   773      u_char *outp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   774      int outlen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   775  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   776      /* Adjust length to be smaller than MTU */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   777      if (datalen > pcb->peer_mru - HEADERLEN)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   778  	datalen = pcb->peer_mru - HEADERLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   779      outlen = datalen + HEADERLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   780  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   781      p = pbuf_alloc(PBUF_RAW, (u16_t)(outlen + PPP_HDRLEN), PPP_CTRL_PBUF_TYPE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   782      if(NULL == p)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   783          return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   784      if(p->tot_len != p->len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   785          pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   786          return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   787      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   788  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   789      outp = (u_char*)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   790      if (datalen) /* && data != outp + PPP_HDRLEN + HEADERLEN)  -- was only for fsm_sconfreq() */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   791  	MEMCPY(outp + PPP_HDRLEN + HEADERLEN, data, datalen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   792      MAKEHEADER(outp, f->protocol);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   793      PUTCHAR(code, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   794      PUTCHAR(id, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   795      PUTSHORT(outlen, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   796      ppp_write(pcb, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   797  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   798  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\fsm.c	   799  #endif /* PPP_SUPPORT */

	; Module end
