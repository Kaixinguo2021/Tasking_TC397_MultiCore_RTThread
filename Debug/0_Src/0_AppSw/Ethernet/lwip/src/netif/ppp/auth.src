	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\.auth.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Rtl8211f -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\auth.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\auth.src ..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\auth.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\auth.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	734
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\auth.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L5
	.byte	2
	.byte	'int',0,4,5,3
	.word	171
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	178
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	220
	.byte	7
	.word	220
	.byte	8
	.byte	'__cmpswapw',0
	.word	236
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	241
	.byte	9
	.byte	'value',0
	.word	220
	.byte	9
	.byte	'compare',0
	.word	220
	.byte	0,2
	.byte	'short int',0,2,5,10
	.byte	'__wchar_t',0,1,1,1
	.word	298
	.byte	10
	.byte	'__size_t',0,1,1,1
	.word	220
	.byte	10
	.byte	'__ptrdiff_t',0,1,1,1
	.word	171
	.byte	11,1,7
	.word	366
	.byte	10
	.byte	'__codeptr',0,1,1,1
	.word	368
	.byte	10
	.byte	'__intptr_t',0,1,1,1
	.word	171
	.byte	10
	.byte	'__uintptr_t',0,1,1,1
	.word	220
	.byte	2
	.byte	'unsigned char',0,1,8,10
	.byte	'uint8',0,2,108,29
	.word	430
	.byte	2
	.byte	'unsigned short int',0,2,7,10
	.byte	'uint16',0,2,112,29
	.word	461
	.byte	2
	.byte	'unsigned long int',0,4,7,10
	.byte	'uint32',0,2,116,29
	.word	498
	.byte	2
	.byte	'char',0,1,6,10
	.byte	'sint8',0,2,125,29
	.word	534
	.byte	10
	.byte	'sint16',0,2,129,1,29
	.word	298
	.byte	2
	.byte	'long int',0,4,5,10
	.byte	'sint32',0,2,134,1,29
	.word	572
	.byte	2
	.byte	'long long int',0,8,5,10
	.byte	'sint64',0,2,141,1,29
	.word	600
	.byte	2
	.byte	'float',0,4,4,10
	.byte	'float32',0,2,170,1,29
	.word	633
	.byte	12
	.byte	'void',0,7
	.word	659
	.byte	10
	.byte	'pvoid',0,3,54,28
	.word	665
	.byte	10
	.byte	'Ifx_TickTime',0,3,76,28
	.word	600
	.byte	10
	.byte	'u32_t',0,4,87,16
	.word	498
	.byte	10
	.byte	'intmax_t',0,5,198,2,41
	.word	600
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,22,0,3,8,58,15,59,15,57,15,73,19,0,0,11,21,0,54,15,0,0,12,59,0
	.byte	3,8,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\auth.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'cc.h',0,2,0,0
	.byte	'stdint.h',0,3,0,0,0
.L9:
.L7:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	     1  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	     2   * auth.c - PPP authentication and phase control.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	     3   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	     4   * Copyright (c) 1993-2002 Paul Mackerras. All rights reserved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	     5   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	     6   * Redistribution and use in source and binary forms, with or without
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	     7   * modification, are permitted provided that the following conditions
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	     8   * are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	     9   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    10   * 1. Redistributions of source code must retain the above copyright
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    11   *    notice, this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    12   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    13   * 2. The name(s) of the authors of this software must not be used to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    14   *    endorse or promote products derived from this software without
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    15   *    prior written permission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    16   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    17   * 3. Redistributions of any form whatsoever must retain the following
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    18   *    acknowledgment:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    19   *    "This product includes software developed by Paul Mackerras
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    20   *     <paulus@samba.org>".
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    21   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    22   * THE AUTHORS OF THIS SOFTWARE DISCLAIM ALL WARRANTIES WITH REGARD TO
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    23   * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    24   * AND FITNESS, IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    25   * SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    26   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    27   * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    28   * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    29   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    30   * Derived from main.c, which is:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    31   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    32   * Copyright (c) 1984-2000 Carnegie Mellon University. All rights reserved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    33   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    34   * Redistribution and use in source and binary forms, with or without
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    35   * modification, are permitted provided that the following conditions
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    36   * are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    37   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    38   * 1. Redistributions of source code must retain the above copyright
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    39   *    notice, this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    40   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    41   * 2. Redistributions in binary form must reproduce the above copyright
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    42   *    notice, this list of conditions and the following disclaimer in
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    43   *    the documentation and/or other materials provided with the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    44   *    distribution.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    45   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    46   * 3. The name "Carnegie Mellon University" must not be used to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    47   *    endorse or promote products derived from this software without
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    48   *    prior written permission. For permission or any legal
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    49   *    details, please contact
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    50   *      Office of Technology Transfer
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    51   *      Carnegie Mellon University
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    52   *      5000 Forbes Avenue
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    53   *      Pittsburgh, PA  15213-3890
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    54   *      (412) 268-4387, fax: (412) 268-7395
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    55   *      tech-transfer@andrew.cmu.edu
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    56   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    57   * 4. Redistributions of any form whatsoever must retain the following
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    58   *    acknowledgment:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    59   *    "This product includes software developed by Computing Services
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    60   *     at Carnegie Mellon University (http://www.cmu.edu/computing/)."
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    61   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    62   * CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    63   * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    64   * AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    65   * FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    66   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    67   * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    68   * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    69   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    70  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    71  #include "netif/ppp/ppp_opts.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    72  #if PPP_SUPPORT /* don't build if not configured for use in lwipopts.h */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    73  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    74  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    75  #include <stdio.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    76  #include <stddef.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    77  #include <stdlib.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    78  #include <unistd.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    79  #include <errno.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    80  #include <pwd.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    81  #include <grp.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    82  #include <string.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    83  #include <sys/types.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    84  #include <sys/stat.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    85  #include <sys/socket.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    86  #include <utmp.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    87  #include <fcntl.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    88  #if defined(_PATH_LASTLOG) && defined(__linux__)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    89  #include <lastlog.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    90  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    91  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    92  #include <netdb.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    93  #include <netinet/in.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    94  #include <arpa/inet.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    95  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    96  #ifdef HAS_SHADOW
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    97  #include <shadow.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    98  #ifndef PW_PPP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	    99  #define PW_PPP PW_LOGIN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   100  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   101  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   102  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   103  #include <time.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   104  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   105  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   106  #include "netif/ppp/ppp_impl.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   107  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   108  #include "netif/ppp/fsm.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   109  #include "netif/ppp/lcp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   110  #if CCP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   111  #include "netif/ppp/ccp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   112  #endif /* CCP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   113  #if ECP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   114  #include "netif/ppp/ecp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   115  #endif /* ECP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   116  #include "netif/ppp/ipcp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   117  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   118  #include "netif/ppp/upap.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   119  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   120  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   121  #include "netif/ppp/chap-new.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   122  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   123  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   124  #include "netif/ppp/eap.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   125  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   126  #if CBCP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   127  #include "netif/ppp/cbcp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   128  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   129  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   130  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   131  #include "session.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   132  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   133  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   134  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   135  /* Bits in scan_authfile return value */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   136  #define NONWILD_SERVER	1
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   137  #define NONWILD_CLIENT	2
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   138  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   139  #define ISWILD(word)	(word[0] == '*' && word[1] == 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   140  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   141  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   142  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   143  /* List of addresses which the peer may use. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   144  static struct permitted_ip *addresses[NUM_PPP];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   145  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   146  /* Wordlist giving addresses which the peer may use
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   147     without authenticating itself. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   148  static struct wordlist *noauth_addrs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   149  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   150  /* Remote telephone number, if available */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   151  char remote_number[MAXNAMELEN];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   152  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   153  /* Wordlist giving remote telephone numbers which may connect. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   154  static struct wordlist *permitted_numbers;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   155  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   156  /* Extra options to apply, from the secrets file entry for the peer. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   157  static struct wordlist *extra_options;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   158  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   159  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   160  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   161  /* Set if we require authentication only because we have a default route. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   162  static bool default_auth;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   163  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   164  /* Hook to enable a plugin to control the idle time limit */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   165  int (*idle_time_hook) (struct ppp_idle *) = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   166  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   167  /* Hook for a plugin to say whether we can possibly authenticate any peer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   168  int (*pap_check_hook) (void) = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   169  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   170  /* Hook for a plugin to check the PAP user and password */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   171  int (*pap_auth_hook) (char *user, char *passwd, char **msgp,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   172  			  struct wordlist **paddrs,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   173  			  struct wordlist **popts) = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   174  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   175  /* Hook for a plugin to know about the PAP user logout */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   176  void (*pap_logout_hook) (void) = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   177  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   178  /* Hook for a plugin to get the PAP password for authenticating us */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   179  int (*pap_passwd_hook) (char *user, char *passwd) = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   180  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   181  /* Hook for a plugin to say if we can possibly authenticate a peer using CHAP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   182  int (*chap_check_hook) (void) = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   183  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   184  /* Hook for a plugin to get the CHAP password for authenticating us */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   185  int (*chap_passwd_hook) (char *user, char *passwd) = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   186  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   187  /* Hook for a plugin to say whether it is OK if the peer
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   188     refuses to authenticate. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   189  int (*null_auth_hook) (struct wordlist **paddrs,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   190  			   struct wordlist **popts) = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   191  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   192  int (*allowed_address_hook) (u32_t addr) = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   193  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   194  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   195  #ifdef HAVE_MULTILINK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   196  /* Hook for plugin to hear when an interface joins a multilink bundle */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   197  void (*multilink_join_hook) (void) = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   198  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   199  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   200  #if PPP_NOTIFY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   201  /* A notifier for when the peer has authenticated itself,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   202     and we are proceeding to the network phase. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   203  struct notifier *auth_up_notifier = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   204  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   205  /* A notifier for when the link goes down. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   206  struct notifier *link_down_notifier = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   207  #endif /* PPP_NOTIFY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   208  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   209  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   210   * Option variables.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   211   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   212  #if 0 /* MOVED TO ppp_settings */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   213  bool uselogin = 0;		/* Use /etc/passwd for checking PAP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   214  bool session_mgmt = 0;		/* Do session management (login records) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   215  bool cryptpap = 0;		/* Passwords in pap-secrets are encrypted */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   216  bool refuse_pap = 0;		/* Don't wanna auth. ourselves with PAP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   217  bool refuse_chap = 0;		/* Don't wanna auth. ourselves with CHAP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   218  bool refuse_eap = 0;		/* Don't wanna auth. ourselves with EAP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   219  #if MSCHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   220  bool refuse_mschap = 0;		/* Don't wanna auth. ourselves with MS-CHAP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   221  bool refuse_mschap_v2 = 0;	/* Don't wanna auth. ourselves with MS-CHAPv2 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   222  #else /* MSCHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   223  bool refuse_mschap = 1;		/* Don't wanna auth. ourselves with MS-CHAP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   224  bool refuse_mschap_v2 = 1;	/* Don't wanna auth. ourselves with MS-CHAPv2 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   225  #endif /* MSCHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   226  bool usehostname = 0;		/* Use hostname for our_name */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   227  bool auth_required = 0;		/* Always require authentication from peer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   228  bool allow_any_ip = 0;		/* Allow peer to use any IP address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   229  bool explicit_remote = 0;	/* User specified explicit remote name */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   230  bool explicit_user = 0;		/* Set if "user" option supplied */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   231  bool explicit_passwd = 0;	/* Set if "password" option supplied */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   232  char remote_name[MAXNAMELEN];	/* Peer's name for authentication */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   233  static char *uafname;		/* name of most recent +ua file */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   234  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   235  extern char *crypt (const char *, const char *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   236  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   237  /* Prototypes for procedures local to this file. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   238  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   239  static void network_phase(ppp_pcb *pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   240  #if PPP_IDLETIMELIMIT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   241  static void check_idle(void *arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   242  #endif /* PPP_IDLETIMELIMIT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   243  #if PPP_MAXCONNECT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   244  static void connect_time_expired(void *arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   245  #endif /* PPP_MAXCONNECT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   246  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   247  static int  null_login (int);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   248  /* static int  get_pap_passwd (char *); */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   249  static int  have_pap_secret (int *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   250  static int  have_chap_secret (char *, char *, int, int *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   251  static int  have_srp_secret (char *client, char *server, int need_ip,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   252      int *lacks_ipp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   253  static int  ip_addr_check (u32_t, struct permitted_ip *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   254  static int  scan_authfile (FILE *, char *, char *, char *,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   255  			       struct wordlist **, struct wordlist **,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   256  			       char *, int);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   257  static void free_wordlist (struct wordlist *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   258  static void set_allowed_addrs (int, struct wordlist *, struct wordlist *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   259  static int  some_ip_ok (struct wordlist *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   260  static int  setupapfile (char **);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   261  static int  privgroup (char **);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   262  static int  set_noauth_addr (char **);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   263  static int  set_permitted_number (char **);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   264  static void check_access (FILE *, char *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   265  static int  wordlist_count (struct wordlist *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   266  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   267  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   268  #ifdef MAXOCTETS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   269  static void check_maxoctets (void *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   270  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   271  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   272  #if PPP_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   273  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   274   * Authentication-related options.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   275   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   276  option_t auth_options[] = {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   277      { "auth", o_bool, &auth_required,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   278        "Require authentication from peer", OPT_PRIO | 1 },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   279      { "noauth", o_bool, &auth_required,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   280        "Don't require peer to authenticate", OPT_PRIOSUB | OPT_PRIV,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   281        &allow_any_ip },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   282      { "require-pap", o_bool, &lcp_wantoptions[0].neg_upap,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   283        "Require PAP authentication from peer",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   284        OPT_PRIOSUB | 1, &auth_required },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   285      { "+pap", o_bool, &lcp_wantoptions[0].neg_upap,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   286        "Require PAP authentication from peer",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   287        OPT_ALIAS | OPT_PRIOSUB | 1, &auth_required },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   288      { "require-chap", o_bool, &auth_required,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   289        "Require CHAP authentication from peer",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   290        OPT_PRIOSUB | OPT_A2OR | MDTYPE_MD5,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   291        &lcp_wantoptions[0].chap_mdtype },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   292      { "+chap", o_bool, &auth_required,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   293        "Require CHAP authentication from peer",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   294        OPT_ALIAS | OPT_PRIOSUB | OPT_A2OR | MDTYPE_MD5,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   295        &lcp_wantoptions[0].chap_mdtype },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   296  #if MSCHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   297      { "require-mschap", o_bool, &auth_required,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   298        "Require MS-CHAP authentication from peer",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   299        OPT_PRIOSUB | OPT_A2OR | MDTYPE_MICROSOFT,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   300        &lcp_wantoptions[0].chap_mdtype },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   301      { "+mschap", o_bool, &auth_required,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   302        "Require MS-CHAP authentication from peer",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   303        OPT_ALIAS | OPT_PRIOSUB | OPT_A2OR | MDTYPE_MICROSOFT,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   304        &lcp_wantoptions[0].chap_mdtype },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   305      { "require-mschap-v2", o_bool, &auth_required,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   306        "Require MS-CHAPv2 authentication from peer",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   307        OPT_PRIOSUB | OPT_A2OR | MDTYPE_MICROSOFT_V2,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   308        &lcp_wantoptions[0].chap_mdtype },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   309      { "+mschap-v2", o_bool, &auth_required,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   310        "Require MS-CHAPv2 authentication from peer",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   311        OPT_ALIAS | OPT_PRIOSUB | OPT_A2OR | MDTYPE_MICROSOFT_V2,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   312        &lcp_wantoptions[0].chap_mdtype },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   313  #endif /* MSCHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   314  #if 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   315      { "refuse-pap", o_bool, &refuse_pap,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   316        "Don't agree to auth to peer with PAP", 1 },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   317      { "-pap", o_bool, &refuse_pap,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   318        "Don't allow PAP authentication with peer", OPT_ALIAS | 1 },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   319      { "refuse-chap", o_bool, &refuse_chap,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   320        "Don't agree to auth to peer with CHAP",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   321        OPT_A2CLRB | MDTYPE_MD5,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   322        &lcp_allowoptions[0].chap_mdtype },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   323      { "-chap", o_bool, &refuse_chap,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   324        "Don't allow CHAP authentication with peer",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   325        OPT_ALIAS | OPT_A2CLRB | MDTYPE_MD5,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   326        &lcp_allowoptions[0].chap_mdtype },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   327  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   328  #if MSCHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   329  #if 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   330      { "refuse-mschap", o_bool, &refuse_mschap,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   331        "Don't agree to auth to peer with MS-CHAP",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   332        OPT_A2CLRB | MDTYPE_MICROSOFT,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   333        &lcp_allowoptions[0].chap_mdtype },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   334      { "-mschap", o_bool, &refuse_mschap,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   335        "Don't allow MS-CHAP authentication with peer",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   336        OPT_ALIAS | OPT_A2CLRB | MDTYPE_MICROSOFT,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   337        &lcp_allowoptions[0].chap_mdtype },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   338      { "refuse-mschap-v2", o_bool, &refuse_mschap_v2,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   339        "Don't agree to auth to peer with MS-CHAPv2",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   340        OPT_A2CLRB | MDTYPE_MICROSOFT_V2,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   341        &lcp_allowoptions[0].chap_mdtype },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   342      { "-mschap-v2", o_bool, &refuse_mschap_v2,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   343        "Don't allow MS-CHAPv2 authentication with peer",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   344        OPT_ALIAS | OPT_A2CLRB | MDTYPE_MICROSOFT_V2,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   345        &lcp_allowoptions[0].chap_mdtype },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   346  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   347  #endif /* MSCHAP_SUPPORT*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   348  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   349      { "require-eap", o_bool, &lcp_wantoptions[0].neg_eap,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   350        "Require EAP authentication from peer", OPT_PRIOSUB | 1,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   351        &auth_required },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   352  #if 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   353      { "refuse-eap", o_bool, &refuse_eap,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   354        "Don't agree to authenticate to peer with EAP", 1 },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   355  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   356  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   357      { "name", o_string, our_name,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   358        "Set local name for authentication",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   359        OPT_PRIO | OPT_PRIV | OPT_STATIC, NULL, MAXNAMELEN },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   360  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   361      { "+ua", o_special, (void *)setupapfile,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   362        "Get PAP user and password from file",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   363        OPT_PRIO | OPT_A2STRVAL, &uafname },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   364  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   365  #if 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   366      { "user", o_string, user,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   367        "Set name for auth with peer", OPT_PRIO | OPT_STATIC,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   368        &explicit_user, MAXNAMELEN },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   369  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   370      { "password", o_string, passwd,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   371        "Password for authenticating us to the peer",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   372        OPT_PRIO | OPT_STATIC | OPT_HIDE,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   373        &explicit_passwd, MAXSECRETLEN },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   374  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   375  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   376      { "usehostname", o_bool, &usehostname,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   377        "Must use hostname for authentication", 1 },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   378  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   379      { "remotename", o_string, remote_name,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   380        "Set remote name for authentication", OPT_PRIO | OPT_STATIC,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   381        &explicit_remote, MAXNAMELEN },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   382  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   383      { "login", o_bool, &uselogin,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   384        "Use system password database for PAP", OPT_A2COPY | 1 ,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   385        &session_mgmt },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   386      { "enable-session", o_bool, &session_mgmt,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   387        "Enable session accounting for remote peers", OPT_PRIV | 1 },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   388  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   389      { "papcrypt", o_bool, &cryptpap,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   390        "PAP passwords are encrypted", 1 },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   391  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   392      { "privgroup", o_special, (void *)privgroup,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   393        "Allow group members to use privileged options", OPT_PRIV | OPT_A2LIST },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   394  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   395      { "allow-ip", o_special, (void *)set_noauth_addr,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   396        "Set IP address(es) which can be used without authentication",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   397        OPT_PRIV | OPT_A2LIST },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   398  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   399      { "remotenumber", o_string, remote_number,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   400        "Set remote telephone number for authentication", OPT_PRIO | OPT_STATIC,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   401        NULL, MAXNAMELEN },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   402  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   403      { "allow-number", o_special, (void *)set_permitted_number,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   404        "Set telephone number(s) which are allowed to connect",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   405        OPT_PRIV | OPT_A2LIST },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   406  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   407      { NULL }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   408  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   409  #endif /* PPP_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   410  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   411  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   412  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   413   * setupapfile - specifies UPAP info for authenticating with peer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   414   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   415  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   416  setupapfile(argv)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   417      char **argv;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   418  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   419      FILE *ufile;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   420      int l;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   421      uid_t euid;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   422      char u[MAXNAMELEN], p[MAXSECRETLEN];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   423      char *fname;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   424  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   425      lcp_allowoptions[0].neg_upap = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   426  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   427      /* open user info file */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   428      fname = strdup(*argv);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   429      if (fname == NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   430  	novm("+ua file name");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   431      euid = geteuid();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   432      if (seteuid(getuid()) == -1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   433  	option_error("unable to reset uid before opening %s: %m", fname);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   434  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   435      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   436      ufile = fopen(fname, "r");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   437      if (seteuid(euid) == -1)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   438  	fatal("unable to regain privileges: %m");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   439      if (ufile == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   440  	option_error("unable to open user login data file %s", fname);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   441  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   442      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   443      check_access(ufile, fname);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   444      uafname = fname;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   445  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   446      /* get username */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   447      if (fgets(u, MAXNAMELEN - 1, ufile) == NULL
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   448  	|| fgets(p, MAXSECRETLEN - 1, ufile) == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   449  	fclose(ufile);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   450  	option_error("unable to read user login data file %s", fname);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   451  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   452      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   453      fclose(ufile);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   454  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   455      /* get rid of newlines */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   456      l = strlen(u);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   457      if (l > 0 && u[l-1] == '\n')
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   458  	u[l-1] = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   459      l = strlen(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   460      if (l > 0 && p[l-1] == '\n')
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   461  	p[l-1] = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   462  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   463      if (override_value("user", option_priority, fname)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   464  	strlcpy(ppp_settings.user, u, sizeof(ppp_settings.user));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   465  	explicit_user = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   466      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   467      if (override_value("passwd", option_priority, fname)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   468  	strlcpy(ppp_settings.passwd, p, sizeof(ppp_settings.passwd));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   469  	explicit_passwd = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   470      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   471  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   472      return (1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   473  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   474  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   475  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   476   * privgroup - allow members of the group to have privileged access.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   477   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   478  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   479  privgroup(argv)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   480      char **argv;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   481  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   482      struct group *g;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   483      int i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   484  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   485      g = getgrnam(*argv);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   486      if (g == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   487  	option_error("group %s is unknown", *argv);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   488  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   489      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   490      for (i = 0; i < ngroups; ++i) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   491  	if (groups[i] == g->gr_gid) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   492  	    privileged = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   493  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   494  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   495      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   496      return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   497  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   498  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   499  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   500  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   501   * set_noauth_addr - set address(es) that can be used without authentication.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   502   * Equivalent to specifying an entry like `"" * "" addr' in pap-secrets.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   503   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   504  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   505  set_noauth_addr(argv)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   506      char **argv;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   507  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   508      char *addr = *argv;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   509      int l = strlen(addr) + 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   510      struct wordlist *wp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   511  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   512      wp = (struct wordlist *) malloc(sizeof(struct wordlist) + l);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   513      if (wp == NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   514  	novm("allow-ip argument");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   515      wp->word = (char *) (wp + 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   516      wp->next = noauth_addrs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   517      MEMCPY(wp->word, addr, l);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   518      noauth_addrs = wp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   519      return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   520  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   521  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   522  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   523  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   524   * set_permitted_number - set remote telephone number(s) that may connect.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   525   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   526  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   527  set_permitted_number(argv)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   528      char **argv;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   529  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   530      char *number = *argv;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   531      int l = strlen(number) + 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   532      struct wordlist *wp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   533  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   534      wp = (struct wordlist *) malloc(sizeof(struct wordlist) + l);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   535      if (wp == NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   536  	novm("allow-number argument");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   537      wp->word = (char *) (wp + 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   538      wp->next = permitted_numbers;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   539      MEMCPY(wp->word, number, l);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   540      permitted_numbers = wp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   541      return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   542  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   543  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   544  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   545  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   546   * An Open on LCP has requested a change from Dead to Establish phase.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   547   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   548  void link_required(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   549      LWIP_UNUSED_ARG(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   550  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   551  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   552  #if 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   553  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   554   * Bring the link up to the point of being able to do ppp.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   555   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   556  void start_link(unit)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   557      int unit;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   558  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   559      ppp_pcb *pcb = &ppp_pcb_list[unit];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   560      char *msg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   561  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   562      status = EXIT_NEGOTIATION_FAILED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   563      new_phase(pcb, PPP_PHASE_SERIALCONN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   564  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   565      hungup = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   566      devfd = the_channel->connect();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   567      msg = "Connect script failed";
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   568      if (devfd < 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   569  	goto fail;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   570  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   571      /* set up the serial device as a ppp interface */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   572      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   573       * N.B. we used to do tdb_writelock/tdb_writeunlock around this
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   574       * (from establish_ppp to set_ifunit).  However, we won't be
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   575       * doing the set_ifunit in multilink mode, which is the only time
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   576       * we need the atomicity that the tdb_writelock/tdb_writeunlock
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   577       * gives us.  Thus we don't need the tdb_writelock/tdb_writeunlock.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   578       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   579      fd_ppp = the_channel->establish_ppp(devfd);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   580      msg = "ppp establishment failed";
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   581      if (fd_ppp < 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   582  	status = EXIT_FATAL_ERROR;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   583  	goto disconnect;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   584      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   585  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   586      if (!demand && ifunit >= 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   587  	set_ifunit(1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   588  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   589      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   590       * Start opening the connection and wait for
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   591       * incoming events (reply, timeout, etc.).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   592       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   593      if (ifunit >= 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   594  	ppp_notice("Connect: %s <--> %s", ifname, ppp_devnam);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   595      else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   596  	ppp_notice("Starting negotiation on %s", ppp_devnam);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   597      add_fd(fd_ppp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   598  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   599      new_phase(pcb, PPP_PHASE_ESTABLISH);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   600  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   601      lcp_lowerup(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   602      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   603  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   604   disconnect:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   605      new_phase(pcb, PPP_PHASE_DISCONNECT);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   606      if (the_channel->disconnect)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   607  	the_channel->disconnect();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   608  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   609   fail:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   610      new_phase(pcb, PPP_PHASE_DEAD);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   611      if (the_channel->cleanup)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   612  	(*the_channel->cleanup)();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   613  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   614  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   615  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   616  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   617   * LCP has terminated the link; go to the Dead phase and take the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   618   * physical layer down.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   619   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   620  void link_terminated(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   621      if (pcb->phase == PPP_PHASE_DEAD
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   622  #ifdef HAVE_MULTILINK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   623      || pcb->phase == PPP_PHASE_MASTER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   624  #endif /* HAVE_MULTILINK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   625      )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   626  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   627      new_phase(pcb, PPP_PHASE_DISCONNECT);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   628  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   629  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   630      if (pap_logout_hook) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   631  	pap_logout_hook();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   632      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   633      session_end(devnam);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   634  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   635  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   636      if (!doing_multilink) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   637  	ppp_notice("Connection terminated.");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   638  #if PPP_STATS_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   639  	print_link_stats();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   640  #endif /* PPP_STATS_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   641      } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   642  	ppp_notice("Link terminated.");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   643  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   644      lcp_lowerdown(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   645  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   646      ppp_link_terminated(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   647  #if 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   648      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   649       * Delete pid files before disestablishing ppp.  Otherwise it
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   650       * can happen that another pppd gets the same unit and then
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   651       * we delete its pid file.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   652       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   653      if (!doing_multilink && !demand)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   654  	remove_pidfiles();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   655  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   656      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   657       * If we may want to bring the link up again, transfer
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   658       * the ppp unit back to the loopback.  Set the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   659       * real serial device back to its normal mode of operation.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   660       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   661      if (fd_ppp >= 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   662  	remove_fd(fd_ppp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   663  	clean_check();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   664  	the_channel->disestablish_ppp(devfd);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   665  	if (doing_multilink)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   666  	    mp_exit_bundle();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   667  	fd_ppp = -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   668      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   669      if (!hungup)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   670  	lcp_lowerdown(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   671      if (!doing_multilink && !demand)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   672  	script_unsetenv("IFNAME");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   673  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   674      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   675       * Run disconnector script, if requested.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   676       * XXX we may not be able to do this if the line has hung up!
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   677       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   678      if (devfd >= 0 && the_channel->disconnect) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   679  	the_channel->disconnect();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   680  	devfd = -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   681      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   682      if (the_channel->cleanup)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   683  	(*the_channel->cleanup)();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   684  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   685      if (doing_multilink && multilink_master) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   686  	if (!bundle_terminating)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   687  	    new_phase(pcb, PPP_PHASE_MASTER);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   688  	else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   689  	    mp_bundle_terminated();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   690      } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   691  	new_phase(pcb, PPP_PHASE_DEAD);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   692  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   693  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   694  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   695  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   696   * LCP has gone down; it will either die or try to re-establish.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   697   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   698  void link_down(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   699  #if PPP_NOTIFY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   700      notify(link_down_notifier, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   701  #endif /* PPP_NOTIFY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   702  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   703      if (!doing_multilink) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   704  	upper_layers_down(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   705  	if (pcb->phase != PPP_PHASE_DEAD
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   706  #ifdef HAVE_MULTILINK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   707  	&& pcb->phase != PPP_PHASE_MASTER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   708  #endif /* HAVE_MULTILINK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   709  	)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   710  	    new_phase(pcb, PPP_PHASE_ESTABLISH);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   711      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   712      /* XXX if doing_multilink, should do something to stop
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   713         network-layer traffic on the link */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   714  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   715  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   716  void upper_layers_down(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   717      int i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   718      const struct protent *protp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   719  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   720      for (i = 0; (protp = protocols[i]) != NULL; ++i) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   721          if (protp->protocol != PPP_LCP && protp->lowerdown != NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   722  	    (*protp->lowerdown)(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   723          if (protp->protocol < 0xC000 && protp->close != NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   724  	    (*protp->close)(pcb, "LCP down");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   725      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   726      pcb->num_np_open = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   727      pcb->num_np_up = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   728  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   729  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   730  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   731   * The link is established.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   732   * Proceed to the Dead, Authenticate or Network phase as appropriate.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   733   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   734  void link_established(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   735  #if PPP_AUTH_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   736      int auth;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   737  #if PPP_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   738  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   739      lcp_options *wo = &pcb->lcp_wantoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   740  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   741      lcp_options *go = &pcb->lcp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   742  #endif /* PPP_SERVER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   743      lcp_options *ho = &pcb->lcp_hisoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   744  #endif /* PPP_AUTH_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   745      int i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   746      const struct protent *protp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   747  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   748      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   749       * Tell higher-level protocols that LCP is up.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   750       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   751      if (!doing_multilink) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   752  	for (i = 0; (protp = protocols[i]) != NULL; ++i)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   753  	    if (protp->protocol != PPP_LCP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   754  		&& protp->lowerup != NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   755  		(*protp->lowerup)(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   756      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   757  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   758  #if PPP_AUTH_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   759  #if PPP_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   760  #if PPP_ALLOWED_ADDRS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   761      if (!auth_required && noauth_addrs != NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   762  	set_allowed_addrs(unit, NULL, NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   763  #endif /* PPP_ALLOWED_ADDRS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   764  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   765      if (pcb->settings.auth_required && !(0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   766  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   767  	|| go->neg_upap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   768  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   769  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   770  	|| go->neg_chap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   771  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   772  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   773  	|| go->neg_eap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   774  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   775  	)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   776  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   777  #if PPP_ALLOWED_ADDRS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   778  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   779  	 * We wanted the peer to authenticate itself, and it refused:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   780  	 * if we have some address(es) it can use without auth, fine,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   781  	 * otherwise treat it as though it authenticated with PAP using
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   782  	 * a username of "" and a password of "".  If that's not OK,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   783  	 * boot it out.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   784  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   785  	if (noauth_addrs != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   786  	    set_allowed_addrs(unit, NULL, NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   787  	} else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   788  #endif /* PPP_ALLOWED_ADDRS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   789  	if (!pcb->settings.null_login
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   790  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   791  	    || !wo->neg_upap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   792  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   793  	    ) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   794  	    ppp_warn("peer refused to authenticate: terminating link");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   795  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   796  	    status = EXIT_PEER_AUTH_FAILED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   797  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   798  	    pcb->err_code = PPPERR_AUTHFAIL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   799  	    lcp_close(pcb, "peer refused to authenticate");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   800  	    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   801  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   802      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   803  #endif /* PPP_SERVER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   804  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   805      new_phase(pcb, PPP_PHASE_AUTHENTICATE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   806      auth = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   807  #if PPP_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   808  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   809      if (go->neg_eap) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   810  	eap_authpeer(pcb, PPP_OUR_NAME);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   811  	auth |= EAP_PEER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   812      } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   813  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   814  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   815      if (go->neg_chap) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   816  	chap_auth_peer(pcb, PPP_OUR_NAME, CHAP_DIGEST(go->chap_mdtype));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   817  	auth |= CHAP_PEER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   818      } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   819  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   820  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   821      if (go->neg_upap) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   822  	upap_authpeer(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   823  	auth |= PAP_PEER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   824      } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   825  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   826      {}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   827  #endif /* PPP_SERVER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   828  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   829  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   830      if (ho->neg_eap) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   831  	eap_authwithpeer(pcb, pcb->settings.user);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   832  	auth |= EAP_WITHPEER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   833      } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   834  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   835  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   836      if (ho->neg_chap) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   837  	chap_auth_with_peer(pcb, pcb->settings.user, CHAP_DIGEST(ho->chap_mdtype));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   838  	auth |= CHAP_WITHPEER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   839      } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   840  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   841  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   842      if (ho->neg_upap) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   843  	upap_authwithpeer(pcb, pcb->settings.user, pcb->settings.passwd);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   844  	auth |= PAP_WITHPEER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   845      } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   846  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   847      {}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   848  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   849      pcb->auth_pending = auth;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   850      pcb->auth_done = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   851  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   852      if (!auth)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   853  #endif /* PPP_AUTH_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   854  	network_phase(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   855  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   856  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   857  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   858   * Proceed to the network phase.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   859   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   860  static void network_phase(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   861  #if CBCP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   862      ppp_pcb *pcb = &ppp_pcb_list[unit];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   863  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   864  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   865      lcp_options *go = &lcp_gotoptions[unit];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   866  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   867  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   868  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   869      /* Log calling number. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   870      if (*remote_number)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   871  	ppp_notice("peer from calling number %q authorized", remote_number);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   872  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   873  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   874  #if PPP_NOTIFY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   875      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   876       * If the peer had to authenticate, notify it now.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   877       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   878      if (0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   879  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   880  	|| go->neg_chap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   881  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   882  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   883  	|| go->neg_upap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   884  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   885  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   886  	|| go->neg_eap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   887  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   888  	) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   889  	notify(auth_up_notifier, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   890      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   891  #endif /* PPP_NOTIFY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   892  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   893  #if CBCP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   894      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   895       * If we negotiated callback, do it now.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   896       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   897      if (go->neg_cbcp) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   898  	new_phase(pcb, PPP_PHASE_CALLBACK);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   899  	(*cbcp_protent.open)(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   900  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   901      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   902  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   903  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   904  #if PPP_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   905      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   906       * Process extra options from the secrets file
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   907       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   908      if (extra_options) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   909  	options_from_list(extra_options, 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   910  	free_wordlist(extra_options);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   911  	extra_options = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   912      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   913  #endif /* PPP_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   914      start_networks(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   915  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   916  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   917  void start_networks(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   918  #if CCP_SUPPORT || ECP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   919      int i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   920      const struct protent *protp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   921  #endif /* CCP_SUPPORT || ECP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   922  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   923      new_phase(pcb, PPP_PHASE_NETWORK);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   924  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   925  #ifdef HAVE_MULTILINK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   926      if (multilink) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   927  	if (mp_join_bundle()) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   928  	    if (multilink_join_hook)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   929  		(*multilink_join_hook)();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   930  	    if (updetach && !nodetach)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   931  		detach();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   932  	    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   933  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   934      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   935  #endif /* HAVE_MULTILINK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   936  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   937  #ifdef PPP_FILTER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   938      if (!demand)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   939  	set_filters(&pass_filter, &active_filter);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   940  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   941  #if CCP_SUPPORT || ECP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   942      /* Start CCP and ECP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   943      for (i = 0; (protp = protocols[i]) != NULL; ++i)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   944  	if (
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   945  	    (0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   946  #if ECP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   947  	    || protp->protocol == PPP_ECP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   948  #endif /* ECP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   949  #if CCP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   950  	    || protp->protocol == PPP_CCP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   951  #endif /* CCP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   952  	    )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   953  	    && protp->open != NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   954  	    (*protp->open)(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   955  #endif /* CCP_SUPPORT || ECP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   956  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   957      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   958       * Bring up other network protocols iff encryption is not required.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   959       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   960      if (1
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   961  #if ECP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   962          && !ecp_gotoptions[unit].required
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   963  #endif /* ECP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   964  #if MPPE_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   965          && !pcb->ccp_gotoptions.mppe
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   966  #endif /* MPPE_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   967          )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   968  	continue_networks(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   969  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   970  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   971  void continue_networks(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   972      int i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   973      const struct protent *protp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   974  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   975      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   976       * Start the "real" network protocols.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   977       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   978      for (i = 0; (protp = protocols[i]) != NULL; ++i)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   979  	if (protp->protocol < 0xC000
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   980  #if CCP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   981  	    && protp->protocol != PPP_CCP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   982  #endif /* CCP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   983  #if ECP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   984  	    && protp->protocol != PPP_ECP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   985  #endif /* ECP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   986  	    && protp->open != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   987  	    (*protp->open)(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   988  	    ++pcb->num_np_open;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   989  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   990  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   991      if (pcb->num_np_open == 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   992  	/* nothing to do */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   993  	lcp_close(pcb, "No network protocols running");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   994  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   995  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   996  #if PPP_AUTH_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   997  #if PPP_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   998  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	   999   * auth_check_passwd - Check the user name and passwd against configuration.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1000   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1001   * returns:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1002   *      0: Authentication failed.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1003   *      1: Authentication succeeded.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1004   * In either case, msg points to an appropriate message and msglen to the message len.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1005   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1006  int auth_check_passwd(ppp_pcb *pcb, char *auser, int userlen, char *apasswd, int passwdlen, const char **msg, int *msglen) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1007    int secretuserlen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1008    int secretpasswdlen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1009  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1010    if (pcb->settings.user && pcb->settings.passwd) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1011      secretuserlen = (int)strlen(pcb->settings.user);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1012      secretpasswdlen = (int)strlen(pcb->settings.passwd);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1013      if (secretuserlen == userlen
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1014          && secretpasswdlen == passwdlen
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1015          && !memcmp(auser, pcb->settings.user, userlen)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1016          && !memcmp(apasswd, pcb->settings.passwd, passwdlen) ) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1017        *msg = "Login ok";
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1018        *msglen = sizeof("Login ok")-1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1019        return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1020      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1021    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1022  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1023    *msg = "Login incorrect";
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1024    *msglen = sizeof("Login incorrect")-1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1025    return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1026  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1027  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1028  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1029   * The peer has failed to authenticate himself using `protocol'.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1030   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1031  void auth_peer_fail(ppp_pcb *pcb, int protocol) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1032      LWIP_UNUSED_ARG(protocol);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1033      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1034       * Authentication failure: take the link down
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1035       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1036  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1037      status = EXIT_PEER_AUTH_FAILED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1038  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1039      pcb->err_code = PPPERR_AUTHFAIL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1040      lcp_close(pcb, "Authentication failed");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1041  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1042  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1043  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1044   * The peer has been successfully authenticated using `protocol'.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1045   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1046  void auth_peer_success(ppp_pcb *pcb, int protocol, int prot_flavor, const char *name, int namelen) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1047      int bit;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1048  #ifndef HAVE_MULTILINK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1049      LWIP_UNUSED_ARG(name);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1050      LWIP_UNUSED_ARG(namelen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1051  #endif /* HAVE_MULTILINK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1052  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1053      switch (protocol) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1054  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1055      case PPP_CHAP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1056  	bit = CHAP_PEER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1057  	switch (prot_flavor) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1058  	case CHAP_MD5:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1059  	    bit |= CHAP_MD5_PEER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1060  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1061  #if MSCHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1062  	case CHAP_MICROSOFT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1063  	    bit |= CHAP_MS_PEER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1064  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1065  	case CHAP_MICROSOFT_V2:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1066  	    bit |= CHAP_MS2_PEER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1067  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1068  #endif /* MSCHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1069  	default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1070  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1071  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1072  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1073  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1074  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1075      case PPP_PAP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1076  	bit = PAP_PEER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1077  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1078  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1079  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1080      case PPP_EAP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1081  	bit = EAP_PEER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1082  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1083  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1084      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1085  	ppp_warn("auth_peer_success: unknown protocol %x", protocol);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1086  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1087      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1088  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1089  #ifdef HAVE_MULTILINK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1090      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1091       * Save the authenticated name of the peer for later.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1092       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1093      if (namelen > (int)sizeof(pcb->peer_authname) - 1)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1094  	namelen = (int)sizeof(pcb->peer_authname) - 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1095      MEMCPY(pcb->peer_authname, name, namelen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1096      pcb->peer_authname[namelen] = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1097  #endif /* HAVE_MULTILINK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1098  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1099      script_setenv("PEERNAME", , 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1100  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1101  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1102      /* Save the authentication method for later. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1103      pcb->auth_done |= bit;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1104  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1105      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1106       * If there is no more authentication still to be done,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1107       * proceed to the network (or callback) phase.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1108       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1109      if ((pcb->auth_pending &= ~bit) == 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1110          network_phase(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1111  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1112  #endif /* PPP_SERVER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1113  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1114  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1115   * We have failed to authenticate ourselves to the peer using `protocol'.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1116   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1117  void auth_withpeer_fail(ppp_pcb *pcb, int protocol) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1118      LWIP_UNUSED_ARG(protocol);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1119      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1120       * We've failed to authenticate ourselves to our peer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1121       *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1122       * Some servers keep sending CHAP challenges, but there
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1123       * is no point in persisting without any way to get updated
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1124       * authentication secrets.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1125       *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1126       * He'll probably take the link down, and there's not much
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1127       * we can do except wait for that.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1128       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1129      pcb->err_code = PPPERR_AUTHFAIL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1130      lcp_close(pcb, "Failed to authenticate ourselves to peer");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1131  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1132  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1133  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1134   * We have successfully authenticated ourselves with the peer using `protocol'.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1135   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1136  void auth_withpeer_success(ppp_pcb *pcb, int protocol, int prot_flavor) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1137      int bit;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1138      const char *prot = "";
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1139  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1140      switch (protocol) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1141  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1142      case PPP_CHAP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1143  	bit = CHAP_WITHPEER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1144  	prot = "CHAP";
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1145  	switch (prot_flavor) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1146  	case CHAP_MD5:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1147  	    bit |= CHAP_MD5_WITHPEER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1148  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1149  #if MSCHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1150  	case CHAP_MICROSOFT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1151  	    bit |= CHAP_MS_WITHPEER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1152  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1153  	case CHAP_MICROSOFT_V2:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1154  	    bit |= CHAP_MS2_WITHPEER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1155  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1156  #endif /* MSCHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1157  	default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1158  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1159  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1160  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1161  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1162  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1163      case PPP_PAP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1164  	bit = PAP_WITHPEER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1165  	prot = "PAP";
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1166  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1167  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1168  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1169      case PPP_EAP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1170  	bit = EAP_WITHPEER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1171  	prot = "EAP";
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1172  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1173  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1174      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1175  	ppp_warn("auth_withpeer_success: unknown protocol %x", protocol);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1176  	bit = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1177  	/* no break */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1178      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1179  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1180      ppp_notice("%s authentication succeeded", prot);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1181  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1182      /* Save the authentication method for later. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1183      pcb->auth_done |= bit;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1184  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1185      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1186       * If there is no more authentication still being done,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1187       * proceed to the network (or callback) phase.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1188       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1189      if ((pcb->auth_pending &= ~bit) == 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1190  	network_phase(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1191  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1192  #endif /* PPP_AUTH_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1193  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1194  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1195  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1196   * np_up - a network protocol has come up.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1197   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1198  void np_up(ppp_pcb *pcb, int proto) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1199  #if PPP_IDLETIMELIMIT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1200      int tlim;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1201  #endif /* PPP_IDLETIMELIMIT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1202      LWIP_UNUSED_ARG(proto);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1203  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1204      if (pcb->num_np_up == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1205  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1206  	 * At this point we consider that the link has come up successfully.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1207  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1208  	new_phase(pcb, PPP_PHASE_RUNNING);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1209  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1210  #if PPP_IDLETIMELIMIT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1211  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1212  	if (idle_time_hook != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1213  	    tlim = (*idle_time_hook)(NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1214  	else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1215  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1216  	    tlim = pcb->settings.idle_time_limit;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1217  	if (tlim > 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1218  	    TIMEOUT(check_idle, (void*)pcb, tlim);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1219  #endif /* PPP_IDLETIMELIMIT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1220  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1221  #if PPP_MAXCONNECT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1222  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1223  	 * Set a timeout to close the connection once the maximum
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1224  	 * connect time has expired.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1225  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1226  	if (pcb->settings.maxconnect > 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1227  	    TIMEOUT(connect_time_expired, (void*)pcb, pcb->settings.maxconnect);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1228  #endif /* PPP_MAXCONNECT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1229  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1230  #ifdef MAXOCTETS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1231  	if (maxoctets > 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1232  	    TIMEOUT(check_maxoctets, NULL, maxoctets_timeout);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1233  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1234  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1235  #if 0 /* Unused */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1236  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1237  	 * Detach now, if the updetach option was given.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1238  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1239  	if (updetach && !nodetach)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1240  	    detach();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1241  #endif /* Unused */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1242      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1243      ++pcb->num_np_up;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1244  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1245  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1246  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1247   * np_down - a network protocol has gone down.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1248   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1249  void np_down(ppp_pcb *pcb, int proto) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1250      LWIP_UNUSED_ARG(proto);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1251      if (--pcb->num_np_up == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1252  #if PPP_IDLETIMELIMIT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1253  	UNTIMEOUT(check_idle, (void*)pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1254  #endif /* PPP_IDLETIMELIMIT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1255  #if PPP_MAXCONNECT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1256  	UNTIMEOUT(connect_time_expired, NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1257  #endif /* PPP_MAXCONNECT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1258  #ifdef MAXOCTETS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1259  	UNTIMEOUT(check_maxoctets, NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1260  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1261  	new_phase(pcb, PPP_PHASE_NETWORK);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1262      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1263  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1264  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1265  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1266   * np_finished - a network protocol has finished using the link.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1267   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1268  void np_finished(ppp_pcb *pcb, int proto) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1269      LWIP_UNUSED_ARG(proto);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1270      if (--pcb->num_np_open <= 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1271  	/* no further use for the link: shut up shop. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1272  	lcp_close(pcb, "No network protocols running");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1273      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1274  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1275  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1276  #ifdef MAXOCTETS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1277  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1278  check_maxoctets(arg)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1279      void *arg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1280  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1281  #if PPP_STATS_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1282      unsigned int used;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1283  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1284      update_link_stats(ifunit);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1285      link_stats_valid=0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1286  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1287      switch(maxoctets_dir) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1288  	case PPP_OCTETS_DIRECTION_IN:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1289  	    used = link_stats.bytes_in;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1290  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1291  	case PPP_OCTETS_DIRECTION_OUT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1292  	    used = link_stats.bytes_out;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1293  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1294  	case PPP_OCTETS_DIRECTION_MAXOVERAL:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1295  	case PPP_OCTETS_DIRECTION_MAXSESSION:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1296  	    used = (link_stats.bytes_in > link_stats.bytes_out) ? link_stats.bytes_in : link_stats.bytes_out;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1297  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1298  	default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1299  	    used = link_stats.bytes_in+link_stats.bytes_out;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1300  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1301      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1302      if (used > maxoctets) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1303  	ppp_notice("Traffic limit reached. Limit: %u Used: %u", maxoctets, used);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1304  	status = EXIT_TRAFFIC_LIMIT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1305  	lcp_close(pcb, "Traffic limit");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1306  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1307  	need_holdoff = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1308  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1309      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1310          TIMEOUT(check_maxoctets, NULL, maxoctets_timeout);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1311      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1312  #endif /* PPP_STATS_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1313  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1314  #endif /* MAXOCTETS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1315  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1316  #if PPP_IDLETIMELIMIT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1317  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1318   * check_idle - check whether the link has been idle for long
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1319   * enough that we can shut it down.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1320   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1321  static void check_idle(void *arg) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1322      ppp_pcb *pcb = (ppp_pcb*)arg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1323      struct ppp_idle idle;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1324      time_t itime;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1325      int tlim;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1326  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1327      if (!get_idle_time(pcb, &idle))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1328  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1329  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1330      if (idle_time_hook != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1331  	tlim = idle_time_hook(&idle);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1332      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1333  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1334  	itime = LWIP_MIN(idle.xmit_idle, idle.recv_idle);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1335  	tlim = pcb->settings.idle_time_limit - itime;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1336  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1337      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1338  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1339      if (tlim <= 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1340  	/* link is idle: shut it down. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1341  	ppp_notice("Terminating connection due to lack of activity.");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1342  	pcb->err_code = PPPERR_IDLETIMEOUT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1343  	lcp_close(pcb, "Link inactive");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1344  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1345  	need_holdoff = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1346  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1347      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1348  	TIMEOUT(check_idle, (void*)pcb, tlim);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1349      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1350  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1351  #endif /* PPP_IDLETIMELIMIT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1352  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1353  #if PPP_MAXCONNECT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1354  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1355   * connect_time_expired - log a message and close the connection.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1356   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1357  static void connect_time_expired(void *arg) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1358      ppp_pcb *pcb = (ppp_pcb*)arg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1359      ppp_info("Connect time expired");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1360      pcb->err_code = PPPERR_CONNECTTIME;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1361      lcp_close(pcb, "Connect time expired");	/* Close connection */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1362  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1363  #endif /* PPP_MAXCONNECT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1364  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1365  #if PPP_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1366  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1367   * auth_check_options - called to check authentication options.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1368   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1369  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1370  auth_check_options()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1371  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1372      lcp_options *wo = &lcp_wantoptions[0];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1373      int can_auth;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1374      int lacks_ip;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1375  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1376      /* Default our_name to hostname, and user to our_name */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1377      if (our_name[0] == 0 || usehostname)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1378  	strlcpy(our_name, hostname, sizeof(our_name));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1379      /* If a blank username was explicitly given as an option, trust
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1380         the user and don't use our_name */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1381      if (ppp_settings.user[0] == 0 && !explicit_user)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1382  	strlcpy(ppp_settings.user, our_name, sizeof(ppp_settings.user));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1383  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1384      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1385       * If we have a default route, require the peer to authenticate
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1386       * unless the noauth option was given or the real user is root.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1387       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1388      if (!auth_required && !allow_any_ip && have_route_to(0) && !privileged) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1389  	auth_required = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1390  	default_auth = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1391      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1392  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1393  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1394      /* If we selected any CHAP flavors, we should probably negotiate it. :-) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1395      if (wo->chap_mdtype)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1396  	wo->neg_chap = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1397  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1398  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1399      /* If authentication is required, ask peer for CHAP, PAP, or EAP. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1400      if (auth_required) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1401  	allow_any_ip = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1402  	if (1
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1403  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1404  	    && !wo->neg_chap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1405  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1406  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1407  	    && !wo->neg_upap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1408  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1409  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1410  	    && !wo->neg_eap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1411  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1412  	    ) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1413  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1414  	    wo->neg_chap = CHAP_MDTYPE_SUPPORTED != MDTYPE_NONE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1415  	    wo->chap_mdtype = CHAP_MDTYPE_SUPPORTED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1416  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1417  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1418  	    wo->neg_upap = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1419  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1420  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1421  	    wo->neg_eap = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1422  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1423  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1424      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1425  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1426  	wo->neg_chap = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1427  	wo->chap_mdtype = MDTYPE_NONE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1428  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1429  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1430  	wo->neg_upap = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1431  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1432  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1433  	wo->neg_eap = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1434  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1435      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1436  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1437      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1438       * Check whether we have appropriate secrets to use
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1439       * to authenticate the peer.  Note that EAP can authenticate by way
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1440       * of a CHAP-like exchanges as well as SRP.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1441       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1442      lacks_ip = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1443  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1444      can_auth = wo->neg_upap && (uselogin || have_pap_secret(&lacks_ip));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1445  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1446      can_auth = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1447  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1448      if (!can_auth && (0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1449  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1450  	|| wo->neg_chap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1451  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1452  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1453  	|| wo->neg_eap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1454  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1455  	)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1456  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1457  	can_auth = have_chap_secret((explicit_remote? remote_name: NULL),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1458  				    our_name, 1, &lacks_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1459  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1460  	can_auth = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1461  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1462      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1463      if (!can_auth
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1464  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1465  	&& wo->neg_eap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1466  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1467  	) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1468  	can_auth = have_srp_secret((explicit_remote? remote_name: NULL),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1469  				    our_name, 1, &lacks_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1470      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1471  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1472      if (auth_required && !can_auth && noauth_addrs == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1473  	if (default_auth) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1474  	    option_error(
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1475  "By default the remote system is required to authenticate itself");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1476  	    option_error(
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1477  "(because this system has a default route to the internet)");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1478  	} else if (explicit_remote)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1479  	    option_error(
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1480  "The remote system (%s) is required to authenticate itself",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1481  			 remote_name);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1482  	else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1483  	    option_error(
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1484  "The remote system is required to authenticate itself");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1485  	option_error(
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1486  "but I couldn't find any suitable secret (password) for it to use to do so.");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1487  	if (lacks_ip)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1488  	    option_error(
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1489  "(None of the available passwords would let it use an IP address.)");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1490  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1491  	exit(1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1492      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1493  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1494      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1495       * Early check for remote number authorization.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1496       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1497      if (!auth_number()) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1498  	ppp_warn("calling number %q is not authorized", remote_number);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1499  	exit(EXIT_CNID_AUTH_FAILED);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1500      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1501  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1502  #endif /* PPP_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1503  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1504  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1505  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1506   * auth_reset - called when LCP is starting negotiations to recheck
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1507   * authentication options, i.e. whether we have appropriate secrets
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1508   * to use for authenticating ourselves and/or the peer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1509   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1510  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1511  auth_reset(unit)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1512      int unit;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1513  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1514      lcp_options *go = &lcp_gotoptions[unit];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1515      lcp_options *ao = &lcp_allowoptions[unit];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1516      int hadchap;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1517  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1518      hadchap = -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1519      ao->neg_upap = !refuse_pap && (passwd[0] != 0 || get_pap_passwd(NULL));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1520      ao->neg_chap = (!refuse_chap || !refuse_mschap || !refuse_mschap_v2)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1521  	&& (passwd[0] != 0 ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1522  	    (hadchap = have_chap_secret(user, (explicit_remote? remote_name:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1523  					       NULL), 0, NULL)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1524      ao->neg_eap = !refuse_eap && (
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1525  	passwd[0] != 0 ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1526  	(hadchap == 1 || (hadchap == -1 && have_chap_secret(user,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1527  	    (explicit_remote? remote_name: NULL), 0, NULL))) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1528  	have_srp_secret(user, (explicit_remote? remote_name: NULL), 0, NULL));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1529  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1530      hadchap = -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1531      if (go->neg_upap && !uselogin && !have_pap_secret(NULL))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1532  	go->neg_upap = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1533      if (go->neg_chap) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1534  	if (!(hadchap = have_chap_secret((explicit_remote? remote_name: NULL),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1535  			      our_name, 1, NULL)))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1536  	    go->neg_chap = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1537      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1538      if (go->neg_eap &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1539  	(hadchap == 0 || (hadchap == -1 &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1540  	    !have_chap_secret((explicit_remote? remote_name: NULL), our_name,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1541  		1, NULL))) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1542  	!have_srp_secret((explicit_remote? remote_name: NULL), our_name, 1,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1543  	    NULL))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1544  	go->neg_eap = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1545  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1546  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1547  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1548   * check_passwd - Check the user name and passwd against the PAP secrets
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1549   * file.  If requested, also check against the system password database,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1550   * and login the user if OK.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1551   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1552   * returns:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1553   *	UPAP_AUTHNAK: Authentication failed.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1554   *	UPAP_AUTHACK: Authentication succeeded.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1555   * In either case, msg points to an appropriate message.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1556   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1557  int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1558  check_passwd(unit, auser, userlen, apasswd, passwdlen, msg)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1559      int unit;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1560      char *auser;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1561      int userlen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1562      char *apasswd;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1563      int passwdlen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1564      char **msg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1565  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1566    return UPAP_AUTHNAK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1567      int ret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1568      char *filename;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1569      FILE *f;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1570      struct wordlist *addrs = NULL, *opts = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1571      char passwd[256], user[256];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1572      char secret[MAXWORDLEN];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1573      static int attempts = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1574  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1575      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1576       * Make copies of apasswd and auser, then null-terminate them.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1577       * If there are unprintable characters in the password, make
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1578       * them visible.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1579       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1580      slprintf(ppp_settings.passwd, sizeof(ppp_settings.passwd), "%.*v", passwdlen, apasswd);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1581      slprintf(ppp_settings.user, sizeof(ppp_settings.user), "%.*v", userlen, auser);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1582      *msg = "";
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1583  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1584      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1585       * Check if a plugin wants to handle this.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1586       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1587      if (pap_auth_hook) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1588  	ret = (*pap_auth_hook)(ppp_settings.user, ppp_settings.passwd, msg, &addrs, &opts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1589  	if (ret >= 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1590  	    /* note: set_allowed_addrs() saves opts (but not addrs):
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1591  	       don't free it! */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1592  	    if (ret)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1593  		set_allowed_addrs(unit, addrs, opts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1594  	    else if (opts != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1595  		free_wordlist(opts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1596  	    if (addrs != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1597  		free_wordlist(addrs);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1598  	    BZERO(ppp_settings.passwd, sizeof(ppp_settings.passwd));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1599  	    return ret? UPAP_AUTHACK: UPAP_AUTHNAK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1600  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1601      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1602  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1603      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1604       * Open the file of pap secrets and scan for a suitable secret
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1605       * for authenticating this user.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1606       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1607      filename = _PATH_UPAPFILE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1608      addrs = opts = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1609      ret = UPAP_AUTHNAK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1610      f = fopen(filename, "r");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1611      if (f == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1612  	ppp_error("Can't open PAP password file %s: %m", filename);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1613  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1614      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1615  	check_access(f, filename);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1616  	if (scan_authfile(f, ppp_settings.user, our_name, secret, &addrs, &opts, filename, 0) < 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1617  	    ppp_warn("no PAP secret found for %s", user);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1618  	} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1619  	    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1620  	     * If the secret is "@login", it means to check
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1621  	     * the password against the login database.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1622  	     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1623  	    int login_secret = strcmp(secret, "@login") == 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1624  	    ret = UPAP_AUTHACK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1625  	    if (uselogin || login_secret) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1626  		/* login option or secret is @login */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1627  		if (session_full(ppp_settings.user, ppp_settings.passwd, devnam, msg) == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1628  		    ret = UPAP_AUTHNAK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1629  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1630  	    } else if (session_mgmt) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1631  		if (session_check(ppp_settings.user, NULL, devnam, NULL) == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1632  		    ppp_warn("Peer %q failed PAP Session verification", user);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1633  		    ret = UPAP_AUTHNAK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1634  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1635  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1636  	    if (secret[0] != 0 && !login_secret) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1637  		/* password given in pap-secrets - must match */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1638  		if ((cryptpap || strcmp(ppp_settings.passwd, secret) != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1639  		    && strcmp(crypt(ppp_settings.passwd, secret), secret) != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1640  		    ret = UPAP_AUTHNAK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1641  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1642  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1643  	fclose(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1644      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1645  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1646      if (ret == UPAP_AUTHNAK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1647          if (**msg == 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1648  	    *msg = "Login incorrect";
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1649  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1650  	 * XXX can we ever get here more than once??
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1651  	 * Frustrate passwd stealer programs.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1652  	 * Allow 10 tries, but start backing off after 3 (stolen from login).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1653  	 * On 10'th, drop the connection.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1654  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1655  	if (attempts++ >= 10) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1656  	    ppp_warn("%d LOGIN FAILURES ON %s, %s", attempts, devnam, user);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1657  	    lcp_close(pcb, "login failed");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1658  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1659  	if (attempts > 3)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1660  	    sleep((u_int) (attempts - 3) * 5);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1661  	if (opts != NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1662  	    free_wordlist(opts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1663  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1664      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1665  	attempts = 0;			/* Reset count */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1666  	if (**msg == 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1667  	    *msg = "Login ok";
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1668  	set_allowed_addrs(unit, addrs, opts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1669      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1670  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1671      if (addrs != NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1672  	free_wordlist(addrs);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1673      BZERO(ppp_settings.passwd, sizeof(ppp_settings.passwd));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1674      BZERO(secret, sizeof(secret));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1675  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1676      return ret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1677  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1678  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1679  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1680   * null_login - Check if a username of "" and a password of "" are
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1681   * acceptable, and iff so, set the list of acceptable IP addresses
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1682   * and return 1.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1683   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1684  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1685  null_login(unit)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1686      int unit;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1687  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1688      char *filename;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1689      FILE *f;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1690      int i, ret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1691      struct wordlist *addrs, *opts;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1692      char secret[MAXWORDLEN];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1693  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1694      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1695       * Check if a plugin wants to handle this.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1696       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1697      ret = -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1698      if (null_auth_hook)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1699  	ret = (*null_auth_hook)(&addrs, &opts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1700  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1701      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1702       * Open the file of pap secrets and scan for a suitable secret.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1703       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1704      if (ret <= 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1705  	filename = _PATH_UPAPFILE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1706  	addrs = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1707  	f = fopen(filename, "r");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1708  	if (f == NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1709  	    return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1710  	check_access(f, filename);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1711  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1712  	i = scan_authfile(f, "", our_name, secret, &addrs, &opts, filename, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1713  	ret = i >= 0 && secret[0] == 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1714  	BZERO(secret, sizeof(secret));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1715  	fclose(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1716      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1717  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1718      if (ret)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1719  	set_allowed_addrs(unit, addrs, opts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1720      else if (opts != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1721  	free_wordlist(opts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1722      if (addrs != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1723  	free_wordlist(addrs);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1724  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1725      return ret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1726  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1727  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1728  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1729   * get_pap_passwd - get a password for authenticating ourselves with
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1730   * our peer using PAP.  Returns 1 on success, 0 if no suitable password
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1731   * could be found.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1732   * Assumes passwd points to MAXSECRETLEN bytes of space (if non-null).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1733   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1734  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1735  get_pap_passwd(passwd)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1736      char *passwd;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1737  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1738      char *filename;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1739      FILE *f;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1740      int ret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1741      char secret[MAXWORDLEN];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1742  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1743      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1744       * Check whether a plugin wants to supply this.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1745       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1746      if (pap_passwd_hook) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1747  	ret = (*pap_passwd_hook)(ppp_settings,user, ppp_settings.passwd);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1748  	if (ret >= 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1749  	    return ret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1750      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1751  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1752      filename = _PATH_UPAPFILE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1753      f = fopen(filename, "r");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1754      if (f == NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1755  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1756      check_access(f, filename);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1757      ret = scan_authfile(f, user,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1758  			(remote_name[0]? remote_name: NULL),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1759  			secret, NULL, NULL, filename, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1760      fclose(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1761      if (ret < 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1762  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1763      if (passwd != NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1764  	strlcpy(passwd, secret, MAXSECRETLEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1765      BZERO(secret, sizeof(secret));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1766      return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1767  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1768  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1769  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1770   * have_pap_secret - check whether we have a PAP file with any
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1771   * secrets that we could possibly use for authenticating the peer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1772   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1773  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1774  have_pap_secret(lacks_ipp)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1775      int *lacks_ipp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1776  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1777      FILE *f;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1778      int ret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1779      char *filename;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1780      struct wordlist *addrs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1781  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1782      /* let the plugin decide, if there is one */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1783      if (pap_check_hook) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1784  	ret = (*pap_check_hook)();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1785  	if (ret >= 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1786  	    return ret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1787      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1788  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1789      filename = _PATH_UPAPFILE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1790      f = fopen(filename, "r");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1791      if (f == NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1792  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1793  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1794      ret = scan_authfile(f, (explicit_remote? remote_name: NULL), our_name,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1795  			NULL, &addrs, NULL, filename, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1796      fclose(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1797      if (ret >= 0 && !some_ip_ok(addrs)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1798  	if (lacks_ipp != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1799  	    *lacks_ipp = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1800  	ret = -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1801      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1802      if (addrs != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1803  	free_wordlist(addrs);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1804  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1805      return ret >= 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1806  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1807  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1808  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1809   * have_chap_secret - check whether we have a CHAP file with a
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1810   * secret that we could possibly use for authenticating `client'
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1811   * on `server'.  Either can be the null string, meaning we don't
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1812   * know the identity yet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1813   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1814  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1815  have_chap_secret(client, server, need_ip, lacks_ipp)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1816      char *client;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1817      char *server;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1818      int need_ip;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1819      int *lacks_ipp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1820  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1821      FILE *f;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1822      int ret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1823      char *filename;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1824      struct wordlist *addrs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1825  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1826      if (chap_check_hook) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1827  	ret = (*chap_check_hook)();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1828  	if (ret >= 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1829  	    return ret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1830  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1831      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1832  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1833      filename = _PATH_CHAPFILE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1834      f = fopen(filename, "r");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1835      if (f == NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1836  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1837  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1838      if (client != NULL && client[0] == 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1839  	client = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1840      else if (server != NULL && server[0] == 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1841  	server = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1842  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1843      ret = scan_authfile(f, client, server, NULL, &addrs, NULL, filename, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1844      fclose(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1845      if (ret >= 0 && need_ip && !some_ip_ok(addrs)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1846  	if (lacks_ipp != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1847  	    *lacks_ipp = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1848  	ret = -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1849      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1850      if (addrs != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1851  	free_wordlist(addrs);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1852  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1853      return ret >= 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1854  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1855  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1856  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1857   * have_srp_secret - check whether we have a SRP file with a
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1858   * secret that we could possibly use for authenticating `client'
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1859   * on `server'.  Either can be the null string, meaning we don't
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1860   * know the identity yet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1861   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1862  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1863  have_srp_secret(client, server, need_ip, lacks_ipp)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1864      char *client;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1865      char *server;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1866      int need_ip;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1867      int *lacks_ipp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1868  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1869      FILE *f;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1870      int ret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1871      char *filename;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1872      struct wordlist *addrs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1873  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1874      filename = _PATH_SRPFILE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1875      f = fopen(filename, "r");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1876      if (f == NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1877  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1878  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1879      if (client != NULL && client[0] == 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1880  	client = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1881      else if (server != NULL && server[0] == 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1882  	server = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1883  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1884      ret = scan_authfile(f, client, server, NULL, &addrs, NULL, filename, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1885      fclose(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1886      if (ret >= 0 && need_ip && !some_ip_ok(addrs)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1887  	if (lacks_ipp != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1888  	    *lacks_ipp = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1889  	ret = -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1890      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1891      if (addrs != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1892  	free_wordlist(addrs);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1893  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1894      return ret >= 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1895  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1896  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1897  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1898  #if PPP_AUTH_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1899  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1900   * get_secret - open the CHAP secret file and return the secret
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1901   * for authenticating the given client on the given server.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1902   * (We could be either client or server).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1903   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1904  int get_secret(ppp_pcb *pcb, const char *client, const char *server, char *secret, int *secret_len, int am_server) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1905    int len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1906    LWIP_UNUSED_ARG(server);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1907    LWIP_UNUSED_ARG(am_server);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1908  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1909    if (!client || !client[0] || !pcb->settings.user || !pcb->settings.passwd || strcmp(client, pcb->settings.user)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1910      return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1911    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1912  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1913    len = (int)strlen(pcb->settings.passwd);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1914    if (len > MAXSECRETLEN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1915      ppp_error("Secret for %s on %s is too long", client, server);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1916      len = MAXSECRETLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1917    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1918  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1919    MEMCPY(secret, pcb->settings.passwd, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1920    *secret_len = len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1921    return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1922  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1923  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1924      FILE *f;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1925      int ret, len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1926      char *filename;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1927      struct wordlist *addrs, *opts;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1928      char secbuf[MAXWORDLEN];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1929      struct wordlist *addrs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1930      addrs = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1931  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1932      if (!am_server && ppp_settings.passwd[0] != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1933  	strlcpy(secbuf, ppp_settings.passwd, sizeof(secbuf));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1934      } else if (!am_server && chap_passwd_hook) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1935  	if ( (*chap_passwd_hook)(client, secbuf) < 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1936  	    ppp_error("Unable to obtain CHAP password for %s on %s from plugin",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1937  		  client, server);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1938  	    return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1939  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1940      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1941  	filename = _PATH_CHAPFILE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1942  	addrs = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1943  	secbuf[0] = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1944  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1945  	f = fopen(filename, "r");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1946  	if (f == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1947  	    ppp_error("Can't open chap secret file %s: %m", filename);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1948  	    return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1949  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1950  	check_access(f, filename);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1951  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1952  	ret = scan_authfile(f, client, server, secbuf, &addrs, &opts, filename, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1953  	fclose(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1954  	if (ret < 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1955  	    return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1956  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1957  	if (am_server)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1958  	    set_allowed_addrs(unit, addrs, opts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1959  	else if (opts != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1960  	    free_wordlist(opts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1961  	if (addrs != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1962  	    free_wordlist(addrs);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1963      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1964  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1965      len = strlen(secbuf);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1966      if (len > MAXSECRETLEN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1967  	ppp_error("Secret for %s on %s is too long", client, server);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1968  	len = MAXSECRETLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1969      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1970      MEMCPY(secret, secbuf, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1971      BZERO(secbuf, sizeof(secbuf));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1972      *secret_len = len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1973  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1974      return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1975  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1976  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1977  #endif /* PPP_AUTH_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1978  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1979  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1980  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1981  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1982   * get_srp_secret - open the SRP secret file and return the secret
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1983   * for authenticating the given client on the given server.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1984   * (We could be either client or server).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1985   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1986  int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1987  get_srp_secret(unit, client, server, secret, am_server)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1988      int unit;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1989      char *client;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1990      char *server;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1991      char *secret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1992      int am_server;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1993  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1994      FILE *fp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1995      int ret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1996      char *filename;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1997      struct wordlist *addrs, *opts;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1998  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  1999      if (!am_server && ppp_settings.passwd[0] != '\0') {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2000  	strlcpy(secret, ppp_settings.passwd, MAXWORDLEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2001      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2002  	filename = _PATH_SRPFILE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2003  	addrs = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2004  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2005  	fp = fopen(filename, "r");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2006  	if (fp == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2007  	    ppp_error("Can't open srp secret file %s: %m", filename);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2008  	    return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2009  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2010  	check_access(fp, filename);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2011  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2012  	secret[0] = '\0';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2013  	ret = scan_authfile(fp, client, server, secret, &addrs, &opts,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2014  	    filename, am_server);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2015  	fclose(fp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2016  	if (ret < 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2017  	    return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2018  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2019  	if (am_server)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2020  	    set_allowed_addrs(unit, addrs, opts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2021  	else if (opts != NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2022  	    free_wordlist(opts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2023  	if (addrs != NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2024  	    free_wordlist(addrs);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2025      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2026  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2027      return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2028  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2029  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2030  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2031   * set_allowed_addrs() - set the list of allowed addresses.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2032   * Also looks for `--' indicating options to apply for this peer
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2033   * and leaves the following words in extra_options.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2034   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2035  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2036  set_allowed_addrs(unit, addrs, opts)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2037      int unit;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2038      struct wordlist *addrs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2039      struct wordlist *opts;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2040  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2041      int n;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2042      struct wordlist *ap, **plink;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2043      struct permitted_ip *ip;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2044      char *ptr_word, *ptr_mask;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2045      struct hostent *hp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2046      struct netent *np;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2047      u32_t a, mask, ah, offset;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2048      struct ipcp_options *wo = &ipcp_wantoptions[unit];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2049      u32_t suggested_ip = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2050  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2051      if (addresses[unit] != NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2052  	free(addresses[unit]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2053      addresses[unit] = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2054      if (extra_options != NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2055  	free_wordlist(extra_options);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2056      extra_options = opts;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2057  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2058      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2059       * Count the number of IP addresses given.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2060       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2061      n = wordlist_count(addrs) + wordlist_count(noauth_addrs);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2062      if (n == 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2063  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2064      ip = (struct permitted_ip *) malloc((n + 1) * sizeof(struct permitted_ip));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2065      if (ip == 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2066  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2067  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2068      /* temporarily append the noauth_addrs list to addrs */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2069      for (plink = &addrs; *plink != NULL; plink = &(*plink)->next)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2070  	;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2071      *plink = noauth_addrs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2072  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2073      n = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2074      for (ap = addrs; ap != NULL; ap = ap->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2075  	/* "-" means no addresses authorized, "*" means any address allowed */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2076  	ptr_word = ap->word;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2077  	if (strcmp(ptr_word, "-") == 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2078  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2079  	if (strcmp(ptr_word, "*") == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2080  	    ip[n].permit = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2081  	    ip[n].base = ip[n].mask = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2082  	    ++n;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2083  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2084  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2085  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2086  	ip[n].permit = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2087  	if (*ptr_word == '!') {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2088  	    ip[n].permit = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2089  	    ++ptr_word;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2090  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2091  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2092  	mask = ~ (u32_t) 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2093  	offset = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2094  	ptr_mask = strchr (ptr_word, '/');
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2095  	if (ptr_mask != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2096  	    int bit_count;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2097  	    char *endp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2098  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2099  	    bit_count = (int) strtol (ptr_mask+1, &endp, 10);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2100  	    if (bit_count <= 0 || bit_count > 32) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2101  		ppp_warn("invalid address length %v in auth. address list",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2102  		     ptr_mask+1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2103  		continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2104  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2105  	    bit_count = 32 - bit_count;	/* # bits in host part */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2106  	    if (*endp == '+') {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2107  		offset = ifunit + 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2108  		++endp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2109  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2110  	    if (*endp != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2111  		ppp_warn("invalid address length syntax: %v", ptr_mask+1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2112  		continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2113  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2114  	    *ptr_mask = '\0';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2115  	    mask <<= bit_count;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2116  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2117  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2118  	hp = gethostbyname(ptr_word);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2119  	if (hp != NULL && hp->h_addrtype == AF_INET) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2120  	    a = *(u32_t *)hp->h_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2121  	} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2122  	    np = getnetbyname (ptr_word);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2123  	    if (np != NULL && np->n_addrtype == AF_INET) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2124  		a = lwip_htonl ((u32_t)np->n_net);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2125  		if (ptr_mask == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2126  		    /* calculate appropriate mask for net */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2127  		    ah = lwip_ntohl(a);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2128  		    if (IN_CLASSA(ah))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2129  			mask = IN_CLASSA_NET;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2130  		    else if (IN_CLASSB(ah))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2131  			mask = IN_CLASSB_NET;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2132  		    else if (IN_CLASSC(ah))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2133  			mask = IN_CLASSC_NET;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2134  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2135  	    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2136  		a = inet_addr (ptr_word);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2137  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2138  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2139  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2140  	if (ptr_mask != NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2141  	    *ptr_mask = '/';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2142  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2143  	if (a == (u32_t)-1L) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2144  	    ppp_warn("unknown host %s in auth. address list", ap->word);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2145  	    continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2146  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2147  	if (offset != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2148  	    if (offset >= ~mask) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2149  		ppp_warn("interface unit %d too large for subnet %v",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2150  		     ifunit, ptr_word);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2151  		continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2152  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2153  	    a = lwip_htonl((lwip_ntohl(a) & mask) + offset);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2154  	    mask = ~(u32_t)0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2155  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2156  	ip[n].mask = lwip_htonl(mask);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2157  	ip[n].base = a & ip[n].mask;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2158  	++n;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2159  	if (~mask == 0 && suggested_ip == 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2160  	    suggested_ip = a;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2161      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2162      *plink = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2163  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2164      ip[n].permit = 0;		/* make the last entry forbid all addresses */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2165      ip[n].base = 0;		/* to terminate the list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2166      ip[n].mask = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2167  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2168      addresses[unit] = ip;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2169  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2170      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2171       * If the address given for the peer isn't authorized, or if
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2172       * the user hasn't given one, AND there is an authorized address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2173       * which is a single host, then use that if we find one.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2174       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2175      if (suggested_ip != 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2176  	&& (wo->hisaddr == 0 || !auth_ip_addr(unit, wo->hisaddr))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2177  	wo->hisaddr = suggested_ip;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2178  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2179  	 * Do we insist on this address?  No, if there are other
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2180  	 * addresses authorized than the suggested one.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2181  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2182  	if (n > 1)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2183  	    wo->accept_remote = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2184      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2185  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2186  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2187  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2188   * auth_ip_addr - check whether the peer is authorized to use
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2189   * a given IP address.  Returns 1 if authorized, 0 otherwise.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2190   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2191  int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2192  auth_ip_addr(unit, addr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2193      int unit;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2194      u32_t addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2195  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2196      int ok;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2197  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2198      /* don't allow loopback or multicast address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2199      if (bad_ip_adrs(addr))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2200  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2201  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2202      if (allowed_address_hook) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2203  	ok = allowed_address_hook(addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2204  	if (ok >= 0) return ok;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2205      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2206  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2207      if (addresses[unit] != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2208  	ok = ip_addr_check(addr, addresses[unit]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2209  	if (ok >= 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2210  	    return ok;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2211      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2212  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2213      if (auth_required)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2214  	return 0;		/* no addresses authorized */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2215      return allow_any_ip || privileged || !have_route_to(addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2216  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2217  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2218  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2219  ip_addr_check(addr, addrs)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2220      u32_t addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2221      struct permitted_ip *addrs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2222  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2223      for (; ; ++addrs)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2224  	if ((addr & addrs->mask) == addrs->base)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2225  	    return addrs->permit;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2226  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2227  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2228  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2229   * bad_ip_adrs - return 1 if the IP address is one we don't want
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2230   * to use, such as an address in the loopback net or a multicast address.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2231   * addr is in network byte order.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2232   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2233  int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2234  bad_ip_adrs(addr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2235      u32_t addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2236  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2237      addr = lwip_ntohl(addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2238      return (addr >> IN_CLASSA_NSHIFT) == IN_LOOPBACKNET
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2239  	|| IN_MULTICAST(addr) || IN_BADCLASS(addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2240  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2241  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2242  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2243   * some_ip_ok - check a wordlist to see if it authorizes any
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2244   * IP address(es).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2245   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2246  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2247  some_ip_ok(addrs)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2248      struct wordlist *addrs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2249  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2250      for (; addrs != 0; addrs = addrs->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2251  	if (addrs->word[0] == '-')
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2252  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2253  	if (addrs->word[0] != '!')
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2254  	    return 1;		/* some IP address is allowed */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2255      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2256      return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2257  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2258  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2259  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2260   * auth_number - check whether the remote number is allowed to connect.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2261   * Returns 1 if authorized, 0 otherwise.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2262   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2263  int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2264  auth_number()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2265  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2266      struct wordlist *wp = permitted_numbers;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2267      int l;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2268  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2269      /* Allow all if no authorization list. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2270      if (!wp)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2271  	return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2272  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2273      /* Allow if we have a match in the authorization list. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2274      while (wp) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2275  	/* trailing '*' wildcard */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2276  	l = strlen(wp->word);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2277  	if ((wp->word)[l - 1] == '*')
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2278  	    l--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2279  	if (!strncasecmp(wp->word, remote_number, l))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2280  	    return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2281  	wp = wp->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2282      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2283  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2284      return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2285  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2286  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2287  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2288   * check_access - complain if a secret file has too-liberal permissions.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2289   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2290  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2291  check_access(f, filename)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2292      FILE *f;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2293      char *filename;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2294  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2295      struct stat sbuf;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2296  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2297      if (fstat(fileno(f), &sbuf) < 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2298  	ppp_warn("cannot stat secret file %s: %m", filename);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2299      } else if ((sbuf.st_mode & (S_IRWXG | S_IRWXO)) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2300  	ppp_warn("Warning - secret file %s has world and/or group access",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2301  	     filename);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2302      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2303  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2304  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2305  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2306   * scan_authfile - Scan an authorization file for a secret suitable
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2307   * for authenticating `client' on `server'.  The return value is -1
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2308   * if no secret is found, otherwise >= 0.  The return value has
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2309   * NONWILD_CLIENT set if the secret didn't have "*" for the client, and
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2310   * NONWILD_SERVER set if the secret didn't have "*" for the server.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2311   * Any following words on the line up to a "--" (i.e. address authorization
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2312   * info) are placed in a wordlist and returned in *addrs.  Any
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2313   * following words (extra options) are placed in a wordlist and
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2314   * returned in *opts.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2315   * We assume secret is NULL or points to MAXWORDLEN bytes of space.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2316   * Flags are non-zero if we need two colons in the secret in order to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2317   * match.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2318   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2319  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2320  scan_authfile(f, client, server, secret, addrs, opts, filename, flags)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2321      FILE *f;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2322      char *client;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2323      char *server;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2324      char *secret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2325      struct wordlist **addrs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2326      struct wordlist **opts;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2327      char *filename;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2328      int flags;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2329  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2330      int newline, xxx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2331      int got_flag, best_flag;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2332      FILE *sf;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2333      struct wordlist *ap, *addr_list, *alist, **app;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2334      char word[MAXWORDLEN];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2335      char atfile[MAXWORDLEN];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2336      char lsecret[MAXWORDLEN];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2337      char *cp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2338  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2339      if (addrs != NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2340  	*addrs = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2341      if (opts != NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2342  	*opts = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2343      addr_list = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2344      if (!getword(f, word, &newline, filename))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2345  	return -1;		/* file is empty??? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2346      newline = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2347      best_flag = -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2348      for (;;) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2349  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2350  	 * Skip until we find a word at the start of a line.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2351  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2352  	while (!newline && getword(f, word, &newline, filename))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2353  	    ;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2354  	if (!newline)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2355  	    break;		/* got to end of file */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2356  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2357  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2358  	 * Got a client - check if it's a match or a wildcard.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2359  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2360  	got_flag = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2361  	if (client != NULL && strcmp(word, client) != 0 && !ISWILD(word)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2362  	    newline = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2363  	    continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2364  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2365  	if (!ISWILD(word))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2366  	    got_flag = NONWILD_CLIENT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2367  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2368  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2369  	 * Now get a server and check if it matches.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2370  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2371  	if (!getword(f, word, &newline, filename))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2372  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2373  	if (newline)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2374  	    continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2375  	if (!ISWILD(word)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2376  	    if (server != NULL && strcmp(word, server) != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2377  		continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2378  	    got_flag |= NONWILD_SERVER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2379  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2380  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2381  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2382  	 * Got some sort of a match - see if it's better than what
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2383  	 * we have already.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2384  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2385  	if (got_flag <= best_flag)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2386  	    continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2387  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2388  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2389  	 * Get the secret.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2390  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2391  	if (!getword(f, word, &newline, filename))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2392  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2393  	if (newline)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2394  	    continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2395  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2396  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2397  	 * SRP-SHA1 authenticator should never be reading secrets from
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2398  	 * a file.  (Authenticatee may, though.)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2399  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2400  	if (flags && ((cp = strchr(word, ':')) == NULL ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2401  	    strchr(cp + 1, ':') == NULL))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2402  	    continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2403  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2404  	if (secret != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2405  	    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2406  	     * Special syntax: @/pathname means read secret from file.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2407  	     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2408  	    if (word[0] == '@' && word[1] == '/') {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2409  		strlcpy(atfile, word+1, sizeof(atfile));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2410  		if ((sf = fopen(atfile, "r")) == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2411  		    ppp_warn("can't open indirect secret file %s", atfile);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2412  		    continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2413  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2414  		check_access(sf, atfile);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2415  		if (!getword(sf, word, &xxx, atfile)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2416  		    ppp_warn("no secret in indirect secret file %s", atfile);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2417  		    fclose(sf);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2418  		    continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2419  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2420  		fclose(sf);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2421  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2422  	    strlcpy(lsecret, word, sizeof(lsecret));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2423  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2424  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2425  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2426  	 * Now read address authorization info and make a wordlist.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2427  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2428  	app = &alist;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2429  	for (;;) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2430  	    if (!getword(f, word, &newline, filename) || newline)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2431  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2432  	    ap = (struct wordlist *)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2433  		    malloc(sizeof(struct wordlist) + strlen(word) + 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2434  	    if (ap == NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2435  		novm("authorized addresses");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2436  	    ap->word = (char *) (ap + 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2437  	    strcpy(ap->word, word);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2438  	    *app = ap;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2439  	    app = &ap->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2440  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2441  	*app = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2442  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2443  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2444  	 * This is the best so far; remember it.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2445  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2446  	best_flag = got_flag;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2447  	if (addr_list)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2448  	    free_wordlist(addr_list);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2449  	addr_list = alist;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2450  	if (secret != NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2451  	    strlcpy(secret, lsecret, MAXWORDLEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2452  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2453  	if (!newline)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2454  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2455      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2456  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2457      /* scan for a -- word indicating the start of options */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2458      for (app = &addr_list; (ap = *app) != NULL; app = &ap->next)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2459  	if (strcmp(ap->word, "--") == 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2460  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2461      /* ap = start of options */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2462      if (ap != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2463  	ap = ap->next;		/* first option */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2464  	free(*app);			/* free the "--" word */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2465  	*app = NULL;		/* terminate addr list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2466      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2467      if (opts != NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2468  	*opts = ap;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2469      else if (ap != NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2470  	free_wordlist(ap);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2471      if (addrs != NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2472  	*addrs = addr_list;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2473      else if (addr_list != NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2474  	free_wordlist(addr_list);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2475  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2476      return best_flag;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2477  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2478  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2479  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2480   * wordlist_count - return the number of items in a wordlist
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2481   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2482  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2483  wordlist_count(wp)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2484      struct wordlist *wp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2485  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2486      int n;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2487  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2488      for (n = 0; wp != NULL; wp = wp->next)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2489  	++n;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2490      return n;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2491  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2492  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2493  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2494   * free_wordlist - release memory allocated for a wordlist.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2495   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2496  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2497  free_wordlist(wp)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2498      struct wordlist *wp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2499  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2500      struct wordlist *next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2501  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2502      while (wp != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2503  	next = wp->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2504  	free(wp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2505  	wp = next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2506      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2507  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2508  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2509  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\auth.c	  2510  #endif /* PPP_SUPPORT */

	; Module end
