	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\.pppoe.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Rtl8211f -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\pppoe.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\pppoe.src ..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\pppoe.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\pppoe.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	735
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\pppoe.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L5
	.byte	2
	.byte	'int',0,4,5,3
	.word	172
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	179
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	221
	.byte	7
	.word	221
	.byte	8
	.byte	'__cmpswapw',0
	.word	237
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	242
	.byte	9
	.byte	'value',0
	.word	221
	.byte	9
	.byte	'compare',0
	.word	221
	.byte	0,2
	.byte	'short int',0,2,5,10
	.byte	'__wchar_t',0,1,1,1
	.word	299
	.byte	10
	.byte	'__size_t',0,1,1,1
	.word	221
	.byte	10
	.byte	'__ptrdiff_t',0,1,1,1
	.word	172
	.byte	11,1,7
	.word	367
	.byte	10
	.byte	'__codeptr',0,1,1,1
	.word	369
	.byte	10
	.byte	'__intptr_t',0,1,1,1
	.word	172
	.byte	10
	.byte	'__uintptr_t',0,1,1,1
	.word	221
	.byte	2
	.byte	'unsigned char',0,1,8,10
	.byte	'uint8',0,2,108,29
	.word	431
	.byte	2
	.byte	'unsigned short int',0,2,7,10
	.byte	'uint16',0,2,112,29
	.word	462
	.byte	2
	.byte	'unsigned long int',0,4,7,10
	.byte	'uint32',0,2,116,29
	.word	499
	.byte	2
	.byte	'char',0,1,6,10
	.byte	'sint8',0,2,125,29
	.word	535
	.byte	10
	.byte	'sint16',0,2,129,1,29
	.word	299
	.byte	2
	.byte	'long int',0,4,5,10
	.byte	'sint32',0,2,134,1,29
	.word	573
	.byte	2
	.byte	'long long int',0,8,5,10
	.byte	'sint64',0,2,141,1,29
	.word	601
	.byte	2
	.byte	'float',0,4,4,10
	.byte	'float32',0,2,170,1,29
	.word	634
	.byte	12
	.byte	'void',0,7
	.word	660
	.byte	10
	.byte	'pvoid',0,3,54,28
	.word	666
	.byte	10
	.byte	'Ifx_TickTime',0,3,76,28
	.word	601
	.byte	10
	.byte	'u32_t',0,4,87,16
	.word	499
	.byte	10
	.byte	'intmax_t',0,5,198,2,41
	.word	601
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,22,0,3,8,58,15,59,15,57,15,73,19,0,0,11,21,0,54,15,0,0,12,59,0
	.byte	3,8,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\pppoe.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'cc.h',0,2,0,0
	.byte	'stdint.h',0,3,0,0,0
.L9:
.L7:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	     1  /*****************************************************************************
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	     2  * pppoe.c - PPP Over Ethernet implementation for lwIP.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	     3  *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	     4  * Copyright (c) 2006 by Marc Boucher, Services Informatiques (MBSI) inc.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	     5  *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	     6  * The authors hereby grant permission to use, copy, modify, distribute,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	     7  * and license this software and its documentation for any purpose, provided
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	     8  * that existing copyright notices are retained in all copies and that this
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	     9  * notice and the following disclaimer are included verbatim in any 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    10  * distributions. No written agreement, license, or royalty fee is required
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    11  * for any of the authorized uses.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    12  *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    13  * THIS SOFTWARE IS PROVIDED BY THE CONTRIBUTORS *AS IS* AND ANY EXPRESS OR
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    14  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    15  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    16  * IN NO EVENT SHALL THE CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    17  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    18  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    19  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    20  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    21  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    22  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    23  *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    24  ******************************************************************************
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    25  * REVISION HISTORY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    26  *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    27  * 06-01-01 Marc Boucher <marc@mbsi.ca>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    28  *   Ported to lwIP.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    29  *****************************************************************************/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    30  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    31  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    32  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    33  /* based on NetBSD: if_pppoe.c,v 1.64 2006/01/31 23:50:15 martin Exp */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    34  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    35  /*-
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    36   * Copyright (c) 2002 The NetBSD Foundation, Inc.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    37   * All rights reserved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    38   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    39   * This code is derived from software contributed to The NetBSD Foundation
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    40   * by Martin Husemann <martin@NetBSD.org>.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    41   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    42   * Redistribution and use in source and binary forms, with or without
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    43   * modification, are permitted provided that the following conditions
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    44   * are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    45   * 1. Redistributions of source code must retain the above copyright
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    46   *    notice, this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    47   * 2. Redistributions in binary form must reproduce the above copyright
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    48   *    notice, this list of conditions and the following disclaimer in the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    49   *    documentation and/or other materials provided with the distribution.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    50   * 3. All advertising materials mentioning features or use of this software
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    51   *    must display the following acknowledgement:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    52   *        This product includes software developed by the NetBSD
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    53   *        Foundation, Inc. and its contributors.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    54   * 4. Neither the name of The NetBSD Foundation nor the names of its
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    55   *    contributors may be used to endorse or promote products derived
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    56   *    from this software without specific prior written permission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    57   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    58   * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    59   * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    60   * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    61   * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    62   * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    63   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    64   * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    65   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    66   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    67   * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    68   * POSSIBILITY OF SUCH DAMAGE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    69   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    70  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    71  #include "netif/ppp/ppp_opts.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    72  #if PPP_SUPPORT && PPPOE_SUPPORT /* don't build if not configured for use in lwipopts.h */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    73  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    74  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    75  #include <string.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    76  #include <stdio.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    77  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    78  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    79  #include "lwip/timeouts.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    80  #include "lwip/memp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    81  #include "lwip/stats.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    82  #include "lwip/snmp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    83  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    84  #include "netif/ethernet.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    85  #include "netif/ppp/ppp_impl.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    86  #include "netif/ppp/lcp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    87  #include "netif/ppp/ipcp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    88  #include "netif/ppp/pppoe.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    89  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    90  /* Memory pool */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    91  LWIP_MEMPOOL_DECLARE(PPPOE_IF, MEMP_NUM_PPPOE_INTERFACES, sizeof(struct pppoe_softc), "PPPOE_IF")
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    92  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    93  /* Add a 16 bit unsigned value to a buffer pointed to by PTR */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    94  #define PPPOE_ADD_16(PTR, VAL) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    95      *(PTR)++ = (u8_t)((VAL) / 256);    \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    96      *(PTR)++ = (u8_t)((VAL) % 256)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    97  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    98  /* Add a complete PPPoE header to the buffer pointed to by PTR */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	    99  #define PPPOE_ADD_HEADER(PTR, CODE, SESS, LEN)  \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   100      *(PTR)++ = PPPOE_VERTYPE;  \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   101      *(PTR)++ = (CODE);         \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   102      PPPOE_ADD_16(PTR, SESS);   \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   103      PPPOE_ADD_16(PTR, LEN)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   104  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   105  #define PPPOE_DISC_TIMEOUT (5*1000)  /* base for quick timeout calculation */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   106  #define PPPOE_SLOW_RETRY   (60*1000) /* persistent retry interval */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   107  #define PPPOE_DISC_MAXPADI  4        /* retry PADI four times (quickly) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   108  #define PPPOE_DISC_MAXPADR  2        /* retry PADR twice */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   109  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   110  #ifdef PPPOE_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   111  #error "PPPOE_SERVER is not yet supported under lwIP!"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   112  /* from if_spppsubr.c */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   113  #define IFF_PASSIVE IFF_LINK0 /* wait passively for connection */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   114  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   115  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   116  #define PPPOE_ERRORSTRING_LEN     64
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   117  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   118  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   119  /* callbacks called from PPP core */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   120  static err_t pppoe_write(ppp_pcb *ppp, void *ctx, struct pbuf *p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   121  static err_t pppoe_netif_output(ppp_pcb *ppp, void *ctx, struct pbuf *p, u_short protocol);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   122  static void pppoe_connect(ppp_pcb *ppp, void *ctx);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   123  static void pppoe_disconnect(ppp_pcb *ppp, void *ctx);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   124  static err_t pppoe_destroy(ppp_pcb *ppp, void *ctx);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   125  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   126  /* management routines */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   127  static void pppoe_abort_connect(struct pppoe_softc *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   128  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   129  static void pppoe_clear_softc(struct pppoe_softc *, const char *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   130  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   131  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   132  /* internal timeout handling */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   133  static void pppoe_timeout(void *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   134  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   135  /* sending actual protocol controll packets */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   136  static err_t pppoe_send_padi(struct pppoe_softc *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   137  static err_t pppoe_send_padr(struct pppoe_softc *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   138  #ifdef PPPOE_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   139  static err_t pppoe_send_pado(struct pppoe_softc *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   140  static err_t pppoe_send_pads(struct pppoe_softc *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   141  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   142  static err_t pppoe_send_padt(struct netif *, u_int, const u8_t *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   143  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   144  /* internal helper functions */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   145  static err_t pppoe_xmit(struct pppoe_softc *sc, struct pbuf *pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   146  static struct pppoe_softc* pppoe_find_softc_by_session(u_int session, struct netif *rcvif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   147  static struct pppoe_softc* pppoe_find_softc_by_hunique(u8_t *token, size_t len, struct netif *rcvif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   148  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   149  /** linked list of created pppoe interfaces */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   150  static struct pppoe_softc *pppoe_softc_list;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   151  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   152  /* Callbacks structure for PPP core */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   153  static const struct link_callbacks pppoe_callbacks = {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   154    pppoe_connect,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   155  #if PPP_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   156    NULL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   157  #endif /* PPP_SERVER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   158    pppoe_disconnect,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   159    pppoe_destroy,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   160    pppoe_write,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   161    pppoe_netif_output,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   162    NULL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   163    NULL
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   164  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   165  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   166  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   167   * Create a new PPP Over Ethernet (PPPoE) connection.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   168   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   169   * Return 0 on success, an error code on failure.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   170   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   171  ppp_pcb *pppoe_create(struct netif *pppif,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   172         struct netif *ethif,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   173         const char *service_name, const char *concentrator_name,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   174         ppp_link_status_cb_fn link_status_cb, void *ctx_cb)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   175  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   176    ppp_pcb *ppp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   177    struct pppoe_softc *sc;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   178    LWIP_UNUSED_ARG(service_name);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   179    LWIP_UNUSED_ARG(concentrator_name);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   180    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   181  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   182    sc = (struct pppoe_softc *)LWIP_MEMPOOL_ALLOC(PPPOE_IF);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   183    if (sc == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   184      return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   185    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   186  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   187    ppp = ppp_new(pppif, &pppoe_callbacks, sc, link_status_cb, ctx_cb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   188    if (ppp == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   189      LWIP_MEMPOOL_FREE(PPPOE_IF, sc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   190      return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   191    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   192  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   193    memset(sc, 0, sizeof(struct pppoe_softc));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   194    sc->pcb = ppp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   195    sc->sc_ethif = ethif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   196    /* put the new interface at the head of the list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   197    sc->next = pppoe_softc_list;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   198    pppoe_softc_list = sc;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   199    return ppp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   200  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   201  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   202  /* Called by PPP core */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   203  static err_t pppoe_write(ppp_pcb *ppp, void *ctx, struct pbuf *p) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   204    struct pppoe_softc *sc = (struct pppoe_softc *)ctx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   205    struct pbuf *ph; /* Ethernet + PPPoE header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   206    err_t ret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   207  #if MIB2_STATS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   208    u16_t tot_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   209  #else /* MIB2_STATS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   210    LWIP_UNUSED_ARG(ppp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   211  #endif /* MIB2_STATS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   212  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   213    /* skip address & flags */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   214    pbuf_remove_header(p, 2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   215  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   216    ph = pbuf_alloc(PBUF_LINK, (u16_t)(PPPOE_HEADERLEN), PBUF_RAM);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   217    if(!ph) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   218      LINK_STATS_INC(link.memerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   219      LINK_STATS_INC(link.proterr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   220      MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   221      pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   222      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   223    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   224  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   225    pbuf_remove_header(ph, PPPOE_HEADERLEN); /* hide PPPoE header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   226    pbuf_cat(ph, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   227  #if MIB2_STATS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   228    tot_len = ph->tot_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   229  #endif /* MIB2_STATS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   230  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   231    ret = pppoe_xmit(sc, ph);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   232    if (ret != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   233      LINK_STATS_INC(link.err);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   234      MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   235      return ret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   236    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   237  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   238    MIB2_STATS_NETIF_ADD(ppp->netif, ifoutoctets, (u16_t)tot_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   239    MIB2_STATS_NETIF_INC(ppp->netif, ifoutucastpkts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   240    LINK_STATS_INC(link.xmit);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   241    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   242  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   243  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   244  /* Called by PPP core */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   245  static err_t pppoe_netif_output(ppp_pcb *ppp, void *ctx, struct pbuf *p, u_short protocol) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   246    struct pppoe_softc *sc = (struct pppoe_softc *)ctx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   247    struct pbuf *pb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   248    u8_t *pl;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   249    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   250  #if MIB2_STATS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   251    u16_t tot_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   252  #else /* MIB2_STATS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   253    LWIP_UNUSED_ARG(ppp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   254  #endif /* MIB2_STATS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   255  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   256    /* @todo: try to use pbuf_header() here! */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   257    pb = pbuf_alloc(PBUF_LINK, PPPOE_HEADERLEN + sizeof(protocol), PBUF_RAM);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   258    if(!pb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   259      LINK_STATS_INC(link.memerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   260      LINK_STATS_INC(link.proterr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   261      MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   262      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   263    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   264  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   265    pbuf_remove_header(pb, PPPOE_HEADERLEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   266  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   267    pl = (u8_t*)pb->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   268    PUTSHORT(protocol, pl);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   269  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   270    pbuf_chain(pb, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   271  #if MIB2_STATS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   272    tot_len = pb->tot_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   273  #endif /* MIB2_STATS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   274  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   275    if( (err = pppoe_xmit(sc, pb)) != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   276      LINK_STATS_INC(link.err);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   277      MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   278      return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   279    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   280  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   281    MIB2_STATS_NETIF_ADD(ppp->netif, ifoutoctets, tot_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   282    MIB2_STATS_NETIF_INC(ppp->netif, ifoutucastpkts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   283    LINK_STATS_INC(link.xmit);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   284    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   285  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   286  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   287  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   288  pppoe_destroy(ppp_pcb *ppp, void *ctx)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   289  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   290    struct pppoe_softc *sc = (struct pppoe_softc *)ctx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   291    struct pppoe_softc **copp, *freep;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   292    LWIP_UNUSED_ARG(ppp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   293  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   294    sys_untimeout(pppoe_timeout, sc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   295  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   296    /* remove interface from list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   297    for (copp = &pppoe_softc_list; (freep = *copp); copp = &freep->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   298      if (freep == sc) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   299         *copp = freep->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   300         break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   301      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   302    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   303  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   304  #ifdef PPPOE_TODO
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   305    if (sc->sc_concentrator_name) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   306      mem_free(sc->sc_concentrator_name);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   307    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   308    if (sc->sc_service_name) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   309      mem_free(sc->sc_service_name);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   310    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   311  #endif /* PPPOE_TODO */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   312    LWIP_MEMPOOL_FREE(PPPOE_IF, sc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   313  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   314    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   315  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   316  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   317  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   318   * Find the interface handling the specified session.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   319   * Note: O(number of sessions open), this is a client-side only, mean
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   320   * and lean implementation, so number of open sessions typically should
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   321   * be 1.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   322   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   323  static struct pppoe_softc* pppoe_find_softc_by_session(u_int session, struct netif *rcvif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   324    struct pppoe_softc *sc;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   325  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   326    for (sc = pppoe_softc_list; sc != NULL; sc = sc->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   327      if (sc->sc_state == PPPOE_STATE_SESSION
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   328          && sc->sc_session == session
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   329           && sc->sc_ethif == rcvif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   330             return sc;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   331        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   332    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   333    return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   334  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   335  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   336  /* Check host unique token passed and return appropriate softc pointer,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   337   * or NULL if token is bogus. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   338  static struct pppoe_softc* pppoe_find_softc_by_hunique(u8_t *token, size_t len, struct netif *rcvif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   339    struct pppoe_softc *sc, *t;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   340  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   341    if (len != sizeof sc) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   342      return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   343    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   344    MEMCPY(&t, token, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   345  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   346    for (sc = pppoe_softc_list; sc != NULL; sc = sc->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   347      if (sc == t) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   348        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   349      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   350    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   351  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   352    if (sc == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   353      PPPDEBUG(LOG_DEBUG, ("pppoe: alien host unique tag, no session found\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   354      return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   355    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   356  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   357    /* should be safe to access *sc now */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   358    if (sc->sc_state < PPPOE_STATE_PADI_SENT || sc->sc_state >= PPPOE_STATE_SESSION) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   359      PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": host unique tag found, but it belongs to a connection in state %d\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   360        sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, sc->sc_state));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   361      return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   362    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   363    if (sc->sc_ethif != rcvif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   364      PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": wrong interface, not accepting host unique\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   365        sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   366      return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   367    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   368    return sc;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   369  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   370  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   371  /* analyze and handle a single received packet while not in session state */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   372  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   373  pppoe_disc_input(struct netif *netif, struct pbuf *pb)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   374  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   375    u16_t tag, len, off;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   376    u16_t session, plen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   377    struct pppoe_softc *sc;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   378  #if PPP_DEBUG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   379    const char *err_msg = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   380  #endif /* PPP_DEBUG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   381    u8_t *ac_cookie;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   382    u16_t ac_cookie_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   383  #ifdef PPPOE_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   384    u8_t *hunique;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   385    size_t hunique_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   386  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   387    struct pppoehdr *ph;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   388    struct pppoetag pt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   389    int err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   390    struct eth_hdr *ethhdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   391  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   392    /* don't do anything if there is not a single PPPoE instance */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   393    if (pppoe_softc_list == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   394      pbuf_free(pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   395      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   396    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   397  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   398    pb = pbuf_coalesce(pb, PBUF_RAW);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   399  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   400    ethhdr = (struct eth_hdr *)pb->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   401  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   402    ac_cookie = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   403    ac_cookie_len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   404  #ifdef PPPOE_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   405    hunique = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   406    hunique_len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   407  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   408    session = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   409    off = sizeof(struct eth_hdr) + sizeof(struct pppoehdr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   410    if (pb->len < off) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   411      PPPDEBUG(LOG_DEBUG, ("pppoe: packet too short: %d\n", pb->len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   412      goto done;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   413    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   414  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   415    ph = (struct pppoehdr *) (ethhdr + 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   416    if (ph->vertype != PPPOE_VERTYPE) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   417      PPPDEBUG(LOG_DEBUG, ("pppoe: unknown version/type packet: 0x%x\n", ph->vertype));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   418      goto done;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   419    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   420    session = lwip_ntohs(ph->session);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   421    plen = lwip_ntohs(ph->plen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   422  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   423    if (plen > (pb->len - off)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   424      PPPDEBUG(LOG_DEBUG, ("pppoe: packet content does not fit: data available = %d, packet size = %u\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   425          pb->len - off, plen));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   426      goto done;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   427    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   428    if(pb->tot_len == pb->len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   429      u16_t framelen = off + plen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   430      if (framelen < pb->len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   431        /* ignore trailing garbage */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   432        pb->tot_len = pb->len = framelen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   433      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   434    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   435    tag = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   436    len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   437    sc = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   438    while (off + sizeof(pt) <= pb->len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   439      MEMCPY(&pt, (u8_t*)pb->payload + off, sizeof(pt));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   440      tag = lwip_ntohs(pt.tag);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   441      len = lwip_ntohs(pt.len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   442      if (off + sizeof(pt) + len > pb->len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   443        PPPDEBUG(LOG_DEBUG, ("pppoe: tag 0x%x len 0x%x is too long\n", tag, len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   444        goto done;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   445      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   446      switch (tag) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   447        case PPPOE_TAG_EOL:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   448          goto breakbreak;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   449        case PPPOE_TAG_SNAME:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   450          break;  /* ignored */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   451        case PPPOE_TAG_ACNAME:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   452          break;  /* ignored */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   453        case PPPOE_TAG_HUNIQUE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   454          if (sc != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   455            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   456          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   457  #ifdef PPPOE_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   458          hunique = (u8_t*)pb->payload + off + sizeof(pt);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   459          hunique_len = len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   460  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   461          sc = pppoe_find_softc_by_hunique((u8_t*)pb->payload + off + sizeof(pt), len, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   462          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   463        case PPPOE_TAG_ACCOOKIE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   464          if (ac_cookie == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   465            if (len > PPPOE_MAX_AC_COOKIE_LEN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   466              PPPDEBUG(LOG_DEBUG, ("pppoe: AC cookie is too long: len = %d, max = %d\n", len, PPPOE_MAX_AC_COOKIE_LEN));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   467              goto done;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   468            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   469            ac_cookie = (u8_t*)pb->payload + off + sizeof(pt);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   470            ac_cookie_len = len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   471          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   472          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   473  #if PPP_DEBUG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   474        case PPPOE_TAG_SNAME_ERR:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   475          err_msg = "SERVICE NAME ERROR";
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   476          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   477        case PPPOE_TAG_ACSYS_ERR:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   478          err_msg = "AC SYSTEM ERROR";
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   479          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   480        case PPPOE_TAG_GENERIC_ERR:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   481          err_msg = "GENERIC ERROR";
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   482          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   483  #endif /* PPP_DEBUG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   484        default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   485          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   486      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   487  #if PPP_DEBUG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   488      if (err_msg != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   489        char error_tmp[PPPOE_ERRORSTRING_LEN];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   490        u16_t error_len = LWIP_MIN(len, sizeof(error_tmp)-1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   491        strncpy(error_tmp, (char*)pb->payload + off + sizeof(pt), error_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   492        error_tmp[error_len] = '\0';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   493        if (sc) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   494          PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": %s: %s\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, err_msg, error_tmp));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   495        } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   496          PPPDEBUG(LOG_DEBUG, ("pppoe: %s: %s\n", err_msg, error_tmp));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   497        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   498      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   499  #endif /* PPP_DEBUG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   500      off += sizeof(pt) + len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   501    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   502  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   503  breakbreak:;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   504    switch (ph->code) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   505      case PPPOE_CODE_PADI:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   506  #ifdef PPPOE_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   507        /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   508         * got service name, concentrator name, and/or host unique.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   509         * ignore if we have no interfaces with IFF_PASSIVE|IFF_UP.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   510         */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   511        if (LIST_EMPTY(&pppoe_softc_list)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   512          goto done;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   513        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   514        LIST_FOREACH(sc, &pppoe_softc_list, sc_list) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   515          if (!(sc->sc_sppp.pp_if.if_flags & IFF_UP)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   516            continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   517          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   518          if (!(sc->sc_sppp.pp_if.if_flags & IFF_PASSIVE)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   519            continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   520          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   521          if (sc->sc_state == PPPOE_STATE_INITIAL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   522            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   523          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   524        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   525        if (sc == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   526          /* PPPDEBUG(LOG_DEBUG, ("pppoe: free passive interface is not found\n")); */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   527          goto done;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   528        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   529        if (hunique) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   530          if (sc->sc_hunique) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   531            mem_free(sc->sc_hunique);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   532          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   533          sc->sc_hunique = mem_malloc(hunique_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   534          if (sc->sc_hunique == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   535            goto done;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   536          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   537          sc->sc_hunique_len = hunique_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   538          MEMCPY(sc->sc_hunique, hunique, hunique_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   539        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   540        MEMCPY(&sc->sc_dest, eh->ether_shost, sizeof sc->sc_dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   541        sc->sc_state = PPPOE_STATE_PADO_SENT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   542        pppoe_send_pado(sc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   543        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   544  #endif /* PPPOE_SERVER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   545      case PPPOE_CODE_PADR:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   546  #ifdef PPPOE_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   547        /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   548         * get sc from ac_cookie if IFF_PASSIVE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   549         */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   550        if (ac_cookie == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   551          /* be quiet if there is not a single pppoe instance */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   552          PPPDEBUG(LOG_DEBUG, ("pppoe: received PADR but not includes ac_cookie\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   553          goto done;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   554        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   555        sc = pppoe_find_softc_by_hunique(ac_cookie, ac_cookie_len, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   556        if (sc == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   557          /* be quiet if there is not a single pppoe instance */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   558          if (!LIST_EMPTY(&pppoe_softc_list)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   559            PPPDEBUG(LOG_DEBUG, ("pppoe: received PADR but could not find request for it\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   560          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   561          goto done;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   562        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   563        if (sc->sc_state != PPPOE_STATE_PADO_SENT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   564          PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": received unexpected PADR\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   565          goto done;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   566        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   567        if (hunique) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   568          if (sc->sc_hunique) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   569            mem_free(sc->sc_hunique);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   570          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   571          sc->sc_hunique = mem_malloc(hunique_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   572          if (sc->sc_hunique == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   573            goto done;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   574          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   575          sc->sc_hunique_len = hunique_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   576          MEMCPY(sc->sc_hunique, hunique, hunique_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   577        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   578        pppoe_send_pads(sc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   579        sc->sc_state = PPPOE_STATE_SESSION;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   580        ppp_start(sc->pcb); /* notify upper layers */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   581        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   582  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   583        /* ignore, we are no access concentrator */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   584        goto done;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   585  #endif /* PPPOE_SERVER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   586      case PPPOE_CODE_PADO:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   587        if (sc == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   588          /* be quiet if there is not a single pppoe instance */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   589          if (pppoe_softc_list != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   590            PPPDEBUG(LOG_DEBUG, ("pppoe: received PADO but could not find request for it\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   591          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   592          goto done;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   593        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   594        if (sc->sc_state != PPPOE_STATE_PADI_SENT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   595          PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": received unexpected PADO\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   596          goto done;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   597        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   598        if (ac_cookie) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   599          sc->sc_ac_cookie_len = ac_cookie_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   600          MEMCPY(sc->sc_ac_cookie, ac_cookie, ac_cookie_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   601        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   602        MEMCPY(&sc->sc_dest, ethhdr->src.addr, sizeof(sc->sc_dest.addr));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   603        sys_untimeout(pppoe_timeout, sc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   604        sc->sc_padr_retried = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   605        sc->sc_state = PPPOE_STATE_PADR_SENT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   606        if ((err = pppoe_send_padr(sc)) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   607          PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": failed to send PADR, error=%d\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, err));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   608          LWIP_UNUSED_ARG(err); /* if PPPDEBUG is disabled */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   609        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   610        sys_timeout(PPPOE_DISC_TIMEOUT * (1 + sc->sc_padr_retried), pppoe_timeout, sc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   611        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   612      case PPPOE_CODE_PADS:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   613        if (sc == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   614          goto done;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   615        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   616        sc->sc_session = session;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   617        sys_untimeout(pppoe_timeout, sc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   618        PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": session 0x%x connected\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, session));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   619        sc->sc_state = PPPOE_STATE_SESSION;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   620        ppp_start(sc->pcb); /* notify upper layers */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   621        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   622      case PPPOE_CODE_PADT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   623        /* Don't disconnect here, we let the LCP Echo/Reply find the fact
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   624         * that PPP session is down. Asking the PPP stack to end the session
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   625         * require strict checking about the PPP phase to prevent endless
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   626         * disconnection loops.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   627         */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   628  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   629        if (sc == NULL) { /* PADT frames are rarely sent with a hunique tag, this is actually almost always true */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   630          goto done;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   631        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   632        pppoe_clear_softc(sc, "received PADT");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   633  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   634        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   635      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   636        if(sc) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   637          PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": unknown code (0x%"X16_F") session = 0x%"X16_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   638              sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   639              (u16_t)ph->code, session));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   640        } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   641          PPPDEBUG(LOG_DEBUG, ("pppoe: unknown code (0x%"X16_F") session = 0x%"X16_F"\n", (u16_t)ph->code, session));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   642        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   643        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   644    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   645  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   646  done:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   647    pbuf_free(pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   648    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   649  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   650  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   651  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   652  pppoe_data_input(struct netif *netif, struct pbuf *pb)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   653  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   654    u16_t session, plen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   655    struct pppoe_softc *sc;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   656    struct pppoehdr *ph;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   657  #ifdef PPPOE_TERM_UNKNOWN_SESSIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   658    u8_t shost[ETHER_ADDR_LEN];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   659  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   660  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   661  #ifdef PPPOE_TERM_UNKNOWN_SESSIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   662    MEMCPY(shost, ((struct eth_hdr *)pb->payload)->src.addr, sizeof(shost));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   663  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   664    if (pbuf_remove_header(pb, sizeof(struct eth_hdr)) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   665      /* bail out */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   666      PPPDEBUG(LOG_ERR, ("pppoe_data_input: pbuf_remove_header failed\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   667      LINK_STATS_INC(link.lenerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   668      goto drop;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   669    } 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   670  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   671    if (pb->len < sizeof(*ph)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   672      PPPDEBUG(LOG_DEBUG, ("pppoe_data_input: could not get PPPoE header\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   673      goto drop;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   674    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   675    ph = (struct pppoehdr *)pb->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   676  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   677    if (ph->vertype != PPPOE_VERTYPE) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   678      PPPDEBUG(LOG_DEBUG, ("pppoe (data): unknown version/type packet: 0x%x\n", ph->vertype));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   679      goto drop;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   680    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   681    if (ph->code != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   682      goto drop;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   683    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   684  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   685    session = lwip_ntohs(ph->session);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   686    sc = pppoe_find_softc_by_session(session, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   687    if (sc == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   688  #ifdef PPPOE_TERM_UNKNOWN_SESSIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   689      PPPDEBUG(LOG_DEBUG, ("pppoe: input for unknown session 0x%x, sending PADT\n", session));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   690      pppoe_send_padt(netif, session, shost);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   691  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   692      goto drop;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   693    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   694  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   695    plen = lwip_ntohs(ph->plen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   696  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   697    if (pbuf_remove_header(pb, PPPOE_HEADERLEN) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   698      /* bail out */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   699      PPPDEBUG(LOG_ERR, ("pppoe_data_input: pbuf_remove_header PPPOE_HEADERLEN failed\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   700      LINK_STATS_INC(link.lenerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   701      goto drop;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   702    } 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   703  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   704    PPPDEBUG(LOG_DEBUG, ("pppoe_data_input: %c%c%"U16_F": pkthdr.len=%d, pppoe.len=%d\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   705          sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   706          pb->len, plen));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   707  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   708    if (pb->tot_len < plen) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   709      goto drop;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   710    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   711  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   712    /* Dispatch the packet thereby consuming it. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   713    ppp_input(sc->pcb, pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   714    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   715  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   716  drop:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   717    pbuf_free(pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   718  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   719  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   720  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   721  pppoe_output(struct pppoe_softc *sc, struct pbuf *pb)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   722  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   723    struct eth_hdr *ethhdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   724    u16_t etype;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   725    err_t res;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   726  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   727    /* make room for Ethernet header - should not fail */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   728    if (pbuf_add_header(pb, sizeof(struct eth_hdr)) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   729      /* bail out */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   730      PPPDEBUG(LOG_ERR, ("pppoe: %c%c%"U16_F": pppoe_output: could not allocate room for Ethernet header\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   731      LINK_STATS_INC(link.lenerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   732      pbuf_free(pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   733      return ERR_BUF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   734    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   735    ethhdr = (struct eth_hdr *)pb->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   736    etype = sc->sc_state == PPPOE_STATE_SESSION ? ETHTYPE_PPPOE : ETHTYPE_PPPOEDISC;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   737    ethhdr->type = lwip_htons(etype);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   738    MEMCPY(&ethhdr->dest.addr, &sc->sc_dest.addr, sizeof(ethhdr->dest.addr));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   739    MEMCPY(&ethhdr->src.addr, &sc->sc_ethif->hwaddr, sizeof(ethhdr->src.addr));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   740  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   741    PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F" (%x) state=%d, session=0x%x output -> %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F", len=%d\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   742        sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, etype,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   743        sc->sc_state, sc->sc_session,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   744        sc->sc_dest.addr[0], sc->sc_dest.addr[1], sc->sc_dest.addr[2], sc->sc_dest.addr[3], sc->sc_dest.addr[4], sc->sc_dest.addr[5],
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   745        pb->tot_len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   746  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   747    res = sc->sc_ethif->linkoutput(sc->sc_ethif, pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   748  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   749    pbuf_free(pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   750  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   751    return res;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   752  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   753  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   754  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   755  pppoe_send_padi(struct pppoe_softc *sc)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   756  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   757    struct pbuf *pb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   758    u8_t *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   759    int len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   760  #ifdef PPPOE_TODO
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   761    int l1 = 0, l2 = 0; /* XXX: gcc */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   762  #endif /* PPPOE_TODO */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   763  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   764    /* calculate length of frame (excluding ethernet header + pppoe header) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   765    len = 2 + 2 + 2 + 2 + sizeof sc;  /* service name tag is required, host unique is send too */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   766  #ifdef PPPOE_TODO
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   767    if (sc->sc_service_name != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   768      l1 = (int)strlen(sc->sc_service_name);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   769      len += l1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   770    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   771    if (sc->sc_concentrator_name != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   772      l2 = (int)strlen(sc->sc_concentrator_name);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   773      len += 2 + 2 + l2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   774    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   775  #endif /* PPPOE_TODO */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   776    LWIP_ASSERT("sizeof(struct eth_hdr) + PPPOE_HEADERLEN + len <= 0xffff",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   777      sizeof(struct eth_hdr) + PPPOE_HEADERLEN + len <= 0xffff);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   778  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   779    /* allocate a buffer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   780    pb = pbuf_alloc(PBUF_LINK, (u16_t)(PPPOE_HEADERLEN + len), PBUF_RAM);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   781    if (!pb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   782      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   783    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   784    LWIP_ASSERT("pb->tot_len == pb->len", pb->tot_len == pb->len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   785  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   786    p = (u8_t*)pb->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   787    /* fill in pkt */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   788    PPPOE_ADD_HEADER(p, PPPOE_CODE_PADI, 0, (u16_t)len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   789    PPPOE_ADD_16(p, PPPOE_TAG_SNAME);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   790  #ifdef PPPOE_TODO
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   791    if (sc->sc_service_name != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   792      PPPOE_ADD_16(p, l1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   793      MEMCPY(p, sc->sc_service_name, l1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   794      p += l1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   795    } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   796  #endif /* PPPOE_TODO */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   797    {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   798      PPPOE_ADD_16(p, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   799    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   800  #ifdef PPPOE_TODO
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   801    if (sc->sc_concentrator_name != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   802      PPPOE_ADD_16(p, PPPOE_TAG_ACNAME);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   803      PPPOE_ADD_16(p, l2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   804      MEMCPY(p, sc->sc_concentrator_name, l2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   805      p += l2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   806    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   807  #endif /* PPPOE_TODO */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   808    PPPOE_ADD_16(p, PPPOE_TAG_HUNIQUE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   809    PPPOE_ADD_16(p, sizeof(sc));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   810    MEMCPY(p, &sc, sizeof sc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   811  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   812    /* send pkt */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   813    return pppoe_output(sc, pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   814  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   815  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   816  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   817  pppoe_timeout(void *arg)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   818  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   819    u32_t retry_wait;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   820    int err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   821    struct pppoe_softc *sc = (struct pppoe_softc*)arg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   822  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   823    PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": timeout\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   824  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   825    switch (sc->sc_state) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   826      case PPPOE_STATE_PADI_SENT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   827        /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   828         * We have two basic ways of retrying:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   829         *  - Quick retry mode: try a few times in short sequence
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   830         *  - Slow retry mode: we already had a connection successfully
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   831         *    established and will try infinitely (without user
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   832         *    intervention)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   833         * We only enter slow retry mode if IFF_LINK1 (aka autodial)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   834         * is not set.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   835         */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   836        if (sc->sc_padi_retried < 0xff) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   837          sc->sc_padi_retried++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   838        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   839        if (!sc->pcb->settings.persist && sc->sc_padi_retried >= PPPOE_DISC_MAXPADI) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   840  #if 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   841          if ((sc->sc_sppp.pp_if.if_flags & IFF_LINK1) == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   842            /* slow retry mode */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   843            retry_wait = PPPOE_SLOW_RETRY;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   844          } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   845  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   846          {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   847            pppoe_abort_connect(sc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   848            return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   849          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   850        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   851        /* initialize for quick retry mode */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   852        retry_wait = LWIP_MIN(PPPOE_DISC_TIMEOUT * sc->sc_padi_retried, PPPOE_SLOW_RETRY);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   853        if ((err = pppoe_send_padi(sc)) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   854          sc->sc_padi_retried--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   855          PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": failed to transmit PADI, error=%d\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, err));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   856          LWIP_UNUSED_ARG(err); /* if PPPDEBUG is disabled */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   857        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   858        sys_timeout(retry_wait, pppoe_timeout, sc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   859        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   860  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   861      case PPPOE_STATE_PADR_SENT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   862        sc->sc_padr_retried++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   863        if (sc->sc_padr_retried >= PPPOE_DISC_MAXPADR) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   864          MEMCPY(&sc->sc_dest, ethbroadcast.addr, sizeof(sc->sc_dest));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   865          sc->sc_state = PPPOE_STATE_PADI_SENT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   866          sc->sc_padr_retried = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   867          if ((err = pppoe_send_padi(sc)) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   868            PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": failed to send PADI, error=%d\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, err));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   869            LWIP_UNUSED_ARG(err); /* if PPPDEBUG is disabled */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   870          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   871          sys_timeout(PPPOE_DISC_TIMEOUT * (1 + sc->sc_padi_retried), pppoe_timeout, sc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   872          return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   873        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   874        if ((err = pppoe_send_padr(sc)) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   875          sc->sc_padr_retried--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   876          PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": failed to send PADR, error=%d\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, err));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   877          LWIP_UNUSED_ARG(err); /* if PPPDEBUG is disabled */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   878        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   879        sys_timeout(PPPOE_DISC_TIMEOUT * (1 + sc->sc_padr_retried), pppoe_timeout, sc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   880        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   881      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   882        return;  /* all done, work in peace */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   883    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   884  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   885  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   886  /* Start a connection (i.e. initiate discovery phase) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   887  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   888  pppoe_connect(ppp_pcb *ppp, void *ctx)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   889  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   890    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   891    struct pppoe_softc *sc = (struct pppoe_softc *)ctx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   892    lcp_options *lcp_wo;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   893    lcp_options *lcp_ao;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   894  #if PPP_IPV4_SUPPORT && VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   895    ipcp_options *ipcp_wo;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   896    ipcp_options *ipcp_ao;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   897  #endif /* PPP_IPV4_SUPPORT && VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   898  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   899    sc->sc_session = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   900    sc->sc_ac_cookie_len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   901    sc->sc_padi_retried = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   902    sc->sc_padr_retried = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   903    /* changed to real address later */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   904    MEMCPY(&sc->sc_dest, ethbroadcast.addr, sizeof(sc->sc_dest));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   905  #ifdef PPPOE_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   906    /* wait PADI if IFF_PASSIVE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   907    if ((sc->sc_sppp.pp_if.if_flags & IFF_PASSIVE)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   908      return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   909    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   910  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   911  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   912    lcp_wo = &ppp->lcp_wantoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   913    lcp_wo->mru = sc->sc_ethif->mtu-PPPOE_HEADERLEN-2; /* two byte PPP protocol discriminator, then IP data */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   914    lcp_wo->neg_asyncmap = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   915    lcp_wo->neg_pcompression = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   916    lcp_wo->neg_accompression = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   917    lcp_wo->passive = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   918    lcp_wo->silent = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   919  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   920    lcp_ao = &ppp->lcp_allowoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   921    lcp_ao->mru = sc->sc_ethif->mtu-PPPOE_HEADERLEN-2; /* two byte PPP protocol discriminator, then IP data */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   922    lcp_ao->neg_asyncmap = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   923    lcp_ao->neg_pcompression = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   924    lcp_ao->neg_accompression = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   925  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   926  #if PPP_IPV4_SUPPORT && VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   927    ipcp_wo = &ppp->ipcp_wantoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   928    ipcp_wo->neg_vj = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   929    ipcp_wo->old_vj = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   930  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   931    ipcp_ao = &ppp->ipcp_allowoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   932    ipcp_ao->neg_vj = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   933    ipcp_ao->old_vj = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   934  #endif /* PPP_IPV4_SUPPORT && VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   935  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   936    /* save state, in case we fail to send PADI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   937    sc->sc_state = PPPOE_STATE_PADI_SENT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   938    if ((err = pppoe_send_padi(sc)) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   939      PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": failed to send PADI, error=%d\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, err));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   940    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   941    sys_timeout(PPPOE_DISC_TIMEOUT, pppoe_timeout, sc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   942  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   943  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   944  /* disconnect */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   945  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   946  pppoe_disconnect(ppp_pcb *ppp, void *ctx)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   947  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   948    struct pppoe_softc *sc = (struct pppoe_softc *)ctx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   949  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   950    PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": disconnecting\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   951    if (sc->sc_state == PPPOE_STATE_SESSION) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   952      pppoe_send_padt(sc->sc_ethif, sc->sc_session, (const u8_t *)&sc->sc_dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   953    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   954  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   955    /* stop any timer, disconnect can be called while initiating is in progress */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   956    sys_untimeout(pppoe_timeout, sc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   957    sc->sc_state = PPPOE_STATE_INITIAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   958  #ifdef PPPOE_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   959    if (sc->sc_hunique) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   960      mem_free(sc->sc_hunique);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   961      sc->sc_hunique = NULL; /* probably not necessary, if state is initial we shouldn't have to access hunique anyway  */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   962    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   963    sc->sc_hunique_len = 0; /* probably not necessary, if state is initial we shouldn't have to access hunique anyway  */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   964  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   965    ppp_link_end(ppp); /* notify upper layers */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   966    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   967  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   968  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   969  /* Connection attempt aborted */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   970  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   971  pppoe_abort_connect(struct pppoe_softc *sc)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   972  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   973    PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": could not establish connection\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   974    sc->sc_state = PPPOE_STATE_INITIAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   975    ppp_link_failed(sc->pcb); /* notify upper layers */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   976  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   977  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   978  /* Send a PADR packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   979  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   980  pppoe_send_padr(struct pppoe_softc *sc)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   981  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   982    struct pbuf *pb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   983    u8_t *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   984    size_t len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   985  #ifdef PPPOE_TODO
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   986    size_t l1 = 0; /* XXX: gcc */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   987  #endif /* PPPOE_TODO */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   988  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   989    len = 2 + 2 + 2 + 2 + sizeof(sc);    /* service name, host unique */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   990  #ifdef PPPOE_TODO
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   991    if (sc->sc_service_name != NULL) {    /* service name tag maybe empty */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   992      l1 = strlen(sc->sc_service_name);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   993      len += l1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   994    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   995  #endif /* PPPOE_TODO */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   996    if (sc->sc_ac_cookie_len > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   997      len += 2 + 2 + sc->sc_ac_cookie_len;  /* AC cookie */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   998    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	   999    LWIP_ASSERT("sizeof(struct eth_hdr) + PPPOE_HEADERLEN + len <= 0xffff",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1000      sizeof(struct eth_hdr) + PPPOE_HEADERLEN + len <= 0xffff);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1001    pb = pbuf_alloc(PBUF_LINK, (u16_t)(PPPOE_HEADERLEN + len), PBUF_RAM);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1002    if (!pb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1003      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1004    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1005    LWIP_ASSERT("pb->tot_len == pb->len", pb->tot_len == pb->len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1006    p = (u8_t*)pb->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1007    PPPOE_ADD_HEADER(p, PPPOE_CODE_PADR, 0, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1008    PPPOE_ADD_16(p, PPPOE_TAG_SNAME);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1009  #ifdef PPPOE_TODO
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1010    if (sc->sc_service_name != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1011      PPPOE_ADD_16(p, l1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1012      MEMCPY(p, sc->sc_service_name, l1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1013      p += l1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1014    } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1015  #endif /* PPPOE_TODO */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1016    {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1017      PPPOE_ADD_16(p, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1018    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1019    if (sc->sc_ac_cookie_len > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1020      PPPOE_ADD_16(p, PPPOE_TAG_ACCOOKIE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1021      PPPOE_ADD_16(p, sc->sc_ac_cookie_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1022      MEMCPY(p, sc->sc_ac_cookie, sc->sc_ac_cookie_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1023      p += sc->sc_ac_cookie_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1024    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1025    PPPOE_ADD_16(p, PPPOE_TAG_HUNIQUE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1026    PPPOE_ADD_16(p, sizeof(sc));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1027    MEMCPY(p, &sc, sizeof sc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1028  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1029    return pppoe_output(sc, pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1030  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1031  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1032  /* send a PADT packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1033  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1034  pppoe_send_padt(struct netif *outgoing_if, u_int session, const u8_t *dest)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1035  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1036    struct pbuf *pb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1037    struct eth_hdr *ethhdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1038    err_t res;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1039    u8_t *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1040  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1041    pb = pbuf_alloc(PBUF_LINK, (u16_t)(PPPOE_HEADERLEN), PBUF_RAM);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1042    if (!pb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1043      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1044    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1045    LWIP_ASSERT("pb->tot_len == pb->len", pb->tot_len == pb->len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1046  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1047    if (pbuf_add_header(pb, sizeof(struct eth_hdr))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1048      PPPDEBUG(LOG_ERR, ("pppoe: pppoe_send_padt: could not allocate room for PPPoE header\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1049      LINK_STATS_INC(link.lenerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1050      pbuf_free(pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1051      return ERR_BUF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1052    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1053    ethhdr = (struct eth_hdr *)pb->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1054    ethhdr->type = PP_HTONS(ETHTYPE_PPPOEDISC);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1055    MEMCPY(&ethhdr->dest.addr, dest, sizeof(ethhdr->dest.addr));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1056    MEMCPY(&ethhdr->src.addr, &outgoing_if->hwaddr, sizeof(ethhdr->src.addr));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1057  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1058    p = (u8_t*)(ethhdr + 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1059    PPPOE_ADD_HEADER(p, PPPOE_CODE_PADT, session, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1060  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1061    res = outgoing_if->linkoutput(outgoing_if, pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1062  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1063    pbuf_free(pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1064  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1065    return res;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1066  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1067  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1068  #ifdef PPPOE_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1069  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1070  pppoe_send_pado(struct pppoe_softc *sc)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1071  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1072    struct pbuf *pb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1073    u8_t *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1074    size_t len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1075  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1076    /* calc length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1077    len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1078    /* include ac_cookie */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1079    len += 2 + 2 + sizeof(sc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1080    /* include hunique */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1081    len += 2 + 2 + sc->sc_hunique_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1082    pb = pbuf_alloc(PBUF_LINK, (u16_t)(PPPOE_HEADERLEN + len), PBUF_RAM);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1083    if (!pb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1084      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1085    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1086    LWIP_ASSERT("pb->tot_len == pb->len", pb->tot_len == pb->len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1087    p = (u8_t*)pb->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1088    PPPOE_ADD_HEADER(p, PPPOE_CODE_PADO, 0, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1089    PPPOE_ADD_16(p, PPPOE_TAG_ACCOOKIE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1090    PPPOE_ADD_16(p, sizeof(sc));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1091    MEMCPY(p, &sc, sizeof(sc));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1092    p += sizeof(sc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1093    PPPOE_ADD_16(p, PPPOE_TAG_HUNIQUE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1094    PPPOE_ADD_16(p, sc->sc_hunique_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1095    MEMCPY(p, sc->sc_hunique, sc->sc_hunique_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1096    return pppoe_output(sc, pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1097  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1098  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1099  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1100  pppoe_send_pads(struct pppoe_softc *sc)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1101  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1102    struct pbuf *pb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1103    u8_t *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1104    size_t len, l1 = 0;  /* XXX: gcc */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1105  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1106    sc->sc_session = mono_time.tv_sec % 0xff + 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1107    /* calc length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1108    len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1109    /* include hunique */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1110    len += 2 + 2 + 2 + 2 + sc->sc_hunique_len;  /* service name, host unique*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1111    if (sc->sc_service_name != NULL) {    /* service name tag maybe empty */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1112      l1 = strlen(sc->sc_service_name);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1113      len += l1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1114    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1115    pb = pbuf_alloc(PBUF_LINK, (u16_t)(PPPOE_HEADERLEN + len), PBUF_RAM);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1116    if (!pb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1117      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1118    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1119    LWIP_ASSERT("pb->tot_len == pb->len", pb->tot_len == pb->len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1120    p = (u8_t*)pb->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1121    PPPOE_ADD_HEADER(p, PPPOE_CODE_PADS, sc->sc_session, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1122    PPPOE_ADD_16(p, PPPOE_TAG_SNAME);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1123    if (sc->sc_service_name != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1124      PPPOE_ADD_16(p, l1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1125      MEMCPY(p, sc->sc_service_name, l1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1126      p += l1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1127    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1128      PPPOE_ADD_16(p, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1129    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1130    PPPOE_ADD_16(p, PPPOE_TAG_HUNIQUE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1131    PPPOE_ADD_16(p, sc->sc_hunique_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1132    MEMCPY(p, sc->sc_hunique, sc->sc_hunique_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1133    return pppoe_output(sc, pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1134  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1135  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1136  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1137  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1138  pppoe_xmit(struct pppoe_softc *sc, struct pbuf *pb)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1139  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1140    u8_t *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1141    size_t len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1142  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1143    len = pb->tot_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1144  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1145    /* make room for PPPoE header - should not fail */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1146    if (pbuf_add_header(pb, PPPOE_HEADERLEN) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1147      /* bail out */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1148      PPPDEBUG(LOG_ERR, ("pppoe: %c%c%"U16_F": pppoe_xmit: could not allocate room for PPPoE header\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1149      LINK_STATS_INC(link.lenerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1150      pbuf_free(pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1151      return ERR_BUF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1152    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1153  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1154    p = (u8_t*)pb->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1155    PPPOE_ADD_HEADER(p, 0, sc->sc_session, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1156  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1157    return pppoe_output(sc, pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1158  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1159  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1160  #if 0 /*def PFIL_HOOKS*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1161  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1162  pppoe_ifattach_hook(void *arg, struct pbuf **mp, struct netif *ifp, int dir)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1163  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1164    struct pppoe_softc *sc;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1165    int s;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1166  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1167    if (mp != (struct pbuf **)PFIL_IFNET_DETACH) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1168      return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1169    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1170  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1171    LIST_FOREACH(sc, &pppoe_softc_list, sc_list) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1172      if (sc->sc_ethif != ifp) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1173        continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1174      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1175      if (sc->sc_sppp.pp_if.if_flags & IFF_UP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1176        sc->sc_sppp.pp_if.if_flags &= ~(IFF_UP|IFF_RUNNING);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1177        PPPDEBUG(LOG_DEBUG, ("%c%c%"U16_F": ethernet interface detached, going down\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1178            sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1179      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1180      sc->sc_ethif = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1181      pppoe_clear_softc(sc, "ethernet interface detached");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1182    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1183  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1184    return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1185  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1186  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1187  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1188  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1189  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1190  pppoe_clear_softc(struct pppoe_softc *sc, const char *message)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1191  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1192    LWIP_UNUSED_ARG(message);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1193  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1194    /* stop timer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1195    sys_untimeout(pppoe_timeout, sc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1196    PPPDEBUG(LOG_DEBUG, ("pppoe: %c%c%"U16_F": session 0x%x terminated, %s\n", sc->sc_ethif->name[0], sc->sc_ethif->name[1], sc->sc_ethif->num, sc->sc_session, message));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1197    sc->sc_state = PPPOE_STATE_INITIAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1198    ppp_link_end(sc->pcb);  /* notify upper layers - /!\ dangerous /!\ - see pppoe_disc_input() */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1199  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1200  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppoe.c	  1201  #endif /* PPP_SUPPORT && PPPOE_SUPPORT */

	; Module end
