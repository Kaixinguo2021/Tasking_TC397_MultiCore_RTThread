	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\.eap.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Rtl8211f -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\eap.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\eap.src ..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\eap.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\eap.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	733
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\eap.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L5
	.byte	2
	.byte	'int',0,4,5,3
	.word	170
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	177
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	219
	.byte	7
	.word	219
	.byte	8
	.byte	'__cmpswapw',0
	.word	235
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	240
	.byte	9
	.byte	'value',0
	.word	219
	.byte	9
	.byte	'compare',0
	.word	219
	.byte	0,2
	.byte	'short int',0,2,5,10
	.byte	'__wchar_t',0,1,1,1
	.word	297
	.byte	10
	.byte	'__size_t',0,1,1,1
	.word	219
	.byte	10
	.byte	'__ptrdiff_t',0,1,1,1
	.word	170
	.byte	11,1,7
	.word	365
	.byte	10
	.byte	'__codeptr',0,1,1,1
	.word	367
	.byte	10
	.byte	'__intptr_t',0,1,1,1
	.word	170
	.byte	10
	.byte	'__uintptr_t',0,1,1,1
	.word	219
	.byte	2
	.byte	'unsigned char',0,1,8,10
	.byte	'uint8',0,2,108,29
	.word	429
	.byte	2
	.byte	'unsigned short int',0,2,7,10
	.byte	'uint16',0,2,112,29
	.word	460
	.byte	2
	.byte	'unsigned long int',0,4,7,10
	.byte	'uint32',0,2,116,29
	.word	497
	.byte	2
	.byte	'char',0,1,6,10
	.byte	'sint8',0,2,125,29
	.word	533
	.byte	10
	.byte	'sint16',0,2,129,1,29
	.word	297
	.byte	2
	.byte	'long int',0,4,5,10
	.byte	'sint32',0,2,134,1,29
	.word	571
	.byte	2
	.byte	'long long int',0,8,5,10
	.byte	'sint64',0,2,141,1,29
	.word	599
	.byte	2
	.byte	'float',0,4,4,10
	.byte	'float32',0,2,170,1,29
	.word	632
	.byte	12
	.byte	'void',0,7
	.word	658
	.byte	10
	.byte	'pvoid',0,3,54,28
	.word	664
	.byte	10
	.byte	'Ifx_TickTime',0,3,76,28
	.word	599
	.byte	10
	.byte	'u32_t',0,4,87,16
	.word	497
	.byte	10
	.byte	'intmax_t',0,5,198,2,41
	.word	599
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,22,0,3,8,58,15,59,15,57,15,73,19,0,0,11,21,0,54,15,0,0,12,59,0
	.byte	3,8,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\eap.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'cc.h',0,2,0,0
	.byte	'stdint.h',0,3,0,0,0
.L9:
.L7:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	     1  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	     2   * eap.c - Extensible Authentication Protocol for PPP (RFC 2284)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	     3   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	     4   * Copyright (c) 2001 by Sun Microsystems, Inc.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	     5   * All rights reserved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	     6   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	     7   * Non-exclusive rights to redistribute, modify, translate, and use
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	     8   * this software in source and binary forms, in whole or in part, is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	     9   * hereby granted, provided that the above copyright notice is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    10   * duplicated in any source form, and that neither the name of the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    11   * copyright holder nor the author is used to endorse or promote
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    12   * products derived from this software.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    13   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    14   * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    15   * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    16   * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    17   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    18   * Original version by James Carlson
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    19   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    20   * This implementation of EAP supports MD5-Challenge and SRP-SHA1
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    21   * authentication styles.  Note that support of MD5-Challenge is a
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    22   * requirement of RFC 2284, and that it's essentially just a
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    23   * reimplementation of regular RFC 1994 CHAP using EAP messages.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    24   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    25   * As an authenticator ("server"), there are multiple phases for each
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    26   * style.  In the first phase of each style, the unauthenticated peer
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    27   * name is queried using the EAP Identity request type.  If the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    28   * "remotename" option is used, then this phase is skipped, because
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    29   * the peer's name is presumed to be known.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    30   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    31   * For MD5-Challenge, there are two phases, and the second phase
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    32   * consists of sending the challenge itself and handling the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    33   * associated response.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    34   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    35   * For SRP-SHA1, there are four phases.  The second sends 's', 'N',
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    36   * and 'g'.  The reply contains 'A'.  The third sends 'B', and the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    37   * reply contains 'M1'.  The forth sends the 'M2' value.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    38   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    39   * As an authenticatee ("client"), there's just a single phase --
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    40   * responding to the queries generated by the peer.  EAP is an
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    41   * authenticator-driven protocol.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    42   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    43   * Based on draft-ietf-pppext-eap-srp-03.txt.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    44   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    45  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    46  #include "netif/ppp/ppp_opts.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    47  #if PPP_SUPPORT && EAP_SUPPORT  /* don't build if not configured for use in lwipopts.h */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    48  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    49  #include "netif/ppp/ppp_impl.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    50  #include "netif/ppp/eap.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    51  #include "netif/ppp/magic.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    52  #include "netif/ppp/pppcrypt.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    53  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    54  #ifdef USE_SRP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    55  #include <t_pwd.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    56  #include <t_server.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    57  #include <t_client.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    58  #endif /* USE_SRP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    59  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    60  #ifndef SHA_DIGESTSIZE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    61  #define	SHA_DIGESTSIZE 20
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    62  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    63  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    64  #ifdef USE_SRP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    65  static char *pn_secret = NULL;		/* Pseudonym generating secret */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    66  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    67  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    68  #if PPP_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    69  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    70   * Command-line options.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    71   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    72  static option_t eap_option_list[] = {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    73      { "eap-restart", o_int, &eap_states[0].es_server.ea_timeout,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    74        "Set retransmit timeout for EAP Requests (server)" },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    75      { "eap-max-sreq", o_int, &eap_states[0].es_server.ea_maxrequests,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    76        "Set max number of EAP Requests sent (server)" },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    77      { "eap-timeout", o_int, &eap_states[0].es_client.ea_timeout,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    78        "Set time limit for peer EAP authentication" },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    79      { "eap-max-rreq", o_int, &eap_states[0].es_client.ea_maxrequests,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    80        "Set max number of EAP Requests allows (client)" },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    81      { "eap-interval", o_int, &eap_states[0].es_rechallenge,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    82        "Set interval for EAP rechallenge" },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    83  #ifdef USE_SRP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    84      { "srp-interval", o_int, &eap_states[0].es_lwrechallenge,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    85        "Set interval for SRP lightweight rechallenge" },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    86      { "srp-pn-secret", o_string, &pn_secret,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    87        "Long term pseudonym generation secret" },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    88      { "srp-use-pseudonym", o_bool, &eap_states[0].es_usepseudo,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    89        "Use pseudonym if offered one by server", 1 },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    90  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    91      { NULL }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    92  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    93  #endif /* PPP_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    94  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    95  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    96   * Protocol entry points.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    97   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    98  static void eap_init(ppp_pcb *pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	    99  static void eap_input(ppp_pcb *pcb, u_char *inp, int inlen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   100  static void eap_protrej(ppp_pcb *pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   101  static void eap_lowerup(ppp_pcb *pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   102  static void eap_lowerdown(ppp_pcb *pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   103  #if PRINTPKT_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   104  static int  eap_printpkt(const u_char *inp, int inlen,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   105      void (*)(void *arg, const char *fmt, ...), void *arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   106  #endif /* PRINTPKT_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   107  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   108  const struct protent eap_protent = {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   109  	PPP_EAP,		/* protocol number */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   110  	eap_init,		/* initialization procedure */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   111  	eap_input,		/* process a received packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   112  	eap_protrej,		/* process a received protocol-reject */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   113  	eap_lowerup,		/* lower layer has gone up */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   114  	eap_lowerdown,		/* lower layer has gone down */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   115  	NULL,			/* open the protocol */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   116  	NULL,			/* close the protocol */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   117  #if PRINTPKT_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   118  	eap_printpkt,		/* print a packet in readable form */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   119  #endif /* PRINTPKT_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   120  #if PPP_DATAINPUT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   121  	NULL,			/* process a received data packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   122  #endif /* PPP_DATAINPUT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   123  #if PRINTPKT_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   124  	"EAP",			/* text name of protocol */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   125  	NULL,			/* text name of corresponding data protocol */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   126  #endif /* PRINTPKT_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   127  #if PPP_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   128  	eap_option_list,	/* list of command-line options */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   129  	NULL,			/* check requested options; assign defaults */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   130  #endif /* PPP_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   131  #if DEMAND_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   132  	NULL,			/* configure interface for demand-dial */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   133  	NULL			/* say whether to bring up link for this pkt */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   134  #endif /* DEMAND_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   135  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   136  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   137  #ifdef USE_SRP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   138  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   139   * A well-known 2048 bit modulus.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   140   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   141  static const u_char wkmodulus[] = {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   142  	0xAC, 0x6B, 0xDB, 0x41, 0x32, 0x4A, 0x9A, 0x9B,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   143  	0xF1, 0x66, 0xDE, 0x5E, 0x13, 0x89, 0x58, 0x2F,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   144  	0xAF, 0x72, 0xB6, 0x65, 0x19, 0x87, 0xEE, 0x07,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   145  	0xFC, 0x31, 0x92, 0x94, 0x3D, 0xB5, 0x60, 0x50,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   146  	0xA3, 0x73, 0x29, 0xCB, 0xB4, 0xA0, 0x99, 0xED,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   147  	0x81, 0x93, 0xE0, 0x75, 0x77, 0x67, 0xA1, 0x3D,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   148  	0xD5, 0x23, 0x12, 0xAB, 0x4B, 0x03, 0x31, 0x0D,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   149  	0xCD, 0x7F, 0x48, 0xA9, 0xDA, 0x04, 0xFD, 0x50,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   150  	0xE8, 0x08, 0x39, 0x69, 0xED, 0xB7, 0x67, 0xB0,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   151  	0xCF, 0x60, 0x95, 0x17, 0x9A, 0x16, 0x3A, 0xB3,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   152  	0x66, 0x1A, 0x05, 0xFB, 0xD5, 0xFA, 0xAA, 0xE8,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   153  	0x29, 0x18, 0xA9, 0x96, 0x2F, 0x0B, 0x93, 0xB8,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   154  	0x55, 0xF9, 0x79, 0x93, 0xEC, 0x97, 0x5E, 0xEA,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   155  	0xA8, 0x0D, 0x74, 0x0A, 0xDB, 0xF4, 0xFF, 0x74,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   156  	0x73, 0x59, 0xD0, 0x41, 0xD5, 0xC3, 0x3E, 0xA7,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   157  	0x1D, 0x28, 0x1E, 0x44, 0x6B, 0x14, 0x77, 0x3B,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   158  	0xCA, 0x97, 0xB4, 0x3A, 0x23, 0xFB, 0x80, 0x16,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   159  	0x76, 0xBD, 0x20, 0x7A, 0x43, 0x6C, 0x64, 0x81,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   160  	0xF1, 0xD2, 0xB9, 0x07, 0x87, 0x17, 0x46, 0x1A,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   161  	0x5B, 0x9D, 0x32, 0xE6, 0x88, 0xF8, 0x77, 0x48,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   162  	0x54, 0x45, 0x23, 0xB5, 0x24, 0xB0, 0xD5, 0x7D,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   163  	0x5E, 0xA7, 0x7A, 0x27, 0x75, 0xD2, 0xEC, 0xFA,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   164  	0x03, 0x2C, 0xFB, 0xDB, 0xF5, 0x2F, 0xB3, 0x78,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   165  	0x61, 0x60, 0x27, 0x90, 0x04, 0xE5, 0x7A, 0xE6,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   166  	0xAF, 0x87, 0x4E, 0x73, 0x03, 0xCE, 0x53, 0x29,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   167  	0x9C, 0xCC, 0x04, 0x1C, 0x7B, 0xC3, 0x08, 0xD8,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   168  	0x2A, 0x56, 0x98, 0xF3, 0xA8, 0xD0, 0xC3, 0x82,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   169  	0x71, 0xAE, 0x35, 0xF8, 0xE9, 0xDB, 0xFB, 0xB6,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   170  	0x94, 0xB5, 0xC8, 0x03, 0xD8, 0x9F, 0x7A, 0xE4,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   171  	0x35, 0xDE, 0x23, 0x6D, 0x52, 0x5F, 0x54, 0x75,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   172  	0x9B, 0x65, 0xE3, 0x72, 0xFC, 0xD6, 0x8E, 0xF2,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   173  	0x0F, 0xA7, 0x11, 0x1F, 0x9E, 0x4A, 0xFF, 0x73
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   174  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   175  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   176  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   177  #if PPP_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   178  /* Local forward declarations. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   179  static void eap_server_timeout(void *arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   180  #endif /* PPP_SERVER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   181  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   182  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   183   * Convert EAP state code to printable string for debug.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   184   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   185  static const char * eap_state_name(enum eap_state_code esc)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   186  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   187  	static const char *state_names[] = { EAP_STATES };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   188  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   189  	return (state_names[(int)esc]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   190  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   191  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   192  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   193   * eap_init - Initialize state for an EAP user.  This is currently
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   194   * called once by main() during start-up.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   195   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   196  static void eap_init(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   197  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   198  	BZERO(&pcb->eap, sizeof(eap_state));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   199  #if PPP_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   200  	pcb->eap.es_server.ea_id = magic();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   201  #endif /* PPP_SERVER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   202  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   203  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   204  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   205   * eap_client_timeout - Give up waiting for the peer to send any
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   206   * Request messages.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   207   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   208  static void eap_client_timeout(void *arg) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   209  	ppp_pcb *pcb = (ppp_pcb*)arg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   210  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   211  	if (!eap_client_active(pcb))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   212  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   213  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   214  	ppp_error("EAP: timeout waiting for Request from peer");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   215  	auth_withpeer_fail(pcb, PPP_EAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   216  	pcb->eap.es_client.ea_state = eapBadAuth;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   217  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   218  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   219  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   220   * eap_authwithpeer - Authenticate to our peer (behave as client).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   221   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   222   * Start client state and wait for requests.  This is called only
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   223   * after eap_lowerup.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   224   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   225  void eap_authwithpeer(ppp_pcb *pcb, const char *localname) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   226  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   227  	if(NULL == localname)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   228  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   229  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   230  	/* Save the peer name we're given */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   231  	pcb->eap.es_client.ea_name = localname;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   232  	pcb->eap.es_client.ea_namelen = strlen(localname);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   233  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   234  	pcb->eap.es_client.ea_state = eapListen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   235  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   236  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   237  	 * Start a timer so that if the other end just goes
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   238  	 * silent, we don't sit here waiting forever.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   239  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   240  	if (pcb->settings.eap_req_time > 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   241  		TIMEOUT(eap_client_timeout, pcb,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   242  		    pcb->settings.eap_req_time);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   243  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   244  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   245  #if PPP_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   246  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   247   * Format a standard EAP Failure message and send it to the peer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   248   * (Server operation)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   249   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   250  static void eap_send_failure(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   251  	struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   252  	u_char *outp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   253  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   254  	p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_HDRLEN + EAP_HEADERLEN), PPP_CTRL_PBUF_TYPE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   255  	if(NULL == p)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   256  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   257  	if(p->tot_len != p->len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   258  		pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   259  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   260  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   261  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   262  	outp = (u_char*)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   263  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   264  	MAKEHEADER(outp, PPP_EAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   265  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   266  	PUTCHAR(EAP_FAILURE, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   267  	pcb->eap.es_server.ea_id++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   268  	PUTCHAR(pcb->eap.es_server.ea_id, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   269  	PUTSHORT(EAP_HEADERLEN, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   270  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   271  	ppp_write(pcb, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   272  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   273  	pcb->eap.es_server.ea_state = eapBadAuth;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   274  	auth_peer_fail(pcb, PPP_EAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   275  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   276  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   277  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   278   * Format a standard EAP Success message and send it to the peer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   279   * (Server operation)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   280   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   281  static void eap_send_success(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   282  	struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   283  	u_char *outp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   284  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   285  	p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_HDRLEN + EAP_HEADERLEN), PPP_CTRL_PBUF_TYPE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   286  	if(NULL == p)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   287  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   288  	if(p->tot_len != p->len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   289  		pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   290  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   291  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   292  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   293  	outp = (u_char*)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   294      
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   295  	MAKEHEADER(outp, PPP_EAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   296  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   297  	PUTCHAR(EAP_SUCCESS, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   298  	pcb->eap.es_server.ea_id++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   299  	PUTCHAR(pcb->eap.es_server.ea_id, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   300  	PUTSHORT(EAP_HEADERLEN, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   301  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   302  	ppp_write(pcb, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   303  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   304  	auth_peer_success(pcb, PPP_EAP, 0,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   305  	    pcb->eap.es_server.ea_peer, pcb->eap.es_server.ea_peerlen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   306  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   307  #endif /* PPP_SERVER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   308  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   309  #ifdef USE_SRP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   310  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   311   * Set DES key according to pseudonym-generating secret and current
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   312   * date.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   313   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   314  static bool
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   315  pncrypt_setkey(int timeoffs)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   316  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   317  	struct tm *tp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   318  	char tbuf[9];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   319  	SHA1_CTX ctxt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   320  	u_char dig[SHA_DIGESTSIZE];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   321  	time_t reftime;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   322  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   323  	if (pn_secret == NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   324  		return (0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   325  	reftime = time(NULL) + timeoffs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   326  	tp = localtime(&reftime);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   327  	SHA1Init(&ctxt);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   328  	SHA1Update(&ctxt, pn_secret, strlen(pn_secret));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   329  	strftime(tbuf, sizeof (tbuf), "%Y%m%d", tp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   330  	SHA1Update(&ctxt, tbuf, strlen(tbuf));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   331  	SHA1Final(dig, &ctxt);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   332  	/* FIXME: if we want to do SRP, we need to find a way to pass the PolarSSL des_context instead of using static memory */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   333  	return (DesSetkey(dig));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   334  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   335  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   336  static char base64[] =
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   337  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   338  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   339  struct b64state {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   340  	u32_t bs_bits;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   341  	int bs_offs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   342  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   343  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   344  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   345  b64enc(bs, inp, inlen, outp)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   346  struct b64state *bs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   347  u_char *inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   348  int inlen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   349  u_char *outp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   350  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   351  	int outlen = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   352  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   353  	while (inlen > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   354  		bs->bs_bits = (bs->bs_bits << 8) | *inp++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   355  		inlen--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   356  		bs->bs_offs += 8;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   357  		if (bs->bs_offs >= 24) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   358  			*outp++ = base64[(bs->bs_bits >> 18) & 0x3F];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   359  			*outp++ = base64[(bs->bs_bits >> 12) & 0x3F];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   360  			*outp++ = base64[(bs->bs_bits >> 6) & 0x3F];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   361  			*outp++ = base64[bs->bs_bits & 0x3F];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   362  			outlen += 4;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   363  			bs->bs_offs = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   364  			bs->bs_bits = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   365  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   366  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   367  	return (outlen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   368  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   369  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   370  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   371  b64flush(bs, outp)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   372  struct b64state *bs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   373  u_char *outp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   374  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   375  	int outlen = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   376  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   377  	if (bs->bs_offs == 8) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   378  		*outp++ = base64[(bs->bs_bits >> 2) & 0x3F];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   379  		*outp++ = base64[(bs->bs_bits << 4) & 0x3F];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   380  		outlen = 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   381  	} else if (bs->bs_offs == 16) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   382  		*outp++ = base64[(bs->bs_bits >> 10) & 0x3F];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   383  		*outp++ = base64[(bs->bs_bits >> 4) & 0x3F];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   384  		*outp++ = base64[(bs->bs_bits << 2) & 0x3F];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   385  		outlen = 3;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   386  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   387  	bs->bs_offs = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   388  	bs->bs_bits = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   389  	return (outlen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   390  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   391  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   392  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   393  b64dec(bs, inp, inlen, outp)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   394  struct b64state *bs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   395  u_char *inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   396  int inlen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   397  u_char *outp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   398  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   399  	int outlen = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   400  	char *cp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   401  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   402  	while (inlen > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   403  		if ((cp = strchr(base64, *inp++)) == NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   404  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   405  		bs->bs_bits = (bs->bs_bits << 6) | (cp - base64);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   406  		inlen--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   407  		bs->bs_offs += 6;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   408  		if (bs->bs_offs >= 8) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   409  			*outp++ = bs->bs_bits >> (bs->bs_offs - 8);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   410  			outlen++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   411  			bs->bs_offs -= 8;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   412  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   413  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   414  	return (outlen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   415  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   416  #endif /* USE_SRP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   417  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   418  #if PPP_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   419  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   420   * Assume that current waiting server state is complete and figure
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   421   * next state to use based on available authentication data.  'status'
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   422   * indicates if there was an error in handling the last query.  It is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   423   * 0 for success and non-zero for failure.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   424   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   425  static void eap_figure_next_state(ppp_pcb *pcb, int status) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   426  #ifdef USE_SRP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   427  	unsigned char secbuf[MAXSECRETLEN], clear[8], *sp, *dp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   428  	struct t_pw tpw;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   429  	struct t_confent *tce, mytce;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   430  	char *cp, *cp2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   431  	struct t_server *ts;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   432  	int id, i, plen, toffs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   433  	u_char vals[2];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   434  	struct b64state bs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   435  #endif /* USE_SRP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   436  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   437  	pcb->settings.eap_timeout_time = pcb->eap.es_savedtime;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   438  	switch (pcb->eap.es_server.ea_state) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   439  	case eapBadAuth:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   440  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   441  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   442  	case eapIdentify:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   443  #ifdef USE_SRP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   444  		/* Discard any previous session. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   445  		ts = (struct t_server *)pcb->eap.es_server.ea_session;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   446  		if (ts != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   447  			t_serverclose(ts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   448  			pcb->eap.es_server.ea_session = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   449  			pcb->eap.es_server.ea_skey = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   450  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   451  #endif /* USE_SRP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   452  		if (status != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   453  			pcb->eap.es_server.ea_state = eapBadAuth;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   454  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   455  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   456  #ifdef USE_SRP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   457  		/* If we've got a pseudonym, try to decode to real name. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   458  		if (pcb->eap.es_server.ea_peerlen > SRP_PSEUDO_LEN &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   459  		    strncmp(pcb->eap.es_server.ea_peer, SRP_PSEUDO_ID,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   460  			SRP_PSEUDO_LEN) == 0 &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   461  		    (pcb->eap.es_server.ea_peerlen - SRP_PSEUDO_LEN) * 3 / 4 <
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   462  		    sizeof (secbuf)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   463  			BZERO(&bs, sizeof (bs));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   464  			plen = b64dec(&bs,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   465  			    pcb->eap.es_server.ea_peer + SRP_PSEUDO_LEN,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   466  			    pcb->eap.es_server.ea_peerlen - SRP_PSEUDO_LEN,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   467  			    secbuf);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   468  			toffs = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   469  			for (i = 0; i < 5; i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   470  				pncrypt_setkey(toffs);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   471  				toffs -= 86400;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   472  				/* FIXME: if we want to do SRP, we need to find a way to pass the PolarSSL des_context instead of using static memory */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   473  				if (!DesDecrypt(secbuf, clear)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   474  					ppp_dbglog("no DES here; cannot decode "
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   475  					    "pseudonym");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   476  					return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   477  				}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   478  				id = *(unsigned char *)clear;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   479  				if (id + 1 <= plen && id + 9 > plen)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   480  					break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   481  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   482  			if (plen % 8 == 0 && i < 5) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   483  				/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   484  				 * Note that this is always shorter than the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   485  				 * original stored string, so there's no need
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   486  				 * to realloc.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   487  				 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   488  				if ((i = plen = *(unsigned char *)clear) > 7)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   489  					i = 7;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   490  				pcb->eap.es_server.ea_peerlen = plen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   491  				dp = (unsigned char *)pcb->eap.es_server.ea_peer;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   492  				MEMCPY(dp, clear + 1, i);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   493  				plen -= i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   494  				dp += i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   495  				sp = secbuf + 8;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   496  				while (plen > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   497  					/* FIXME: if we want to do SRP, we need to find a way to pass the PolarSSL des_context instead of using static memory */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   498  					(void) DesDecrypt(sp, dp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   499  					sp += 8;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   500  					dp += 8;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   501  					plen -= 8;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   502  				}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   503  				pcb->eap.es_server.ea_peer[
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   504  					pcb->eap.es_server.ea_peerlen] = '\0';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   505  				ppp_dbglog("decoded pseudonym to \"%.*q\"",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   506  				    pcb->eap.es_server.ea_peerlen,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   507  				    pcb->eap.es_server.ea_peer);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   508  			} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   509  				ppp_dbglog("failed to decode real name");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   510  				/* Stay in eapIdentfy state; requery */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   511  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   512  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   513  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   514  		/* Look up user in secrets database. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   515  		if (get_srp_secret(pcb->eap.es_unit, pcb->eap.es_server.ea_peer,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   516  		    pcb->eap.es_server.ea_name, (char *)secbuf, 1) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   517  			/* Set up default in case SRP entry is bad */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   518  			pcb->eap.es_server.ea_state = eapMD5Chall;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   519  			/* Get t_confent based on index in srp-secrets */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   520  			id = strtol((char *)secbuf, &cp, 10);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   521  			if (*cp++ != ':' || id < 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   522  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   523  			if (id == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   524  				mytce.index = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   525  				mytce.modulus.data = (u_char *)wkmodulus;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   526  				mytce.modulus.len = sizeof (wkmodulus);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   527  				mytce.generator.data = (u_char *)"\002";
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   528  				mytce.generator.len = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   529  				tce = &mytce;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   530  			} else if ((tce = gettcid(id)) != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   531  				/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   532  				 * Client will have to verify this modulus/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   533  				 * generator combination, and that will take
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   534  				 * a while.  Lengthen the timeout here.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   535  				 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   536  				if (pcb->settings.eap_timeout_time > 0 &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   537  				    pcb->settings.eap_timeout_time < 30)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   538  					pcb->settings.eap_timeout_time = 30;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   539  			} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   540  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   541  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   542  			if ((cp2 = strchr(cp, ':')) == NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   543  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   544  			*cp2++ = '\0';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   545  			tpw.pebuf.name = pcb->eap.es_server.ea_peer;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   546  			tpw.pebuf.password.len = t_fromb64((char *)tpw.pwbuf,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   547  			    cp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   548  			tpw.pebuf.password.data = tpw.pwbuf;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   549  			tpw.pebuf.salt.len = t_fromb64((char *)tpw.saltbuf,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   550  			    cp2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   551  			tpw.pebuf.salt.data = tpw.saltbuf;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   552  			if ((ts = t_serveropenraw(&tpw.pebuf, tce)) == NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   553  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   554  			pcb->eap.es_server.ea_session = (void *)ts;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   555  			pcb->eap.es_server.ea_state = eapSRP1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   556  			vals[0] = pcb->eap.es_server.ea_id + 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   557  			vals[1] = EAPT_SRP;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   558  			t_serveraddexdata(ts, vals, 2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   559  			/* Generate B; must call before t_servergetkey() */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   560  			t_servergenexp(ts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   561  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   562  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   563  #endif /* USE_SRP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   564  		pcb->eap.es_server.ea_state = eapMD5Chall;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   565  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   566  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   567  	case eapSRP1:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   568  #ifdef USE_SRP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   569  		ts = (struct t_server *)pcb->eap.es_server.ea_session;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   570  		if (ts != NULL && status != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   571  			t_serverclose(ts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   572  			pcb->eap.es_server.ea_session = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   573  			pcb->eap.es_server.ea_skey = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   574  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   575  #endif /* USE_SRP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   576  		if (status == 1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   577  			pcb->eap.es_server.ea_state = eapMD5Chall;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   578  		} else if (status != 0 || pcb->eap.es_server.ea_session == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   579  			pcb->eap.es_server.ea_state = eapBadAuth;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   580  		} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   581  			pcb->eap.es_server.ea_state = eapSRP2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   582  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   583  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   584  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   585  	case eapSRP2:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   586  #ifdef USE_SRP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   587  		ts = (struct t_server *)pcb->eap.es_server.ea_session;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   588  		if (ts != NULL && status != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   589  			t_serverclose(ts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   590  			pcb->eap.es_server.ea_session = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   591  			pcb->eap.es_server.ea_skey = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   592  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   593  #endif /* USE_SRP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   594  		if (status != 0 || pcb->eap.es_server.ea_session == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   595  			pcb->eap.es_server.ea_state = eapBadAuth;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   596  		} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   597  			pcb->eap.es_server.ea_state = eapSRP3;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   598  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   599  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   600  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   601  	case eapSRP3:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   602  	case eapSRP4:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   603  #ifdef USE_SRP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   604  		ts = (struct t_server *)pcb->eap.es_server.ea_session;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   605  		if (ts != NULL && status != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   606  			t_serverclose(ts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   607  			pcb->eap.es_server.ea_session = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   608  			pcb->eap.es_server.ea_skey = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   609  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   610  #endif /* USE_SRP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   611  		if (status != 0 || pcb->eap.es_server.ea_session == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   612  			pcb->eap.es_server.ea_state = eapBadAuth;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   613  		} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   614  			pcb->eap.es_server.ea_state = eapOpen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   615  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   616  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   617  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   618  	case eapMD5Chall:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   619  		if (status != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   620  			pcb->eap.es_server.ea_state = eapBadAuth;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   621  		} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   622  			pcb->eap.es_server.ea_state = eapOpen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   623  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   624  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   625  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   626  	default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   627  		pcb->eap.es_server.ea_state = eapBadAuth;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   628  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   629  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   630  	if (pcb->eap.es_server.ea_state == eapBadAuth)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   631  		eap_send_failure(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   632  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   633  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   634  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   635   * Format an EAP Request message and send it to the peer.  Message
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   636   * type depends on current state.  (Server operation)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   637   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   638  static void eap_send_request(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   639  	struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   640  	u_char *outp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   641  	u_char *lenloc;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   642  	int outlen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   643  	int len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   644  	const char *str;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   645  #ifdef USE_SRP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   646  	struct t_server *ts;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   647  	u_char clear[8], cipher[8], dig[SHA_DIGESTSIZE], *optr, *cp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   648  	int i, j;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   649  	struct b64state b64;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   650  	SHA1_CTX ctxt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   651  #endif /* USE_SRP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   652  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   653  	/* Handle both initial auth and restart */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   654  	if (pcb->eap.es_server.ea_state < eapIdentify &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   655  	    pcb->eap.es_server.ea_state != eapInitial) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   656  		pcb->eap.es_server.ea_state = eapIdentify;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   657  #if PPP_REMOTENAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   658  		if (pcb->settings.explicit_remote && pcb->remote_name) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   659  			/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   660  			 * If we already know the peer's
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   661  			 * unauthenticated name, then there's no
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   662  			 * reason to ask.  Go to next state instead.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   663  			 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   664  			int len = (int)strlen(pcb->remote_name);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   665  			if (len > MAXNAMELEN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   666  				len = MAXNAMELEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   667  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   668  			MEMCPY(pcb->eap.es_server.ea_peer, pcb->remote_name, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   669  			pcb->eap.es_server.ea_peer[len] = '\0';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   670  			pcb->eap.es_server.ea_peerlen = len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   671  			eap_figure_next_state(pcb, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   672  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   673  #endif /* PPP_REMOTENAME */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   674  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   675  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   676  	if (pcb->settings.eap_max_transmits > 0 &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   677  	    pcb->eap.es_server.ea_requests >= pcb->settings.eap_max_transmits) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   678  		if (pcb->eap.es_server.ea_responses > 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   679  			ppp_error("EAP: too many Requests sent");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   680  		else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   681  			ppp_error("EAP: no response to Requests");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   682  		eap_send_failure(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   683  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   684  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   685  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   686  	p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_CTRL_PBUF_MAX_SIZE), PPP_CTRL_PBUF_TYPE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   687  	if(NULL == p)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   688  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   689  	if(p->tot_len != p->len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   690  		pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   691  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   692  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   693  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   694  	outp = (u_char*)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   695      
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   696  	MAKEHEADER(outp, PPP_EAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   697  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   698  	PUTCHAR(EAP_REQUEST, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   699  	PUTCHAR(pcb->eap.es_server.ea_id, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   700  	lenloc = outp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   701  	INCPTR(2, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   702  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   703  	switch (pcb->eap.es_server.ea_state) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   704  	case eapIdentify:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   705  		PUTCHAR(EAPT_IDENTITY, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   706  		str = "Name";
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   707  		len = strlen(str);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   708  		MEMCPY(outp, str, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   709  		INCPTR(len, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   710  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   711  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   712  	case eapMD5Chall:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   713  		PUTCHAR(EAPT_MD5CHAP, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   714  		/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   715  		 * pick a random challenge length between
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   716  		 * EAP_MIN_CHALLENGE_LENGTH and EAP_MAX_CHALLENGE_LENGTH
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   717  		 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   718  		pcb->eap.es_challen = EAP_MIN_CHALLENGE_LENGTH +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   719  		    magic_pow(EAP_MIN_MAX_POWER_OF_TWO_CHALLENGE_LENGTH);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   720  		PUTCHAR(pcb->eap.es_challen, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   721  		magic_random_bytes(pcb->eap.es_challenge, pcb->eap.es_challen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   722  		MEMCPY(outp, pcb->eap.es_challenge, pcb->eap.es_challen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   723  		INCPTR(pcb->eap.es_challen, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   724  		MEMCPY(outp, pcb->eap.es_server.ea_name, pcb->eap.es_server.ea_namelen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   725  		INCPTR(pcb->eap.es_server.ea_namelen, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   726  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   727  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   728  #ifdef USE_SRP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   729  	case eapSRP1:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   730  		PUTCHAR(EAPT_SRP, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   731  		PUTCHAR(EAPSRP_CHALLENGE, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   732  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   733  		PUTCHAR(pcb->eap.es_server.ea_namelen, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   734  		MEMCPY(outp, pcb->eap.es_server.ea_name, pcb->eap.es_server.ea_namelen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   735  		INCPTR(pcb->eap.es_server.ea_namelen, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   736  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   737  		ts = (struct t_server *)pcb->eap.es_server.ea_session;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   738  		assert(ts != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   739  		PUTCHAR(ts->s.len, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   740  		MEMCPY(outp, ts->s.data, ts->s.len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   741  		INCPTR(ts->s.len, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   742  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   743  		if (ts->g.len == 1 && ts->g.data[0] == 2) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   744  			PUTCHAR(0, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   745  		} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   746  			PUTCHAR(ts->g.len, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   747  			MEMCPY(outp, ts->g.data, ts->g.len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   748  			INCPTR(ts->g.len, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   749  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   750  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   751  		if (ts->n.len != sizeof (wkmodulus) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   752  		    BCMP(ts->n.data, wkmodulus, sizeof (wkmodulus)) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   753  			MEMCPY(outp, ts->n.data, ts->n.len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   754  			INCPTR(ts->n.len, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   755  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   756  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   757  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   758  	case eapSRP2:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   759  		PUTCHAR(EAPT_SRP, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   760  		PUTCHAR(EAPSRP_SKEY, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   761  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   762  		ts = (struct t_server *)pcb->eap.es_server.ea_session;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   763  		assert(ts != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   764  		MEMCPY(outp, ts->B.data, ts->B.len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   765  		INCPTR(ts->B.len, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   766  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   767  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   768  	case eapSRP3:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   769  		PUTCHAR(EAPT_SRP, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   770  		PUTCHAR(EAPSRP_SVALIDATOR, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   771  		PUTLONG(SRPVAL_EBIT, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   772  		ts = (struct t_server *)pcb->eap.es_server.ea_session;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   773  		assert(ts != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   774  		MEMCPY(outp, t_serverresponse(ts), SHA_DIGESTSIZE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   775  		INCPTR(SHA_DIGESTSIZE, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   776  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   777  		if (pncrypt_setkey(0)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   778  			/* Generate pseudonym */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   779  			optr = outp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   780  			cp = (unsigned char *)pcb->eap.es_server.ea_peer;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   781  			if ((j = i = pcb->eap.es_server.ea_peerlen) > 7)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   782  				j = 7;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   783  			clear[0] = i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   784  			MEMCPY(clear + 1, cp, j);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   785  			i -= j;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   786  			cp += j;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   787  			/* FIXME: if we want to do SRP, we need to find a way to pass the PolarSSL des_context instead of using static memory */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   788  			if (!DesEncrypt(clear, cipher)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   789  				ppp_dbglog("no DES here; not generating pseudonym");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   790  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   791  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   792  			BZERO(&b64, sizeof (b64));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   793  			outp++;		/* space for pseudonym length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   794  			outp += b64enc(&b64, cipher, 8, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   795  			while (i >= 8) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   796  				/* FIXME: if we want to do SRP, we need to find a way to pass the PolarSSL des_context instead of using static memory */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   797  				(void) DesEncrypt(cp, cipher);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   798  				outp += b64enc(&b64, cipher, 8, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   799  				cp += 8;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   800  				i -= 8;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   801  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   802  			if (i > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   803  				MEMCPY(clear, cp, i);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   804  				cp += i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   805  				magic_random_bytes(cp, 8-i);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   806  				/* FIXME: if we want to do SRP, we need to find a way to pass the PolarSSL des_context instead of using static memory */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   807  				(void) DesEncrypt(clear, cipher);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   808  				outp += b64enc(&b64, cipher, 8, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   809  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   810  			outp += b64flush(&b64, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   811  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   812  			/* Set length and pad out to next 20 octet boundary */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   813  			i = outp - optr - 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   814  			*optr = i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   815  			i %= SHA_DIGESTSIZE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   816  			if (i != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   817  				magic_random_bytes(outp, SHA_DIGESTSIZE-i);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   818  				INCPTR(SHA_DIGESTSIZE-i, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   819  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   820  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   821  			/* Obscure the pseudonym with SHA1 hash */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   822  			SHA1Init(&ctxt);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   823  			SHA1Update(&ctxt, &pcb->eap.es_server.ea_id, 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   824  			SHA1Update(&ctxt, pcb->eap.es_server.ea_skey,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   825  			    SESSION_KEY_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   826  			SHA1Update(&ctxt, pcb->eap.es_server.ea_peer,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   827  			    pcb->eap.es_server.ea_peerlen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   828  			while (optr < outp) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   829  				SHA1Final(dig, &ctxt);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   830  				cp = dig;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   831  				while (cp < dig + SHA_DIGESTSIZE)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   832  					*optr++ ^= *cp++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   833  				SHA1Init(&ctxt);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   834  				SHA1Update(&ctxt, &pcb->eap.es_server.ea_id, 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   835  				SHA1Update(&ctxt, pcb->eap.es_server.ea_skey,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   836  				    SESSION_KEY_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   837  				SHA1Update(&ctxt, optr - SHA_DIGESTSIZE,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   838  				    SHA_DIGESTSIZE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   839  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   840  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   841  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   842  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   843  	case eapSRP4:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   844  		PUTCHAR(EAPT_SRP, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   845  		PUTCHAR(EAPSRP_LWRECHALLENGE, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   846  		pcb->eap.es_challen = EAP_MIN_CHALLENGE_LENGTH +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   847  		    magic_pow(EAP_MIN_MAX_POWER_OF_TWO_CHALLENGE_LENGTH);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   848  		magic_random_bytes(pcb->eap.es_challenge, pcb->eap.es_challen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   849  		MEMCPY(outp, pcb->eap.es_challenge, pcb->eap.es_challen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   850  		INCPTR(pcb->eap.es_challen, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   851  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   852  #endif /* USE_SRP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   853  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   854  	default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   855  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   856  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   857  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   858  	outlen = (outp - (unsigned char*)p->payload) - PPP_HDRLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   859  	PUTSHORT(outlen, lenloc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   860  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   861  	pbuf_realloc(p, outlen + PPP_HDRLEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   862  	ppp_write(pcb, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   863  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   864  	pcb->eap.es_server.ea_requests++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   865  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   866  	if (pcb->settings.eap_timeout_time > 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   867  		TIMEOUT(eap_server_timeout, pcb, pcb->settings.eap_timeout_time);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   868  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   869  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   870  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   871   * eap_authpeer - Authenticate our peer (behave as server).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   872   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   873   * Start server state and send first request.  This is called only
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   874   * after eap_lowerup.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   875   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   876  void eap_authpeer(ppp_pcb *pcb, const char *localname) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   877  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   878  	/* Save the name we're given. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   879  	pcb->eap.es_server.ea_name = localname;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   880  	pcb->eap.es_server.ea_namelen = strlen(localname);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   881  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   882  	pcb->eap.es_savedtime = pcb->settings.eap_timeout_time;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   883  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   884  	/* Lower layer up yet? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   885  	if (pcb->eap.es_server.ea_state == eapInitial ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   886  	    pcb->eap.es_server.ea_state == eapPending) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   887  		pcb->eap.es_server.ea_state = eapPending;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   888  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   889  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   890  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   891  	pcb->eap.es_server.ea_state = eapPending;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   892  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   893  	/* ID number not updated here intentionally; hashed into M1 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   894  	eap_send_request(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   895  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   896  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   897  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   898   * eap_server_timeout - Retransmission timer for sending Requests
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   899   * expired.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   900   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   901  static void eap_server_timeout(void *arg) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   902  	ppp_pcb *pcb = (ppp_pcb*)arg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   903  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   904  	if (!eap_server_active(pcb))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   905  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   906  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   907  	/* EAP ID number must not change on timeout. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   908  	eap_send_request(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   909  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   910  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   911  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   912   * When it's time to send rechallenge the peer, this timeout is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   913   * called.  Once the rechallenge is successful, the response handler
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   914   * will restart the timer.  If it fails, then the link is dropped.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   915   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   916  static void eap_rechallenge(void *arg) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   917  	ppp_pcb *pcb = (ppp_pcb*)arg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   918  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   919  	if (pcb->eap.es_server.ea_state != eapOpen &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   920  	    pcb->eap.es_server.ea_state != eapSRP4)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   921  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   922  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   923  	pcb->eap.es_server.ea_requests = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   924  	pcb->eap.es_server.ea_state = eapIdentify;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   925  	eap_figure_next_state(pcb, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   926  	pcb->eap.es_server.ea_id++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   927  	eap_send_request(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   928  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   929  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   930  static void srp_lwrechallenge(void *arg) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   931  	ppp_pcb *pcb = (ppp_pcb*)arg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   932  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   933  	if (pcb->eap.es_server.ea_state != eapOpen ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   934  	    pcb->eap.es_server.ea_type != EAPT_SRP)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   935  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   936  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   937  	pcb->eap.es_server.ea_requests = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   938  	pcb->eap.es_server.ea_state = eapSRP4;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   939  	pcb->eap.es_server.ea_id++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   940  	eap_send_request(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   941  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   942  #endif /* PPP_SERVER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   943  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   944  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   945   * eap_lowerup - The lower layer is now up.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   946   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   947   * This is called before either eap_authpeer or eap_authwithpeer.  See
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   948   * link_established() in auth.c.  All that's necessary here is to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   949   * return to closed state so that those two routines will do the right
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   950   * thing.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   951   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   952  static void eap_lowerup(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   953  	pcb->eap.es_client.ea_state = eapClosed;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   954  #if PPP_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   955  	pcb->eap.es_server.ea_state = eapClosed;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   956  #endif /* PPP_SERVER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   957  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   958  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   959  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   960   * eap_lowerdown - The lower layer is now down.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   961   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   962   * Cancel all timeouts and return to initial state.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   963   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   964  static void eap_lowerdown(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   965  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   966  	if (eap_client_active(pcb) && pcb->settings.eap_req_time > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   967  		UNTIMEOUT(eap_client_timeout, pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   968  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   969  #if PPP_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   970  	if (eap_server_active(pcb)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   971  		if (pcb->settings.eap_timeout_time > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   972  			UNTIMEOUT(eap_server_timeout, pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   973  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   974  	} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   975  		if ((pcb->eap.es_server.ea_state == eapOpen ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   976  		    pcb->eap.es_server.ea_state == eapSRP4) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   977  		    pcb->eap.es_rechallenge > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   978  			UNTIMEOUT(eap_rechallenge, (void *)pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   979  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   980  		if (pcb->eap.es_server.ea_state == eapOpen &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   981  		    pcb->eap.es_lwrechallenge > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   982  			UNTIMEOUT(srp_lwrechallenge, (void *)pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   983  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   984  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   985  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   986  	pcb->eap.es_client.ea_state = pcb->eap.es_server.ea_state = eapInitial;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   987  	pcb->eap.es_client.ea_requests = pcb->eap.es_server.ea_requests = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   988  #endif /* PPP_SERVER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   989  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   990  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   991  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   992   * eap_protrej - Peer doesn't speak this protocol.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   993   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   994   * This shouldn't happen.  If it does, it represents authentication
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   995   * failure.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   996   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   997  static void eap_protrej(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   998  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	   999  	if (eap_client_active(pcb)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1000  		ppp_error("EAP authentication failed due to Protocol-Reject");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1001  		auth_withpeer_fail(pcb, PPP_EAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1002  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1003  #if PPP_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1004  	if (eap_server_active(pcb)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1005  		ppp_error("EAP authentication of peer failed on Protocol-Reject");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1006  		auth_peer_fail(pcb, PPP_EAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1007  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1008  #endif /* PPP_SERVER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1009  	eap_lowerdown(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1010  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1011  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1012  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1013   * Format and send a regular EAP Response message.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1014   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1015  static void eap_send_response(ppp_pcb *pcb, u_char id, u_char typenum, const u_char *str, int lenstr) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1016  	struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1017  	u_char *outp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1018  	int msglen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1019  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1020  	msglen = EAP_HEADERLEN + sizeof (u_char) + lenstr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1021  	p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_HDRLEN + msglen), PPP_CTRL_PBUF_TYPE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1022  	if(NULL == p)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1023  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1024  	if(p->tot_len != p->len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1025  		pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1026  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1027  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1028  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1029  	outp = (u_char*)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1030  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1031  	MAKEHEADER(outp, PPP_EAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1032  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1033  	PUTCHAR(EAP_RESPONSE, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1034  	PUTCHAR(id, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1035  	pcb->eap.es_client.ea_id = id;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1036  	PUTSHORT(msglen, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1037  	PUTCHAR(typenum, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1038  	if (lenstr > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1039  		MEMCPY(outp, str, lenstr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1040  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1041  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1042  	ppp_write(pcb, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1043  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1044  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1045  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1046   * Format and send an MD5-Challenge EAP Response message.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1047   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1048  static void eap_chap_response(ppp_pcb *pcb, u_char id, u_char *hash, const char *name, int namelen) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1049  	struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1050  	u_char *outp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1051  	int msglen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1052  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1053  	msglen = EAP_HEADERLEN + 2 * sizeof (u_char) + MD5_SIGNATURE_SIZE +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1054  	    namelen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1055  	p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_HDRLEN + msglen), PPP_CTRL_PBUF_TYPE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1056  	if(NULL == p)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1057  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1058  	if(p->tot_len != p->len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1059  		pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1060  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1061  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1062  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1063  	outp = (u_char*)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1064      
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1065  	MAKEHEADER(outp, PPP_EAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1066  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1067  	PUTCHAR(EAP_RESPONSE, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1068  	PUTCHAR(id, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1069  	pcb->eap.es_client.ea_id = id;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1070  	PUTSHORT(msglen, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1071  	PUTCHAR(EAPT_MD5CHAP, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1072  	PUTCHAR(MD5_SIGNATURE_SIZE, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1073  	MEMCPY(outp, hash, MD5_SIGNATURE_SIZE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1074  	INCPTR(MD5_SIGNATURE_SIZE, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1075  	if (namelen > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1076  		MEMCPY(outp, name, namelen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1077  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1078  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1079  	ppp_write(pcb, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1080  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1081  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1082  #ifdef USE_SRP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1083  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1084   * Format and send a SRP EAP Response message.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1085   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1086  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1087  eap_srp_response(esp, id, subtypenum, str, lenstr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1088  eap_state *esp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1089  u_char id;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1090  u_char subtypenum;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1091  u_char *str;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1092  int lenstr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1093  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1094  	ppp_pcb *pcb = &ppp_pcb_list[pcb->eap.es_unit];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1095  	struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1096  	u_char *outp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1097  	int msglen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1098  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1099  	msglen = EAP_HEADERLEN + 2 * sizeof (u_char) + lenstr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1100  	p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_HDRLEN + msglen), PPP_CTRL_PBUF_TYPE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1101  	if(NULL == p)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1102  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1103  	if(p->tot_len != p->len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1104  		pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1105  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1106  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1107  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1108  	outp = p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1109  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1110  	MAKEHEADER(outp, PPP_EAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1111  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1112  	PUTCHAR(EAP_RESPONSE, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1113  	PUTCHAR(id, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1114  	pcb->eap.es_client.ea_id = id;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1115  	PUTSHORT(msglen, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1116  	PUTCHAR(EAPT_SRP, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1117  	PUTCHAR(subtypenum, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1118  	if (lenstr > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1119  		MEMCPY(outp, str, lenstr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1120  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1121  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1122  	ppp_write(pcb, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1123  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1124  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1125  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1126   * Format and send a SRP EAP Client Validator Response message.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1127   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1128  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1129  eap_srpval_response(esp, id, flags, str)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1130  eap_state *esp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1131  u_char id;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1132  u32_t flags;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1133  u_char *str;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1134  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1135  	ppp_pcb *pcb = &ppp_pcb_list[pcb->eap.es_unit];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1136  	struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1137  	u_char *outp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1138  	int msglen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1139  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1140  	msglen = EAP_HEADERLEN + 2 * sizeof (u_char) + sizeof (u32_t) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1141  	    SHA_DIGESTSIZE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1142  	p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_HDRLEN + msglen), PPP_CTRL_PBUF_TYPE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1143  	if(NULL == p)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1144  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1145  	if(p->tot_len != p->len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1146  		pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1147  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1148  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1149  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1150  	outp = p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1151  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1152  	MAKEHEADER(outp, PPP_EAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1153  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1154  	PUTCHAR(EAP_RESPONSE, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1155  	PUTCHAR(id, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1156  	pcb->eap.es_client.ea_id = id;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1157  	PUTSHORT(msglen, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1158  	PUTCHAR(EAPT_SRP, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1159  	PUTCHAR(EAPSRP_CVALIDATOR, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1160  	PUTLONG(flags, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1161  	MEMCPY(outp, str, SHA_DIGESTSIZE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1162  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1163  	ppp_write(pcb, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1164  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1165  #endif /* USE_SRP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1166  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1167  static void eap_send_nak(ppp_pcb *pcb, u_char id, u_char type) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1168  	struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1169  	u_char *outp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1170  	int msglen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1171  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1172  	msglen = EAP_HEADERLEN + 2 * sizeof (u_char);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1173  	p = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_HDRLEN + msglen), PPP_CTRL_PBUF_TYPE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1174  	if(NULL == p)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1175  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1176  	if(p->tot_len != p->len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1177  		pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1178  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1179  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1180  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1181  	outp = (u_char*)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1182  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1183  	MAKEHEADER(outp, PPP_EAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1184  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1185  	PUTCHAR(EAP_RESPONSE, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1186  	PUTCHAR(id, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1187  	pcb->eap.es_client.ea_id = id;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1188  	PUTSHORT(msglen, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1189  	PUTCHAR(EAPT_NAK, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1190  	PUTCHAR(type, outp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1191  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1192  	ppp_write(pcb, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1193  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1194  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1195  #ifdef USE_SRP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1196  static char *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1197  name_of_pn_file()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1198  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1199  	char *user, *path, *file;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1200  	struct passwd *pw;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1201  	size_t pl;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1202  	static bool pnlogged = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1203  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1204  	pw = getpwuid(getuid());
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1205  	if (pw == NULL || (user = pw->pw_dir) == NULL || user[0] == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1206  		errno = EINVAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1207  		return (NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1208  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1209  	file = _PATH_PSEUDONYM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1210  	pl = strlen(user) + strlen(file) + 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1211  	path = malloc(pl);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1212  	if (path == NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1213  		return (NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1214  	(void) slprintf(path, pl, "%s/%s", user, file);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1215  	if (!pnlogged) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1216  		ppp_dbglog("pseudonym file: %s", path);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1217  		pnlogged = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1218  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1219  	return (path);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1220  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1221  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1222  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1223  open_pn_file(modebits)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1224  mode_t modebits;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1225  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1226  	char *path;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1227  	int fd, err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1228  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1229  	if ((path = name_of_pn_file()) == NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1230  		return (-1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1231  	fd = open(path, modebits, S_IRUSR | S_IWUSR);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1232  	err = errno;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1233  	free(path);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1234  	errno = err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1235  	return (fd);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1236  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1237  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1238  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1239  remove_pn_file()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1240  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1241  	char *path;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1242  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1243  	if ((path = name_of_pn_file()) != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1244  		(void) unlink(path);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1245  		(void) free(path);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1246  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1247  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1248  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1249  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1250  write_pseudonym(esp, inp, len, id)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1251  eap_state *esp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1252  u_char *inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1253  int len, id;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1254  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1255  	u_char val;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1256  	u_char *datp, *digp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1257  	SHA1_CTX ctxt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1258  	u_char dig[SHA_DIGESTSIZE];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1259  	int dsize, fd, olen = len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1260  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1261  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1262  	 * Do the decoding by working backwards.  This eliminates the need
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1263  	 * to save the decoded output in a separate buffer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1264  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1265  	val = id;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1266  	while (len > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1267  		if ((dsize = len % SHA_DIGESTSIZE) == 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1268  			dsize = SHA_DIGESTSIZE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1269  		len -= dsize;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1270  		datp = inp + len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1271  		SHA1Init(&ctxt);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1272  		SHA1Update(&ctxt, &val, 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1273  		SHA1Update(&ctxt, pcb->eap.es_client.ea_skey, SESSION_KEY_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1274  		if (len > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1275  			SHA1Update(&ctxt, datp, SHA_DIGESTSIZE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1276  		} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1277  			SHA1Update(&ctxt, pcb->eap.es_client.ea_name,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1278  			    pcb->eap.es_client.ea_namelen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1279  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1280  		SHA1Final(dig, &ctxt);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1281  		for (digp = dig; digp < dig + SHA_DIGESTSIZE; digp++)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1282  			*datp++ ^= *digp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1283  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1284  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1285  	/* Now check that the result is sane */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1286  	if (olen <= 0 || *inp + 1 > olen) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1287  		ppp_dbglog("EAP: decoded pseudonym is unusable <%.*B>", olen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1288  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1289  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1290  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1291  	/* Save it away */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1292  	fd = open_pn_file(O_WRONLY | O_CREAT | O_TRUNC);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1293  	if (fd < 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1294  		ppp_dbglog("EAP: error saving pseudonym: %m");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1295  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1296  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1297  	len = write(fd, inp + 1, *inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1298  	if (close(fd) != -1 && len == *inp) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1299  		ppp_dbglog("EAP: saved pseudonym");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1300  		pcb->eap.es_usedpseudo = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1301  	} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1302  		ppp_dbglog("EAP: failed to save pseudonym");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1303  		remove_pn_file();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1304  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1305  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1306  #endif /* USE_SRP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1307  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1308  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1309   * eap_request - Receive EAP Request message (client mode).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1310   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1311  static void eap_request(ppp_pcb *pcb, u_char *inp, int id, int len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1312  	u_char typenum;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1313  	u_char vallen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1314  	int secret_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1315  	char secret[MAXSECRETLEN];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1316  	char rhostname[MAXNAMELEN];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1317  	lwip_md5_context mdContext;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1318  	u_char hash[MD5_SIGNATURE_SIZE];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1319  #ifdef USE_SRP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1320  	struct t_client *tc;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1321  	struct t_num sval, gval, Nval, *Ap, Bval;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1322  	u_char vals[2];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1323  	SHA1_CTX ctxt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1324  	u_char dig[SHA_DIGESTSIZE];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1325  	int fd;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1326  #endif /* USE_SRP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1327  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1328  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1329  	 * Note: we update es_client.ea_id *only if* a Response
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1330  	 * message is being generated.  Otherwise, we leave it the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1331  	 * same for duplicate detection purposes.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1332  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1333  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1334  	pcb->eap.es_client.ea_requests++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1335  	if (pcb->settings.eap_allow_req != 0 &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1336  	    pcb->eap.es_client.ea_requests > pcb->settings.eap_allow_req) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1337  		ppp_info("EAP: received too many Request messages");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1338  		if (pcb->settings.eap_req_time > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1339  			UNTIMEOUT(eap_client_timeout, pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1340  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1341  		auth_withpeer_fail(pcb, PPP_EAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1342  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1343  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1344  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1345  	if (len <= 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1346  		ppp_error("EAP: empty Request message discarded");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1347  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1348  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1349  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1350  	GETCHAR(typenum, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1351  	len--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1352  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1353  	switch (typenum) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1354  	case EAPT_IDENTITY:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1355  		if (len > 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1356  			ppp_info("EAP: Identity prompt \"%.*q\"", len, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1357  #ifdef USE_SRP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1358  		if (pcb->eap.es_usepseudo &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1359  		    (pcb->eap.es_usedpseudo == 0 ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1360  			(pcb->eap.es_usedpseudo == 1 &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1361  			    id == pcb->eap.es_client.ea_id))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1362  			pcb->eap.es_usedpseudo = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1363  			/* Try to get a pseudonym */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1364  			if ((fd = open_pn_file(O_RDONLY)) >= 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1365  				strcpy(rhostname, SRP_PSEUDO_ID);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1366  				len = read(fd, rhostname + SRP_PSEUDO_LEN,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1367  				    sizeof (rhostname) - SRP_PSEUDO_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1368  				/* XXX NAI unsupported */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1369  				if (len > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1370  					eap_send_response(pcb, id, typenum,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1371  					    rhostname, len + SRP_PSEUDO_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1372  				}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1373  				(void) close(fd);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1374  				if (len > 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1375  					break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1376  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1377  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1378  		/* Stop using pseudonym now. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1379  		if (pcb->eap.es_usepseudo && pcb->eap.es_usedpseudo != 2) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1380  			remove_pn_file();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1381  			pcb->eap.es_usedpseudo = 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1382  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1383  #endif /* USE_SRP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1384  		eap_send_response(pcb, id, typenum, (const u_char*)pcb->eap.es_client.ea_name,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1385  		    pcb->eap.es_client.ea_namelen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1386  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1387  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1388  	case EAPT_NOTIFICATION:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1389  		if (len > 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1390  			ppp_info("EAP: Notification \"%.*q\"", len, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1391  		eap_send_response(pcb, id, typenum, NULL, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1392  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1393  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1394  	case EAPT_NAK:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1395  		/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1396  		 * Avoid the temptation to send Response Nak in reply
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1397  		 * to Request Nak here.  It can only lead to trouble.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1398  		 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1399  		ppp_warn("EAP: unexpected Nak in Request; ignored");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1400  		/* Return because we're waiting for something real. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1401  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1402  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1403  	case EAPT_MD5CHAP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1404  		if (len < 1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1405  			ppp_error("EAP: received MD5-Challenge with no data");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1406  			/* Bogus request; wait for something real. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1407  			return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1408  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1409  		GETCHAR(vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1410  		len--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1411  		if (vallen < 8 || vallen > len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1412  			ppp_error("EAP: MD5-Challenge with bad length %d (8..%d)",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1413  			    vallen, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1414  			/* Try something better. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1415  			eap_send_nak(pcb, id, EAPT_SRP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1416  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1417  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1418  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1419  		/* Not so likely to happen. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1420  		if (vallen >= len + sizeof (rhostname)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1421  			ppp_dbglog("EAP: trimming really long peer name down");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1422  			MEMCPY(rhostname, inp + vallen, sizeof (rhostname) - 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1423  			rhostname[sizeof (rhostname) - 1] = '\0';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1424  		} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1425  			MEMCPY(rhostname, inp + vallen, len - vallen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1426  			rhostname[len - vallen] = '\0';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1427  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1428  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1429  #if PPP_REMOTENAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1430  		/* In case the remote doesn't give us his name. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1431  		if (pcb->settings.explicit_remote ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1432  		    (pcb->settings.remote_name[0] != '\0' && vallen == len))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1433  			strlcpy(rhostname, pcb->settings.remote_name, sizeof (rhostname));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1434  #endif /* PPP_REMOTENAME */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1435  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1436  		/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1437  		 * Get the secret for authenticating ourselves with
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1438  		 * the specified host.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1439  		 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1440  		if (!get_secret(pcb, pcb->eap.es_client.ea_name,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1441  		    rhostname, secret, &secret_len, 0)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1442  			ppp_dbglog("EAP: no MD5 secret for auth to %q", rhostname);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1443  			eap_send_nak(pcb, id, EAPT_SRP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1444  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1445  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1446  		lwip_md5_init(&mdContext);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1447  		lwip_md5_starts(&mdContext);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1448  		typenum = id;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1449  		lwip_md5_update(&mdContext, &typenum, 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1450  		lwip_md5_update(&mdContext, (u_char *)secret, secret_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1451  		BZERO(secret, sizeof (secret));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1452  		lwip_md5_update(&mdContext, inp, vallen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1453  		lwip_md5_finish(&mdContext, hash);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1454  		lwip_md5_free(&mdContext);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1455  		eap_chap_response(pcb, id, hash, pcb->eap.es_client.ea_name,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1456  		    pcb->eap.es_client.ea_namelen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1457  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1458  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1459  #ifdef USE_SRP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1460  	case EAPT_SRP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1461  		if (len < 1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1462  			ppp_error("EAP: received empty SRP Request");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1463  			/* Bogus request; wait for something real. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1464  			return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1465  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1466  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1467  		/* Get subtype */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1468  		GETCHAR(vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1469  		len--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1470  		switch (vallen) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1471  		case EAPSRP_CHALLENGE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1472  			tc = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1473  			if (pcb->eap.es_client.ea_session != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1474  				tc = (struct t_client *)pcb->eap.es_client.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1475  				    ea_session;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1476  				/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1477  				 * If this is a new challenge, then start
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1478  				 * over with a new client session context.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1479  				 * Otherwise, just resend last response.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1480  				 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1481  				if (id != pcb->eap.es_client.ea_id) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1482  					t_clientclose(tc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1483  					pcb->eap.es_client.ea_session = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1484  					tc = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1485  				}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1486  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1487  			/* No session key just yet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1488  			pcb->eap.es_client.ea_skey = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1489  			if (tc == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1490  				int rhostnamelen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1491  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1492  				GETCHAR(vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1493  				len--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1494  				if (vallen >= len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1495  					ppp_error("EAP: badly-formed SRP Challenge"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1496  					    " (name)");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1497  					/* Ignore badly-formed messages */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1498  					return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1499  				}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1500  				MEMCPY(rhostname, inp, vallen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1501  				rhostname[vallen] = '\0';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1502  				INCPTR(vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1503  				len -= vallen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1504  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1505  				/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1506  				 * In case the remote doesn't give us his name,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1507  				 * use configured name.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1508  				 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1509  				if (explicit_remote ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1510  				    (remote_name[0] != '\0' && vallen == 0)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1511  					strlcpy(rhostname, remote_name,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1512  					    sizeof (rhostname));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1513  				}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1514  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1515  				rhostnamelen = (int)strlen(rhostname);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1516  				if (rhostnamelen > MAXNAMELEN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1517  					rhostnamelen = MAXNAMELEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1518  				}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1519  				MEMCPY(pcb->eap.es_client.ea_peer, rhostname, rhostnamelen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1520  				pcb->eap.es_client.ea_peer[rhostnamelen] = '\0';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1521  				pcb->eap.es_client.ea_peerlen = rhostnamelen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1522  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1523  				GETCHAR(vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1524  				len--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1525  				if (vallen >= len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1526  					ppp_error("EAP: badly-formed SRP Challenge"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1527  					    " (s)");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1528  					/* Ignore badly-formed messages */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1529  					return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1530  				}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1531  				sval.data = inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1532  				sval.len = vallen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1533  				INCPTR(vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1534  				len -= vallen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1535  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1536  				GETCHAR(vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1537  				len--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1538  				if (vallen > len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1539  					ppp_error("EAP: badly-formed SRP Challenge"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1540  					    " (g)");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1541  					/* Ignore badly-formed messages */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1542  					return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1543  				}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1544  				/* If no generator present, then use value 2 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1545  				if (vallen == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1546  					gval.data = (u_char *)"\002";
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1547  					gval.len = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1548  				} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1549  					gval.data = inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1550  					gval.len = vallen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1551  				}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1552  				INCPTR(vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1553  				len -= vallen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1554  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1555  				/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1556  				 * If no modulus present, then use well-known
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1557  				 * value.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1558  				 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1559  				if (len == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1560  					Nval.data = (u_char *)wkmodulus;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1561  					Nval.len = sizeof (wkmodulus);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1562  				} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1563  					Nval.data = inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1564  					Nval.len = len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1565  				}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1566  				tc = t_clientopen(pcb->eap.es_client.ea_name,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1567  				    &Nval, &gval, &sval);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1568  				if (tc == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1569  					eap_send_nak(pcb, id, EAPT_MD5CHAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1570  					break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1571  				}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1572  				pcb->eap.es_client.ea_session = (void *)tc;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1573  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1574  				/* Add Challenge ID & type to verifier */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1575  				vals[0] = id;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1576  				vals[1] = EAPT_SRP;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1577  				t_clientaddexdata(tc, vals, 2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1578  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1579  			Ap = t_clientgenexp(tc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1580  			eap_srp_response(esp, id, EAPSRP_CKEY, Ap->data,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1581  			    Ap->len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1582  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1583  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1584  		case EAPSRP_SKEY:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1585  			tc = (struct t_client *)pcb->eap.es_client.ea_session;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1586  			if (tc == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1587  				ppp_warn("EAP: peer sent Subtype 2 without 1");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1588  				eap_send_nak(pcb, id, EAPT_MD5CHAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1589  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1590  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1591  			if (pcb->eap.es_client.ea_skey != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1592  				/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1593  				 * ID number should not change here.  Warn
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1594  				 * if it does (but otherwise ignore).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1595  				 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1596  				if (id != pcb->eap.es_client.ea_id) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1597  					ppp_warn("EAP: ID changed from %d to %d "
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1598  					    "in SRP Subtype 2 rexmit",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1599  					    pcb->eap.es_client.ea_id, id);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1600  				}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1601  			} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1602  				if (get_srp_secret(pcb->eap.es_unit,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1603  				    pcb->eap.es_client.ea_name,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1604  				    pcb->eap.es_client.ea_peer, secret, 0) == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1605  					/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1606  					 * Can't work with this peer because
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1607  					 * the secret is missing.  Just give
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1608  					 * up.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1609  					 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1610  					eap_send_nak(pcb, id, EAPT_MD5CHAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1611  					break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1612  				}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1613  				Bval.data = inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1614  				Bval.len = len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1615  				t_clientpasswd(tc, secret);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1616  				BZERO(secret, sizeof (secret));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1617  				pcb->eap.es_client.ea_skey =
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1618  				    t_clientgetkey(tc, &Bval);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1619  				if (pcb->eap.es_client.ea_skey == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1620  					/* Server is rogue; stop now */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1621  					ppp_error("EAP: SRP server is rogue");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1622  					goto client_failure;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1623  				}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1624  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1625  			eap_srpval_response(esp, id, SRPVAL_EBIT,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1626  			    t_clientresponse(tc));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1627  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1628  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1629  		case EAPSRP_SVALIDATOR:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1630  			tc = (struct t_client *)pcb->eap.es_client.ea_session;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1631  			if (tc == NULL || pcb->eap.es_client.ea_skey == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1632  				ppp_warn("EAP: peer sent Subtype 3 without 1/2");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1633  				eap_send_nak(pcb, id, EAPT_MD5CHAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1634  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1635  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1636  			/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1637  			 * If we're already open, then this ought to be a
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1638  			 * duplicate.  Otherwise, check that the server is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1639  			 * who we think it is.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1640  			 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1641  			if (pcb->eap.es_client.ea_state == eapOpen) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1642  				if (id != pcb->eap.es_client.ea_id) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1643  					ppp_warn("EAP: ID changed from %d to %d "
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1644  					    "in SRP Subtype 3 rexmit",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1645  					    pcb->eap.es_client.ea_id, id);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1646  				}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1647  			} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1648  				len -= sizeof (u32_t) + SHA_DIGESTSIZE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1649  				if (len < 0 || t_clientverify(tc, inp +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1650  					sizeof (u32_t)) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1651  					ppp_error("EAP: SRP server verification "
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1652  					    "failed");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1653  					goto client_failure;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1654  				}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1655  				GETLONG(pcb->eap.es_client.ea_keyflags, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1656  				/* Save pseudonym if user wants it. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1657  				if (len > 0 && pcb->eap.es_usepseudo) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1658  					INCPTR(SHA_DIGESTSIZE, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1659  					write_pseudonym(esp, inp, len, id);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1660  				}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1661  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1662  			/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1663  			 * We've verified our peer.  We're now mostly done,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1664  			 * except for waiting on the regular EAP Success
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1665  			 * message.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1666  			 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1667  			eap_srp_response(esp, id, EAPSRP_ACK, NULL, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1668  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1669  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1670  		case EAPSRP_LWRECHALLENGE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1671  			if (len < 4) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1672  				ppp_warn("EAP: malformed Lightweight rechallenge");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1673  				return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1674  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1675  			SHA1Init(&ctxt);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1676  			vals[0] = id;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1677  			SHA1Update(&ctxt, vals, 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1678  			SHA1Update(&ctxt, pcb->eap.es_client.ea_skey,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1679  			    SESSION_KEY_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1680  			SHA1Update(&ctxt, inp, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1681  			SHA1Update(&ctxt, pcb->eap.es_client.ea_name,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1682  			    pcb->eap.es_client.ea_namelen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1683  			SHA1Final(dig, &ctxt);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1684  			eap_srp_response(esp, id, EAPSRP_LWRECHALLENGE, dig,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1685  			    SHA_DIGESTSIZE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1686  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1687  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1688  		default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1689  			ppp_error("EAP: unknown SRP Subtype %d", vallen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1690  			eap_send_nak(pcb, id, EAPT_MD5CHAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1691  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1692  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1693  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1694  #endif /* USE_SRP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1695  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1696  	default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1697  		ppp_info("EAP: unknown authentication type %d; Naking", typenum);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1698  		eap_send_nak(pcb, id, EAPT_SRP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1699  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1700  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1701  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1702  	if (pcb->settings.eap_req_time > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1703  		UNTIMEOUT(eap_client_timeout, pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1704  		TIMEOUT(eap_client_timeout, pcb,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1705  		    pcb->settings.eap_req_time);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1706  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1707  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1708  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1709  #ifdef USE_SRP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1710  client_failure:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1711  	pcb->eap.es_client.ea_state = eapBadAuth;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1712  	if (pcb->settings.eap_req_time > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1713  		UNTIMEOUT(eap_client_timeout, (void *)esp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1714  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1715  	pcb->eap.es_client.ea_session = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1716  	t_clientclose(tc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1717  	auth_withpeer_fail(pcb, PPP_EAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1718  #endif /* USE_SRP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1719  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1720  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1721  #if PPP_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1722  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1723   * eap_response - Receive EAP Response message (server mode).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1724   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1725  static void eap_response(ppp_pcb *pcb, u_char *inp, int id, int len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1726  	u_char typenum;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1727  	u_char vallen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1728  	int secret_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1729  	char secret[MAXSECRETLEN];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1730  	char rhostname[MAXNAMELEN];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1731  	lwip_md5_context mdContext;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1732  	u_char hash[MD5_SIGNATURE_SIZE];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1733  #ifdef USE_SRP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1734  	struct t_server *ts;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1735  	struct t_num A;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1736  	SHA1_CTX ctxt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1737  	u_char dig[SHA_DIGESTSIZE];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1738  #endif /* USE_SRP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1739  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1740  	if (pcb->eap.es_server.ea_id != id) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1741  		ppp_dbglog("EAP: discarding Response %d; expected ID %d", id,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1742  		    pcb->eap.es_server.ea_id);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1743  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1744  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1745  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1746  	pcb->eap.es_server.ea_responses++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1747  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1748  	if (len <= 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1749  		ppp_error("EAP: empty Response message discarded");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1750  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1751  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1752  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1753  	GETCHAR(typenum, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1754  	len--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1755  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1756  	switch (typenum) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1757  	case EAPT_IDENTITY:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1758  		if (pcb->eap.es_server.ea_state != eapIdentify) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1759  			ppp_dbglog("EAP discarding unwanted Identify \"%.q\"", len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1760  			    inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1761  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1762  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1763  		ppp_info("EAP: unauthenticated peer name \"%.*q\"", len, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1764  		if (len > MAXNAMELEN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1765  		  len = MAXNAMELEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1766  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1767  		MEMCPY(pcb->eap.es_server.ea_peer, inp, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1768  		pcb->eap.es_server.ea_peer[len] = '\0';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1769  		pcb->eap.es_server.ea_peerlen = len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1770  		eap_figure_next_state(pcb, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1771  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1772  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1773  	case EAPT_NOTIFICATION:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1774  		ppp_dbglog("EAP unexpected Notification; response discarded");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1775  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1776  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1777  	case EAPT_NAK:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1778  		if (len < 1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1779  			ppp_info("EAP: Nak Response with no suggested protocol");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1780  			eap_figure_next_state(pcb, 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1781  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1782  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1783  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1784  		GETCHAR(vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1785  		len--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1786  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1787  		if (
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1788  #if PPP_REMOTENAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1789  		!pcb->explicit_remote &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1790  #endif /* PPP_REMOTENAME */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1791  		pcb->eap.es_server.ea_state == eapIdentify){
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1792  			/* Peer cannot Nak Identify Request */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1793  			eap_figure_next_state(pcb, 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1794  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1795  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1796  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1797  		switch (vallen) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1798  		case EAPT_SRP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1799  			/* Run through SRP validator selection again. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1800  			pcb->eap.es_server.ea_state = eapIdentify;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1801  			eap_figure_next_state(pcb, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1802  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1803  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1804  		case EAPT_MD5CHAP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1805  			pcb->eap.es_server.ea_state = eapMD5Chall;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1806  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1807  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1808  		default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1809  			ppp_dbglog("EAP: peer requesting unknown Type %d", vallen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1810  			switch (pcb->eap.es_server.ea_state) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1811  			case eapSRP1:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1812  			case eapSRP2:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1813  			case eapSRP3:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1814  				pcb->eap.es_server.ea_state = eapMD5Chall;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1815  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1816  			case eapMD5Chall:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1817  			case eapSRP4:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1818  				pcb->eap.es_server.ea_state = eapIdentify;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1819  				eap_figure_next_state(pcb, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1820  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1821  			default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1822  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1823  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1824  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1825  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1826  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1827  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1828  	case EAPT_MD5CHAP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1829  		if (pcb->eap.es_server.ea_state != eapMD5Chall) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1830  			ppp_error("EAP: unexpected MD5-Response");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1831  			eap_figure_next_state(pcb, 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1832  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1833  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1834  		if (len < 1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1835  			ppp_error("EAP: received MD5-Response with no data");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1836  			eap_figure_next_state(pcb, 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1837  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1838  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1839  		GETCHAR(vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1840  		len--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1841  		if (vallen != 16 || vallen > len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1842  			ppp_error("EAP: MD5-Response with bad length %d", vallen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1843  			eap_figure_next_state(pcb, 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1844  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1845  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1846  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1847  		/* Not so likely to happen. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1848  		if (vallen >= len + sizeof (rhostname)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1849  			ppp_dbglog("EAP: trimming really long peer name down");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1850  			MEMCPY(rhostname, inp + vallen, sizeof (rhostname) - 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1851  			rhostname[sizeof (rhostname) - 1] = '\0';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1852  		} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1853  			MEMCPY(rhostname, inp + vallen, len - vallen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1854  			rhostname[len - vallen] = '\0';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1855  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1856  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1857  #if PPP_REMOTENAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1858  		/* In case the remote doesn't give us his name. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1859  		if (explicit_remote ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1860  		    (remote_name[0] != '\0' && vallen == len))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1861  			strlcpy(rhostname, remote_name, sizeof (rhostname));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1862  #endif /* PPP_REMOTENAME */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1863  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1864  		/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1865  		 * Get the secret for authenticating the specified
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1866  		 * host.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1867  		 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1868  		if (!get_secret(pcb, rhostname,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1869  		    pcb->eap.es_server.ea_name, secret, &secret_len, 1)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1870  			ppp_dbglog("EAP: no MD5 secret for auth of %q", rhostname);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1871  			eap_send_failure(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1872  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1873  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1874  		lwip_md5_init(&mdContext);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1875  		lwip_md5_starts(&mdContext);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1876  		lwip_md5_update(&mdContext, &pcb->eap.es_server.ea_id, 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1877  		lwip_md5_update(&mdContext, (u_char *)secret, secret_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1878  		BZERO(secret, sizeof (secret));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1879  		lwip_md5_update(&mdContext, pcb->eap.es_challenge, pcb->eap.es_challen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1880  		lwip_md5_finish(&mdContext, hash);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1881  		lwip_md5_free(&mdContext);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1882  		if (BCMP(hash, inp, MD5_SIGNATURE_SIZE) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1883  			eap_send_failure(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1884  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1885  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1886  		pcb->eap.es_server.ea_type = EAPT_MD5CHAP;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1887  		eap_send_success(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1888  		eap_figure_next_state(pcb, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1889  		if (pcb->eap.es_rechallenge != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1890  			TIMEOUT(eap_rechallenge, pcb, pcb->eap.es_rechallenge);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1891  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1892  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1893  #ifdef USE_SRP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1894  	case EAPT_SRP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1895  		if (len < 1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1896  			ppp_error("EAP: empty SRP Response");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1897  			eap_figure_next_state(pcb, 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1898  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1899  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1900  		GETCHAR(typenum, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1901  		len--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1902  		switch (typenum) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1903  		case EAPSRP_CKEY:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1904  			if (pcb->eap.es_server.ea_state != eapSRP1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1905  				ppp_error("EAP: unexpected SRP Subtype 1 Response");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1906  				eap_figure_next_state(pcb, 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1907  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1908  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1909  			A.data = inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1910  			A.len = len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1911  			ts = (struct t_server *)pcb->eap.es_server.ea_session;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1912  			assert(ts != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1913  			pcb->eap.es_server.ea_skey = t_servergetkey(ts, &A);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1914  			if (pcb->eap.es_server.ea_skey == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1915  				/* Client's A value is bogus; terminate now */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1916  				ppp_error("EAP: bogus A value from client");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1917  				eap_send_failure(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1918  			} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1919  				eap_figure_next_state(pcb, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1920  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1921  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1922  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1923  		case EAPSRP_CVALIDATOR:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1924  			if (pcb->eap.es_server.ea_state != eapSRP2) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1925  				ppp_error("EAP: unexpected SRP Subtype 2 Response");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1926  				eap_figure_next_state(pcb, 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1927  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1928  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1929  			if (len < sizeof (u32_t) + SHA_DIGESTSIZE) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1930  				ppp_error("EAP: M1 length %d < %d", len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1931  				    sizeof (u32_t) + SHA_DIGESTSIZE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1932  				eap_figure_next_state(pcb, 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1933  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1934  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1935  			GETLONG(pcb->eap.es_server.ea_keyflags, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1936  			ts = (struct t_server *)pcb->eap.es_server.ea_session;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1937  			assert(ts != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1938  			if (t_serververify(ts, inp)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1939  				ppp_info("EAP: unable to validate client identity");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1940  				eap_send_failure(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1941  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1942  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1943  			eap_figure_next_state(pcb, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1944  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1945  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1946  		case EAPSRP_ACK:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1947  			if (pcb->eap.es_server.ea_state != eapSRP3) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1948  				ppp_error("EAP: unexpected SRP Subtype 3 Response");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1949  				eap_send_failure(esp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1950  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1951  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1952  			pcb->eap.es_server.ea_type = EAPT_SRP;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1953  			eap_send_success(pcb, esp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1954  			eap_figure_next_state(pcb, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1955  			if (pcb->eap.es_rechallenge != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1956  				TIMEOUT(eap_rechallenge, pcb,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1957  				    pcb->eap.es_rechallenge);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1958  			if (pcb->eap.es_lwrechallenge != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1959  				TIMEOUT(srp_lwrechallenge, pcb,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1960  				    pcb->eap.es_lwrechallenge);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1961  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1962  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1963  		case EAPSRP_LWRECHALLENGE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1964  			if (pcb->eap.es_server.ea_state != eapSRP4) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1965  				ppp_info("EAP: unexpected SRP Subtype 4 Response");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1966  				return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1967  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1968  			if (len != SHA_DIGESTSIZE) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1969  				ppp_error("EAP: bad Lightweight rechallenge "
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1970  				    "response");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1971  				return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1972  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1973  			SHA1Init(&ctxt);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1974  			vallen = id;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1975  			SHA1Update(&ctxt, &vallen, 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1976  			SHA1Update(&ctxt, pcb->eap.es_server.ea_skey,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1977  			    SESSION_KEY_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1978  			SHA1Update(&ctxt, pcb->eap.es_challenge, pcb->eap.es_challen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1979  			SHA1Update(&ctxt, pcb->eap.es_server.ea_peer,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1980  			    pcb->eap.es_server.ea_peerlen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1981  			SHA1Final(dig, &ctxt);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1982  			if (BCMP(dig, inp, SHA_DIGESTSIZE) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1983  				ppp_error("EAP: failed Lightweight rechallenge");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1984  				eap_send_failure(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1985  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1986  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1987  			pcb->eap.es_server.ea_state = eapOpen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1988  			if (pcb->eap.es_lwrechallenge != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1989  				TIMEOUT(srp_lwrechallenge, esp,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1990  				    pcb->eap.es_lwrechallenge);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1991  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1992  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1993  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1994  #endif /* USE_SRP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1995  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1996  	default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1997  		/* This can't happen. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1998  		ppp_error("EAP: unknown Response type %d; ignored", typenum);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  1999  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2000  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2001  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2002  	if (pcb->settings.eap_timeout_time > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2003  		UNTIMEOUT(eap_server_timeout, pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2004  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2005  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2006  	if (pcb->eap.es_server.ea_state != eapBadAuth &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2007  	    pcb->eap.es_server.ea_state != eapOpen) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2008  		pcb->eap.es_server.ea_id++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2009  		eap_send_request(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2010  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2011  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2012  #endif /* PPP_SERVER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2013  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2014  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2015   * eap_success - Receive EAP Success message (client mode).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2016   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2017  static void eap_success(ppp_pcb *pcb, u_char *inp, int id, int len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2018  	LWIP_UNUSED_ARG(id);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2019  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2020  	if (pcb->eap.es_client.ea_state != eapOpen && !eap_client_active(pcb)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2021  		ppp_dbglog("EAP unexpected success message in state %s (%d)",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2022  		    eap_state_name(pcb->eap.es_client.ea_state),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2023  		    pcb->eap.es_client.ea_state);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2024  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2025  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2026  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2027  	if (pcb->settings.eap_req_time > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2028  		UNTIMEOUT(eap_client_timeout, pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2029  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2030  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2031  	if (len > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2032  		/* This is odd.  The spec doesn't allow for this. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2033  		PRINTMSG(inp, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2034  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2035  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2036  	pcb->eap.es_client.ea_state = eapOpen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2037  	auth_withpeer_success(pcb, PPP_EAP, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2038  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2039  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2040  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2041   * eap_failure - Receive EAP Failure message (client mode).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2042   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2043  static void eap_failure(ppp_pcb *pcb, u_char *inp, int id, int len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2044  	LWIP_UNUSED_ARG(id);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2045  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2046  	if (!eap_client_active(pcb)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2047  		ppp_dbglog("EAP unexpected failure message in state %s (%d)",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2048  		    eap_state_name(pcb->eap.es_client.ea_state),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2049  		    pcb->eap.es_client.ea_state);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2050  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2051  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2052  	if (pcb->settings.eap_req_time > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2053  		UNTIMEOUT(eap_client_timeout, pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2054  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2055  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2056  	if (len > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2057  		/* This is odd.  The spec doesn't allow for this. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2058  		PRINTMSG(inp, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2059  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2060  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2061  	pcb->eap.es_client.ea_state = eapBadAuth;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2062  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2063  	ppp_error("EAP: peer reports authentication failure");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2064  	auth_withpeer_fail(pcb, PPP_EAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2065  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2066  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2067  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2068   * eap_input - Handle received EAP message.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2069   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2070  static void eap_input(ppp_pcb *pcb, u_char *inp, int inlen) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2071  	u_char code, id;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2072  	int len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2073  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2074  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2075  	 * Parse header (code, id and length).  If packet too short,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2076  	 * drop it.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2077  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2078  	if (inlen < EAP_HEADERLEN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2079  		ppp_error("EAP: packet too short: %d < %d", inlen, EAP_HEADERLEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2080  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2081  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2082  	GETCHAR(code, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2083  	GETCHAR(id, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2084  	GETSHORT(len, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2085  	if (len < EAP_HEADERLEN || len > inlen) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2086  		ppp_error("EAP: packet has illegal length field %d (%d..%d)", len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2087  		    EAP_HEADERLEN, inlen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2088  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2089  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2090  	len -= EAP_HEADERLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2091  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2092  	/* Dispatch based on message code */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2093  	switch (code) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2094  	case EAP_REQUEST:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2095  		eap_request(pcb, inp, id, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2096  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2097  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2098  #if PPP_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2099  	case EAP_RESPONSE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2100  		eap_response(pcb, inp, id, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2101  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2102  #endif /* PPP_SERVER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2103  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2104  	case EAP_SUCCESS:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2105  		eap_success(pcb, inp, id, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2106  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2107  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2108  	case EAP_FAILURE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2109  		eap_failure(pcb, inp, id, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2110  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2111  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2112  	default:				/* XXX Need code reject */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2113  		/* Note: it's not legal to send EAP Nak here. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2114  		ppp_warn("EAP: unknown code %d received", code);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2115  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2116  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2117  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2118  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2119  #if PRINTPKT_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2120  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2121   * eap_printpkt - print the contents of an EAP packet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2122   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2123  static const char* const eap_codenames[] = {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2124  	"Request", "Response", "Success", "Failure"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2125  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2126  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2127  static const char* const eap_typenames[] = {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2128  	"Identity", "Notification", "Nak", "MD5-Challenge",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2129  	"OTP", "Generic-Token", NULL, NULL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2130  	"RSA", "DSS", "KEA", "KEA-Validate",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2131  	"TLS", "Defender", "Windows 2000", "Arcot",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2132  	"Cisco", "Nokia", "SRP"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2133  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2134  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2135  static int eap_printpkt(const u_char *inp, int inlen, void (*printer) (void *, const char *, ...), void *arg) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2136  	int code, id, len, rtype, vallen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2137  	const u_char *pstart;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2138  	u32_t uval;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2139  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2140  	if (inlen < EAP_HEADERLEN)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2141  		return (0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2142  	pstart = inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2143  	GETCHAR(code, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2144  	GETCHAR(id, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2145  	GETSHORT(len, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2146  	if (len < EAP_HEADERLEN || len > inlen)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2147  		return (0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2148  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2149  	if (code >= 1 && code <= (int)LWIP_ARRAYSIZE(eap_codenames))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2150  		printer(arg, " %s", eap_codenames[code-1]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2151  	else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2152  		printer(arg, " code=0x%x", code);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2153  	printer(arg, " id=0x%x", id);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2154  	len -= EAP_HEADERLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2155  	switch (code) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2156  	case EAP_REQUEST:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2157  		if (len < 1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2158  			printer(arg, " <missing type>");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2159  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2160  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2161  		GETCHAR(rtype, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2162  		len--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2163  		if (rtype >= 1 && rtype <= (int)LWIP_ARRAYSIZE(eap_typenames))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2164  			printer(arg, " %s", eap_typenames[rtype-1]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2165  		else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2166  			printer(arg, " type=0x%x", rtype);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2167  		switch (rtype) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2168  		case EAPT_IDENTITY:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2169  		case EAPT_NOTIFICATION:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2170  			if (len > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2171  				printer(arg, " <Message ");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2172  				ppp_print_string(inp, len, printer, arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2173  				printer(arg, ">");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2174  				INCPTR(len, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2175  				len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2176  			} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2177  				printer(arg, " <No message>");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2178  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2179  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2180  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2181  		case EAPT_MD5CHAP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2182  			if (len <= 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2183  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2184  			GETCHAR(vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2185  			len--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2186  			if (vallen > len)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2187  				goto truncated;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2188  			printer(arg, " <Value%.*B>", vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2189  			INCPTR(vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2190  			len -= vallen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2191  			if (len > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2192  				printer(arg, " <Name ");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2193  				ppp_print_string(inp, len, printer, arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2194  				printer(arg, ">");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2195  				INCPTR(len, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2196  				len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2197  			} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2198  				printer(arg, " <No name>");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2199  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2200  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2201  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2202  		case EAPT_SRP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2203  			if (len < 3)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2204  				goto truncated;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2205  			GETCHAR(vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2206  			len--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2207  			printer(arg, "-%d", vallen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2208  			switch (vallen) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2209  			case EAPSRP_CHALLENGE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2210  				GETCHAR(vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2211  				len--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2212  				if (vallen >= len)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2213  					goto truncated;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2214  				if (vallen > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2215  					printer(arg, " <Name ");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2216  					ppp_print_string(inp, vallen, printer,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2217  					    arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2218  					printer(arg, ">");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2219  				} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2220  					printer(arg, " <No name>");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2221  				}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2222  				INCPTR(vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2223  				len -= vallen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2224  				GETCHAR(vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2225  				len--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2226  				if (vallen >= len)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2227  					goto truncated;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2228  				printer(arg, " <s%.*B>", vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2229  				INCPTR(vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2230  				len -= vallen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2231  				GETCHAR(vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2232  				len--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2233  				if (vallen > len)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2234  					goto truncated;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2235  				if (vallen == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2236  					printer(arg, " <Default g=2>");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2237  				} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2238  					printer(arg, " <g%.*B>", vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2239  				}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2240  				INCPTR(vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2241  				len -= vallen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2242  				if (len == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2243  					printer(arg, " <Default N>");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2244  				} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2245  					printer(arg, " <N%.*B>", len, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2246  					INCPTR(len, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2247  					len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2248  				}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2249  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2250  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2251  			case EAPSRP_SKEY:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2252  				printer(arg, " <B%.*B>", len, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2253  				INCPTR(len, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2254  				len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2255  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2256  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2257  			case EAPSRP_SVALIDATOR:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2258  				if (len < (int)sizeof (u32_t))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2259  					break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2260  				GETLONG(uval, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2261  				len -= sizeof (u32_t);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2262  				if (uval & SRPVAL_EBIT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2263  					printer(arg, " E");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2264  					uval &= ~SRPVAL_EBIT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2265  				}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2266  				if (uval != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2267  					printer(arg, " f<%X>", uval);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2268  				}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2269  				if ((vallen = len) > SHA_DIGESTSIZE)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2270  					vallen = SHA_DIGESTSIZE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2271  				printer(arg, " <M2%.*B%s>", len, inp,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2272  				    len < SHA_DIGESTSIZE ? "?" : "");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2273  				INCPTR(vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2274  				len -= vallen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2275  				if (len > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2276  					printer(arg, " <PN%.*B>", len, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2277  					INCPTR(len, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2278  					len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2279  				}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2280  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2281  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2282  			case EAPSRP_LWRECHALLENGE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2283  				printer(arg, " <Challenge%.*B>", len, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2284  				INCPTR(len, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2285  				len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2286  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2287  			default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2288  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2289  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2290  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2291  		default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2292  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2293  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2294  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2295  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2296  	case EAP_RESPONSE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2297  		if (len < 1)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2298  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2299  		GETCHAR(rtype, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2300  		len--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2301  		if (rtype >= 1 && rtype <= (int)LWIP_ARRAYSIZE(eap_typenames))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2302  			printer(arg, " %s", eap_typenames[rtype-1]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2303  		else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2304  			printer(arg, " type=0x%x", rtype);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2305  		switch (rtype) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2306  		case EAPT_IDENTITY:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2307  			if (len > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2308  				printer(arg, " <Name ");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2309  				ppp_print_string(inp, len, printer, arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2310  				printer(arg, ">");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2311  				INCPTR(len, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2312  				len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2313  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2314  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2315  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2316  		case EAPT_NAK:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2317  			if (len <= 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2318  				printer(arg, " <missing hint>");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2319  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2320  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2321  			GETCHAR(rtype, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2322  			len--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2323  			printer(arg, " <Suggested-type %02X", rtype);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2324  			if (rtype >= 1 && rtype < (int)LWIP_ARRAYSIZE(eap_typenames))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2325  				printer(arg, " (%s)", eap_typenames[rtype-1]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2326  			printer(arg, ">");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2327  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2328  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2329  		case EAPT_MD5CHAP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2330  			if (len <= 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2331  				printer(arg, " <missing length>");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2332  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2333  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2334  			GETCHAR(vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2335  			len--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2336  			if (vallen > len)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2337  				goto truncated;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2338  			printer(arg, " <Value%.*B>", vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2339  			INCPTR(vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2340  			len -= vallen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2341  			if (len > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2342  				printer(arg, " <Name ");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2343  				ppp_print_string(inp, len, printer, arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2344  				printer(arg, ">");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2345  				INCPTR(len, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2346  				len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2347  			} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2348  				printer(arg, " <No name>");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2349  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2350  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2351  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2352  		case EAPT_SRP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2353  			if (len < 1)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2354  				goto truncated;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2355  			GETCHAR(vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2356  			len--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2357  			printer(arg, "-%d", vallen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2358  			switch (vallen) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2359  			case EAPSRP_CKEY:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2360  				printer(arg, " <A%.*B>", len, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2361  				INCPTR(len, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2362  				len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2363  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2364  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2365  			case EAPSRP_CVALIDATOR:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2366  				if (len < (int)sizeof (u32_t))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2367  					break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2368  				GETLONG(uval, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2369  				len -= sizeof (u32_t);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2370  				if (uval & SRPVAL_EBIT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2371  					printer(arg, " E");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2372  					uval &= ~SRPVAL_EBIT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2373  				}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2374  				if (uval != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2375  					printer(arg, " f<%X>", uval);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2376  				}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2377  				printer(arg, " <M1%.*B%s>", len, inp,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2378  				    len == SHA_DIGESTSIZE ? "" : "?");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2379  				INCPTR(len, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2380  				len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2381  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2382  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2383  			case EAPSRP_ACK:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2384  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2385  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2386  			case EAPSRP_LWRECHALLENGE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2387  				printer(arg, " <Response%.*B%s>", len, inp,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2388  				    len == SHA_DIGESTSIZE ? "" : "?");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2389  				if ((vallen = len) > SHA_DIGESTSIZE)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2390  					vallen = SHA_DIGESTSIZE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2391  				INCPTR(vallen, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2392  				len -= vallen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2393  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2394  			default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2395  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2396  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2397  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2398  		default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2399  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2400  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2401  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2402  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2403  	case EAP_SUCCESS:	/* No payload expected for these! */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2404  	case EAP_FAILURE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2405  	default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2406  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2407  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2408  	truncated:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2409  		printer(arg, " <truncated>");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2410  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2411  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2412  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2413  	if (len > 8)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2414  		printer(arg, "%8B...", inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2415  	else if (len > 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2416  		printer(arg, "%.*B", len, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2417  	INCPTR(len, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2418  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2419  	return (inp - pstart);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2420  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2421  #endif /* PRINTPKT_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2422  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\eap.c	  2423  #endif /* PPP_SUPPORT && EAP_SUPPORT */

	; Module end
