	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\.chap_ms.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Rtl8211f -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\chap_ms.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\chap_ms.src ..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\chap_ms.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\chap_ms.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	737
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\chap_ms.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L5
	.byte	2
	.byte	'int',0,4,5,3
	.word	174
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	181
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	223
	.byte	7
	.word	223
	.byte	8
	.byte	'__cmpswapw',0
	.word	239
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	244
	.byte	9
	.byte	'value',0
	.word	223
	.byte	9
	.byte	'compare',0
	.word	223
	.byte	0,2
	.byte	'short int',0,2,5,10
	.byte	'__wchar_t',0,1,1,1
	.word	301
	.byte	10
	.byte	'__size_t',0,1,1,1
	.word	223
	.byte	10
	.byte	'__ptrdiff_t',0,1,1,1
	.word	174
	.byte	11,1,7
	.word	369
	.byte	10
	.byte	'__codeptr',0,1,1,1
	.word	371
	.byte	10
	.byte	'__intptr_t',0,1,1,1
	.word	174
	.byte	10
	.byte	'__uintptr_t',0,1,1,1
	.word	223
	.byte	2
	.byte	'unsigned char',0,1,8,10
	.byte	'uint8',0,2,108,29
	.word	433
	.byte	2
	.byte	'unsigned short int',0,2,7,10
	.byte	'uint16',0,2,112,29
	.word	464
	.byte	2
	.byte	'unsigned long int',0,4,7,10
	.byte	'uint32',0,2,116,29
	.word	501
	.byte	2
	.byte	'char',0,1,6,10
	.byte	'sint8',0,2,125,29
	.word	537
	.byte	10
	.byte	'sint16',0,2,129,1,29
	.word	301
	.byte	2
	.byte	'long int',0,4,5,10
	.byte	'sint32',0,2,134,1,29
	.word	575
	.byte	2
	.byte	'long long int',0,8,5,10
	.byte	'sint64',0,2,141,1,29
	.word	603
	.byte	2
	.byte	'float',0,4,4,10
	.byte	'float32',0,2,170,1,29
	.word	636
	.byte	12
	.byte	'void',0,7
	.word	662
	.byte	10
	.byte	'pvoid',0,3,54,28
	.word	668
	.byte	10
	.byte	'Ifx_TickTime',0,3,76,28
	.word	603
	.byte	10
	.byte	'u32_t',0,4,87,16
	.word	501
	.byte	10
	.byte	'intmax_t',0,5,198,2,41
	.word	603
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,22,0,3,8,58,15,59,15,57,15,73,19,0,0,11,21,0,54,15,0,0,12,59,0
	.byte	3,8,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\chap_ms.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'cc.h',0,2,0,0
	.byte	'stdint.h',0,3,0,0,0
.L9:
.L7:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	     1  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	     2   * chap_ms.c - Microsoft MS-CHAP compatible implementation.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	     3   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	     4   * Copyright (c) 1995 Eric Rosenquist.  All rights reserved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	     5   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	     6   * Redistribution and use in source and binary forms, with or without
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	     7   * modification, are permitted provided that the following conditions
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	     8   * are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	     9   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    10   * 1. Redistributions of source code must retain the above copyright
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    11   *    notice, this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    12   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    13   * 2. Redistributions in binary form must reproduce the above copyright
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    14   *    notice, this list of conditions and the following disclaimer in
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    15   *    the documentation and/or other materials provided with the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    16   *    distribution.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    17   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    18   * 3. The name(s) of the authors of this software must not be used to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    19   *    endorse or promote products derived from this software without
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    20   *    prior written permission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    21   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    22   * THE AUTHORS OF THIS SOFTWARE DISCLAIM ALL WARRANTIES WITH REGARD TO
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    23   * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    24   * AND FITNESS, IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    25   * SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    26   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    27   * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    28   * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    29   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    30  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    31  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    32   * Modifications by Lauri Pesonen / lpesonen@clinet.fi, april 1997
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    33   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    34   *   Implemented LANManager type password response to MS-CHAP challenges.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    35   *   Now pppd provides both NT style and LANMan style blocks, and the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    36   *   prefered is set by option "ms-lanman". Default is to use NT.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    37   *   The hash text (StdText) was taken from Win95 RASAPI32.DLL.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    38   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    39   *   You should also use DOMAIN\\USERNAME as described in README.MSCHAP80
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    40   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    41  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    42  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    43   * Modifications by Frank Cusack, frank@google.com, March 2002.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    44   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    45   *   Implemented MS-CHAPv2 functionality, heavily based on sample
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    46   *   implementation in RFC 2759.  Implemented MPPE functionality,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    47   *   heavily based on sample implementation in RFC 3079.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    48   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    49   * Copyright (c) 2002 Google, Inc.  All rights reserved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    50   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    51   * Redistribution and use in source and binary forms, with or without
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    52   * modification, are permitted provided that the following conditions
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    53   * are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    54   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    55   * 1. Redistributions of source code must retain the above copyright
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    56   *    notice, this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    57   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    58   * 2. Redistributions in binary form must reproduce the above copyright
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    59   *    notice, this list of conditions and the following disclaimer in
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    60   *    the documentation and/or other materials provided with the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    61   *    distribution.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    62   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    63   * 3. The name(s) of the authors of this software must not be used to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    64   *    endorse or promote products derived from this software without
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    65   *    prior written permission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    66   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    67   * THE AUTHORS OF THIS SOFTWARE DISCLAIM ALL WARRANTIES WITH REGARD TO
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    68   * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    69   * AND FITNESS, IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    70   * SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    71   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    72   * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    73   * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    74   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    75   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    76  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    77  #include "netif/ppp/ppp_opts.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    78  #if PPP_SUPPORT && MSCHAP_SUPPORT  /* don't build if not configured for use in lwipopts.h */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    79  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    80  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    81  #include <stdio.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    82  #include <stdlib.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    83  #include <string.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    84  #include <ctype.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    85  #include <sys/types.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    86  #include <sys/time.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    87  #include <unistd.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    88  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    89  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    90  #include "netif/ppp/ppp_impl.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    91  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    92  #include "netif/ppp/chap-new.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    93  #include "netif/ppp/chap_ms.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    94  #include "netif/ppp/pppcrypt.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    95  #include "netif/ppp/magic.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    96  #if MPPE_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    97  #include "netif/ppp/mppe.h" /* For mppe_sha1_pad*, mppe_set_key() */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    98  #endif /* MPPE_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	    99  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   100  #define SHA1_SIGNATURE_SIZE	20
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   101  #define MD4_SIGNATURE_SIZE	16	/* 16 bytes in a MD4 message digest */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   102  #define MAX_NT_PASSWORD		256	/* Max (Unicode) chars in an NT pass */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   103  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   104  #define MS_CHAP_RESPONSE_LEN	49	/* Response length for MS-CHAP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   105  #define MS_CHAP2_RESPONSE_LEN	49	/* Response length for MS-CHAPv2 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   106  #define MS_AUTH_RESPONSE_LENGTH	40	/* MS-CHAPv2 authenticator response, */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   107  					/* as ASCII */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   108  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   109  /* Error codes for MS-CHAP failure messages. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   110  #define MS_CHAP_ERROR_RESTRICTED_LOGON_HOURS	646
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   111  #define MS_CHAP_ERROR_ACCT_DISABLED		647
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   112  #define MS_CHAP_ERROR_PASSWD_EXPIRED		648
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   113  #define MS_CHAP_ERROR_NO_DIALIN_PERMISSION	649
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   114  #define MS_CHAP_ERROR_AUTHENTICATION_FAILURE	691
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   115  #define MS_CHAP_ERROR_CHANGING_PASSWORD		709
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   116  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   117  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   118   * Offsets within the response field for MS-CHAP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   119   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   120  #define MS_CHAP_LANMANRESP	0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   121  #define MS_CHAP_LANMANRESP_LEN	24
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   122  #define MS_CHAP_NTRESP		24
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   123  #define MS_CHAP_NTRESP_LEN	24
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   124  #define MS_CHAP_USENT		48
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   125  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   126  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   127   * Offsets within the response field for MS-CHAP2
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   128   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   129  #define MS_CHAP2_PEER_CHALLENGE	0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   130  #define MS_CHAP2_PEER_CHAL_LEN	16
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   131  #define MS_CHAP2_RESERVED_LEN	8
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   132  #define MS_CHAP2_NTRESP		24
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   133  #define MS_CHAP2_NTRESP_LEN	24
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   134  #define MS_CHAP2_FLAGS		48
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   135  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   136  #if MPPE_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   137  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   138  /* These values are the RADIUS attribute values--see RFC 2548. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   139  #define MPPE_ENC_POL_ENC_ALLOWED 1
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   140  #define MPPE_ENC_POL_ENC_REQUIRED 2
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   141  #define MPPE_ENC_TYPES_RC4_40 2
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   142  #define MPPE_ENC_TYPES_RC4_128 4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   143  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   144  /* used by plugins (using above values) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   145  extern void set_mppe_enc_types(int, int);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   146  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   147  #endif /* MPPE_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   148  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   149  /* Are we the authenticator or authenticatee?  For MS-CHAPv2 key derivation. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   150  #define MS_CHAP2_AUTHENTICATEE 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   151  #define MS_CHAP2_AUTHENTICATOR 1
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   152  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   153  static void	ascii2unicode (const char[], int, u_char[]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   154  static void	NTPasswordHash (u_char *, int, u_char[MD4_SIGNATURE_SIZE]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   155  static void	ChallengeResponse (const u_char *, const u_char *, u_char[24]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   156  static void	ChallengeHash (const u_char[16], const u_char *, const char *, u_char[8]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   157  static void	ChapMS_NT (const u_char *, const char *, int, u_char[24]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   158  static void	ChapMS2_NT (const u_char *, const u_char[16], const char *, const char *, int,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   159  				u_char[24]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   160  static void	GenerateAuthenticatorResponsePlain
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   161  			(const char*, int, u_char[24], const u_char[16], const u_char *,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   162  			     const char *, u_char[41]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   163  #ifdef MSLANMAN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   164  static void	ChapMS_LANMan (u_char *, char *, int, u_char *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   165  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   166  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   167  static void GenerateAuthenticatorResponse(const u_char PasswordHashHash[MD4_SIGNATURE_SIZE],
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   168  			u_char NTResponse[24], const u_char PeerChallenge[16],
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   169  			const u_char *rchallenge, const char *username,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   170  			u_char authResponse[MS_AUTH_RESPONSE_LENGTH+1]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   171  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   172  #if MPPE_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   173  static void	Set_Start_Key (ppp_pcb *pcb, const u_char *, const char *, int);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   174  static void	SetMasterKeys (ppp_pcb *pcb, const char *, int, u_char[24], int);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   175  #endif /* MPPE_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   176  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   177  static void ChapMS (ppp_pcb *pcb, const u_char *, const char *, int, u_char *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   178  static void ChapMS2 (ppp_pcb *pcb, const u_char *, const u_char *, const char *, const char *, int,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   179  		  u_char *, u_char[MS_AUTH_RESPONSE_LENGTH+1], int);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   180  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   181  #ifdef MSLANMAN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   182  bool	ms_lanman = 0;    	/* Use LanMan password instead of NT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   183  			  	/* Has meaning only with MS-CHAP challenges */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   184  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   185  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   186  #if MPPE_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   187  #ifdef DEBUGMPPEKEY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   188  /* For MPPE debug */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   189  /* Use "[]|}{?/><,`!2&&(" (sans quotes) for RFC 3079 MS-CHAPv2 test value */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   190  static char *mschap_challenge = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   191  /* Use "!@\#$%^&*()_+:3|~" (sans quotes, backslash is to escape #) for ... */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   192  static char *mschap2_peer_challenge = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   193  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   194  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   195  #include "netif/ppp/fsm.h"		/* Need to poke MPPE options */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   196  #include "netif/ppp/ccp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   197  #endif /* MPPE_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   198  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   199  #if PPP_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   200  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   201   * Command-line options.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   202   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   203  static option_t chapms_option_list[] = {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   204  #ifdef MSLANMAN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   205  	{ "ms-lanman", o_bool, &ms_lanman,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   206  	  "Use LanMan passwd when using MS-CHAP", 1 },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   207  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   208  #ifdef DEBUGMPPEKEY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   209  	{ "mschap-challenge", o_string, &mschap_challenge,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   210  	  "specify CHAP challenge" },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   211  	{ "mschap2-peer-challenge", o_string, &mschap2_peer_challenge,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   212  	  "specify CHAP peer challenge" },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   213  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   214  	{ NULL }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   215  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   216  #endif /* PPP_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   217  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   218  #if PPP_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   219  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   220   * chapms_generate_challenge - generate a challenge for MS-CHAP.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   221   * For MS-CHAP the challenge length is fixed at 8 bytes.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   222   * The length goes in challenge[0] and the actual challenge starts
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   223   * at challenge[1].
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   224   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   225  static void chapms_generate_challenge(ppp_pcb *pcb, unsigned char *challenge) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   226  	LWIP_UNUSED_ARG(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   227  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   228  	*challenge++ = 8;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   229  #ifdef DEBUGMPPEKEY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   230  	if (mschap_challenge && strlen(mschap_challenge) == 8)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   231  		memcpy(challenge, mschap_challenge, 8);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   232  	else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   233  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   234  		magic_random_bytes(challenge, 8);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   235  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   236  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   237  static void chapms2_generate_challenge(ppp_pcb *pcb, unsigned char *challenge) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   238  	LWIP_UNUSED_ARG(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   239  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   240  	*challenge++ = 16;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   241  #ifdef DEBUGMPPEKEY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   242  	if (mschap_challenge && strlen(mschap_challenge) == 16)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   243  		memcpy(challenge, mschap_challenge, 16);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   244  	else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   245  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   246  		magic_random_bytes(challenge, 16);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   247  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   248  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   249  static int chapms_verify_response(ppp_pcb *pcb, int id, const char *name,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   250  		       const unsigned char *secret, int secret_len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   251  		       const unsigned char *challenge, const unsigned char *response,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   252  		       char *message, int message_space) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   253  	unsigned char md[MS_CHAP_RESPONSE_LEN];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   254  	int diff;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   255  	int challenge_len, response_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   256  	LWIP_UNUSED_ARG(id);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   257  	LWIP_UNUSED_ARG(name);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   258  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   259  	challenge_len = *challenge++;	/* skip length, is 8 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   260  	response_len = *response++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   261  	if (response_len != MS_CHAP_RESPONSE_LEN)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   262  		goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   263  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   264  #ifndef MSLANMAN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   265  	if (!response[MS_CHAP_USENT]) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   266  		/* Should really propagate this into the error packet. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   267  		ppp_notice("Peer request for LANMAN auth not supported");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   268  		goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   269  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   270  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   271  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   272  	/* Generate the expected response. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   273  	ChapMS(pcb, (const u_char *)challenge, (const char *)secret, secret_len, md);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   274  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   275  #ifdef MSLANMAN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   276  	/* Determine which part of response to verify against */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   277  	if (!response[MS_CHAP_USENT])
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   278  		diff = memcmp(&response[MS_CHAP_LANMANRESP],
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   279  			      &md[MS_CHAP_LANMANRESP], MS_CHAP_LANMANRESP_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   280  	else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   281  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   282  		diff = memcmp(&response[MS_CHAP_NTRESP], &md[MS_CHAP_NTRESP],
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   283  			      MS_CHAP_NTRESP_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   284  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   285  	if (diff == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   286  		ppp_slprintf(message, message_space, "Access granted");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   287  		return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   288  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   289  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   290   bad:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   291  	/* See comments below for MS-CHAP V2 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   292  	ppp_slprintf(message, message_space, "E=691 R=1 C=%0.*B V=0",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   293  		 challenge_len, challenge);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   294  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   295  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   296  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   297  static int chapms2_verify_response(ppp_pcb *pcb, int id, const char *name,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   298  			const unsigned char *secret, int secret_len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   299  			const unsigned char *challenge, const unsigned char *response,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   300  			char *message, int message_space) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   301  	unsigned char md[MS_CHAP2_RESPONSE_LEN];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   302  	char saresponse[MS_AUTH_RESPONSE_LENGTH+1];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   303  	int challenge_len, response_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   304  	LWIP_UNUSED_ARG(id);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   305  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   306  	challenge_len = *challenge++;	/* skip length, is 16 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   307  	response_len = *response++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   308  	if (response_len != MS_CHAP2_RESPONSE_LEN)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   309  		goto bad;	/* not even the right length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   310  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   311  	/* Generate the expected response and our mutual auth. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   312  	ChapMS2(pcb, (const u_char*)challenge, (const u_char*)&response[MS_CHAP2_PEER_CHALLENGE], name,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   313  		(const char *)secret, secret_len, md,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   314  		(unsigned char *)saresponse, MS_CHAP2_AUTHENTICATOR);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   315  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   316  	/* compare MDs and send the appropriate status */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   317  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   318  	 * Per RFC 2759, success message must be formatted as
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   319  	 *     "S=<auth_string> M=<message>"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   320  	 * where
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   321  	 *     <auth_string> is the Authenticator Response (mutual auth)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   322  	 *     <message> is a text message
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   323  	 *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   324  	 * However, some versions of Windows (win98 tested) do not know
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   325  	 * about the M=<message> part (required per RFC 2759) and flag
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   326  	 * it as an error (reported incorrectly as an encryption error
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   327  	 * to the user).  Since the RFC requires it, and it can be
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   328  	 * useful information, we supply it if the peer is a conforming
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   329  	 * system.  Luckily (?), win98 sets the Flags field to 0x04
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   330  	 * (contrary to RFC requirements) so we can use that to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   331  	 * distinguish between conforming and non-conforming systems.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   332  	 *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   333  	 * Special thanks to Alex Swiridov <say@real.kharkov.ua> for
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   334  	 * help debugging this.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   335  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   336  	if (memcmp(&md[MS_CHAP2_NTRESP], &response[MS_CHAP2_NTRESP],
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   337  		   MS_CHAP2_NTRESP_LEN) == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   338  		if (response[MS_CHAP2_FLAGS])
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   339  			ppp_slprintf(message, message_space, "S=%s", saresponse);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   340  		else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   341  			ppp_slprintf(message, message_space, "S=%s M=%s",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   342  				 saresponse, "Access granted");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   343  		return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   344  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   345  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   346   bad:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   347  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   348  	 * Failure message must be formatted as
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   349  	 *     "E=e R=r C=c V=v M=m"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   350  	 * where
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   351  	 *     e = error code (we use 691, ERROR_AUTHENTICATION_FAILURE)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   352  	 *     r = retry (we use 1, ok to retry)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   353  	 *     c = challenge to use for next response, we reuse previous
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   354  	 *     v = Change Password version supported, we use 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   355  	 *     m = text message
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   356  	 *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   357  	 * The M=m part is only for MS-CHAPv2.  Neither win2k nor
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   358  	 * win98 (others untested) display the message to the user anyway.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   359  	 * They also both ignore the E=e code.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   360  	 *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   361  	 * Note that it's safe to reuse the same challenge as we don't
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   362  	 * actually accept another response based on the error message
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   363  	 * (and no clients try to resend a response anyway).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   364  	 *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   365  	 * Basically, this whole bit is useless code, even the small
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   366  	 * implementation here is only because of overspecification.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   367  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   368  	ppp_slprintf(message, message_space, "E=691 R=1 C=%0.*B V=0 M=%s",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   369  		 challenge_len, challenge, "Access denied");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   370  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   371  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   372  #endif /* PPP_SERVER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   373  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   374  static void chapms_make_response(ppp_pcb *pcb, unsigned char *response, int id, const char *our_name,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   375  		     const unsigned char *challenge, const char *secret, int secret_len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   376  		     unsigned char *private_) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   377  	LWIP_UNUSED_ARG(id);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   378  	LWIP_UNUSED_ARG(our_name);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   379  	LWIP_UNUSED_ARG(private_);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   380  	challenge++;	/* skip length, should be 8 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   381  	*response++ = MS_CHAP_RESPONSE_LEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   382  	ChapMS(pcb, challenge, secret, secret_len, response);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   383  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   384  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   385  static void chapms2_make_response(ppp_pcb *pcb, unsigned char *response, int id, const char *our_name,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   386  		      const unsigned char *challenge, const char *secret, int secret_len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   387  		      unsigned char *private_) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   388  	LWIP_UNUSED_ARG(id);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   389  	challenge++;	/* skip length, should be 16 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   390  	*response++ = MS_CHAP2_RESPONSE_LEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   391  	ChapMS2(pcb, challenge,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   392  #ifdef DEBUGMPPEKEY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   393  		mschap2_peer_challenge,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   394  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   395  		NULL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   396  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   397  		our_name, secret, secret_len, response, private_,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   398  		MS_CHAP2_AUTHENTICATEE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   399  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   400  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   401  static int chapms2_check_success(ppp_pcb *pcb, unsigned char *msg, int len, unsigned char *private_) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   402  	LWIP_UNUSED_ARG(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   403  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   404  	if ((len < MS_AUTH_RESPONSE_LENGTH + 2) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   405  	    strncmp((char *)msg, "S=", 2) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   406  		/* Packet does not start with "S=" */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   407  		ppp_error("MS-CHAPv2 Success packet is badly formed.");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   408  		return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   409  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   410  	msg += 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   411  	len -= 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   412  	if (len < MS_AUTH_RESPONSE_LENGTH
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   413  	    || memcmp(msg, private_, MS_AUTH_RESPONSE_LENGTH)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   414  		/* Authenticator Response did not match expected. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   415  		ppp_error("MS-CHAPv2 mutual authentication failed.");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   416  		return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   417  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   418  	/* Authenticator Response matches. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   419  	msg += MS_AUTH_RESPONSE_LENGTH; /* Eat it */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   420  	len -= MS_AUTH_RESPONSE_LENGTH;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   421  	if ((len >= 3) && !strncmp((char *)msg, " M=", 3)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   422  		msg += 3; /* Eat the delimiter */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   423  	} else if (len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   424  		/* Packet has extra text which does not begin " M=" */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   425  		ppp_error("MS-CHAPv2 Success packet is badly formed.");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   426  		return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   427  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   428  	return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   429  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   430  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   431  static void chapms_handle_failure(ppp_pcb *pcb, unsigned char *inp, int len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   432  	int err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   433  	const char *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   434  	char msg[64];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   435  	LWIP_UNUSED_ARG(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   436  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   437  	/* We want a null-terminated string for strxxx(). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   438  	len = LWIP_MIN(len, 63);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   439  	MEMCPY(msg, inp, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   440  	msg[len] = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   441  	p = msg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   442  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   443  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   444  	 * Deal with MS-CHAP formatted failure messages; just print the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   445  	 * M=<message> part (if any).  For MS-CHAP we're not really supposed
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   446  	 * to use M=<message>, but it shouldn't hurt.  See
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   447  	 * chapms[2]_verify_response.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   448  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   449  	if (!strncmp(p, "E=", 2))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   450  		err = strtol(p+2, NULL, 10); /* Remember the error code. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   451  	else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   452  		goto print_msg; /* Message is badly formatted. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   453  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   454  	if (len && ((p = strstr(p, " M=")) != NULL)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   455  		/* M=<message> field found. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   456  		p += 3;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   457  	} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   458  		/* No M=<message>; use the error code. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   459  		switch (err) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   460  		case MS_CHAP_ERROR_RESTRICTED_LOGON_HOURS:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   461  			p = "E=646 Restricted logon hours";
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   462  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   463  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   464  		case MS_CHAP_ERROR_ACCT_DISABLED:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   465  			p = "E=647 Account disabled";
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   466  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   467  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   468  		case MS_CHAP_ERROR_PASSWD_EXPIRED:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   469  			p = "E=648 Password expired";
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   470  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   471  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   472  		case MS_CHAP_ERROR_NO_DIALIN_PERMISSION:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   473  			p = "E=649 No dialin permission";
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   474  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   475  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   476  		case MS_CHAP_ERROR_AUTHENTICATION_FAILURE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   477  			p = "E=691 Authentication failure";
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   478  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   479  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   480  		case MS_CHAP_ERROR_CHANGING_PASSWORD:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   481  			/* Should never see this, we don't support Change Password. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   482  			p = "E=709 Error changing password";
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   483  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   484  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   485  		default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   486  			ppp_error("Unknown MS-CHAP authentication failure: %.*v",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   487  			      len, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   488  			return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   489  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   490  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   491  print_msg:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   492  	if (p != NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   493  		ppp_error("MS-CHAP authentication failed: %v", p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   494  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   495  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   496  static void ChallengeResponse(const u_char *challenge,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   497  		  const u_char PasswordHash[MD4_SIGNATURE_SIZE],
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   498  		  u_char response[24]) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   499      u_char    ZPasswordHash[21];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   500      lwip_des_context des;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   501      u_char des_key[8];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   502  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   503      BZERO(ZPasswordHash, sizeof(ZPasswordHash));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   504      MEMCPY(ZPasswordHash, PasswordHash, MD4_SIGNATURE_SIZE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   505  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   506  #if 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   507      dbglog("ChallengeResponse - ZPasswordHash %.*B",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   508  	   sizeof(ZPasswordHash), ZPasswordHash);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   509  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   510  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   511      pppcrypt_56_to_64_bit_key(ZPasswordHash + 0, des_key);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   512      lwip_des_init(&des);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   513      lwip_des_setkey_enc(&des, des_key);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   514      lwip_des_crypt_ecb(&des, challenge, response +0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   515      lwip_des_free(&des);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   516  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   517      pppcrypt_56_to_64_bit_key(ZPasswordHash + 7, des_key);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   518      lwip_des_init(&des);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   519      lwip_des_setkey_enc(&des, des_key);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   520      lwip_des_crypt_ecb(&des, challenge, response +8);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   521      lwip_des_free(&des);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   522  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   523      pppcrypt_56_to_64_bit_key(ZPasswordHash + 14, des_key);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   524      lwip_des_init(&des);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   525      lwip_des_setkey_enc(&des, des_key);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   526      lwip_des_crypt_ecb(&des, challenge, response +16);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   527      lwip_des_free(&des);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   528  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   529  #if 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   530      dbglog("ChallengeResponse - response %.24B", response);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   531  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   532  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   533  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   534  static void ChallengeHash(const u_char PeerChallenge[16], const u_char *rchallenge,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   535  	      const char *username, u_char Challenge[8]) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   536      lwip_sha1_context	sha1Context;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   537      u_char	sha1Hash[SHA1_SIGNATURE_SIZE];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   538      const char	*user;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   539  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   540      /* remove domain from "domain\username" */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   541      if ((user = strrchr(username, '\\')) != NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   542  	++user;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   543      else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   544  	user = username;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   545  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   546      lwip_sha1_init(&sha1Context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   547      lwip_sha1_starts(&sha1Context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   548      lwip_sha1_update(&sha1Context, PeerChallenge, 16);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   549      lwip_sha1_update(&sha1Context, rchallenge, 16);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   550      lwip_sha1_update(&sha1Context, (const unsigned char*)user, strlen(user));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   551      lwip_sha1_finish(&sha1Context, sha1Hash);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   552      lwip_sha1_free(&sha1Context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   553  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   554      MEMCPY(Challenge, sha1Hash, 8);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   555  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   556  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   557  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   558   * Convert the ASCII version of the password to Unicode.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   559   * This implicitly supports 8-bit ISO8859/1 characters.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   560   * This gives us the little-endian representation, which
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   561   * is assumed by all M$ CHAP RFCs.  (Unicode byte ordering
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   562   * is machine-dependent.)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   563   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   564  static void ascii2unicode(const char ascii[], int ascii_len, u_char unicode[]) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   565      int i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   566  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   567      BZERO(unicode, ascii_len * 2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   568      for (i = 0; i < ascii_len; i++)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   569  	unicode[i * 2] = (u_char) ascii[i];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   570  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   571  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   572  static void NTPasswordHash(u_char *secret, int secret_len, u_char hash[MD4_SIGNATURE_SIZE]) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   573      lwip_md4_context		md4Context;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   574  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   575      lwip_md4_init(&md4Context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   576      lwip_md4_starts(&md4Context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   577      lwip_md4_update(&md4Context, secret, secret_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   578      lwip_md4_finish(&md4Context, hash);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   579      lwip_md4_free(&md4Context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   580  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   581  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   582  static void ChapMS_NT(const u_char *rchallenge, const char *secret, int secret_len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   583  	  u_char NTResponse[24]) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   584      u_char	unicodePassword[MAX_NT_PASSWORD * 2];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   585      u_char	PasswordHash[MD4_SIGNATURE_SIZE];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   586  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   587      /* Hash the Unicode version of the secret (== password). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   588      ascii2unicode(secret, secret_len, unicodePassword);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   589      NTPasswordHash(unicodePassword, secret_len * 2, PasswordHash);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   590  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   591      ChallengeResponse(rchallenge, PasswordHash, NTResponse);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   592  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   593  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   594  static void ChapMS2_NT(const u_char *rchallenge, const u_char PeerChallenge[16], const char *username,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   595  	   const char *secret, int secret_len, u_char NTResponse[24]) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   596      u_char	unicodePassword[MAX_NT_PASSWORD * 2];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   597      u_char	PasswordHash[MD4_SIGNATURE_SIZE];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   598      u_char	Challenge[8];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   599  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   600      ChallengeHash(PeerChallenge, rchallenge, username, Challenge);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   601  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   602      /* Hash the Unicode version of the secret (== password). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   603      ascii2unicode(secret, secret_len, unicodePassword);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   604      NTPasswordHash(unicodePassword, secret_len * 2, PasswordHash);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   605  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   606      ChallengeResponse(Challenge, PasswordHash, NTResponse);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   607  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   608  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   609  #ifdef MSLANMAN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   610  static u_char *StdText = (u_char *)"KGS!@#$%"; /* key from rasapi32.dll */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   611  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   612  static void ChapMS_LANMan(u_char *rchallenge, char *secret, int secret_len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   613  	      unsigned char *response) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   614      int			i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   615      u_char		UcasePassword[MAX_NT_PASSWORD]; /* max is actually 14 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   616      u_char		PasswordHash[MD4_SIGNATURE_SIZE];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   617      lwip_des_context des;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   618      u_char des_key[8];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   619  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   620      /* LANMan password is case insensitive */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   621      BZERO(UcasePassword, sizeof(UcasePassword));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   622      for (i = 0; i < secret_len; i++)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   623         UcasePassword[i] = (u_char)toupper(secret[i]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   624  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   625      pppcrypt_56_to_64_bit_key(UcasePassword +0, des_key);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   626      lwip_des_init(&des);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   627      lwip_des_setkey_enc(&des, des_key);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   628      lwip_des_crypt_ecb(&des, StdText, PasswordHash +0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   629      lwip_des_free(&des);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   630  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   631      pppcrypt_56_to_64_bit_key(UcasePassword +7, des_key);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   632      lwip_des_init(&des);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   633      lwip_des_setkey_enc(&des, des_key);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   634      lwip_des_crypt_ecb(&des, StdText, PasswordHash +8);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   635      lwip_des_free(&des);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   636  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   637      ChallengeResponse(rchallenge, PasswordHash, &response[MS_CHAP_LANMANRESP]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   638  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   639  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   640  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   641  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   642  static void GenerateAuthenticatorResponse(const u_char PasswordHashHash[MD4_SIGNATURE_SIZE],
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   643  			      u_char NTResponse[24], const u_char PeerChallenge[16],
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   644  			      const u_char *rchallenge, const char *username,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   645  			      u_char authResponse[MS_AUTH_RESPONSE_LENGTH+1]) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   646      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   647       * "Magic" constants used in response generation, from RFC 2759.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   648       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   649      static const u_char Magic1[39] = /* "Magic server to client signing constant" */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   650  	{ 0x4D, 0x61, 0x67, 0x69, 0x63, 0x20, 0x73, 0x65, 0x72, 0x76,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   651  	  0x65, 0x72, 0x20, 0x74, 0x6F, 0x20, 0x63, 0x6C, 0x69, 0x65,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   652  	  0x6E, 0x74, 0x20, 0x73, 0x69, 0x67, 0x6E, 0x69, 0x6E, 0x67,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   653  	  0x20, 0x63, 0x6F, 0x6E, 0x73, 0x74, 0x61, 0x6E, 0x74 };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   654      static const u_char Magic2[41] = /* "Pad to make it do more than one iteration" */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   655  	{ 0x50, 0x61, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x6D, 0x61, 0x6B,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   656  	  0x65, 0x20, 0x69, 0x74, 0x20, 0x64, 0x6F, 0x20, 0x6D, 0x6F,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   657  	  0x72, 0x65, 0x20, 0x74, 0x68, 0x61, 0x6E, 0x20, 0x6F, 0x6E,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   658  	  0x65, 0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6F,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   659  	  0x6E };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   660  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   661      int		i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   662      lwip_sha1_context	sha1Context;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   663      u_char	Digest[SHA1_SIGNATURE_SIZE];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   664      u_char	Challenge[8];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   665  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   666      lwip_sha1_init(&sha1Context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   667      lwip_sha1_starts(&sha1Context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   668      lwip_sha1_update(&sha1Context, PasswordHashHash, MD4_SIGNATURE_SIZE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   669      lwip_sha1_update(&sha1Context, NTResponse, 24);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   670      lwip_sha1_update(&sha1Context, Magic1, sizeof(Magic1));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   671      lwip_sha1_finish(&sha1Context, Digest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   672      lwip_sha1_free(&sha1Context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   673  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   674      ChallengeHash(PeerChallenge, rchallenge, username, Challenge);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   675  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   676      lwip_sha1_init(&sha1Context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   677      lwip_sha1_starts(&sha1Context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   678      lwip_sha1_update(&sha1Context, Digest, sizeof(Digest));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   679      lwip_sha1_update(&sha1Context, Challenge, sizeof(Challenge));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   680      lwip_sha1_update(&sha1Context, Magic2, sizeof(Magic2));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   681      lwip_sha1_finish(&sha1Context, Digest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   682      lwip_sha1_free(&sha1Context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   683  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   684      /* Convert to ASCII hex string. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   685      for (i = 0; i < LWIP_MAX((MS_AUTH_RESPONSE_LENGTH / 2), (int)sizeof(Digest)); i++)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   686  	sprintf((char *)&authResponse[i * 2], "%02X", Digest[i]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   687  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   688  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   689  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   690  static void GenerateAuthenticatorResponsePlain(
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   691  		 const char *secret, int secret_len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   692  		 u_char NTResponse[24], const u_char PeerChallenge[16],
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   693  		 const u_char *rchallenge, const char *username,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   694  		 u_char authResponse[MS_AUTH_RESPONSE_LENGTH+1]) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   695      u_char	unicodePassword[MAX_NT_PASSWORD * 2];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   696      u_char	PasswordHash[MD4_SIGNATURE_SIZE];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   697      u_char	PasswordHashHash[MD4_SIGNATURE_SIZE];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   698  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   699      /* Hash (x2) the Unicode version of the secret (== password). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   700      ascii2unicode(secret, secret_len, unicodePassword);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   701      NTPasswordHash(unicodePassword, secret_len * 2, PasswordHash);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   702      NTPasswordHash(PasswordHash, sizeof(PasswordHash),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   703  		   PasswordHashHash);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   704  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   705      GenerateAuthenticatorResponse(PasswordHashHash, NTResponse, PeerChallenge,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   706  				  rchallenge, username, authResponse);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   707  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   708  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   709  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   710  #if MPPE_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   711  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   712   * Set mppe_xxxx_key from MS-CHAP credentials. (see RFC 3079)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   713   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   714  static void Set_Start_Key(ppp_pcb *pcb, const u_char *rchallenge, const char *secret, int secret_len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   715      u_char	unicodePassword[MAX_NT_PASSWORD * 2];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   716      u_char	PasswordHash[MD4_SIGNATURE_SIZE];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   717      u_char	PasswordHashHash[MD4_SIGNATURE_SIZE];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   718      lwip_sha1_context	sha1Context;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   719      u_char	Digest[SHA1_SIGNATURE_SIZE];	/* >= MPPE_MAX_KEY_LEN */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   720  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   721      /* Hash (x2) the Unicode version of the secret (== password). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   722      ascii2unicode(secret, secret_len, unicodePassword);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   723      NTPasswordHash(unicodePassword, secret_len * 2, PasswordHash);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   724      NTPasswordHash(PasswordHash, sizeof(PasswordHash), PasswordHashHash);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   725  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   726      lwip_sha1_init(&sha1Context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   727      lwip_sha1_starts(&sha1Context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   728      lwip_sha1_update(&sha1Context, PasswordHashHash, MD4_SIGNATURE_SIZE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   729      lwip_sha1_update(&sha1Context, PasswordHashHash, MD4_SIGNATURE_SIZE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   730      lwip_sha1_update(&sha1Context, rchallenge, 8);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   731      lwip_sha1_finish(&sha1Context, Digest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   732      lwip_sha1_free(&sha1Context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   733  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   734      /* Same key in both directions. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   735      mppe_set_key(pcb, &pcb->mppe_comp, Digest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   736      mppe_set_key(pcb, &pcb->mppe_decomp, Digest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   737  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   738      pcb->mppe_keys_set = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   739  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   740  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   741  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   742   * Set mppe_xxxx_key from MS-CHAPv2 credentials. (see RFC 3079)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   743   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   744  static void SetMasterKeys(ppp_pcb *pcb, const char *secret, int secret_len, u_char NTResponse[24], int IsServer) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   745      u_char	unicodePassword[MAX_NT_PASSWORD * 2];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   746      u_char	PasswordHash[MD4_SIGNATURE_SIZE];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   747      u_char	PasswordHashHash[MD4_SIGNATURE_SIZE];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   748      lwip_sha1_context	sha1Context;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   749      u_char	MasterKey[SHA1_SIGNATURE_SIZE];	/* >= MPPE_MAX_KEY_LEN */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   750      u_char	Digest[SHA1_SIGNATURE_SIZE];	/* >= MPPE_MAX_KEY_LEN */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   751      const u_char *s;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   752  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   753      /* "This is the MPPE Master Key" */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   754      static const u_char Magic1[27] =
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   755  	{ 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   756  	  0x68, 0x65, 0x20, 0x4d, 0x50, 0x50, 0x45, 0x20, 0x4d,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   757  	  0x61, 0x73, 0x74, 0x65, 0x72, 0x20, 0x4b, 0x65, 0x79 };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   758      /* "On the client side, this is the send key; "
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   759         "on the server side, it is the receive key." */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   760      static const u_char Magic2[84] =
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   761  	{ 0x4f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   762  	  0x65, 0x6e, 0x74, 0x20, 0x73, 0x69, 0x64, 0x65, 0x2c, 0x20,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   763  	  0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   764  	  0x65, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x6b, 0x65, 0x79,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   765  	  0x3b, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   766  	  0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x73, 0x69, 0x64, 0x65,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   767  	  0x2c, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   768  	  0x65, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   769  	  0x6b, 0x65, 0x79, 0x2e };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   770      /* "On the client side, this is the receive key; "
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   771         "on the server side, it is the send key." */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   772      static const u_char Magic3[84] =
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   773  	{ 0x4f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   774  	  0x65, 0x6e, 0x74, 0x20, 0x73, 0x69, 0x64, 0x65, 0x2c, 0x20,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   775  	  0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   776  	  0x65, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   777  	  0x6b, 0x65, 0x79, 0x3b, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   778  	  0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x73,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   779  	  0x69, 0x64, 0x65, 0x2c, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   780  	  0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x20,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   781  	  0x6b, 0x65, 0x79, 0x2e };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   782  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   783      /* Hash (x2) the Unicode version of the secret (== password). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   784      ascii2unicode(secret, secret_len, unicodePassword);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   785      NTPasswordHash(unicodePassword, secret_len * 2, PasswordHash);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   786      NTPasswordHash(PasswordHash, sizeof(PasswordHash), PasswordHashHash);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   787  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   788      lwip_sha1_init(&sha1Context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   789      lwip_sha1_starts(&sha1Context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   790      lwip_sha1_update(&sha1Context, PasswordHashHash, MD4_SIGNATURE_SIZE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   791      lwip_sha1_update(&sha1Context, NTResponse, 24);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   792      lwip_sha1_update(&sha1Context, Magic1, sizeof(Magic1));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   793      lwip_sha1_finish(&sha1Context, MasterKey);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   794      lwip_sha1_free(&sha1Context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   795  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   796      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   797       * generate send key
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   798       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   799      if (IsServer)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   800  	s = Magic3;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   801      else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   802  	s = Magic2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   803      lwip_sha1_init(&sha1Context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   804      lwip_sha1_starts(&sha1Context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   805      lwip_sha1_update(&sha1Context, MasterKey, 16);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   806      lwip_sha1_update(&sha1Context, mppe_sha1_pad1, SHA1_PAD_SIZE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   807      lwip_sha1_update(&sha1Context, s, 84);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   808      lwip_sha1_update(&sha1Context, mppe_sha1_pad2, SHA1_PAD_SIZE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   809      lwip_sha1_finish(&sha1Context, Digest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   810      lwip_sha1_free(&sha1Context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   811  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   812      mppe_set_key(pcb, &pcb->mppe_comp, Digest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   813  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   814      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   815       * generate recv key
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   816       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   817      if (IsServer)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   818  	s = Magic2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   819      else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   820  	s = Magic3;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   821      lwip_sha1_init(&sha1Context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   822      lwip_sha1_starts(&sha1Context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   823      lwip_sha1_update(&sha1Context, MasterKey, 16);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   824      lwip_sha1_update(&sha1Context, mppe_sha1_pad1, SHA1_PAD_SIZE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   825      lwip_sha1_update(&sha1Context, s, 84);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   826      lwip_sha1_update(&sha1Context, mppe_sha1_pad2, SHA1_PAD_SIZE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   827      lwip_sha1_finish(&sha1Context, Digest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   828      lwip_sha1_free(&sha1Context);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   829  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   830      mppe_set_key(pcb, &pcb->mppe_decomp, Digest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   831  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   832      pcb->mppe_keys_set = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   833  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   834  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   835  #endif /* MPPE_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   836  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   837  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   838  static void ChapMS(ppp_pcb *pcb, const u_char *rchallenge, const char *secret, int secret_len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   839         unsigned char *response) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   840  #if !MPPE_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   841      LWIP_UNUSED_ARG(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   842  #endif /* !MPPE_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   843      BZERO(response, MS_CHAP_RESPONSE_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   844  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   845      ChapMS_NT(rchallenge, secret, secret_len, &response[MS_CHAP_NTRESP]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   846  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   847  #ifdef MSLANMAN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   848      ChapMS_LANMan(rchallenge, secret, secret_len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   849  		  &response[MS_CHAP_LANMANRESP]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   850  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   851      /* preferred method is set by option  */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   852      response[MS_CHAP_USENT] = !ms_lanman;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   853  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   854      response[MS_CHAP_USENT] = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   855  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   856  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   857  #if MPPE_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   858      Set_Start_Key(pcb, rchallenge, secret, secret_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   859  #endif /* MPPE_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   860  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   861  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   862  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   863  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   864   * If PeerChallenge is NULL, one is generated and the PeerChallenge
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   865   * field of response is filled in.  Call this way when generating a response.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   866   * If PeerChallenge is supplied, it is copied into the PeerChallenge field.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   867   * Call this way when verifying a response (or debugging).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   868   * Do not call with PeerChallenge = response.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   869   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   870   * The PeerChallenge field of response is then used for calculation of the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   871   * Authenticator Response.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   872   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   873  static void ChapMS2(ppp_pcb *pcb, const u_char *rchallenge, const u_char *PeerChallenge,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   874  	const char *user, const char *secret, int secret_len, unsigned char *response,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   875  	u_char authResponse[], int authenticator) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   876      /* ARGSUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   877      LWIP_UNUSED_ARG(authenticator);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   878  #if !MPPE_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   879      LWIP_UNUSED_ARG(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   880  #endif /* !MPPE_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   881  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   882      BZERO(response, MS_CHAP2_RESPONSE_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   883  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   884      /* Generate the Peer-Challenge if requested, or copy it if supplied. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   885      if (!PeerChallenge)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   886  	magic_random_bytes(&response[MS_CHAP2_PEER_CHALLENGE], MS_CHAP2_PEER_CHAL_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   887      else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   888  	MEMCPY(&response[MS_CHAP2_PEER_CHALLENGE], PeerChallenge,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   889  	      MS_CHAP2_PEER_CHAL_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   890  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   891      /* Generate the NT-Response */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   892      ChapMS2_NT(rchallenge, &response[MS_CHAP2_PEER_CHALLENGE], user,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   893  	       secret, secret_len, &response[MS_CHAP2_NTRESP]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   894  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   895      /* Generate the Authenticator Response. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   896      GenerateAuthenticatorResponsePlain(secret, secret_len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   897  				       &response[MS_CHAP2_NTRESP],
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   898  				       &response[MS_CHAP2_PEER_CHALLENGE],
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   899  				       rchallenge, user, authResponse);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   900  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   901  #if MPPE_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   902      SetMasterKeys(pcb, secret, secret_len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   903  		  &response[MS_CHAP2_NTRESP], authenticator);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   904  #endif /* MPPE_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   905  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   906  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   907  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   908  #if MPPE_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   909  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   910   * Set MPPE options from plugins.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   911   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   912  void set_mppe_enc_types(int policy, int types) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   913      /* Early exit for unknown policies. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   914      if (policy != MPPE_ENC_POL_ENC_ALLOWED ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   915  	policy != MPPE_ENC_POL_ENC_REQUIRED)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   916  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   917  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   918      /* Don't modify MPPE if it's optional and wasn't already configured. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   919      if (policy == MPPE_ENC_POL_ENC_ALLOWED && !ccp_wantoptions[0].mppe)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   920  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   921  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   922      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   923       * Disable undesirable encryption types.  Note that we don't ENABLE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   924       * any encryption types, to avoid overriding manual configuration.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   925       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   926      switch(types) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   927  	case MPPE_ENC_TYPES_RC4_40:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   928  	    ccp_wantoptions[0].mppe &= ~MPPE_OPT_128;	/* disable 128-bit */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   929  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   930  	case MPPE_ENC_TYPES_RC4_128:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   931  	    ccp_wantoptions[0].mppe &= ~MPPE_OPT_40;	/* disable 40-bit */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   932  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   933  	default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   934  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   935      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   936  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   937  #endif /* MPPE_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   938  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   939  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   940  const struct chap_digest_type chapms_digest = {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   941  	CHAP_MICROSOFT,		/* code */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   942  #if PPP_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   943  	chapms_generate_challenge,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   944  	chapms_verify_response,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   945  #endif /* PPP_SERVER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   946  	chapms_make_response,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   947  	NULL,			/* check_success */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   948  	chapms_handle_failure,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   949  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   950  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   951  const struct chap_digest_type chapms2_digest = {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   952  	CHAP_MICROSOFT_V2,	/* code */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   953  #if PPP_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   954  	chapms2_generate_challenge,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   955  	chapms2_verify_response,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   956  #endif /* PPP_SERVER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   957  	chapms2_make_response,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   958  	chapms2_check_success,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   959  	chapms_handle_failure,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   960  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   961  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\chap_ms.c	   962  #endif /* PPP_SUPPORT && MSCHAP_SUPPORT */

	; Module end
