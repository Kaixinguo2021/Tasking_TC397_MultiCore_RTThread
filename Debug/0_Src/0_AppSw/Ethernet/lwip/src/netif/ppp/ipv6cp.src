	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\.ipv6cp.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Rtl8211f -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\ipv6cp.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\ipv6cp.src ..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\ipv6cp.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\ipv6cp.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	736
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\ipv6cp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L5
	.byte	2
	.byte	'int',0,4,5,3
	.word	173
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	180
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	222
	.byte	7
	.word	222
	.byte	8
	.byte	'__cmpswapw',0
	.word	238
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	243
	.byte	9
	.byte	'value',0
	.word	222
	.byte	9
	.byte	'compare',0
	.word	222
	.byte	0,2
	.byte	'short int',0,2,5,10
	.byte	'__wchar_t',0,1,1,1
	.word	300
	.byte	10
	.byte	'__size_t',0,1,1,1
	.word	222
	.byte	10
	.byte	'__ptrdiff_t',0,1,1,1
	.word	173
	.byte	11,1,7
	.word	368
	.byte	10
	.byte	'__codeptr',0,1,1,1
	.word	370
	.byte	10
	.byte	'__intptr_t',0,1,1,1
	.word	173
	.byte	10
	.byte	'__uintptr_t',0,1,1,1
	.word	222
	.byte	2
	.byte	'unsigned char',0,1,8,10
	.byte	'uint8',0,2,108,29
	.word	432
	.byte	2
	.byte	'unsigned short int',0,2,7,10
	.byte	'uint16',0,2,112,29
	.word	463
	.byte	2
	.byte	'unsigned long int',0,4,7,10
	.byte	'uint32',0,2,116,29
	.word	500
	.byte	2
	.byte	'char',0,1,6,10
	.byte	'sint8',0,2,125,29
	.word	536
	.byte	10
	.byte	'sint16',0,2,129,1,29
	.word	300
	.byte	2
	.byte	'long int',0,4,5,10
	.byte	'sint32',0,2,134,1,29
	.word	574
	.byte	2
	.byte	'long long int',0,8,5,10
	.byte	'sint64',0,2,141,1,29
	.word	602
	.byte	2
	.byte	'float',0,4,4,10
	.byte	'float32',0,2,170,1,29
	.word	635
	.byte	12
	.byte	'void',0,7
	.word	661
	.byte	10
	.byte	'pvoid',0,3,54,28
	.word	667
	.byte	10
	.byte	'Ifx_TickTime',0,3,76,28
	.word	602
	.byte	10
	.byte	'u32_t',0,4,87,16
	.word	500
	.byte	10
	.byte	'intmax_t',0,5,198,2,41
	.word	602
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,22,0,3,8,58,15,59,15,57,15,73,19,0,0,11,21,0,54,15,0,0,12,59,0
	.byte	3,8,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\ipv6cp.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'cc.h',0,2,0,0
	.byte	'stdint.h',0,3,0,0,0
.L9:
.L7:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	     1  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	     2   * ipv6cp.c - PPP IPV6 Control Protocol.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	     3   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	     4   * Copyright (c) 1999 Tommi Komulainen.  All rights reserved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	     5   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	     6   * Redistribution and use in source and binary forms, with or without
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	     7   * modification, are permitted provided that the following conditions
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	     8   * are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	     9   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    10   * 1. Redistributions of source code must retain the above copyright
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    11   *    notice, this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    12   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    13   * 2. Redistributions in binary form must reproduce the above copyright
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    14   *    notice, this list of conditions and the following disclaimer in
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    15   *    the documentation and/or other materials provided with the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    16   *    distribution.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    17   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    18   * 3. The name(s) of the authors of this software must not be used to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    19   *    endorse or promote products derived from this software without
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    20   *    prior written permission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    21   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    22   * 4. Redistributions of any form whatsoever must retain the following
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    23   *    acknowledgment:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    24   *    "This product includes software developed by Tommi Komulainen
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    25   *     <Tommi.Komulainen@iki.fi>".
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    26   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    27   * THE AUTHORS OF THIS SOFTWARE DISCLAIM ALL WARRANTIES WITH REGARD TO
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    28   * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    29   * AND FITNESS, IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    30   * SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    31   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    32   * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    33   * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    34   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    35   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    36  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    37  /*  Original version, based on RFC2023 :
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    38  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    39      Copyright (c) 1995, 1996, 1997 Francis.Dupont@inria.fr, INRIA Rocquencourt,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    40      Alain.Durand@imag.fr, IMAG,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    41      Jean-Luc.Richier@imag.fr, IMAG-LSR.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    42  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    43      Copyright (c) 1998, 1999 Francis.Dupont@inria.fr, GIE DYADE,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    44      Alain.Durand@imag.fr, IMAG,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    45      Jean-Luc.Richier@imag.fr, IMAG-LSR.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    46  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    47      Ce travail a été fait au sein du GIE DYADE (Groupement d'Intérêt
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    48      Économique ayant pour membres BULL S.A. et l'INRIA).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    49  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    50      Ce logiciel informatique est disponible aux conditions
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    51      usuelles dans la recherche, c'est-à-dire qu'il peut
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    52      être utilisé, copié, modifié, distribué à l'unique
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    53      condition que ce texte soit conservé afin que
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    54      l'origine de ce logiciel soit reconnue.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    55  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    56      Le nom de l'Institut National de Recherche en Informatique
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    57      et en Automatique (INRIA), de l'IMAG, ou d'une personne morale
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    58      ou physique ayant participé à l'élaboration de ce logiciel ne peut
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    59      être utilisé sans son accord préalable explicite.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    60  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    61      Ce logiciel est fourni tel quel sans aucune garantie,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    62      support ou responsabilité d'aucune sorte.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    63      Ce logiciel est dérivé de sources d'origine
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    64      "University of California at Berkeley" et
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    65      "Digital Equipment Corporation" couvertes par des copyrights.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    66  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    67      L'Institut d'Informatique et de Mathématiques Appliquées de Grenoble (IMAG)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    68      est une fédération d'unités mixtes de recherche du CNRS, de l'Institut National
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    69      Polytechnique de Grenoble et de l'Université Joseph Fourier regroupant
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    70      sept laboratoires dont le laboratoire Logiciels, Systèmes, Réseaux (LSR).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    71  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    72      This work has been done in the context of GIE DYADE (joint R & D venture
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    73      between BULL S.A. and INRIA).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    74  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    75      This software is available with usual "research" terms
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    76      with the aim of retain credits of the software. 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    77      Permission to use, copy, modify and distribute this software for any
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    78      purpose and without fee is hereby granted, provided that the above
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    79      copyright notice and this permission notice appear in all copies,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    80      and the name of INRIA, IMAG, or any contributor not be used in advertising
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    81      or publicity pertaining to this material without the prior explicit
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    82      permission. The software is provided "as is" without any
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    83      warranties, support or liabilities of any kind.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    84      This software is derived from source code from
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    85      "University of California at Berkeley" and
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    86      "Digital Equipment Corporation" protected by copyrights.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    87  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    88      Grenoble's Institute of Computer Science and Applied Mathematics (IMAG)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    89      is a federation of seven research units funded by the CNRS, National
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    90      Polytechnic Institute of Grenoble and University Joseph Fourier.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    91      The research unit in Software, Systems, Networks (LSR) is member of IMAG.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    92  */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    93  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    94  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    95   * Derived from :
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    96   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    97   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    98   * ipcp.c - PPP IP Control Protocol.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	    99   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   100   * Copyright (c) 1984-2000 Carnegie Mellon University. All rights reserved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   101   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   102   * Redistribution and use in source and binary forms, with or without
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   103   * modification, are permitted provided that the following conditions
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   104   * are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   105   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   106   * 1. Redistributions of source code must retain the above copyright
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   107   *    notice, this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   108   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   109   * 2. Redistributions in binary form must reproduce the above copyright
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   110   *    notice, this list of conditions and the following disclaimer in
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   111   *    the documentation and/or other materials provided with the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   112   *    distribution.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   113   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   114   * 3. The name "Carnegie Mellon University" must not be used to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   115   *    endorse or promote products derived from this software without
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   116   *    prior written permission. For permission or any legal
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   117   *    details, please contact
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   118   *      Office of Technology Transfer
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   119   *      Carnegie Mellon University
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   120   *      5000 Forbes Avenue
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   121   *      Pittsburgh, PA  15213-3890
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   122   *      (412) 268-4387, fax: (412) 268-7395
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   123   *      tech-transfer@andrew.cmu.edu
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   124   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   125   * 4. Redistributions of any form whatsoever must retain the following
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   126   *    acknowledgment:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   127   *    "This product includes software developed by Computing Services
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   128   *     at Carnegie Mellon University (http://www.cmu.edu/computing/)."
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   129   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   130   * CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   131   * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   132   * AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   133   * FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   134   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   135   * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   136   * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   137   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   138   * $Id: ipv6cp.c,v 1.21 2005/08/25 23:59:34 paulus Exp $ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   139   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   140  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   141  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   142   * @todo: 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   143   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   144   * Proxy Neighbour Discovery.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   145   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   146   * Better defines for selecting the ordering of
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   147   *   interface up / set address.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   148   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   149  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   150  #include "netif/ppp/ppp_opts.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   151  #if PPP_SUPPORT && PPP_IPV6_SUPPORT  /* don't build if not configured for use in lwipopts.h */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   152  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   153  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   154  #include <stdio.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   155  #include <string.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   156  #include <unistd.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   157  #include <netdb.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   158  #include <sys/param.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   159  #include <sys/types.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   160  #include <sys/socket.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   161  #include <netinet/in.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   162  #include <arpa/inet.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   163  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   164  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   165  #include "netif/ppp/ppp_impl.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   166  #include "netif/ppp/fsm.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   167  #include "netif/ppp/ipcp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   168  #include "netif/ppp/ipv6cp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   169  #include "netif/ppp/magic.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   170  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   171  /* global vars */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   172  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   173  int no_ifaceid_neg = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   174  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   175  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   176  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   177   * Callbacks for fsm code.  (CI = Configuration Information)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   178   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   179  static void ipv6cp_resetci(fsm *f); /* Reset our CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   180  static int  ipv6cp_cilen(fsm *f); /* Return length of our CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   181  static void ipv6cp_addci(fsm *f, u_char *ucp, int *lenp); /* Add our CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   182  static int  ipv6cp_ackci(fsm *f, u_char *p, int len); /* Peer ack'd our CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   183  static int  ipv6cp_nakci(fsm *f, u_char *p, int len, int treat_as_reject); /* Peer nak'd our CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   184  static int  ipv6cp_rejci(fsm *f, u_char *p, int len); /* Peer rej'd our CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   185  static int  ipv6cp_reqci(fsm *f, u_char *inp, int *len, int reject_if_disagree); /* Rcv CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   186  static void ipv6cp_up(fsm *f); /* We're UP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   187  static void ipv6cp_down(fsm *f); /* We're DOWN */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   188  static void ipv6cp_finished(fsm *f); /* Don't need lower layer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   189  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   190  static const fsm_callbacks ipv6cp_callbacks = { /* IPV6CP callback routines */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   191      ipv6cp_resetci,		/* Reset our Configuration Information */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   192      ipv6cp_cilen,		/* Length of our Configuration Information */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   193      ipv6cp_addci,		/* Add our Configuration Information */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   194      ipv6cp_ackci,		/* ACK our Configuration Information */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   195      ipv6cp_nakci,		/* NAK our Configuration Information */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   196      ipv6cp_rejci,		/* Reject our Configuration Information */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   197      ipv6cp_reqci,		/* Request peer's Configuration Information */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   198      ipv6cp_up,			/* Called when fsm reaches OPENED state */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   199      ipv6cp_down,		/* Called when fsm leaves OPENED state */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   200      NULL,			/* Called when we want the lower layer up */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   201      ipv6cp_finished,		/* Called when we want the lower layer down */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   202      NULL,			/* Called when Protocol-Reject received */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   203      NULL,			/* Retransmission is necessary */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   204      NULL,			/* Called to handle protocol-specific codes */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   205      "IPV6CP"			/* String name of protocol */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   206  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   207  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   208  #if PPP_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   209  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   210   * Command-line options.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   211   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   212  static int setifaceid(char **arg));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   213  static void printifaceid(option_t *,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   214  			      void (*)(void *, char *, ...), void *));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   215  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   216  static option_t ipv6cp_option_list[] = {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   217      { "ipv6", o_special, (void *)setifaceid,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   218        "Set interface identifiers for IPV6",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   219        OPT_A2PRINTER, (void *)printifaceid },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   220  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   221      { "+ipv6", o_bool, &ipv6cp_protent.enabled_flag,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   222        "Enable IPv6 and IPv6CP", OPT_PRIO | 1 },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   223      { "noipv6", o_bool, &ipv6cp_protent.enabled_flag,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   224        "Disable IPv6 and IPv6CP", OPT_PRIOSUB },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   225      { "-ipv6", o_bool, &ipv6cp_protent.enabled_flag,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   226        "Disable IPv6 and IPv6CP", OPT_PRIOSUB | OPT_ALIAS },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   227  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   228      { "ipv6cp-accept-local", o_bool, &ipv6cp_allowoptions[0].accept_local,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   229        "Accept peer's interface identifier for us", 1 },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   230  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   231      { "ipv6cp-use-ipaddr", o_bool, &ipv6cp_allowoptions[0].use_ip,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   232        "Use (default) IPv4 address as interface identifier", 1 },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   233  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   234      { "ipv6cp-use-persistent", o_bool, &ipv6cp_wantoptions[0].use_persistent,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   235        "Use uniquely-available persistent value for link local address", 1 },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   236  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   237      { "ipv6cp-restart", o_int, &ipv6cp_fsm[0].timeouttime,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   238        "Set timeout for IPv6CP", OPT_PRIO },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   239      { "ipv6cp-max-terminate", o_int, &ipv6cp_fsm[0].maxtermtransmits,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   240        "Set max #xmits for term-reqs", OPT_PRIO },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   241      { "ipv6cp-max-configure", o_int, &ipv6cp_fsm[0].maxconfreqtransmits,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   242        "Set max #xmits for conf-reqs", OPT_PRIO },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   243      { "ipv6cp-max-failure", o_int, &ipv6cp_fsm[0].maxnakloops,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   244        "Set max #conf-naks for IPv6CP", OPT_PRIO },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   245  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   246     { NULL }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   247  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   248  #endif /* PPP_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   249  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   250  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   251   * Protocol entry points from main code.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   252   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   253  static void ipv6cp_init(ppp_pcb *pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   254  static void ipv6cp_open(ppp_pcb *pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   255  static void ipv6cp_close(ppp_pcb *pcb, const char *reason);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   256  static void ipv6cp_lowerup(ppp_pcb *pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   257  static void ipv6cp_lowerdown(ppp_pcb *pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   258  static void ipv6cp_input(ppp_pcb *pcb, u_char *p, int len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   259  static void ipv6cp_protrej(ppp_pcb *pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   260  #if PPP_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   261  static void ipv6_check_options(void);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   262  #endif /* PPP_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   263  #if DEMAND_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   264  static int  ipv6_demand_conf(int u);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   265  #endif /* DEMAND_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   266  #if PRINTPKT_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   267  static int ipv6cp_printpkt(const u_char *p, int plen,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   268  		void (*printer)(void *, const char *, ...), void *arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   269  #endif /* PRINTPKT_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   270  #if DEMAND_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   271  static int ipv6_active_pkt(u_char *pkt, int len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   272  #endif /* DEMAND_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   273  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   274  const struct protent ipv6cp_protent = {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   275      PPP_IPV6CP,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   276      ipv6cp_init,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   277      ipv6cp_input,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   278      ipv6cp_protrej,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   279      ipv6cp_lowerup,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   280      ipv6cp_lowerdown,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   281      ipv6cp_open,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   282      ipv6cp_close,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   283  #if PRINTPKT_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   284      ipv6cp_printpkt,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   285  #endif /* PRINTPKT_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   286  #if PPP_DATAINPUT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   287      NULL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   288  #endif /* PPP_DATAINPUT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   289  #if PRINTPKT_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   290      "IPV6CP",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   291      "IPV6",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   292  #endif /* PRINTPKT_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   293  #if PPP_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   294      ipv6cp_option_list,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   295      ipv6_check_options,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   296  #endif /* PPP_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   297  #if DEMAND_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   298      ipv6_demand_conf,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   299      ipv6_active_pkt
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   300  #endif /* DEMAND_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   301  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   302  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   303  static void ipv6cp_clear_addrs(ppp_pcb *pcb, eui64_t ourid, eui64_t hisid);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   304  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   305  static void ipv6cp_script(char *));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   306  static void ipv6cp_script_done(void *));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   307  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   308  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   309  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   310   * Lengths of configuration options.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   311   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   312  #define CILEN_VOID	2
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   313  #define CILEN_COMPRESS	4	/* length for RFC2023 compress opt. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   314  #define CILEN_IFACEID   10	/* RFC2472, interface identifier    */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   315  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   316  #define CODENAME(x)	((x) == CONFACK ? "ACK" : \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   317  			 (x) == CONFNAK ? "NAK" : "REJ")
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   318  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   319  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   320  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   321   * This state variable is used to ensure that we don't
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   322   * run an ipcp-up/down script while one is already running.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   323   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   324  static enum script_state {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   325      s_down,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   326      s_up,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   327  } ipv6cp_script_state;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   328  static pid_t ipv6cp_script_pid;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   329  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   330  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   331  static char *llv6_ntoa(eui64_t ifaceid);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   332  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   333  #if PPP_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   334  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   335   * setifaceid - set the interface identifiers manually
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   336   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   337  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   338  setifaceid(argv)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   339      char **argv;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   340  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   341      char *comma, *arg, c;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   342      ipv6cp_options *wo = &ipv6cp_wantoptions[0];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   343      struct in6_addr addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   344      static int prio_local, prio_remote;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   345  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   346  #define VALIDID(a) ( (((a).s6_addr32[0] == 0) && ((a).s6_addr32[1] == 0)) && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   347  			(((a).s6_addr32[2] != 0) || ((a).s6_addr32[3] != 0)) )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   348      
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   349      arg = *argv;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   350      if ((comma = strchr(arg, ',')) == NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   351  	comma = arg + strlen(arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   352      
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   353      /* 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   354       * If comma first character, then no local identifier
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   355       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   356      if (comma != arg) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   357  	c = *comma;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   358  	*comma = '\0';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   359  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   360  	if (inet_pton(AF_INET6, arg, &addr) == 0 || !VALIDID(addr)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   361  	    option_error("Illegal interface identifier (local): %s", arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   362  	    return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   363  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   364  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   365  	if (option_priority >= prio_local) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   366  	    eui64_copy(addr.s6_addr32[2], wo->ourid);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   367  	    wo->opt_local = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   368  	    prio_local = option_priority;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   369  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   370  	*comma = c;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   371      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   372      
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   373      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   374       * If comma last character, the no remote identifier
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   375       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   376      if (*comma != 0 && *++comma != '\0') {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   377  	if (inet_pton(AF_INET6, comma, &addr) == 0 || !VALIDID(addr)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   378  	    option_error("Illegal interface identifier (remote): %s", comma);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   379  	    return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   380  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   381  	if (option_priority >= prio_remote) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   382  	    eui64_copy(addr.s6_addr32[2], wo->hisid);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   383  	    wo->opt_remote = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   384  	    prio_remote = option_priority;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   385  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   386      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   387  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   388      if (override_value("+ipv6", option_priority, option_source))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   389  	ipv6cp_protent.enabled_flag = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   390      return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   391  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   392  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   393  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   394  printifaceid(opt, printer, arg)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   395      option_t *opt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   396      void (*printer)(void *, char *, ...));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   397      void *arg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   398  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   399  	ipv6cp_options *wo = &ipv6cp_wantoptions[0];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   400  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   401  	if (wo->opt_local)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   402  		printer(arg, "%s", llv6_ntoa(wo->ourid));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   403  	printer(arg, ",");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   404  	if (wo->opt_remote)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   405  		printer(arg, "%s", llv6_ntoa(wo->hisid));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   406  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   407  #endif /* PPP_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   408  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   409  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   410   * Make a string representation of a network address.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   411   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   412  static char *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   413  llv6_ntoa(eui64_t ifaceid)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   414  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   415      static char b[26];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   416  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   417      sprintf(b, "fe80::%02x%02x:%02x%02x:%02x%02x:%02x%02x",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   418        ifaceid.e8[0], ifaceid.e8[1], ifaceid.e8[2], ifaceid.e8[3],
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   419        ifaceid.e8[4], ifaceid.e8[5], ifaceid.e8[6], ifaceid.e8[7]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   420  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   421      return b;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   422  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   423  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   424  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   425  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   426   * ipv6cp_init - Initialize IPV6CP.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   427   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   428  static void ipv6cp_init(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   429      fsm *f = &pcb->ipv6cp_fsm;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   430      ipv6cp_options *wo = &pcb->ipv6cp_wantoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   431      ipv6cp_options *ao = &pcb->ipv6cp_allowoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   432  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   433      f->pcb = pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   434      f->protocol = PPP_IPV6CP;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   435      f->callbacks = &ipv6cp_callbacks;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   436      fsm_init(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   437  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   438  #if 0 /* Not necessary, everything is cleared in ppp_new() */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   439      memset(wo, 0, sizeof(*wo));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   440      memset(ao, 0, sizeof(*ao));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   441  #endif /* 0 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   442  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   443      wo->accept_local = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   444      wo->neg_ifaceid = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   445      ao->neg_ifaceid = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   446  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   447  #ifdef IPV6CP_COMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   448      wo->neg_vj = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   449      ao->neg_vj = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   450      wo->vj_protocol = IPV6CP_COMP;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   451  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   452  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   453  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   454  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   455  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   456  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   457   * ipv6cp_open - IPV6CP is allowed to come up.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   458   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   459  static void ipv6cp_open(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   460      fsm_open(&pcb->ipv6cp_fsm);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   461  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   462  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   463  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   464  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   465   * ipv6cp_close - Take IPV6CP down.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   466   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   467  static void ipv6cp_close(ppp_pcb *pcb, const char *reason) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   468      fsm_close(&pcb->ipv6cp_fsm, reason);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   469  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   470  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   471  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   472  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   473   * ipv6cp_lowerup - The lower layer is up.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   474   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   475  static void ipv6cp_lowerup(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   476      fsm_lowerup(&pcb->ipv6cp_fsm);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   477  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   478  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   479  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   480  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   481   * ipv6cp_lowerdown - The lower layer is down.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   482   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   483  static void ipv6cp_lowerdown(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   484      fsm_lowerdown(&pcb->ipv6cp_fsm);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   485  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   486  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   487  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   488  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   489   * ipv6cp_input - Input IPV6CP packet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   490   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   491  static void ipv6cp_input(ppp_pcb *pcb, u_char *p, int len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   492      fsm_input(&pcb->ipv6cp_fsm, p, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   493  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   494  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   495  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   496  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   497   * ipv6cp_protrej - A Protocol-Reject was received for IPV6CP.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   498   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   499   * Pretend the lower layer went down, so we shut up.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   500   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   501  static void ipv6cp_protrej(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   502      fsm_lowerdown(&pcb->ipv6cp_fsm);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   503  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   504  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   505  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   506  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   507   * ipv6cp_resetci - Reset our CI.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   508   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   509  static void ipv6cp_resetci(fsm *f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   510      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   511      ipv6cp_options *wo = &pcb->ipv6cp_wantoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   512      ipv6cp_options *go = &pcb->ipv6cp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   513      ipv6cp_options *ao = &pcb->ipv6cp_allowoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   514  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   515      wo->req_ifaceid = wo->neg_ifaceid && ao->neg_ifaceid;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   516      
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   517      if (!wo->opt_local) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   518  	eui64_magic_nz(wo->ourid);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   519      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   520      
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   521      *go = *wo;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   522      eui64_zero(go->hisid);	/* last proposed interface identifier */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   523  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   524  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   525  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   526  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   527   * ipv6cp_cilen - Return length of our CI.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   528   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   529  static int ipv6cp_cilen(fsm *f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   530      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   531      ipv6cp_options *go = &pcb->ipv6cp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   532  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   533  #ifdef IPV6CP_COMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   534  #define LENCIVJ(neg)		(neg ? CILEN_COMPRESS : 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   535  #endif /* IPV6CP_COMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   536  #define LENCIIFACEID(neg)	(neg ? CILEN_IFACEID : 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   537  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   538      return (LENCIIFACEID(go->neg_ifaceid) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   539  #ifdef IPV6CP_COMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   540  	    LENCIVJ(go->neg_vj) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   541  #endif /* IPV6CP_COMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   542  	    0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   543  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   544  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   545  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   546  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   547   * ipv6cp_addci - Add our desired CIs to a packet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   548   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   549  static void ipv6cp_addci(fsm *f, u_char *ucp, int *lenp) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   550      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   551      ipv6cp_options *go = &pcb->ipv6cp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   552      int len = *lenp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   553  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   554  #ifdef IPV6CP_COMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   555  #define ADDCIVJ(opt, neg, val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   556      if (neg) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   557  	int vjlen = CILEN_COMPRESS; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   558  	if (len >= vjlen) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   559  	    PUTCHAR(opt, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   560  	    PUTCHAR(vjlen, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   561  	    PUTSHORT(val, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   562  	    len -= vjlen; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   563  	} else \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   564  	    neg = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   565      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   566  #endif /* IPV6CP_COMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   567  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   568  #define ADDCIIFACEID(opt, neg, val1) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   569      if (neg) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   570  	int idlen = CILEN_IFACEID; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   571  	if (len >= idlen) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   572  	    PUTCHAR(opt, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   573  	    PUTCHAR(idlen, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   574  	    eui64_put(val1, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   575  	    len -= idlen; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   576  	} else \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   577  	    neg = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   578      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   579  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   580      ADDCIIFACEID(CI_IFACEID, go->neg_ifaceid, go->ourid);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   581  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   582  #ifdef IPV6CP_COMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   583      ADDCIVJ(CI_COMPRESSTYPE, go->neg_vj, go->vj_protocol);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   584  #endif /* IPV6CP_COMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   585  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   586      *lenp -= len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   587  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   588  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   589  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   590  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   591   * ipv6cp_ackci - Ack our CIs.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   592   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   593   * Returns:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   594   *	0 - Ack was bad.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   595   *	1 - Ack was good.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   596   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   597  static int ipv6cp_ackci(fsm *f, u_char *p, int len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   598      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   599      ipv6cp_options *go = &pcb->ipv6cp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   600      u_short cilen, citype;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   601  #ifdef IPV6CP_COMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   602      u_short cishort;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   603  #endif /* IPV6CP_COMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   604      eui64_t ifaceid;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   605  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   606      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   607       * CIs must be in exactly the same order that we sent...
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   608       * Check packet length and CI length at each step.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   609       * If we find any deviations, then this packet is bad.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   610       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   611  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   612  #ifdef IPV6CP_COMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   613  #define ACKCIVJ(opt, neg, val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   614      if (neg) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   615  	int vjlen = CILEN_COMPRESS; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   616  	if ((len -= vjlen) < 0) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   617  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   618  	GETCHAR(citype, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   619  	GETCHAR(cilen, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   620  	if (cilen != vjlen || \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   621  	    citype != opt)  \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   622  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   623  	GETSHORT(cishort, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   624  	if (cishort != val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   625  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   626      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   627  #endif /* IPV6CP_COMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   628  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   629  #define ACKCIIFACEID(opt, neg, val1) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   630      if (neg) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   631  	int idlen = CILEN_IFACEID; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   632  	if ((len -= idlen) < 0) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   633  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   634  	GETCHAR(citype, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   635  	GETCHAR(cilen, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   636  	if (cilen != idlen || \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   637  	    citype != opt) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   638  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   639  	eui64_get(ifaceid, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   640  	if (! eui64_equals(val1, ifaceid)) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   641  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   642      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   643  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   644      ACKCIIFACEID(CI_IFACEID, go->neg_ifaceid, go->ourid);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   645  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   646  #ifdef IPV6CP_COMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   647      ACKCIVJ(CI_COMPRESSTYPE, go->neg_vj, go->vj_protocol);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   648  #endif /* IPV6CP_COMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   649  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   650      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   651       * If there are any remaining CIs, then this packet is bad.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   652       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   653      if (len != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   654  	goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   655      return (1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   656  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   657  bad:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   658      IPV6CPDEBUG(("ipv6cp_ackci: received bad Ack!"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   659      return (0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   660  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   661  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   662  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   663   * ipv6cp_nakci - Peer has sent a NAK for some of our CIs.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   664   * This should not modify any state if the Nak is bad
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   665   * or if IPV6CP is in the OPENED state.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   666   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   667   * Returns:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   668   *	0 - Nak was bad.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   669   *	1 - Nak was good.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   670   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   671  static int ipv6cp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   672      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   673      ipv6cp_options *go = &pcb->ipv6cp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   674      u_char citype, cilen, *next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   675  #ifdef IPV6CP_COMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   676      u_short cishort;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   677  #endif /* IPV6CP_COMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   678      eui64_t ifaceid;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   679      ipv6cp_options no;		/* options we've seen Naks for */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   680      ipv6cp_options try_;	/* options to request next time */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   681  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   682      BZERO(&no, sizeof(no));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   683      try_ = *go;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   684  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   685      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   686       * Any Nak'd CIs must be in exactly the same order that we sent.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   687       * Check packet length and CI length at each step.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   688       * If we find any deviations, then this packet is bad.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   689       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   690  #define NAKCIIFACEID(opt, neg, code) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   691      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   692  	len >= (cilen = CILEN_IFACEID) && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   693  	p[1] == cilen && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   694  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   695  	len -= cilen; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   696  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   697  	eui64_get(ifaceid, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   698  	no.neg = 1; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   699  	code \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   700      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   701  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   702  #ifdef IPV6CP_COMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   703  #define NAKCIVJ(opt, neg, code) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   704      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   705  	((cilen = p[1]) == CILEN_COMPRESS) && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   706  	len >= cilen && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   707  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   708  	len -= cilen; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   709  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   710  	GETSHORT(cishort, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   711  	no.neg = 1; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   712          code \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   713      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   714  #endif /* IPV6CP_COMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   715  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   716      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   717       * Accept the peer's idea of {our,his} interface identifier, if different
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   718       * from our idea, only if the accept_{local,remote} flag is set.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   719       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   720      NAKCIIFACEID(CI_IFACEID, neg_ifaceid,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   721  		 if (treat_as_reject) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   722  		     try_.neg_ifaceid = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   723  		 } else if (go->accept_local) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   724  		     while (eui64_iszero(ifaceid) || 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   725  			    eui64_equals(ifaceid, go->hisid)) /* bad luck */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   726  			 eui64_magic(ifaceid);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   727  		     try_.ourid = ifaceid;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   728  		     IPV6CPDEBUG(("local LL address %s", llv6_ntoa(ifaceid)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   729  		 }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   730  		 );
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   731  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   732  #ifdef IPV6CP_COMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   733      NAKCIVJ(CI_COMPRESSTYPE, neg_vj,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   734  	    {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   735  		if (cishort == IPV6CP_COMP && !treat_as_reject) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   736  		    try_.vj_protocol = cishort;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   737  		} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   738  		    try_.neg_vj = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   739  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   740  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   741  	    );
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   742  #endif /* IPV6CP_COMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   743  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   744      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   745       * There may be remaining CIs, if the peer is requesting negotiation
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   746       * on an option that we didn't include in our request packet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   747       * If they want to negotiate about interface identifier, we comply.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   748       * If they want us to ask for compression, we refuse.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   749       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   750      while (len >= CILEN_VOID) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   751  	GETCHAR(citype, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   752  	GETCHAR(cilen, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   753  	if ( cilen < CILEN_VOID || (len -= cilen) < 0 )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   754  	    goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   755  	next = p + cilen - 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   756  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   757  	switch (citype) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   758  #ifdef IPV6CP_COMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   759  	case CI_COMPRESSTYPE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   760  	    if (go->neg_vj || no.neg_vj ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   761  		(cilen != CILEN_COMPRESS))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   762  		goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   763  	    no.neg_vj = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   764  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   765  #endif /* IPV6CP_COMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   766  	case CI_IFACEID:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   767  	    if (go->neg_ifaceid || no.neg_ifaceid || cilen != CILEN_IFACEID)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   768  		goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   769  	    try_.neg_ifaceid = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   770  	    eui64_get(ifaceid, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   771  	    if (go->accept_local) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   772  		while (eui64_iszero(ifaceid) || 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   773  		       eui64_equals(ifaceid, go->hisid)) /* bad luck */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   774  		    eui64_magic(ifaceid);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   775  		try_.ourid = ifaceid;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   776  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   777  	    no.neg_ifaceid = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   778  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   779  	default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   780  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   781  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   782  	p = next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   783      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   784  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   785      /* If there is still anything left, this packet is bad. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   786      if (len != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   787  	goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   788  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   789      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   790       * OK, the Nak is good.  Now we can update state.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   791       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   792      if (f->state != PPP_FSM_OPENED)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   793  	*go = try_;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   794  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   795      return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   796  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   797  bad:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   798      IPV6CPDEBUG(("ipv6cp_nakci: received bad Nak!"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   799      return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   800  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   801  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   802  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   803  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   804   * ipv6cp_rejci - Reject some of our CIs.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   805   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   806  static int ipv6cp_rejci(fsm *f, u_char *p, int len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   807      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   808      ipv6cp_options *go = &pcb->ipv6cp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   809      u_char cilen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   810  #ifdef IPV6CP_COMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   811      u_short cishort;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   812  #endif /* IPV6CP_COMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   813      eui64_t ifaceid;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   814      ipv6cp_options try_;		/* options to request next time */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   815  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   816      try_ = *go;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   817      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   818       * Any Rejected CIs must be in exactly the same order that we sent.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   819       * Check packet length and CI length at each step.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   820       * If we find any deviations, then this packet is bad.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   821       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   822  #define REJCIIFACEID(opt, neg, val1) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   823      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   824  	len >= (cilen = CILEN_IFACEID) && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   825  	p[1] == cilen && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   826  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   827  	len -= cilen; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   828  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   829  	eui64_get(ifaceid, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   830  	/* Check rejected value. */ \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   831  	if (! eui64_equals(ifaceid, val1)) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   832  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   833  	try_.neg = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   834      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   835  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   836  #ifdef IPV6CP_COMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   837  #define REJCIVJ(opt, neg, val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   838      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   839  	p[1] == CILEN_COMPRESS && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   840  	len >= p[1] && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   841  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   842  	len -= p[1]; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   843  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   844  	GETSHORT(cishort, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   845  	/* Check rejected value. */  \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   846  	if (cishort != val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   847  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   848  	try_.neg = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   849       }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   850  #endif /* IPV6CP_COMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   851  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   852      REJCIIFACEID(CI_IFACEID, neg_ifaceid, go->ourid);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   853  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   854  #ifdef IPV6CP_COMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   855      REJCIVJ(CI_COMPRESSTYPE, neg_vj, go->vj_protocol);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   856  #endif /* IPV6CP_COMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   857  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   858      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   859       * If there are any remaining CIs, then this packet is bad.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   860       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   861      if (len != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   862  	goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   863      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   864       * Now we can update state.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   865       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   866      if (f->state != PPP_FSM_OPENED)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   867  	*go = try_;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   868      return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   869  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   870  bad:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   871      IPV6CPDEBUG(("ipv6cp_rejci: received bad Reject!"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   872      return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   873  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   874  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   875  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   876  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   877   * ipv6cp_reqci - Check the peer's requested CIs and send appropriate response.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   878   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   879   * Returns: CONFACK, CONFNAK or CONFREJ and input packet modified
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   880   * appropriately.  If reject_if_disagree is non-zero, doesn't return
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   881   * CONFNAK; returns CONFREJ if it can't return CONFACK.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   882   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   883   * inp = Requested CIs
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   884   * len = Length of requested CIs
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   885   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   886   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   887  static int ipv6cp_reqci(fsm *f, u_char *inp, int *len, int reject_if_disagree) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   888      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   889      ipv6cp_options *wo = &pcb->ipv6cp_wantoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   890      ipv6cp_options *ho = &pcb->ipv6cp_hisoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   891      ipv6cp_options *ao = &pcb->ipv6cp_allowoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   892      ipv6cp_options *go = &pcb->ipv6cp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   893      u_char *cip, *next;		/* Pointer to current and next CIs */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   894      u_short cilen, citype;	/* Parsed len, type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   895  #ifdef IPV6CP_COMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   896      u_short cishort;		/* Parsed short value */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   897  #endif /* IPV6CP_COMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   898      eui64_t ifaceid;		/* Parsed interface identifier */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   899      int rc = CONFACK;		/* Final packet return code */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   900      int orc;			/* Individual option return code */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   901      u_char *p;			/* Pointer to next char to parse */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   902      u_char *ucp = inp;		/* Pointer to current output char */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   903      int l = *len;		/* Length left */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   904  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   905      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   906       * Reset all his options.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   907       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   908      BZERO(ho, sizeof(*ho));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   909      
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   910      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   911       * Process all his options.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   912       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   913      next = inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   914      while (l) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   915  	orc = CONFACK;			/* Assume success */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   916  	cip = p = next;			/* Remember begining of CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   917  	if (l < 2 ||			/* Not enough data for CI header or */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   918  	    p[1] < 2 ||			/*  CI length too small or */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   919  	    p[1] > l) {			/*  CI length too big? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   920  	    IPV6CPDEBUG(("ipv6cp_reqci: bad CI length!"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   921  	    orc = CONFREJ;		/* Reject bad CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   922  	    cilen = l;			/* Reject till end of packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   923  	    l = 0;			/* Don't loop again */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   924  	    goto endswitch;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   925  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   926  	GETCHAR(citype, p);		/* Parse CI type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   927  	GETCHAR(cilen, p);		/* Parse CI length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   928  	l -= cilen;			/* Adjust remaining length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   929  	next += cilen;			/* Step to next CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   930  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   931  	switch (citype) {		/* Check CI type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   932  	case CI_IFACEID:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   933  	    IPV6CPDEBUG(("ipv6cp: received interface identifier "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   934  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   935  	    if (!ao->neg_ifaceid ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   936  		cilen != CILEN_IFACEID) {	/* Check CI length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   937  		orc = CONFREJ;		/* Reject CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   938  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   939  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   940  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   941  	    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   942  	     * If he has no interface identifier, or if we both have same 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   943  	     * identifier then NAK it with new idea.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   944  	     * In particular, if we don't know his identifier, but he does,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   945  	     * then accept it.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   946  	     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   947  	    eui64_get(ifaceid, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   948  	    IPV6CPDEBUG(("(%s)", llv6_ntoa(ifaceid)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   949  	    if (eui64_iszero(ifaceid) && eui64_iszero(go->ourid)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   950  		orc = CONFREJ;		/* Reject CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   951  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   952  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   953  	    if (!eui64_iszero(wo->hisid) && 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   954  		!eui64_equals(ifaceid, wo->hisid) && 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   955  		eui64_iszero(go->hisid)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   956  		    
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   957  		orc = CONFNAK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   958  		ifaceid = wo->hisid;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   959  		go->hisid = ifaceid;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   960  		DECPTR(sizeof(ifaceid), p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   961  		eui64_put(ifaceid, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   962  	    } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   963  	    if (eui64_iszero(ifaceid) || eui64_equals(ifaceid, go->ourid)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   964  		orc = CONFNAK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   965  		if (eui64_iszero(go->hisid))	/* first time, try option */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   966  		    ifaceid = wo->hisid;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   967  		while (eui64_iszero(ifaceid) || 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   968  		       eui64_equals(ifaceid, go->ourid)) /* bad luck */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   969  		    eui64_magic(ifaceid);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   970  		go->hisid = ifaceid;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   971  		DECPTR(sizeof(ifaceid), p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   972  		eui64_put(ifaceid, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   973  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   974  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   975  	    ho->neg_ifaceid = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   976  	    ho->hisid = ifaceid;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   977  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   978  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   979  #ifdef IPV6CP_COMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   980  	case CI_COMPRESSTYPE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   981  	    IPV6CPDEBUG(("ipv6cp: received COMPRESSTYPE "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   982  	    if (!ao->neg_vj ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   983  		(cilen != CILEN_COMPRESS)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   984  		orc = CONFREJ;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   985  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   986  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   987  	    GETSHORT(cishort, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   988  	    IPV6CPDEBUG(("(%d)", cishort));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   989  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   990  	    if (!(cishort == IPV6CP_COMP)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   991  		orc = CONFREJ;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   992  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   993  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   994  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   995  	    ho->neg_vj = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   996  	    ho->vj_protocol = cishort;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   997  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   998  #endif /* IPV6CP_COMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	   999  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1000  	default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1001  	    orc = CONFREJ;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1002  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1003  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1004  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1005  endswitch:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1006  	IPV6CPDEBUG((" (%s)\n", CODENAME(orc)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1007  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1008  	if (orc == CONFACK &&		/* Good CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1009  	    rc != CONFACK)		/*  but prior CI wasnt? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1010  	    continue;			/* Don't send this one */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1011  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1012  	if (orc == CONFNAK) {		/* Nak this CI? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1013  	    if (reject_if_disagree)	/* Getting fed up with sending NAKs? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1014  		orc = CONFREJ;		/* Get tough if so */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1015  	    else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1016  		if (rc == CONFREJ)	/* Rejecting prior CI? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1017  		    continue;		/* Don't send this one */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1018  		if (rc == CONFACK) {	/* Ack'd all prior CIs? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1019  		    rc = CONFNAK;	/* Not anymore... */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1020  		    ucp = inp;		/* Backup */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1021  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1022  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1023  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1024  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1025  	if (orc == CONFREJ &&		/* Reject this CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1026  	    rc != CONFREJ) {		/*  but no prior ones? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1027  	    rc = CONFREJ;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1028  	    ucp = inp;			/* Backup */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1029  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1030  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1031  	/* Need to move CI? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1032  	if (ucp != cip)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1033  	    MEMCPY(ucp, cip, cilen);	/* Move it */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1034  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1035  	/* Update output pointer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1036  	INCPTR(cilen, ucp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1037      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1038  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1039      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1040       * If we aren't rejecting this packet, and we want to negotiate
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1041       * their identifier and they didn't send their identifier, then we
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1042       * send a NAK with a CI_IFACEID option appended.  We assume the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1043       * input buffer is long enough that we can append the extra
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1044       * option safely.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1045       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1046      if (rc != CONFREJ && !ho->neg_ifaceid &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1047  	wo->req_ifaceid && !reject_if_disagree) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1048  	if (rc == CONFACK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1049  	    rc = CONFNAK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1050  	    ucp = inp;				/* reset pointer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1051  	    wo->req_ifaceid = 0;		/* don't ask again */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1052  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1053  	PUTCHAR(CI_IFACEID, ucp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1054  	PUTCHAR(CILEN_IFACEID, ucp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1055  	eui64_put(wo->hisid, ucp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1056      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1057  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1058      *len = ucp - inp;			/* Compute output length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1059      IPV6CPDEBUG(("ipv6cp: returning Configure-%s", CODENAME(rc)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1060      return (rc);			/* Return final code */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1061  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1062  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1063  #if PPP_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1064  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1065   * ipv6_check_options - check that any IP-related options are OK,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1066   * and assign appropriate defaults.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1067   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1068  static void ipv6_check_options() {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1069      ipv6cp_options *wo = &ipv6cp_wantoptions[0];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1070  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1071      if (!ipv6cp_protent.enabled_flag)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1072  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1073  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1074      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1075       * Persistent link-local id is only used when user has not explicitly
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1076       * configure/hard-code the id
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1077       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1078      if ((wo->use_persistent) && (!wo->opt_local) && (!wo->opt_remote)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1079  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1080  	/* 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1081  	 * On systems where there are no Ethernet interfaces used, there
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1082  	 * may be other ways to obtain a persistent id. Right now, it
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1083  	 * will fall back to using magic [see eui64_magic] below when
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1084  	 * an EUI-48 from MAC address can't be obtained. Other possibilities
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1085  	 * include obtaining EEPROM serial numbers, or some other unique
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1086  	 * yet persistent number. On Sparc platforms, this is possible,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1087  	 * but too bad there's no standards yet for x86 machines.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1088  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1089  	if (ether_to_eui64(&wo->ourid)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1090  	    wo->opt_local = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1091  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1092      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1093  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1094      if (!wo->opt_local) {	/* init interface identifier */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1095  	if (wo->use_ip && eui64_iszero(wo->ourid)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1096  	    eui64_setlo32(wo->ourid, lwip_ntohl(ipcp_wantoptions[0].ouraddr));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1097  	    if (!eui64_iszero(wo->ourid))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1098  		wo->opt_local = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1099  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1100  	
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1101  	while (eui64_iszero(wo->ourid))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1102  	    eui64_magic(wo->ourid);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1103      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1104  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1105      if (!wo->opt_remote) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1106  	if (wo->use_ip && eui64_iszero(wo->hisid)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1107  	    eui64_setlo32(wo->hisid, lwip_ntohl(ipcp_wantoptions[0].hisaddr));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1108  	    if (!eui64_iszero(wo->hisid))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1109  		wo->opt_remote = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1110  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1111      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1112  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1113      if (demand && (eui64_iszero(wo->ourid) || eui64_iszero(wo->hisid))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1114  	option_error("local/remote LL address required for demand-dialling\n");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1115  	exit(1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1116      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1117  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1118  #endif /* PPP_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1119  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1120  #if DEMAND_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1121  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1122   * ipv6_demand_conf - configure the interface as though
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1123   * IPV6CP were up, for use with dial-on-demand.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1124   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1125  static int ipv6_demand_conf(int u) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1126      ipv6cp_options *wo = &ipv6cp_wantoptions[u];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1127  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1128      if (!sif6up(u))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1129  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1130  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1131      if (!sif6addr(u, wo->ourid, wo->hisid))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1132  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1133  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1134      if (!sifnpmode(u, PPP_IPV6, NPMODE_QUEUE))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1135  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1136  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1137      ppp_notice("ipv6_demand_conf");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1138      ppp_notice("local  LL address %s", llv6_ntoa(wo->ourid));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1139      ppp_notice("remote LL address %s", llv6_ntoa(wo->hisid));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1140  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1141      return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1142  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1143  #endif /* DEMAND_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1144  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1145  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1146  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1147   * ipv6cp_up - IPV6CP has come UP.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1148   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1149   * Configure the IPv6 network interface appropriately and bring it up.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1150   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1151  static void ipv6cp_up(fsm *f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1152      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1153      ipv6cp_options *wo = &pcb->ipv6cp_wantoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1154      ipv6cp_options *ho = &pcb->ipv6cp_hisoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1155      ipv6cp_options *go = &pcb->ipv6cp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1156  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1157      IPV6CPDEBUG(("ipv6cp: up"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1158  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1159      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1160       * We must have a non-zero LL address for both ends of the link.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1161       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1162      if (!ho->neg_ifaceid)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1163  	ho->hisid = wo->hisid;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1164  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1165  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1166      if(!no_ifaceid_neg) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1167  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1168  	if (eui64_iszero(ho->hisid)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1169  	    ppp_error("Could not determine remote LL address");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1170  	    ipv6cp_close(f->pcb, "Could not determine remote LL address");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1171  	    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1172  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1173  	if (eui64_iszero(go->ourid)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1174  	    ppp_error("Could not determine local LL address");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1175  	    ipv6cp_close(f->pcb, "Could not determine local LL address");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1176  	    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1177  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1178  	if (eui64_equals(go->ourid, ho->hisid)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1179  	    ppp_error("local and remote LL addresses are equal");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1180  	    ipv6cp_close(f->pcb, "local and remote LL addresses are equal");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1181  	    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1182  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1183  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1184      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1185  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1186  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1187      script_setenv("LLLOCAL", llv6_ntoa(go->ourid), 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1188      script_setenv("LLREMOTE", llv6_ntoa(ho->hisid), 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1189  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1190  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1191  #ifdef IPV6CP_COMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1192      /* set tcp compression */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1193      sif6comp(f->unit, ho->neg_vj);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1194  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1195  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1196  #if DEMAND_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1197      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1198       * If we are doing dial-on-demand, the interface is already
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1199       * configured, so we put out any saved-up packets, then set the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1200       * interface to pass IPv6 packets.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1201       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1202      if (demand) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1203  	if (! eui64_equals(go->ourid, wo->ourid) || 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1204  	    ! eui64_equals(ho->hisid, wo->hisid)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1205  	    if (! eui64_equals(go->ourid, wo->ourid))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1206  		warn("Local LL address changed to %s", 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1207  		     llv6_ntoa(go->ourid));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1208  	    if (! eui64_equals(ho->hisid, wo->hisid))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1209  		warn("Remote LL address changed to %s", 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1210  		     llv6_ntoa(ho->hisid));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1211  	    ipv6cp_clear_addrs(f->pcb, go->ourid, ho->hisid);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1212  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1213  	    /* Set the interface to the new addresses */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1214  	    if (!sif6addr(f->pcb, go->ourid, ho->hisid)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1215  		if (debug)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1216  		    warn("sif6addr failed");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1217  		ipv6cp_close(f->unit, "Interface configuration failed");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1218  		return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1219  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1220  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1221  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1222  	demand_rexmit(PPP_IPV6);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1223  	sifnpmode(f->unit, PPP_IPV6, NPMODE_PASS);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1224  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1225      } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1226  #endif /* DEMAND_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1227      {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1228  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1229  	 * Set LL addresses
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1230  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1231  	if (!sif6addr(f->pcb, go->ourid, ho->hisid)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1232  	    PPPDEBUG(LOG_DEBUG, ("sif6addr failed"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1233  	    ipv6cp_close(f->pcb, "Interface configuration failed");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1234  	    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1235  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1236  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1237  	/* bring the interface up for IPv6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1238  	if (!sif6up(f->pcb)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1239  	    PPPDEBUG(LOG_DEBUG, ("sif6up failed (IPV6)"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1240  	    ipv6cp_close(f->pcb, "Interface configuration failed");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1241  	    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1242  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1243  #if DEMAND_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1244  	sifnpmode(f->pcb, PPP_IPV6, NPMODE_PASS);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1245  #endif /* DEMAND_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1246  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1247  	ppp_notice("local  LL address %s", llv6_ntoa(go->ourid));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1248  	ppp_notice("remote LL address %s", llv6_ntoa(ho->hisid));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1249      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1250  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1251      np_up(f->pcb, PPP_IPV6);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1252      pcb->ipv6cp_is_up = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1253  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1254  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1255      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1256       * Execute the ipv6-up script, like this:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1257       *	/etc/ppp/ipv6-up interface tty speed local-LL remote-LL
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1258       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1259      if (ipv6cp_script_state == s_down && ipv6cp_script_pid == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1260  	ipv6cp_script_state = s_up;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1261  	ipv6cp_script(_PATH_IPV6UP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1262      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1263  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1264  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1265  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1266  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1267  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1268   * ipv6cp_down - IPV6CP has gone DOWN.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1269   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1270   * Take the IPv6 network interface down, clear its addresses
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1271   * and delete routes through it.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1272   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1273  static void ipv6cp_down(fsm *f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1274      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1275      ipv6cp_options *go = &pcb->ipv6cp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1276      ipv6cp_options *ho = &pcb->ipv6cp_hisoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1277  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1278      IPV6CPDEBUG(("ipv6cp: down"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1279  #if PPP_STATS_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1280      update_link_stats(f->unit);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1281  #endif /* PPP_STATS_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1282      if (pcb->ipv6cp_is_up) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1283  	pcb->ipv6cp_is_up = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1284  	np_down(f->pcb, PPP_IPV6);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1285      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1286  #ifdef IPV6CP_COMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1287      sif6comp(f->unit, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1288  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1289  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1290  #if DEMAND_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1291      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1292       * If we are doing dial-on-demand, set the interface
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1293       * to queue up outgoing packets (for now).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1294       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1295      if (demand) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1296  	sifnpmode(f->pcb, PPP_IPV6, NPMODE_QUEUE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1297      } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1298  #endif /* DEMAND_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1299      {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1300  #if DEMAND_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1301  	sifnpmode(f->pcb, PPP_IPV6, NPMODE_DROP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1302  #endif /* DEMAND_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1303  	ipv6cp_clear_addrs(f->pcb,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1304  			   go->ourid,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1305  			   ho->hisid);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1306  	sif6down(f->pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1307      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1308  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1309  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1310      /* Execute the ipv6-down script */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1311      if (ipv6cp_script_state == s_up && ipv6cp_script_pid == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1312  	ipv6cp_script_state = s_down;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1313  	ipv6cp_script(_PATH_IPV6DOWN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1314      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1315  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1316  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1317  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1318  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1319  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1320   * ipv6cp_clear_addrs() - clear the interface addresses, routes,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1321   * proxy neighbour discovery entries, etc.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1322   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1323  static void ipv6cp_clear_addrs(ppp_pcb *pcb, eui64_t ourid, eui64_t hisid) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1324      cif6addr(pcb, ourid, hisid);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1325  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1326  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1327  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1328  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1329   * ipv6cp_finished - possibly shut down the lower layers.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1330   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1331  static void ipv6cp_finished(fsm *f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1332      np_finished(f->pcb, PPP_IPV6);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1333  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1334  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1335  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1336  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1337  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1338   * ipv6cp_script_done - called when the ipv6-up or ipv6-down script
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1339   * has finished.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1340   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1341  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1342  ipv6cp_script_done(arg)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1343      void *arg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1344  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1345      ipv6cp_script_pid = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1346      switch (ipv6cp_script_state) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1347      case s_up:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1348  	if (ipv6cp_fsm[0].state != PPP_FSM_OPENED) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1349  	    ipv6cp_script_state = s_down;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1350  	    ipv6cp_script(_PATH_IPV6DOWN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1351  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1352  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1353      case s_down:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1354  	if (ipv6cp_fsm[0].state == PPP_FSM_OPENED) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1355  	    ipv6cp_script_state = s_up;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1356  	    ipv6cp_script(_PATH_IPV6UP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1357  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1358  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1359      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1360  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1361  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1362  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1363  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1364   * ipv6cp_script - Execute a script with arguments
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1365   * interface-name tty-name speed local-LL remote-LL.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1366   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1367  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1368  ipv6cp_script(script)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1369      char *script;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1370  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1371      char strspeed[32], strlocal[32], strremote[32];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1372      char *argv[8];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1373  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1374      sprintf(strspeed, "%d", baud_rate);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1375      strcpy(strlocal, llv6_ntoa(ipv6cp_gotoptions[0].ourid));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1376      strcpy(strremote, llv6_ntoa(ipv6cp_hisoptions[0].hisid));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1377  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1378      argv[0] = script;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1379      argv[1] = ifname;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1380      argv[2] = devnam;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1381      argv[3] = strspeed;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1382      argv[4] = strlocal;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1383      argv[5] = strremote;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1384      argv[6] = ipparam;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1385      argv[7] = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1386  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1387      ipv6cp_script_pid = run_program(script, argv, 0, ipv6cp_script_done,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1388  				    NULL, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1389  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1390  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1391  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1392  #if PRINTPKT_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1393  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1394   * ipv6cp_printpkt - print the contents of an IPV6CP packet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1395   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1396  static const char* const ipv6cp_codenames[] = {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1397      "ConfReq", "ConfAck", "ConfNak", "ConfRej",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1398      "TermReq", "TermAck", "CodeRej"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1399  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1400  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1401  static int ipv6cp_printpkt(const u_char *p, int plen,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1402  		void (*printer)(void *, const char *, ...), void *arg) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1403      int code, id, len, olen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1404      const u_char *pstart, *optend;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1405  #ifdef IPV6CP_COMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1406      u_short cishort;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1407  #endif /* IPV6CP_COMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1408      eui64_t ifaceid;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1409  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1410      if (plen < HEADERLEN)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1411  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1412      pstart = p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1413      GETCHAR(code, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1414      GETCHAR(id, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1415      GETSHORT(len, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1416      if (len < HEADERLEN || len > plen)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1417  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1418  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1419      if (code >= 1 && code <= (int)LWIP_ARRAYSIZE(ipv6cp_codenames))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1420  	printer(arg, " %s", ipv6cp_codenames[code-1]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1421      else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1422  	printer(arg, " code=0x%x", code);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1423      printer(arg, " id=0x%x", id);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1424      len -= HEADERLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1425      switch (code) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1426      case CONFREQ:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1427      case CONFACK:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1428      case CONFNAK:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1429      case CONFREJ:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1430  	/* print option list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1431  	while (len >= 2) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1432  	    GETCHAR(code, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1433  	    GETCHAR(olen, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1434  	    p -= 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1435  	    if (olen < 2 || olen > len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1436  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1437  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1438  	    printer(arg, " <");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1439  	    len -= olen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1440  	    optend = p + olen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1441  	    switch (code) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1442  #ifdef IPV6CP_COMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1443  	    case CI_COMPRESSTYPE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1444  		if (olen >= CILEN_COMPRESS) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1445  		    p += 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1446  		    GETSHORT(cishort, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1447  		    printer(arg, "compress ");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1448  		    printer(arg, "0x%x", cishort);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1449  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1450  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1451  #endif /* IPV6CP_COMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1452  	    case CI_IFACEID:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1453  		if (olen == CILEN_IFACEID) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1454  		    p += 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1455  		    eui64_get(ifaceid, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1456  		    printer(arg, "addr %s", llv6_ntoa(ifaceid));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1457  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1458  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1459  	    default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1460  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1461  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1462  	    while (p < optend) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1463  		GETCHAR(code, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1464  		printer(arg, " %.2x", code);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1465  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1466  	    printer(arg, ">");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1467  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1468  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1469  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1470      case TERMACK:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1471      case TERMREQ:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1472  	if (len > 0 && *p >= ' ' && *p < 0x7f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1473  	    printer(arg, " ");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1474  	    ppp_print_string(p, len, printer, arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1475  	    p += len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1476  	    len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1477  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1478  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1479      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1480  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1481      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1482  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1483      /* print the rest of the bytes in the packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1484      for (; len > 0; --len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1485  	GETCHAR(code, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1486  	printer(arg, " %.2x", code);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1487      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1488  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1489      return p - pstart;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1490  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1491  #endif /* PRINTPKT_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1492  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1493  #if DEMAND_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1494  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1495   * ipv6_active_pkt - see if this IP packet is worth bringing the link up for.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1496   * We don't bring the link up for IP fragments or for TCP FIN packets
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1497   * with no data.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1498   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1499  #define IP6_HDRLEN	40	/* bytes */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1500  #define IP6_NHDR_FRAG	44	/* fragment IPv6 header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1501  #define TCP_HDRLEN	20
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1502  #define TH_FIN		0x01
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1503  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1504  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1505   * We use these macros because the IP header may be at an odd address,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1506   * and some compilers might use word loads to get th_off or ip_hl.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1507   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1508  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1509  #define get_ip6nh(x)	(((unsigned char *)(x))[6])
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1510  #define get_tcpoff(x)	(((unsigned char *)(x))[12] >> 4)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1511  #define get_tcpflags(x)	(((unsigned char *)(x))[13])
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1512  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1513  static int ipv6_active_pkt(u_char *pkt, int len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1514      u_char *tcp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1515  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1516      len -= PPP_HDRLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1517      pkt += PPP_HDRLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1518      if (len < IP6_HDRLEN)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1519  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1520      if (get_ip6nh(pkt) == IP6_NHDR_FRAG)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1521  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1522      if (get_ip6nh(pkt) != IPPROTO_TCP)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1523  	return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1524      if (len < IP6_HDRLEN + TCP_HDRLEN)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1525  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1526      tcp = pkt + IP6_HDRLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1527      if ((get_tcpflags(tcp) & TH_FIN) != 0 && len == IP6_HDRLEN + get_tcpoff(tcp) * 4)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1528  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1529      return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1530  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1531  #endif /* DEMAND_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1532  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\ipv6cp.c	  1533  #endif /* PPP_SUPPORT && PPP_IPV6_SUPPORT */

	; Module end
