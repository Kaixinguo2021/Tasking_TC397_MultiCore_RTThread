	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\.pppos.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Rtl8211f -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\pppos.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\pppos.src ..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\pppos.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\pppos.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	735
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\pppos.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L5
	.byte	2
	.byte	'int',0,4,5,3
	.word	172
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	179
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	221
	.byte	7
	.word	221
	.byte	8
	.byte	'__cmpswapw',0
	.word	237
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	242
	.byte	9
	.byte	'value',0
	.word	221
	.byte	9
	.byte	'compare',0
	.word	221
	.byte	0,2
	.byte	'short int',0,2,5,10
	.byte	'__wchar_t',0,1,1,1
	.word	299
	.byte	10
	.byte	'__size_t',0,1,1,1
	.word	221
	.byte	10
	.byte	'__ptrdiff_t',0,1,1,1
	.word	172
	.byte	11,1,7
	.word	367
	.byte	10
	.byte	'__codeptr',0,1,1,1
	.word	369
	.byte	10
	.byte	'__intptr_t',0,1,1,1
	.word	172
	.byte	10
	.byte	'__uintptr_t',0,1,1,1
	.word	221
	.byte	2
	.byte	'unsigned char',0,1,8,10
	.byte	'uint8',0,2,108,29
	.word	431
	.byte	2
	.byte	'unsigned short int',0,2,7,10
	.byte	'uint16',0,2,112,29
	.word	462
	.byte	2
	.byte	'unsigned long int',0,4,7,10
	.byte	'uint32',0,2,116,29
	.word	499
	.byte	2
	.byte	'char',0,1,6,10
	.byte	'sint8',0,2,125,29
	.word	535
	.byte	10
	.byte	'sint16',0,2,129,1,29
	.word	299
	.byte	2
	.byte	'long int',0,4,5,10
	.byte	'sint32',0,2,134,1,29
	.word	573
	.byte	2
	.byte	'long long int',0,8,5,10
	.byte	'sint64',0,2,141,1,29
	.word	601
	.byte	2
	.byte	'float',0,4,4,10
	.byte	'float32',0,2,170,1,29
	.word	634
	.byte	12
	.byte	'void',0,7
	.word	660
	.byte	10
	.byte	'pvoid',0,3,54,28
	.word	666
	.byte	10
	.byte	'Ifx_TickTime',0,3,76,28
	.word	601
	.byte	10
	.byte	'u32_t',0,4,87,16
	.word	499
	.byte	10
	.byte	'intmax_t',0,5,198,2,41
	.word	601
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,22,0,3,8,58,15,59,15,57,15,73,19,0,0,11,21,0,54,15,0,0,12,59,0
	.byte	3,8,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\pppos.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'cc.h',0,2,0,0
	.byte	'stdint.h',0,3,0,0,0
.L9:
.L7:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	     1  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	     2   * @file
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	     3   * Network Point to Point Protocol over Serial file.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	     4   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	     5   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	     6  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	     7  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	     8   * Redistribution and use in source and binary forms, with or without modification,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	     9   * are permitted provided that the following conditions are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    10   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    11   * 1. Redistributions of source code must retain the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    12   *    this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    13   * 2. Redistributions in binary form must reproduce the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    14   *    this list of conditions and the following disclaimer in the documentation
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    15   *    and/or other materials provided with the distribution.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    16   * 3. The name of the author may not be used to endorse or promote products
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    17   *    derived from this software without specific prior written permission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    18   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    19   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    20   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    21   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    22   * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    23   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    24   * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    25   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    26   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    27   * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    28   * OF SUCH DAMAGE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    29   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    30   * This file is part of the lwIP TCP/IP stack.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    31   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    32   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    33  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    34  #include "netif/ppp/ppp_opts.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    35  #if PPP_SUPPORT && PPPOS_SUPPORT /* don't build if not configured for use in lwipopts.h */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    36  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    37  #include <string.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    38  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    39  #include "lwip/arch.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    40  #include "lwip/err.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    41  #include "lwip/pbuf.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    42  #include "lwip/sys.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    43  #include "lwip/memp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    44  #include "lwip/netif.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    45  #include "lwip/snmp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    46  #include "lwip/priv/tcpip_priv.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    47  #include "lwip/api.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    48  #include "lwip/ip4.h" /* for ip4_input() */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    49  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    50  #include "netif/ppp/ppp_impl.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    51  #include "netif/ppp/pppos.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    52  #include "netif/ppp/vj.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    53  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    54  /* Memory pool */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    55  LWIP_MEMPOOL_DECLARE(PPPOS_PCB, MEMP_NUM_PPPOS_INTERFACES, sizeof(pppos_pcb), "PPPOS_PCB")
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    56  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    57  /* callbacks called from PPP core */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    58  static err_t pppos_write(ppp_pcb *ppp, void *ctx, struct pbuf *p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    59  static err_t pppos_netif_output(ppp_pcb *ppp, void *ctx, struct pbuf *pb, u16_t protocol);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    60  static void pppos_connect(ppp_pcb *ppp, void *ctx);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    61  #if PPP_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    62  static void pppos_listen(ppp_pcb *ppp, void *ctx);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    63  #endif /* PPP_SERVER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    64  static void pppos_disconnect(ppp_pcb *ppp, void *ctx);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    65  static err_t pppos_destroy(ppp_pcb *ppp, void *ctx);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    66  static void pppos_send_config(ppp_pcb *ppp, void *ctx, u32_t accm, int pcomp, int accomp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    67  static void pppos_recv_config(ppp_pcb *ppp, void *ctx, u32_t accm, int pcomp, int accomp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    68  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    69  /* Prototypes for procedures local to this file. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    70  #if PPP_INPROC_IRQ_SAFE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    71  static void pppos_input_callback(void *arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    72  #endif /* PPP_INPROC_IRQ_SAFE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    73  static void pppos_input_free_current_packet(pppos_pcb *pppos);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    74  static void pppos_input_drop(pppos_pcb *pppos);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    75  static err_t pppos_output_append(pppos_pcb *pppos, err_t err, struct pbuf *nb, u8_t c, u8_t accm, u16_t *fcs);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    76  static err_t pppos_output_last(pppos_pcb *pppos, err_t err, struct pbuf *nb, u16_t *fcs);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    77  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    78  /* Callbacks structure for PPP core */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    79  static const struct link_callbacks pppos_callbacks = {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    80    pppos_connect,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    81  #if PPP_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    82    pppos_listen,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    83  #endif /* PPP_SERVER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    84    pppos_disconnect,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    85    pppos_destroy,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    86    pppos_write,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    87    pppos_netif_output,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    88    pppos_send_config,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    89    pppos_recv_config
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    90  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    91  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    92  /* PPP's Asynchronous-Control-Character-Map.  The mask array is used
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    93   * to select the specific bit for a character. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    94  #define ESCAPE_P(accm, c) ((accm)[(c) >> 3] & 1 << (c & 0x07))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    95  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    96  #if PPP_FCS_TABLE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    97  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    98   * FCS lookup table as calculated by genfcstab.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	    99   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   100  static const u16_t fcstab[256] = {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   101    0x0000, 0x1189, 0x2312, 0x329b, 0x4624, 0x57ad, 0x6536, 0x74bf,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   102    0x8c48, 0x9dc1, 0xaf5a, 0xbed3, 0xca6c, 0xdbe5, 0xe97e, 0xf8f7,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   103    0x1081, 0x0108, 0x3393, 0x221a, 0x56a5, 0x472c, 0x75b7, 0x643e,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   104    0x9cc9, 0x8d40, 0xbfdb, 0xae52, 0xdaed, 0xcb64, 0xf9ff, 0xe876,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   105    0x2102, 0x308b, 0x0210, 0x1399, 0x6726, 0x76af, 0x4434, 0x55bd,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   106    0xad4a, 0xbcc3, 0x8e58, 0x9fd1, 0xeb6e, 0xfae7, 0xc87c, 0xd9f5,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   107    0x3183, 0x200a, 0x1291, 0x0318, 0x77a7, 0x662e, 0x54b5, 0x453c,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   108    0xbdcb, 0xac42, 0x9ed9, 0x8f50, 0xfbef, 0xea66, 0xd8fd, 0xc974,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   109    0x4204, 0x538d, 0x6116, 0x709f, 0x0420, 0x15a9, 0x2732, 0x36bb,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   110    0xce4c, 0xdfc5, 0xed5e, 0xfcd7, 0x8868, 0x99e1, 0xab7a, 0xbaf3,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   111    0x5285, 0x430c, 0x7197, 0x601e, 0x14a1, 0x0528, 0x37b3, 0x263a,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   112    0xdecd, 0xcf44, 0xfddf, 0xec56, 0x98e9, 0x8960, 0xbbfb, 0xaa72,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   113    0x6306, 0x728f, 0x4014, 0x519d, 0x2522, 0x34ab, 0x0630, 0x17b9,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   114    0xef4e, 0xfec7, 0xcc5c, 0xddd5, 0xa96a, 0xb8e3, 0x8a78, 0x9bf1,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   115    0x7387, 0x620e, 0x5095, 0x411c, 0x35a3, 0x242a, 0x16b1, 0x0738,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   116    0xffcf, 0xee46, 0xdcdd, 0xcd54, 0xb9eb, 0xa862, 0x9af9, 0x8b70,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   117    0x8408, 0x9581, 0xa71a, 0xb693, 0xc22c, 0xd3a5, 0xe13e, 0xf0b7,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   118    0x0840, 0x19c9, 0x2b52, 0x3adb, 0x4e64, 0x5fed, 0x6d76, 0x7cff,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   119    0x9489, 0x8500, 0xb79b, 0xa612, 0xd2ad, 0xc324, 0xf1bf, 0xe036,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   120    0x18c1, 0x0948, 0x3bd3, 0x2a5a, 0x5ee5, 0x4f6c, 0x7df7, 0x6c7e,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   121    0xa50a, 0xb483, 0x8618, 0x9791, 0xe32e, 0xf2a7, 0xc03c, 0xd1b5,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   122    0x2942, 0x38cb, 0x0a50, 0x1bd9, 0x6f66, 0x7eef, 0x4c74, 0x5dfd,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   123    0xb58b, 0xa402, 0x9699, 0x8710, 0xf3af, 0xe226, 0xd0bd, 0xc134,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   124    0x39c3, 0x284a, 0x1ad1, 0x0b58, 0x7fe7, 0x6e6e, 0x5cf5, 0x4d7c,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   125    0xc60c, 0xd785, 0xe51e, 0xf497, 0x8028, 0x91a1, 0xa33a, 0xb2b3,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   126    0x4a44, 0x5bcd, 0x6956, 0x78df, 0x0c60, 0x1de9, 0x2f72, 0x3efb,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   127    0xd68d, 0xc704, 0xf59f, 0xe416, 0x90a9, 0x8120, 0xb3bb, 0xa232,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   128    0x5ac5, 0x4b4c, 0x79d7, 0x685e, 0x1ce1, 0x0d68, 0x3ff3, 0x2e7a,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   129    0xe70e, 0xf687, 0xc41c, 0xd595, 0xa12a, 0xb0a3, 0x8238, 0x93b1,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   130    0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   131    0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   132    0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   133  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   134  #define PPP_FCS(fcs, c) (((fcs) >> 8) ^ fcstab[((fcs) ^ (c)) & 0xff])
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   135  #else /* PPP_FCS_TABLE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   136  /* The HDLC polynomial: X**0 + X**5 + X**12 + X**16 (0x8408) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   137  #define PPP_FCS_POLYNOMIAL 0x8408
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   138  static u16_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   139  ppp_get_fcs(u8_t byte)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   140  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   141    unsigned int octet;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   142    int bit;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   143    octet = byte;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   144    for (bit = 8; bit-- > 0; ) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   145      octet = (octet & 0x01) ? ((octet >> 1) ^ PPP_FCS_POLYNOMIAL) : (octet >> 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   146    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   147    return octet & 0xffff;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   148  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   149  #define PPP_FCS(fcs, c) (((fcs) >> 8) ^ ppp_get_fcs(((fcs) ^ (c)) & 0xff))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   150  #endif /* PPP_FCS_TABLE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   151  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   152  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   153   * Values for FCS calculations.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   154   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   155  #define PPP_INITFCS     0xffff  /* Initial FCS value */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   156  #define PPP_GOODFCS     0xf0b8  /* Good final FCS value */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   157  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   158  #if PPP_INPROC_IRQ_SAFE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   159  #define PPPOS_DECL_PROTECT(lev) SYS_ARCH_DECL_PROTECT(lev)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   160  #define PPPOS_PROTECT(lev) SYS_ARCH_PROTECT(lev)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   161  #define PPPOS_UNPROTECT(lev) SYS_ARCH_UNPROTECT(lev)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   162  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   163  #define PPPOS_DECL_PROTECT(lev)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   164  #define PPPOS_PROTECT(lev)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   165  #define PPPOS_UNPROTECT(lev)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   166  #endif /* PPP_INPROC_IRQ_SAFE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   167  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   168  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   169  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   170   * Create a new PPP connection using the given serial I/O device.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   171   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   172   * Return 0 on success, an error code on failure.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   173   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   174  ppp_pcb *pppos_create(struct netif *pppif, pppos_output_cb_fn output_cb,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   175         ppp_link_status_cb_fn link_status_cb, void *ctx_cb)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   176  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   177    pppos_pcb *pppos;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   178    ppp_pcb *ppp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   179    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   180  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   181    pppos = (pppos_pcb *)LWIP_MEMPOOL_ALLOC(PPPOS_PCB);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   182    if (pppos == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   183      return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   184    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   185  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   186    ppp = ppp_new(pppif, &pppos_callbacks, pppos, link_status_cb, ctx_cb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   187    if (ppp == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   188      LWIP_MEMPOOL_FREE(PPPOS_PCB, pppos);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   189      return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   190    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   191  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   192    memset(pppos, 0, sizeof(pppos_pcb));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   193    pppos->ppp = ppp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   194    pppos->output_cb = output_cb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   195    return ppp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   196  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   197  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   198  /* Called by PPP core */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   199  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   200  pppos_write(ppp_pcb *ppp, void *ctx, struct pbuf *p)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   201  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   202    pppos_pcb *pppos = (pppos_pcb *)ctx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   203    u8_t *s;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   204    struct pbuf *nb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   205    u16_t n;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   206    u16_t fcs_out;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   207    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   208    LWIP_UNUSED_ARG(ppp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   209  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   210    /* Grab an output buffer. Using PBUF_POOL here for tx is ok since the pbuf
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   211       gets freed by 'pppos_output_last' before this function returns and thus
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   212       cannot starve rx. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   213    nb = pbuf_alloc(PBUF_RAW, 0, PBUF_POOL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   214    if (nb == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   215      PPPDEBUG(LOG_WARNING, ("pppos_write[%d]: alloc fail\n", ppp->netif->num));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   216      LINK_STATS_INC(link.memerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   217      LINK_STATS_INC(link.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   218      MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   219      pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   220      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   221    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   222  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   223    /* Set nb->tot_len to actual payload length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   224    nb->tot_len = p->len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   225  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   226    /* If the link has been idle, we'll send a fresh flag character to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   227     * flush any noise. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   228    err = ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   229    if ((sys_now() - pppos->last_xmit) >= PPP_MAXIDLEFLAG) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   230      err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   231    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   232  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   233    /* Load output buffer. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   234    fcs_out = PPP_INITFCS;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   235    s = (u8_t*)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   236    n = p->len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   237    while (n-- > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   238      err = pppos_output_append(pppos, err,  nb, *s++, 1, &fcs_out);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   239    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   240  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   241    err = pppos_output_last(pppos, err, nb, &fcs_out);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   242    if (err == ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   243      PPPDEBUG(LOG_INFO, ("pppos_write[%d]: len=%d\n", ppp->netif->num, p->len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   244    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   245      PPPDEBUG(LOG_WARNING, ("pppos_write[%d]: output failed len=%d\n", ppp->netif->num, p->len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   246    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   247    pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   248    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   249  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   250  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   251  /* Called by PPP core */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   252  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   253  pppos_netif_output(ppp_pcb *ppp, void *ctx, struct pbuf *pb, u16_t protocol)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   254  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   255    pppos_pcb *pppos = (pppos_pcb *)ctx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   256    struct pbuf *nb, *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   257    u16_t fcs_out;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   258    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   259    LWIP_UNUSED_ARG(ppp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   260  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   261    /* Grab an output buffer. Using PBUF_POOL here for tx is ok since the pbuf
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   262       gets freed by 'pppos_output_last' before this function returns and thus
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   263       cannot starve rx. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   264    nb = pbuf_alloc(PBUF_RAW, 0, PBUF_POOL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   265    if (nb == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   266      PPPDEBUG(LOG_WARNING, ("pppos_netif_output[%d]: alloc fail\n", ppp->netif->num));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   267      LINK_STATS_INC(link.memerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   268      LINK_STATS_INC(link.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   269      MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   270      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   271    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   272  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   273    /* Set nb->tot_len to actual payload length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   274    nb->tot_len = pb->tot_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   275  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   276    /* If the link has been idle, we'll send a fresh flag character to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   277     * flush any noise. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   278    err = ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   279    if ((sys_now() - pppos->last_xmit) >= PPP_MAXIDLEFLAG) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   280      err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   281    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   282  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   283    fcs_out = PPP_INITFCS;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   284    if (!pppos->accomp) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   285      err = pppos_output_append(pppos, err,  nb, PPP_ALLSTATIONS, 1, &fcs_out);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   286      err = pppos_output_append(pppos, err,  nb, PPP_UI, 1, &fcs_out);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   287    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   288    if (!pppos->pcomp || protocol > 0xFF) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   289      err = pppos_output_append(pppos, err,  nb, (protocol >> 8) & 0xFF, 1, &fcs_out);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   290    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   291    err = pppos_output_append(pppos, err,  nb, protocol & 0xFF, 1, &fcs_out);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   292  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   293    /* Load packet. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   294    for(p = pb; p; p = p->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   295      u16_t n = p->len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   296      u8_t *s = (u8_t*)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   297  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   298      while (n-- > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   299        err = pppos_output_append(pppos, err,  nb, *s++, 1, &fcs_out);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   300      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   301    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   302  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   303    err = pppos_output_last(pppos, err, nb, &fcs_out);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   304    if (err == ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   305      PPPDEBUG(LOG_INFO, ("pppos_netif_output[%d]: proto=0x%"X16_F", len = %d\n", ppp->netif->num, protocol, pb->tot_len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   306    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   307      PPPDEBUG(LOG_WARNING, ("pppos_netif_output[%d]: output failed proto=0x%"X16_F", len = %d\n", ppp->netif->num, protocol, pb->tot_len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   308    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   309    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   310  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   311  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   312  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   313  pppos_connect(ppp_pcb *ppp, void *ctx)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   314  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   315    pppos_pcb *pppos = (pppos_pcb *)ctx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   316    PPPOS_DECL_PROTECT(lev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   317  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   318  #if PPP_INPROC_IRQ_SAFE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   319    /* input pbuf left over from last session? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   320    pppos_input_free_current_packet(pppos);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   321  #endif /* PPP_INPROC_IRQ_SAFE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   322  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   323    /* reset PPPoS control block to its initial state */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   324    memset(&pppos->last_xmit, 0, sizeof(pppos_pcb) - offsetof(pppos_pcb, last_xmit));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   325  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   326    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   327     * Default the in and out accm so that escape and flag characters
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   328     * are always escaped.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   329     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   330    pppos->in_accm[15] = 0x60; /* no need to protect since RX is not running */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   331    pppos->out_accm[15] = 0x60;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   332    PPPOS_PROTECT(lev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   333    pppos->open = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   334    PPPOS_UNPROTECT(lev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   335  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   336    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   337     * Start the connection and handle incoming events (packet or timeout).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   338     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   339    PPPDEBUG(LOG_INFO, ("pppos_connect: unit %d: connecting\n", ppp->netif->num));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   340    ppp_start(ppp); /* notify upper layers */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   341  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   342  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   343  #if PPP_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   344  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   345  pppos_listen(ppp_pcb *ppp, void *ctx)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   346  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   347    pppos_pcb *pppos = (pppos_pcb *)ctx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   348    PPPOS_DECL_PROTECT(lev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   349  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   350  #if PPP_INPROC_IRQ_SAFE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   351    /* input pbuf left over from last session? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   352    pppos_input_free_current_packet(pppos);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   353  #endif /* PPP_INPROC_IRQ_SAFE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   354  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   355    /* reset PPPoS control block to its initial state */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   356    memset(&pppos->last_xmit, 0, sizeof(pppos_pcb) - offsetof(pppos_pcb, last_xmit));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   357  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   358    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   359     * Default the in and out accm so that escape and flag characters
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   360     * are always escaped.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   361     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   362    pppos->in_accm[15] = 0x60; /* no need to protect since RX is not running */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   363    pppos->out_accm[15] = 0x60;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   364    PPPOS_PROTECT(lev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   365    pppos->open = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   366    PPPOS_UNPROTECT(lev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   367  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   368    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   369     * Wait for something to happen.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   370     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   371    PPPDEBUG(LOG_INFO, ("pppos_listen: unit %d: listening\n", ppp->netif->num));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   372    ppp_start(ppp); /* notify upper layers */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   373  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   374  #endif /* PPP_SERVER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   375  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   376  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   377  pppos_disconnect(ppp_pcb *ppp, void *ctx)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   378  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   379    pppos_pcb *pppos = (pppos_pcb *)ctx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   380    PPPOS_DECL_PROTECT(lev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   381  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   382    PPPOS_PROTECT(lev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   383    pppos->open = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   384    PPPOS_UNPROTECT(lev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   385  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   386    /* If PPP_INPROC_IRQ_SAFE is used we cannot call
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   387     * pppos_input_free_current_packet() here because
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   388     * rx IRQ might still call pppos_input().
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   389     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   390  #if !PPP_INPROC_IRQ_SAFE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   391    /* input pbuf left ? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   392    pppos_input_free_current_packet(pppos);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   393  #endif /* !PPP_INPROC_IRQ_SAFE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   394  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   395    ppp_link_end(ppp); /* notify upper layers */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   396  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   397  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   398  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   399  pppos_destroy(ppp_pcb *ppp, void *ctx)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   400  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   401    pppos_pcb *pppos = (pppos_pcb *)ctx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   402    LWIP_UNUSED_ARG(ppp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   403  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   404  #if PPP_INPROC_IRQ_SAFE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   405    /* input pbuf left ? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   406    pppos_input_free_current_packet(pppos);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   407  #endif /* PPP_INPROC_IRQ_SAFE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   408  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   409    LWIP_MEMPOOL_FREE(PPPOS_PCB, pppos);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   410    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   411  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   412  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   413  #if !NO_SYS && !PPP_INPROC_IRQ_SAFE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   414  /** Pass received raw characters to PPPoS to be decoded through lwIP TCPIP thread.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   415   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   416   * This is one of the only functions that may be called outside of the TCPIP thread!
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   417   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   418   * @param ppp PPP descriptor index, returned by pppos_create()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   419   * @param s received data
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   420   * @param l length of received data
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   421   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   422  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   423  pppos_input_tcpip(ppp_pcb *ppp, u8_t *s, int l)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   424  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   425    struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   426    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   427  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   428    p = pbuf_alloc(PBUF_RAW, l, PBUF_POOL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   429    if (!p) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   430      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   431    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   432    pbuf_take(p, s, l);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   433  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   434    err = tcpip_inpkt(p, ppp_netif(ppp), pppos_input_sys);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   435    if (err != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   436       pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   437    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   438    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   439  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   440  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   441  /* called from TCPIP thread */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   442  err_t pppos_input_sys(struct pbuf *p, struct netif *inp) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   443    ppp_pcb *ppp = (ppp_pcb*)inp->state;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   444    struct pbuf *n;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   445    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   446  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   447    for (n = p; n; n = n->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   448      pppos_input(ppp, (u8_t*)n->payload, n->len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   449    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   450    pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   451    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   452  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   453  #endif /* !NO_SYS && !PPP_INPROC_IRQ_SAFE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   454  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   455  /** PPPoS input helper struct, must be packed since it is stored
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   456   * to pbuf->payload, which might be unaligned. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   457  #if PPP_INPROC_IRQ_SAFE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   458  #ifdef PACK_STRUCT_USE_INCLUDES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   459  #  include "arch/bpstruct.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   460  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   461  PACK_STRUCT_BEGIN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   462  struct pppos_input_header {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   463    PACK_STRUCT_FIELD(ppp_pcb *ppp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   464  } PACK_STRUCT_STRUCT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   465  PACK_STRUCT_END
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   466  #ifdef PACK_STRUCT_USE_INCLUDES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   467  #  include "arch/epstruct.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   468  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   469  #endif /* PPP_INPROC_IRQ_SAFE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   470  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   471  /** Pass received raw characters to PPPoS to be decoded.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   472   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   473   * @param ppp PPP descriptor index, returned by pppos_create()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   474   * @param s received data
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   475   * @param l length of received data
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   476   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   477  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   478  pppos_input(ppp_pcb *ppp, u8_t *s, int l)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   479  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   480    pppos_pcb *pppos = (pppos_pcb *)ppp->link_ctx_cb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   481    struct pbuf *next_pbuf;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   482    u8_t cur_char;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   483    u8_t escaped;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   484    PPPOS_DECL_PROTECT(lev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   485  #if !PPP_INPROC_IRQ_SAFE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   486    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   487  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   488  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   489    PPPDEBUG(LOG_DEBUG, ("pppos_input[%d]: got %d bytes\n", ppp->netif->num, l));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   490    while (l-- > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   491      cur_char = *s++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   492  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   493      PPPOS_PROTECT(lev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   494      /* ppp_input can disconnect the interface, we need to abort to prevent a memory
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   495       * leak if there are remaining bytes because pppos_connect and pppos_listen
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   496       * functions expect input buffer to be free. Furthermore there are no real
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   497       * reason to continue reading bytes if we are disconnected.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   498       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   499      if (!pppos->open) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   500        PPPOS_UNPROTECT(lev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   501        return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   502      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   503      escaped = ESCAPE_P(pppos->in_accm, cur_char);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   504      PPPOS_UNPROTECT(lev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   505      /* Handle special characters. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   506      if (escaped) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   507        /* Check for escape sequences. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   508        /* XXX Note that this does not handle an escaped 0x5d character which
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   509         * would appear as an escape character.  Since this is an ASCII ']'
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   510         * and there is no reason that I know of to escape it, I won't complicate
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   511         * the code to handle this case. GLL */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   512        if (cur_char == PPP_ESCAPE) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   513          pppos->in_escaped = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   514        /* Check for the flag character. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   515        } else if (cur_char == PPP_FLAG) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   516          /* If this is just an extra flag character, ignore it. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   517          if (pppos->in_state <= PDADDRESS) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   518            /* ignore it */;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   519          /* If we haven't received the packet header, drop what has come in. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   520          } else if (pppos->in_state < PDDATA) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   521            PPPDEBUG(LOG_WARNING,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   522                     ("pppos_input[%d]: Dropping incomplete packet %d\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   523                      ppp->netif->num, pppos->in_state));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   524            LINK_STATS_INC(link.lenerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   525            pppos_input_drop(pppos);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   526          /* If the fcs is invalid, drop the packet. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   527          } else if (pppos->in_fcs != PPP_GOODFCS) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   528            PPPDEBUG(LOG_INFO,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   529                     ("pppos_input[%d]: Dropping bad fcs 0x%"X16_F" proto=0x%"X16_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   530                      ppp->netif->num, pppos->in_fcs, pppos->in_protocol));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   531            /* Note: If you get lots of these, check for UART frame errors or try different baud rate */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   532            LINK_STATS_INC(link.chkerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   533            pppos_input_drop(pppos);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   534          /* Otherwise it's a good packet so pass it on. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   535          } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   536            struct pbuf *inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   537            /* Trim off the checksum. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   538            if(pppos->in_tail->len > 2) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   539              pppos->in_tail->len -= 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   540  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   541              pppos->in_tail->tot_len = pppos->in_tail->len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   542              if (pppos->in_tail != pppos->in_head) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   543                pbuf_cat(pppos->in_head, pppos->in_tail);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   544              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   545            } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   546              pppos->in_tail->tot_len = pppos->in_tail->len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   547              if (pppos->in_tail != pppos->in_head) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   548                pbuf_cat(pppos->in_head, pppos->in_tail);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   549              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   550  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   551              pbuf_realloc(pppos->in_head, pppos->in_head->tot_len - 2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   552            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   553  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   554            /* Dispatch the packet thereby consuming it. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   555            inp = pppos->in_head;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   556            /* Packet consumed, release our references. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   557            pppos->in_head = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   558            pppos->in_tail = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   559  #if IP_FORWARD || LWIP_IPV6_FORWARD
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   560            /* hide the room for Ethernet forwarding header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   561            pbuf_remove_header(inp, PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   562  #endif /* IP_FORWARD || LWIP_IPV6_FORWARD */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   563  #if PPP_INPROC_IRQ_SAFE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   564            if(tcpip_try_callback(pppos_input_callback, inp) != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   565              PPPDEBUG(LOG_ERR, ("pppos_input[%d]: tcpip_callback() failed, dropping packet\n", ppp->netif->num));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   566              pbuf_free(inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   567              LINK_STATS_INC(link.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   568              MIB2_STATS_NETIF_INC(ppp->netif, ifindiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   569            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   570  #else /* PPP_INPROC_IRQ_SAFE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   571            ppp_input(ppp, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   572  #endif /* PPP_INPROC_IRQ_SAFE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   573          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   574  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   575          /* Prepare for a new packet. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   576          pppos->in_fcs = PPP_INITFCS;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   577          pppos->in_state = PDADDRESS;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   578          pppos->in_escaped = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   579        /* Other characters are usually control characters that may have
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   580         * been inserted by the physical layer so here we just drop them. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   581        } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   582          PPPDEBUG(LOG_WARNING,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   583                   ("pppos_input[%d]: Dropping ACCM char <%d>\n", ppp->netif->num, cur_char));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   584        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   585      /* Process other characters. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   586      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   587        /* Unencode escaped characters. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   588        if (pppos->in_escaped) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   589          pppos->in_escaped = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   590          cur_char ^= PPP_TRANS;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   591        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   592  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   593        /* Process character relative to current state. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   594        switch(pppos->in_state) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   595          case PDIDLE:                    /* Idle state - waiting. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   596            /* Drop the character if it's not 0xff
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   597             * we would have processed a flag character above. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   598            if (cur_char != PPP_ALLSTATIONS) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   599              break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   600            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   601            /* no break */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   602            /* Fall through */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   603  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   604          case PDSTART:                   /* Process start flag. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   605            /* Prepare for a new packet. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   606            pppos->in_fcs = PPP_INITFCS;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   607            /* no break */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   608            /* Fall through */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   609  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   610          case PDADDRESS:                 /* Process address field. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   611            if (cur_char == PPP_ALLSTATIONS) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   612              pppos->in_state = PDCONTROL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   613              break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   614            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   615            /* no break */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   616  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   617            /* Else assume compressed address and control fields so
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   618             * fall through to get the protocol... */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   619            /* Fall through */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   620          case PDCONTROL:                 /* Process control field. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   621            /* If we don't get a valid control code, restart. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   622            if (cur_char == PPP_UI) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   623              pppos->in_state = PDPROTOCOL1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   624              break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   625            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   626            /* no break */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   627  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   628  #if 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   629            else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   630              PPPDEBUG(LOG_WARNING,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   631                       ("pppos_input[%d]: Invalid control <%d>\n", ppp->netif->num, cur_char));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   632              pppos->in_state = PDSTART;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   633            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   634  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   635            /* Fall through */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   636  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   637        case PDPROTOCOL1:               /* Process protocol field 1. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   638            /* If the lower bit is set, this is the end of the protocol
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   639             * field. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   640            if (cur_char & 1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   641              pppos->in_protocol = cur_char;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   642              pppos->in_state = PDDATA;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   643            } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   644              pppos->in_protocol = (u16_t)cur_char << 8;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   645              pppos->in_state = PDPROTOCOL2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   646            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   647            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   648          case PDPROTOCOL2:               /* Process protocol field 2. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   649            pppos->in_protocol |= cur_char;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   650            pppos->in_state = PDDATA;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   651            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   652          case PDDATA:                    /* Process data byte. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   653            /* Make space to receive processed data. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   654            if (pppos->in_tail == NULL || pppos->in_tail->len == PBUF_POOL_BUFSIZE) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   655              u16_t pbuf_alloc_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   656              if (pppos->in_tail != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   657                pppos->in_tail->tot_len = pppos->in_tail->len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   658                if (pppos->in_tail != pppos->in_head) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   659                  pbuf_cat(pppos->in_head, pppos->in_tail);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   660                  /* give up the in_tail reference now */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   661                  pppos->in_tail = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   662                }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   663              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   664              /* If we haven't started a packet, we need a packet header. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   665              pbuf_alloc_len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   666  #if IP_FORWARD || LWIP_IPV6_FORWARD
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   667              /* If IP forwarding is enabled we are reserving PBUF_LINK_ENCAPSULATION_HLEN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   668               * + PBUF_LINK_HLEN bytes so the packet is being allocated with enough header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   669               * space to be forwarded (to Ethernet for example).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   670               */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   671              if (pppos->in_head == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   672                pbuf_alloc_len = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   673              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   674  #endif /* IP_FORWARD || LWIP_IPV6_FORWARD */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   675              next_pbuf = pbuf_alloc(PBUF_RAW, pbuf_alloc_len, PBUF_POOL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   676              if (next_pbuf == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   677                /* No free buffers.  Drop the input packet and let the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   678                 * higher layers deal with it.  Continue processing
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   679                 * the received pbuf chain in case a new packet starts. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   680                PPPDEBUG(LOG_ERR, ("pppos_input[%d]: NO FREE PBUFS!\n", ppp->netif->num));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   681                LINK_STATS_INC(link.memerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   682                pppos_input_drop(pppos);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   683                pppos->in_state = PDSTART;  /* Wait for flag sequence. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   684                break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   685              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   686              if (pppos->in_head == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   687                u8_t *payload = ((u8_t*)next_pbuf->payload) + pbuf_alloc_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   688  #if PPP_INPROC_IRQ_SAFE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   689                ((struct pppos_input_header*)payload)->ppp = ppp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   690                payload += sizeof(struct pppos_input_header);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   691                next_pbuf->len += sizeof(struct pppos_input_header);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   692  #endif /* PPP_INPROC_IRQ_SAFE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   693                next_pbuf->len += sizeof(pppos->in_protocol);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   694                *(payload++) = pppos->in_protocol >> 8;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   695                *(payload) = pppos->in_protocol & 0xFF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   696                pppos->in_head = next_pbuf;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   697              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   698              pppos->in_tail = next_pbuf;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   699            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   700            /* Load character into buffer. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   701            ((u8_t*)pppos->in_tail->payload)[pppos->in_tail->len++] = cur_char;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   702            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   703          default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   704            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   705        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   706  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   707        /* update the frame check sequence number. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   708        pppos->in_fcs = PPP_FCS(pppos->in_fcs, cur_char);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   709      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   710    } /* while (l-- > 0), all bytes processed */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   711  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   712  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   713  #if PPP_INPROC_IRQ_SAFE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   714  /* PPPoS input callback using one input pointer
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   715   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   716  static void pppos_input_callback(void *arg) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   717    struct pbuf *pb = (struct pbuf*)arg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   718    ppp_pcb *ppp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   719  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   720    ppp = ((struct pppos_input_header*)pb->payload)->ppp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   721    if(pbuf_remove_header(pb, sizeof(struct pppos_input_header))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   722      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   723      goto drop;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   724    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   725  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   726    /* Dispatch the packet thereby consuming it. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   727    ppp_input(ppp, pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   728    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   729  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   730  drop:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   731    LINK_STATS_INC(link.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   732    MIB2_STATS_NETIF_INC(ppp->netif, ifindiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   733    pbuf_free(pb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   734  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   735  #endif /* PPP_INPROC_IRQ_SAFE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   736  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   737  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   738  pppos_send_config(ppp_pcb *ppp, void *ctx, u32_t accm, int pcomp, int accomp)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   739  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   740    int i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   741    pppos_pcb *pppos = (pppos_pcb *)ctx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   742    LWIP_UNUSED_ARG(ppp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   743  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   744    pppos->pcomp = pcomp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   745    pppos->accomp = accomp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   746  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   747    /* Load the ACCM bits for the 32 control codes. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   748    for (i = 0; i < 32/8; i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   749      pppos->out_accm[i] = (u8_t)((accm >> (8 * i)) & 0xFF);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   750    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   751  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   752    PPPDEBUG(LOG_INFO, ("pppos_send_config[%d]: out_accm=%X %X %X %X\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   753              pppos->ppp->netif->num,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   754              pppos->out_accm[0], pppos->out_accm[1], pppos->out_accm[2], pppos->out_accm[3]));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   755  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   756  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   757  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   758  pppos_recv_config(ppp_pcb *ppp, void *ctx, u32_t accm, int pcomp, int accomp)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   759  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   760    int i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   761    pppos_pcb *pppos = (pppos_pcb *)ctx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   762    PPPOS_DECL_PROTECT(lev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   763    LWIP_UNUSED_ARG(ppp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   764    LWIP_UNUSED_ARG(pcomp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   765    LWIP_UNUSED_ARG(accomp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   766  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   767    /* Load the ACCM bits for the 32 control codes. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   768    PPPOS_PROTECT(lev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   769    for (i = 0; i < 32 / 8; i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   770      pppos->in_accm[i] = (u8_t)(accm >> (i * 8));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   771    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   772    PPPOS_UNPROTECT(lev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   773  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   774    PPPDEBUG(LOG_INFO, ("pppos_recv_config[%d]: in_accm=%X %X %X %X\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   775              pppos->ppp->netif->num,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   776              pppos->in_accm[0], pppos->in_accm[1], pppos->in_accm[2], pppos->in_accm[3]));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   777  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   778  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   779  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   780   * Drop the input packet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   781   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   782  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   783  pppos_input_free_current_packet(pppos_pcb *pppos)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   784  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   785    if (pppos->in_head != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   786      if (pppos->in_tail && (pppos->in_tail != pppos->in_head)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   787        pbuf_free(pppos->in_tail);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   788      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   789      pbuf_free(pppos->in_head);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   790      pppos->in_head = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   791    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   792    pppos->in_tail = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   793  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   794  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   795  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   796   * Drop the input packet and increase error counters.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   797   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   798  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   799  pppos_input_drop(pppos_pcb *pppos)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   800  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   801    if (pppos->in_head != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   802  #if 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   803      PPPDEBUG(LOG_INFO, ("pppos_input_drop: %d:%.*H\n", pppos->in_head->len, min(60, pppos->in_head->len * 2), pppos->in_head->payload));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   804  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   805      PPPDEBUG(LOG_INFO, ("pppos_input_drop: pbuf len=%d, addr %p\n", pppos->in_head->len, (void*)pppos->in_head));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   806    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   807    pppos_input_free_current_packet(pppos);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   808  #if VJ_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   809    vj_uncompress_err(&pppos->ppp->vj_comp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   810  #endif /* VJ_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   811  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   812    LINK_STATS_INC(link.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   813    MIB2_STATS_NETIF_INC(pppos->ppp->netif, ifindiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   814  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   815  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   816  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   817   * pppos_output_append - append given character to end of given pbuf.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   818   * If out_accm is not 0 and the character needs to be escaped, do so.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   819   * If pbuf is full, send the pbuf and reuse it.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   820   * Return the current pbuf.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   821   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   822  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   823  pppos_output_append(pppos_pcb *pppos, err_t err, struct pbuf *nb, u8_t c, u8_t accm, u16_t *fcs)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   824  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   825    if (err != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   826      return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   827    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   828  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   829    /* Make sure there is room for the character and an escape code.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   830     * Sure we don't quite fill the buffer if the character doesn't
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   831     * get escaped but is one character worth complicating this? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   832    if ((PBUF_POOL_BUFSIZE - nb->len) < 2) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   833      u32_t l = pppos->output_cb(pppos->ppp, (u8_t*)nb->payload, nb->len, pppos->ppp->ctx_cb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   834      if (l != nb->len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   835        return ERR_IF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   836      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   837      nb->len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   838    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   839  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   840    /* Update FCS before checking for special characters. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   841    if (fcs) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   842      *fcs = PPP_FCS(*fcs, c);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   843    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   844  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   845    /* Copy to output buffer escaping special characters. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   846    if (accm && ESCAPE_P(pppos->out_accm, c)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   847      *((u8_t*)nb->payload + nb->len++) = PPP_ESCAPE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   848      *((u8_t*)nb->payload + nb->len++) = c ^ PPP_TRANS;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   849    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   850      *((u8_t*)nb->payload + nb->len++) = c;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   851    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   852  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   853    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   854  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   855  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   856  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   857  pppos_output_last(pppos_pcb *pppos, err_t err, struct pbuf *nb, u16_t *fcs)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   858  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   859    ppp_pcb *ppp = pppos->ppp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   860  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   861    /* Add FCS and trailing flag. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   862    err = pppos_output_append(pppos, err,  nb, ~(*fcs) & 0xFF, 1, NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   863    err = pppos_output_append(pppos, err,  nb, (~(*fcs) >> 8) & 0xFF, 1, NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   864    err = pppos_output_append(pppos, err,  nb, PPP_FLAG, 0, NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   865  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   866    if (err != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   867      goto failed;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   868    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   869  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   870    /* Send remaining buffer if not empty */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   871    if (nb->len > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   872      u32_t l = pppos->output_cb(ppp, (u8_t*)nb->payload, nb->len, ppp->ctx_cb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   873      if (l != nb->len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   874        err = ERR_IF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   875        goto failed;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   876      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   877    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   878  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   879    pppos->last_xmit = sys_now();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   880    MIB2_STATS_NETIF_ADD(ppp->netif, ifoutoctets, nb->tot_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   881    MIB2_STATS_NETIF_INC(ppp->netif, ifoutucastpkts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   882    LINK_STATS_INC(link.xmit);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   883    pbuf_free(nb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   884    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   885  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   886  failed:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   887    pppos->last_xmit = 0; /* prepend PPP_FLAG to next packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   888    LINK_STATS_INC(link.err);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   889    LINK_STATS_INC(link.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   890    MIB2_STATS_NETIF_INC(ppp->netif, ifoutdiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   891    pbuf_free(nb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   892    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   893  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   894  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppos.c	   895  #endif /* PPP_SUPPORT && PPPOS_SUPPORT */

	; Module end
