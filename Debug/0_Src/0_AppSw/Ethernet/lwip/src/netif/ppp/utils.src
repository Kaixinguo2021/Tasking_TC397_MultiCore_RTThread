	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\.utils.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Rtl8211f -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\utils.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\utils.src ..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\utils.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\utils.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	735
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\utils.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L5
	.byte	2
	.byte	'int',0,4,5,3
	.word	172
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	179
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	221
	.byte	7
	.word	221
	.byte	8
	.byte	'__cmpswapw',0
	.word	237
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	242
	.byte	9
	.byte	'value',0
	.word	221
	.byte	9
	.byte	'compare',0
	.word	221
	.byte	0,2
	.byte	'short int',0,2,5,10
	.byte	'__wchar_t',0,1,1,1
	.word	299
	.byte	10
	.byte	'__size_t',0,1,1,1
	.word	221
	.byte	10
	.byte	'__ptrdiff_t',0,1,1,1
	.word	172
	.byte	11,1,7
	.word	367
	.byte	10
	.byte	'__codeptr',0,1,1,1
	.word	369
	.byte	10
	.byte	'__intptr_t',0,1,1,1
	.word	172
	.byte	10
	.byte	'__uintptr_t',0,1,1,1
	.word	221
	.byte	2
	.byte	'unsigned char',0,1,8,10
	.byte	'uint8',0,2,108,29
	.word	431
	.byte	2
	.byte	'unsigned short int',0,2,7,10
	.byte	'uint16',0,2,112,29
	.word	462
	.byte	2
	.byte	'unsigned long int',0,4,7,10
	.byte	'uint32',0,2,116,29
	.word	499
	.byte	2
	.byte	'char',0,1,6,10
	.byte	'sint8',0,2,125,29
	.word	535
	.byte	10
	.byte	'sint16',0,2,129,1,29
	.word	299
	.byte	2
	.byte	'long int',0,4,5,10
	.byte	'sint32',0,2,134,1,29
	.word	573
	.byte	2
	.byte	'long long int',0,8,5,10
	.byte	'sint64',0,2,141,1,29
	.word	601
	.byte	2
	.byte	'float',0,4,4,10
	.byte	'float32',0,2,170,1,29
	.word	634
	.byte	12
	.byte	'void',0,7
	.word	660
	.byte	10
	.byte	'pvoid',0,3,54,28
	.word	666
	.byte	10
	.byte	'Ifx_TickTime',0,3,76,28
	.word	601
	.byte	10
	.byte	'u32_t',0,4,87,16
	.word	499
	.byte	10
	.byte	'intmax_t',0,5,198,2,41
	.word	601
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,22,0,3,8,58,15,59,15,57,15,73,19,0,0,11,21,0,54,15,0,0,12,59,0
	.byte	3,8,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\utils.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'cc.h',0,2,0,0
	.byte	'stdint.h',0,3,0,0,0
.L9:
.L7:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	     1  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	     2   * utils.c - various utility functions used in pppd.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	     3   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	     4   * Copyright (c) 1999-2002 Paul Mackerras. All rights reserved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	     5   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	     6   * Redistribution and use in source and binary forms, with or without
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	     7   * modification, are permitted provided that the following conditions
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	     8   * are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	     9   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    10   * 1. Redistributions of source code must retain the above copyright
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    11   *    notice, this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    12   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    13   * 2. The name(s) of the authors of this software must not be used to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    14   *    endorse or promote products derived from this software without
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    15   *    prior written permission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    16   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    17   * 3. Redistributions of any form whatsoever must retain the following
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    18   *    acknowledgment:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    19   *    "This product includes software developed by Paul Mackerras
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    20   *     <paulus@samba.org>".
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    21   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    22   * THE AUTHORS OF THIS SOFTWARE DISCLAIM ALL WARRANTIES WITH REGARD TO
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    23   * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    24   * AND FITNESS, IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    25   * SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    26   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    27   * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    28   * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    29   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    30  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    31  #include "netif/ppp/ppp_opts.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    32  #if PPP_SUPPORT /* don't build if not configured for use in lwipopts.h */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    33  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    34  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    35  #include <stdio.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    36  #include <ctype.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    37  #include <stdlib.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    38  #include <string.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    39  #include <unistd.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    40  #include <signal.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    41  #include <errno.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    42  #include <fcntl.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    43  #include <syslog.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    44  #include <netdb.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    45  #include <time.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    46  #include <utmp.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    47  #include <pwd.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    48  #include <sys/param.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    49  #include <sys/types.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    50  #include <sys/wait.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    51  #include <sys/time.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    52  #include <sys/resource.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    53  #include <sys/stat.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    54  #include <sys/socket.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    55  #include <netinet/in.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    56  #ifdef SVR4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    57  #include <sys/mkdev.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    58  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    59  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    60  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    61  #include "netif/ppp/ppp_impl.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    62  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    63  #include "netif/ppp/fsm.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    64  #include "netif/ppp/lcp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    65  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    66  #if defined(SUNOS4)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    67  extern char *strerror();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    68  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    69  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    70  static void ppp_logit(int level, const char *fmt, va_list args);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    71  static void ppp_log_write(int level, char *buf);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    72  #if PRINTPKT_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    73  static void ppp_vslp_printer(void *arg, const char *fmt, ...);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    74  static void ppp_format_packet(const u_char *p, int len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    75  		void (*printer) (void *, const char *, ...), void *arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    76  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    77  struct buffer_info {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    78      char *ptr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    79      int len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    80  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    81  #endif /* PRINTPKT_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    82  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    83  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    84   * ppp_strlcpy - like strcpy/strncpy, doesn't overflow destination buffer,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    85   * always leaves destination null-terminated (for len > 0).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    86   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    87  size_t ppp_strlcpy(char *dest, const char *src, size_t len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    88      size_t ret = strlen(src);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    89  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    90      if (len != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    91  	if (ret < len)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    92  	    strcpy(dest, src);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    93  	else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    94  	    strncpy(dest, src, len - 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    95  	    dest[len-1] = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    96  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    97      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    98      return ret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	    99  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   100  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   101  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   102   * ppp_strlcat - like strcat/strncat, doesn't overflow destination buffer,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   103   * always leaves destination null-terminated (for len > 0).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   104   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   105  size_t ppp_strlcat(char *dest, const char *src, size_t len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   106      size_t dlen = strlen(dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   107  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   108      return dlen + ppp_strlcpy(dest + dlen, src, (len > dlen? len - dlen: 0));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   109  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   110  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   111  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   112  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   113   * ppp_slprintf - format a message into a buffer.  Like sprintf except we
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   114   * also specify the length of the output buffer, and we handle
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   115   * %m (error message), %v (visible string),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   116   * %q (quoted string), %t (current time) and %I (IP address) formats.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   117   * Doesn't do floating-point formats.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   118   * Returns the number of chars put into buf.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   119   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   120  int ppp_slprintf(char *buf, int buflen, const char *fmt, ...) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   121      va_list args;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   122      int n;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   123  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   124      va_start(args, fmt);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   125      n = ppp_vslprintf(buf, buflen, fmt, args);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   126      va_end(args);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   127      return n;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   128  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   129  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   130  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   131   * ppp_vslprintf - like ppp_slprintf, takes a va_list instead of a list of args.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   132   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   133  #define OUTCHAR(c)	(buflen > 0? (--buflen, *buf++ = (c)): 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   134  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   135  int ppp_vslprintf(char *buf, int buflen, const char *fmt, va_list args) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   136      int c, i, n;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   137      int width, prec, fillch;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   138      int base, len, neg, quoted;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   139      unsigned long val = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   140      const char *f;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   141      char *str, *buf0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   142      const unsigned char *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   143      char num[32];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   144  #if 0 /* need port */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   145      time_t t;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   146  #endif /* need port */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   147      u32_t ip;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   148      static char hexchars[] = "0123456789abcdef";
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   149  #if PRINTPKT_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   150      struct buffer_info bufinfo;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   151  #endif /* PRINTPKT_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   152  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   153      buf0 = buf;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   154      --buflen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   155      while (buflen > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   156  	for (f = fmt; *f != '%' && *f != 0; ++f)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   157  	    ;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   158  	if (f > fmt) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   159  	    len = f - fmt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   160  	    if (len > buflen)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   161  		len = buflen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   162  	    memcpy(buf, fmt, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   163  	    buf += len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   164  	    buflen -= len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   165  	    fmt = f;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   166  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   167  	if (*fmt == 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   168  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   169  	c = *++fmt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   170  	width = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   171  	prec = -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   172  	fillch = ' ';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   173  	if (c == '0') {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   174  	    fillch = '0';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   175  	    c = *++fmt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   176  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   177  	if (c == '*') {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   178  	    width = va_arg(args, int);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   179  	    c = *++fmt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   180  	} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   181  	    while (lwip_isdigit(c)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   182  		width = width * 10 + c - '0';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   183  		c = *++fmt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   184  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   185  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   186  	if (c == '.') {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   187  	    c = *++fmt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   188  	    if (c == '*') {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   189  		prec = va_arg(args, int);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   190  		c = *++fmt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   191  	    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   192  		prec = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   193  		while (lwip_isdigit(c)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   194  		    prec = prec * 10 + c - '0';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   195  		    c = *++fmt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   196  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   197  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   198  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   199  	str = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   200  	base = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   201  	neg = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   202  	++fmt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   203  	switch (c) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   204  	case 'l':
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   205  	    c = *fmt++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   206  	    switch (c) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   207  	    case 'd':
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   208  		val = va_arg(args, long);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   209  		if ((long)val < 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   210  		    neg = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   211  		    val = (unsigned long)-(long)val;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   212  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   213  		base = 10;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   214  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   215  	    case 'u':
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   216  		val = va_arg(args, unsigned long);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   217  		base = 10;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   218  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   219  	    default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   220  		OUTCHAR('%');
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   221  		OUTCHAR('l');
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   222  		--fmt;		/* so %lz outputs %lz etc. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   223  		continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   224  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   225  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   226  	case 'd':
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   227  	    i = va_arg(args, int);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   228  	    if (i < 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   229  		neg = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   230  		val = -i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   231  	    } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   232  		val = i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   233  	    base = 10;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   234  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   235  	case 'u':
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   236  	    val = va_arg(args, unsigned int);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   237  	    base = 10;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   238  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   239  	case 'o':
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   240  	    val = va_arg(args, unsigned int);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   241  	    base = 8;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   242  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   243  	case 'x':
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   244  	case 'X':
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   245  	    val = va_arg(args, unsigned int);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   246  	    base = 16;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   247  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   248  #if 0 /* unused (and wrong on LLP64 systems) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   249  	case 'p':
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   250  	    val = (unsigned long) va_arg(args, void *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   251  	    base = 16;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   252  	    neg = 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   253  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   254  #endif /* unused (and wrong on LLP64 systems) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   255  	case 's':
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   256  	    str = va_arg(args, char *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   257  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   258  	case 'c':
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   259  	    num[0] = va_arg(args, int);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   260  	    num[1] = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   261  	    str = num;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   262  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   263  #if 0 /* do we always have strerror() in embedded ? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   264  	case 'm':
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   265  	    str = strerror(errno);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   266  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   267  #endif /* do we always have strerror() in embedded ? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   268  	case 'I':
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   269  	    ip = va_arg(args, u32_t);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   270  	    ip = lwip_ntohl(ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   271  	    ppp_slprintf(num, sizeof(num), "%d.%d.%d.%d", (ip >> 24) & 0xff,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   272  		     (ip >> 16) & 0xff, (ip >> 8) & 0xff, ip & 0xff);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   273  	    str = num;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   274  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   275  #if 0 /* need port */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   276  	case 't':
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   277  	    time(&t);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   278  	    str = ctime(&t);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   279  	    str += 4;		/* chop off the day name */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   280  	    str[15] = 0;	/* chop off year and newline */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   281  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   282  #endif /* need port */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   283  	case 'v':		/* "visible" string */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   284  	case 'q':		/* quoted string */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   285  	    quoted = c == 'q';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   286  	    p = va_arg(args, unsigned char *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   287  	    if (p == NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   288  		p = (const unsigned char *)"<NULL>";
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   289  	    if (fillch == '0' && prec >= 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   290  		n = prec;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   291  	    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   292  		n = strlen((const char *)p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   293  		if (prec >= 0 && n > prec)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   294  		    n = prec;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   295  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   296  	    while (n > 0 && buflen > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   297  		c = *p++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   298  		--n;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   299  		if (!quoted && c >= 0x80) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   300  		    OUTCHAR('M');
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   301  		    OUTCHAR('-');
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   302  		    c -= 0x80;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   303  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   304  		if (quoted && (c == '"' || c == '\\'))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   305  		    OUTCHAR('\\');
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   306  		if (c < 0x20 || (0x7f <= c && c < 0xa0)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   307  		    if (quoted) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   308  			OUTCHAR('\\');
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   309  			switch (c) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   310  			case '\t':	OUTCHAR('t');	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   311  			case '\n':	OUTCHAR('n');	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   312  			case '\b':	OUTCHAR('b');	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   313  			case '\f':	OUTCHAR('f');	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   314  			default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   315  			    OUTCHAR('x');
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   316  			    OUTCHAR(hexchars[c >> 4]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   317  			    OUTCHAR(hexchars[c & 0xf]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   318  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   319  		    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   320  			if (c == '\t')
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   321  			    OUTCHAR(c);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   322  			else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   323  			    OUTCHAR('^');
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   324  			    OUTCHAR(c ^ 0x40);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   325  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   326  		    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   327  		} else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   328  		    OUTCHAR(c);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   329  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   330  	    continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   331  #if PRINTPKT_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   332  	case 'P':		/* print PPP packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   333  	    bufinfo.ptr = buf;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   334  	    bufinfo.len = buflen + 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   335  	    p = va_arg(args, unsigned char *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   336  	    n = va_arg(args, int);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   337  	    ppp_format_packet(p, n, ppp_vslp_printer, &bufinfo);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   338  	    buf = bufinfo.ptr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   339  	    buflen = bufinfo.len - 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   340  	    continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   341  #endif /* PRINTPKT_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   342  	case 'B':
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   343  	    p = va_arg(args, unsigned char *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   344  	    for (n = prec; n > 0; --n) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   345  		c = *p++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   346  		if (fillch == ' ')
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   347  		    OUTCHAR(' ');
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   348  		OUTCHAR(hexchars[(c >> 4) & 0xf]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   349  		OUTCHAR(hexchars[c & 0xf]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   350  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   351  	    continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   352  	default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   353  	    *buf++ = '%';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   354  	    if (c != '%')
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   355  		--fmt;		/* so %z outputs %z etc. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   356  	    --buflen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   357  	    continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   358  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   359  	if (base != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   360  	    str = num + sizeof(num);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   361  	    *--str = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   362  	    while (str > num + neg) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   363  		*--str = hexchars[val % base];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   364  		val = val / base;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   365  		if (--prec <= 0 && val == 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   366  		    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   367  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   368  	    switch (neg) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   369  	    case 1:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   370  		*--str = '-';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   371  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   372  	    case 2:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   373  		*--str = 'x';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   374  		*--str = '0';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   375  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   376  	    default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   377  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   378  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   379  	    len = num + sizeof(num) - 1 - str;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   380  	} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   381  	    len = strlen(str);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   382  	    if (prec >= 0 && len > prec)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   383  		len = prec;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   384  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   385  	if (width > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   386  	    if (width > buflen)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   387  		width = buflen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   388  	    if ((n = width - len) > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   389  		buflen -= n;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   390  		for (; n > 0; --n)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   391  		    *buf++ = fillch;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   392  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   393  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   394  	if (len > buflen)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   395  	    len = buflen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   396  	memcpy(buf, str, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   397  	buf += len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   398  	buflen -= len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   399      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   400      *buf = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   401      return buf - buf0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   402  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   403  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   404  #if PRINTPKT_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   405  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   406   * vslp_printer - used in processing a %P format
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   407   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   408  static void ppp_vslp_printer(void *arg, const char *fmt, ...) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   409      int n;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   410      va_list pvar;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   411      struct buffer_info *bi;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   412  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   413      va_start(pvar, fmt);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   414      bi = (struct buffer_info *) arg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   415      n = ppp_vslprintf(bi->ptr, bi->len, fmt, pvar);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   416      va_end(pvar);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   417  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   418      bi->ptr += n;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   419      bi->len -= n;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   420  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   421  #endif /* PRINTPKT_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   422  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   423  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   424  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   425   * log_packet - format a packet and log it.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   426   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   427  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   428  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   429  log_packet(p, len, prefix, level)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   430      u_char *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   431      int len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   432      char *prefix;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   433      int level;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   434  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   435  	init_pr_log(prefix, level);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   436  	ppp_format_packet(p, len, pr_log, &level);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   437  	end_pr_log();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   438  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   439  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   440  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   441  #if PRINTPKT_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   442  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   443   * ppp_format_packet - make a readable representation of a packet,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   444   * calling `printer(arg, format, ...)' to output it.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   445   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   446  static void ppp_format_packet(const u_char *p, int len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   447  		void (*printer) (void *, const char *, ...), void *arg) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   448      int i, n;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   449      u_short proto;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   450      const struct protent *protp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   451  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   452      if (len >= 2) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   453  	GETSHORT(proto, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   454  	len -= 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   455  	for (i = 0; (protp = protocols[i]) != NULL; ++i)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   456  	    if (proto == protp->protocol)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   457  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   458  	if (protp != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   459  	    printer(arg, "[%s", protp->name);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   460  	    n = (*protp->printpkt)(p, len, printer, arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   461  	    printer(arg, "]");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   462  	    p += n;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   463  	    len -= n;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   464  	} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   465  	    for (i = 0; (protp = protocols[i]) != NULL; ++i)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   466  		if (proto == (protp->protocol & ~0x8000))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   467  		    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   468  	    if (protp != 0 && protp->data_name != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   469  		printer(arg, "[%s data]", protp->data_name);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   470  		if (len > 8)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   471  		    printer(arg, "%.8B ...", p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   472  		else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   473  		    printer(arg, "%.*B", len, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   474  		len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   475  	    } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   476  		printer(arg, "[proto=0x%x]", proto);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   477  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   478      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   479  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   480      if (len > 32)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   481  	printer(arg, "%.32B ...", p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   482      else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   483  	printer(arg, "%.*B", len, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   484  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   485  #endif /* PRINTPKT_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   486  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   487  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   488  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   489   * init_pr_log, end_pr_log - initialize and finish use of pr_log.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   490   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   491  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   492  static char line[256];		/* line to be logged accumulated here */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   493  static char *linep;		/* current pointer within line */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   494  static int llevel;		/* level for logging */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   495  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   496  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   497  init_pr_log(prefix, level)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   498       const char *prefix;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   499       int level;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   500  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   501  	linep = line;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   502  	if (prefix != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   503  		ppp_strlcpy(line, prefix, sizeof(line));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   504  		linep = line + strlen(line);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   505  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   506  	llevel = level;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   507  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   508  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   509  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   510  end_pr_log()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   511  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   512  	if (linep != line) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   513  		*linep = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   514  		ppp_log_write(llevel, line);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   515  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   516  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   517  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   518  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   519   * pr_log - printer routine for outputting to log
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   520   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   521  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   522  pr_log (void *arg, const char *fmt, ...)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   523  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   524  	int l, n;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   525  	va_list pvar;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   526  	char *p, *eol;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   527  	char buf[256];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   528  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   529  	va_start(pvar, fmt);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   530  	n = ppp_vslprintf(buf, sizeof(buf), fmt, pvar);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   531  	va_end(pvar);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   532  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   533  	p = buf;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   534  	eol = strchr(buf, '\n');
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   535  	if (linep != line) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   536  		l = (eol == NULL)? n: eol - buf;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   537  		if (linep + l < line + sizeof(line)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   538  			if (l > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   539  				memcpy(linep, buf, l);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   540  				linep += l;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   541  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   542  			if (eol == NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   543  				return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   544  			p = eol + 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   545  			eol = strchr(p, '\n');
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   546  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   547  		*linep = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   548  		ppp_log_write(llevel, line);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   549  		linep = line;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   550  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   551  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   552  	while (eol != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   553  		*eol = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   554  		ppp_log_write(llevel, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   555  		p = eol + 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   556  		eol = strchr(p, '\n');
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   557  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   558  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   559  	/* assumes sizeof(buf) <= sizeof(line) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   560  	l = buf + n - p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   561  	if (l > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   562  		memcpy(line, p, n);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   563  		linep = line + l;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   564  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   565  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   566  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   567  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   568  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   569   * ppp_print_string - print a readable representation of a string using
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   570   * printer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   571   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   572  void ppp_print_string(const u_char *p, int len, void (*printer) (void *, const char *, ...), void *arg) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   573      int c;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   574  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   575      printer(arg, "\"");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   576      for (; len > 0; --len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   577  	c = *p++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   578  	if (' ' <= c && c <= '~') {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   579  	    if (c == '\\' || c == '"')
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   580  		printer(arg, "\\");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   581  	    printer(arg, "%c", c);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   582  	} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   583  	    switch (c) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   584  	    case '\n':
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   585  		printer(arg, "\\n");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   586  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   587  	    case '\r':
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   588  		printer(arg, "\\r");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   589  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   590  	    case '\t':
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   591  		printer(arg, "\\t");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   592  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   593  	    default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   594  		printer(arg, "\\%.3o", (u8_t)c);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   595  		/* no break */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   596  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   597  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   598      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   599      printer(arg, "\"");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   600  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   601  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   602  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   603   * ppp_logit - does the hard work for fatal et al.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   604   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   605  static void ppp_logit(int level, const char *fmt, va_list args) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   606      char buf[1024];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   607  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   608      ppp_vslprintf(buf, sizeof(buf), fmt, args);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   609      ppp_log_write(level, buf);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   610  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   611  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   612  static void ppp_log_write(int level, char *buf) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   613      LWIP_UNUSED_ARG(level); /* necessary if PPPDEBUG is defined to an empty function */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   614      LWIP_UNUSED_ARG(buf);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   615      PPPDEBUG(level, ("%s\n", buf) );
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   616  #if 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   617      if (log_to_fd >= 0 && (level != LOG_DEBUG || debug)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   618  	int n = strlen(buf);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   619  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   620  	if (n > 0 && buf[n-1] == '\n')
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   621  	    --n;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   622  	if (write(log_to_fd, buf, n) != n
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   623  	    || write(log_to_fd, "\n", 1) != 1)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   624  	    log_to_fd = -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   625      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   626  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   627  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   628  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   629  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   630   * ppp_fatal - log an error message and die horribly.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   631   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   632  void ppp_fatal(const char *fmt, ...) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   633      va_list pvar;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   634  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   635      va_start(pvar, fmt);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   636      ppp_logit(LOG_ERR, fmt, pvar);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   637      va_end(pvar);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   638  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   639      LWIP_ASSERT("ppp_fatal", 0);   /* as promised */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   640  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   641  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   642  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   643   * ppp_error - log an error message.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   644   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   645  void ppp_error(const char *fmt, ...) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   646      va_list pvar;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   647  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   648      va_start(pvar, fmt);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   649      ppp_logit(LOG_ERR, fmt, pvar);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   650      va_end(pvar);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   651  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   652      ++error_count;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   653  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   654  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   655  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   656  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   657   * ppp_warn - log a warning message.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   658   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   659  void ppp_warn(const char *fmt, ...) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   660      va_list pvar;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   661  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   662      va_start(pvar, fmt);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   663      ppp_logit(LOG_WARNING, fmt, pvar);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   664      va_end(pvar);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   665  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   666  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   667  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   668   * ppp_notice - log a notice-level message.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   669   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   670  void ppp_notice(const char *fmt, ...) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   671      va_list pvar;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   672  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   673      va_start(pvar, fmt);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   674      ppp_logit(LOG_NOTICE, fmt, pvar);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   675      va_end(pvar);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   676  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   677  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   678  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   679   * ppp_info - log an informational message.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   680   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   681  void ppp_info(const char *fmt, ...) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   682      va_list pvar;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   683  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   684      va_start(pvar, fmt);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   685      ppp_logit(LOG_INFO, fmt, pvar);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   686      va_end(pvar);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   687  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   688  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   689  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   690   * ppp_dbglog - log a debug message.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   691   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   692  void ppp_dbglog(const char *fmt, ...) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   693      va_list pvar;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   694  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   695      va_start(pvar, fmt);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   696      ppp_logit(LOG_DEBUG, fmt, pvar);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   697      va_end(pvar);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   698  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   699  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   700  #if PRINTPKT_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   701  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   702   * ppp_dump_packet - print out a packet in readable form if it is interesting.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   703   * Assumes len >= PPP_HDRLEN.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   704   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   705  void ppp_dump_packet(ppp_pcb *pcb, const char *tag, unsigned char *p, int len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   706      int proto;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   707  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   708      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   709       * don't print data packets, i.e. IPv4, IPv6, VJ, and compressed packets.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   710       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   711      proto = (p[0] << 8) + p[1];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   712      if (proto < 0xC000 && (proto & ~0x8000) == proto)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   713  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   714  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   715      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   716       * don't print valid LCP echo request/reply packets if the link is up.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   717       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   718      if (proto == PPP_LCP && pcb->phase == PPP_PHASE_RUNNING && len >= 2 + HEADERLEN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   719  	unsigned char *lcp = p + 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   720  	int l = (lcp[2] << 8) + lcp[3];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   721  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   722  	if ((lcp[0] == ECHOREQ || lcp[0] == ECHOREP)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   723  	    && l >= HEADERLEN && l <= len - 2)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   724  	    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   725      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   726  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   727      ppp_dbglog("%s %P", tag, p, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   728  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   729  #endif /* PRINTPKT_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   730  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   731  #if 0 /* Unused */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   732  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   733  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   734   * complete_read - read a full `count' bytes from fd,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   735   * unless end-of-file or an error other than EINTR is encountered.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   736   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   737  ssize_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   738  complete_read(int fd, void *buf, size_t count)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   739  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   740  	size_t done;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   741  	ssize_t nb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   742  	char *ptr = buf;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   743  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   744  	for (done = 0; done < count; ) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   745  		nb = read(fd, ptr, count - done);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   746  		if (nb < 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   747  			if (errno == EINTR)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   748  				continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   749  			return -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   750  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   751  		if (nb == 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   752  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   753  		done += nb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   754  		ptr += nb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   755  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   756  	return done;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   757  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   758  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   759  /* Procedures for locking the serial device using a lock file. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   760  #ifndef LOCK_DIR
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   761  #ifdef __linux__
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   762  #define LOCK_DIR	"/var/lock"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   763  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   764  #ifdef SVR4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   765  #define LOCK_DIR	"/var/spool/locks"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   766  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   767  #define LOCK_DIR	"/var/spool/lock"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   768  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   769  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   770  #endif /* LOCK_DIR */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   771  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   772  static char lock_file[MAXPATHLEN];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   773  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   774  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   775   * lock - create a lock file for the named device
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   776   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   777  int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   778  lock(dev)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   779      char *dev;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   780  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   781  #ifdef LOCKLIB
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   782      int result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   783  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   784      result = mklock (dev, (void *) 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   785      if (result == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   786  	ppp_strlcpy(lock_file, dev, sizeof(lock_file));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   787  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   788      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   789  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   790      if (result > 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   791          ppp_notice("Device %s is locked by pid %d", dev, result);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   792      else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   793  	ppp_error("Can't create lock file %s", lock_file);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   794      return -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   795  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   796  #else /* LOCKLIB */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   797  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   798      char lock_buffer[12];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   799      int fd, pid, n;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   800  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   801  #ifdef SVR4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   802      struct stat sbuf;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   803  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   804      if (stat(dev, &sbuf) < 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   805  	ppp_error("Can't get device number for %s: %m", dev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   806  	return -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   807      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   808      if ((sbuf.st_mode & S_IFMT) != S_IFCHR) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   809  	ppp_error("Can't lock %s: not a character device", dev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   810  	return -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   811      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   812      ppp_slprintf(lock_file, sizeof(lock_file), "%s/LK.%03d.%03d.%03d",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   813  	     LOCK_DIR, major(sbuf.st_dev),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   814  	     major(sbuf.st_rdev), minor(sbuf.st_rdev));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   815  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   816      char *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   817      char lockdev[MAXPATHLEN];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   818  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   819      if ((p = strstr(dev, "dev/")) != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   820  	dev = p + 4;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   821  	strncpy(lockdev, dev, MAXPATHLEN-1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   822  	lockdev[MAXPATHLEN-1] = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   823  	while ((p = strrchr(lockdev, '/')) != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   824  	    *p = '_';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   825  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   826  	dev = lockdev;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   827      } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   828  	if ((p = strrchr(dev, '/')) != NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   829  	    dev = p + 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   830  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   831      ppp_slprintf(lock_file, sizeof(lock_file), "%s/LCK..%s", LOCK_DIR, dev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   832  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   833  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   834      while ((fd = open(lock_file, O_EXCL | O_CREAT | O_RDWR, 0644)) < 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   835  	if (errno != EEXIST) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   836  	    ppp_error("Can't create lock file %s: %m", lock_file);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   837  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   838  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   839  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   840  	/* Read the lock file to find out who has the device locked. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   841  	fd = open(lock_file, O_RDONLY, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   842  	if (fd < 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   843  	    if (errno == ENOENT) /* This is just a timing problem. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   844  		continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   845  	    ppp_error("Can't open existing lock file %s: %m", lock_file);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   846  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   847  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   848  #ifndef LOCK_BINARY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   849  	n = read(fd, lock_buffer, 11);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   850  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   851  	n = read(fd, &pid, sizeof(pid));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   852  #endif /* LOCK_BINARY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   853  	close(fd);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   854  	fd = -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   855  	if (n <= 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   856  	    ppp_error("Can't read pid from lock file %s", lock_file);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   857  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   858  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   859  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   860  	/* See if the process still exists. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   861  #ifndef LOCK_BINARY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   862  	lock_buffer[n] = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   863  	pid = atoi(lock_buffer);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   864  #endif /* LOCK_BINARY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   865  	if (pid == getpid())
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   866  	    return 1;		/* somebody else locked it for us */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   867  	if (pid == 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   868  	    || (kill(pid, 0) == -1 && errno == ESRCH)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   869  	    if (unlink (lock_file) == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   870  		ppp_notice("Removed stale lock on %s (pid %d)", dev, pid);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   871  		continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   872  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   873  	    ppp_warn("Couldn't remove stale lock on %s", dev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   874  	} else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   875  	    ppp_notice("Device %s is locked by pid %d", dev, pid);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   876  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   877      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   878  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   879      if (fd < 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   880  	lock_file[0] = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   881  	return -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   882      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   883  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   884      pid = getpid();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   885  #ifndef LOCK_BINARY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   886      ppp_slprintf(lock_buffer, sizeof(lock_buffer), "%10d\n", pid);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   887      write (fd, lock_buffer, 11);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   888  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   889      write(fd, &pid, sizeof (pid));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   890  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   891      close(fd);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   892      return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   893  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   894  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   895  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   896  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   897  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   898   * relock - called to update our lockfile when we are about to detach,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   899   * thus changing our pid (we fork, the child carries on, and the parent dies).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   900   * Note that this is called by the parent, with pid equal to the pid
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   901   * of the child.  This avoids a potential race which would exist if
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   902   * we had the child rewrite the lockfile (the parent might die first,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   903   * and another process could think the lock was stale if it checked
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   904   * between when the parent died and the child rewrote the lockfile).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   905   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   906  int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   907  relock(pid)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   908      int pid;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   909  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   910  #ifdef LOCKLIB
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   911      /* XXX is there a way to do this? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   912      return -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   913  #else /* LOCKLIB */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   914  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   915      int fd;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   916      char lock_buffer[12];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   917  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   918      if (lock_file[0] == 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   919  	return -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   920      fd = open(lock_file, O_WRONLY, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   921      if (fd < 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   922  	ppp_error("Couldn't reopen lock file %s: %m", lock_file);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   923  	lock_file[0] = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   924  	return -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   925      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   926  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   927  #ifndef LOCK_BINARY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   928      ppp_slprintf(lock_buffer, sizeof(lock_buffer), "%10d\n", pid);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   929      write (fd, lock_buffer, 11);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   930  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   931      write(fd, &pid, sizeof(pid));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   932  #endif /* LOCK_BINARY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   933      close(fd);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   934      return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   935  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   936  #endif /* LOCKLIB */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   937  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   938  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   939  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   940   * unlock - remove our lockfile
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   941   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   942  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   943  unlock()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   944  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   945      if (lock_file[0]) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   946  #ifdef LOCKLIB
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   947  	(void) rmlock(lock_file, (void *) 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   948  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   949  	unlink(lock_file);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   950  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   951  	lock_file[0] = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   952      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   953  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   954  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   955  #endif /* Unused */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   956  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\utils.c	   957  #endif /* PPP_SUPPORT */

	; Module end
