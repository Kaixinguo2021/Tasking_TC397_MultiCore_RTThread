	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\.pppapi.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Rtl8211f -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\pppapi.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\pppapi.src ..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\pppapi.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\pppapi.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	736
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\pppapi.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L5
	.byte	2
	.byte	'int',0,4,5,3
	.word	173
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	180
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	222
	.byte	7
	.word	222
	.byte	8
	.byte	'__cmpswapw',0
	.word	238
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	243
	.byte	9
	.byte	'value',0
	.word	222
	.byte	9
	.byte	'compare',0
	.word	222
	.byte	0,2
	.byte	'short int',0,2,5,10
	.byte	'__wchar_t',0,1,1,1
	.word	300
	.byte	10
	.byte	'__size_t',0,1,1,1
	.word	222
	.byte	10
	.byte	'__ptrdiff_t',0,1,1,1
	.word	173
	.byte	11,1,7
	.word	368
	.byte	10
	.byte	'__codeptr',0,1,1,1
	.word	370
	.byte	10
	.byte	'__intptr_t',0,1,1,1
	.word	173
	.byte	10
	.byte	'__uintptr_t',0,1,1,1
	.word	222
	.byte	2
	.byte	'unsigned char',0,1,8,10
	.byte	'uint8',0,2,108,29
	.word	432
	.byte	2
	.byte	'unsigned short int',0,2,7,10
	.byte	'uint16',0,2,112,29
	.word	463
	.byte	2
	.byte	'unsigned long int',0,4,7,10
	.byte	'uint32',0,2,116,29
	.word	500
	.byte	2
	.byte	'char',0,1,6,10
	.byte	'sint8',0,2,125,29
	.word	536
	.byte	10
	.byte	'sint16',0,2,129,1,29
	.word	300
	.byte	2
	.byte	'long int',0,4,5,10
	.byte	'sint32',0,2,134,1,29
	.word	574
	.byte	2
	.byte	'long long int',0,8,5,10
	.byte	'sint64',0,2,141,1,29
	.word	602
	.byte	2
	.byte	'float',0,4,4,10
	.byte	'float32',0,2,170,1,29
	.word	635
	.byte	12
	.byte	'void',0,7
	.word	661
	.byte	10
	.byte	'pvoid',0,3,54,28
	.word	667
	.byte	10
	.byte	'Ifx_TickTime',0,3,76,28
	.word	602
	.byte	10
	.byte	'u32_t',0,4,87,16
	.word	500
	.byte	10
	.byte	'intmax_t',0,5,198,2,41
	.word	602
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,22,0,3,8,58,15,59,15,57,15,73,19,0,0,11,21,0,54,15,0,0,12,59,0
	.byte	3,8,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\pppapi.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'cc.h',0,2,0,0
	.byte	'stdint.h',0,3,0,0,0
.L9:
.L7:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	     1  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	     2   * @file
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	     3   * Point To Point Protocol Sequential API module
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	     4   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	     5   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	     6  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	     7  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	     8   * Redistribution and use in source and binary forms, with or without modification,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	     9   * are permitted provided that the following conditions are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    10   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    11   * 1. Redistributions of source code must retain the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    12   *    this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    13   * 2. Redistributions in binary form must reproduce the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    14   *    this list of conditions and the following disclaimer in the documentation
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    15   *    and/or other materials provided with the distribution.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    16   * 3. The name of the author may not be used to endorse or promote products
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    17   *    derived from this software without specific prior written permission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    18   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    19   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    20   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    21   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    22   * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    23   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    24   * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    25   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    26   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    27   * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    28   * OF SUCH DAMAGE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    29   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    30   * This file is part of the lwIP TCP/IP stack.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    31   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    32   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    33  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    34  #include "netif/ppp/ppp_opts.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    35  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    36  #if LWIP_PPP_API /* don't build if not configured for use in lwipopts.h */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    37  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    38  #include "netif/ppp/pppapi.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    39  #include "lwip/priv/tcpip_priv.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    40  #include "netif/ppp/pppoe.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    41  #include "netif/ppp/pppol2tp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    42  #include "netif/ppp/pppos.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    43  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    44  #if LWIP_MPU_COMPATIBLE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    45  LWIP_MEMPOOL_DECLARE(PPPAPI_MSG, MEMP_NUM_PPP_API_MSG, sizeof(struct pppapi_msg), "PPPAPI_MSG")
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    46  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    47  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    48  #define PPPAPI_VAR_REF(name)               API_VAR_REF(name)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    49  #define PPPAPI_VAR_DECLARE(name)           API_VAR_DECLARE(struct pppapi_msg, name)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    50  #define PPPAPI_VAR_ALLOC(name)             API_VAR_ALLOC_POOL(struct pppapi_msg, PPPAPI_MSG, name, ERR_MEM)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    51  #define PPPAPI_VAR_ALLOC_RETURN_NULL(name) API_VAR_ALLOC_POOL(struct pppapi_msg, PPPAPI_MSG, name, NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    52  #define PPPAPI_VAR_FREE(name)              API_VAR_FREE_POOL(PPPAPI_MSG, name)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    53  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    54  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    55   * Call ppp_set_default() inside the tcpip_thread context.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    56   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    57  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    58  pppapi_do_ppp_set_default(struct tcpip_api_call_data *m)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    59  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    60    /* cast through void* to silence alignment warnings. 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    61     * We know it works because the structs have been instantiated as struct pppapi_msg */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    62    struct pppapi_msg *msg = (struct pppapi_msg *)(void*)m;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    63    
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    64    ppp_set_default(msg->msg.ppp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    65    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    66  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    67  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    68  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    69   * Call ppp_set_default() in a thread-safe way by running that function inside the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    70   * tcpip_thread context.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    71   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    72  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    73  pppapi_set_default(ppp_pcb *pcb)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    74  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    75    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    76    PPPAPI_VAR_DECLARE(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    77    PPPAPI_VAR_ALLOC(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    78  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    79    PPPAPI_VAR_REF(msg).msg.ppp = pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    80    err = tcpip_api_call(pppapi_do_ppp_set_default, &PPPAPI_VAR_REF(msg).call);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    81    PPPAPI_VAR_FREE(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    82    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    83  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    84  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    85  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    86  #if PPP_NOTIFY_PHASE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    87  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    88   * Call ppp_set_notify_phase_callback() inside the tcpip_thread context.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    89   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    90  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    91  pppapi_do_ppp_set_notify_phase_callback(struct tcpip_api_call_data *m)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    92  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    93    /* cast through void* to silence alignment warnings. 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    94     * We know it works because the structs have been instantiated as struct pppapi_msg */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    95     struct pppapi_msg *msg = (struct pppapi_msg *)(void*)m;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    96  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    97    ppp_set_notify_phase_callback(msg->msg.ppp, msg->msg.msg.setnotifyphasecb.notify_phase_cb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    98    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	    99  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   100  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   101  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   102   * Call ppp_set_notify_phase_callback() in a thread-safe way by running that function inside the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   103   * tcpip_thread context.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   104   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   105  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   106  pppapi_set_notify_phase_callback(ppp_pcb *pcb, ppp_notify_phase_cb_fn notify_phase_cb)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   107  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   108    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   109    PPPAPI_VAR_DECLARE(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   110    PPPAPI_VAR_ALLOC(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   111  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   112    PPPAPI_VAR_REF(msg).msg.ppp = pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   113    PPPAPI_VAR_REF(msg).msg.msg.setnotifyphasecb.notify_phase_cb = notify_phase_cb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   114    err = tcpip_api_call(pppapi_do_ppp_set_notify_phase_callback, &PPPAPI_VAR_REF(msg).call);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   115    PPPAPI_VAR_FREE(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   116    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   117  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   118  #endif /* PPP_NOTIFY_PHASE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   119  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   120  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   121  #if PPPOS_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   122  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   123   * Call pppos_create() inside the tcpip_thread context.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   124   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   125  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   126  pppapi_do_pppos_create(struct tcpip_api_call_data *m)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   127  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   128    /* cast through void* to silence alignment warnings. 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   129     * We know it works because the structs have been instantiated as struct pppapi_msg */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   130    struct pppapi_msg *msg = (struct pppapi_msg *)(void*)m;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   131  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   132    msg->msg.ppp = pppos_create(msg->msg.msg.serialcreate.pppif, msg->msg.msg.serialcreate.output_cb,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   133      msg->msg.msg.serialcreate.link_status_cb, msg->msg.msg.serialcreate.ctx_cb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   134    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   135  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   136  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   137  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   138   * Call pppos_create() in a thread-safe way by running that function inside the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   139   * tcpip_thread context.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   140   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   141  ppp_pcb*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   142  pppapi_pppos_create(struct netif *pppif, pppos_output_cb_fn output_cb,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   143                 ppp_link_status_cb_fn link_status_cb, void *ctx_cb)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   144  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   145    ppp_pcb* result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   146    PPPAPI_VAR_DECLARE(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   147    PPPAPI_VAR_ALLOC_RETURN_NULL(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   148  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   149    PPPAPI_VAR_REF(msg).msg.ppp = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   150    PPPAPI_VAR_REF(msg).msg.msg.serialcreate.pppif = pppif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   151    PPPAPI_VAR_REF(msg).msg.msg.serialcreate.output_cb = output_cb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   152    PPPAPI_VAR_REF(msg).msg.msg.serialcreate.link_status_cb = link_status_cb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   153    PPPAPI_VAR_REF(msg).msg.msg.serialcreate.ctx_cb = ctx_cb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   154    tcpip_api_call(pppapi_do_pppos_create, &PPPAPI_VAR_REF(msg).call);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   155    result = PPPAPI_VAR_REF(msg).msg.ppp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   156    PPPAPI_VAR_FREE(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   157    return result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   158  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   159  #endif /* PPPOS_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   160  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   161  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   162  #if PPPOE_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   163  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   164   * Call pppoe_create() inside the tcpip_thread context.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   165   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   166  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   167  pppapi_do_pppoe_create(struct tcpip_api_call_data *m)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   168  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   169    /* cast through void* to silence alignment warnings. 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   170     * We know it works because the structs have been instantiated as struct pppapi_msg */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   171    struct pppapi_msg *msg = (struct pppapi_msg *)(void*)m;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   172  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   173    msg->msg.ppp = pppoe_create(msg->msg.msg.ethernetcreate.pppif, msg->msg.msg.ethernetcreate.ethif,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   174      msg->msg.msg.ethernetcreate.service_name, msg->msg.msg.ethernetcreate.concentrator_name,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   175      msg->msg.msg.ethernetcreate.link_status_cb, msg->msg.msg.ethernetcreate.ctx_cb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   176    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   177  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   178  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   179  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   180   * Call pppoe_create() in a thread-safe way by running that function inside the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   181   * tcpip_thread context.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   182   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   183  ppp_pcb*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   184  pppapi_pppoe_create(struct netif *pppif, struct netif *ethif, const char *service_name,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   185                              const char *concentrator_name, ppp_link_status_cb_fn link_status_cb,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   186                              void *ctx_cb)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   187  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   188    ppp_pcb* result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   189    PPPAPI_VAR_DECLARE(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   190    PPPAPI_VAR_ALLOC_RETURN_NULL(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   191  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   192    PPPAPI_VAR_REF(msg).msg.ppp = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   193    PPPAPI_VAR_REF(msg).msg.msg.ethernetcreate.pppif = pppif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   194    PPPAPI_VAR_REF(msg).msg.msg.ethernetcreate.ethif = ethif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   195    PPPAPI_VAR_REF(msg).msg.msg.ethernetcreate.service_name = service_name;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   196    PPPAPI_VAR_REF(msg).msg.msg.ethernetcreate.concentrator_name = concentrator_name;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   197    PPPAPI_VAR_REF(msg).msg.msg.ethernetcreate.link_status_cb = link_status_cb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   198    PPPAPI_VAR_REF(msg).msg.msg.ethernetcreate.ctx_cb = ctx_cb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   199    tcpip_api_call(pppapi_do_pppoe_create, &PPPAPI_VAR_REF(msg).call);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   200    result = PPPAPI_VAR_REF(msg).msg.ppp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   201    PPPAPI_VAR_FREE(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   202    return result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   203  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   204  #endif /* PPPOE_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   205  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   206  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   207  #if PPPOL2TP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   208  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   209   * Call pppol2tp_create() inside the tcpip_thread context.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   210   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   211  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   212  pppapi_do_pppol2tp_create(struct tcpip_api_call_data *m)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   213  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   214    /* cast through void* to silence alignment warnings. 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   215     * We know it works because the structs have been instantiated as struct pppapi_msg */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   216    struct pppapi_msg *msg = (struct pppapi_msg *)(void*)m;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   217  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   218    msg->msg.ppp = pppol2tp_create(msg->msg.msg.l2tpcreate.pppif,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   219      msg->msg.msg.l2tpcreate.netif, API_EXPR_REF(msg->msg.msg.l2tpcreate.ipaddr), msg->msg.msg.l2tpcreate.port,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   220  #if PPPOL2TP_AUTH_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   221      msg->msg.msg.l2tpcreate.secret,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   222      msg->msg.msg.l2tpcreate.secret_len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   223  #else /* PPPOL2TP_AUTH_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   224      NULL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   225      0,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   226  #endif /* PPPOL2TP_AUTH_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   227      msg->msg.msg.l2tpcreate.link_status_cb, msg->msg.msg.l2tpcreate.ctx_cb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   228    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   229  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   230  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   231  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   232   * Call pppol2tp_create() in a thread-safe way by running that function inside the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   233   * tcpip_thread context.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   234   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   235  ppp_pcb*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   236  pppapi_pppol2tp_create(struct netif *pppif, struct netif *netif, ip_addr_t *ipaddr, u16_t port,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   237                          const u8_t *secret, u8_t secret_len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   238                          ppp_link_status_cb_fn link_status_cb, void *ctx_cb)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   239  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   240    ppp_pcb* result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   241    PPPAPI_VAR_DECLARE(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   242    PPPAPI_VAR_ALLOC_RETURN_NULL(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   243  #if !PPPOL2TP_AUTH_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   244    LWIP_UNUSED_ARG(secret);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   245    LWIP_UNUSED_ARG(secret_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   246  #endif /* !PPPOL2TP_AUTH_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   247  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   248    PPPAPI_VAR_REF(msg).msg.ppp = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   249    PPPAPI_VAR_REF(msg).msg.msg.l2tpcreate.pppif = pppif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   250    PPPAPI_VAR_REF(msg).msg.msg.l2tpcreate.netif = netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   251    PPPAPI_VAR_REF(msg).msg.msg.l2tpcreate.ipaddr = PPPAPI_VAR_REF(ipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   252    PPPAPI_VAR_REF(msg).msg.msg.l2tpcreate.port = port;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   253  #if PPPOL2TP_AUTH_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   254    PPPAPI_VAR_REF(msg).msg.msg.l2tpcreate.secret = secret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   255    PPPAPI_VAR_REF(msg).msg.msg.l2tpcreate.secret_len = secret_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   256  #endif /* PPPOL2TP_AUTH_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   257    PPPAPI_VAR_REF(msg).msg.msg.l2tpcreate.link_status_cb = link_status_cb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   258    PPPAPI_VAR_REF(msg).msg.msg.l2tpcreate.ctx_cb = ctx_cb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   259    tcpip_api_call(pppapi_do_pppol2tp_create, &PPPAPI_VAR_REF(msg).call);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   260    result = PPPAPI_VAR_REF(msg).msg.ppp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   261    PPPAPI_VAR_FREE(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   262    return result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   263  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   264  #endif /* PPPOL2TP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   265  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   266  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   267  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   268   * Call ppp_connect() inside the tcpip_thread context.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   269   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   270  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   271  pppapi_do_ppp_connect(struct tcpip_api_call_data *m)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   272  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   273    /* cast through void* to silence alignment warnings. 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   274     * We know it works because the structs have been instantiated as struct pppapi_msg */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   275    struct pppapi_msg *msg = (struct pppapi_msg *)(void*)m;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   276  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   277    return ppp_connect(msg->msg.ppp, msg->msg.msg.connect.holdoff);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   278  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   279  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   280  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   281   * Call ppp_connect() in a thread-safe way by running that function inside the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   282   * tcpip_thread context.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   283   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   284  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   285  pppapi_connect(ppp_pcb *pcb, u16_t holdoff)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   286  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   287    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   288    PPPAPI_VAR_DECLARE(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   289    PPPAPI_VAR_ALLOC(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   290  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   291    PPPAPI_VAR_REF(msg).msg.ppp = pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   292    PPPAPI_VAR_REF(msg).msg.msg.connect.holdoff = holdoff;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   293    err = tcpip_api_call(pppapi_do_ppp_connect, &PPPAPI_VAR_REF(msg).call);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   294    PPPAPI_VAR_FREE(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   295    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   296  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   297  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   298  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   299  #if PPP_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   300  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   301   * Call ppp_listen() inside the tcpip_thread context.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   302   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   303  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   304  pppapi_do_ppp_listen(struct tcpip_api_call_data *m)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   305  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   306    /* cast through void* to silence alignment warnings. 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   307     * We know it works because the structs have been instantiated as struct pppapi_msg */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   308    struct pppapi_msg *msg = (struct pppapi_msg *)(void*)m;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   309  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   310    return ppp_listen(msg->msg.ppp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   311  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   312  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   313  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   314   * Call ppp_listen() in a thread-safe way by running that function inside the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   315   * tcpip_thread context.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   316   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   317  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   318  pppapi_listen(ppp_pcb *pcb)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   319  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   320    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   321    PPPAPI_VAR_DECLARE(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   322    PPPAPI_VAR_ALLOC(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   323  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   324    PPPAPI_VAR_REF(msg).msg.ppp = pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   325    err = tcpip_api_call(pppapi_do_ppp_listen, &PPPAPI_VAR_REF(msg).call);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   326    PPPAPI_VAR_FREE(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   327    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   328  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   329  #endif /* PPP_SERVER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   330  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   331  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   332  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   333   * Call ppp_close() inside the tcpip_thread context.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   334   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   335  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   336  pppapi_do_ppp_close(struct tcpip_api_call_data *m)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   337  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   338    /* cast through void* to silence alignment warnings. 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   339     * We know it works because the structs have been instantiated as struct pppapi_msg */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   340    struct pppapi_msg *msg = (struct pppapi_msg *)(void*)m;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   341  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   342    return ppp_close(msg->msg.ppp, msg->msg.msg.close.nocarrier);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   343  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   344  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   345  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   346   * Call ppp_close() in a thread-safe way by running that function inside the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   347   * tcpip_thread context.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   348   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   349  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   350  pppapi_close(ppp_pcb *pcb, u8_t nocarrier)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   351  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   352    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   353    PPPAPI_VAR_DECLARE(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   354    PPPAPI_VAR_ALLOC(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   355  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   356    PPPAPI_VAR_REF(msg).msg.ppp = pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   357    PPPAPI_VAR_REF(msg).msg.msg.close.nocarrier = nocarrier;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   358    err = tcpip_api_call(pppapi_do_ppp_close, &PPPAPI_VAR_REF(msg).call);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   359    PPPAPI_VAR_FREE(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   360    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   361  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   362  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   363  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   364  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   365   * Call ppp_free() inside the tcpip_thread context.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   366   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   367  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   368  pppapi_do_ppp_free(struct tcpip_api_call_data *m)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   369  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   370    /* cast through void* to silence alignment warnings. 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   371     * We know it works because the structs have been instantiated as struct pppapi_msg */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   372    struct pppapi_msg *msg = (struct pppapi_msg *)(void*)m;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   373  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   374    return ppp_free(msg->msg.ppp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   375  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   376  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   377  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   378   * Call ppp_free() in a thread-safe way by running that function inside the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   379   * tcpip_thread context.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   380   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   381  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   382  pppapi_free(ppp_pcb *pcb)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   383  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   384    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   385    PPPAPI_VAR_DECLARE(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   386    PPPAPI_VAR_ALLOC(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   387  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   388    PPPAPI_VAR_REF(msg).msg.ppp = pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   389    err = tcpip_api_call(pppapi_do_ppp_free, &PPPAPI_VAR_REF(msg).call);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   390    PPPAPI_VAR_FREE(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   391    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   392  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   393  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   394  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   395  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   396   * Call ppp_ioctl() inside the tcpip_thread context.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   397   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   398  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   399  pppapi_do_ppp_ioctl(struct tcpip_api_call_data *m)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   400  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   401    /* cast through void* to silence alignment warnings. 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   402     * We know it works because the structs have been instantiated as struct pppapi_msg */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   403    struct pppapi_msg *msg = (struct pppapi_msg *)(void*)m;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   404  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   405    return ppp_ioctl(msg->msg.ppp, msg->msg.msg.ioctl.cmd, msg->msg.msg.ioctl.arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   406  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   407  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   408  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   409   * Call ppp_ioctl() in a thread-safe way by running that function inside the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   410   * tcpip_thread context.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   411   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   412  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   413  pppapi_ioctl(ppp_pcb *pcb, u8_t cmd, void *arg)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   414  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   415    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   416    PPPAPI_VAR_DECLARE(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   417    PPPAPI_VAR_ALLOC(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   418  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   419    PPPAPI_VAR_REF(msg).msg.ppp = pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   420    PPPAPI_VAR_REF(msg).msg.msg.ioctl.cmd = cmd;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   421    PPPAPI_VAR_REF(msg).msg.msg.ioctl.arg = arg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   422    err = tcpip_api_call(pppapi_do_ppp_ioctl, &PPPAPI_VAR_REF(msg).call);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   423    PPPAPI_VAR_FREE(msg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   424    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   425  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   426  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\pppapi.c	   427  #endif /* LWIP_PPP_API */

	; Module end
