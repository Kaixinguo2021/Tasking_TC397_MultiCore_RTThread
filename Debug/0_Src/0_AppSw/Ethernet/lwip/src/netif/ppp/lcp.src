	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\.lcp.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Rtl8211f -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\lcp.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\lcp.src ..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\lcp.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\lcp.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	733
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\lcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L5
	.byte	2
	.byte	'int',0,4,5,3
	.word	170
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	177
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	219
	.byte	7
	.word	219
	.byte	8
	.byte	'__cmpswapw',0
	.word	235
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	240
	.byte	9
	.byte	'value',0
	.word	219
	.byte	9
	.byte	'compare',0
	.word	219
	.byte	0,2
	.byte	'short int',0,2,5,10
	.byte	'__wchar_t',0,1,1,1
	.word	297
	.byte	10
	.byte	'__size_t',0,1,1,1
	.word	219
	.byte	10
	.byte	'__ptrdiff_t',0,1,1,1
	.word	170
	.byte	11,1,7
	.word	365
	.byte	10
	.byte	'__codeptr',0,1,1,1
	.word	367
	.byte	10
	.byte	'__intptr_t',0,1,1,1
	.word	170
	.byte	10
	.byte	'__uintptr_t',0,1,1,1
	.word	219
	.byte	2
	.byte	'unsigned char',0,1,8,10
	.byte	'uint8',0,2,108,29
	.word	429
	.byte	2
	.byte	'unsigned short int',0,2,7,10
	.byte	'uint16',0,2,112,29
	.word	460
	.byte	2
	.byte	'unsigned long int',0,4,7,10
	.byte	'uint32',0,2,116,29
	.word	497
	.byte	2
	.byte	'char',0,1,6,10
	.byte	'sint8',0,2,125,29
	.word	533
	.byte	10
	.byte	'sint16',0,2,129,1,29
	.word	297
	.byte	2
	.byte	'long int',0,4,5,10
	.byte	'sint32',0,2,134,1,29
	.word	571
	.byte	2
	.byte	'long long int',0,8,5,10
	.byte	'sint64',0,2,141,1,29
	.word	599
	.byte	2
	.byte	'float',0,4,4,10
	.byte	'float32',0,2,170,1,29
	.word	632
	.byte	12
	.byte	'void',0,7
	.word	658
	.byte	10
	.byte	'pvoid',0,3,54,28
	.word	664
	.byte	10
	.byte	'Ifx_TickTime',0,3,76,28
	.word	599
	.byte	10
	.byte	'u32_t',0,4,87,16
	.word	497
	.byte	10
	.byte	'intmax_t',0,5,198,2,41
	.word	599
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,22,0,3,8,58,15,59,15,57,15,73,19,0,0,11,21,0,54,15,0,0,12,59,0
	.byte	3,8,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\lcp.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'cc.h',0,2,0,0
	.byte	'stdint.h',0,3,0,0,0
.L9:
.L7:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	     1  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	     2   * lcp.c - PPP Link Control Protocol.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	     3   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	     4   * Copyright (c) 1984-2000 Carnegie Mellon University. All rights reserved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	     5   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	     6   * Redistribution and use in source and binary forms, with or without
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	     7   * modification, are permitted provided that the following conditions
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	     8   * are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	     9   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    10   * 1. Redistributions of source code must retain the above copyright
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    11   *    notice, this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    12   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    13   * 2. Redistributions in binary form must reproduce the above copyright
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    14   *    notice, this list of conditions and the following disclaimer in
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    15   *    the documentation and/or other materials provided with the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    16   *    distribution.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    17   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    18   * 3. The name "Carnegie Mellon University" must not be used to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    19   *    endorse or promote products derived from this software without
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    20   *    prior written permission. For permission or any legal
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    21   *    details, please contact
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    22   *      Office of Technology Transfer
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    23   *      Carnegie Mellon University
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    24   *      5000 Forbes Avenue
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    25   *      Pittsburgh, PA  15213-3890
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    26   *      (412) 268-4387, fax: (412) 268-7395
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    27   *      tech-transfer@andrew.cmu.edu
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    28   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    29   * 4. Redistributions of any form whatsoever must retain the following
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    30   *    acknowledgment:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    31   *    "This product includes software developed by Computing Services
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    32   *     at Carnegie Mellon University (http://www.cmu.edu/computing/)."
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    33   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    34   * CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    35   * THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    36   * AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    37   * FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    38   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    39   * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    40   * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    41   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    42  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    43  #include "netif/ppp/ppp_opts.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    44  #if PPP_SUPPORT /* don't build if not configured for use in lwipopts.h */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    45  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    46  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    47   * @todo:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    48   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    49  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    50  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    51  #include <stdio.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    52  #include <string.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    53  #include <stdlib.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    54  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    55  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    56  #include "netif/ppp/ppp_impl.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    57  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    58  #include "netif/ppp/fsm.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    59  #include "netif/ppp/lcp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    60  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    61  #include "netif/ppp/chap-new.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    62  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    63  #include "netif/ppp/magic.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    64  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    65  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    66   * When the link comes up we want to be able to wait for a short while,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    67   * or until seeing some input from the peer, before starting to send
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    68   * configure-requests.  We do this by delaying the fsm_lowerup call.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    69   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    70  /* steal a bit in fsm flags word */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    71  #define DELAYED_UP	0x80
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    72  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    73  static void lcp_delayed_up(void *arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    74  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    75  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    76   * LCP-related command-line options.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    77   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    78  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    79  int	lcp_echo_interval = 0; 	/* Interval between LCP echo-requests */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    80  int	lcp_echo_fails = 0;	/* Tolerance to unanswered echo-requests */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    81  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    82  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    83  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    84  /* options */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    85  static u_int lcp_echo_interval      = LCP_ECHOINTERVAL; /* Interval between LCP echo-requests */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    86  static u_int lcp_echo_fails         = LCP_MAXECHOFAILS; /* Tolerance to unanswered echo-requests */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    87  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    88  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    89  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    90  #if PPP_LCP_ADAPTIVE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    91  bool	lcp_echo_adaptive = 0;	/* request echo only if the link was idle */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    92  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    93  bool	lax_recv = 0;		/* accept control chars in asyncmap */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    94  bool	noendpoint = 0;		/* don't send/accept endpoint discriminator */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    95  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    96  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    97  #if PPP_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    98  static int noopt (char **);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	    99  #endif /* PPP_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   100  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   101  #ifdef HAVE_MULTILINK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   102  static int setendpoint (char **);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   103  static void printendpoint (option_t *, void (*)(void *, char *, ...),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   104  			       void *);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   105  #endif /* HAVE_MULTILINK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   106  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   107  #if PPP_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   108  static option_t lcp_option_list[] = {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   109      /* LCP options */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   110      { "-all", o_special_noarg, (void *)noopt,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   111        "Don't request/allow any LCP options" },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   112  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   113      { "noaccomp", o_bool, &lcp_wantoptions[0].neg_accompression,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   114        "Disable address/control compression",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   115        OPT_A2CLR, &lcp_allowoptions[0].neg_accompression },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   116      { "-ac", o_bool, &lcp_wantoptions[0].neg_accompression,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   117        "Disable address/control compression",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   118        OPT_ALIAS | OPT_A2CLR, &lcp_allowoptions[0].neg_accompression },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   119  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   120      { "asyncmap", o_uint32, &lcp_wantoptions[0].asyncmap,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   121        "Set asyncmap (for received packets)",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   122        OPT_OR, &lcp_wantoptions[0].neg_asyncmap },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   123      { "-as", o_uint32, &lcp_wantoptions[0].asyncmap,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   124        "Set asyncmap (for received packets)",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   125        OPT_ALIAS | OPT_OR, &lcp_wantoptions[0].neg_asyncmap },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   126      { "default-asyncmap", o_uint32, &lcp_wantoptions[0].asyncmap,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   127        "Disable asyncmap negotiation",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   128        OPT_OR | OPT_NOARG | OPT_VAL(~0U) | OPT_A2CLR,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   129        &lcp_allowoptions[0].neg_asyncmap },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   130      { "-am", o_uint32, &lcp_wantoptions[0].asyncmap,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   131        "Disable asyncmap negotiation",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   132        OPT_ALIAS | OPT_OR | OPT_NOARG | OPT_VAL(~0U) | OPT_A2CLR,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   133        &lcp_allowoptions[0].neg_asyncmap },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   134  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   135      { "nomagic", o_bool, &lcp_wantoptions[0].neg_magicnumber,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   136        "Disable magic number negotiation (looped-back line detection)",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   137        OPT_A2CLR, &lcp_allowoptions[0].neg_magicnumber },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   138      { "-mn", o_bool, &lcp_wantoptions[0].neg_magicnumber,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   139        "Disable magic number negotiation (looped-back line detection)",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   140        OPT_ALIAS | OPT_A2CLR, &lcp_allowoptions[0].neg_magicnumber },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   141  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   142      { "mru", o_int, &lcp_wantoptions[0].mru,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   143        "Set MRU (maximum received packet size) for negotiation",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   144        OPT_PRIO, &lcp_wantoptions[0].neg_mru },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   145      { "default-mru", o_bool, &lcp_wantoptions[0].neg_mru,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   146        "Disable MRU negotiation (use default 1500)",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   147        OPT_PRIOSUB | OPT_A2CLR, &lcp_allowoptions[0].neg_mru },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   148      { "-mru", o_bool, &lcp_wantoptions[0].neg_mru,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   149        "Disable MRU negotiation (use default 1500)",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   150        OPT_ALIAS | OPT_PRIOSUB | OPT_A2CLR, &lcp_allowoptions[0].neg_mru },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   151  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   152      { "mtu", o_int, &lcp_allowoptions[0].mru,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   153        "Set our MTU", OPT_LIMITS, NULL, MAXMRU, MINMRU },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   154  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   155      { "nopcomp", o_bool, &lcp_wantoptions[0].neg_pcompression,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   156        "Disable protocol field compression",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   157        OPT_A2CLR, &lcp_allowoptions[0].neg_pcompression },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   158      { "-pc", o_bool, &lcp_wantoptions[0].neg_pcompression,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   159        "Disable protocol field compression",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   160        OPT_ALIAS | OPT_A2CLR, &lcp_allowoptions[0].neg_pcompression },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   161  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   162      { "passive", o_bool, &lcp_wantoptions[0].passive,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   163        "Set passive mode", 1 },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   164      { "-p", o_bool, &lcp_wantoptions[0].passive,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   165        "Set passive mode", OPT_ALIAS | 1 },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   166  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   167      { "silent", o_bool, &lcp_wantoptions[0].silent,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   168        "Set silent mode", 1 },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   169  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   170      { "lcp-echo-failure", o_int, &lcp_echo_fails,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   171        "Set number of consecutive echo failures to indicate link failure",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   172        OPT_PRIO },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   173      { "lcp-echo-interval", o_int, &lcp_echo_interval,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   174        "Set time in seconds between LCP echo requests", OPT_PRIO },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   175  #if PPP_LCP_ADAPTIVE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   176      { "lcp-echo-adaptive", o_bool, &lcp_echo_adaptive,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   177        "Suppress LCP echo requests if traffic was received", 1 },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   178  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   179      { "lcp-restart", o_int, &lcp_fsm[0].timeouttime,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   180        "Set time in seconds between LCP retransmissions", OPT_PRIO },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   181      { "lcp-max-terminate", o_int, &lcp_fsm[0].maxtermtransmits,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   182        "Set maximum number of LCP terminate-request transmissions", OPT_PRIO },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   183      { "lcp-max-configure", o_int, &lcp_fsm[0].maxconfreqtransmits,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   184        "Set maximum number of LCP configure-request transmissions", OPT_PRIO },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   185      { "lcp-max-failure", o_int, &lcp_fsm[0].maxnakloops,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   186        "Set limit on number of LCP configure-naks", OPT_PRIO },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   187  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   188      { "receive-all", o_bool, &lax_recv,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   189        "Accept all received control characters", 1 },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   190  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   191  #ifdef HAVE_MULTILINK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   192      { "mrru", o_int, &lcp_wantoptions[0].mrru,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   193        "Maximum received packet size for multilink bundle",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   194        OPT_PRIO, &lcp_wantoptions[0].neg_mrru },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   195  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   196      { "mpshortseq", o_bool, &lcp_wantoptions[0].neg_ssnhf,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   197        "Use short sequence numbers in multilink headers",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   198        OPT_PRIO | 1, &lcp_allowoptions[0].neg_ssnhf },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   199      { "nompshortseq", o_bool, &lcp_wantoptions[0].neg_ssnhf,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   200        "Don't use short sequence numbers in multilink headers",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   201        OPT_PRIOSUB | OPT_A2CLR, &lcp_allowoptions[0].neg_ssnhf },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   202  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   203      { "endpoint", o_special, (void *) setendpoint,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   204        "Endpoint discriminator for multilink",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   205        OPT_PRIO | OPT_A2PRINTER, (void *) printendpoint },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   206  #endif /* HAVE_MULTILINK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   207  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   208      { "noendpoint", o_bool, &noendpoint,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   209        "Don't send or accept multilink endpoint discriminator", 1 },
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   210  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   211      {NULL}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   212  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   213  #endif /* PPP_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   214  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   215  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   216   * Callbacks for fsm code.  (CI = Configuration Information)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   217   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   218  static void lcp_resetci(fsm *f);	/* Reset our CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   219  static int  lcp_cilen(fsm *f);		/* Return length of our CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   220  static void lcp_addci(fsm *f, u_char *ucp, int *lenp); /* Add our CI to pkt */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   221  static int  lcp_ackci(fsm *f, u_char *p, int len); /* Peer ack'd our CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   222  static int  lcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject); /* Peer nak'd our CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   223  static int  lcp_rejci(fsm *f, u_char *p, int len); /* Peer rej'd our CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   224  static int  lcp_reqci(fsm *f, u_char *inp, int *lenp, int reject_if_disagree); /* Rcv peer CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   225  static void lcp_up(fsm *f);		/* We're UP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   226  static void lcp_down(fsm *f);		/* We're DOWN */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   227  static void lcp_starting (fsm *);	/* We need lower layer up */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   228  static void lcp_finished (fsm *);	/* We need lower layer down */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   229  static int  lcp_extcode(fsm *f, int code, int id, u_char *inp, int len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   230  static void lcp_rprotrej(fsm *f, u_char *inp, int len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   231  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   232  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   233   * routines to send LCP echos to peer
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   234   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   235  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   236  static void lcp_echo_lowerup(ppp_pcb *pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   237  static void lcp_echo_lowerdown(ppp_pcb *pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   238  static void LcpEchoTimeout(void *arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   239  static void lcp_received_echo_reply(fsm *f, int id, u_char *inp, int len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   240  static void LcpSendEchoRequest(fsm *f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   241  static void LcpLinkFailure(fsm *f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   242  static void LcpEchoCheck(fsm *f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   243  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   244  static const fsm_callbacks lcp_callbacks = {	/* LCP callback routines */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   245      lcp_resetci,		/* Reset our Configuration Information */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   246      lcp_cilen,			/* Length of our Configuration Information */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   247      lcp_addci,			/* Add our Configuration Information */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   248      lcp_ackci,			/* ACK our Configuration Information */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   249      lcp_nakci,			/* NAK our Configuration Information */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   250      lcp_rejci,			/* Reject our Configuration Information */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   251      lcp_reqci,			/* Request peer's Configuration Information */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   252      lcp_up,			/* Called when fsm reaches OPENED state */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   253      lcp_down,			/* Called when fsm leaves OPENED state */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   254      lcp_starting,		/* Called when we want the lower layer up */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   255      lcp_finished,		/* Called when we want the lower layer down */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   256      NULL,			/* Called when Protocol-Reject received */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   257      NULL,			/* Retransmission is necessary */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   258      lcp_extcode,		/* Called to handle LCP-specific codes */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   259      "LCP"			/* String name of protocol */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   260  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   261  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   262  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   263   * Protocol entry points.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   264   * Some of these are called directly.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   265   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   266  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   267  static void lcp_init(ppp_pcb *pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   268  static void lcp_input(ppp_pcb *pcb, u_char *p, int len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   269  static void lcp_protrej(ppp_pcb *pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   270  #if PRINTPKT_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   271  static int lcp_printpkt(const u_char *p, int plen,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   272  		void (*printer) (void *, const char *, ...), void *arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   273  #endif /* PRINTPKT_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   274  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   275  const struct protent lcp_protent = {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   276      PPP_LCP,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   277      lcp_init,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   278      lcp_input,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   279      lcp_protrej,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   280      lcp_lowerup,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   281      lcp_lowerdown,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   282      lcp_open,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   283      lcp_close,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   284  #if PRINTPKT_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   285      lcp_printpkt,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   286  #endif /* PRINTPKT_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   287  #if PPP_DATAINPUT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   288      NULL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   289  #endif /* PPP_DATAINPUT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   290  #if PRINTPKT_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   291      "LCP",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   292      NULL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   293  #endif /* PRINTPKT_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   294  #if PPP_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   295      lcp_option_list,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   296      NULL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   297  #endif /* PPP_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   298  #if DEMAND_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   299      NULL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   300      NULL
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   301  #endif /* DEMAND_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   302  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   303  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   304  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   305   * Length of each type of configuration option (in octets)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   306   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   307  #define CILEN_VOID	2
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   308  #define CILEN_CHAR	3
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   309  #define CILEN_SHORT	4	/* CILEN_VOID + 2 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   310  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   311  #define CILEN_CHAP	5	/* CILEN_VOID + 2 + 1 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   312  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   313  #define CILEN_LONG	6	/* CILEN_VOID + 4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   314  #if LQR_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   315  #define CILEN_LQR	8	/* CILEN_VOID + 2 + 4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   316  #endif /* LQR_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   317  #define CILEN_CBCP	3
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   318  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   319  #define CODENAME(x)	((x) == CONFACK ? "ACK" : \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   320  			 (x) == CONFNAK ? "NAK" : "REJ")
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   321  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   322  #if PPP_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   323  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   324   * noopt - Disable all options (why?).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   325   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   326  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   327  noopt(argv)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   328      char **argv;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   329  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   330      BZERO((char *) &lcp_wantoptions[0], sizeof (struct lcp_options));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   331      BZERO((char *) &lcp_allowoptions[0], sizeof (struct lcp_options));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   332  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   333      return (1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   334  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   335  #endif /* PPP_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   336  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   337  #ifdef HAVE_MULTILINK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   338  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   339  setendpoint(argv)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   340      char **argv;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   341  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   342      if (str_to_epdisc(&lcp_wantoptions[0].endpoint, *argv)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   343  	lcp_wantoptions[0].neg_endpoint = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   344  	return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   345      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   346      option_error("Can't parse '%s' as an endpoint discriminator", *argv);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   347      return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   348  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   349  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   350  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   351  printendpoint(opt, printer, arg)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   352      option_t *opt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   353      void (*printer) (void *, char *, ...);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   354      void *arg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   355  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   356  	printer(arg, "%s", epdisc_to_str(&lcp_wantoptions[0].endpoint));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   357  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   358  #endif /* HAVE_MULTILINK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   359  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   360  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   361   * lcp_init - Initialize LCP.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   362   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   363  static void lcp_init(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   364      fsm *f = &pcb->lcp_fsm;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   365      lcp_options *wo = &pcb->lcp_wantoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   366      lcp_options *ao = &pcb->lcp_allowoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   367  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   368      f->pcb = pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   369      f->protocol = PPP_LCP;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   370      f->callbacks = &lcp_callbacks;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   371  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   372      fsm_init(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   373  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   374      BZERO(wo, sizeof(*wo));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   375      wo->neg_mru = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   376      wo->mru = PPP_DEFMRU;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   377      wo->neg_asyncmap = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   378      wo->neg_magicnumber = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   379      wo->neg_pcompression = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   380      wo->neg_accompression = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   381  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   382      BZERO(ao, sizeof(*ao));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   383      ao->neg_mru = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   384      ao->mru = PPP_MAXMRU;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   385      ao->neg_asyncmap = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   386  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   387      ao->neg_chap = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   388      ao->chap_mdtype = CHAP_MDTYPE_SUPPORTED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   389  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   390  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   391      ao->neg_upap = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   392  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   393  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   394      ao->neg_eap = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   395  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   396      ao->neg_magicnumber = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   397      ao->neg_pcompression = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   398      ao->neg_accompression = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   399      ao->neg_endpoint = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   400  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   401  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   402  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   403  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   404   * lcp_open - LCP is allowed to come up.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   405   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   406  void lcp_open(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   407      fsm *f = &pcb->lcp_fsm;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   408      lcp_options *wo = &pcb->lcp_wantoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   409  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   410      f->flags &= ~(OPT_PASSIVE | OPT_SILENT);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   411      if (wo->passive)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   412  	f->flags |= OPT_PASSIVE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   413      if (wo->silent)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   414  	f->flags |= OPT_SILENT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   415      fsm_open(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   416  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   417  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   418  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   419  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   420   * lcp_close - Take LCP down.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   421   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   422  void lcp_close(ppp_pcb *pcb, const char *reason) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   423      fsm *f = &pcb->lcp_fsm;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   424      int oldstate;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   425  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   426      if (pcb->phase != PPP_PHASE_DEAD
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   427  #ifdef HAVE_MULTILINK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   428      && pcb->phase != PPP_PHASE_MASTER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   429  #endif /* HAVE_MULTILINK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   430      )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   431  	new_phase(pcb, PPP_PHASE_TERMINATE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   432  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   433      if (f->flags & DELAYED_UP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   434  	UNTIMEOUT(lcp_delayed_up, f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   435  	f->state = PPP_FSM_STOPPED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   436      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   437      oldstate = f->state;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   438  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   439      fsm_close(f, reason);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   440      if (oldstate == PPP_FSM_STOPPED && (f->flags & (OPT_PASSIVE|OPT_SILENT|DELAYED_UP))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   441  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   442  	 * This action is not strictly according to the FSM in RFC1548,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   443  	 * but it does mean that the program terminates if you do a
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   444  	 * lcp_close() when a connection hasn't been established
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   445  	 * because we are in passive/silent mode or because we have
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   446  	 * delayed the fsm_lowerup() call and it hasn't happened yet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   447  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   448  	f->flags &= ~DELAYED_UP;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   449  	lcp_finished(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   450      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   451  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   452  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   453  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   454  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   455   * lcp_lowerup - The lower layer is up.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   456   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   457  void lcp_lowerup(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   458      lcp_options *wo = &pcb->lcp_wantoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   459      fsm *f = &pcb->lcp_fsm;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   460      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   461       * Don't use A/C or protocol compression on transmission,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   462       * but accept A/C and protocol compressed packets
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   463       * if we are going to ask for A/C and protocol compression.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   464       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   465      if (ppp_send_config(pcb, PPP_MRU, 0xffffffff, 0, 0) < 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   466  	|| ppp_recv_config(pcb, PPP_MRU, (pcb->settings.lax_recv? 0: 0xffffffff),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   467  			   wo->neg_pcompression, wo->neg_accompression) < 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   468  	    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   469      pcb->peer_mru = PPP_MRU;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   470  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   471      if (pcb->settings.listen_time != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   472  	f->flags |= DELAYED_UP;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   473  	TIMEOUTMS(lcp_delayed_up, f, pcb->settings.listen_time);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   474      } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   475  	fsm_lowerup(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   476  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   477  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   478  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   479  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   480   * lcp_lowerdown - The lower layer is down.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   481   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   482  void lcp_lowerdown(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   483      fsm *f = &pcb->lcp_fsm;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   484  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   485      if (f->flags & DELAYED_UP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   486  	f->flags &= ~DELAYED_UP;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   487  	UNTIMEOUT(lcp_delayed_up, f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   488      } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   489  	fsm_lowerdown(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   490  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   491  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   492  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   493  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   494   * lcp_delayed_up - Bring the lower layer up now.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   495   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   496  static void lcp_delayed_up(void *arg) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   497      fsm *f = (fsm*)arg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   498  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   499      if (f->flags & DELAYED_UP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   500  	f->flags &= ~DELAYED_UP;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   501  	fsm_lowerup(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   502      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   503  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   504  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   505  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   506  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   507   * lcp_input - Input LCP packet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   508   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   509  static void lcp_input(ppp_pcb *pcb, u_char *p, int len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   510      fsm *f = &pcb->lcp_fsm;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   511  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   512      if (f->flags & DELAYED_UP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   513  	f->flags &= ~DELAYED_UP;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   514  	UNTIMEOUT(lcp_delayed_up, f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   515  	fsm_lowerup(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   516      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   517      fsm_input(f, p, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   518  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   519  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   520  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   521   * lcp_extcode - Handle a LCP-specific code.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   522   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   523  static int lcp_extcode(fsm *f, int code, int id, u_char *inp, int len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   524      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   525      lcp_options *go = &pcb->lcp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   526      u_char *magp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   527  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   528      switch( code ){
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   529      case PROTREJ:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   530  	lcp_rprotrej(f, inp, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   531  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   532      
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   533      case ECHOREQ:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   534  	if (f->state != PPP_FSM_OPENED)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   535  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   536  	magp = inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   537  	PUTLONG(go->magicnumber, magp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   538  	fsm_sdata(f, ECHOREP, id, inp, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   539  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   540      
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   541      case ECHOREP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   542  	lcp_received_echo_reply(f, id, inp, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   543  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   544  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   545      case DISCREQ:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   546      case IDENTIF:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   547      case TIMEREM:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   548  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   549  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   550      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   551  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   552      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   553      return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   554  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   555  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   556      
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   557  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   558   * lcp_rprotrej - Receive an Protocol-Reject.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   559   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   560   * Figure out which protocol is rejected and inform it.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   561   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   562  static void lcp_rprotrej(fsm *f, u_char *inp, int len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   563      int i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   564      const struct protent *protp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   565      u_short prot;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   566  #if PPP_PROTOCOLNAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   567      const char *pname;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   568  #endif /* PPP_PROTOCOLNAME */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   569  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   570      if (len < 2) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   571  	LCPDEBUG(("lcp_rprotrej: Rcvd short Protocol-Reject packet!"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   572  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   573      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   574  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   575      GETSHORT(prot, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   576  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   577      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   578       * Protocol-Reject packets received in any state other than the LCP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   579       * OPENED state SHOULD be silently discarded.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   580       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   581      if( f->state != PPP_FSM_OPENED ){
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   582  	LCPDEBUG(("Protocol-Reject discarded: LCP in state %d", f->state));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   583  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   584      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   585  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   586  #if PPP_PROTOCOLNAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   587      pname = protocol_name(prot);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   588  #endif /* PPP_PROTOCOLNAME */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   589  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   590      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   591       * Upcall the proper Protocol-Reject routine.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   592       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   593      for (i = 0; (protp = protocols[i]) != NULL; ++i)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   594  	if (protp->protocol == prot) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   595  #if PPP_PROTOCOLNAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   596  	    if (pname != NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   597  		ppp_dbglog("Protocol-Reject for '%s' (0x%x) received", pname,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   598  		       prot);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   599  	    else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   600  #endif /* PPP_PROTOCOLNAME */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   601  		ppp_dbglog("Protocol-Reject for 0x%x received", prot);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   602  	    (*protp->protrej)(f->pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   603  	    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   604  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   605  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   606  #if PPP_PROTOCOLNAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   607      if (pname != NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   608  	ppp_warn("Protocol-Reject for unsupported protocol '%s' (0x%x)", pname,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   609  	     prot);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   610      else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   611  #endif /* #if PPP_PROTOCOLNAME */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   612  	ppp_warn("Protocol-Reject for unsupported protocol 0x%x", prot);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   613  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   614  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   615  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   616  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   617   * lcp_protrej - A Protocol-Reject was received.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   618   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   619  /*ARGSUSED*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   620  static void lcp_protrej(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   621      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   622       * Can't reject LCP!
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   623       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   624      ppp_error("Received Protocol-Reject for LCP!");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   625      fsm_protreject(&pcb->lcp_fsm);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   626  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   627  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   628  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   629  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   630   * lcp_sprotrej - Send a Protocol-Reject for some protocol.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   631   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   632  void lcp_sprotrej(ppp_pcb *pcb, u_char *p, int len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   633      fsm *f = &pcb->lcp_fsm;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   634      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   635       * Send back the protocol and the information field of the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   636       * rejected packet.  We only get here if LCP is in the OPENED state.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   637       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   638  #if 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   639      p += 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   640      len -= 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   641  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   642  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   643      fsm_sdata(f, PROTREJ, ++f->id,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   644  	      p, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   645  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   646  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   647  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   648  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   649   * lcp_resetci - Reset our CI.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   650   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   651  static void lcp_resetci(fsm *f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   652      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   653      lcp_options *wo = &pcb->lcp_wantoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   654      lcp_options *go = &pcb->lcp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   655      lcp_options *ao = &pcb->lcp_allowoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   656  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   657  #if PPP_AUTH_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   658  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   659      /* note: default value is true for allow options */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   660      if (pcb->settings.user && pcb->settings.passwd) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   661  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   662        if (pcb->settings.refuse_pap) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   663          ao->neg_upap = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   664        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   665  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   666  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   667        if (pcb->settings.refuse_chap) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   668          ao->chap_mdtype &= ~MDTYPE_MD5;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   669        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   670  #if MSCHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   671        if (pcb->settings.refuse_mschap) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   672          ao->chap_mdtype &= ~MDTYPE_MICROSOFT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   673        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   674        if (pcb->settings.refuse_mschap_v2) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   675          ao->chap_mdtype &= ~MDTYPE_MICROSOFT_V2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   676        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   677  #endif /* MSCHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   678        ao->neg_chap = (ao->chap_mdtype != MDTYPE_NONE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   679  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   680  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   681        if (pcb->settings.refuse_eap) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   682          ao->neg_eap = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   683        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   684  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   685  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   686  #if PPP_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   687        /* note: default value is false for wanted options */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   688        if (pcb->settings.auth_required) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   689  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   690          if (!pcb->settings.refuse_pap) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   691            wo->neg_upap = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   692          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   693  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   694  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   695          if (!pcb->settings.refuse_chap) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   696            wo->chap_mdtype |= MDTYPE_MD5;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   697          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   698  #if MSCHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   699          if (!pcb->settings.refuse_mschap) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   700            wo->chap_mdtype |= MDTYPE_MICROSOFT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   701          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   702          if (!pcb->settings.refuse_mschap_v2) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   703            wo->chap_mdtype |= MDTYPE_MICROSOFT_V2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   704          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   705  #endif /* MSCHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   706          wo->neg_chap = (wo->chap_mdtype != MDTYPE_NONE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   707  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   708  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   709          if (!pcb->settings.refuse_eap) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   710            wo->neg_eap = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   711          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   712  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   713        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   714  #endif /* PPP_SERVER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   715  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   716      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   717  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   718        ao->neg_upap = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   719  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   720  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   721        ao->neg_chap = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   722        ao->chap_mdtype = MDTYPE_NONE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   723  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   724  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   725        ao->neg_eap = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   726  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   727      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   728  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   729      PPPDEBUG(LOG_DEBUG, ("ppp: auth protocols:"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   730  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   731      PPPDEBUG(LOG_DEBUG, (" PAP=%d", ao->neg_upap));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   732  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   733  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   734      PPPDEBUG(LOG_DEBUG, (" CHAP=%d CHAP_MD5=%d", ao->neg_chap, !!(ao->chap_mdtype&MDTYPE_MD5)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   735  #if MSCHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   736      PPPDEBUG(LOG_DEBUG, (" CHAP_MS=%d CHAP_MS2=%d", !!(ao->chap_mdtype&MDTYPE_MICROSOFT), !!(ao->chap_mdtype&MDTYPE_MICROSOFT_V2)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   737  #endif /* MSCHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   738  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   739  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   740      PPPDEBUG(LOG_DEBUG, (" EAP=%d", ao->neg_eap));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   741  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   742      PPPDEBUG(LOG_DEBUG, ("\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   743  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   744  #endif /* PPP_AUTH_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   745  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   746      wo->magicnumber = magic();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   747      wo->numloops = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   748      *go = *wo;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   749  #ifdef HAVE_MULTILINK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   750      if (!multilink) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   751  	go->neg_mrru = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   752  #endif /* HAVE_MULTILINK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   753  	go->neg_ssnhf = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   754  	go->neg_endpoint = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   755  #ifdef HAVE_MULTILINK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   756      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   757  #endif /* HAVE_MULTILINK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   758      if (pcb->settings.noendpoint)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   759  	ao->neg_endpoint = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   760      pcb->peer_mru = PPP_MRU;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   761  #if 0 /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   762      auth_reset(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   763  #endif /* UNUSED */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   764  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   765  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   766  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   767  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   768   * lcp_cilen - Return length of our CI.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   769   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   770  static int lcp_cilen(fsm *f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   771      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   772      lcp_options *go = &pcb->lcp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   773  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   774  #define LENCIVOID(neg)	((neg) ? CILEN_VOID : 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   775  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   776  #define LENCICHAP(neg)	((neg) ? CILEN_CHAP : 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   777  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   778  #define LENCISHORT(neg)	((neg) ? CILEN_SHORT : 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   779  #define LENCILONG(neg)	((neg) ? CILEN_LONG : 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   780  #if LQR_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   781  #define LENCILQR(neg)	((neg) ? CILEN_LQR: 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   782  #endif /* LQR_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   783  #define LENCICBCP(neg)	((neg) ? CILEN_CBCP: 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   784      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   785       * NB: we only ask for one of CHAP, UPAP, or EAP, even if we will
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   786       * accept more than one.  We prefer EAP first, then CHAP, then
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   787       * PAP.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   788       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   789      return (LENCISHORT(go->neg_mru && go->mru != PPP_DEFMRU) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   790  	    LENCILONG(go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   791  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   792  	    LENCISHORT(go->neg_eap) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   793  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   794  #if CHAP_SUPPORT /* cannot be improved, embedding a directive within macro arguments is not portable */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   795  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   796  	    LENCICHAP(!go->neg_eap && go->neg_chap) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   797  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   798  #if !EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   799  	    LENCICHAP(go->neg_chap) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   800  #endif /* !EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   801  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   802  #if PAP_SUPPORT /* cannot be improved, embedding a directive within macro arguments is not portable */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   803  #if EAP_SUPPORT && CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   804  	    LENCISHORT(!go->neg_eap && !go->neg_chap && go->neg_upap) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   805  #endif /* EAP_SUPPORT && CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   806  #if EAP_SUPPORT && !CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   807  	    LENCISHORT(!go->neg_eap && go->neg_upap) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   808  #endif /* EAP_SUPPORT && !CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   809  #if !EAP_SUPPORT && CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   810  	    LENCISHORT(!go->neg_chap && go->neg_upap) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   811  #endif /* !EAP_SUPPORT && CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   812  #if !EAP_SUPPORT && !CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   813  	    LENCISHORT(go->neg_upap) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   814  #endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   815  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   816  #if LQR_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   817  	    LENCILQR(go->neg_lqr) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   818  #endif /* LQR_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   819  	    LENCICBCP(go->neg_cbcp) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   820  	    LENCILONG(go->neg_magicnumber) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   821  	    LENCIVOID(go->neg_pcompression) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   822  	    LENCIVOID(go->neg_accompression) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   823  #ifdef HAVE_MULTILINK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   824  	    LENCISHORT(go->neg_mrru) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   825  #endif /* HAVE_MULTILINK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   826  	    LENCIVOID(go->neg_ssnhf) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   827  	    (go->neg_endpoint? CILEN_CHAR + go->endpoint.length: 0));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   828  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   829  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   830  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   831  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   832   * lcp_addci - Add our desired CIs to a packet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   833   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   834  static void lcp_addci(fsm *f, u_char *ucp, int *lenp) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   835      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   836      lcp_options *go = &pcb->lcp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   837      u_char *start_ucp = ucp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   838  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   839  #define ADDCIVOID(opt, neg) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   840      if (neg) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   841  	PUTCHAR(opt, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   842  	PUTCHAR(CILEN_VOID, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   843      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   844  #define ADDCISHORT(opt, neg, val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   845      if (neg) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   846  	PUTCHAR(opt, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   847  	PUTCHAR(CILEN_SHORT, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   848  	PUTSHORT(val, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   849      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   850  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   851  #define ADDCICHAP(opt, neg, val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   852      if (neg) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   853  	PUTCHAR((opt), ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   854  	PUTCHAR(CILEN_CHAP, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   855  	PUTSHORT(PPP_CHAP, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   856  	PUTCHAR((CHAP_DIGEST(val)), ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   857      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   858  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   859  #define ADDCILONG(opt, neg, val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   860      if (neg) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   861  	PUTCHAR(opt, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   862  	PUTCHAR(CILEN_LONG, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   863  	PUTLONG(val, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   864      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   865  #if LQR_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   866  #define ADDCILQR(opt, neg, val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   867      if (neg) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   868  	PUTCHAR(opt, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   869  	PUTCHAR(CILEN_LQR, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   870  	PUTSHORT(PPP_LQR, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   871  	PUTLONG(val, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   872      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   873  #endif /* LQR_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   874  #define ADDCICHAR(opt, neg, val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   875      if (neg) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   876  	PUTCHAR(opt, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   877  	PUTCHAR(CILEN_CHAR, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   878  	PUTCHAR(val, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   879      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   880  #define ADDCIENDP(opt, neg, class, val, len) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   881      if (neg) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   882  	int i; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   883  	PUTCHAR(opt, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   884  	PUTCHAR(CILEN_CHAR + len, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   885  	PUTCHAR(class, ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   886  	for (i = 0; i < len; ++i) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   887  	    PUTCHAR(val[i], ucp); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   888      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   889  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   890      ADDCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   891      ADDCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   892  	      go->asyncmap);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   893  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   894      ADDCISHORT(CI_AUTHTYPE, go->neg_eap, PPP_EAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   895  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   896  #if CHAP_SUPPORT /* cannot be improved, embedding a directive within macro arguments is not portable */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   897  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   898      ADDCICHAP(CI_AUTHTYPE, !go->neg_eap && go->neg_chap, go->chap_mdtype);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   899  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   900  #if !EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   901      ADDCICHAP(CI_AUTHTYPE, go->neg_chap, go->chap_mdtype);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   902  #endif /* !EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   903  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   904  #if PAP_SUPPORT /* cannot be improved, embedding a directive within macro arguments is not portable */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   905  #if EAP_SUPPORT && CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   906      ADDCISHORT(CI_AUTHTYPE, !go->neg_eap && !go->neg_chap && go->neg_upap, PPP_PAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   907  #endif /* EAP_SUPPORT && CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   908  #if EAP_SUPPORT && !CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   909      ADDCISHORT(CI_AUTHTYPE, !go->neg_eap && go->neg_upap, PPP_PAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   910  #endif /* EAP_SUPPORT && !CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   911  #if !EAP_SUPPORT && CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   912      ADDCISHORT(CI_AUTHTYPE, !go->neg_chap && go->neg_upap, PPP_PAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   913  #endif /* !EAP_SUPPORT && CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   914  #if !EAP_SUPPORT && !CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   915      ADDCISHORT(CI_AUTHTYPE, go->neg_upap, PPP_PAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   916  #endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   917  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   918  #if LQR_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   919      ADDCILQR(CI_QUALITY, go->neg_lqr, go->lqr_period);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   920  #endif /* LQR_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   921      ADDCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   922      ADDCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   923      ADDCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   924      ADDCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   925  #ifdef HAVE_MULTILINK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   926      ADDCISHORT(CI_MRRU, go->neg_mrru, go->mrru);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   927  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   928      ADDCIVOID(CI_SSNHF, go->neg_ssnhf);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   929      ADDCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   930  	      go->endpoint.value, go->endpoint.length);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   931  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   932      if (ucp - start_ucp != *lenp) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   933  	/* this should never happen, because peer_mtu should be 1500 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   934  	ppp_error("Bug in lcp_addci: wrong length");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   935      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   936  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   937  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   938  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   939  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   940   * lcp_ackci - Ack our CIs.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   941   * This should not modify any state if the Ack is bad.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   942   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   943   * Returns:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   944   *	0 - Ack was bad.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   945   *	1 - Ack was good.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   946   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   947  static int lcp_ackci(fsm *f, u_char *p, int len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   948      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   949      lcp_options *go = &pcb->lcp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   950      u_char cilen, citype, cichar;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   951      u_short cishort;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   952      u32_t cilong;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   953  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   954      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   955       * CIs must be in exactly the same order that we sent.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   956       * Check packet length and CI length at each step.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   957       * If we find any deviations, then this packet is bad.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   958       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   959  #define ACKCIVOID(opt, neg) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   960      if (neg) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   961  	if ((len -= CILEN_VOID) < 0) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   962  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   963  	GETCHAR(citype, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   964  	GETCHAR(cilen, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   965  	if (cilen != CILEN_VOID || \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   966  	    citype != opt) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   967  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   968      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   969  #define ACKCISHORT(opt, neg, val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   970      if (neg) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   971  	if ((len -= CILEN_SHORT) < 0) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   972  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   973  	GETCHAR(citype, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   974  	GETCHAR(cilen, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   975  	if (cilen != CILEN_SHORT || \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   976  	    citype != opt) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   977  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   978  	GETSHORT(cishort, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   979  	if (cishort != val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   980  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   981      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   982  #define ACKCICHAR(opt, neg, val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   983      if (neg) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   984  	if ((len -= CILEN_CHAR) < 0) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   985  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   986  	GETCHAR(citype, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   987  	GETCHAR(cilen, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   988  	if (cilen != CILEN_CHAR || \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   989  	    citype != opt) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   990  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   991  	GETCHAR(cichar, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   992  	if (cichar != val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   993  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   994      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   995  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   996  #define ACKCICHAP(opt, neg, val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   997      if (neg) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   998  	if ((len -= CILEN_CHAP) < 0) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	   999  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1000  	GETCHAR(citype, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1001  	GETCHAR(cilen, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1002  	if (cilen != CILEN_CHAP || \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1003  	    citype != (opt)) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1004  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1005  	GETSHORT(cishort, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1006  	if (cishort != PPP_CHAP) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1007  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1008  	GETCHAR(cichar, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1009  	if (cichar != (CHAP_DIGEST(val))) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1010  	  goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1011      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1012  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1013  #define ACKCILONG(opt, neg, val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1014      if (neg) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1015  	if ((len -= CILEN_LONG) < 0) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1016  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1017  	GETCHAR(citype, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1018  	GETCHAR(cilen, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1019  	if (cilen != CILEN_LONG || \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1020  	    citype != opt) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1021  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1022  	GETLONG(cilong, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1023  	if (cilong != val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1024  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1025      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1026  #if LQR_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1027  #define ACKCILQR(opt, neg, val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1028      if (neg) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1029  	if ((len -= CILEN_LQR) < 0) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1030  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1031  	GETCHAR(citype, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1032  	GETCHAR(cilen, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1033  	if (cilen != CILEN_LQR || \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1034  	    citype != opt) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1035  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1036  	GETSHORT(cishort, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1037  	if (cishort != PPP_LQR) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1038  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1039  	GETLONG(cilong, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1040  	if (cilong != val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1041  	  goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1042      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1043  #endif /* LQR_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1044  #define ACKCIENDP(opt, neg, class, val, vlen) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1045      if (neg) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1046  	int i; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1047  	if ((len -= CILEN_CHAR + vlen) < 0) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1048  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1049  	GETCHAR(citype, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1050  	GETCHAR(cilen, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1051  	if (cilen != CILEN_CHAR + vlen || \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1052  	    citype != opt) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1053  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1054  	GETCHAR(cichar, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1055  	if (cichar != class) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1056  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1057  	for (i = 0; i < vlen; ++i) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1058  	    GETCHAR(cichar, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1059  	    if (cichar != val[i]) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1060  		goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1061  	} \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1062      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1063  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1064      ACKCISHORT(CI_MRU, go->neg_mru && go->mru != PPP_DEFMRU, go->mru);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1065      ACKCILONG(CI_ASYNCMAP, go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1066  	      go->asyncmap);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1067  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1068      ACKCISHORT(CI_AUTHTYPE, go->neg_eap, PPP_EAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1069  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1070  #if CHAP_SUPPORT /* cannot be improved, embedding a directive within macro arguments is not portable */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1071  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1072      ACKCICHAP(CI_AUTHTYPE, !go->neg_eap && go->neg_chap, go->chap_mdtype);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1073  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1074  #if !EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1075      ACKCICHAP(CI_AUTHTYPE, go->neg_chap, go->chap_mdtype);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1076  #endif /* !EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1077  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1078  #if PAP_SUPPORT /* cannot be improved, embedding a directive within macro arguments is not portable */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1079  #if EAP_SUPPORT && CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1080      ACKCISHORT(CI_AUTHTYPE, !go->neg_eap && !go->neg_chap && go->neg_upap, PPP_PAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1081  #endif /* EAP_SUPPORT && CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1082  #if EAP_SUPPORT && !CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1083      ACKCISHORT(CI_AUTHTYPE, !go->neg_eap && go->neg_upap, PPP_PAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1084  #endif /* EAP_SUPPORT && !CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1085  #if !EAP_SUPPORT && CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1086      ACKCISHORT(CI_AUTHTYPE, !go->neg_chap && go->neg_upap, PPP_PAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1087  #endif /* !EAP_SUPPORT && CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1088  #if !EAP_SUPPORT && !CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1089      ACKCISHORT(CI_AUTHTYPE, go->neg_upap, PPP_PAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1090  #endif /* !EAP_SUPPORT && !CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1091  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1092  #if LQR_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1093      ACKCILQR(CI_QUALITY, go->neg_lqr, go->lqr_period);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1094  #endif /* LQR_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1095      ACKCICHAR(CI_CALLBACK, go->neg_cbcp, CBCP_OPT);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1096      ACKCILONG(CI_MAGICNUMBER, go->neg_magicnumber, go->magicnumber);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1097      ACKCIVOID(CI_PCOMPRESSION, go->neg_pcompression);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1098      ACKCIVOID(CI_ACCOMPRESSION, go->neg_accompression);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1099  #ifdef HAVE_MULTILINK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1100      ACKCISHORT(CI_MRRU, go->neg_mrru, go->mrru);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1101  #endif /* HAVE_MULTILINK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1102      ACKCIVOID(CI_SSNHF, go->neg_ssnhf);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1103      ACKCIENDP(CI_EPDISC, go->neg_endpoint, go->endpoint.class_,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1104  	      go->endpoint.value, go->endpoint.length);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1105  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1106      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1107       * If there are any remaining CIs, then this packet is bad.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1108       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1109      if (len != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1110  	goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1111      return (1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1112  bad:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1113      LCPDEBUG(("lcp_acki: received bad Ack!"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1114      return (0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1115  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1116  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1117  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1118  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1119   * lcp_nakci - Peer has sent a NAK for some of our CIs.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1120   * This should not modify any state if the Nak is bad
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1121   * or if LCP is in the OPENED state.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1122   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1123   * Returns:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1124   *	0 - Nak was bad.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1125   *	1 - Nak was good.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1126   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1127  static int lcp_nakci(fsm *f, u_char *p, int len, int treat_as_reject) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1128      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1129      lcp_options *go = &pcb->lcp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1130      lcp_options *wo = &pcb->lcp_wantoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1131      u_char citype, cichar, *next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1132      u_short cishort;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1133      u32_t cilong;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1134      lcp_options no;		/* options we've seen Naks for */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1135      lcp_options try_;		/* options to request next time */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1136      int looped_back = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1137      int cilen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1138  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1139      BZERO(&no, sizeof(no));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1140      try_ = *go;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1141  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1142      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1143       * Any Nak'd CIs must be in exactly the same order that we sent.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1144       * Check packet length and CI length at each step.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1145       * If we find any deviations, then this packet is bad.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1146       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1147  #define NAKCIVOID(opt, neg) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1148      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1149  	len >= CILEN_VOID && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1150  	p[1] == CILEN_VOID && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1151  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1152  	len -= CILEN_VOID; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1153  	INCPTR(CILEN_VOID, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1154  	no.neg = 1; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1155  	try_.neg = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1156      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1157  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1158  #define NAKCICHAP(opt, neg, code) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1159      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1160  	len >= CILEN_CHAP && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1161  	p[1] == CILEN_CHAP && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1162  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1163  	len -= CILEN_CHAP; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1164  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1165  	GETSHORT(cishort, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1166  	GETCHAR(cichar, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1167  	no.neg = 1; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1168  	code \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1169      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1170  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1171  #define NAKCICHAR(opt, neg, code) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1172      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1173  	len >= CILEN_CHAR && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1174  	p[1] == CILEN_CHAR && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1175  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1176  	len -= CILEN_CHAR; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1177  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1178  	GETCHAR(cichar, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1179  	no.neg = 1; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1180  	code \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1181      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1182  #define NAKCISHORT(opt, neg, code) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1183      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1184  	len >= CILEN_SHORT && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1185  	p[1] == CILEN_SHORT && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1186  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1187  	len -= CILEN_SHORT; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1188  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1189  	GETSHORT(cishort, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1190  	no.neg = 1; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1191  	code \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1192      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1193  #define NAKCILONG(opt, neg, code) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1194      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1195  	len >= CILEN_LONG && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1196  	p[1] == CILEN_LONG && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1197  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1198  	len -= CILEN_LONG; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1199  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1200  	GETLONG(cilong, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1201  	no.neg = 1; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1202  	code \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1203      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1204  #if LQR_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1205  #define NAKCILQR(opt, neg, code) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1206      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1207  	len >= CILEN_LQR && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1208  	p[1] == CILEN_LQR && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1209  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1210  	len -= CILEN_LQR; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1211  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1212  	GETSHORT(cishort, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1213  	GETLONG(cilong, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1214  	no.neg = 1; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1215  	code \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1216      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1217  #endif /* LQR_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1218  #define NAKCIENDP(opt, neg) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1219      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1220  	len >= CILEN_CHAR && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1221  	p[0] == opt && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1222  	p[1] >= CILEN_CHAR && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1223  	p[1] <= len) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1224  	len -= p[1]; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1225  	INCPTR(p[1], p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1226  	no.neg = 1; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1227  	try_.neg = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1228      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1229  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1230      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1231       * NOTE!  There must be no assignments to individual fields of *go in
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1232       * the code below.  Any such assignment is a BUG!
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1233       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1234      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1235       * We don't care if they want to send us smaller packets than
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1236       * we want.  Therefore, accept any MRU less than what we asked for,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1237       * but then ignore the new value when setting the MRU in the kernel.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1238       * If they send us a bigger MRU than what we asked, accept it, up to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1239       * the limit of the default MRU we'd get if we didn't negotiate.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1240       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1241      if (go->neg_mru && go->mru != PPP_DEFMRU) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1242  	NAKCISHORT(CI_MRU, neg_mru,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1243  		   if (cishort <= wo->mru || cishort <= PPP_DEFMRU)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1244  		       try_.mru = cishort;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1245  		   );
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1246      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1247  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1248      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1249       * Add any characters they want to our (receive-side) asyncmap.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1250       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1251      if (go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1252  	NAKCILONG(CI_ASYNCMAP, neg_asyncmap,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1253  		  try_.asyncmap = go->asyncmap | cilong;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1254  		  );
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1255      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1256  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1257      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1258       * If they've nak'd our authentication-protocol, check whether
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1259       * they are proposing a different protocol, or a different
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1260       * hash algorithm for CHAP.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1261       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1262      if ((0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1263  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1264          || go->neg_chap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1265  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1266  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1267          || go->neg_upap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1268  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1269  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1270          || go->neg_eap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1271  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1272          )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1273  	&& len >= CILEN_SHORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1274  	&& p[0] == CI_AUTHTYPE && p[1] >= CILEN_SHORT && p[1] <= len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1275  	cilen = p[1];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1276  	len -= cilen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1277  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1278  	no.neg_chap = go->neg_chap;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1279  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1280  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1281  	no.neg_upap = go->neg_upap;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1282  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1283  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1284  	no.neg_eap = go->neg_eap;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1285  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1286  	INCPTR(2, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1287  	GETSHORT(cishort, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1288  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1289  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1290  	if (cishort == PPP_PAP && cilen == CILEN_SHORT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1291  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1292  	    /* If we were asking for EAP, then we need to stop that. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1293  	    if (go->neg_eap)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1294  		try_.neg_eap = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1295  	    else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1296  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1297  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1298  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1299  	    /* If we were asking for CHAP, then we need to stop that. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1300  	    if (go->neg_chap)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1301  		try_.neg_chap = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1302  	    else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1303  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1304  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1305  	    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1306  	     * If we weren't asking for CHAP or EAP, then we were asking for
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1307  	     * PAP, in which case this Nak is bad.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1308  	     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1309  		goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1310  	} else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1311  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1312  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1313  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1314  	if (cishort == PPP_CHAP && cilen == CILEN_CHAP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1315  	    GETCHAR(cichar, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1316  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1317  	    /* Stop asking for EAP, if we were. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1318  	    if (go->neg_eap) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1319  		try_.neg_eap = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1320  		/* Try to set up to use their suggestion, if possible */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1321  		if (CHAP_CANDIGEST(go->chap_mdtype, cichar))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1322  		    try_.chap_mdtype = CHAP_MDTYPE_D(cichar);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1323  	    } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1324  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1325  	    if (go->neg_chap) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1326  		/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1327  		 * We were asking for our preferred algorithm, they must
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1328  		 * want something different.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1329  		 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1330  		if (cichar != CHAP_DIGEST(go->chap_mdtype)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1331  		    if (CHAP_CANDIGEST(go->chap_mdtype, cichar)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1332  			/* Use their suggestion if we support it ... */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1333  			try_.chap_mdtype = CHAP_MDTYPE_D(cichar);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1334  		    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1335  			/* ... otherwise, try our next-preferred algorithm. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1336  			try_.chap_mdtype &= ~(CHAP_MDTYPE(try_.chap_mdtype));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1337  			if (try_.chap_mdtype == MDTYPE_NONE) /* out of algos */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1338  			    try_.neg_chap = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1339  		    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1340  		} else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1341  		    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1342  		     * Whoops, they Nak'd our algorithm of choice
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1343  		     * but then suggested it back to us.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1344  		     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1345  		    goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1346  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1347  	    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1348  		/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1349  		 * Stop asking for PAP if we were asking for it.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1350  		 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1351  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1352  		try_.neg_upap = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1353  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1354  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1355  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1356  	} else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1357  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1358  	{
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1359  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1360  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1361  	    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1362  	     * If we were asking for EAP, and they're Conf-Naking EAP,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1363  	     * well, that's just strange.  Nobody should do that.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1364  	     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1365  	    if (cishort == PPP_EAP && cilen == CILEN_SHORT && go->neg_eap)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1366  		ppp_dbglog("Unexpected Conf-Nak for EAP");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1367  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1368  	    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1369  	     * We don't recognize what they're suggesting.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1370  	     * Stop asking for what we were asking for.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1371  	     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1372  	    if (go->neg_eap)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1373  		try_.neg_eap = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1374  	    else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1375  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1376  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1377  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1378  	    if (go->neg_chap)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1379  		try_.neg_chap = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1380  	    else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1381  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1382  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1383  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1384  	    if(1)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1385  		try_.neg_upap = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1386  	    else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1387  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1388  	    {}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1389  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1390  	    p += cilen - CILEN_SHORT;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1391  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1392      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1393  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1394  #if LQR_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1395      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1396       * If they can't cope with our link quality protocol, we'll have
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1397       * to stop asking for LQR.  We haven't got any other protocol.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1398       * If they Nak the reporting period, take their value XXX ?
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1399       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1400      NAKCILQR(CI_QUALITY, neg_lqr,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1401  	     if (cishort != PPP_LQR)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1402  		 try_.neg_lqr = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1403  	     else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1404  		 try_.lqr_period = cilong;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1405  	     );
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1406  #endif /* LQR_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1407  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1408      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1409       * Only implementing CBCP...not the rest of the callback options
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1410       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1411      NAKCICHAR(CI_CALLBACK, neg_cbcp,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1412                try_.neg_cbcp = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1413                (void)cichar; /* if CHAP support is not compiled, cichar is set but not used, which makes some compilers complaining */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1414                );
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1415  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1416      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1417       * Check for a looped-back line.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1418       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1419      NAKCILONG(CI_MAGICNUMBER, neg_magicnumber,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1420  	      try_.magicnumber = magic();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1421  	      looped_back = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1422  	      );
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1423  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1424      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1425       * Peer shouldn't send Nak for protocol compression or
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1426       * address/control compression requests; they should send
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1427       * a Reject instead.  If they send a Nak, treat it as a Reject.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1428       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1429      NAKCIVOID(CI_PCOMPRESSION, neg_pcompression);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1430      NAKCIVOID(CI_ACCOMPRESSION, neg_accompression);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1431  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1432  #ifdef HAVE_MULTILINK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1433      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1434       * Nak for MRRU option - accept their value if it is smaller
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1435       * than the one we want.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1436       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1437      if (go->neg_mrru) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1438  	NAKCISHORT(CI_MRRU, neg_mrru,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1439  		   if (treat_as_reject)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1440  		       try_.neg_mrru = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1441  		   else if (cishort <= wo->mrru)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1442  		       try_.mrru = cishort;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1443  		   );
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1444      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1445  #else /* HAVE_MULTILINK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1446      LWIP_UNUSED_ARG(treat_as_reject);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1447  #endif /* HAVE_MULTILINK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1448  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1449      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1450       * Nak for short sequence numbers shouldn't be sent, treat it
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1451       * like a reject.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1452       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1453      NAKCIVOID(CI_SSNHF, neg_ssnhf);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1454  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1455      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1456       * Nak of the endpoint discriminator option is not permitted,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1457       * treat it like a reject.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1458       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1459      NAKCIENDP(CI_EPDISC, neg_endpoint);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1460  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1461      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1462       * There may be remaining CIs, if the peer is requesting negotiation
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1463       * on an option that we didn't include in our request packet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1464       * If we see an option that we requested, or one we've already seen
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1465       * in this packet, then this packet is bad.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1466       * If we wanted to respond by starting to negotiate on the requested
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1467       * option(s), we could, but we don't, because except for the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1468       * authentication type and quality protocol, if we are not negotiating
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1469       * an option, it is because we were told not to.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1470       * For the authentication type, the Nak from the peer means
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1471       * `let me authenticate myself with you' which is a bit pointless.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1472       * For the quality protocol, the Nak means `ask me to send you quality
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1473       * reports', but if we didn't ask for them, we don't want them.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1474       * An option we don't recognize represents the peer asking to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1475       * negotiate some option we don't support, so ignore it.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1476       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1477      while (len >= CILEN_VOID) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1478  	GETCHAR(citype, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1479  	GETCHAR(cilen, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1480  	if (cilen < CILEN_VOID || (len -= cilen) < 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1481  	    goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1482  	next = p + cilen - 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1483  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1484  	switch (citype) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1485  	case CI_MRU:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1486  	    if ((go->neg_mru && go->mru != PPP_DEFMRU)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1487  		|| no.neg_mru || cilen != CILEN_SHORT)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1488  		goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1489  	    GETSHORT(cishort, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1490  	    if (cishort < PPP_DEFMRU) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1491  		try_.neg_mru = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1492  		try_.mru = cishort;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1493  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1494  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1495  	case CI_ASYNCMAP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1496  	    if ((go->neg_asyncmap && go->asyncmap != 0xFFFFFFFF)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1497  		|| no.neg_asyncmap || cilen != CILEN_LONG)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1498  		goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1499  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1500  	case CI_AUTHTYPE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1501  	    if (0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1502  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1503                  || go->neg_chap || no.neg_chap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1504  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1505  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1506                  || go->neg_upap || no.neg_upap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1507  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1508  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1509  		|| go->neg_eap || no.neg_eap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1510  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1511  		)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1512  		goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1513  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1514  	case CI_MAGICNUMBER:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1515  	    if (go->neg_magicnumber || no.neg_magicnumber ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1516  		cilen != CILEN_LONG)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1517  		goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1518  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1519  	case CI_PCOMPRESSION:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1520  	    if (go->neg_pcompression || no.neg_pcompression
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1521  		|| cilen != CILEN_VOID)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1522  		goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1523  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1524  	case CI_ACCOMPRESSION:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1525  	    if (go->neg_accompression || no.neg_accompression
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1526  		|| cilen != CILEN_VOID)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1527  		goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1528  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1529  #if LQR_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1530  	case CI_QUALITY:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1531  	    if (go->neg_lqr || no.neg_lqr || cilen != CILEN_LQR)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1532  		goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1533  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1534  #endif /* LQR_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1535  #ifdef HAVE_MULTILINK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1536  	case CI_MRRU:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1537  	    if (go->neg_mrru || no.neg_mrru || cilen != CILEN_SHORT)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1538  		goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1539  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1540  #endif /* HAVE_MULTILINK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1541  	case CI_SSNHF:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1542  	    if (go->neg_ssnhf || no.neg_ssnhf || cilen != CILEN_VOID)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1543  		goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1544  	    try_.neg_ssnhf = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1545  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1546  	case CI_EPDISC:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1547  	    if (go->neg_endpoint || no.neg_endpoint || cilen < CILEN_CHAR)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1548  		goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1549  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1550  	default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1551  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1552  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1553  	p = next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1554      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1555  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1556      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1557       * OK, the Nak is good.  Now we can update state.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1558       * If there are any options left we ignore them.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1559       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1560      if (f->state != PPP_FSM_OPENED) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1561  	if (looped_back) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1562  	    if (++try_.numloops >= pcb->settings.lcp_loopbackfail) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1563  		ppp_notice("Serial line is looped back.");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1564  		pcb->err_code = PPPERR_LOOPBACK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1565  		lcp_close(f->pcb, "Loopback detected");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1566  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1567  	} else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1568  	    try_.numloops = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1569  	*go = try_;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1570      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1571  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1572      return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1573  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1574  bad:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1575      LCPDEBUG(("lcp_nakci: received bad Nak!"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1576      return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1577  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1578  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1579  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1580  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1581   * lcp_rejci - Peer has Rejected some of our CIs.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1582   * This should not modify any state if the Reject is bad
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1583   * or if LCP is in the OPENED state.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1584   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1585   * Returns:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1586   *	0 - Reject was bad.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1587   *	1 - Reject was good.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1588   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1589  static int lcp_rejci(fsm *f, u_char *p, int len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1590      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1591      lcp_options *go = &pcb->lcp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1592      u_char cichar;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1593      u_short cishort;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1594      u32_t cilong;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1595      lcp_options try_;		/* options to request next time */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1596  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1597      try_ = *go;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1598  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1599      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1600       * Any Rejected CIs must be in exactly the same order that we sent.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1601       * Check packet length and CI length at each step.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1602       * If we find any deviations, then this packet is bad.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1603       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1604  #define REJCIVOID(opt, neg) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1605      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1606  	len >= CILEN_VOID && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1607  	p[1] == CILEN_VOID && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1608  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1609  	len -= CILEN_VOID; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1610  	INCPTR(CILEN_VOID, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1611  	try_.neg = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1612      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1613  #define REJCISHORT(opt, neg, val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1614      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1615  	len >= CILEN_SHORT && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1616  	p[1] == CILEN_SHORT && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1617  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1618  	len -= CILEN_SHORT; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1619  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1620  	GETSHORT(cishort, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1621  	/* Check rejected value. */ \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1622  	if (cishort != val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1623  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1624  	try_.neg = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1625      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1626  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1627  #if CHAP_SUPPORT && EAP_SUPPORT && PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1628  #define REJCICHAP(opt, neg, val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1629      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1630  	len >= CILEN_CHAP && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1631  	p[1] == CILEN_CHAP && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1632  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1633  	len -= CILEN_CHAP; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1634  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1635  	GETSHORT(cishort, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1636  	GETCHAR(cichar, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1637  	/* Check rejected value. */ \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1638  	if ((cishort != PPP_CHAP) || (cichar != (CHAP_DIGEST(val)))) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1639  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1640  	try_.neg = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1641  	try_.neg_eap = try_.neg_upap = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1642      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1643  #endif /* CHAP_SUPPORT && EAP_SUPPORT && PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1644  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1645  #if CHAP_SUPPORT && !EAP_SUPPORT && PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1646  #define REJCICHAP(opt, neg, val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1647      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1648  	len >= CILEN_CHAP && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1649  	p[1] == CILEN_CHAP && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1650  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1651  	len -= CILEN_CHAP; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1652  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1653  	GETSHORT(cishort, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1654  	GETCHAR(cichar, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1655  	/* Check rejected value. */ \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1656  	if ((cishort != PPP_CHAP) || (cichar != (CHAP_DIGEST(val)))) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1657  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1658  	try_.neg = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1659  	try_.neg_upap = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1660      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1661  #endif /* CHAP_SUPPORT && !EAP_SUPPORT && PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1662  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1663  #if CHAP_SUPPORT && EAP_SUPPORT && !PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1664  #define REJCICHAP(opt, neg, val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1665      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1666  	len >= CILEN_CHAP && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1667  	p[1] == CILEN_CHAP && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1668  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1669  	len -= CILEN_CHAP; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1670  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1671  	GETSHORT(cishort, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1672  	GETCHAR(cichar, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1673  	/* Check rejected value. */ \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1674  	if ((cishort != PPP_CHAP) || (cichar != (CHAP_DIGEST(val)))) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1675  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1676  	try_.neg = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1677  	try_.neg_eap = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1678      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1679  #endif /* CHAP_SUPPORT && EAP_SUPPORT && !PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1680  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1681  #if CHAP_SUPPORT && !EAP_SUPPORT && !PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1682  #define REJCICHAP(opt, neg, val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1683      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1684  	len >= CILEN_CHAP && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1685  	p[1] == CILEN_CHAP && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1686  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1687  	len -= CILEN_CHAP; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1688  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1689  	GETSHORT(cishort, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1690  	GETCHAR(cichar, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1691  	/* Check rejected value. */ \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1692  	if ((cishort != PPP_CHAP) || (cichar != (CHAP_DIGEST(val)))) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1693  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1694  	try_.neg = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1695      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1696  #endif /* CHAP_SUPPORT && !EAP_SUPPORT && !PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1697  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1698  #define REJCILONG(opt, neg, val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1699      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1700  	len >= CILEN_LONG && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1701  	p[1] == CILEN_LONG && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1702  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1703  	len -= CILEN_LONG; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1704  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1705  	GETLONG(cilong, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1706  	/* Check rejected value. */ \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1707  	if (cilong != val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1708  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1709  	try_.neg = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1710      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1711  #if LQR_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1712  #define REJCILQR(opt, neg, val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1713      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1714  	len >= CILEN_LQR && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1715  	p[1] == CILEN_LQR && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1716  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1717  	len -= CILEN_LQR; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1718  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1719  	GETSHORT(cishort, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1720  	GETLONG(cilong, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1721  	/* Check rejected value. */ \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1722  	if (cishort != PPP_LQR || cilong != val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1723  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1724  	try_.neg = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1725      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1726  #endif /* LQR_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1727  #define REJCICBCP(opt, neg, val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1728      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1729  	len >= CILEN_CBCP && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1730  	p[1] == CILEN_CBCP && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1731  	p[0] == opt) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1732  	len -= CILEN_CBCP; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1733  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1734  	GETCHAR(cichar, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1735  	/* Check rejected value. */ \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1736  	if (cichar != val) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1737  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1738  	try_.neg = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1739      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1740  #define REJCIENDP(opt, neg, class, val, vlen) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1741      if (go->neg && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1742  	len >= CILEN_CHAR + vlen && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1743  	p[0] == opt && \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1744  	p[1] == CILEN_CHAR + vlen) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1745  	int i; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1746  	len -= CILEN_CHAR + vlen; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1747  	INCPTR(2, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1748  	GETCHAR(cichar, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1749  	if (cichar != class) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1750  	    goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1751  	for (i = 0; i < vlen; ++i) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1752  	    GETCHAR(cichar, p); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1753  	    if (cichar != val[i]) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1754  		goto bad; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1755  	} \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1756  	try_.neg = 0; \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1757      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1758  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1759      REJCISHORT(CI_MRU, neg_mru, go->mru);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1760      REJCILONG(CI_ASYNCMAP, neg_asyncmap, go->asyncmap);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1761  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1762      REJCISHORT(CI_AUTHTYPE, neg_eap, PPP_EAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1763      if (!go->neg_eap) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1764  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1765  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1766  	REJCICHAP(CI_AUTHTYPE, neg_chap, go->chap_mdtype);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1767  	if (!go->neg_chap) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1768  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1769  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1770  	    REJCISHORT(CI_AUTHTYPE, neg_upap, PPP_PAP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1771  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1772  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1773  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1774  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1775  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1776      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1777  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1778  #if LQR_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1779      REJCILQR(CI_QUALITY, neg_lqr, go->lqr_period);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1780  #endif /* LQR_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1781      REJCICBCP(CI_CALLBACK, neg_cbcp, CBCP_OPT);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1782      REJCILONG(CI_MAGICNUMBER, neg_magicnumber, go->magicnumber);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1783      REJCIVOID(CI_PCOMPRESSION, neg_pcompression);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1784      REJCIVOID(CI_ACCOMPRESSION, neg_accompression);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1785  #ifdef HAVE_MULTILINK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1786      REJCISHORT(CI_MRRU, neg_mrru, go->mrru);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1787  #endif /* HAVE_MULTILINK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1788      REJCIVOID(CI_SSNHF, neg_ssnhf);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1789      REJCIENDP(CI_EPDISC, neg_endpoint, go->endpoint.class_,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1790  	      go->endpoint.value, go->endpoint.length);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1791  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1792      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1793       * If there are any remaining CIs, then this packet is bad.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1794       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1795      if (len != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1796  	goto bad;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1797      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1798       * Now we can update state.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1799       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1800      if (f->state != PPP_FSM_OPENED)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1801  	*go = try_;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1802      return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1803  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1804  bad:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1805      LCPDEBUG(("lcp_rejci: received bad Reject!"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1806      return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1807  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1808  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1809  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1810  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1811   * lcp_reqci - Check the peer's requested CIs and send appropriate response.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1812   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1813   * Returns: CONFACK, CONFNAK or CONFREJ and input packet modified
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1814   * appropriately.  If reject_if_disagree is non-zero, doesn't return
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1815   * CONFNAK; returns CONFREJ if it can't return CONFACK.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1816   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1817   * inp = Requested CIs
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1818   * lenp = Length of requested CIs
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1819   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1820  static int lcp_reqci(fsm *f, u_char *inp, int *lenp, int reject_if_disagree) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1821      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1822      lcp_options *go = &pcb->lcp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1823      lcp_options *ho = &pcb->lcp_hisoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1824      lcp_options *ao = &pcb->lcp_allowoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1825      u_char *cip, *next;		/* Pointer to current and next CIs */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1826      int cilen, citype, cichar;	/* Parsed len, type, char value */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1827      u_short cishort;		/* Parsed short value */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1828      u32_t cilong;		/* Parse long value */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1829      int rc = CONFACK;		/* Final packet return code */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1830      int orc;			/* Individual option return code */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1831      u_char *p;			/* Pointer to next char to parse */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1832      u_char *rejp;		/* Pointer to next char in reject frame */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1833      struct pbuf *nakp;          /* Nak buffer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1834      u_char *nakoutp;		/* Pointer to next char in Nak frame */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1835      int l = *lenp;		/* Length left */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1836  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1837      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1838       * Reset all his options.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1839       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1840      BZERO(ho, sizeof(*ho));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1841  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1842      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1843       * Process all his options.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1844       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1845      next = inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1846      nakp = pbuf_alloc(PBUF_RAW, (u16_t)(PPP_CTRL_PBUF_MAX_SIZE), PPP_CTRL_PBUF_TYPE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1847      if(NULL == nakp)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1848          return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1849      if(nakp->tot_len != nakp->len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1850          pbuf_free(nakp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1851          return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1852      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1853  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1854      nakoutp = (u_char*)nakp->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1855      rejp = inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1856      while (l) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1857  	orc = CONFACK;			/* Assume success */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1858  	cip = p = next;			/* Remember begining of CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1859  	if (l < 2 ||			/* Not enough data for CI header or */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1860  	    p[1] < 2 ||			/*  CI length too small or */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1861  	    p[1] > l) {			/*  CI length too big? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1862  	    LCPDEBUG(("lcp_reqci: bad CI length!"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1863  	    orc = CONFREJ;		/* Reject bad CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1864  	    cilen = l;			/* Reject till end of packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1865  	    l = 0;			/* Don't loop again */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1866  	    citype = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1867  	    goto endswitch;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1868  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1869  	GETCHAR(citype, p);		/* Parse CI type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1870  	GETCHAR(cilen, p);		/* Parse CI length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1871  	l -= cilen;			/* Adjust remaining length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1872  	next += cilen;			/* Step to next CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1873  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1874  	switch (citype) {		/* Check CI type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1875  	case CI_MRU:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1876  	    if (!ao->neg_mru ||		/* Allow option? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1877  		cilen != CILEN_SHORT) {	/* Check CI length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1878  		orc = CONFREJ;		/* Reject CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1879  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1880  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1881  	    GETSHORT(cishort, p);	/* Parse MRU */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1882  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1883  	    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1884  	     * He must be able to receive at least our minimum.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1885  	     * No need to check a maximum.  If he sends a large number,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1886  	     * we'll just ignore it.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1887  	     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1888  	    if (cishort < PPP_MINMRU) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1889  		orc = CONFNAK;		/* Nak CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1890  		PUTCHAR(CI_MRU, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1891  		PUTCHAR(CILEN_SHORT, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1892  		PUTSHORT(PPP_MINMRU, nakoutp);	/* Give him a hint */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1893  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1894  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1895  	    ho->neg_mru = 1;		/* Remember he sent MRU */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1896  	    ho->mru = cishort;		/* And remember value */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1897  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1898  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1899  	case CI_ASYNCMAP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1900  	    if (!ao->neg_asyncmap ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1901  		cilen != CILEN_LONG) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1902  		orc = CONFREJ;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1903  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1904  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1905  	    GETLONG(cilong, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1906  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1907  	    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1908  	     * Asyncmap must have set at least the bits
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1909  	     * which are set in lcp_allowoptions[unit].asyncmap.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1910  	     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1911  	    if ((ao->asyncmap & ~cilong) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1912  		orc = CONFNAK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1913  		PUTCHAR(CI_ASYNCMAP, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1914  		PUTCHAR(CILEN_LONG, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1915  		PUTLONG(ao->asyncmap | cilong, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1916  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1917  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1918  	    ho->neg_asyncmap = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1919  	    ho->asyncmap = cilong;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1920  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1921  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1922  	case CI_AUTHTYPE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1923  	    if (cilen < CILEN_SHORT ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1924  		!(0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1925  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1926  		|| ao->neg_upap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1927  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1928  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1929  		|| ao->neg_chap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1930  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1931  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1932  		|| ao->neg_eap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1933  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1934  		)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1935  		/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1936  		 * Reject the option if we're not willing to authenticate.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1937  		 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1938  		ppp_dbglog("No auth is possible");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1939  		orc = CONFREJ;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1940  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1941  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1942  	    GETSHORT(cishort, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1943  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1944  	    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1945  	     * Authtype must be PAP, CHAP, or EAP.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1946  	     *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1947  	     * Note: if more than one of ao->neg_upap, ao->neg_chap, and
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1948  	     * ao->neg_eap are set, and the peer sends a Configure-Request
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1949  	     * with two or more authenticate-protocol requests, then we will
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1950  	     * reject the second request.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1951  	     * Whether we end up doing CHAP, UPAP, or EAP depends then on
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1952  	     * the ordering of the CIs in the peer's Configure-Request.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1953               */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1954  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1955  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1956  	    if (cishort == PPP_PAP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1957  		/* we've already accepted CHAP or EAP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1958  		if (0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1959  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1960  		    || ho->neg_chap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1961  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1962  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1963  		    || ho->neg_eap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1964  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1965  		    || cilen != CILEN_SHORT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1966  		    LCPDEBUG(("lcp_reqci: rcvd AUTHTYPE PAP, rejecting..."));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1967  		    orc = CONFREJ;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1968  		    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1969  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1970  		if (!ao->neg_upap) {	/* we don't want to do PAP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1971  		    orc = CONFNAK;	/* NAK it and suggest CHAP or EAP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1972  		    PUTCHAR(CI_AUTHTYPE, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1973  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1974  		    if (ao->neg_eap) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1975  			PUTCHAR(CILEN_SHORT, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1976  			PUTSHORT(PPP_EAP, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1977  		    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1978  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1979  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1980  			PUTCHAR(CILEN_CHAP, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1981  			PUTSHORT(PPP_CHAP, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1982  			PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1983  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1984  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1985  		    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1986  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1987  		    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1988  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1989  		ho->neg_upap = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1990  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1991  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1992  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1993  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1994  	    if (cishort == PPP_CHAP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1995  		/* we've already accepted PAP or EAP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1996  		if (
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1997  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1998  		    ho->neg_upap ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  1999  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2000  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2001  		    ho->neg_eap ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2002  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2003  		    cilen != CILEN_CHAP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2004  		    LCPDEBUG(("lcp_reqci: rcvd AUTHTYPE CHAP, rejecting..."));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2005  		    orc = CONFREJ;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2006  		    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2007  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2008  		if (!ao->neg_chap) {	/* we don't want to do CHAP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2009  		    orc = CONFNAK;	/* NAK it and suggest EAP or PAP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2010  		    PUTCHAR(CI_AUTHTYPE, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2011  		    PUTCHAR(CILEN_SHORT, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2012  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2013  		    if (ao->neg_eap) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2014  			PUTSHORT(PPP_EAP, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2015  		    } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2016  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2017  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2018  		    if(1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2019  			PUTSHORT(PPP_PAP, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2020  		    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2021  		    else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2022  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2023  		    {}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2024  		    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2025  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2026  		GETCHAR(cichar, p);	/* get digest type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2027  		if (!(CHAP_CANDIGEST(ao->chap_mdtype, cichar))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2028  		    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2029  		     * We can't/won't do the requested type,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2030  		     * suggest something else.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2031  		     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2032  		    orc = CONFNAK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2033  		    PUTCHAR(CI_AUTHTYPE, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2034  		    PUTCHAR(CILEN_CHAP, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2035  		    PUTSHORT(PPP_CHAP, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2036  		    PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2037  		    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2038  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2039  		ho->chap_mdtype = CHAP_MDTYPE_D(cichar); /* save md type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2040  		ho->neg_chap = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2041  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2042  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2043  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2044  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2045  	    if (cishort == PPP_EAP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2046  		/* we've already accepted CHAP or PAP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2047  		if (
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2048  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2049  		    ho->neg_chap ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2050  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2051  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2052  		    ho->neg_upap ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2053  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2054  		    cilen != CILEN_SHORT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2055  		    LCPDEBUG(("lcp_reqci: rcvd AUTHTYPE EAP, rejecting..."));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2056  		    orc = CONFREJ;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2057  		    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2058  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2059  		if (!ao->neg_eap) {	/* we don't want to do EAP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2060  		    orc = CONFNAK;	/* NAK it and suggest CHAP or PAP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2061  		    PUTCHAR(CI_AUTHTYPE, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2062  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2063  		    if (ao->neg_chap) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2064  			PUTCHAR(CILEN_CHAP, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2065  			PUTSHORT(PPP_CHAP, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2066  			PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2067  		    } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2068  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2069  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2070  		    if(1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2071  			PUTCHAR(CILEN_SHORT, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2072  			PUTSHORT(PPP_PAP, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2073  		    } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2074  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2075  		    {}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2076  		    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2077  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2078  		ho->neg_eap = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2079  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2080  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2081  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2082  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2083  	    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2084  	     * We don't recognize the protocol they're asking for.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2085  	     * Nak it with something we're willing to do.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2086  	     * (At this point we know ao->neg_upap || ao->neg_chap ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2087  	     * ao->neg_eap.)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2088  	     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2089  	    orc = CONFNAK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2090  	    PUTCHAR(CI_AUTHTYPE, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2091  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2092  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2093  	    if (ao->neg_eap) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2094  		PUTCHAR(CILEN_SHORT, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2095  		PUTSHORT(PPP_EAP, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2096  	    } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2097  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2098  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2099  	    if (ao->neg_chap) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2100  		PUTCHAR(CILEN_CHAP, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2101  		PUTSHORT(PPP_CHAP, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2102  		PUTCHAR(CHAP_DIGEST(ao->chap_mdtype), nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2103  	    } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2104  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2105  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2106  	    if(1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2107  		PUTCHAR(CILEN_SHORT, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2108  		PUTSHORT(PPP_PAP, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2109  	    } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2110  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2111  	    {}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2112  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2113  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2114  #if LQR_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2115  	case CI_QUALITY:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2116  	    if (!ao->neg_lqr ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2117  		cilen != CILEN_LQR) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2118  		orc = CONFREJ;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2119  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2120  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2121  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2122  	    GETSHORT(cishort, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2123  	    GETLONG(cilong, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2124  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2125  	    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2126  	     * Check the protocol and the reporting period.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2127  	     * XXX When should we Nak this, and what with?
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2128  	     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2129  	    if (cishort != PPP_LQR) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2130  		orc = CONFNAK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2131  		PUTCHAR(CI_QUALITY, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2132  		PUTCHAR(CILEN_LQR, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2133  		PUTSHORT(PPP_LQR, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2134  		PUTLONG(ao->lqr_period, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2135  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2136  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2137  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2138  #endif /* LQR_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2139  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2140  	case CI_MAGICNUMBER:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2141  	    if (!(ao->neg_magicnumber || go->neg_magicnumber) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2142  		cilen != CILEN_LONG) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2143  		orc = CONFREJ;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2144  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2145  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2146  	    GETLONG(cilong, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2147  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2148  	    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2149  	     * He must have a different magic number.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2150  	     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2151  	    if (go->neg_magicnumber &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2152  		cilong == go->magicnumber) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2153  		cilong = magic();	/* Don't put magic() inside macro! */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2154  		orc = CONFNAK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2155  		PUTCHAR(CI_MAGICNUMBER, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2156  		PUTCHAR(CILEN_LONG, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2157  		PUTLONG(cilong, nakoutp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2158  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2159  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2160  	    ho->neg_magicnumber = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2161  	    ho->magicnumber = cilong;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2162  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2163  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2164  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2165  	case CI_PCOMPRESSION:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2166  	    if (!ao->neg_pcompression ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2167  		cilen != CILEN_VOID) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2168  		orc = CONFREJ;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2169  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2170  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2171  	    ho->neg_pcompression = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2172  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2173  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2174  	case CI_ACCOMPRESSION:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2175  	    if (!ao->neg_accompression ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2176  		cilen != CILEN_VOID) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2177  		orc = CONFREJ;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2178  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2179  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2180  	    ho->neg_accompression = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2181  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2182  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2183  #ifdef HAVE_MULTILINK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2184  	case CI_MRRU:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2185  	    if (!ao->neg_mrru
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2186  		|| !multilink
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2187  		|| cilen != CILEN_SHORT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2188  		orc = CONFREJ;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2189  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2190  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2191  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2192  	    GETSHORT(cishort, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2193  	    /* possibly should insist on a minimum/maximum MRRU here */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2194  	    ho->neg_mrru = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2195  	    ho->mrru = cishort;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2196  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2197  #endif /* HAVE_MULTILINK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2198  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2199  	case CI_SSNHF:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2200  	    if (!ao->neg_ssnhf
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2201  #ifdef HAVE_MULTILINK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2202  		|| !multilink
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2203  #endif /* HAVE_MULTILINK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2204  		|| cilen != CILEN_VOID) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2205  		orc = CONFREJ;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2206  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2207  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2208  	    ho->neg_ssnhf = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2209  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2210  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2211  	case CI_EPDISC:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2212  	    if (!ao->neg_endpoint ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2213  		cilen < CILEN_CHAR ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2214  		cilen > CILEN_CHAR + MAX_ENDP_LEN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2215  		orc = CONFREJ;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2216  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2217  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2218  	    GETCHAR(cichar, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2219  	    cilen -= CILEN_CHAR;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2220  	    ho->neg_endpoint = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2221  	    ho->endpoint.class_ = cichar;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2222  	    ho->endpoint.length = cilen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2223  	    MEMCPY(ho->endpoint.value, p, cilen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2224  	    INCPTR(cilen, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2225  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2226  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2227  	default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2228  	    LCPDEBUG(("lcp_reqci: rcvd unknown option %d", citype));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2229  	    orc = CONFREJ;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2230  	    break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2231  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2232  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2233  endswitch:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2234  	if (orc == CONFACK &&		/* Good CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2235  	    rc != CONFACK)		/*  but prior CI wasnt? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2236  	    continue;			/* Don't send this one */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2237  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2238  	if (orc == CONFNAK) {		/* Nak this CI? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2239  	    if (reject_if_disagree	/* Getting fed up with sending NAKs? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2240  		&& citype != CI_MAGICNUMBER) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2241  		orc = CONFREJ;		/* Get tough if so */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2242  	    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2243  		if (rc == CONFREJ)	/* Rejecting prior CI? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2244  		    continue;		/* Don't send this one */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2245  		rc = CONFNAK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2246  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2247  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2248  	if (orc == CONFREJ) {		/* Reject this CI */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2249  	    rc = CONFREJ;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2250  	    if (cip != rejp)		/* Need to move rejected CI? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2251  		MEMCPY(rejp, cip, cilen); /* Move it */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2252  	    INCPTR(cilen, rejp);	/* Update output pointer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2253  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2254      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2255  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2256      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2257       * If we wanted to send additional NAKs (for unsent CIs), the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2258       * code would go here.  The extra NAKs would go at *nakoutp.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2259       * At present there are no cases where we want to ask the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2260       * peer to negotiate an option.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2261       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2262  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2263      switch (rc) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2264      case CONFACK:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2265  	*lenp = next - inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2266  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2267      case CONFNAK:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2268  	/*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2269  	 * Copy the Nak'd options from the nak buffer to the caller's buffer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2270  	 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2271  	*lenp = nakoutp - (u_char*)nakp->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2272  	MEMCPY(inp, nakp->payload, *lenp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2273  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2274      case CONFREJ:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2275  	*lenp = rejp - inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2276  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2277      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2278  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2279      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2280  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2281      pbuf_free(nakp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2282      LCPDEBUG(("lcp_reqci: returning CONF%s.", CODENAME(rc)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2283      return (rc);			/* Return final code */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2284  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2285  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2286  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2287  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2288   * lcp_up - LCP has come UP.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2289   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2290  static void lcp_up(fsm *f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2291      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2292      lcp_options *wo = &pcb->lcp_wantoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2293      lcp_options *ho = &pcb->lcp_hisoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2294      lcp_options *go = &pcb->lcp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2295      lcp_options *ao = &pcb->lcp_allowoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2296      int mtu, mru;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2297  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2298      if (!go->neg_magicnumber)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2299  	go->magicnumber = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2300      if (!ho->neg_magicnumber)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2301  	ho->magicnumber = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2302  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2303      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2304       * Set our MTU to the smaller of the MTU we wanted and
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2305       * the MRU our peer wanted.  If we negotiated an MRU,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2306       * set our MRU to the larger of value we wanted and
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2307       * the value we got in the negotiation.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2308       * Note on the MTU: the link MTU can be the MRU the peer wanted,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2309       * the interface MTU is set to the lowest of that, the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2310       * MTU we want to use, and our link MRU.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2311       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2312      mtu = ho->neg_mru? ho->mru: PPP_MRU;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2313      mru = go->neg_mru? LWIP_MAX(wo->mru, go->mru): PPP_MRU;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2314  #ifdef HAVE_MULTILINK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2315      if (!(multilink && go->neg_mrru && ho->neg_mrru))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2316  #endif /* HAVE_MULTILINK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2317  	netif_set_mtu(pcb, LWIP_MIN(LWIP_MIN(mtu, mru), ao->mru));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2318      ppp_send_config(pcb, mtu,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2319  		    (ho->neg_asyncmap? ho->asyncmap: 0xffffffff),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2320  		    ho->neg_pcompression, ho->neg_accompression);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2321      ppp_recv_config(pcb, mru,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2322  		    (pcb->settings.lax_recv? 0: go->neg_asyncmap? go->asyncmap: 0xffffffff),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2323  		    go->neg_pcompression, go->neg_accompression);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2324  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2325      if (ho->neg_mru)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2326  	pcb->peer_mru = ho->mru;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2327  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2328      lcp_echo_lowerup(f->pcb);  /* Enable echo messages */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2329  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2330      link_established(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2331  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2332  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2333  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2334  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2335   * lcp_down - LCP has gone DOWN.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2336   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2337   * Alert other protocols.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2338   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2339  static void lcp_down(fsm *f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2340      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2341      lcp_options *go = &pcb->lcp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2342  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2343      lcp_echo_lowerdown(f->pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2344  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2345      link_down(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2346  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2347      ppp_send_config(pcb, PPP_MRU, 0xffffffff, 0, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2348      ppp_recv_config(pcb, PPP_MRU,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2349  		    (go->neg_asyncmap? go->asyncmap: 0xffffffff),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2350  		    go->neg_pcompression, go->neg_accompression);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2351      pcb->peer_mru = PPP_MRU;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2352  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2353  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2354  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2355  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2356   * lcp_starting - LCP needs the lower layer up.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2357   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2358  static void lcp_starting(fsm *f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2359      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2360      link_required(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2361  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2362  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2363  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2364  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2365   * lcp_finished - LCP has finished with the lower layer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2366   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2367  static void lcp_finished(fsm *f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2368      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2369      link_terminated(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2370  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2371  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2372  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2373  #if PRINTPKT_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2374  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2375   * lcp_printpkt - print the contents of an LCP packet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2376   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2377  static const char* const lcp_codenames[] = {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2378      "ConfReq", "ConfAck", "ConfNak", "ConfRej",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2379      "TermReq", "TermAck", "CodeRej", "ProtRej",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2380      "EchoReq", "EchoRep", "DiscReq", "Ident",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2381      "TimeRem"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2382  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2383  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2384  static int lcp_printpkt(const u_char *p, int plen,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2385  		void (*printer) (void *, const char *, ...), void *arg) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2386      int code, id, len, olen, i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2387      const u_char *pstart, *optend;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2388      u_short cishort;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2389      u32_t cilong;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2390  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2391      if (plen < HEADERLEN)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2392  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2393      pstart = p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2394      GETCHAR(code, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2395      GETCHAR(id, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2396      GETSHORT(len, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2397      if (len < HEADERLEN || len > plen)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2398  	return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2399  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2400     if (code >= 1 && code <= (int)LWIP_ARRAYSIZE(lcp_codenames))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2401  	printer(arg, " %s", lcp_codenames[code-1]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2402      else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2403  	printer(arg, " code=0x%x", code);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2404      printer(arg, " id=0x%x", id);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2405      len -= HEADERLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2406      switch (code) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2407      case CONFREQ:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2408      case CONFACK:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2409      case CONFNAK:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2410      case CONFREJ:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2411  	/* print option list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2412  	while (len >= 2) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2413  	    GETCHAR(code, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2414  	    GETCHAR(olen, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2415  	    p -= 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2416  	    if (olen < 2 || olen > len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2417  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2418  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2419  	    printer(arg, " <");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2420  	    len -= olen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2421  	    optend = p + olen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2422  	    switch (code) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2423  	    case CI_MRU:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2424  		if (olen == CILEN_SHORT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2425  		    p += 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2426  		    GETSHORT(cishort, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2427  		    printer(arg, "mru %d", cishort);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2428  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2429  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2430  	    case CI_ASYNCMAP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2431  		if (olen == CILEN_LONG) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2432  		    p += 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2433  		    GETLONG(cilong, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2434  		    printer(arg, "asyncmap 0x%x", cilong);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2435  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2436  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2437  	    case CI_AUTHTYPE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2438  		if (olen >= CILEN_SHORT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2439  		    p += 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2440  		    printer(arg, "auth ");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2441  		    GETSHORT(cishort, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2442  		    switch (cishort) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2443  #if PAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2444  		    case PPP_PAP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2445  			printer(arg, "pap");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2446  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2447  #endif /* PAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2448  #if CHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2449  		    case PPP_CHAP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2450  			printer(arg, "chap");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2451  			if (p < optend) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2452  			    switch (*p) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2453  			    case CHAP_MD5:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2454  				printer(arg, " MD5");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2455  				++p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2456  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2457  #if MSCHAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2458  			    case CHAP_MICROSOFT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2459  				printer(arg, " MS");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2460  				++p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2461  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2462  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2463  			    case CHAP_MICROSOFT_V2:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2464  				printer(arg, " MS-v2");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2465  				++p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2466  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2467  #endif /* MSCHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2468  			    default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2469  				break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2470  			    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2471  			}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2472  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2473  #endif /* CHAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2474  #if EAP_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2475  		    case PPP_EAP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2476  			printer(arg, "eap");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2477  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2478  #endif /* EAP_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2479  		    default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2480  			printer(arg, "0x%x", cishort);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2481  		    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2482  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2483  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2484  #if LQR_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2485  	    case CI_QUALITY:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2486  		if (olen >= CILEN_SHORT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2487  		    p += 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2488  		    printer(arg, "quality ");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2489  		    GETSHORT(cishort, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2490  		    switch (cishort) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2491  		    case PPP_LQR:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2492  			printer(arg, "lqr");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2493  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2494  		    default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2495  			printer(arg, "0x%x", cishort);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2496  		    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2497  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2498  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2499  #endif /* LQR_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2500  	    case CI_CALLBACK:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2501  		if (olen >= CILEN_CHAR) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2502  		    p += 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2503  		    printer(arg, "callback ");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2504  		    GETCHAR(cishort, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2505  		    switch (cishort) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2506  		    case CBCP_OPT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2507  			printer(arg, "CBCP");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2508  			break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2509  		    default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2510  			printer(arg, "0x%x", cishort);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2511  		    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2512  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2513  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2514  	    case CI_MAGICNUMBER:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2515  		if (olen == CILEN_LONG) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2516  		    p += 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2517  		    GETLONG(cilong, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2518  		    printer(arg, "magic 0x%x", cilong);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2519  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2520  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2521  	    case CI_PCOMPRESSION:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2522  		if (olen == CILEN_VOID) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2523  		    p += 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2524  		    printer(arg, "pcomp");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2525  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2526  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2527  	    case CI_ACCOMPRESSION:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2528  		if (olen == CILEN_VOID) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2529  		    p += 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2530  		    printer(arg, "accomp");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2531  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2532  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2533  	    case CI_MRRU:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2534  		if (olen == CILEN_SHORT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2535  		    p += 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2536  		    GETSHORT(cishort, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2537  		    printer(arg, "mrru %d", cishort);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2538  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2539  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2540  	    case CI_SSNHF:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2541  		if (olen == CILEN_VOID) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2542  		    p += 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2543  		    printer(arg, "ssnhf");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2544  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2545  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2546  	    case CI_EPDISC:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2547  #ifdef HAVE_MULTILINK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2548  		if (olen >= CILEN_CHAR) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2549  		    struct epdisc epd;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2550  		    p += 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2551  		    GETCHAR(epd.class, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2552  		    epd.length = olen - CILEN_CHAR;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2553  		    if (epd.length > MAX_ENDP_LEN)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2554  			epd.length = MAX_ENDP_LEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2555  		    if (epd.length > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2556  			MEMCPY(epd.value, p, epd.length);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2557  			p += epd.length;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2558  		    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2559  		    printer(arg, "endpoint [%s]", epdisc_to_str(&epd));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2560  		}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2561  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2562  		printer(arg, "endpoint");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2563  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2564  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2565  	    default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2566  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2567  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2568  	    while (p < optend) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2569  		GETCHAR(code, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2570  		printer(arg, " %.2x", code);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2571  	    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2572  	    printer(arg, ">");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2573  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2574  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2575  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2576      case TERMACK:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2577      case TERMREQ:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2578  	if (len > 0 && *p >= ' ' && *p < 0x7f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2579  	    printer(arg, " ");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2580  	    ppp_print_string(p, len, printer, arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2581  	    p += len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2582  	    len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2583  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2584  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2585  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2586      case ECHOREQ:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2587      case ECHOREP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2588      case DISCREQ:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2589  	if (len >= 4) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2590  	    GETLONG(cilong, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2591  	    printer(arg, " magic=0x%x", cilong);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2592  	    len -= 4;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2593  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2594  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2595  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2596      case IDENTIF:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2597      case TIMEREM:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2598  	if (len >= 4) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2599  	    GETLONG(cilong, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2600  	    printer(arg, " magic=0x%x", cilong);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2601  	    len -= 4;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2602  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2603  	if (code == TIMEREM) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2604  	    if (len < 4)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2605  		break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2606  	    GETLONG(cilong, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2607  	    printer(arg, " seconds=%u", cilong);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2608  	    len -= 4;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2609  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2610  	if (len > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2611  	    printer(arg, " ");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2612  	    ppp_print_string(p, len, printer, arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2613  	    p += len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2614  	    len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2615  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2616  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2617      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2618  	break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2619      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2620  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2621      /* print the rest of the bytes in the packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2622      for (i = 0; i < len && i < 32; ++i) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2623  	GETCHAR(code, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2624  	printer(arg, " %.2x", code);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2625      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2626      if (i < len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2627  	printer(arg, " ...");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2628  	p += len - i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2629      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2630  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2631      return p - pstart;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2632  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2633  #endif /* PRINTPKT_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2634  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2635  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2636   * Time to shut down the link because there is nothing out there.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2637   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2638  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2639  static void LcpLinkFailure(fsm *f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2640      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2641      if (f->state == PPP_FSM_OPENED) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2642  	ppp_info("No response to %d echo-requests", pcb->lcp_echos_pending);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2643          ppp_notice("Serial link appears to be disconnected.");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2644  	pcb->err_code = PPPERR_PEERDEAD;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2645  	lcp_close(pcb, "Peer not responding");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2646      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2647  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2648  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2649  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2650   * Timer expired for the LCP echo requests from this process.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2651   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2652  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2653  static void LcpEchoCheck(fsm *f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2654      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2655  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2656      LcpSendEchoRequest (f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2657      if (f->state != PPP_FSM_OPENED)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2658  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2659  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2660      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2661       * Start the timer for the next interval.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2662       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2663      if (pcb->lcp_echo_timer_running)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2664  	ppp_warn("assertion lcp_echo_timer_running==0 failed");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2665      TIMEOUT (LcpEchoTimeout, f, pcb->settings.lcp_echo_interval);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2666      pcb->lcp_echo_timer_running = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2667  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2668  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2669  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2670   * LcpEchoTimeout - Timer expired on the LCP echo
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2671   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2672  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2673  static void LcpEchoTimeout(void *arg) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2674      fsm *f = (fsm*)arg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2675      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2676      if (pcb->lcp_echo_timer_running != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2677          pcb->lcp_echo_timer_running = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2678          LcpEchoCheck ((fsm *) arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2679      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2680  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2681  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2682  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2683   * LcpEchoReply - LCP has received a reply to the echo
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2684   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2685  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2686  static void lcp_received_echo_reply(fsm *f, int id, u_char *inp, int len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2687      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2688      lcp_options *go = &pcb->lcp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2689      u32_t magic_val;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2690      LWIP_UNUSED_ARG(id);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2691  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2692      /* Check the magic number - don't count replies from ourselves. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2693      if (len < 4) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2694  	ppp_dbglog("lcp: received short Echo-Reply, length %d", len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2695  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2696      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2697      GETLONG(magic_val, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2698      if (go->neg_magicnumber
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2699  	&& magic_val == go->magicnumber) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2700  	ppp_warn("appear to have received our own echo-reply!");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2701  	return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2702      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2703  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2704      /* Reset the number of outstanding echo frames */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2705      pcb->lcp_echos_pending = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2706  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2707  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2708  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2709   * LcpSendEchoRequest - Send an echo request frame to the peer
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2710   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2711  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2712  static void LcpSendEchoRequest(fsm *f) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2713      ppp_pcb *pcb = f->pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2714      lcp_options *go = &pcb->lcp_gotoptions;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2715      u32_t lcp_magic;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2716      u_char pkt[4], *pktp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2717  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2718      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2719       * Detect the failure of the peer at this point.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2720       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2721      if (pcb->settings.lcp_echo_fails != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2722          if (pcb->lcp_echos_pending >= pcb->settings.lcp_echo_fails) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2723              LcpLinkFailure(f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2724              pcb->lcp_echos_pending = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2725  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2726      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2727  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2728  #if PPP_LCP_ADAPTIVE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2729      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2730       * If adaptive echos have been enabled, only send the echo request if
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2731       * no traffic was received since the last one.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2732       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2733      if (pcb->settings.lcp_echo_adaptive) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2734  	static unsigned int last_pkts_in = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2735  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2736  #if PPP_STATS_SUPPORT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2737  	update_link_stats(f->unit);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2738  	link_stats_valid = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2739  #endif /* PPP_STATS_SUPPORT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2740  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2741  	if (link_stats.pkts_in != last_pkts_in) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2742  	    last_pkts_in = link_stats.pkts_in;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2743  	    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2744  	}
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2745      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2746  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2747  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2748      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2749       * Make and send the echo request frame.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2750       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2751      if (f->state == PPP_FSM_OPENED) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2752          lcp_magic = go->magicnumber;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2753  	pktp = pkt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2754  	PUTLONG(lcp_magic, pktp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2755          fsm_sdata(f, ECHOREQ, pcb->lcp_echo_number++, pkt, pktp - pkt);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2756  	++pcb->lcp_echos_pending;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2757      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2758  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2759  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2760  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2761   * lcp_echo_lowerup - Start the timer for the LCP frame
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2762   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2763  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2764  static void lcp_echo_lowerup(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2765      fsm *f = &pcb->lcp_fsm;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2766  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2767      /* Clear the parameters for generating echo frames */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2768      pcb->lcp_echos_pending      = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2769      pcb->lcp_echo_number        = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2770      pcb->lcp_echo_timer_running = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2771    
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2772      /* If a timeout interval is specified then start the timer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2773      if (pcb->settings.lcp_echo_interval != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2774          LcpEchoCheck (f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2775  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2776  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2777  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2778   * lcp_echo_lowerdown - Stop the timer for the LCP frame
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2779   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2780  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2781  static void lcp_echo_lowerdown(ppp_pcb *pcb) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2782      fsm *f = &pcb->lcp_fsm;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2783  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2784      if (pcb->lcp_echo_timer_running != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2785          UNTIMEOUT (LcpEchoTimeout, f);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2786          pcb->lcp_echo_timer_running = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2787      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2788  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2789  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\netif\ppp\lcp.c	  2790  #endif /* PPP_SUPPORT */

	; Module end
