	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\.etharp.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Rtl8211f -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.src ..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c'

	
$TC162
	
	.sdecl	'.text.etharp.etharp_free_entry',code,cluster('etharp_free_entry')
	.sect	'.text.etharp.etharp_free_entry'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	     1  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	     2   * @file
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	     3   * Address Resolution Protocol module for IP over Ethernet
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	     4   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	     5   * Functionally, ARP is divided into two parts. The first maps an IP address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	     6   * to a physical address when sending a packet, and the second part answers
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	     7   * requests from other machines for our physical address.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	     8   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	     9   * This implementation complies with RFC 826 (Ethernet ARP). It supports
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    10   * Gratuitious ARP from RFC3220 (IP Mobility Support for IPv4) section 4.6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    11   * if an interface calls etharp_gratuitous(our_netif) upon address change.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    12   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    13  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    14  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    15   * Copyright (c) 2001-2003 Swedish Institute of Computer Science.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    16   * Copyright (c) 2003-2004 Leon Woestenberg <leon.woestenberg@axon.tv>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    17   * Copyright (c) 2003-2004 Axon Digital Design B.V., The Netherlands.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    18   * All rights reserved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    19   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    20   * Redistribution and use in source and binary forms, with or without modification,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    21   * are permitted provided that the following conditions are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    22   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    23   * 1. Redistributions of source code must retain the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    24   *    this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    25   * 2. Redistributions in binary form must reproduce the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    26   *    this list of conditions and the following disclaimer in the documentation
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    27   *    and/or other materials provided with the distribution.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    28   * 3. The name of the author may not be used to endorse or promote products
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    29   *    derived from this software without specific prior written permission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    30   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    31   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    32   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    33   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    34   * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    35   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    36   * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    37   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    38   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    39   * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    40   * OF SUCH DAMAGE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    41   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    42   * This file is part of the lwIP TCP/IP stack.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    43   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    44   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    45  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    46  #include "lwip/opt.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    47  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    48  #if LWIP_IPV4 && LWIP_ARP /* don't build if not configured for use in lwipopts.h */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    49  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    50  #include "lwip/etharp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    51  #include "lwip/stats.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    52  #include "lwip/snmp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    53  #include "lwip/dhcp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    54  #include "lwip/autoip.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    55  #include "lwip/prot/iana.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    56  #include "netif/ethernet.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    57  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    58  #include <string.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    59  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    60  #ifdef LWIP_HOOK_FILENAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    61  #include LWIP_HOOK_FILENAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    62  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    63  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    64  /** Re-request a used ARP entry 1 minute before it would expire to prevent
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    65   *  breaking a steadily used connection because the ARP entry timed out. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    66  #define ARP_AGE_REREQUEST_USED_UNICAST   (ARP_MAXAGE - 30)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    67  #define ARP_AGE_REREQUEST_USED_BROADCAST (ARP_MAXAGE - 15)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    68  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    69  /** the time an ARP entry stays pending after first request,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    70   *  for ARP_TMR_INTERVAL = 1000, this is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    71   *  10 seconds.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    72   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    73   *  @internal Keep this number at least 2, otherwise it might
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    74   *  run out instantly if the timeout occurs directly after a request.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    75   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    76  #define ARP_MAXPENDING 5
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    77  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    78  /** ARP states */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    79  enum etharp_state {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    80    ETHARP_STATE_EMPTY = 0,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    81    ETHARP_STATE_PENDING,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    82    ETHARP_STATE_STABLE,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    83    ETHARP_STATE_STABLE_REREQUESTING_1,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    84    ETHARP_STATE_STABLE_REREQUESTING_2
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    85  #if ETHARP_SUPPORT_STATIC_ENTRIES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    86    , ETHARP_STATE_STATIC
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    87  #endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    88  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    89  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    90  struct etharp_entry {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    91  #if ARP_QUEUEING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    92    /** Pointer to queue of pending outgoing packets on this ARP entry. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    93    struct etharp_q_entry *q;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    94  #else /* ARP_QUEUEING */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    95    /** Pointer to a single pending outgoing packet on this ARP entry. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    96    struct pbuf *q;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    97  #endif /* ARP_QUEUEING */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    98    ip4_addr_t ipaddr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	    99    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   100    struct eth_addr ethaddr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   101    u16_t ctime;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   102    u8_t state;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   103  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   104  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   105  static struct etharp_entry arp_table[ARP_TABLE_SIZE];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   106  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   107  #if !LWIP_NETIF_HWADDRHINT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   108  static netif_addr_idx_t etharp_cached_entry;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   109  #endif /* !LWIP_NETIF_HWADDRHINT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   110  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   111  /** Try hard to create a new entry - we want the IP address to appear in
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   112      the cache (even if this means removing an active entry or so). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   113  #define ETHARP_FLAG_TRY_HARD     1
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   114  #define ETHARP_FLAG_FIND_ONLY    2
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   115  #if ETHARP_SUPPORT_STATIC_ENTRIES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   116  #define ETHARP_FLAG_STATIC_ENTRY 4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   117  #endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   118  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   119  #if LWIP_NETIF_HWADDRHINT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   120  #define ETHARP_SET_ADDRHINT(netif, addrhint)  do { if (((netif) != NULL) && ((netif)->hints != NULL)) { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   121                                                (netif)->hints->addr_hint = (addrhint); }} while(0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   122  #else /* LWIP_NETIF_HWADDRHINT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   123  #define ETHARP_SET_ADDRHINT(netif, addrhint)  (etharp_cached_entry = (addrhint))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   124  #endif /* LWIP_NETIF_HWADDRHINT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   125  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   126  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   127  /* Check for maximum ARP_TABLE_SIZE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   128  #if (ARP_TABLE_SIZE > NETIF_ADDR_IDX_MAX)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   129  #error "ARP_TABLE_SIZE must fit in an s16_t, you have to reduce it in your lwipopts.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   130  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   131  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   132  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   133  static err_t etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   134  static err_t etharp_raw(struct netif *netif,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   135                          const struct eth_addr *ethsrc_addr, const struct eth_addr *ethdst_addr,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   136                          const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   137                          const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   138                          const u16_t opcode);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   139  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   140  #if ARP_QUEUEING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   141  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   142   * Free a complete queue of etharp entries
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   143   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   144   * @param q a qeueue of etharp_q_entry's to free
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   145   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   146  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   147  free_etharp_q(struct etharp_q_entry *q)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   148  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   149    struct etharp_q_entry *r;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   150    LWIP_ASSERT("q != NULL", q != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   151    while (q) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   152      r = q;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   153      q = q->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   154      LWIP_ASSERT("r->p != NULL", (r->p != NULL));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   155      pbuf_free(r->p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   156      memp_free(MEMP_ARP_QUEUE, r);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   157    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   158  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   159  #else /* ARP_QUEUEING */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   160  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   161  /** Compatibility define: free the queued pbuf */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   162  #define free_etharp_q(q) pbuf_free(q)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   163  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   164  #endif /* ARP_QUEUEING */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   165  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   166  /** Clean up ARP table entries */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   167  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   168  etharp_free_entry(int i)
; Function etharp_free_entry
.L152:
etharp_free_entry:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   169  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   170    /* remove from SNMP ARP index tree */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   171    mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   172    /* and empty packet queue */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   173    if (arp_table[i].q != NULL) {
	fcall	.cocofun_54
.L428:
	addsc.a	a15,a15,d15,#0
.L807:
	ld.a	a4,[a15]
.L808:
	jz.a	a4,.L2
.L809:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   174      /* remove all queued packets */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   175      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   176      free_etharp_q(arp_table[i].q);
	call	pbuf_free
.L429:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   177      arp_table[i].q = NULL;
	mov.a	a2,#0
.L810:
	st.a	[a15],a2
.L2:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   178    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   179    /* recycle entry for re-use */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   180    arp_table[i].state = ETHARP_STATE_EMPTY;
	mov	d15,#0
	st.b	[a15]20,d15
.L811:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   181  #ifdef LWIP_DEBUG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   182    /* for debugging, clean out the complete entry */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   183    arp_table[i].ctime = 0;
	st.h	[a15]18,d15
.L812:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   184    arp_table[i].netif = NULL;
	mov.a	a2,#0
.L813:
	st.a	[a15]8,a2
.L814:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   185    ip4_addr_set_zero(&arp_table[i].ipaddr);
	st.w	[a15]4,d15
.L815:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   186    arp_table[i].ethaddr = ethzero;
	ld.hu	d1,ethzero+4
	ld.w	d0,ethzero
.L816:
	st.h	[a15]16,d1
	st.w	[a15]12,d0
.L817:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   187  #endif /* LWIP_DEBUG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   188  }
	ret
.L395:
	
__etharp_free_entry_function_end:
	.size	etharp_free_entry,__etharp_free_entry_function_end-etharp_free_entry
.L253:
	; End of function
	
	.sdecl	'.text.etharp..cocofun_54',code,cluster('.cocofun_54')
	.sect	'.text.etharp..cocofun_54'
	.align	2
; Function .cocofun_54
.L154:
.cocofun_54:	.type	func
; Function body .cocofun_54, coco_iter:0
	mul	d15,d4,#24
	fcall	.cocofun_57
.L426:
	fret
.L293:
	; End of function
	.sdecl	'.text.etharp..cocofun_57',code,cluster('.cocofun_57')
	.sect	'.text.etharp..cocofun_57'
	.align	2
; Function .cocofun_57
.L156:
.cocofun_57:	.type	func
; Function body .cocofun_57, coco_iter:1
	movh.a	a15,#@his(arp_table)
.L427:
	lea	a15,[a15]@los(arp_table)
.L917:
	fret
.L308:
	; End of function
	.sdecl	'.text.etharp.etharp_tmr',code,cluster('etharp_tmr')
	.sect	'.text.etharp.etharp_tmr'
	.align	2
	
	.global	etharp_tmr

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   189  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   190  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   191   * Clears expired entries in the ARP table.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   192   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   193   * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   194   * in order to expire entries in the ARP table.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   195   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   196  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   197  etharp_tmr(void)
; Function etharp_tmr
.L158:
etharp_tmr:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   198  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   199    int i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   200  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   201    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   202    /* remove expired entries from the ARP table */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   203    for (i = 0; i < ARP_TABLE_SIZE; ++i) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   204      u8_t state = arp_table[i].state;
	mov	d8,#0
	fcall	.cocofun_57
.L611:
	mov.a	a12,#9
.L3:
	ld.bu	d15,[a15]20
.L612:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   205      if (state != ETHARP_STATE_EMPTY
	jeq	d15,#0,.L4
.L613:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   206  #if ETHARP_SUPPORT_STATIC_ENTRIES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   207          && (state != ETHARP_STATE_STATIC)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   208  #endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   209         ) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   210        arp_table[i].ctime++;
	ld.hu	d15,[a15]18
.L614:
	add	d15,#1
	st.h	[a15]18,d15
.L615:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   211        if ((arp_table[i].ctime >= ARP_MAXAGE) ||
	ld.hu	d0,[a15]18
.L616:
	mov	d15,#300
.L617:
	jge.u	d0,d15,.L5
.L618:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   212            ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
	ld.bu	d15,[a15]20
.L619:
	jne	d15,#1,.L6
.L620:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   213             (arp_table[i].ctime >= ARP_MAXPENDING))) {
	jlt.u	d0,#5,.L7
.L5:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   214          /* pending or stable entry has become old! */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   215          LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   216                                     arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   217          /* clean up entries that have just been expired */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   218          etharp_free_entry(i);
	mov	d4,d8
	call	etharp_free_entry
.L621:
	j	.L8
.L7:
.L6:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   219        } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
	mov	d0,#4
	jne	d15,#3,.L9
.L622:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   220          /* Don't send more than one request every 2 seconds. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   221          arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
	st.b	[a15]20,d0
.L623:
	j	.L10
.L9:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   222        } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
	jne	d15,#4,.L11
.L624:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   223          /* Reset state to stable, so that the next transmitted packet will
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   224             re-send an ARP request. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   225          arp_table[i].state = ETHARP_STATE_STABLE;
	mov	d15,#2
	st.b	[a15]20,d15
.L625:
	j	.L12
.L11:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   226        } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
	jne	d15,#1,.L13
.L626:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   227          /* still pending, resend an ARP query */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   228          etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
	ld.a	a4,[a15]8
.L627:
	lea	a5,[a15]4
	call	etharp_request
.L13:
.L12:
.L10:
.L8:
.L4:
	add	d8,#1
	lea	a15,[a15]24
	loop	a12,.L3
.L628:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   229        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   230      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   231    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   232  }
	ret
.L313:
	
__etharp_tmr_function_end:
	.size	etharp_tmr,__etharp_tmr_function_end-etharp_tmr
.L203:
	; End of function
	
	.sdecl	'.text.etharp.etharp_find_entry',code,cluster('etharp_find_entry')
	.sect	'.text.etharp.etharp_find_entry'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   233  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   234  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   235   * Search the ARP table for a matching or new entry.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   236   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   237   * If an IP address is given, return a pending or stable ARP entry that matches
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   238   * the address. If no match is found, create a new entry with this address set,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   239   * but in state ETHARP_EMPTY. The caller must check and possibly change the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   240   * state of the returned entry.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   241   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   242   * If ipaddr is NULL, return a initialized new entry in state ETHARP_EMPTY.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   243   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   244   * In all cases, attempt to create new entries from an empty entry. If no
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   245   * empty entries are available and ETHARP_FLAG_TRY_HARD flag is set, recycle
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   246   * old entries. Heuristic choose the least important entry for recycling.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   247   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   248   * @param ipaddr IP address to find in ARP cache, or to add if not found.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   249   * @param flags See @ref etharp_state
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   250   * @param netif netif related to this address (used for NETIF_HWADDRHINT)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   251   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   252   * @return The ARP entry index that matched or is created, ERR_MEM if no
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   253   * entry is found or could be recycled.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   254   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   255  static s16_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   256  etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
; Function etharp_find_entry
.L160:
etharp_find_entry:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   257  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   258    s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   259    s16_t empty = ARP_TABLE_SIZE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   260    s16_t i = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   261    /* oldest entry with packets on queue */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   262    s16_t old_queue = ARP_TABLE_SIZE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   263    /* its age */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   264    u16_t age_queue = 0, age_pending = 0, age_stable = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   265  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   266    LWIP_UNUSED_ARG(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   267  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   268    /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   269     * a) do a search through the cache, remember candidates
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   270     * b) select candidate entry
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   271     * c) create new entry
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   272     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   273  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   274    /* a) in a single search sweep, do all of this
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   275     * 1) remember the first empty entry (if any)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   276     * 2) remember the oldest stable entry (if any)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   277     * 3) remember the oldest pending entry without queued packets (if any)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   278     * 4) remember the oldest pending entry with queued packets (if any)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   279     * 5) search for a matching IP entry, either pending or stable
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   280     *    until 5 matches, or all entries are searched for.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   281     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   282  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   283    for (i = 0; i < ARP_TABLE_SIZE; ++i) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   284      u8_t state = arp_table[i].state;
	mov	d6,#10
	movh.a	a14,#@his(arp_table)
.L432:
	mov	d0,#0
	lea	a14,[a14]@los(arp_table)
.L433:
	mov	d7,d6
	mov.aa	a12,a4
.L434:
	mov	d9,d6
	mov.aa	a13,a5
.L435:
	mov	d10,d6
	mov.aa	a15,a14
.L436:
	mov	d1,d0
	sub.a	a10,#16
.L430:
	mov	d2,d0
	mov.a	a2,#9
.L437:
	mov	d8,d0
.L14:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   285      /* no empty entry found yet and now we do find one? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   286      if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
	mov	d15,#10
	ld.bu	d3,[a15]20
.L438:
	jne	d15,d9,.L15
.L822:
	jne	d3,#0,.L16
.L823:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   287        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   288        /* remember first empty entry */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   289        empty = i;
	mov	d9,d8
	j	.L17
.L16:
.L15:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   290      } else if (state != ETHARP_STATE_EMPTY) {
	jeq	d3,#0,.L18
.L824:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   291        LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   292                    state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   293        /* if given, does IP address match IP address in ARP entry? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   294        if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
	jz.a	a12,.L19
.L825:
	ld.w	d5,[a12]
	ld.w	d15,[a15]4
	jne	d15,d5,.L20
.L826:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   295  #if ETHARP_TABLE_MATCH_NETIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   296            && ((netif == NULL) || (netif == arp_table[i].netif))
	jz.a	a13,.L21
.L827:
	ld.a	a4,[a15]8
.L828:
	jeq.a	a13,a4,.L22

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   297  #endif /* ETHARP_TABLE_MATCH_NETIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   298           ) {
.L20:
.L19:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   299          LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   300          /* found exact IP address match, simply bail out */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   301          return i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   302        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   303        /* pending entry? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   304        if (state == ETHARP_STATE_PENDING) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   305          /* pending with queued packets? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   306          if (arp_table[i].q != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   307            if (arp_table[i].ctime >= age_queue) {
	ld.hu	d5,[a15]18
.L829:
	jne	d3,#1,.L23
.L830:
	ld.w	d15,[a15]
.L831:
	jeq	d15,#0,.L24
.L832:
	jlt.u	d5,d0,.L25
.L833:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   308              old_queue = i;
	mov	d10,d8
.L834:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   309              age_queue = arp_table[i].ctime;
	mov	d0,d5
	j	.L26
.L24:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   310            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   311          } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   312            /* pending without queued packets? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   313          {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   314            if (arp_table[i].ctime >= age_pending) {
	jlt.u	d5,d1,.L27
.L835:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   315              old_pending = i;
	mov	d6,d8
.L836:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   316              age_pending = arp_table[i].ctime;
	mov	d1,d5
	j	.L28
.L23:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   317            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   318          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   319          /* stable entry? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   320        } else if (state >= ETHARP_STATE_STABLE) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   321  #if ETHARP_SUPPORT_STATIC_ENTRIES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   322          /* don't record old_stable for static entries since they never expire */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   323          if (state < ETHARP_STATE_STATIC)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   324  #endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   325          {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   326            /* remember entry with oldest stable entry in oldest, its age in maxtime */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   327            if (arp_table[i].ctime >= age_stable) {
	jlt.u	d5,d2,.L29
.L837:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   328              old_stable = i;
	mov	d7,d8
.L838:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   329              age_stable = arp_table[i].ctime;
	mov	d2,d5
.L29:
.L28:
.L27:
.L26:
.L25:
.L18:
.L17:
	add	d8,#1
	lea	a15,[a15]24
	loop	a2,.L14
.L839:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   330            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   331          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   332        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   333      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   334    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   335    /* { we have no match } => try to create a new entry */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   336  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   337    /* don't create new entry, only search? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   338    if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
	jnz.t	d4:1,.L30
.L840:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   339        /* or no empty entry found and not allowed to recycle? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   340        ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
	mov	d15,#10
.L841:
	jne	d15,d9,.L31
.L842:
	jz.t	d4:0,.L32
.L31:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   341      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   342      return (s16_t)ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   343    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   344  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   345    /* b) choose the least destructive entry to recycle:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   346     * 1) empty entry
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   347     * 2) oldest stable entry
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   348     * 3) oldest pending entry without queued packets
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   349     * 4) oldest pending entry with queued packets
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   350     *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   351     * { ETHARP_FLAG_TRY_HARD is set at this point }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   352     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   353  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   354    /* 1) empty entry available? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   355    if (empty < ARP_TABLE_SIZE) {
	jge	d9,d15,.L33
.L843:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   356      i = empty;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   357      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
	mov	d8,d9
	j	.L34
.L33:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   358    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   359      /* 2) found recyclable stable entry? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   360      if (old_stable < ARP_TABLE_SIZE) {
	jge	d7,d15,.L35
.L844:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   361        /* recycle oldest stable*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   362        i = old_stable;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   363        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   364        /* no queued packets should exist on stable entries */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   365        LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
	mul	d15,d7,#24
.L845:
	mov	d8,d7
.L846:
	addsc.a	a15,a14,d15,#0
	ld.w	d15,[a15]
	jeq	d15,#0,.L36
	movh.a	a15,#@his(.14.str)
	lea	a15,[a15]@los(.14.str)
	st.a	[a10],a15
	mov	d15,#365
	st.w	[a10]4,d15
.L431:
	fcall	.cocofun_51
.L439:
	st.a	[a10]8,a15
	fcall	.cocofun_50
	call	Ifx_Lwip_printf
.L440:
	j	.L37
.L35:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   366        /* 3) found recyclable pending entry without queued packets? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   367      } else if (old_pending < ARP_TABLE_SIZE) {
	jge	d6,d15,.L38
.L847:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   368        /* recycle oldest pending */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   369        i = old_pending;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   370        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
	mov	d8,d6
	j	.L39
.L38:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   371        /* 4) found recyclable pending entry with queued packets? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   372      } else if (old_queue < ARP_TABLE_SIZE) {
	jge	d10,d15,.L40
.L848:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   373        /* recycle oldest pending (queued packets are free in etharp_free_entry) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   374        i = old_queue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   375        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
	mov	d8,d10
	j	.L41
.L40:
.L32:
.L30:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   376        /* no empty or recyclable entries found */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   377      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   378        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   379        return (s16_t)ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   380      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   381  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   382      /* { empty or recyclable entry found } */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   383      LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   384      etharp_free_entry(i);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   385    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   386  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   387    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   388    LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   389                arp_table[i].state == ETHARP_STATE_EMPTY);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   390  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   391    /* IP address given? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   392    if (ipaddr != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   393      /* set IP address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   394      ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   395    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   396    arp_table[i].ctime = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   397  #if ETHARP_TABLE_MATCH_NETIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   398    arp_table[i].netif = netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   399  #endif /* ETHARP_TABLE_MATCH_NETIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   400    return (s16_t)i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   401  }
	mov	d2,#-1
	ret
.L41:
.L39:
.L37:
.L36:
	mov	d4,d8
	call	etharp_free_entry
.L34:
	mul	d15,d8,#24
	addsc.a	a15,a14,d15,#0
	ld.bu	d15,[a15]20
	jeq	d15,#0,.L43
	movh.a	a2,#@his(.19.str)
	lea	a2,[a2]@los(.19.str)
	st.a	[a10],a2
	mov	d15,#388
	st.w	[a10]4,d15
	movh.a	a2,#@his(.9.str)
	lea	a2,[a2]@los(.9.str)
	st.a	[a10]8,a2
	fcall	.cocofun_50
	call	Ifx_Lwip_printf
.L43:
	jz.a	a12,.L44
.L849:
	ld.w	d15,[a12]
	st.w	[a15]4,d15
.L44:
	mov	d15,#0
	st.h	[a15]18,d15
.L850:
	st.a	[a15]8,a13
.L22:
.L21:
	mov	d2,d8
	ret
.L398:
	
__etharp_find_entry_function_end:
	.size	etharp_find_entry,__etharp_find_entry_function_end-etharp_find_entry
.L258:
	; End of function
	
	.sdecl	'.text.etharp.etharp_update_arp_entry',code,cluster('etharp_update_arp_entry')
	.sect	'.text.etharp.etharp_update_arp_entry'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   402  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   403  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   404   * Update (or insert) a IP/MAC address pair in the ARP cache.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   405   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   406   * If a pending entry is resolved, any queued packets will be sent
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   407   * at this point.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   408   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   409   * @param netif netif related to this entry (used for NETIF_ADDRHINT)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   410   * @param ipaddr IP address of the inserted ARP entry.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   411   * @param ethaddr Ethernet address of the inserted ARP entry.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   412   * @param flags See @ref etharp_state
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   413   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   414   * @return
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   415   * - ERR_OK Successfully updated ARP cache.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   416   * - ERR_MEM If we could not add a new ARP entry when ETHARP_FLAG_TRY_HARD was set.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   417   * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   418   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   419   * @see pbuf_free()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   420   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   421  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   422  etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
; Function etharp_update_arp_entry
.L162:
etharp_update_arp_entry:	.type	func
	mov.aa	a12,a4
.L443:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   423  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   424    s16_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   425    LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
	mov	d8,d4
	ld.bu	d15,[a12]40
.L444:
	mov.aa	a13,a5
.L445:
	mov.aa	a14,a6
.L446:
	sub.a	a10,#16
.L441:
	jeq	d15,#6,.L46
.L855:
	movh.a	a2,#@his(.20.str)
	lea	a2,[a2]@los(.20.str)
	st.a	[a10],a2
	mov	d15,#425
	st.w	[a10]4,d15
.L442:
	fcall	.cocofun_51
.L447:
	st.a	[a10]8,a15
	fcall	.cocofun_50
.L448:
	call	Ifx_Lwip_printf
.L46:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   426    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   427                ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   428                (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   429                (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   430    /* non-unicast address? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   431    if (ip4_addr_isany(ipaddr) ||
	ld.w	d4,[a13]
	jeq	d4,#0,.L47
.L856:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   432        ip4_addr_isbroadcast(ipaddr, netif) ||
	mov.aa	a4,a12
.L450:
	call	ip4_addr_isbroadcast_u32
.L451:
	jne	d2,#0,.L48
.L857:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   433        ip4_addr_ismulticast(ipaddr)) {
	ld.w	d15,[a13]
	mov	d0,#224
	and	d15,#240
	jne	d15,d0,.L49
.L48:
.L47:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   434      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   435      return ERR_ARG;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   436    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   437    /* find or create ARP entry */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   438    i = etharp_find_entry(ipaddr, flags, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   439    /* bail out if no entry could be found */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   440    if (i < 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   441      return (err_t)i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   442    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   443  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   444  #if ETHARP_SUPPORT_STATIC_ENTRIES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   445    if (flags & ETHARP_FLAG_STATIC_ENTRY) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   446      /* record static type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   447      arp_table[i].state = ETHARP_STATE_STATIC;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   448    } else if (arp_table[i].state == ETHARP_STATE_STATIC) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   449      /* found entry is a static type, don't overwrite it */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   450      return ERR_VAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   451    } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   452  #endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   453    {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   454      /* mark it stable */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   455      arp_table[i].state = ETHARP_STATE_STABLE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   456    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   457  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   458    /* record network interface */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   459    arp_table[i].netif = netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   460    /* insert in SNMP ARP index tree */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   461    mib2_add_arp_entry(netif, &arp_table[i].ipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   462  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   463    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   464    /* update address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   465    SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   466    /* reset time stamp */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   467    arp_table[i].ctime = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   468    /* this is where we will send out queued packets! */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   469  #if ARP_QUEUEING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   470    while (arp_table[i].q != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   471      struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   472      /* remember remainder of queue */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   473      struct etharp_q_entry *q = arp_table[i].q;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   474      /* pop first item off the queue */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   475      arp_table[i].q = q->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   476      /* get the packet pointer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   477      p = q->p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   478      /* now queue entry can be freed */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   479      memp_free(MEMP_ARP_QUEUE, q);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   480  #else /* ARP_QUEUEING */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   481    if (arp_table[i].q != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   482      struct pbuf *p = arp_table[i].q;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   483      arp_table[i].q = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   484  #endif /* ARP_QUEUEING */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   485      /* send the queued IP packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   486      ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   487      /* free the queued IP packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   488      pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   489    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   490    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   491  }
	mov	d2,#-16
	ret
.L49:
	mov.aa	a4,a13
.L452:
	mov	d4,d8
	mov.aa	a5,a12
.L454:
	call	etharp_find_entry
.L453:
	jge	d2,#0,.L51
.L858:
	mov	d2,#-1
	ret
.L51:
	fcall	.cocofun_52
.L455:
	mov	d15,#2
	st.b	[a15]20,d15
.L859:
	st.a	[a15]8,a12
.L860:
	lea	a4,[a15]12
	mov	d4,#6
	mov.aa	a5,a14
.L458:
	call	memcpy
.L456:
	mov	d15,#0
	st.h	[a15]18,d15
.L861:
	ld.a	a13,[a15]
.L457:
	jz.a	a13,.L53
.L420:
	mov.a	a2,#0
.L862:
	st.a	[a15],a2
.L863:
	fcall	.cocofun_55
.L460:
	mov.aa	a7,a14
.L462:
	call	ethernet_output
.L461:
	mov.aa	a4,a13
	call	pbuf_free
.L53:
	mov	d2,#0
	ret
.L412:
	
__etharp_update_arp_entry_function_end:
	.size	etharp_update_arp_entry,__etharp_update_arp_entry_function_end-etharp_update_arp_entry
.L263:
	; End of function
	
	.sdecl	'.text.etharp..cocofun_55',code,cluster('.cocofun_55')
	.sect	'.text.etharp..cocofun_55'
	.align	2
; Function .cocofun_55
.L164:
.cocofun_55:	.type	func
; Function body .cocofun_55, coco_iter:0
	lea	a6,[a12]34
.L907:
	mov	d4,#2048
	mov.aa	a4,a12
.L459:
	mov.aa	a5,a13
.L534:
	fret
.L298:
	; End of function
	.sdecl	'.text.etharp..cocofun_52',code,cluster('.cocofun_52')
	.sect	'.text.etharp..cocofun_52'
	.align	2
; Function .cocofun_52
.L166:
.cocofun_52:	.type	func
; Function body .cocofun_52, coco_iter:0
	mul	d15,d2,#24
	fcall	.cocofun_57
.L893:
	addsc.a	a15,a15,d15,#0
.L894:
	fret
.L283:
	; End of function
	.sdecl	'.text.etharp.etharp_cleanup_netif',code,cluster('etharp_cleanup_netif')
	.sect	'.text.etharp.etharp_cleanup_netif'
	.align	2
	
	.global	etharp_cleanup_netif

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   492  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   493  #if ETHARP_SUPPORT_STATIC_ENTRIES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   494  /** Add a new static entry to the ARP table. If an entry exists for the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   495   * specified IP address, this entry is overwritten.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   496   * If packets are queued for the specified IP address, they are sent out.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   497   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   498   * @param ipaddr IP address for the new static entry
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   499   * @param ethaddr ethernet address for the new static entry
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   500   * @return See return values of etharp_add_static_entry
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   501   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   502  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   503  etharp_add_static_entry(const ip4_addr_t *ipaddr, struct eth_addr *ethaddr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   504  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   505    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   506    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   507    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_add_static_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   508                ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   509                (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   510                (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   511  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   512    netif = ip4_route(ipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   513    if (netif == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   514      return ERR_RTE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   515    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   516  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   517    return etharp_update_arp_entry(netif, ipaddr, ethaddr, ETHARP_FLAG_TRY_HARD | ETHARP_FLAG_STATIC_ENTRY);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   518  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   519  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   520  /** Remove a static entry from the ARP table previously added with a call to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   521   * etharp_add_static_entry.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   522   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   523   * @param ipaddr IP address of the static entry to remove
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   524   * @return ERR_OK: entry removed
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   525   *         ERR_MEM: entry wasn't found
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   526   *         ERR_ARG: entry wasn't a static entry but a dynamic one
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   527   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   528  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   529  etharp_remove_static_entry(const ip4_addr_t *ipaddr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   530  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   531    s16_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   532    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   533    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_remove_static_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   534                ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   535  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   536    /* find or create ARP entry */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   537    i = etharp_find_entry(ipaddr, ETHARP_FLAG_FIND_ONLY, NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   538    /* bail out if no entry could be found */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   539    if (i < 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   540      return (err_t)i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   541    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   542  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   543    if (arp_table[i].state != ETHARP_STATE_STATIC) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   544      /* entry wasn't a static entry, cannot remove it */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   545      return ERR_ARG;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   546    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   547    /* entry found, free it */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   548    etharp_free_entry(i);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   549    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   550  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   551  #endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   552  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   553  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   554   * Remove all ARP table entries of the specified netif.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   555   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   556   * @param netif points to a network interface
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   557   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   558  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   559  etharp_cleanup_netif(struct netif *netif)
; Function etharp_cleanup_netif
.L168:
etharp_cleanup_netif:	.type	func
	mov.aa	a12,a4
.L463:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   560  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   561    int i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   562  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   563    for (i = 0; i < ARP_TABLE_SIZE; ++i) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   564      u8_t state = arp_table[i].state;
	mov	d8,#0
	fcall	.cocofun_57
.L736:
	mov.a	a13,#9
.L55:
	ld.bu	d15,[a15]20
.L737:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   565      if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
	jeq	d15,#0,.L56
.L738:
	ld.a	a2,[a15]8
.L739:
	jne.a	a2,a12,.L57
.L740:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   566        etharp_free_entry(i);
	mov	d4,d8
	call	etharp_free_entry
.L57:
.L56:
	add	d8,#1
	lea	a15,[a15]24
	loop	a13,.L55
.L741:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   567      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   568    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   569  }
	ret
.L367:
	
__etharp_cleanup_netif_function_end:
	.size	etharp_cleanup_netif,__etharp_cleanup_netif_function_end-etharp_cleanup_netif
.L233:
	; End of function
	
	.sdecl	'.text.etharp.etharp_find_addr',code,cluster('etharp_find_addr')
	.sect	'.text.etharp.etharp_find_addr'
	.align	2
	
	.global	etharp_find_addr

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   570  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   571  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   572   * Finds (stable) ethernet/IP address pair from ARP table
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   573   * using interface and IP address index.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   574   * @note the addresses in the ARP table are in network order!
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   575   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   576   * @param netif points to interface index
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   577   * @param ipaddr points to the (network order) IP address index
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   578   * @param eth_ret points to return pointer
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   579   * @param ip_ret points to return pointer
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   580   * @return table index if found, -1 otherwise
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   581   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   582  ssize_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   583  etharp_find_addr(struct netif *netif, const ip4_addr_t *ipaddr,
; Function etharp_find_addr
.L170:
etharp_find_addr:	.type	func
	sub.a	a10,#16
.L464:
	mov.aa	a12,a4
.L466:
	mov.aa	a13,a5
.L467:
	mov.aa	a14,a6
.L468:
	st.a	[a10]12,a7
.L469:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   584                   struct eth_addr **eth_ret, const ip4_addr_t **ip_ret)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   585  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   586    s16_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   587  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   588    LWIP_ASSERT("eth_ret != NULL && ip_ret != NULL",
	jz.a	a14,.L58
.L633:
	jnz.a	a7,.L59
.L58:
	movh.a	a15,#@his(.24.str)
	lea	a15,[a15]@los(.24.str)
	st.a	[a10],a15
	mov	d15,#588
	st.w	[a10]4,d15
.L465:
	fcall	.cocofun_51
.L470:
	st.a	[a10]8,a15
	fcall	.cocofun_50
.L471:
	call	Ifx_Lwip_printf
.L59:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   589                eth_ret != NULL && ip_ret != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   590  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   591    LWIP_UNUSED_ARG(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   592  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   593    i = etharp_find_entry(ipaddr, ETHARP_FLAG_FIND_ONLY, netif);
	mov	d4,#2
	mov.aa	a4,a13
.L472:
	mov.aa	a5,a12
.L474:
	call	etharp_find_entry
.L473:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   594    if ((i >= 0) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
	jlt	d2,#0,.L60
.L634:
	fcall	.cocofun_52
.L635:
	ld.bu	d15,[a15]20
.L636:
	jlt.u	d15,#2,.L61
.L637:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   595      *eth_ret = &arp_table[i].ethaddr;
	lea	a2,[a15]12
.L638:
	st.a	[a14],a2
.L639:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   596      *ip_ret = &arp_table[i].ipaddr;
	ld.a	a2,[a10]12
.L475:
	lea	a15,[a15]4
.L640:
	st.a	[a2],a15
.L641:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   597      return i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   598    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   599    return -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   600  }
	ret
.L61:
.L60:
	mov	d2,#-1
	ret
.L316:
	
__etharp_find_addr_function_end:
	.size	etharp_find_addr,__etharp_find_addr_function_end-etharp_find_addr
.L208:
	; End of function
	
	.sdecl	'.text.etharp.etharp_get_entry',code,cluster('etharp_get_entry')
	.sect	'.text.etharp.etharp_get_entry'
	.align	2
	
	.global	etharp_get_entry

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   601  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   602  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   603   * Possibility to iterate over stable ARP table entries
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   604   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   605   * @param i entry number, 0 to ARP_TABLE_SIZE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   606   * @param ipaddr return value: IP address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   607   * @param netif return value: points to interface
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   608   * @param eth_ret return value: ETH address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   609   * @return 1 on valid index, 0 otherwise
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   610   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   611  int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   612  etharp_get_entry(size_t i, ip4_addr_t **ipaddr, struct netif **netif, struct eth_addr **eth_ret)
; Function etharp_get_entry
.L172:
etharp_get_entry:	.type	func
	sub.a	a10,#16
.L476:
	mov	d8,d4
	mov.aa	a12,a4
.L478:
	mov.aa	a13,a5
.L479:
	mov.aa	a14,a6
.L480:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   613  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   614    LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
	jnz.a	a12,.L64
.L646:
	movh.a	a15,#@his(.25.str)
	lea	a15,[a15]@los(.25.str)
	st.a	[a10],a15
	mov	d15,#614
	st.w	[a10]4,d15
.L477:
	fcall	.cocofun_51
.L481:
	st.a	[a10]8,a15
	fcall	.cocofun_50
.L482:
	call	Ifx_Lwip_printf
.L64:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   615    LWIP_ASSERT("netif != NULL", netif != NULL);
	jnz.a	a13,.L65
.L647:
	fcall	.cocofun_56
	st.a	[a10],a15
	mov	d15,#615
	st.w	[a10]4,d15
.L483:
	fcall	.cocofun_51
.L484:
	st.a	[a10]8,a15
	fcall	.cocofun_50
	call	Ifx_Lwip_printf
.L65:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   616    LWIP_ASSERT("eth_ret != NULL", eth_ret != NULL);
	jnz.a	a14,.L66
.L648:
	movh.a	a15,#@his(.27.str)
	lea	a15,[a15]@los(.27.str)
	st.a	[a10],a15
	mov	d15,#616
	st.w	[a10]4,d15
.L485:
	fcall	.cocofun_51
.L486:
	st.a	[a10]8,a15
	fcall	.cocofun_50
	call	Ifx_Lwip_printf
.L66:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   617  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   618    if ((i < ARP_TABLE_SIZE) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
	jge.u	d8,#10,.L67
.L649:
	mul	d15,d8,#24
	fcall	.cocofun_57
.L650:
	addsc.a	a15,a15,d15,#0
.L651:
	ld.bu	d15,[a15]20
.L652:
	jlt.u	d15,#2,.L68
.L653:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   619      *ipaddr  = &arp_table[i].ipaddr;
	lea	a2,[a15]4
.L654:
	st.a	[a12],a2
.L655:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   620      *netif   = arp_table[i].netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   621      *eth_ret = &arp_table[i].ethaddr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   622      return 1;
	mov	d2,#1
.L656:
	ld.a	a2,[a15]8
.L657:
	st.a	[a13],a2
.L658:
	lea	a15,[a15]12
.L659:
	st.a	[a14],a15
.L660:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   623    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   624      return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   625    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   626  }
	ret
.L68:
.L67:
	mov	d2,#0
	ret
.L327:
	
__etharp_get_entry_function_end:
	.size	etharp_get_entry,__etharp_get_entry_function_end-etharp_get_entry
.L213:
	; End of function
	
	.sdecl	'.text.etharp..cocofun_56',code,cluster('.cocofun_56')
	.sect	'.text.etharp..cocofun_56'
	.align	2
; Function .cocofun_56
.L174:
.cocofun_56:	.type	func
; Function body .cocofun_56, coco_iter:0
	movh.a	a15,#@his(.26.str)
	lea	a15,[a15]@los(.26.str)
.L912:
	fret
.L303:
	; End of function
	.sdecl	'.text.etharp.etharp_input',code,cluster('etharp_input')
	.sect	'.text.etharp.etharp_input'
	.align	2
	
	.global	etharp_input

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   627  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   628  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   629   * Responds to ARP requests to us. Upon ARP replies to us, add entry to cache
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   630   * send out queued IP packets. Updates cache with snooped address pairs.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   631   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   632   * Should be called for incoming ARP packets. The pbuf in the argument
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   633   * is freed by this function.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   634   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   635   * @param p The ARP packet that arrived on netif. Is freed by this function.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   636   * @param netif The lwIP network interface on which the ARP packet pbuf arrived.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   637   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   638   * @see pbuf_free()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   639   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   640  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   641  etharp_input(struct pbuf *p, struct netif *netif)
; Function etharp_input
.L176:
etharp_input:	.type	func
	sub.a	a10,#24
.L487:
	mov.aa	a12,a4
.L490:
	mov.aa	a13,a5
.L489:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   642  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   643    struct etharp_hdr *hdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   644    /* these are aligned properly, whereas the ARP header fields might not be */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   645    ip4_addr_t sipaddr, dipaddr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   646    u8_t for_us;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   647  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   648    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   649  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   650    LWIP_ERROR("netif != NULL", (netif != NULL), return;);
	jnz.a	a13,.L71
.L746:
	fcall	.cocofun_56
	st.a	[a10],a15
	mov	d15,#650
	st.w	[a10]4,d15
.L488:
	fcall	.cocofun_51
.L491:
	st.a	[a10]8,a15
	fcall	.cocofun_50
.L492:
	j	Ifx_Lwip_printf
.L71:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   651  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   652    hdr = (struct etharp_hdr *)p->payload;
	ld.a	a14,[a12]4
.L495:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   653  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   654    /* RFC 826 "Packet Reception": */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   655    if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   656        (hdr->hwlen != ETH_HWADDR_LEN) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   657        (hdr->protolen != sizeof(ip4_addr_t)) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   658        (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   659      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   660                  ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   661                   hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   662      ETHARP_STATS_INC(etharp.proterr);
	movh.a	a15,#@his(lwip_stats)
	lea	a15,[a15]@los(lwip_stats)
.L747:
	ld.hu	d15,[a14]0
.L748:
	mov	d0,#256
.L749:
	jne	d15,d0,.L73
.L750:
	ld.bu	d15,[a14]4
.L751:
	jne	d15,#6,.L74
.L752:
	ld.bu	d15,[a14]5
.L753:
	jne	d15,#4,.L75
.L754:
	ld.hu	d0,[a14]2
.L755:
	mov	d15,#8
.L756:
	jeq	d15,d0,.L76
.L75:
.L74:
.L73:
	ld.hu	d15,[a15]40
	add	d15,#1
	st.h	[a15]40,d15
.L757:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   663      ETHARP_STATS_INC(etharp.drop);
	ld.hu	d15,[a15]30
	add	d15,#1
	st.h	[a15]30,d15
.L758:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   664      pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   665      return;
	j	.L77
.L76:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   666    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   667    ETHARP_STATS_INC(etharp.recv);
	ld.hu	d15,[a15]26
.L759:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   668  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   669  #if LWIP_AUTOIP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   670    /* We have to check if a host already has configured our random
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   671     * created link local address and continuously check if there is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   672     * a host with this IP-address so we can detect collisions */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   673    autoip_arp_reply(netif, hdr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   674  #endif /* LWIP_AUTOIP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   675  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   676    /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   677     * structure packing (not using structure copy which breaks strict-aliasing rules). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   678    IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
	mov	d4,#4
	lea	a4,[a10]12
.L494:
	add	d15,#1
	st.h	[a15]26,d15
.L760:
	lea	a5,[a14]14
.L493:
	call	memcpy
.L761:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   679    IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
	lea	a4,[a10]16
	lea	a5,[a14]24
	mov	d4,#4
	call	memcpy
.L762:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   680  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   681    /* this interface is not configured? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   682    if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
	ld.w	d15,[a13]4
.L763:
	jne	d15,#0,.L78
.L764:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   683      for_us = 0;
	mov	d8,#0
	j	.L79
.L78:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   684    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   685      /* ARP packet directed to us? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   686      for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
	ld.w	d0,[a10]16
	eq	d8,d0,d15
.L79:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   687    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   688  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   689    /* ARP message directed to us?
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   690        -> add IP address in ARP cache; assume requester wants to talk to us,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   691           can result in directly sending the queued packets for this host.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   692       ARP message not directed to us?
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   693        ->  update the source IP address in the cache, if present */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   694    etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   695                            for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);
	eq	d15,d8,#0
	lea	a5,[a10]12
.L765:
	add	d4,d15,#1
	lea	a6,[a14]8
.L766:
	mov.aa	a4,a13
.L496:
	call	etharp_update_arp_entry
.L497:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   696  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   697    /* now act on the message itself */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   698    switch (hdr->opcode) {
	ld.hu	d0,[a14]6
.L767:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   699      /* ARP request? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   700      case PP_HTONS(ARP_REQUEST):
	mov	d15,#256
	jeq	d15,d0,.L80
.L768:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   701        /* ARP request. If it asked for our address, we send out a
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   702         * reply. In any case, we time-stamp any existing ARP entry,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   703         * and possibly send out an IP packet that was queued on it. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   704  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   705        LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   706        /* ARP request for our address? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   707        if (for_us) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   708          /* send ARP response */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   709          etharp_raw(netif,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   710                     (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   711                     (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   712                     &hdr->shwaddr, &sipaddr,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   713                     ARP_REPLY);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   714          /* we are not configured? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   715        } else if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   716          /* { for_us == 0 and netif->ip_addr.addr == 0 } */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   717          LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: we are unconfigured, ARP request ignored.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   718          /* request was not directed to us */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   719        } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   720          /* { for_us == 0 and netif->ip_addr.addr != 0 } */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   721          LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   722        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   723        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   724      case PP_HTONS(ARP_REPLY):
	mov	d15,#512
	jeq	d15,d0,.L81
	j	.L82
.L80:
	jeq	d8,#0,.L83
.L769:
	lea	a15,[a13]4
	st.a	[a10],a15
.L770:
	lea	a15,[a14]8
	st.a	[a10]4,a15
.L771:
	lea	a15,[a10]12
	st.a	[a10]8,a15
.L772:
	lea	a5,[a13]34
.L773:
	lea	a6,[a14]8
.L774:
	mov.aa	a7,a5
.L775:
	mov	d4,#2
	mov.aa	a4,a13
.L498:
	call	etharp_raw
.L499:
	j	.L84

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   725        /* ARP reply. We already updated the ARP cache earlier. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   726        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP reply\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   727  #if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   728        /* DHCP wants to know about ARP replies from any host with an
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   729         * IP address also offered to us by the DHCP server. We do not
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   730         * want to take a duplicate IP address on a single network.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   731         * @todo How should we handle redundant (fail-over) interfaces? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   732        dhcp_arp_reply(netif, &sipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   733  #endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   734        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   735      default:
.L82:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   736        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   737        ETHARP_STATS_INC(etharp.err);
	ld.hu	d15,[a15]44
	add	d15,#1
	st.h	[a15]44,d15
.L84:
.L83:
.L81:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   738        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   739    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   740    /* free ARP packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   741    pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   742  }
.L77:
	mov.aa	a4,a12
.L500:
	j	pbuf_free
.L370:
	
__etharp_input_function_end:
	.size	etharp_input,__etharp_input_function_end-etharp_input
.L238:
	; End of function
	
	.sdecl	'.text.etharp.etharp_output_to_arp_index',code,cluster('etharp_output_to_arp_index')
	.sect	'.text.etharp.etharp_output_to_arp_index'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   743  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   744  /** Just a small helper function that sends a pbuf to an ethernet address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   745   * in the arp_table specified by the index 'arp_idx'.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   746   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   747  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   748  etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
; Function etharp_output_to_arp_index
.L178:
etharp_output_to_arp_index:	.type	func
	sub.a	a10,#16
.L501:
	mov.aa	a12,a4
.L503:
	mov.aa	a13,a5
.L504:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   749  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   750    LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
	fcall	.cocofun_54
	addsc.a	a14,a15,d15,#0
	lea	a15,[a14]20
	st.a	[a10]12,a15
	ld.bu	d15,[a15]
	jge.u	d15,#2,.L85
	movh.a	a15,#@his(.34.str)
	lea	a15,[a15]@los(.34.str)
	st.a	[a10],a15
	mov	d15,#750
	st.w	[a10]4,d15
.L502:
	fcall	.cocofun_51
.L505:
	st.a	[a10]8,a15
	fcall	.cocofun_50
.L506:
	call	Ifx_Lwip_printf
.L85:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   751                arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   752    /* if arp table entry is about to expire: re-request it,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   753       but only if its state is ETHARP_STATE_STABLE to prevent flooding the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   754       network with ARP requests if this address is used frequently. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   755    if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
	ld.a	a15,[a10]12
	ld.bu	d15,[a15]
.L868:
	jne	d15,#2,.L86
.L869:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   756      if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
	ld.hu	d15,[a14]18
.L870:
	mov	d0,#285
.L871:
	jlt.u	d15,d0,.L87
.L872:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   757        /* issue a standard request using broadcast */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   758        if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
	lea	a5,[a14]4
	mov.aa	a4,a12
.L507:
	call	etharp_request
.L508:
	jne	d2,#0,.L88
.L873:
	j	.L89
.L87:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   759          arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   760        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   761      } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
	mov	d0,#270
.L874:
	jlt.u	d15,d0,.L90
.L875:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   762        /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   763        if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
	lea	a5,[a14]4
.L876:
	lea	a6,[a14]12
	mov.aa	a4,a12
.L509:
	call	etharp_request_dst
.L510:
	jne	d2,#0,.L91
.L89:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   764          arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
	mov	d15,#3
	st.b	[a15],d15
.L91:
.L90:
.L88:
.L86:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   765        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   766      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   767    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   768  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   769    return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
	lea	a6,[a12]34
.L877:
	lea	a7,[a14]12
.L878:
	mov	d4,#2048
	mov.aa	a4,a12
.L511:
	mov.aa	a5,a13
.L512:
	j	ethernet_output
.L421:
	
__etharp_output_to_arp_index_function_end:
	.size	etharp_output_to_arp_index,__etharp_output_to_arp_index_function_end-etharp_output_to_arp_index
.L268:
	; End of function
	
	.sdecl	'.text.etharp.etharp_output',code,cluster('etharp_output')
	.sect	'.text.etharp.etharp_output'
	.align	2
	
	.global	etharp_output

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   770  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   771  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   772  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   773   * Resolve and fill-in Ethernet address header for outgoing IP packet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   774   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   775   * For IP multicast and broadcast, corresponding Ethernet addresses
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   776   * are selected and the packet is transmitted on the link.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   777   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   778   * For unicast addresses, the packet is submitted to etharp_query(). In
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   779   * case the IP address is outside the local network, the IP address of
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   780   * the gateway is used.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   781   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   782   * @param netif The lwIP network interface which the IP packet will be sent on.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   783   * @param q The pbuf(s) containing the IP packet to be sent.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   784   * @param ipaddr The IP address of the packet destination.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   785   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   786   * @return
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   787   * - ERR_RTE No route to destination (no gateway to external networks),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   788   * or the return type of either etharp_query() or ethernet_output().
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   789   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   790  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   791  etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
; Function etharp_output
.L180:
etharp_output:	.type	func
	sub.a	a10,#24
.L513:
	mov.aa	a12,a4
.L515:
	mov.aa	a13,a5
.L516:
	mov.aa	a14,a6
.L517:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   792  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   793    const struct eth_addr *dest;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   794    struct eth_addr mcastaddr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   795    const ip4_addr_t *dst_addr = ipaddr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   796  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   797    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   798    LWIP_ASSERT("netif != NULL", netif != NULL);
	jnz.a	a12,.L93
.L665:
	movh.a	a2,#@his(.26.str)
	lea	a2,[a2]@los(.26.str)
	st.a	[a10],a2
	mov	d15,#798
	st.w	[a10]4,d15
.L514:
	fcall	.cocofun_51
.L518:
	st.a	[a10]8,a15
	fcall	.cocofun_50
.L519:
	call	Ifx_Lwip_printf
.L93:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   799    LWIP_ASSERT("q != NULL", q != NULL);
	jnz.a	a13,.L94
.L666:
	movh.a	a15,#@his(.35.str)
	lea	a15,[a15]@los(.35.str)
	st.a	[a10],a15
	mov	d15,#799
	st.w	[a10]4,d15
.L520:
	fcall	.cocofun_51
.L521:
	st.a	[a10]8,a15
	fcall	.cocofun_50
	call	Ifx_Lwip_printf
.L94:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   800    LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
	jnz.a	a14,.L95
.L667:
	movh.a	a15,#@his(.25.str)
	lea	a15,[a15]@los(.25.str)
	st.a	[a10],a15
	mov	d15,#800
	st.w	[a10]4,d15
.L522:
	fcall	.cocofun_51
.L532:
	st.a	[a10]8,a15
	fcall	.cocofun_50
	call	Ifx_Lwip_printf
.L95:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   801  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   802    /* Determine on destination hardware address. Broadcasts and multicasts
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   803     * are special, other IP addresses are looked up in the ARP table. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   804  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   805    /* broadcast destination IP address? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   806    if (ip4_addr_isbroadcast(ipaddr, netif)) {
	ld.w	d4,[a14]
	mov.aa	a4,a12
.L523:
	call	ip4_addr_isbroadcast_u32
.L524:
	jeq	d2,#0,.L96
.L668:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   807      /* broadcast on Ethernet also */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   808      dest = (const struct eth_addr *)&ethbroadcast;
	lea	a7,ethbroadcast
.L525:
	j	.L97
.L96:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   809      /* multicast destination IP address? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   810    } else if (ip4_addr_ismulticast(ipaddr)) {
	ld.w	d0,[a14]
	mov	d15,#224
	and	d1,d0,#240
.L669:
	jne	d15,d1,.L98
.L670:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   811      /* Hash IP multicast address to MAC address.*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   812      mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
	mov	d15,#1
	st.b	[a10]12,d15
.L671:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   813      mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
	mov	d15,#0
	st.b	[a10]13,d15
.L672:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   814      mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
	mov	d15,#94
	st.b	[a10]14,d15
.L673:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   815      mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   816      mcastaddr.addr[4] = ip4_addr3(ipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   817      mcastaddr.addr[5] = ip4_addr4(ipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   818      /* destination Ethernet address is multicast */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   819      dest = &mcastaddr;
	lea	a7,[a10]12
.L526:
	ld.bu	d15,[a14]1
.L674:
	and	d15,#127
	st.b	[a10]15,d15
.L675:
	ld.bu	d15,[a14]2
.L676:
	st.b	[a10]16,d15
.L677:
	ld.bu	d15,[a14]3
.L678:
	st.b	[a10]17,d15
.L679:
	j	.L99
.L98:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   820      /* unicast destination IP address? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   821    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   822      netif_addr_idx_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   823      /* outside local network? if so, this can neither be a global broadcast nor
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   824         a subnet broadcast. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   825      if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
	ld.w	d1,[a12]8
	ld.w	d15,[a12]4
	and	d2,d0,d1
	and	d15,d1
	jeq	d15,d2,.L100
.L680:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   826          !ip4_addr_islinklocal(ipaddr)) {
	insert	d15,d0,#0,#16,#16
	mov.u	d0,#65193
	jeq	d15,d0,.L101
.L681:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   827  #if LWIP_AUTOIP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   828        struct ip_hdr *iphdr = LWIP_ALIGNMENT_CAST(struct ip_hdr *, q->payload);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   829        /* According to RFC 3297, chapter 2.6.2 (Forwarding Rules), a packet with
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   830           a link-local source address must always be "directly to its destination
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   831           on the same physical link. The host MUST NOT send the packet to any
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   832           router for forwarding". */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   833        if (!ip4_addr_islinklocal(&iphdr->src))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   834  #endif /* LWIP_AUTOIP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   835        {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   836  #ifdef LWIP_HOOK_ETHARP_GET_GW
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   837          /* For advanced routing, a single default gateway might not be enough, so get
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   838             the IP address of the gateway to handle the current destination address. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   839          dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   840          if (dst_addr == NULL)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   841  #endif /* LWIP_HOOK_ETHARP_GET_GW */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   842          {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   843            /* interface has default gateway? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   844            if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
	ld.w	d15,[a12]12
	jeq	d15,#0,.L102
.L682:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   845              /* send to hardware address of default gateway IP address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   846              dst_addr = netif_ip4_gw(netif);
	lea	a14,[a12]12
.L683:
	j	.L103
.L102:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   847              /* no default gateway available */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   848            } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   849              /* no route to destination error (default gateway missing) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   850              return ERR_RTE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   851            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   852          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   853        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   854      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   855  #if LWIP_NETIF_HWADDRHINT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   856      if (netif->hints != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   857        /* per-pcb cached entry was given */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   858        netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   859        if (etharp_cached_entry < ARP_TABLE_SIZE) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   860  #endif /* LWIP_NETIF_HWADDRHINT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   861          if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   862  #if ETHARP_TABLE_MATCH_NETIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   863              (arp_table[etharp_cached_entry].netif == netif) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   864  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   865              (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   866            /* the per-pcb-cached entry is stable and the right one! */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   867            ETHARP_STATS_INC(etharp.cachehit);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   868            return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   869          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   870  #if LWIP_NETIF_HWADDRHINT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   871        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   872      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   873  #endif /* LWIP_NETIF_HWADDRHINT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   874  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   875      /* find stable entry: do this here since this is a critical path for
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   876         throughput and etharp_find_entry() is kind of slow */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   877      for (i = 0; i < ARP_TABLE_SIZE; i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   878        if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   879  #if ETHARP_TABLE_MATCH_NETIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   880            (arp_table[i].netif == netif) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   881  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   882            (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   883          /* found an existing, stable entry */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   884          ETHARP_SET_ADDRHINT(netif, i);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   885          return etharp_output_to_arp_index(netif, q, i);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   886        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   887      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   888      /* no stable entry found, use the (slower) query function:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   889         queue on destination Ethernet address belonging to ipaddr */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   890      return etharp_query(netif, dst_addr, q);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   891    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   892  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   893    /* continuation for multicast/broadcast destinations */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   894    /* obtain source Ethernet address of the given interface */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   895    /* send packet directly on the link */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   896    return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   897  }
	mov	d2,#-4
	ret
.L103:
.L101:
.L100:
	ld.bu	d4,etharp_cached_entry
.L684:
	movh.a	a2,#@his(arp_table)
.L685:
	mul	d15,d4,#24
	lea	a2,[a2]@los(arp_table)
.L686:
	addsc.a	a15,a2,d15,#0
.L687:
	ld.bu	d15,[a15]20
.L688:
	jlt.u	d15,#2,.L105
.L689:
	ld.a	a4,[a15]8
.L690:
	jne.a	a4,a12,.L106
.L691:
	ld.w	d0,[a14]
	ld.w	d15,[a15]4
	jne	d15,d0,.L107
.L692:
	movh.a	a15,#@his(lwip_stats+46)
	ld.hu	d15,[a15]@los(lwip_stats+46)
	add	d15,#1
	st.h	[a15]@los(lwip_stats+46),d15
.L693:
	j	.L108
.L107:
.L106:
.L105:
	mov	d4,#0
	mov.a	a15,#9
.L109:
	ld.bu	d15,[a2]20
.L694:
	jlt.u	d15,#2,.L110
.L695:
	ld.a	a4,[a2]8
.L696:
	jne.a	a4,a12,.L111
.L697:
	ld.w	d0,[a14]
	ld.w	d15,[a2]4
	jne	d15,d0,.L112
.L698:
	st.b	etharp_cached_entry,d4
.L108:
	mov.aa	a4,a12
.L527:
	mov.aa	a5,a13
.L528:
	j	etharp_output_to_arp_index
.L112:
.L111:
.L110:
	add	d4,#1
	lea	a2,[a2]24
	loop	a15,.L109
.L699:
	mov.aa	a4,a12
.L533:
	mov.aa	a5,a14
.L530:
	mov.aa	a6,a13
.L531:
	j	etharp_query
.L99:
.L97:
	fcall	.cocofun_55
.L529:
	j	ethernet_output
.L337:
	
__etharp_output_function_end:
	.size	etharp_output,__etharp_output_function_end-etharp_output
.L218:
	; End of function
	
	.sdecl	'.text.etharp.etharp_query',code,cluster('etharp_query')
	.sect	'.text.etharp.etharp_query'
	.align	2
	
	.global	etharp_query

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   898  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   899  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   900   * Send an ARP request for the given IP address and/or queue a packet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   901   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   902   * If the IP address was not yet in the cache, a pending ARP cache entry
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   903   * is added and an ARP request is sent for the given address. The packet
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   904   * is queued on this entry.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   905   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   906   * If the IP address was already pending in the cache, a new ARP request
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   907   * is sent for the given address. The packet is queued on this entry.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   908   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   909   * If the IP address was already stable in the cache, and a packet is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   910   * given, it is directly sent and no ARP request is sent out.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   911   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   912   * If the IP address was already stable in the cache, and no packet is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   913   * given, an ARP request is sent out.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   914   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   915   * @param netif The lwIP network interface on which ipaddr
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   916   * must be queried for.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   917   * @param ipaddr The IP address to be resolved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   918   * @param q If non-NULL, a pbuf that must be delivered to the IP address.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   919   * q is not freed by this function.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   920   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   921   * @note q must only be ONE packet, not a packet queue!
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   922   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   923   * @return
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   924   * - ERR_BUF Could not make room for Ethernet header.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   925   * - ERR_MEM Hardware address unknown, and no more ARP entries available
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   926   *   to query for address or queue the packet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   927   * - ERR_MEM Could not queue packet due to memory shortage.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   928   * - ERR_RTE No route to destination (no gateway to external networks).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   929   * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   930   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   931   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   932  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   933  etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
; Function etharp_query
.L182:
etharp_query:	.type	func
	sub.a	a10,#24
.L535:
	mov.aa	a12,a4
.L547:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   934  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   935    struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   936    err_t result = ERR_MEM;
	mov	d9,#-1
	st.a	[a10]12,a6
.L548:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   937    int is_new_entry = 0;
	mov	d10,#0
	lea	a15,[a12]34
.L537:
	st.a	[a10]20,a15
.L549:
	mov.aa	a13,a5
.L546:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   938    s16_t i_err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   939    netif_addr_idx_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   940  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   941    /* non-unicast address? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   942    if (ip4_addr_isbroadcast(ipaddr, netif) ||
	ld.w	d4,[a13]
	call	ip4_addr_isbroadcast_u32
.L536:
	jne	d2,#0,.L116
.L704:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   943        ip4_addr_ismulticast(ipaddr) ||
	ld.w	d0,[a13]
	mov	d15,#224
	and	d1,d0,#240
	jeq	d15,d1,.L117
.L705:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   944        ip4_addr_isany(ipaddr)) {
	jne	d0,#0,.L118
.L117:
.L116:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   945      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   946      return ERR_ARG;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   947    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   948  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   949    /* find entry in ARP cache, ask to create entry if queueing packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   950    i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   951  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   952    /* could not find or create entry? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   953    if (i_err < 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   954      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   955      if (q) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   956        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   957        ETHARP_STATS_INC(etharp.memerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   958      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   959      return (err_t)i_err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   960    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   961    LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   962    i = (netif_addr_idx_t)i_err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   963  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   964    /* mark a fresh entry as pending (we just sent a request) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   965    if (arp_table[i].state == ETHARP_STATE_EMPTY) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   966      is_new_entry = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   967      arp_table[i].state = ETHARP_STATE_PENDING;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   968      /* record network interface for re-sending arp request in etharp_tmr */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   969      arp_table[i].netif = netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   970    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   971  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   972    /* { i is either a STABLE or (new or existing) PENDING entry } */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   973    LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   974                ((arp_table[i].state == ETHARP_STATE_PENDING) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   975                 (arp_table[i].state >= ETHARP_STATE_STABLE)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   976  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   977    /* do we have a new entry? or an implicit query request? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   978    if (is_new_entry || (q == NULL)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   979      /* try to resolve it; send out ARP request */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   980      result = etharp_request(netif, ipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   981      if (result != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   982        /* ARP request couldn't be sent */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   983        /* We don't re-send arp request in etharp_tmr, but we still queue packets,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   984           since this failure could be temporary, and the next packet calling
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   985           etharp_query again could lead to sending the queued packets. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   986      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   987      if (q == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   988        return result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   989      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   990    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   991  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   992    /* packet given? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   993    LWIP_ASSERT("q != NULL", q != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   994    /* stable entry? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   995    if (arp_table[i].state >= ETHARP_STATE_STABLE) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   996      /* we have a valid IP->Ethernet address mapping */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   997      ETHARP_SET_ADDRHINT(netif, i);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   998      /* send the packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	   999      result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1000      /* pending entry? (either just created or already pending */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1001    } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1002      /* entry is still pending, queue the given packet 'q' */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1003      struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1004      int copy_needed = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1005      /* IF q includes a pbuf that must be copied, copy the whole chain into a
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1006       * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1007      p = q;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1008      while (p) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1009        LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1010        if (PBUF_NEEDS_COPY(p)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1011          copy_needed = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1012          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1013        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1014        p = p->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1015      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1016      if (copy_needed) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1017        /* copy the whole packet into new pbufs */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1018        p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1019      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1020        /* referencing the old pbuf is enough */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1021        p = q;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1022        pbuf_ref(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1023      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1024      /* packet could be taken over? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1025      if (p != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1026        /* queue packet ... */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1027  #if ARP_QUEUEING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1028        struct etharp_q_entry *new_entry;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1029        /* allocate a new arp queue entry */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1030        new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1031        if (new_entry != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1032          unsigned int qlen = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1033          new_entry->next = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1034          new_entry->p = p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1035          if (arp_table[i].q != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1036            /* queue was already existent, append the new entry to the end */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1037            struct etharp_q_entry *r;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1038            r = arp_table[i].q;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1039            qlen++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1040            while (r->next != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1041              r = r->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1042              qlen++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1043            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1044            r->next = new_entry;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1045          } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1046            /* queue did not exist, first item in queue */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1047            arp_table[i].q = new_entry;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1048          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1049  #if ARP_QUEUE_LEN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1050          if (qlen >= ARP_QUEUE_LEN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1051            struct etharp_q_entry *old;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1052            old = arp_table[i].q;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1053            arp_table[i].q = arp_table[i].q->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1054            pbuf_free(old->p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1055            memp_free(MEMP_ARP_QUEUE, old);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1056          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1057  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1058          LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, i));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1059          result = ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1060        } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1061          /* the pool MEMP_ARP_QUEUE is empty */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1062          pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1063          LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1064          result = ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1065        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1066  #else /* ARP_QUEUEING */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1067        /* always queue one packet per ARP request only, freeing a previously queued packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1068        if (arp_table[i].q != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1069          LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1070          pbuf_free(arp_table[i].q);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1071        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1072        arp_table[i].q = p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1073        result = ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1074        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1075  #endif /* ARP_QUEUEING */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1076      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1077        ETHARP_STATS_INC(etharp.memerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1078        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1079        result = ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1080      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1081    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1082    return result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1083  }
	mov	d2,#-16
	ret
.L118:
	mov	d4,#1
	mov.aa	a4,a13
.L539:
	mov.aa	a5,a12
.L541:
	call	etharp_find_entry
.L540:
	mov	d8,d2
.L545:
	jge	d8,#0,.L120
.L706:
	ld.a	a15,[a10]12
.L538:
	jz.a	a15,.L121
.L707:
	fcall	.cocofun_53
.L121:
	mov	d2,#-1
	ret
.L120:
	mul	d15,d8,#24
	movh.a	a2,#@his(arp_table)
	lea	a2,[a2]@los(arp_table)
.L708:
	addsc.a	a15,a2,d15,#0
.L550:
	st.a	[a10]16,a15
.L709:
	lea	a14,[a15]20
	ld.bu	d15,[a14]
.L710:
	jne	d15,#0,.L123
.L711:
	mov	d10,#1
	st.b	[a14],d10
.L712:
	st.a	[a15]8,a12
.L123:
	ld.bu	d15,[a14]
	jeq	d15,#1,.L124
	jge.u	d15,#2,.L125
	movh.a	a15,#@his(.40.str)
	lea	a15,[a15]@los(.40.str)
	st.a	[a10],a15
	mov	d15,#973
	st.w	[a10]4,d15
.L544:
	fcall	.cocofun_51
.L551:
	st.a	[a10]8,a15
	fcall	.cocofun_50
	call	Ifx_Lwip_printf
.L125:
.L124:
	jne	d10,#0,.L126
.L713:
	ld.a	a15,[a10]12
.L554:
	jnz.a	a15,.L127
.L126:
	mov.aa	a4,a12
.L555:
	mov.aa	a5,a13
.L556:
	call	etharp_request
.L553:
	ld.a	a15,[a10]12
.L557:
	mov	d9,d2
.L558:
	jz.a	a15,.L128
.L127:
	ld.bu	d15,[a14]
.L714:
	jlt.u	d15,#2,.L129
.L715:
	ld.a	a15,[a10]16
.L716:
	mov	d4,#2048
	st.b	etharp_cached_entry,d8
.L717:
	mov.aa	a4,a12
.L560:
	lea	a7,[a15]12
.L718:
	ld.a	a5,[a10]12
.L561:
	ld.a	a6,[a10]20
.L562:
	call	ethernet_output
.L559:
	mov	d9,d2
	j	.L130
.L129:
	jeq	d15,#0,.L131
.L361:
	mov	d8,#0
	ld.a	a12,[a10]12
.L132:
	ld.hu	d0,[a12]10
	ld.hu	d15,[a12]8
	jne	d15,d0,.L133
	ld.w	d15,[a12]
	jeq	d15,#0,.L134
	movh.a	a15,#@his(.41.str)
	lea	a15,[a15]@los(.41.str)
	st.a	[a10],a15
	mov	d15,#1009
	st.w	[a10]4,d15
.L552:
	fcall	.cocofun_51
.L563:
	st.a	[a10]8,a15
	fcall	.cocofun_50
	call	Ifx_Lwip_printf
.L134:
.L133:
	ld.bu	d15,[a12]12
.L719:
	jz.t	d15:6,.L135
.L720:
	mov	d8,#1
	j	.L136
.L135:
	ld.a	a12,[a12]
.L721:
	jnz.a	a12,.L132
.L136:
	jeq	d8,#0,.L137
.L722:
	mov	d4,#16
	ld.a	a4,[a10]12
.L564:
	mov	d5,#640
	call	pbuf_clone
.L565:
	mov.aa	a12,a2
.L566:
	j	.L138
.L137:
	ld.a	a12,[a10]12
.L723:
	mov.aa	a4,a12
.L567:
	call	pbuf_ref
.L138:
	jz.a	a12,.L139
.L724:
	ld.a	a15,[a10]16
	ld.a	a4,[a15]
.L725:
	jz.a	a4,.L140
.L726:
	call	pbuf_free
.L140:
	st.a	[a15],a12
.L727:
	mov	d9,#0
	j	.L141
.L139:
	fcall	.cocofun_53
.L568:
	mov	d9,#-1
.L141:
.L131:
.L130:
.L128:
	mov	d2,d9
	ret
.L349:
	
__etharp_query_function_end:
	.size	etharp_query,__etharp_query_function_end-etharp_query
.L223:
	; End of function
	
	.sdecl	'.text.etharp..cocofun_53',code,cluster('.cocofun_53')
	.sect	'.text.etharp..cocofun_53'
	.align	2
; Function .cocofun_53
.L184:
.cocofun_53:	.type	func
; Function body .cocofun_53, coco_iter:0
	movh.a	a15,#@his(lwip_stats+36)
.L543:
	ld.hu	d15,[a15]@los(lwip_stats+36)
	add	d15,#1
	st.h	[a15]@los(lwip_stats+36),d15
.L542:
	fret
.L288:
	; End of function
	.sdecl	'.text.etharp..cocofun_51',code,cluster('.cocofun_51')
	.sect	'.text.etharp..cocofun_51'
	.align	2
; Function .cocofun_51
.L186:
.cocofun_51:	.type	func
; Function body .cocofun_51, coco_iter:0
	movh.a	a15,#@his(.9.str)
	lea	a15,[a15]@los(.9.str)
.L888:
	fret
.L278:
	; End of function
	.sdecl	'.text.etharp..cocofun_50',code,cluster('.cocofun_50')
	.sect	'.text.etharp..cocofun_50'
	.align	2
; Function .cocofun_50
.L188:
.cocofun_50:	.type	func
; Function body .cocofun_50, coco_iter:0
	movh.a	a4,#@his(.7.str)
.L449:
	lea	a4,[a4]@los(.7.str)
.L883:
	fret
.L273:
	; End of function
	.sdecl	'.text.etharp.etharp_raw',code,cluster('etharp_raw')
	.sect	'.text.etharp.etharp_raw'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1084  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1085  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1086   * Send a raw ARP packet (opcode and all addresses can be modified)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1087   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1088   * @param netif the lwip network interface on which to send the ARP packet
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1089   * @param ethsrc_addr the source MAC address for the ethernet header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1090   * @param ethdst_addr the destination MAC address for the ethernet header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1091   * @param hwsrc_addr the source MAC address for the ARP protocol header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1092   * @param ipsrc_addr the source IP address for the ARP protocol header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1093   * @param hwdst_addr the destination MAC address for the ARP protocol header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1094   * @param ipdst_addr the destination IP address for the ARP protocol header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1095   * @param opcode the type of the ARP packet
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1096   * @return ERR_OK if the ARP packet has been sent
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1097   *         ERR_MEM if the ARP packet couldn't be allocated
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1098   *         any other err_t on failure
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1099   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1100  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1101  etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
; Function etharp_raw
.L190:
etharp_raw:	.type	func
	sub.a	a10,#24
.L569:
	mov.aa	a12,a4
.L571:
	st.a	[a10]20,a5
.L572:
	st.a	[a10]16,a6
.L573:
	st.a	[a10]12,a7
.L574:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1102             const struct eth_addr *ethdst_addr,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1103             const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1104             const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1105             const u16_t opcode)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1106  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1107    struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1108    err_t result = ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1109    struct etharp_hdr *hdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1110  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1111    LWIP_ASSERT("netif != NULL", netif != NULL);
	mov	d8,d4
	jnz.a	a12,.L143
.L570:
	fcall	.cocofun_56
.L575:
	st.a	[a10],a15
	mov	d15,#1111
	st.w	[a10]4,d15
.L576:
	fcall	.cocofun_51
.L577:
	st.a	[a10]8,a15
	fcall	.cocofun_50
.L578:
	call	Ifx_Lwip_printf
.L143:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1112  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1113    /* allocate a pbuf for the outgoing ARP request packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1114    p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
	mov	d4,#16
.L788:
	mov	d5,#28
.L789:
	mov	d6,#640
	call	pbuf_alloc
.L580:
	mov.aa	a13,a2
.L582:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1115    /* could allocate a pbuf for an ARP request? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1116    if (p == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1117      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1118                  ("etharp_raw: could not allocate pbuf for ARP request.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1119      ETHARP_STATS_INC(etharp.memerr);
	movh.a	a14,#@his(lwip_stats)
	lea	a14,[a14]@los(lwip_stats)
.L790:
	jnz.a	a13,.L144
.L791:
	ld.hu	d15,[a14]36
.L792:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1120      return ERR_MEM;
	mov	d2,#-1
.L793:
	add	d15,#1
	st.h	[a14]36,d15
.L794:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1121    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1122    LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1123                (p->len >= SIZEOF_ETHARP_HDR));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1124  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1125    hdr = (struct etharp_hdr *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1126    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1127    hdr->opcode = lwip_htons(opcode);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1128  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1129    LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1130                (netif->hwaddr_len == ETH_HWADDR_LEN));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1131  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1132    /* Write the ARP MAC-Addresses */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1133    SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1134    SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1135    /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1136     * structure packing. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1137    IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1138    IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1139  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1140    hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1141    hdr->proto = PP_HTONS(ETHTYPE_IP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1142    /* set hwlen and protolen */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1143    hdr->hwlen = ETH_HWADDR_LEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1144    hdr->protolen = sizeof(ip4_addr_t);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1145  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1146    /* send ARP query */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1147  #if LWIP_AUTOIP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1148    /* If we are using Link-Local, all ARP packets that contain a Link-Local
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1149     * 'sender IP address' MUST be sent using link-layer broadcast instead of
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1150     * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1151    if (ip4_addr_islinklocal(ipsrc_addr)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1152      ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1153    } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1154  #endif /* LWIP_AUTOIP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1155    {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1156      ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1157    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1158  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1159    ETHARP_STATS_INC(etharp.xmit);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1160    /* free ARP query packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1161    pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1162    p = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1163    /* could not allocate pbuf for ARP request */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1164  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1165    return result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1166  }
	ret
.L144:
	ld.hu	d0,[a13]10
	mov	d15,#28
	jge.u	d0,d15,.L146
	movh.a	a2,#@his(.46.str)
.L581:
	lea	a2,[a2]@los(.46.str)
	st.a	[a10],a2
	mov	d15,#1122
	st.w	[a10]4,d15
.L579:
	fcall	.cocofun_51
.L583:
	st.a	[a10]8,a15
	fcall	.cocofun_50
	call	Ifx_Lwip_printf
.L146:
	ld.a	a15,[a13]4
.L584:
	mov	d4,d8
	call	lwip_htons
.L795:
	st.h	[a15]6,d2
.L796:
	ld.bu	d15,[a12]40
	jeq	d15,#6,.L147
	movh.a	a2,#@his(.48.str)
	lea	a2,[a2]@los(.48.str)
	st.a	[a10],a2
	mov	d15,#1129
	st.w	[a10]4,d15
	movh.a	a2,#@his(.9.str)
	lea	a2,[a2]@los(.9.str)
	st.a	[a10]8,a2
	fcall	.cocofun_50
	call	Ifx_Lwip_printf
.L147:
	lea	a4,[a15]8
	mov	d4,#6
	ld.a	a5,[a10]12
.L585:
	call	memcpy
.L586:
	lea	a4,[a15]18
	mov	d4,#6
	ld.a	a5,[a10]28
.L587:
	call	memcpy
.L588:
	lea	a4,[a15]14
	mov	d4,#4
	ld.a	a5,[a10]24
.L589:
	call	memcpy
.L590:
	lea	a4,[a15]24
	mov	d4,#4
	ld.a	a5,[a10]32
.L591:
	call	memcpy
.L592:
	mov	d15,#256
	st.h	[a15],d15
.L797:
	mov	d15,#8
	st.h	[a15]2,d15
.L798:
	mov	d15,#6
	st.b	[a15]4,d15
.L799:
	mov	d15,#4
	st.b	[a15]5,d15
.L800:
	mov	d4,#2054
	mov.aa	a4,a12
.L593:
	mov.aa	a5,a13
.L595:
	ld.a	a6,[a10]20
.L596:
	ld.a	a7,[a10]16
.L597:
	call	ethernet_output
.L594:
	ld.hu	d15,[a14]24
.L801:
	mov.aa	a4,a13
.L598:
	add	d15,#1
	st.h	[a14]24,d15
.L802:
	call	pbuf_free
.L599:
	mov	d2,#0
	ret
.L383:
	
__etharp_raw_function_end:
	.size	etharp_raw,__etharp_raw_function_end-etharp_raw
.L248:
	; End of function
	
	.sdecl	'.text.etharp.etharp_request_dst',code,cluster('etharp_request_dst')
	.sect	'.text.etharp.etharp_request_dst'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1167  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1168  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1169   * Send an ARP request packet asking for ipaddr to a specific eth address.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1170   * Used to send unicast request to refresh the ARP table just before an entry
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1171   * times out
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1172   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1173   * @param netif the lwip network interface on which to send the request
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1174   * @param ipaddr the IP address for which to ask
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1175   * @param hw_dst_addr the ethernet address to send this packet to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1176   * @return ERR_OK if the request has been sent
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1177   *         ERR_MEM if the ARP packet couldn't be allocated
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1178   *         any other err_t on failure
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1179   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1180  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1181  etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
; Function etharp_request_dst
.L192:
etharp_request_dst:	.type	func
	sub.a	a10,#16
.L600:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1182  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1183    return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1184                      (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
	lea	a15,[a4]4
	st.a	[a10],a15
.L780:
	lea	a15,ethzero
	st.a	[a10]4,a15
.L781:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1185                      ipaddr, ARP_REQUEST);
	mov	d4,#1
	st.a	[a10]8,a5
.L782:
	lea	a5,[a4]34
.L601:
	mov.aa	a7,a5
.L783:
	j	etharp_raw
.L379:
	
__etharp_request_dst_function_end:
	.size	etharp_request_dst,__etharp_request_dst_function_end-etharp_request_dst
.L243:
	; End of function
	
	.sdecl	'.text.etharp.etharp_request',code,cluster('etharp_request')
	.sect	'.text.etharp.etharp_request'
	.align	2
	
	.global	etharp_request

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1186  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1187  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1188  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1189   * Send an ARP request packet asking for ipaddr.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1190   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1191   * @param netif the lwip network interface on which to send the request
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1192   * @param ipaddr the IP address for which to ask
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1193   * @return ERR_OK if the request has been sent
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1194   *         ERR_MEM if the ARP packet couldn't be allocated
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1195   *         any other err_t on failure
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1196   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1197  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1198  etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
; Function etharp_request
.L194:
etharp_request:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1199  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1200    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1201    return etharp_request_dst(netif, ipaddr, &ethbroadcast);
	lea	a6,ethbroadcast
	j	etharp_request_dst
.L364:
	
__etharp_request_function_end:
	.size	etharp_request,__etharp_request_function_end-etharp_request
.L228:
	; End of function
	
	.sdecl	'.bss.etharp.arp_table',data,cluster('arp_table')
	.sect	'.bss.etharp.arp_table'
	.align	4
arp_table:	.type	object
	.size	arp_table,240
	.space	240
	.sdecl	'.zbss.etharp.etharp_cached_entry',data,cluster('etharp_cached_entry')
	.sect	'.zbss.etharp.etharp_cached_entry'
etharp_cached_entry:	.type	object
	.size	etharp_cached_entry,1
	.space	1
	.sdecl	'.rodata.etharp..7.str',data,rom
	.sect	'.rodata.etharp..7.str'
.7.str:	.type	object
	.size	.7.str,40
	.byte	65,115,115,101
	.byte	114,116,105,111
	.byte	110,32,34,37
	.byte	115,34,32,102
	.byte	97,105,108,101
	.byte	100,32,97,116
	.byte	32,108,105,110
	.byte	101,32,37,100
	.byte	32,105,110,32
	.byte	37,115,10
	.space	1
	.sdecl	'.rodata.etharp..9.str',data,rom
	.sect	'.rodata.etharp..9.str'
.9.str:	.type	object
	.size	.9.str,54
	.byte	46,46,92,48
	.byte	95,83,114,99
	.byte	92,48,95,65
	.byte	112,112,83,119
	.byte	92,69,116,104
	.byte	101,114,110,101
	.byte	116,92,108,119
	.byte	105,112,92,115
	.byte	114,99,92,99
	.byte	111,114,101,92
	.byte	105,112,118,52
	.byte	92,101,116,104
	.byte	97,114,112,46
	.byte	99
	.space	1
	.sdecl	'.rodata.etharp..14.str',data,rom
	.sect	'.rodata.etharp..14.str'
.14.str:	.type	object
	.size	.14.str,23
	.byte	97,114,112,95
	.byte	116,97,98,108
	.byte	101,91,105,93
	.byte	46,113,32,61
	.byte	61,32,78,85
	.byte	76,76
	.space	1
	.sdecl	'.rodata.etharp..19.str',data,rom
	.sect	'.rodata.etharp..19.str'
.19.str:	.type	object
	.size	.19.str,41
	.byte	97,114,112,95
	.byte	116,97,98,108
	.byte	101,91,105,93
	.byte	46,115,116,97
	.byte	116,101,32,61
	.byte	61,32,69,84
	.byte	72,65,82,80
	.byte	95,83,84,65
	.byte	84,69,95,69
	.byte	77,80,84,89
	.space	1
	.sdecl	'.rodata.etharp..20.str',data,rom
	.sect	'.rodata.etharp..20.str'
.20.str:	.type	object
	.size	.20.str,36
	.byte	110,101,116,105
	.byte	102,45,62,104
	.byte	119,97,100,100
	.byte	114,95,108,101
	.byte	110,32,61,61
	.byte	32,69,84,72
	.byte	95,72,87,65
	.byte	68,68,82,95
	.byte	76,69,78
	.space	1
	.sdecl	'.rodata.etharp..24.str',data,rom
	.sect	'.rodata.etharp..24.str'
.24.str:	.type	object
	.size	.24.str,34
	.byte	101,116,104,95
	.byte	114,101,116,32
	.byte	33,61,32,78
	.byte	85,76,76,32
	.byte	38,38,32,105
	.byte	112,95,114,101
	.byte	116,32,33,61
	.byte	32,78,85,76
	.byte	76
	.space	1
	.sdecl	'.rodata.etharp..25.str',data,rom
	.sect	'.rodata.etharp..25.str'
.25.str:	.type	object
	.size	.25.str,15
	.byte	105,112,97,100
	.byte	100,114,32,33
	.byte	61,32,78,85
	.byte	76,76
	.space	1
	.sdecl	'.rodata.etharp..26.str',data,rom
	.sect	'.rodata.etharp..26.str'
.26.str:	.type	object
	.size	.26.str,14
	.byte	110,101,116,105
	.byte	102,32,33,61
	.byte	32,78,85,76
	.byte	76
	.space	1
	.sdecl	'.rodata.etharp..27.str',data,rom
	.sect	'.rodata.etharp..27.str'
.27.str:	.type	object
	.size	.27.str,16
	.byte	101,116,104,95
	.byte	114,101,116,32
	.byte	33,61,32,78
	.byte	85,76,76
	.space	1
	.sdecl	'.rodata.etharp..34.str',data,rom
	.sect	'.rodata.etharp..34.str'
.34.str:	.type	object
	.size	.34.str,48
	.byte	97,114,112,95
	.byte	116,97,98,108
	.byte	101,91,97,114
	.byte	112,95,105,100
	.byte	120,93,46,115
	.byte	116,97,116,101
	.byte	32,62,61,32
	.byte	69,84,72,65
	.byte	82,80,95,83
	.byte	84,65,84,69
	.byte	95,83,84,65
	.byte	66,76,69
	.space	1
	.sdecl	'.rodata.etharp..35.str',data,rom
	.sect	'.rodata.etharp..35.str'
.35.str:	.type	object
	.size	.35.str,10
	.byte	113,32,33,61
	.byte	32,78,85,76
	.byte	76
	.space	1
	.sdecl	'.rodata.etharp..40.str',data,rom
	.sect	'.rodata.etharp..40.str'
.40.str:	.type	object
	.size	.40.str,40
	.byte	97,114,112,95
	.byte	116,97,98,108
	.byte	101,91,105,93
	.byte	46,115,116,97
	.byte	116,101,32,61
	.byte	61,32,80,69
	.byte	78,68,73,78
	.byte	71,32,111,114
	.byte	32,83,84,65
	.byte	66,76,69
	.space	1
	.sdecl	'.rodata.etharp..41.str',data,rom
	.sect	'.rodata.etharp..41.str'
.41.str:	.type	object
	.size	.41.str,26
	.byte	110,111,32,112
	.byte	97,99,107,101
	.byte	116,32,113,117
	.byte	101,117,101,115
	.byte	32,97,108,108
	.byte	111,119,101,100
	.byte	33
	.space	1
	.sdecl	'.rodata.etharp..46.str',data,rom
	.sect	'.rodata.etharp..46.str'
.46.str:	.type	object
	.size	.46.str,49
	.byte	99,104,101,99
	.byte	107,32,116,104
	.byte	97,116,32,102
	.byte	105,114,115,116
	.byte	32,112,98,117
	.byte	102,32,99,97
	.byte	110,32,104,111
	.byte	108,100,32,115
	.byte	116,114,117,99
	.byte	116,32,101,116
	.byte	104,97,114,112
	.byte	95,104,100,114
	.space	1
	.sdecl	'.rodata.etharp..48.str',data,rom
	.sect	'.rodata.etharp..48.str'
.48.str:	.type	object
	.size	.48.str,65
	.byte	110,101,116,105
	.byte	102,45,62,104
	.byte	119,97,100,100
	.byte	114,95,108,101
	.byte	110,32,109,117
	.byte	115,116,32,98
	.byte	101,32,116,104
	.byte	101,32,115,97
	.byte	109,101,32,97
	.byte	115,32,69,84
	.byte	72,95,72,87
	.byte	65,68,68,82
	.byte	95,76,69,78
	.byte	32,102,111,114
	.byte	32,101,116,104
	.byte	97,114,112,33
	.space	1
	.calls	'etharp_free_entry','pbuf_free'
	.calls	'etharp_tmr','etharp_free_entry'
	.calls	'etharp_tmr','etharp_request'
	.calls	'etharp_find_entry','Ifx_Lwip_printf'
	.calls	'etharp_find_entry','etharp_free_entry'
	.calls	'etharp_update_arp_entry','Ifx_Lwip_printf'
	.calls	'etharp_update_arp_entry','ip4_addr_isbroadcast_u32'
	.calls	'etharp_update_arp_entry','etharp_find_entry'
	.calls	'etharp_update_arp_entry','memcpy'
	.calls	'etharp_update_arp_entry','ethernet_output'
	.calls	'etharp_update_arp_entry','pbuf_free'
	.calls	'etharp_cleanup_netif','etharp_free_entry'
	.calls	'etharp_find_addr','Ifx_Lwip_printf'
	.calls	'etharp_find_addr','etharp_find_entry'
	.calls	'etharp_get_entry','Ifx_Lwip_printf'
	.calls	'etharp_input','Ifx_Lwip_printf'
	.calls	'etharp_input','memcpy'
	.calls	'etharp_input','etharp_update_arp_entry'
	.calls	'etharp_input','etharp_raw'
	.calls	'etharp_input','pbuf_free'
	.calls	'etharp_output_to_arp_index','Ifx_Lwip_printf'
	.calls	'etharp_output_to_arp_index','etharp_request'
	.calls	'etharp_output_to_arp_index','etharp_request_dst'
	.calls	'etharp_output_to_arp_index','ethernet_output'
	.calls	'etharp_output','Ifx_Lwip_printf'
	.calls	'etharp_output','ip4_addr_isbroadcast_u32'
	.calls	'etharp_output','etharp_output_to_arp_index'
	.calls	'etharp_output','etharp_query'
	.calls	'etharp_output','ethernet_output'
	.calls	'etharp_query','ip4_addr_isbroadcast_u32'
	.calls	'etharp_query','etharp_find_entry'
	.calls	'etharp_query','Ifx_Lwip_printf'
	.calls	'etharp_query','etharp_request'
	.calls	'etharp_query','ethernet_output'
	.calls	'etharp_query','pbuf_clone'
	.calls	'etharp_query','pbuf_ref'
	.calls	'etharp_query','pbuf_free'
	.calls	'etharp_raw','Ifx_Lwip_printf'
	.calls	'etharp_raw','pbuf_alloc'
	.calls	'etharp_raw','lwip_htons'
	.calls	'etharp_raw','memcpy'
	.calls	'etharp_raw','ethernet_output'
	.calls	'etharp_raw','pbuf_free'
	.calls	'etharp_request_dst','etharp_raw'
	.calls	'etharp_request','etharp_request_dst'
	.calls	'etharp_free_entry','.cocofun_54'
	.calls	'.cocofun_54','.cocofun_57'
	.calls	'etharp_tmr','.cocofun_57'
	.calls	'etharp_find_entry','.cocofun_51'
	.calls	'etharp_find_entry','.cocofun_50'
	.calls	'etharp_update_arp_entry','.cocofun_51'
	.calls	'etharp_update_arp_entry','.cocofun_50'
	.calls	'etharp_update_arp_entry','.cocofun_52'
	.calls	'etharp_update_arp_entry','.cocofun_55'
	.calls	'.cocofun_52','.cocofun_57'
	.calls	'etharp_cleanup_netif','.cocofun_57'
	.calls	'etharp_find_addr','.cocofun_51'
	.calls	'etharp_find_addr','.cocofun_50'
	.calls	'etharp_find_addr','.cocofun_52'
	.calls	'etharp_get_entry','.cocofun_51'
	.calls	'etharp_get_entry','.cocofun_50'
	.calls	'etharp_get_entry','.cocofun_56'
	.calls	'etharp_get_entry','.cocofun_57'
	.calls	'etharp_input','.cocofun_56'
	.calls	'etharp_input','.cocofun_51'
	.calls	'etharp_input','.cocofun_50'
	.calls	'etharp_output_to_arp_index','.cocofun_54'
	.calls	'etharp_output_to_arp_index','.cocofun_51'
	.calls	'etharp_output_to_arp_index','.cocofun_50'
	.calls	'etharp_output','.cocofun_51'
	.calls	'etharp_output','.cocofun_50'
	.calls	'etharp_output','.cocofun_55'
	.calls	'etharp_query','.cocofun_53'
	.calls	'etharp_query','.cocofun_51'
	.calls	'etharp_query','.cocofun_50'
	.calls	'etharp_raw','.cocofun_56'
	.calls	'etharp_raw','.cocofun_51'
	.calls	'etharp_raw','.cocofun_50'
	.calls	'etharp_free_entry','',0
	.calls	'.cocofun_54','',0
	.calls	'.cocofun_57','',0
	.calls	'etharp_tmr','',0
	.calls	'etharp_find_entry','',16
	.calls	'etharp_update_arp_entry','',16
	.calls	'.cocofun_55','',0
	.calls	'.cocofun_52','',0
	.calls	'etharp_cleanup_netif','',0
	.calls	'etharp_find_addr','',16
	.calls	'etharp_get_entry','',16
	.calls	'.cocofun_56','',0
	.calls	'etharp_input','',24
	.calls	'etharp_output_to_arp_index','',16
	.calls	'etharp_output','',24
	.calls	'etharp_query','',24
	.calls	'.cocofun_53','',0
	.calls	'.cocofun_51','',0
	.calls	'.cocofun_50','',0
	.calls	'etharp_raw','',24
	.calls	'etharp_request_dst','',16
	.extern	Ifx_Lwip_printf
	.extern	pbuf_alloc
	.extern	pbuf_ref
	.extern	pbuf_free
	.extern	pbuf_clone
	.extern	lwip_htons
	.extern	ip4_addr_isbroadcast_u32
	.extern	lwip_stats
	.extern	ethernet_output
	.extern	ethbroadcast
	.extern	ethzero
	.extern	memcpy
	.calls	'etharp_request','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L196:
	.word	3787
	.half	3
	.word	.L197
	.byte	4
.L195:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L198
.L314:
	.byte	2
	.byte	'int',0,4,5,3
	.word	173
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	180
	.byte	0
.L328:
	.byte	2
	.byte	'unsigned int',0,4,7,6
	.word	222
	.byte	7
	.word	222
	.byte	8
	.byte	'__cmpswapw',0
	.word	238
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	243
	.byte	9
	.byte	'value',0
	.word	222
	.byte	9
	.byte	'compare',0
	.word	222
	.byte	0
.L336:
	.byte	2
	.byte	'char',0,1,6,2
	.byte	'char',0,1,6,3
	.word	308
	.byte	7
	.word	316
	.byte	10
	.byte	'Ifx_Lwip_printf',0,1,123,6
	.word	300
	.byte	1,1,1,1,11
	.byte	's',0,1,123,34
	.word	321
	.byte	12,1,123,37,0,13
	.byte	'void',0,7
	.word	369
.L407:
	.byte	2
	.byte	'unsigned short int',0,2,7
.L347:
	.byte	2
	.byte	'unsigned char',0,1,8,14
	.byte	'pbuf',0,2,186,1,8,16,15
	.byte	'next',0
	.word	.L339-.L196
	.byte	4,2,35,0,15
	.byte	'payload',0
	.word	375
	.byte	4,2,35,4,15
	.byte	'tot_len',0
	.word	380
	.byte	2,2,35,8,15
	.byte	'len',0
	.word	380
	.byte	2,2,35,10,15
	.byte	'type_internal',0
	.word	402
	.byte	1,2,35,12,15
	.byte	'flags',0
	.word	402
	.byte	1,2,35,13,15
	.byte	'ref',0
	.word	402
	.byte	1,2,35,14,15
	.byte	'if_idx',0
	.word	402
	.byte	1,2,35,15,0
.L339:
	.byte	7
	.word	419
	.byte	16,2,89,9,1,17
	.byte	'PBUF_RAW',0,0,17
	.byte	'PBUF_RAW_TX',0,0,17
	.byte	'PBUF_LINK',0,16,17
	.byte	'PBUF_IP',0,36,17
	.byte	'PBUF_TRANSPORT',0,56,0,16,2,145,1,9,2,17
	.byte	'PBUF_ROM',0,1,17
	.byte	'PBUF_REF',0,193,0,17
	.byte	'PBUF_POOL',0,130,3,17
	.byte	'PBUF_RAM',0,128,5,0,10
	.byte	'pbuf_alloc',0,2,147,2,14
	.word	559
	.byte	1,1,1,1,11
	.byte	'l',0,2,147,2,36
	.word	564
	.byte	11
	.byte	'length',0,2,147,2,45
	.word	380
	.byte	11
	.byte	'type',0,2,147,2,63
	.word	634
	.byte	0,18
	.byte	'pbuf_ref',0,2,164,2,6,1,1,1,1,11
	.byte	'p',0,2,164,2,28
	.word	559
	.byte	0,10
	.byte	'pbuf_free',0,2,165,2,6
	.word	402
	.byte	1,1,1,1,11
	.byte	'p',0,2,165,2,29
	.word	559
	.byte	0,10
	.byte	'pbuf_clone',0,2,177,2,14
	.word	559
	.byte	1,1,1,1,11
	.byte	'l',0,2,177,2,36
	.word	564
	.byte	11
	.byte	'type',0,2,177,2,49
	.word	634
	.byte	11
	.byte	'p',0,2,177,2,68
	.word	559
	.byte	0,10
	.byte	'lwip_htons',0,3,96,7
	.word	380
	.byte	1,1,1,1,11
	.byte	'x',0,3,96,24
	.word	380
	.byte	0,2
	.byte	'unsigned long int',0,4,7
.L317:
	.byte	7
	.word	.L602-.L196
.L375:
	.byte	14
	.byte	'ip4_addr',0,4,51,8,4,15
	.byte	'addr',0
	.word	915
	.byte	4,2,35,0,0,19
	.word	300
	.byte	1,1,5
	.word	559
	.byte	5
	.word	936
	.byte	0,7
	.word	970
	.byte	20
	.byte	'netif_input_fn',0,5,178,1,17
	.word	988
	.byte	3
	.word	941
	.byte	7
	.word	1017
	.byte	19
	.word	300
	.byte	1,1,5
	.word	936
	.byte	5
	.word	559
	.byte	5
	.word	1022
	.byte	0,7
	.word	1027
	.byte	20
	.byte	'netif_output_fn',0,5,189,1,17
	.word	1050
	.byte	19
	.word	300
	.byte	1,1,5
	.word	936
	.byte	5
	.word	559
	.byte	0,7
	.word	1080
	.byte	20
	.byte	'netif_linkoutput_fn',0,5,212,1,17
	.word	1098
	.byte	21,6
	.word	402
	.byte	22,5,0,21,2
	.word	308
	.byte	22,1,0
.L602:
	.byte	14
	.byte	'netif',0,5,132,2,8,48,15
	.byte	'next',0
	.word	936
	.byte	4,2,35,0,15
	.byte	'ip_addr',0
	.word	941
	.byte	4,2,35,4,15
	.byte	'netmask',0
	.word	941
	.byte	4,2,35,8,15
	.byte	'gw',0
	.word	941
	.byte	4,2,35,12,15
	.byte	'input',0
	.word	993
	.byte	4,2,35,16,15
	.byte	'output',0
	.word	1055
	.byte	4,2,35,20,15
	.byte	'linkoutput',0
	.word	1103
	.byte	4,2,35,24,15
	.byte	'state',0
	.word	375
	.byte	4,2,35,28,15
	.byte	'mtu',0
	.word	380
	.byte	2,2,35,32,15
	.byte	'hwaddr',0
	.word	1132
	.byte	6,2,35,34,15
	.byte	'hwaddr_len',0
	.word	402
	.byte	1,2,35,40,15
	.byte	'flags',0
	.word	402
	.byte	1,2,35,41,15
	.byte	'name',0
	.word	1141
	.byte	2,2,35,42,15
	.byte	'num',0
	.word	402
	.byte	1,2,35,44,15
	.byte	'rs_count',0
	.word	402
	.byte	1,2,35,45,0,3
	.word	1150
	.byte	7
	.word	1398
	.byte	10
	.byte	'ip4_addr_isbroadcast_u32',0,4,151,1,6
	.word	402
	.byte	1,1,1,1,11
	.byte	'addr',0,4,151,1,37
	.word	915
	.byte	11
	.byte	'netif',0,4,151,1,63
	.word	1403
	.byte	0,7
	.word	970
	.byte	7
	.word	1027
	.byte	7
	.word	1080
	.byte	3
	.word	941
.L319:
	.byte	7
	.word	1491
.L344:
	.byte	14
	.byte	'eth_addr',0,6,60,8,6,15
	.byte	'addr',0
	.word	1132
	.byte	6,2,35,0,0
.L354:
	.byte	7
	.word	1501
.L321:
	.byte	7
	.word	1530
.L323:
	.byte	7
	.word	1496
.L325:
	.byte	2
	.byte	'short int',0,2,5,7
	.word	941
.L330:
	.byte	7
	.word	1558
.L332:
	.byte	7
	.word	936
	.byte	3
	.word	1501
.L342:
	.byte	7
	.word	1573
	.byte	21,4
	.word	380
	.byte	22,1,0,14
	.byte	'ip4_addr_wordaligned',0,7,59,8,4,15
	.byte	'addrw',0
	.word	1583
	.byte	4,2,35,0,0,14
	.byte	'etharp_hdr',0,7,86,8,28,15
	.byte	'hwtype',0
	.word	380
	.byte	2,2,35,0,15
	.byte	'proto',0
	.word	380
	.byte	2,2,35,2,15
	.byte	'hwlen',0
	.word	402
	.byte	1,2,35,4,15
	.byte	'protolen',0
	.word	402
	.byte	1,2,35,5,15
	.byte	'opcode',0
	.word	380
	.byte	2,2,35,6,15
	.byte	'shwaddr',0
	.word	1501
	.byte	6,2,35,8,15
	.byte	'sipaddr',0
	.word	1592
	.byte	4,2,35,14,15
	.byte	'dhwaddr',0
	.word	1501
	.byte	6,2,35,18,15
	.byte	'dipaddr',0
	.word	1592
	.byte	4,2,35,24,0
.L373:
	.byte	7
	.word	1634
	.byte	10
	.byte	'ethernet_output',0,8,67,7
	.word	300
	.byte	1,1,1,1,11
	.byte	'netif',0,8,67,37
	.word	936
	.byte	11
	.byte	'p',0,8,67,57
	.word	559
	.byte	11
	.byte	'src',0,8,67,83
	.word	1578
	.byte	11
	.byte	'dst',0,8,67,111
	.word	1578
	.byte	11
	.byte	'eth_type',0,8,67,122
	.word	380
	.byte	0,23
	.word	375
	.byte	3
	.word	369
	.byte	7
	.word	1903
	.byte	23
	.word	1908
	.byte	10
	.byte	'memcpy',0,9,53,17
	.word	375
	.byte	1,1,1,1,24,9,53,33
	.word	1898
	.byte	24,9,53,56
	.word	1913
	.byte	24,9,53,68
	.word	222
	.byte	0
.L391:
	.byte	3
	.word	380
	.byte	20
	.byte	'__wchar_t',0,10,1,1
	.word	1545
	.byte	20
	.byte	'__size_t',0,10,1,1
	.word	222
	.byte	20
	.byte	'__ptrdiff_t',0,10,1,1
	.word	173
	.byte	25,1,7
	.word	2022
	.byte	20
	.byte	'__codeptr',0,10,1,1
	.word	2024
	.byte	20
	.byte	'__intptr_t',0,10,1,1
	.word	173
	.byte	20
	.byte	'__uintptr_t',0,10,1,1
	.word	222
	.byte	20
	.byte	'size_t',0,11,24,25
	.word	222
	.byte	20
	.byte	'uint8',0,12,108,29
	.word	402
	.byte	20
	.byte	'uint16',0,12,112,29
	.word	380
	.byte	20
	.byte	'uint32',0,12,116,29
	.word	915
	.byte	20
	.byte	'sint8',0,12,125,29
	.word	300
	.byte	20
	.byte	'sint16',0,12,129,1,29
	.word	1545
	.byte	2
	.byte	'long int',0,4,5,20
	.byte	'sint32',0,12,134,1,29
	.word	2175
	.byte	2
	.byte	'long long int',0,8,5,20
	.byte	'sint64',0,12,141,1,29
	.word	2203
	.byte	2
	.byte	'float',0,4,4,20
	.byte	'float32',0,12,170,1,29
	.word	2236
	.byte	20
	.byte	'pvoid',0,13,54,28
	.word	375
	.byte	20
	.byte	'Ifx_TickTime',0,13,76,28
	.word	2203
	.byte	20
	.byte	'u8_t',0,1,85,16
	.word	402
	.byte	20
	.byte	'u16_t',0,1,86,16
	.word	380
	.byte	20
	.byte	'u32_t',0,1,87,16
	.word	915
	.byte	20
	.byte	's8_t',0,1,88,16
	.word	300
	.byte	20
	.byte	's16_t',0,1,89,16
	.word	1545
	.byte	20
	.byte	'intmax_t',0,14,198,2,41
	.word	2203
	.byte	20
	.byte	'ssize_t',0,15,202,1,13
	.word	173
	.byte	20
	.byte	'err_t',0,16,96,14
	.word	300
	.byte	20
	.byte	'pbuf_layer',0,2,112,3
	.word	564
	.byte	20
	.byte	'pbuf_type',0,2,168,1,3
	.word	634
	.byte	26,1,1,5
	.word	559
	.byte	0,7
	.word	2452
	.byte	20
	.byte	'pbuf_free_custom_fn',0,2,242,1,16
	.word	2461
	.byte	20
	.byte	'ip4_addr_t',0,4,57,25
	.word	941
	.byte	20
	.byte	'ip_addr_t',0,17,142,2,20
	.word	941
	.byte	20
	.byte	'mem_size_t',0,18,67,15
	.word	380
	.byte	14
	.byte	'stats_proto',0,19,64,8,24,15
	.byte	'xmit',0
	.word	380
	.byte	2,2,35,0,15
	.byte	'recv',0
	.word	380
	.byte	2,2,35,2,15
	.byte	'fw',0
	.word	380
	.byte	2,2,35,4,15
	.byte	'drop',0
	.word	380
	.byte	2,2,35,6,15
	.byte	'chkerr',0
	.word	380
	.byte	2,2,35,8,15
	.byte	'lenerr',0
	.word	380
	.byte	2,2,35,10,15
	.byte	'memerr',0
	.word	380
	.byte	2,2,35,12,15
	.byte	'rterr',0
	.word	380
	.byte	2,2,35,14,15
	.byte	'proterr',0
	.word	380
	.byte	2,2,35,16,15
	.byte	'opterr',0
	.word	380
	.byte	2,2,35,18,15
	.byte	'err',0
	.word	380
	.byte	2,2,35,20,15
	.byte	'cachehit',0
	.word	380
	.byte	2,2,35,22,0,14
	.byte	'stats_mem',0,19,98,8,16,15
	.byte	'name',0
	.word	321
	.byte	4,2,35,0,15
	.byte	'err',0
	.word	380
	.byte	2,2,35,4,15
	.byte	'avail',0
	.word	380
	.byte	2,2,35,6,15
	.byte	'used',0
	.word	380
	.byte	2,2,35,8,15
	.byte	'max',0
	.word	380
	.byte	2,2,35,10,15
	.byte	'illegal',0
	.word	380
	.byte	2,2,35,12,0,7
	.word	2751
	.byte	21,36
	.word	2853
	.byte	22,8,0,14
	.byte	'stats_',0,19,232,1,8,220,1,15
	.byte	'link',0
	.word	2552
	.byte	24,2,35,0,15
	.byte	'etharp',0
	.word	2552
	.byte	24,2,35,24,15
	.byte	'ip_frag',0
	.word	2552
	.byte	24,2,35,48,15
	.byte	'ip',0
	.word	2552
	.byte	24,2,35,72,15
	.byte	'icmp',0
	.word	2552
	.byte	24,2,35,96,15
	.byte	'udp',0
	.word	2552
	.byte	24,2,35,120,15
	.byte	'tcp',0
	.word	2552
	.byte	24,3,35,144,1,15
	.byte	'mem',0
	.word	2751
	.byte	16,3,35,168,1,15
	.byte	'memp',0
	.word	2858
	.byte	36,3,35,184,1,0,27
	.byte	'lwip_stats',0,19,176,2,22
	.word	2867
	.byte	1,1,20
	.byte	'netif_addr_idx_t',0,5,244,1,14
	.word	402
	.byte	14
	.byte	'link_changed_s',0,5,213,4,10,1,15
	.byte	'state',0
	.word	402
	.byte	1,2,35,0,0,14
	.byte	'status_changed_s',0,5,219,4,10,1,15
	.byte	'state',0
	.word	402
	.byte	1,2,35,0,0,3
	.word	941
	.byte	7
	.word	3135
	.byte	14
	.byte	'ipv4_changed_s',0,5,225,4,10,12,15
	.byte	'old_address',0
	.word	3140
	.byte	4,2,35,0,15
	.byte	'old_netmask',0
	.word	3140
	.byte	4,2,35,4,15
	.byte	'old_gw',0
	.word	3140
	.byte	4,2,35,8,0,14
	.byte	'ipv6_set_s',0,5,233,4,10,8,15
	.byte	'addr_index',0
	.word	300
	.byte	1,2,35,0,15
	.byte	'old_address',0
	.word	3140
	.byte	4,2,35,4,0,14
	.byte	'ipv6_addr_state_changed_s',0,5,241,4,10,8,15
	.byte	'addr_index',0
	.word	300
	.byte	1,2,35,0,15
	.byte	'old_state',0
	.word	402
	.byte	1,2,35,1,15
	.byte	'address',0
	.word	3140
	.byte	4,2,35,4,0,28,5,210,4,9,12,15
	.byte	'link_changed',0
	.word	3059
	.byte	1,2,35,0,15
	.byte	'status_changed',0
	.word	3096
	.byte	1,2,35,0,15
	.byte	'ipv4_changed',0
	.word	3145
	.byte	12,2,35,0,15
	.byte	'ipv6_set',0
	.word	3225
	.byte	8,2,35,0,15
	.byte	'ipv6_addr_state_changed',0
	.word	3284
	.byte	8,2,35,0,0,3
	.word	3373
	.byte	7
	.word	3499
	.byte	26,1,1,5
	.word	936
	.byte	5
	.word	380
	.byte	5
	.word	3504
	.byte	0,7
	.word	3509
	.byte	20
	.byte	'netif_ext_callback_fn',0,5,132,5,16
	.word	3528
	.byte	14
	.byte	'ip4_addr_packed',0,20,53,8,4,15
	.byte	'addr',0
	.word	915
	.byte	4,2,35,0,0,20
	.byte	'ip4_addr_p_t',0,20,61,32
	.word	3564
	.byte	3
	.word	1501
	.byte	27
	.byte	'ethbroadcast',0,8,69,30
	.word	3621
	.byte	1,1,3
	.word	1501
	.byte	27
	.byte	'ethzero',0,8,69,44
	.word	3649
	.byte	1,1,14
	.byte	'etharp_entry',0,10,90,8,24,15
	.byte	'q',0
	.word	559
	.byte	4,2,35,0,15
	.byte	'ipaddr',0
	.word	941
	.byte	4,2,35,4,15
	.byte	'netif',0
	.word	936
	.byte	4,2,35,8,15
	.byte	'ethaddr',0
	.word	1501
	.byte	6,2,35,12,15
	.byte	'ctime',0
	.word	380
	.byte	2,2,35,18,15
	.byte	'state',0
	.word	402
	.byte	1,2,35,20,0
.L425:
	.byte	21,240,1
	.word	3672
	.byte	22,9,0,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L197:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,11
	.byte	5,0,3,8,58,15,59,15,57,15,73,19,0,0,12,24,0,58,15,59,15,57,15,0,0,13,59,0,3,8,0,0,14,19,1,3,8,58,15,59
	.byte	15,57,15,11,15,0,0,15,13,0,3,8,73,19,11,15,56,9,0,0,16,4,1,58,15,59,15,57,15,11,15,0,0,17,40,0,3,8,28
	.byte	13,0,0,18,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,19,21,1,73,19,54,15,39,12,0,0,20,22,0
	.byte	3,8,58,15,59,15,57,15,73,19,0,0,21,1,1,11,15,73,19,0,0,22,33,0,47,15,0,0,23,55,0,73,19,0,0,24,5,0,58,15
	.byte	59,15,57,15,73,19,0,0,25,21,0,54,15,0,0,26,21,1,54,15,39,12,0,0,27,52,0,3,8,58,15,59,15,57,15,73,19,63
	.byte	12,60,12,0,0,28,23,1,58,15,59,15,57,15,11,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L198:
	.word	.L604-.L603
.L603:
	.half	3
	.word	.L606-.L605
.L605:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'cc.h',0,1,0,0
	.byte	'pbuf.h',0,2,0,0
	.byte	'def.h',0,2,0,0
	.byte	'ip4_addr.h',0,2,0,0
	.byte	'netif.h',0,2,0,0
	.byte	'ethernet.h',0,3,0,0
	.byte	'etharp.h',0,3,0,0
	.byte	'ethernet.h',0,4,0,0
	.byte	'string.h',0,5,0,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0,0,0,0
	.byte	'stddef.h',0,5,0,0
	.byte	'Platform_Types.h',0,6,0,0
	.byte	'Ifx_Types.h',0,6,0,0
	.byte	'stdint.h',0,5,0,0
	.byte	'arch.h',0,2,0,0
	.byte	'err.h',0,2,0,0
	.byte	'ip_addr.h',0,2,0,0
	.byte	'mem.h',0,2,0,0
	.byte	'stats.h',0,2,0,0
	.byte	'ip4.h',0,3,0,0,0
.L606:
.L604:
	.sdecl	'.debug_info',debug,cluster('etharp_tmr')
	.sect	'.debug_info'
.L199:
	.word	245
	.half	3
	.word	.L200
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L202,.L201
	.byte	2
	.word	.L195
	.byte	3
	.byte	'etharp_tmr',0,1,197,1,1,1,1,1
	.word	.L158,.L313,.L157
	.byte	4
	.word	.L158,.L313
	.byte	5
	.byte	'i',0,1,199,1,7
	.word	.L314,.L315
	.byte	6
	.word	.L3,.L4
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('etharp_tmr')
	.sect	'.debug_abbrev'
.L200:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,11,0
	.byte	17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('etharp_tmr')
	.sect	'.debug_line'
.L201:
	.word	.L608-.L607
.L607:
	.half	3
	.word	.L610-.L609
.L609:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0,0,0,0,0
.L610:
	.byte	5,10,7,0,5,2
	.word	.L158
	.byte	3,202,1,1,5,18,3,1,1,5,33,9
	.half	.L611-.L158
	.byte	3,127,1,5,30,9
	.half	.L3-.L611
	.byte	3,1,1,5,5,9
	.half	.L612-.L3
	.byte	3,1,1,5,19,7,9
	.half	.L613-.L612
	.byte	3,5,1,5,25,9
	.half	.L614-.L613
	.byte	1,5,24,9
	.half	.L615-.L614
	.byte	3,1,1,5,34,9
	.half	.L616-.L615
	.byte	1,5,11,9
	.half	.L617-.L616
	.byte	1,5,25,7,9
	.half	.L618-.L617
	.byte	3,1,1,5,12,9
	.half	.L619-.L618
	.byte	1,5,32,7,9
	.half	.L620-.L619
	.byte	3,1,1,5,27,7,9
	.half	.L5-.L620
	.byte	3,5,1,5,29,9
	.half	.L621-.L5
	.byte	1,5,14,9
	.half	.L6-.L621
	.byte	3,1,1,5,28,9
	.half	.L622-.L6
	.byte	3,2,1,5,64,9
	.half	.L623-.L622
	.byte	1,5,14,9
	.half	.L9-.L623
	.byte	3,1,1,5,30,7,9
	.half	.L624-.L9
	.byte	3,3,1,5,28,1,5,49,9
	.half	.L625-.L624
	.byte	1,5,14,9
	.half	.L11-.L625
	.byte	3,1,1,5,36,7,9
	.half	.L626-.L11
	.byte	3,2,1,5,57,9
	.half	.L627-.L626
	.byte	1,5,35,9
	.half	.L4-.L627
	.byte	3,103,1,5,33,1,5,1,7,9
	.half	.L628-.L4
	.byte	3,29,1,7,9
	.half	.L203-.L628
	.byte	0,1,1
.L608:
	.sdecl	'.debug_ranges',debug,cluster('etharp_tmr')
	.sect	'.debug_ranges'
.L202:
	.word	-1,.L158,0,.L203-.L158,0,0
	.sdecl	'.debug_info',debug,cluster('etharp_find_addr')
	.sect	'.debug_info'
.L204:
	.word	326
	.half	3
	.word	.L205
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L207,.L206
	.byte	2
	.word	.L195
	.byte	3
	.byte	'etharp_find_addr',0,1,199,4,1
	.word	.L314
	.byte	1,1,1
	.word	.L170,.L316,.L169
	.byte	4
	.byte	'netif',0,1,199,4,32
	.word	.L317,.L318
	.byte	4
	.byte	'ipaddr',0,1,199,4,57
	.word	.L319,.L320
	.byte	4
	.byte	'eth_ret',0,1,200,4,36
	.word	.L321,.L322
	.byte	4
	.byte	'ip_ret',0,1,200,4,64
	.word	.L323,.L324
	.byte	5
	.word	.L170,.L316
	.byte	6
	.byte	'i',0,1,202,4,9
	.word	.L325,.L326
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('etharp_find_addr')
	.sect	'.debug_abbrev'
.L205:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('etharp_find_addr')
	.sect	'.debug_line'
.L206:
	.word	.L630-.L629
.L629:
	.half	3
	.word	.L632-.L631
.L631:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0,0,0,0,0
.L632:
	.byte	5,1,7,0,5,2
	.word	.L170
	.byte	3,198,4,1,5,3,9
	.half	.L469-.L170
	.byte	3,5,1,7,9
	.half	.L633-.L469
	.byte	1,7,9
	.half	.L58-.L633
	.byte	1,5,33,9
	.half	.L59-.L58
	.byte	3,5,1,5,56,1,5,7,9
	.half	.L473-.L59
	.byte	3,1,1,5,29,7,9
	.half	.L634-.L473
	.byte	1,5,32,9
	.half	.L635-.L634
	.byte	1,5,39,9
	.half	.L636-.L635
	.byte	1,5,29,7,9
	.half	.L637-.L636
	.byte	3,1,1,5,14,9
	.half	.L638-.L637
	.byte	1,5,13,9
	.half	.L639-.L638
	.byte	3,1,1,5,28,9
	.half	.L475-.L639
	.byte	1,5,13,9
	.half	.L640-.L475
	.byte	1,5,1,9
	.half	.L641-.L640
	.byte	3,4,1,5,10,7,9
	.half	.L60-.L641
	.byte	3,127,1,5,1,3,1,1,7,9
	.half	.L208-.L60
	.byte	0,1,1
.L630:
	.sdecl	'.debug_ranges',debug,cluster('etharp_find_addr')
	.sect	'.debug_ranges'
.L207:
	.word	-1,.L170,0,.L208-.L170,0,0
	.sdecl	'.debug_info',debug,cluster('etharp_get_entry')
	.sect	'.debug_info'
.L209:
	.word	301
	.half	3
	.word	.L210
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L212,.L211
	.byte	2
	.word	.L195
	.byte	3
	.byte	'etharp_get_entry',0,1,228,4,1
	.word	.L314
	.byte	1,1,1
	.word	.L172,.L327,.L171
	.byte	4
	.byte	'i',0,1,228,4,25
	.word	.L328,.L329
	.byte	4
	.byte	'ipaddr',0,1,228,4,41
	.word	.L330,.L331
	.byte	4
	.byte	'netif',0,1,228,4,64
	.word	.L332,.L333
	.byte	4
	.byte	'eth_ret',0,1,228,4,89
	.word	.L321,.L334
	.byte	5
	.word	.L335
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('etharp_get_entry')
	.sect	'.debug_abbrev'
.L210:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('etharp_get_entry')
	.sect	'.debug_line'
.L211:
	.word	.L643-.L642
.L642:
	.half	3
	.word	.L645-.L644
.L644:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0,0,0,0,0
.L645:
	.byte	5,1,7,0,5,2
	.word	.L172
	.byte	3,227,4,1,5,3,9
	.half	.L480-.L172
	.byte	3,2,1,7,9
	.half	.L646-.L480
	.byte	1,9
	.half	.L64-.L646
	.byte	3,1,1,7,9
	.half	.L647-.L64
	.byte	1,9
	.half	.L65-.L647
	.byte	3,1,1,7,9
	.half	.L648-.L65
	.byte	1,5,7,9
	.half	.L66-.L648
	.byte	3,2,1,5,41,7,9
	.half	.L649-.L66
	.byte	1,5,32,1,5,41,9
	.half	.L650-.L649
	.byte	1,5,44,9
	.half	.L651-.L650
	.byte	1,5,51,9
	.half	.L652-.L651
	.byte	1,5,29,7,9
	.half	.L653-.L652
	.byte	3,1,1,5,14,9
	.half	.L654-.L653
	.byte	1,5,12,9
	.half	.L655-.L654
	.byte	3,3,1,5,28,9
	.half	.L656-.L655
	.byte	3,126,1,5,14,9
	.half	.L657-.L656
	.byte	1,5,29,9
	.half	.L658-.L657
	.byte	3,1,1,5,14,9
	.half	.L659-.L658
	.byte	1,5,1,9
	.half	.L660-.L659
	.byte	3,5,1,5,12,7,9
	.half	.L67-.L660
	.byte	3,126,1,5,1,3,2,1,7,9
	.half	.L213-.L67
	.byte	0,1,1
.L643:
	.sdecl	'.debug_ranges',debug,cluster('etharp_get_entry')
	.sect	'.debug_ranges'
.L212:
	.word	-1,.L172,0,.L213-.L172,0,0
.L335:
	.word	-1,.L172,0,.L327-.L172,-1,.L174,0,.L303-.L174,0,0
	.sdecl	'.debug_info',debug,cluster('etharp_output')
	.sect	'.debug_info'
.L214:
	.word	370
	.half	3
	.word	.L215
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L217,.L216
	.byte	2
	.word	.L195
	.byte	3
	.byte	'etharp_output',0,1,151,6,1
	.word	.L336
	.byte	1,1,1
	.word	.L180,.L337,.L179
	.byte	4
	.byte	'netif',0,1,151,6,29
	.word	.L317,.L338
	.byte	4
	.byte	'q',0,1,151,6,49
	.word	.L339,.L340
	.byte	4
	.byte	'ipaddr',0,1,151,6,70
	.word	.L319,.L341
	.byte	5
	.word	.L180,.L337
	.byte	6
	.byte	'dest',0,1,153,6,26
	.word	.L342,.L343
	.byte	6
	.byte	'mcastaddr',0,1,154,6,19
	.word	.L344,.L345
	.byte	6
	.byte	'dst_addr',0,1,155,6,21
	.word	.L319,.L346
	.byte	5
	.word	.L98,.L97
	.byte	6
	.byte	'i',0,1,182,6,22
	.word	.L347,.L348
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('etharp_output')
	.sect	'.debug_abbrev'
.L215:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('etharp_output')
	.sect	'.debug_line'
.L216:
	.word	.L662-.L661
.L661:
	.half	3
	.word	.L664-.L663
.L663:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0,0,0,0,0
.L664:
	.byte	5,1,7,0,5,2
	.word	.L180
	.byte	3,150,6,1,5,3,9
	.half	.L517-.L180
	.byte	3,7,1,7,9
	.half	.L665-.L517
	.byte	1,9
	.half	.L93-.L665
	.byte	3,1,1,7,9
	.half	.L666-.L93
	.byte	1,9
	.half	.L94-.L666
	.byte	3,1,1,7,9
	.half	.L667-.L94
	.byte	1,5,7,9
	.half	.L95-.L667
	.byte	3,6,1,5,3,9
	.half	.L524-.L95
	.byte	1,5,38,7,9
	.half	.L668-.L524
	.byte	3,2,1,5,50,9
	.half	.L525-.L668
	.byte	1,5,14,9
	.half	.L96-.L525
	.byte	3,2,1,5,10,9
	.half	.L669-.L96
	.byte	1,5,25,7,9
	.half	.L670-.L669
	.byte	3,2,1,5,23,1,5,25,9
	.half	.L671-.L670
	.byte	3,1,1,5,23,1,5,25,9
	.half	.L672-.L671
	.byte	3,1,1,5,23,1,5,13,9
	.half	.L673-.L672
	.byte	3,5,1,5,25,9
	.half	.L526-.L673
	.byte	3,124,1,5,43,9
	.half	.L674-.L526
	.byte	1,5,23,1,5,25,9
	.half	.L675-.L674
	.byte	3,1,1,5,23,9
	.half	.L676-.L675
	.byte	1,5,25,9
	.half	.L677-.L676
	.byte	3,1,1,5,23,9
	.half	.L678-.L677
	.byte	1,5,48,9
	.half	.L679-.L678
	.byte	3,123,1,5,10,9
	.half	.L98-.L679
	.byte	3,13,1,9
	.half	.L680-.L98
	.byte	3,1,1,5,16,9
	.half	.L681-.L680
	.byte	3,18,1,5,24,9
	.half	.L682-.L681
	.byte	3,2,1,5,43,9
	.half	.L683-.L682
	.byte	1,5,20,9
	.half	.L102-.L683
	.byte	3,4,1,5,1,3,47,1,5,24,7,9
	.half	.L100-.L102
	.byte	3,92,1,5,14,9
	.half	.L684-.L100
	.byte	1,5,23,9
	.half	.L685-.L684
	.byte	1,5,14,1,5,23,9
	.half	.L686-.L685
	.byte	1,5,44,9
	.half	.L687-.L686
	.byte	1,5,13,9
	.half	.L688-.L687
	.byte	1,5,44,7,9
	.half	.L689-.L688
	.byte	3,2,1,5,51,9
	.half	.L690-.L689
	.byte	1,5,14,7,9
	.half	.L691-.L690
	.byte	3,2,1,5,11,9
	.half	.L692-.L691
	.byte	3,2,1,9
	.half	.L693-.L692
	.byte	3,1,1,5,12,9
	.half	.L105-.L693
	.byte	3,9,1,5,35,1,5,24,9
	.half	.L109-.L105
	.byte	3,1,1,5,11,9
	.half	.L694-.L109
	.byte	1,5,24,7,9
	.half	.L695-.L694
	.byte	3,2,1,5,31,9
	.half	.L696-.L695
	.byte	1,5,12,7,9
	.half	.L697-.L696
	.byte	3,2,1,5,9,9
	.half	.L698-.L697
	.byte	3,2,1,5,53,9
	.half	.L108-.L698
	.byte	3,1,1,5,38,9
	.half	.L110-.L108
	.byte	3,120,1,5,35,1,5,42,7,9
	.half	.L699-.L110
	.byte	3,13,1,5,61,9
	.half	.L97-.L699
	.byte	3,6,1,5,78,9
	.half	.L529-.L97
	.byte	1,5,1,7,9
	.half	.L218-.L529
	.byte	3,1,0,1,1
.L662:
	.sdecl	'.debug_ranges',debug,cluster('etharp_output')
	.sect	'.debug_ranges'
.L217:
	.word	-1,.L180,0,.L218-.L180,0,0
	.sdecl	'.debug_info',debug,cluster('etharp_query')
	.sect	'.debug_info'
.L219:
	.word	424
	.half	3
	.word	.L220
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L222,.L221
	.byte	2
	.word	.L195
	.byte	3
	.byte	'etharp_query',0,1,165,7,1
	.word	.L336
	.byte	1,1,1
	.word	.L182,.L349,.L181
	.byte	4
	.byte	'netif',0,1,165,7,28
	.word	.L317,.L350
	.byte	4
	.byte	'ipaddr',0,1,165,7,53
	.word	.L319,.L351
	.byte	4
	.byte	'q',0,1,165,7,74
	.word	.L339,.L352
	.byte	5
	.word	.L353
	.byte	6
	.byte	'srcaddr',0,1,167,7,20
	.word	.L354,.L355
	.byte	6
	.byte	'result',0,1,168,7,9
	.word	.L336,.L356
	.byte	6
	.byte	'is_new_entry',0,1,169,7,7
	.word	.L314,.L357
	.byte	6
	.byte	'i_err',0,1,170,7,9
	.word	.L325,.L358
	.byte	6
	.byte	'i',0,1,171,7,20
	.word	.L347,.L359
	.byte	5
	.word	.L360
	.byte	6
	.byte	'p',0,1,235,7,18
	.word	.L339,.L362
	.byte	6
	.byte	'copy_needed',0,1,236,7,9
	.word	.L314,.L363
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('etharp_query')
	.sect	'.debug_abbrev'
.L220:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('etharp_query')
	.sect	'.debug_line'
.L221:
	.word	.L701-.L700
.L700:
	.half	3
	.word	.L703-.L702
.L702:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0,0,0,0,0
.L703:
	.byte	5,1,7,0,5,2
	.word	.L182
	.byte	3,164,7,1,5,16,9
	.half	.L547-.L182
	.byte	3,3,1,5,1,3,125,1,5,20,9
	.half	.L548-.L547
	.byte	3,4,1,5,54,3,126,1,5,1,9
	.half	.L549-.L548
	.byte	3,126,1,5,7,9
	.half	.L546-.L549
	.byte	3,9,1,9
	.half	.L704-.L546
	.byte	3,1,1,9
	.half	.L705-.L704
	.byte	3,1,1,5,12,7,9
	.half	.L116-.L705
	.byte	3,2,1,5,1,3,137,1,1,5,37,7,9
	.half	.L118-.L116
	.byte	3,251,126,1,5,59,1,5,9,9
	.half	.L540-.L118
	.byte	1,5,3,9
	.half	.L545-.L540
	.byte	3,3,1,5,5,7,9
	.half	.L706-.L545
	.byte	3,2,1,5,7,9
	.half	.L707-.L706
	.byte	3,2,1,5,12,9
	.half	.L121-.L707
	.byte	3,2,1,5,1,3,252,0,1,5,16,7,9
	.half	.L120-.L121
	.byte	3,138,127,1,5,7,1,5,16,9
	.half	.L708-.L120
	.byte	1,5,19,9
	.half	.L709-.L708
	.byte	1,5,3,9
	.half	.L710-.L709
	.byte	1,5,18,7,9
	.half	.L711-.L710
	.byte	3,1,1,5,24,3,1,1,9
	.half	.L712-.L711
	.byte	3,2,1,5,3,9
	.half	.L123-.L712
	.byte	3,4,1,5,7,9
	.half	.L124-.L123
	.byte	3,5,1,5,26,7,9
	.half	.L713-.L124
	.byte	1,5,36,9
	.half	.L126-.L713
	.byte	3,2,1,5,5,9
	.half	.L553-.L126
	.byte	3,7,1,5,12,9
	.half	.L557-.L553
	.byte	3,121,1,5,5,9
	.half	.L558-.L557
	.byte	3,7,1,5,19,7,9
	.half	.L127-.L558
	.byte	3,8,1,5,3,9
	.half	.L714-.L127
	.byte	1,5,63,7,9
	.half	.L715-.L714
	.byte	3,4,1,5,74,9
	.half	.L716-.L715
	.byte	1,5,5,3,126,1,5,74,9
	.half	.L717-.L716
	.byte	3,2,1,5,63,9
	.half	.L560-.L717
	.byte	1,5,74,9
	.half	.L718-.L560
	.byte	1,5,12,9
	.half	.L559-.L718
	.byte	1,5,34,3,126,1,5,10,9
	.half	.L129-.L559
	.byte	3,4,1,5,21,7,9
	.half	.L361-.L129
	.byte	3,3,1,5,7,3,3,1,9
	.half	.L132-.L361
	.byte	3,2,1,5,11,9
	.half	.L133-.L132
	.byte	3,1,1,5,7,9
	.half	.L719-.L133
	.byte	1,5,21,7,9
	.half	.L720-.L719
	.byte	3,1,1,5,9,3,1,1,5,12,9
	.half	.L135-.L720
	.byte	3,2,1,5,13,9
	.half	.L721-.L135
	.byte	3,122,1,5,5,7,9
	.half	.L136-.L721
	.byte	3,8,1,5,22,7,9
	.half	.L722-.L136
	.byte	3,2,1,5,43,1,5,33,9
	.half	.L564-.L722
	.byte	1,5,43,1,5,9,9
	.half	.L565-.L564
	.byte	1,5,45,9
	.half	.L566-.L565
	.byte	1,5,9,9
	.half	.L137-.L566
	.byte	3,3,1,5,11,9
	.half	.L723-.L137
	.byte	1,5,5,9
	.half	.L138-.L723
	.byte	3,4,1,5,23,7,9
	.half	.L724-.L138
	.byte	3,43,1,5,7,9
	.half	.L725-.L724
	.byte	1,5,31,7,9
	.half	.L726-.L725
	.byte	3,2,1,5,22,9
	.half	.L140-.L726
	.byte	3,2,1,5,14,9
	.half	.L727-.L140
	.byte	3,1,1,5,7,3,1,1,9
	.half	.L139-.L727
	.byte	3,3,1,5,14,9
	.half	.L568-.L139
	.byte	3,2,1,5,3,9
	.half	.L128-.L568
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L223-.L128
	.byte	0,1,1
.L701:
	.sdecl	'.debug_ranges',debug,cluster('etharp_query')
	.sect	'.debug_ranges'
.L222:
	.word	-1,.L182,0,.L223-.L182,0,0
.L353:
	.word	-1,.L182,0,.L349-.L182,-1,.L184,0,.L288-.L184,0,0
.L360:
	.word	-1,.L182,.L361-.L182,.L128-.L182,-1,.L186,0,.L278-.L186,-1,.L188,0,.L273-.L188,0,0
	.sdecl	'.debug_info',debug,cluster('etharp_request')
	.sect	'.debug_info'
.L224:
	.word	267
	.half	3
	.word	.L225
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L227,.L226
	.byte	2
	.word	.L195
	.byte	3
	.byte	'etharp_request',0,1,174,9,1
	.word	.L336
	.byte	1,1,1
	.word	.L194,.L364,.L193
	.byte	4
	.byte	'netif',0,1,174,9,30
	.word	.L317,.L365
	.byte	4
	.byte	'ipaddr',0,1,174,9,55
	.word	.L319,.L366
	.byte	5
	.word	.L194,.L364
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('etharp_request')
	.sect	'.debug_abbrev'
.L225:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('etharp_request')
	.sect	'.debug_line'
.L226:
	.word	.L729-.L728
.L728:
	.half	3
	.word	.L731-.L730
.L730:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0,0,0,0,0
.L731:
	.byte	5,45,7,0,5,2
	.word	.L194
	.byte	3,176,9,1,5,1,9
	.half	.L228-.L194
	.byte	3,1,0,1,1
.L729:
	.sdecl	'.debug_ranges',debug,cluster('etharp_request')
	.sect	'.debug_ranges'
.L227:
	.word	-1,.L194,0,.L228-.L194,0,0
	.sdecl	'.debug_info',debug,cluster('etharp_cleanup_netif')
	.sect	'.debug_info'
.L229:
	.word	274
	.half	3
	.word	.L230
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L232,.L231
	.byte	2
	.word	.L195
	.byte	3
	.byte	'etharp_cleanup_netif',0,1,175,4,1,1,1,1
	.word	.L168,.L367,.L167
	.byte	4
	.byte	'netif',0,1,175,4,36
	.word	.L317,.L368
	.byte	5
	.word	.L168,.L367
	.byte	6
	.byte	'i',0,1,177,4,7
	.word	.L314,.L369
	.byte	7
	.word	.L55,.L56
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('etharp_cleanup_netif')
	.sect	'.debug_abbrev'
.L230:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('etharp_cleanup_netif')
	.sect	'.debug_line'
.L231:
	.word	.L733-.L732
.L732:
	.half	3
	.word	.L735-.L734
.L734:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0,0,0,0,0
.L735:
	.byte	5,1,7,0,5,2
	.word	.L168
	.byte	3,174,4,1,5,10,9
	.half	.L463-.L168
	.byte	3,4,1,5,18,3,1,1,5,33,9
	.half	.L736-.L463
	.byte	3,127,1,5,30,9
	.half	.L55-.L736
	.byte	3,1,1,5,9,9
	.half	.L737-.L55
	.byte	3,1,1,5,55,7,9
	.half	.L738-.L737
	.byte	1,5,62,9
	.half	.L739-.L738
	.byte	1,5,25,7,9
	.half	.L740-.L739
	.byte	3,1,1,5,35,9
	.half	.L56-.L740
	.byte	3,125,1,5,33,1,5,1,7,9
	.half	.L741-.L56
	.byte	3,6,1,7,9
	.half	.L233-.L741
	.byte	0,1,1
.L733:
	.sdecl	'.debug_ranges',debug,cluster('etharp_cleanup_netif')
	.sect	'.debug_ranges'
.L232:
	.word	-1,.L168,0,.L233-.L168,0,0
	.sdecl	'.debug_info',debug,cluster('etharp_input')
	.sect	'.debug_info'
.L234:
	.word	336
	.half	3
	.word	.L235
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L237,.L236
	.byte	2
	.word	.L195
	.byte	3
	.byte	'etharp_input',0,1,129,5,1,1,1,1
	.word	.L176,.L370,.L175
	.byte	4
	.byte	'p',0,1,129,5,27
	.word	.L339,.L371
	.byte	4
	.byte	'netif',0,1,129,5,44
	.word	.L317,.L372
	.byte	5
	.word	.L176,.L370
	.byte	6
	.byte	'hdr',0,1,131,5,22
	.word	.L373,.L374
	.byte	6
	.byte	'sipaddr',0,1,133,5,14
	.word	.L375,.L376
	.byte	6
	.byte	'dipaddr',0,1,133,5,23
	.word	.L375,.L377
	.byte	6
	.byte	'for_us',0,1,134,5,8
	.word	.L347,.L378
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('etharp_input')
	.sect	'.debug_abbrev'
.L235:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('etharp_input')
	.sect	'.debug_line'
.L236:
	.word	.L743-.L742
.L742:
	.half	3
	.word	.L745-.L744
.L744:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0,0,0,0,0
.L745:
	.byte	5,1,7,0,5,2
	.word	.L176
	.byte	3,128,5,1,5,3,9
	.half	.L489-.L176
	.byte	3,9,1,7,9
	.half	.L746-.L489
	.byte	1,5,31,9
	.half	.L71-.L746
	.byte	3,2,1,5,5,9
	.half	.L495-.L71
	.byte	3,10,1,5,11,9
	.half	.L747-.L495
	.byte	3,121,1,5,23,9
	.half	.L748-.L747
	.byte	1,5,7,9
	.half	.L749-.L748
	.byte	1,5,11,7,9
	.half	.L750-.L749
	.byte	3,1,1,5,19,9
	.half	.L751-.L750
	.byte	1,5,11,7,9
	.half	.L752-.L751
	.byte	3,1,1,5,22,9
	.half	.L753-.L752
	.byte	1,5,11,7,9
	.half	.L754-.L753
	.byte	3,1,1,5,22,9
	.half	.L755-.L754
	.byte	1,5,19,9
	.half	.L756-.L755
	.byte	1,5,5,7,9
	.half	.L73-.L756
	.byte	3,4,1,9
	.half	.L757-.L73
	.byte	3,1,1,9
	.half	.L758-.L757
	.byte	3,2,1,5,3,9
	.half	.L76-.L758
	.byte	3,2,1,9
	.half	.L759-.L76
	.byte	3,11,1,9
	.half	.L494-.L759
	.byte	3,117,1,9
	.half	.L760-.L494
	.byte	3,11,1,9
	.half	.L761-.L760
	.byte	3,1,1,5,7,9
	.half	.L762-.L761
	.byte	3,3,1,5,3,9
	.half	.L763-.L762
	.byte	1,5,12,7,9
	.half	.L764-.L763
	.byte	3,1,1,5,15,1,5,20,9
	.half	.L78-.L764
	.byte	3,3,1,5,27,9
	.half	.L79-.L78
	.byte	3,9,1,5,35,3,127,1,5,27,9
	.half	.L765-.L79
	.byte	3,1,1,5,49,3,127,1,5,34,9
	.half	.L766-.L765
	.byte	3,1,1,5,14,9
	.half	.L497-.L766
	.byte	3,3,1,5,10,9
	.half	.L767-.L497
	.byte	3,2,1,9
	.half	.L768-.L767
	.byte	3,24,1,5,7,9
	.half	.L80-.L768
	.byte	3,111,1,5,54,7,9
	.half	.L769-.L80
	.byte	3,4,1,5,24,9
	.half	.L770-.L769
	.byte	3,1,1,5,36,9
	.half	.L771-.L770
	.byte	1,5,44,9
	.half	.L772-.L771
	.byte	3,126,1,5,58,9
	.half	.L773-.L772
	.byte	1,5,44,9
	.half	.L774-.L773
	.byte	3,1,1,5,20,9
	.half	.L775-.L774
	.byte	3,2,1,5,30,9
	.half	.L499-.L775
	.byte	1,5,7,9
	.half	.L82-.L499
	.byte	3,24,1,5,13,9
	.half	.L77-.L82
	.byte	3,4,1,5,1,9
	.half	.L238-.L77
	.byte	3,1,0,1,1
.L743:
	.sdecl	'.debug_ranges',debug,cluster('etharp_input')
	.sect	'.debug_ranges'
.L237:
	.word	-1,.L176,0,.L238-.L176,0,0
	.sdecl	'.debug_info',debug,cluster('etharp_request_dst')
	.sect	'.debug_info'
.L239:
	.word	295
	.half	3
	.word	.L240
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L242,.L241
	.byte	2
	.word	.L195
	.byte	3
	.byte	'etharp_request_dst',0,1,157,9,1
	.word	.L336
	.byte	1,1
	.word	.L192,.L379,.L191
	.byte	4
	.byte	'netif',0,1,157,9,34
	.word	.L317,.L380
	.byte	4
	.byte	'ipaddr',0,1,157,9,59
	.word	.L319,.L381
	.byte	4
	.byte	'hw_dst_addr',0,1,157,9,90
	.word	.L342,.L382
	.byte	5
	.word	.L192,.L379
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('etharp_request_dst')
	.sect	'.debug_abbrev'
.L240:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('etharp_request_dst')
	.sect	'.debug_line'
.L241:
	.word	.L777-.L776
.L776:
	.half	3
	.word	.L779-.L778
.L778:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0,0,0,0,0
.L779:
	.byte	5,1,7,0,5,2
	.word	.L192
	.byte	3,156,9,1,5,55,9
	.half	.L600-.L192
	.byte	3,3,1,5,79,9
	.half	.L780-.L600
	.byte	1,5,29,9
	.half	.L781-.L780
	.byte	3,1,1,5,21,1,5,52,9
	.half	.L782-.L781
	.byte	3,126,1,5,45,9
	.half	.L601-.L782
	.byte	3,1,1,5,29,9
	.half	.L783-.L601
	.byte	3,1,1,5,1,7,9
	.half	.L243-.L783
	.byte	3,1,0,1,1
.L777:
	.sdecl	'.debug_ranges',debug,cluster('etharp_request_dst')
	.sect	'.debug_ranges'
.L242:
	.word	-1,.L192,0,.L243-.L192,0,0
	.sdecl	'.debug_info',debug,cluster('etharp_raw')
	.sect	'.debug_info'
.L244:
	.word	441
	.half	3
	.word	.L245
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L247,.L246
	.byte	2
	.word	.L195
	.byte	3
	.byte	'etharp_raw',0,1,205,8,1
	.word	.L336
	.byte	1,1
	.word	.L190,.L383,.L189
	.byte	4
	.byte	'netif',0,1,205,8,26
	.word	.L317,.L384
	.byte	4
	.byte	'ethsrc_addr',0,1,205,8,56
	.word	.L342,.L385
	.byte	4
	.byte	'ethdst_addr',0,1,206,8,35
	.word	.L342,.L386
	.byte	4
	.byte	'hwsrc_addr',0,1,207,8,35
	.word	.L342,.L387
	.byte	4
	.byte	'ipsrc_addr',0,1,207,8,65
	.word	.L319,.L388
	.byte	4
	.byte	'hwdst_addr',0,1,208,8,35
	.word	.L342,.L389
	.byte	4
	.byte	'ipdst_addr',0,1,208,8,65
	.word	.L319,.L390
	.byte	4
	.byte	'opcode',0,1,209,8,24
	.word	.L391,.L392
	.byte	5
	.word	.L190,.L383
	.byte	6
	.byte	'p',0,1,211,8,16
	.word	.L339,.L393
	.byte	6
	.byte	'hdr',0,1,213,8,22
	.word	.L373,.L394
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('etharp_raw')
	.sect	'.debug_abbrev'
.L245:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('etharp_raw')
	.sect	'.debug_line'
.L246:
	.word	.L785-.L784
.L784:
	.half	3
	.word	.L787-.L786
.L786:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0,0,0,0,0
.L787:
	.byte	5,1,7,0,5,2
	.word	.L190
	.byte	3,204,8,1,5,3,9
	.half	.L574-.L190
	.byte	3,10,1,7,9
	.half	.L570-.L574
	.byte	1,5,18,9
	.half	.L143-.L570
	.byte	3,3,1,5,29,9
	.half	.L788-.L143
	.byte	1,5,48,9
	.half	.L789-.L788
	.byte	1,5,5,9
	.half	.L580-.L789
	.byte	1,9
	.half	.L582-.L580
	.byte	3,5,1,5,3,9
	.half	.L790-.L582
	.byte	3,125,1,5,5,7,9
	.half	.L791-.L790
	.byte	3,3,1,5,12,9
	.half	.L792-.L791
	.byte	3,1,1,5,5,9
	.half	.L793-.L792
	.byte	3,127,1,5,1,9
	.half	.L794-.L793
	.byte	3,47,1,5,3,7,9
	.half	.L144-.L794
	.byte	3,84,1,5,31,9
	.half	.L146-.L144
	.byte	3,3,1,5,28,9
	.half	.L584-.L146
	.byte	3,2,1,5,15,9
	.half	.L795-.L584
	.byte	1,5,3,9
	.half	.L796-.L795
	.byte	3,2,1,9
	.half	.L147-.L796
	.byte	3,4,1,9
	.half	.L586-.L147
	.byte	3,1,1,9
	.half	.L588-.L586
	.byte	3,3,1,9
	.half	.L590-.L588
	.byte	3,1,1,5,17,9
	.half	.L592-.L590
	.byte	3,2,1,5,15,1,5,16,9
	.half	.L797-.L592
	.byte	3,1,1,5,14,1,5,16,9
	.half	.L798-.L797
	.byte	3,2,1,5,14,1,5,19,9
	.half	.L799-.L798
	.byte	3,1,1,5,17,1,5,57,9
	.half	.L800-.L799
	.byte	3,12,1,5,3,9
	.half	.L594-.L800
	.byte	3,3,1,5,13,9
	.half	.L801-.L594
	.byte	3,2,1,5,3,9
	.half	.L598-.L801
	.byte	3,126,1,5,13,9
	.half	.L802-.L598
	.byte	3,2,1,5,10,9
	.half	.L599-.L802
	.byte	3,4,1,5,1,3,1,1,7,9
	.half	.L248-.L599
	.byte	0,1,1
.L785:
	.sdecl	'.debug_ranges',debug,cluster('etharp_raw')
	.sect	'.debug_ranges'
.L247:
	.word	-1,.L190,0,.L248-.L190,0,0
	.sdecl	'.debug_info',debug,cluster('etharp_free_entry')
	.sect	'.debug_info'
.L249:
	.word	237
	.half	3
	.word	.L250
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L252,.L251
	.byte	2
	.word	.L195
	.byte	3
	.byte	'etharp_free_entry',0,1,168,1,1,1,1
	.word	.L152,.L395,.L151
	.byte	4
	.byte	'i',0,1,168,1,23
	.word	.L314,.L396
	.byte	5
	.word	.L397
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('etharp_free_entry')
	.sect	'.debug_abbrev'
.L250:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('etharp_free_entry')
	.sect	'.debug_line'
.L251:
	.word	.L804-.L803
.L803:
	.half	3
	.word	.L806-.L805
.L805:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0,0,0,0,0
.L806:
	.byte	5,16,7,0,5,2
	.word	.L152
	.byte	3,172,1,1,5,19,9
	.half	.L807-.L152
	.byte	1,5,3,9
	.half	.L808-.L807
	.byte	1,5,5,7,9
	.half	.L809-.L808
	.byte	3,3,1,5,22,9
	.half	.L429-.L809
	.byte	3,1,1,5,20,9
	.half	.L810-.L429
	.byte	1,5,24,9
	.half	.L2-.L810
	.byte	3,3,1,5,22,1,9
	.half	.L811-.L2
	.byte	3,3,1,5,24,9
	.half	.L812-.L811
	.byte	3,1,1,5,22,9
	.half	.L813-.L812
	.byte	1,5,3,9
	.half	.L814-.L813
	.byte	3,1,1,5,26,9
	.half	.L815-.L814
	.byte	3,1,1,5,24,9
	.half	.L816-.L815
	.byte	1,5,1,9
	.half	.L817-.L816
	.byte	3,2,1,7,9
	.half	.L253-.L817
	.byte	0,1,1
.L804:
	.sdecl	'.debug_ranges',debug,cluster('etharp_free_entry')
	.sect	'.debug_ranges'
.L252:
	.word	-1,.L152,0,.L253-.L152,0,0
.L397:
	.word	-1,.L152,0,.L395-.L152,-1,.L154,0,.L293-.L154,-1,.L156,0,.L308-.L156,0,0
	.sdecl	'.debug_info',debug,cluster('etharp_find_entry')
	.sect	'.debug_info'
.L254:
	.word	496
	.half	3
	.word	.L255
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L257,.L256
	.byte	2
	.word	.L195
	.byte	3
	.byte	'etharp_find_entry',0,1,128,2,1
	.word	.L325
	.byte	1,1
	.word	.L160,.L398,.L159
	.byte	4
	.byte	'ipaddr',0,1,128,2,37
	.word	.L319,.L399
	.byte	4
	.byte	'flags',0,1,128,2,50
	.word	.L347,.L400
	.byte	4
	.byte	'netif',0,1,128,2,71
	.word	.L317,.L401
	.byte	5
	.word	.L160,.L398
	.byte	6
	.byte	'old_pending',0,1,130,2,9
	.word	.L325,.L402
	.byte	6
	.byte	'old_stable',0,1,130,2,39
	.word	.L325,.L403
	.byte	6
	.byte	'empty',0,1,131,2,9
	.word	.L325,.L404
	.byte	6
	.byte	'i',0,1,132,2,9
	.word	.L325,.L405
	.byte	6
	.byte	'old_queue',0,1,134,2,9
	.word	.L325,.L406
	.byte	6
	.byte	'age_queue',0,1,136,2,9
	.word	.L407,.L408
	.byte	6
	.byte	'age_pending',0,1,136,2,24
	.word	.L407,.L409
	.byte	6
	.byte	'age_stable',0,1,136,2,41
	.word	.L407,.L410
	.byte	5
	.word	.L14,.L17
	.byte	6
	.byte	'state',0,1,156,2,10
	.word	.L347,.L411
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('etharp_find_entry')
	.sect	'.debug_abbrev'
.L255:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('etharp_find_entry')
	.sect	'.debug_line'
.L256:
	.word	.L819-.L818
.L818:
	.half	3
	.word	.L821-.L820
.L820:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0,0,0,0,0
.L821:
	.byte	5,21,7,0,5,2
	.word	.L160
	.byte	3,129,2,1,5,18,3,26,1,5,19,9
	.half	.L432-.L160
	.byte	3,108,1,5,18,3,20,1,5,50,9
	.half	.L433-.L432
	.byte	3,102,1,5,1,3,126,1,5,15,9
	.half	.L434-.L433
	.byte	3,3,1,5,1,3,125,1,5,19,9
	.half	.L435-.L434
	.byte	3,6,1,5,38,3,21,1,5,36,9
	.half	.L436-.L435
	.byte	3,109,1,5,1,3,120,1,5,52,9
	.half	.L430-.L436
	.byte	3,8,1,5,33,3,19,1,5,10,9
	.half	.L437-.L430
	.byte	1,5,19,9
	.half	.L14-.L437
	.byte	3,3,1,5,30,3,126,1,5,9,9
	.half	.L438-.L14
	.byte	3,2,1,5,45,7,9
	.half	.L822-.L438
	.byte	1,5,13,7,9
	.half	.L823-.L822
	.byte	3,3,1,5,16,1,5,12,9
	.half	.L15-.L823
	.byte	3,1,1,5,11,7,9
	.half	.L824-.L15
	.byte	3,4,1,5,21,7,9
	.half	.L825-.L824
	.byte	1,5,15,9
	.half	.L826-.L825
	.byte	3,2,1,5,56,7,9
	.half	.L827-.L826
	.byte	1,5,41,9
	.half	.L828-.L827
	.byte	1,5,27,7,9
	.half	.L19-.L828
	.byte	3,11,1,5,7,9
	.half	.L829-.L19
	.byte	3,125,1,5,25,7,9
	.half	.L830-.L829
	.byte	3,2,1,5,9,9
	.half	.L831-.L830
	.byte	1,5,11,7,9
	.half	.L832-.L831
	.byte	3,1,1,5,23,7,9
	.half	.L833-.L832
	.byte	3,1,1,9
	.half	.L834-.L833
	.byte	3,1,1,5,11,3,126,1,9
	.half	.L24-.L834
	.byte	3,7,1,5,25,7,9
	.half	.L835-.L24
	.byte	3,1,1,9
	.half	.L836-.L835
	.byte	3,1,1,5,11,3,123,1,9
	.half	.L23-.L836
	.byte	3,16,1,5,24,7,9
	.half	.L837-.L23
	.byte	3,1,1,9
	.half	.L838-.L837
	.byte	3,1,1,5,35,9
	.half	.L17-.L838
	.byte	3,82,1,5,33,1,5,7,7,9
	.half	.L839-.L17
	.byte	3,55,1,5,18,7,9
	.half	.L840-.L839
	.byte	3,2,1,5,8,9
	.half	.L841-.L840
	.byte	1,5,69,7,9
	.half	.L842-.L841
	.byte	1,5,3,7,9
	.half	.L31-.L842
	.byte	3,15,1,5,7,7,9
	.half	.L843-.L31
	.byte	3,1,1,5,5,3,1,1,9
	.half	.L33-.L843
	.byte	3,3,1,5,7,7,9
	.half	.L844-.L33
	.byte	3,5,1,5,9,9
	.half	.L845-.L844
	.byte	3,125,1,5,7,9
	.half	.L846-.L845
	.byte	3,3,1,5,68,9
	.half	.L440-.L846
	.byte	1,5,12,9
	.half	.L35-.L440
	.byte	3,2,1,5,9,7,9
	.half	.L847-.L35
	.byte	3,2,1,5,7,3,1,1,5,12,9
	.half	.L38-.L847
	.byte	3,2,1,5,9,7,9
	.half	.L848-.L38
	.byte	3,2,1,5,7,3,1,1,5,14,9
	.half	.L30-.L848
	.byte	3,4,1,5,1,3,22,1,5,23,7,9
	.half	.L36-.L30
	.byte	3,111,1,5,3,9
	.half	.L34-.L36
	.byte	3,4,1,9
	.half	.L43-.L34
	.byte	3,4,1,5,5,7,9
	.half	.L849-.L43
	.byte	3,2,1,5,24,9
	.half	.L44-.L849
	.byte	3,2,1,5,22,1,9
	.half	.L850-.L44
	.byte	3,2,1,5,3,9
	.half	.L21-.L850
	.byte	3,2,1,5,1,3,1,1,7,9
	.half	.L258-.L21
	.byte	0,1,1
.L819:
	.sdecl	'.debug_ranges',debug,cluster('etharp_find_entry')
	.sect	'.debug_ranges'
.L257:
	.word	-1,.L160,0,.L258-.L160,0,0
	.sdecl	'.debug_info',debug,cluster('etharp_update_arp_entry')
	.sect	'.debug_info'
.L259:
	.word	332
	.half	3
	.word	.L260
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L262,.L261
	.byte	2
	.word	.L195
	.byte	3
	.byte	'etharp_update_arp_entry',0,1,166,3,1
	.word	.L336
	.byte	1,1
	.word	.L162,.L412,.L161
	.byte	4
	.byte	'netif',0,1,166,3,39
	.word	.L317,.L413
	.byte	4
	.byte	'ipaddr',0,1,166,3,64
	.word	.L319,.L414
	.byte	4
	.byte	'ethaddr',0,1,166,3,89
	.word	.L354,.L415
	.byte	4
	.byte	'flags',0,1,166,3,103
	.word	.L347,.L416
	.byte	5
	.word	.L417
	.byte	6
	.byte	'i',0,1,168,3,9
	.word	.L325,.L418
	.byte	7
	.word	.L419
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('etharp_update_arp_entry')
	.sect	'.debug_abbrev'
.L260:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('etharp_update_arp_entry')
	.sect	'.debug_line'
.L261:
	.word	.L852-.L851
.L851:
	.half	3
	.word	.L854-.L853
.L853:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0,0,0,0,0
.L854:
	.byte	5,1,7,0,5,2
	.word	.L162
	.byte	3,165,3,1,5,3,9
	.half	.L443-.L162
	.byte	3,3,1,5,1,9
	.half	.L444-.L443
	.byte	3,125,1,5,3,9
	.half	.L441-.L444
	.byte	3,3,1,7,9
	.half	.L855-.L441
	.byte	1,5,7,9
	.half	.L46-.L855
	.byte	3,6,1,9
	.half	.L856-.L46
	.byte	3,1,1,9
	.half	.L857-.L856
	.byte	3,1,1,5,12,9
	.half	.L47-.L857
	.byte	3,2,1,5,1,3,56,1,5,40,7,9
	.half	.L49-.L47
	.byte	3,75,1,5,3,9
	.half	.L453-.L49
	.byte	3,2,1,5,12,7,9
	.half	.L858-.L453
	.byte	3,1,1,5,1,3,50,1,5,14,7,9
	.half	.L51-.L858
	.byte	3,92,1,5,26,9
	.half	.L455-.L51
	.byte	1,5,24,1,5,22,9
	.half	.L859-.L455
	.byte	3,4,1,5,3,9
	.half	.L860-.L859
	.byte	3,6,1,5,24,9
	.half	.L456-.L860
	.byte	3,2,1,5,22,1,5,19,9
	.half	.L861-.L456
	.byte	3,14,1,5,3,9
	.half	.L457-.L861
	.byte	1,5,22,7,9
	.half	.L420-.L457
	.byte	3,2,1,5,20,9
	.half	.L862-.L420
	.byte	1,5,56,9
	.half	.L863-.L862
	.byte	3,3,1,5,76,9
	.half	.L460-.L863
	.byte	1,5,34,9
	.half	.L461-.L460
	.byte	3,124,1,5,10,9
	.half	.L53-.L461
	.byte	3,8,1,5,1,3,1,1,7,9
	.half	.L263-.L53
	.byte	0,1,1
.L852:
	.sdecl	'.debug_ranges',debug,cluster('etharp_update_arp_entry')
	.sect	'.debug_ranges'
.L262:
	.word	-1,.L162,0,.L263-.L162,0,0
.L417:
	.word	-1,.L162,0,.L412-.L162,-1,.L166,0,.L283-.L166,0,0
.L419:
	.word	-1,.L162,.L420-.L162,.L53-.L162,-1,.L164,0,.L298-.L164,0,0
	.sdecl	'.debug_info',debug,cluster('etharp_output_to_arp_index')
	.sect	'.debug_info'
.L264:
	.word	294
	.half	3
	.word	.L265
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L267,.L266
	.byte	2
	.word	.L195
	.byte	3
	.byte	'etharp_output_to_arp_index',0,1,236,5,1
	.word	.L336
	.byte	1,1
	.word	.L178,.L421,.L177
	.byte	4
	.byte	'netif',0,1,236,5,42
	.word	.L317,.L422
	.byte	4
	.byte	'q',0,1,236,5,62
	.word	.L339,.L423
	.byte	4
	.byte	'arp_idx',0,1,236,5,82
	.word	.L347,.L424
	.byte	5
	.word	.L178,.L421
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('etharp_output_to_arp_index')
	.sect	'.debug_abbrev'
.L265:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('etharp_output_to_arp_index')
	.sect	'.debug_line'
.L266:
	.word	.L865-.L864
.L864:
	.half	3
	.word	.L867-.L866
.L866:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0,0,0,0,0
.L867:
	.byte	5,1,7,0,5,2
	.word	.L178
	.byte	3,235,5,1,5,3,9
	.half	.L504-.L178
	.byte	3,2,1,5,25,9
	.half	.L85-.L504
	.byte	3,5,1,5,3,9
	.half	.L868-.L85
	.byte	1,5,27,7,9
	.half	.L869-.L868
	.byte	3,1,1,5,37,9
	.half	.L870-.L869
	.byte	1,5,5,9
	.half	.L871-.L870
	.byte	1,5,52,7,9
	.half	.L872-.L871
	.byte	3,2,1,5,7,9
	.half	.L508-.L872
	.byte	1,7,9
	.half	.L873-.L508
	.byte	1,5,44,9
	.half	.L87-.L873
	.byte	3,3,1,5,12,9
	.half	.L874-.L87
	.byte	1,5,56,7,9
	.half	.L875-.L874
	.byte	3,2,1,5,84,9
	.half	.L876-.L875
	.byte	1,5,7,9
	.half	.L510-.L876
	.byte	1,5,36,7,9
	.half	.L89-.L510
	.byte	3,1,1,5,34,1,5,61,9
	.half	.L86-.L89
	.byte	3,5,1,5,91,9
	.half	.L877-.L86
	.byte	1,5,101,9
	.half	.L878-.L877
	.byte	1,5,1,9
	.half	.L268-.L878
	.byte	3,1,0,1,1
.L865:
	.sdecl	'.debug_ranges',debug,cluster('etharp_output_to_arp_index')
	.sect	'.debug_ranges'
.L267:
	.word	-1,.L178,0,.L268-.L178,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_50')
	.sect	'.debug_info'
.L269:
	.word	209
	.half	3
	.word	.L270
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L272,.L271
	.byte	2
	.word	.L195
	.byte	3
	.byte	'.cocofun_50',0,1,165,7,1,1
	.word	.L188,.L273,.L187
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_50')
	.sect	'.debug_abbrev'
.L270:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_50')
	.sect	'.debug_line'
.L271:
	.word	.L880-.L879
.L879:
	.half	3
	.word	.L882-.L881
.L881:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0,0,0,0,0
.L882:
	.byte	5,7,7,0,5,2
	.word	.L188
	.byte	3,240,7,1,9
	.half	.L273-.L188
	.byte	0,1,1,5,7,0,5,2
	.word	.L188
	.byte	3,236,2,1,9
	.half	.L883-.L188
	.byte	3,132,5,1,7,9
	.half	.L273-.L883
	.byte	0,1,1,5,3,0,5,2
	.word	.L188
	.byte	3,131,3,1,5,7,9
	.half	.L883-.L188
	.byte	3,237,4,1,7,9
	.half	.L273-.L883
	.byte	0,1,1,5,3,0,5,2
	.word	.L188
	.byte	3,168,3,1,5,7,9
	.half	.L883-.L188
	.byte	3,200,4,1,7,9
	.half	.L273-.L883
	.byte	0,1,1,5,3,0,5,2
	.word	.L188
	.byte	3,203,4,1,5,7,9
	.half	.L883-.L188
	.byte	3,165,3,1,7,9
	.half	.L273-.L883
	.byte	0,1,1,5,3,0,5,2
	.word	.L188
	.byte	3,229,4,1,5,7,9
	.half	.L883-.L188
	.byte	3,139,3,1,7,9
	.half	.L273-.L883
	.byte	0,1,1,5,3,0,5,2
	.word	.L188
	.byte	3,230,4,1,5,7,9
	.half	.L883-.L188
	.byte	3,138,3,1,7,9
	.half	.L273-.L883
	.byte	0,1,1,5,3,0,5,2
	.word	.L188
	.byte	3,231,4,1,5,7,9
	.half	.L883-.L188
	.byte	3,137,3,1,7,9
	.half	.L273-.L883
	.byte	0,1,1,5,3,0,5,2
	.word	.L188
	.byte	3,137,5,1,5,7,9
	.half	.L883-.L188
	.byte	3,231,2,1,7,9
	.half	.L273-.L883
	.byte	0,1,1,5,3,0,5,2
	.word	.L188
	.byte	3,237,5,1,5,7,9
	.half	.L883-.L188
	.byte	3,131,2,1,7,9
	.half	.L273-.L883
	.byte	0,1,1,5,3,0,5,2
	.word	.L188
	.byte	3,157,6,1,5,7,9
	.half	.L883-.L188
	.byte	3,211,1,1,7,9
	.half	.L273-.L883
	.byte	0,1,1,5,3,0,5,2
	.word	.L188
	.byte	3,158,6,1,5,7,9
	.half	.L883-.L188
	.byte	3,210,1,1,7,9
	.half	.L273-.L883
	.byte	0,1,1,5,3,0,5,2
	.word	.L188
	.byte	3,159,6,1,5,7,9
	.half	.L883-.L188
	.byte	3,209,1,1,7,9
	.half	.L273-.L883
	.byte	0,1,1,5,3,0,5,2
	.word	.L188
	.byte	3,204,7,1,5,7,9
	.half	.L883-.L188
	.byte	3,36,1,7,9
	.half	.L273-.L883
	.byte	0,1,1,5,3,0,5,2
	.word	.L188
	.byte	3,214,8,1,5,7,9
	.half	.L883-.L188
	.byte	3,154,127,1,7,9
	.half	.L273-.L883
	.byte	0,1,1,5,3,0,5,2
	.word	.L188
	.byte	3,225,8,1,5,7,9
	.half	.L883-.L188
	.byte	3,143,127,1,7,9
	.half	.L273-.L883
	.byte	0,1,1,5,3,0,5,2
	.word	.L188
	.byte	3,232,8,1,5,7,9
	.half	.L883-.L188
	.byte	3,136,127,1,7,9
	.half	.L273-.L883
	.byte	0,1,1
.L880:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_50')
	.sect	'.debug_ranges'
.L272:
	.word	-1,.L188,0,.L273-.L188,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_51')
	.sect	'.debug_info'
.L274:
	.word	209
	.half	3
	.word	.L275
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L277,.L276
	.byte	2
	.word	.L195
	.byte	3
	.byte	'.cocofun_51',0,1,165,7,1,1
	.word	.L186,.L278,.L185
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_51')
	.sect	'.debug_abbrev'
.L275:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_51')
	.sect	'.debug_line'
.L276:
	.word	.L885-.L884
.L884:
	.half	3
	.word	.L887-.L886
.L886:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0,0,0,0,0
.L887:
	.byte	5,7,7,0,5,2
	.word	.L186
	.byte	3,240,7,1,9
	.half	.L278-.L186
	.byte	0,1,1,5,7,0,5,2
	.word	.L186
	.byte	3,236,2,1,9
	.half	.L888-.L186
	.byte	3,132,5,1,7,9
	.half	.L278-.L888
	.byte	0,1,1,5,3,0,5,2
	.word	.L186
	.byte	3,168,3,1,5,7,9
	.half	.L888-.L186
	.byte	3,200,4,1,7,9
	.half	.L278-.L888
	.byte	0,1,1,5,3,0,5,2
	.word	.L186
	.byte	3,203,4,1,5,7,9
	.half	.L888-.L186
	.byte	3,165,3,1,7,9
	.half	.L278-.L888
	.byte	0,1,1,5,3,0,5,2
	.word	.L186
	.byte	3,229,4,1,5,7,9
	.half	.L888-.L186
	.byte	3,139,3,1,7,9
	.half	.L278-.L888
	.byte	0,1,1,5,3,0,5,2
	.word	.L186
	.byte	3,230,4,1,5,7,9
	.half	.L888-.L186
	.byte	3,138,3,1,7,9
	.half	.L278-.L888
	.byte	0,1,1,5,3,0,5,2
	.word	.L186
	.byte	3,231,4,1,5,7,9
	.half	.L888-.L186
	.byte	3,137,3,1,7,9
	.half	.L278-.L888
	.byte	0,1,1,5,3,0,5,2
	.word	.L186
	.byte	3,137,5,1,5,7,9
	.half	.L888-.L186
	.byte	3,231,2,1,7,9
	.half	.L278-.L888
	.byte	0,1,1,5,3,0,5,2
	.word	.L186
	.byte	3,237,5,1,5,7,9
	.half	.L888-.L186
	.byte	3,131,2,1,7,9
	.half	.L278-.L888
	.byte	0,1,1,5,3,0,5,2
	.word	.L186
	.byte	3,157,6,1,5,7,9
	.half	.L888-.L186
	.byte	3,211,1,1,7,9
	.half	.L278-.L888
	.byte	0,1,1,5,3,0,5,2
	.word	.L186
	.byte	3,158,6,1,5,7,9
	.half	.L888-.L186
	.byte	3,210,1,1,7,9
	.half	.L278-.L888
	.byte	0,1,1,5,3,0,5,2
	.word	.L186
	.byte	3,159,6,1,5,7,9
	.half	.L888-.L186
	.byte	3,209,1,1,7,9
	.half	.L278-.L888
	.byte	0,1,1,5,3,0,5,2
	.word	.L186
	.byte	3,204,7,1,5,7,9
	.half	.L888-.L186
	.byte	3,36,1,7,9
	.half	.L278-.L888
	.byte	0,1,1,5,3,0,5,2
	.word	.L186
	.byte	3,214,8,1,5,7,9
	.half	.L888-.L186
	.byte	3,154,127,1,7,9
	.half	.L278-.L888
	.byte	0,1,1,5,3,0,5,2
	.word	.L186
	.byte	3,225,8,1,5,7,9
	.half	.L888-.L186
	.byte	3,143,127,1,7,9
	.half	.L278-.L888
	.byte	0,1,1
.L885:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_51')
	.sect	'.debug_ranges'
.L277:
	.word	-1,.L186,0,.L278-.L186,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_52')
	.sect	'.debug_info'
.L279:
	.word	209
	.half	3
	.word	.L280
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L282,.L281
	.byte	2
	.word	.L195
	.byte	3
	.byte	'.cocofun_52',0,1,166,3,1,1
	.word	.L166,.L283,.L165
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_52')
	.sect	'.debug_abbrev'
.L280:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_52')
	.sect	'.debug_line'
.L281:
	.word	.L890-.L889
.L889:
	.half	3
	.word	.L892-.L891
.L891:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0,0,0,0,0
.L892:
	.byte	5,14,7,0,5,2
	.word	.L166
	.byte	3,198,3,1,5,5,1,5,14,9
	.half	.L893-.L166
	.byte	1,9
	.half	.L283-.L893
	.byte	0,1,1,5,29,0,5,2
	.word	.L166
	.byte	3,209,4,1,5,5,3,245,126,1,5,29,9
	.half	.L893-.L166
	.byte	3,139,1,1,5,14,9
	.half	.L894-.L893
	.byte	3,245,126,1,7,9
	.half	.L283-.L894
	.byte	0,1,1
.L890:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_52')
	.sect	'.debug_ranges'
.L282:
	.word	-1,.L166,0,.L283-.L166,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_53')
	.sect	'.debug_info'
.L284:
	.word	209
	.half	3
	.word	.L285
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L287,.L286
	.byte	2
	.word	.L195
	.byte	3
	.byte	'.cocofun_53',0,1,165,7,1,1
	.word	.L184,.L288,.L183
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_53')
	.sect	'.debug_abbrev'
.L285:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_53')
	.sect	'.debug_line'
.L286:
	.word	.L896-.L895
.L895:
	.half	3
	.word	.L898-.L897
.L897:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0,0,0,0,0
.L898:
	.byte	5,7,7,0,5,2
	.word	.L184
	.byte	3,188,7,1,9
	.half	.L288-.L184
	.byte	0,1,1,5,7,0,5,2
	.word	.L184
	.byte	3,180,8,1,9
	.half	.L542-.L184
	.byte	3,136,127,1,7,9
	.half	.L288-.L542
	.byte	0,1,1
.L896:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_53')
	.sect	'.debug_ranges'
.L287:
	.word	-1,.L184,0,.L288-.L184,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_54')
	.sect	'.debug_info'
.L289:
	.word	209
	.half	3
	.word	.L290
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L292,.L291
	.byte	2
	.word	.L195
	.byte	3
	.byte	'.cocofun_54',0,1,168,1,1,1
	.word	.L154,.L293,.L153
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_54')
	.sect	'.debug_abbrev'
.L290:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_54')
	.sect	'.debug_line'
.L291:
	.word	.L900-.L899
.L899:
	.half	3
	.word	.L902-.L901
.L901:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0,0,0,0,0
.L902:
	.byte	5,16,7,0,5,2
	.word	.L154
	.byte	3,172,1,1,5,7,1,9
	.half	.L293-.L154
	.byte	0,1,1,5,3,0,5,2
	.word	.L154
	.byte	3,237,5,1,5,7,3,191,123,1,9
	.half	.L293-.L154
	.byte	0,1,1
.L900:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_54')
	.sect	'.debug_ranges'
.L292:
	.word	-1,.L154,0,.L293-.L154,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_55')
	.sect	'.debug_info'
.L294:
	.word	209
	.half	3
	.word	.L295
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L297,.L296
	.byte	2
	.word	.L195
	.byte	3
	.byte	'.cocofun_55',0,1,166,3,1,1
	.word	.L164,.L298,.L163
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_55')
	.sect	'.debug_abbrev'
.L295:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_55')
	.sect	'.debug_line'
.L296:
	.word	.L904-.L903
.L903:
	.half	3
	.word	.L906-.L905
.L905:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0,0,0,0,0
.L906:
	.byte	5,56,7,0,5,2
	.word	.L164
	.byte	3,229,3,1,5,76,9
	.half	.L907-.L164
	.byte	1,9
	.half	.L298-.L907
	.byte	0,1,1,5,61,0,5,2
	.word	.L164
	.byte	3,255,6,1,5,78,9
	.half	.L907-.L164
	.byte	1,5,76,9
	.half	.L534-.L907
	.byte	3,230,124,1,7,9
	.half	.L298-.L534
	.byte	0,1,1
.L904:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_55')
	.sect	'.debug_ranges'
.L297:
	.word	-1,.L164,0,.L298-.L164,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_56')
	.sect	'.debug_info'
.L299:
	.word	209
	.half	3
	.word	.L300
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L302,.L301
	.byte	2
	.word	.L195
	.byte	3
	.byte	'.cocofun_56',0,1,228,4,1,1
	.word	.L174,.L303,.L173
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_56')
	.sect	'.debug_abbrev'
.L300:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_56')
	.sect	'.debug_line'
.L301:
	.word	.L909-.L908
.L908:
	.half	3
	.word	.L911-.L910
.L910:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0,0,0,0,0
.L911:
	.byte	5,3,7,0,5,2
	.word	.L174
	.byte	3,230,4,1,9
	.half	.L303-.L174
	.byte	0,1,1,5,3,0,5,2
	.word	.L174
	.byte	3,137,5,1,9
	.half	.L912-.L174
	.byte	3,93,1,7,9
	.half	.L303-.L912
	.byte	0,1,1,5,3,0,5,2
	.word	.L174
	.byte	3,214,8,1,9
	.half	.L912-.L174
	.byte	3,144,124,1,7,9
	.half	.L303-.L912
	.byte	0,1,1
.L909:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_56')
	.sect	'.debug_ranges'
.L302:
	.word	-1,.L174,0,.L303-.L174,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_57')
	.sect	'.debug_info'
.L304:
	.word	209
	.half	3
	.word	.L305
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L307,.L306
	.byte	2
	.word	.L195
	.byte	3
	.byte	'.cocofun_57',0,1,168,1,1,1
	.word	.L156,.L308,.L155
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_57')
	.sect	'.debug_abbrev'
.L305:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_57')
	.sect	'.debug_line'
.L306:
	.word	.L914-.L913
.L913:
	.half	3
	.word	.L916-.L915
.L915:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0,0,0,0,0
.L916:
	.byte	5,7,7,0,5,2
	.word	.L156
	.byte	3,172,1,1,9
	.half	.L308-.L156
	.byte	0,1,1,5,3,0,5,2
	.word	.L156
	.byte	3,237,5,1,5,7,9
	.half	.L917-.L156
	.byte	3,191,123,1,7,9
	.half	.L308-.L917
	.byte	0,1,1,5,18,0,5,2
	.word	.L156
	.byte	3,203,1,1,5,7,9
	.half	.L917-.L156
	.byte	3,97,1,7,9
	.half	.L308-.L917
	.byte	0,1,1,5,5,0,5,2
	.word	.L156
	.byte	3,198,3,1,5,7,9
	.half	.L917-.L156
	.byte	3,230,125,1,7,9
	.half	.L308-.L917
	.byte	0,1,1,5,20,0,5,2
	.word	.L156
	.byte	3,209,4,1,5,7,9
	.half	.L917-.L156
	.byte	3,219,124,1,7,9
	.half	.L308-.L917
	.byte	0,1,1,5,18,0,5,2
	.word	.L156
	.byte	3,179,4,1,5,7,9
	.half	.L917-.L156
	.byte	3,249,124,1,7,9
	.half	.L308-.L917
	.byte	0,1,1,5,32,0,5,2
	.word	.L156
	.byte	3,233,4,1,5,7,9
	.half	.L917-.L156
	.byte	3,195,124,1,7,9
	.half	.L308-.L917
	.byte	0,1,1
.L914:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_57')
	.sect	'.debug_ranges'
.L307:
	.word	-1,.L156,0,.L308-.L156,0,0
	.sdecl	'.debug_info',debug,cluster('arp_table')
	.sect	'.debug_info'
.L309:
	.word	195
	.half	3
	.word	.L310
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1,2
	.word	.L195
	.byte	3
	.byte	'arp_table',0,10,105,28
	.word	.L425
	.byte	5,3
	.word	arp_table
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('arp_table')
	.sect	'.debug_abbrev'
.L310:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('etharp_cached_entry')
	.sect	'.debug_info'
.L311:
	.word	205
	.half	3
	.word	.L312
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\etharp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1,2
	.word	.L195
	.byte	3
	.byte	'etharp_cached_entry',0,10,108,25
	.word	.L347
	.byte	5,3
	.word	etharp_cached_entry
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('etharp_cached_entry')
	.sect	'.debug_abbrev'
.L312:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_50')
	.sect	'.debug_loc'
.L187:
	.word	-1,.L188,0,.L273-.L188
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_51')
	.sect	'.debug_loc'
.L185:
	.word	-1,.L186,0,.L278-.L186
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_52')
	.sect	'.debug_loc'
.L165:
	.word	-1,.L166,0,.L283-.L166
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_53')
	.sect	'.debug_loc'
.L183:
	.word	-1,.L184,0,.L288-.L184
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_54')
	.sect	'.debug_loc'
.L153:
	.word	-1,.L154,0,.L293-.L154
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_55')
	.sect	'.debug_loc'
.L163:
	.word	-1,.L164,0,.L298-.L164
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_56')
	.sect	'.debug_loc'
.L173:
	.word	-1,.L174,0,.L303-.L174
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_57')
	.sect	'.debug_loc'
.L155:
	.word	-1,.L156,0,.L308-.L156
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('etharp_cleanup_netif')
	.sect	'.debug_loc'
.L167:
	.word	-1,.L168,0,.L367-.L168
	.half	2
	.byte	138,0
	.word	0,0
.L369:
	.word	-1,.L168,.L427-.L168,.L308-.L168
	.half	1
	.byte	88
	.word	.L463-.L168,.L367-.L168
	.half	1
	.byte	88
	.word	0,0
.L368:
	.word	-1,.L168,.L427-.L168,.L308-.L168
	.half	1
	.byte	108
	.word	.L427-.L168,.L308-.L168
	.half	1
	.byte	100
	.word	.L463-.L168,.L367-.L168
	.half	1
	.byte	108
	.word	0,.L55-.L168
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('etharp_find_addr')
	.sect	'.debug_loc'
.L322:
	.word	-1,.L170,0,.L465-.L170
	.half	1
	.byte	102
	.word	.L468-.L170,.L465-.L170
	.half	1
	.byte	110
	.word	.L186-.L170,.L278-.L170
	.half	1
	.byte	102
	.word	.L186-.L170,.L278-.L170
	.half	1
	.byte	110
	.word	.L188-.L170,.L273-.L170
	.half	1
	.byte	102
	.word	.L188-.L170,.L273-.L170
	.half	1
	.byte	110
	.word	.L470-.L170,.L59-.L170
	.half	1
	.byte	102
	.word	.L156-.L170,.L308-.L170
	.half	1
	.byte	110
	.word	.L166-.L170,.L283-.L170
	.half	1
	.byte	110
	.word	.L470-.L170,.L316-.L170
	.half	1
	.byte	110
	.word	0,0
.L169:
	.word	-1,.L170,0,.L464-.L170
	.half	2
	.byte	138,0
	.word	.L464-.L170,.L61-.L170
	.half	2
	.byte	138,16
	.word	.L61-.L170,.L61-.L170
	.half	2
	.byte	138,0
	.word	.L61-.L170,.L316-.L170
	.half	2
	.byte	138,16
	.word	.L316-.L170,.L316-.L170
	.half	2
	.byte	138,0
	.word	0,0
.L326:
	.word	-1,.L170,.L156-.L170,.L308-.L170
	.half	1
	.byte	82
	.word	.L166-.L170,.L283-.L170
	.half	1
	.byte	82
	.word	.L473-.L170,.L316-.L170
	.half	1
	.byte	82
	.word	0,0
.L324:
	.word	-1,.L170,0,.L465-.L170
	.half	1
	.byte	103
	.word	.L469-.L170,.L465-.L170
	.half	2
	.byte	145,124
	.word	.L186-.L170,.L278-.L170
	.half	1
	.byte	103
	.word	.L186-.L170,.L278-.L170
	.half	2
	.byte	145,124
	.word	.L188-.L170,.L273-.L170
	.half	1
	.byte	103
	.word	.L188-.L170,.L273-.L170
	.half	2
	.byte	145,124
	.word	.L470-.L170,.L59-.L170
	.half	1
	.byte	103
	.word	.L156-.L170,.L308-.L170
	.half	2
	.byte	145,124
	.word	.L166-.L170,.L283-.L170
	.half	2
	.byte	145,124
	.word	.L470-.L170,.L316-.L170
	.half	2
	.byte	145,124
	.word	.L475-.L170,.L60-.L170
	.half	1
	.byte	98
	.word	0,0
.L320:
	.word	-1,.L170,0,.L465-.L170
	.half	1
	.byte	101
	.word	.L467-.L170,.L465-.L170
	.half	1
	.byte	109
	.word	.L186-.L170,.L278-.L170
	.half	1
	.byte	101
	.word	.L186-.L170,.L278-.L170
	.half	1
	.byte	109
	.word	.L188-.L170,.L273-.L170
	.half	1
	.byte	101
	.word	.L188-.L170,.L273-.L170
	.half	1
	.byte	109
	.word	.L470-.L170,.L59-.L170
	.half	1
	.byte	101
	.word	.L472-.L170,.L473-.L170
	.half	1
	.byte	100
	.word	.L156-.L170,.L308-.L170
	.half	1
	.byte	109
	.word	.L166-.L170,.L283-.L170
	.half	1
	.byte	109
	.word	.L470-.L170,.L316-.L170
	.half	1
	.byte	109
	.word	0,0
.L318:
	.word	-1,.L170,0,.L465-.L170
	.half	1
	.byte	100
	.word	.L466-.L170,.L465-.L170
	.half	1
	.byte	108
	.word	.L186-.L170,.L278-.L170
	.half	1
	.byte	108
	.word	.L186-.L170,.L278-.L170
	.half	1
	.byte	100
	.word	.L470-.L170,.L471-.L170
	.half	1
	.byte	100
	.word	.L188-.L170,.L273-.L170
	.half	1
	.byte	108
	.word	.L188-.L170,.L449-.L170
	.half	1
	.byte	100
	.word	.L474-.L170,.L473-.L170
	.half	1
	.byte	101
	.word	.L156-.L170,.L308-.L170
	.half	1
	.byte	108
	.word	.L166-.L170,.L283-.L170
	.half	1
	.byte	108
	.word	.L470-.L170,.L316-.L170
	.half	1
	.byte	108
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('etharp_find_entry')
	.sect	'.debug_loc'
.L409:
	.word	-1,.L160,.L430-.L160,.L431-.L160
	.half	1
	.byte	81
	.word	.L186-.L160,.L278-.L160
	.half	1
	.byte	81
	.word	.L188-.L160,.L273-.L160
	.half	1
	.byte	81
	.word	.L439-.L160,.L440-.L160
	.half	1
	.byte	81
	.word	.L35-.L160,.L36-.L160
	.half	1
	.byte	81
	.word	0,0
.L408:
	.word	-1,.L160,.L433-.L160,.L431-.L160
	.half	5
	.byte	144,32,157,32,0
	.word	.L186-.L160,.L278-.L160
	.half	5
	.byte	144,32,157,32,0
	.word	.L188-.L160,.L273-.L160
	.half	5
	.byte	144,32,157,32,0
	.word	.L439-.L160,.L440-.L160
	.half	5
	.byte	144,32,157,32,0
	.word	.L35-.L160,.L36-.L160
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L410:
	.word	-1,.L160,.L437-.L160,.L431-.L160
	.half	1
	.byte	82
	.word	.L186-.L160,.L278-.L160
	.half	1
	.byte	82
	.word	.L188-.L160,.L273-.L160
	.half	1
	.byte	82
	.word	.L439-.L160,.L440-.L160
	.half	1
	.byte	82
	.word	.L35-.L160,.L36-.L160
	.half	1
	.byte	82
	.word	0,0
.L404:
	.word	-1,.L160,.L435-.L160,.L431-.L160
	.half	1
	.byte	89
	.word	.L186-.L160,.L278-.L160
	.half	1
	.byte	89
	.word	.L188-.L160,.L273-.L160
	.half	1
	.byte	89
	.word	.L439-.L160,.L398-.L160
	.half	1
	.byte	89
	.word	0,0
.L159:
	.word	-1,.L160,0,.L430-.L160
	.half	2
	.byte	138,0
	.word	.L430-.L160,.L41-.L160
	.half	2
	.byte	138,16
	.word	.L41-.L160,.L41-.L160
	.half	2
	.byte	138,0
	.word	.L41-.L160,.L398-.L160
	.half	2
	.byte	138,16
	.word	.L398-.L160,.L398-.L160
	.half	2
	.byte	138,0
	.word	0,0
.L400:
	.word	-1,.L160,0,.L431-.L160
	.half	1
	.byte	84
	.word	.L186-.L160,.L278-.L160
	.half	1
	.byte	84
	.word	.L188-.L160,.L273-.L160
	.half	1
	.byte	84
	.word	.L439-.L160,.L440-.L160
	.half	1
	.byte	84
	.word	.L35-.L160,.L36-.L160
	.half	1
	.byte	84
	.word	0,0
.L405:
	.word	-1,.L160,.L14-.L160,.L431-.L160
	.half	1
	.byte	88
	.word	.L186-.L160,.L278-.L160
	.half	1
	.byte	88
	.word	.L188-.L160,.L273-.L160
	.half	1
	.byte	88
	.word	.L439-.L160,.L398-.L160
	.half	1
	.byte	88
	.word	0,0
.L399:
	.word	-1,.L160,0,.L14-.L160
	.half	1
	.byte	100
	.word	.L434-.L160,.L431-.L160
	.half	1
	.byte	108
	.word	.L186-.L160,.L278-.L160
	.half	1
	.byte	108
	.word	.L188-.L160,.L273-.L160
	.half	1
	.byte	108
	.word	.L439-.L160,.L398-.L160
	.half	1
	.byte	108
	.word	0,0
.L401:
	.word	-1,.L160,0,.L431-.L160
	.half	1
	.byte	101
	.word	.L435-.L160,.L431-.L160
	.half	1
	.byte	109
	.word	.L186-.L160,.L278-.L160
	.half	1
	.byte	101
	.word	.L186-.L160,.L278-.L160
	.half	1
	.byte	109
	.word	.L188-.L160,.L273-.L160
	.half	1
	.byte	101
	.word	.L188-.L160,.L273-.L160
	.half	1
	.byte	109
	.word	.L439-.L160,.L440-.L160
	.half	1
	.byte	101
	.word	.L35-.L160,.L36-.L160
	.half	1
	.byte	101
	.word	.L439-.L160,.L398-.L160
	.half	1
	.byte	109
	.word	0,0
.L402:
	.word	-1,.L160,.L432-.L160,.L431-.L160
	.half	1
	.byte	86
	.word	.L186-.L160,.L278-.L160
	.half	1
	.byte	86
	.word	.L188-.L160,.L273-.L160
	.half	1
	.byte	86
	.word	.L439-.L160,.L440-.L160
	.half	1
	.byte	86
	.word	.L35-.L160,.L36-.L160
	.half	1
	.byte	86
	.word	0,0
.L406:
	.word	-1,.L160,.L436-.L160,.L431-.L160
	.half	1
	.byte	90
	.word	.L186-.L160,.L278-.L160
	.half	1
	.byte	90
	.word	.L188-.L160,.L273-.L160
	.half	1
	.byte	90
	.word	.L439-.L160,.L398-.L160
	.half	1
	.byte	90
	.word	0,0
.L403:
	.word	-1,.L160,.L434-.L160,.L431-.L160
	.half	1
	.byte	87
	.word	.L186-.L160,.L278-.L160
	.half	1
	.byte	87
	.word	.L188-.L160,.L273-.L160
	.half	1
	.byte	87
	.word	.L439-.L160,.L440-.L160
	.half	1
	.byte	87
	.word	.L35-.L160,.L36-.L160
	.half	1
	.byte	87
	.word	0,0
.L411:
	.word	-1,.L160,.L438-.L160,.L431-.L160
	.half	1
	.byte	83
	.word	.L186-.L160,.L278-.L160
	.half	1
	.byte	83
	.word	.L188-.L160,.L273-.L160
	.half	1
	.byte	83
	.word	.L439-.L160,.L440-.L160
	.half	1
	.byte	83
	.word	.L35-.L160,.L36-.L160
	.half	1
	.byte	83
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('etharp_free_entry')
	.sect	'.debug_loc'
.L151:
	.word	-1,.L152,0,.L395-.L152
	.half	2
	.byte	138,0
	.word	0,0
.L396:
	.word	-1,.L152,.L154-.L152,.L426-.L152
	.half	1
	.byte	84
	.word	.L427-.L152,.L308-.L152
	.half	1
	.byte	84
	.word	.L428-.L152,.L429-.L152
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('etharp_get_entry')
	.sect	'.debug_loc'
.L334:
	.word	-1,.L172,0,.L477-.L172
	.half	1
	.byte	102
	.word	.L480-.L172,.L477-.L172
	.half	1
	.byte	110
	.word	.L186-.L172,.L278-.L172
	.half	1
	.byte	110
	.word	.L186-.L172,.L278-.L172
	.half	1
	.byte	102
	.word	.L188-.L172,.L273-.L172
	.half	1
	.byte	110
	.word	.L188-.L172,.L273-.L172
	.half	1
	.byte	102
	.word	.L481-.L172,.L64-.L172
	.half	1
	.byte	102
	.word	.L174-.L172,.L303-.L172
	.half	1
	.byte	110
	.word	.L481-.L172,.L483-.L172
	.half	1
	.byte	110
	.word	.L484-.L172,.L485-.L172
	.half	1
	.byte	110
	.word	.L427-.L172,.L308-.L172
	.half	1
	.byte	110
	.word	.L486-.L172,.L327-.L172
	.half	1
	.byte	110
	.word	0,0
.L171:
	.word	-1,.L172,0,.L476-.L172
	.half	2
	.byte	138,0
	.word	.L476-.L172,.L68-.L172
	.half	2
	.byte	138,16
	.word	.L68-.L172,.L68-.L172
	.half	2
	.byte	138,0
	.word	.L68-.L172,.L327-.L172
	.half	2
	.byte	138,16
	.word	.L327-.L172,.L327-.L172
	.half	2
	.byte	138,0
	.word	0,0
.L329:
	.word	-1,.L172,0,.L477-.L172
	.half	1
	.byte	84
	.word	.L478-.L172,.L477-.L172
	.half	1
	.byte	88
	.word	.L186-.L172,.L278-.L172
	.half	1
	.byte	88
	.word	.L186-.L172,.L278-.L172
	.half	1
	.byte	84
	.word	.L188-.L172,.L273-.L172
	.half	1
	.byte	88
	.word	.L188-.L172,.L273-.L172
	.half	1
	.byte	84
	.word	.L481-.L172,.L64-.L172
	.half	1
	.byte	84
	.word	.L174-.L172,.L303-.L172
	.half	1
	.byte	88
	.word	.L481-.L172,.L483-.L172
	.half	1
	.byte	88
	.word	.L484-.L172,.L485-.L172
	.half	1
	.byte	88
	.word	.L427-.L172,.L308-.L172
	.half	1
	.byte	88
	.word	.L486-.L172,.L327-.L172
	.half	1
	.byte	88
	.word	0,0
.L331:
	.word	-1,.L172,0,.L477-.L172
	.half	1
	.byte	100
	.word	.L478-.L172,.L477-.L172
	.half	1
	.byte	108
	.word	.L186-.L172,.L278-.L172
	.half	1
	.byte	108
	.word	.L186-.L172,.L278-.L172
	.half	1
	.byte	100
	.word	.L481-.L172,.L482-.L172
	.half	1
	.byte	100
	.word	.L188-.L172,.L273-.L172
	.half	1
	.byte	108
	.word	.L188-.L172,.L449-.L172
	.half	1
	.byte	100
	.word	.L174-.L172,.L303-.L172
	.half	1
	.byte	108
	.word	.L481-.L172,.L483-.L172
	.half	1
	.byte	108
	.word	.L484-.L172,.L485-.L172
	.half	1
	.byte	108
	.word	.L427-.L172,.L308-.L172
	.half	1
	.byte	108
	.word	.L486-.L172,.L327-.L172
	.half	1
	.byte	108
	.word	0,0
.L333:
	.word	-1,.L172,0,.L477-.L172
	.half	1
	.byte	101
	.word	.L479-.L172,.L477-.L172
	.half	1
	.byte	109
	.word	.L186-.L172,.L278-.L172
	.half	1
	.byte	109
	.word	.L186-.L172,.L278-.L172
	.half	1
	.byte	101
	.word	.L188-.L172,.L273-.L172
	.half	1
	.byte	109
	.word	.L188-.L172,.L273-.L172
	.half	1
	.byte	101
	.word	.L481-.L172,.L64-.L172
	.half	1
	.byte	101
	.word	.L174-.L172,.L303-.L172
	.half	1
	.byte	109
	.word	.L481-.L172,.L483-.L172
	.half	1
	.byte	109
	.word	.L484-.L172,.L485-.L172
	.half	1
	.byte	109
	.word	.L427-.L172,.L308-.L172
	.half	1
	.byte	109
	.word	.L486-.L172,.L327-.L172
	.half	1
	.byte	109
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('etharp_input')
	.sect	'.debug_loc'
.L377:
	.word	-1,.L176,.L174-.L176,.L303-.L176
	.half	2
	.byte	145,120
	.word	0,.L488-.L176
	.half	2
	.byte	145,120
	.word	.L186-.L176,.L278-.L176
	.half	2
	.byte	145,120
	.word	.L188-.L176,.L273-.L176
	.half	2
	.byte	145,120
	.word	.L491-.L176,.L370-.L176
	.half	2
	.byte	145,120
	.word	0,0
.L175:
	.word	-1,.L176,0,.L487-.L176
	.half	2
	.byte	138,0
	.word	.L487-.L176,.L71-.L176
	.half	2
	.byte	138,24
	.word	.L71-.L176,.L71-.L176
	.half	2
	.byte	138,0
	.word	.L71-.L176,.L370-.L176
	.half	2
	.byte	138,24
	.word	.L370-.L176,.L370-.L176
	.half	2
	.byte	138,0
	.word	0,0
.L378:
	.word	-1,.L176,.L79-.L176,.L77-.L176
	.half	1
	.byte	88
	.word	0,0
.L374:
	.word	-1,.L176,.L495-.L176,.L370-.L176
	.half	1
	.byte	110
	.word	0,0
.L372:
	.word	-1,.L176,.L174-.L176,.L303-.L176
	.half	1
	.byte	101
	.word	.L174-.L176,.L303-.L176
	.half	1
	.byte	109
	.word	0,.L488-.L176
	.half	1
	.byte	101
	.word	.L489-.L176,.L488-.L176
	.half	1
	.byte	109
	.word	.L186-.L176,.L278-.L176
	.half	1
	.byte	101
	.word	.L186-.L176,.L278-.L176
	.half	1
	.byte	109
	.word	.L188-.L176,.L273-.L176
	.half	1
	.byte	101
	.word	.L188-.L176,.L273-.L176
	.half	1
	.byte	109
	.word	.L491-.L176,.L493-.L176
	.half	1
	.byte	101
	.word	.L491-.L176,.L370-.L176
	.half	1
	.byte	109
	.word	.L496-.L176,.L497-.L176
	.half	1
	.byte	100
	.word	.L498-.L176,.L499-.L176
	.half	1
	.byte	100
	.word	0,0
.L371:
	.word	-1,.L176,.L174-.L176,.L303-.L176
	.half	1
	.byte	100
	.word	.L174-.L176,.L303-.L176
	.half	1
	.byte	108
	.word	0,.L488-.L176
	.half	1
	.byte	100
	.word	.L490-.L176,.L488-.L176
	.half	1
	.byte	108
	.word	.L186-.L176,.L278-.L176
	.half	1
	.byte	100
	.word	.L186-.L176,.L278-.L176
	.half	1
	.byte	108
	.word	.L491-.L176,.L492-.L176
	.half	1
	.byte	100
	.word	.L188-.L176,.L449-.L176
	.half	1
	.byte	100
	.word	.L188-.L176,.L273-.L176
	.half	1
	.byte	108
	.word	.L491-.L176,.L370-.L176
	.half	1
	.byte	108
	.word	.L71-.L176,.L494-.L176
	.half	1
	.byte	100
	.word	.L500-.L176,.L370-.L176
	.half	1
	.byte	100
	.word	0,0
.L376:
	.word	-1,.L176,.L174-.L176,.L303-.L176
	.half	2
	.byte	145,116
	.word	0,.L488-.L176
	.half	2
	.byte	145,116
	.word	.L186-.L176,.L278-.L176
	.half	2
	.byte	145,116
	.word	.L188-.L176,.L273-.L176
	.half	2
	.byte	145,116
	.word	.L491-.L176,.L370-.L176
	.half	2
	.byte	145,116
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('etharp_output')
	.sect	'.debug_loc'
.L343:
	.word	-1,.L180,.L525-.L180,.L96-.L180
	.half	1
	.byte	103
	.word	.L526-.L180,.L98-.L180
	.half	1
	.byte	103
	.word	.L164-.L180,.L298-.L180
	.half	1
	.byte	103
	.word	.L99-.L180,.L337-.L180
	.half	1
	.byte	103
	.word	0,0
.L346:
	.word	0,0
.L179:
	.word	-1,.L180,0,.L513-.L180
	.half	2
	.byte	138,0
	.word	.L513-.L180,.L103-.L180
	.half	2
	.byte	138,24
	.word	.L103-.L180,.L103-.L180
	.half	2
	.byte	138,0
	.word	.L103-.L180,.L112-.L180
	.half	2
	.byte	138,24
	.word	.L112-.L180,.L112-.L180
	.half	2
	.byte	138,0
	.word	.L112-.L180,.L99-.L180
	.half	2
	.byte	138,24
	.word	.L99-.L180,.L99-.L180
	.half	2
	.byte	138,0
	.word	.L99-.L180,.L337-.L180
	.half	2
	.byte	138,24
	.word	.L337-.L180,.L337-.L180
	.half	2
	.byte	138,0
	.word	0,0
.L348:
	.word	-1,.L180,.L109-.L180,.L108-.L180
	.half	1
	.byte	84
	.word	.L528-.L180,.L529-.L180
	.half	1
	.byte	84
	.word	0,0
.L341:
	.word	-1,.L180,0,.L514-.L180
	.half	1
	.byte	102
	.word	.L517-.L180,.L514-.L180
	.half	1
	.byte	110
	.word	.L186-.L180,.L278-.L180
	.half	1
	.byte	110
	.word	.L186-.L180,.L278-.L180
	.half	1
	.byte	102
	.word	.L188-.L180,.L273-.L180
	.half	1
	.byte	110
	.word	.L188-.L180,.L273-.L180
	.half	1
	.byte	102
	.word	.L518-.L180,.L520-.L180
	.half	1
	.byte	110
	.word	.L518-.L180,.L93-.L180
	.half	1
	.byte	102
	.word	.L521-.L180,.L522-.L180
	.half	1
	.byte	110
	.word	.L530-.L180,.L529-.L180
	.half	1
	.byte	101
	.word	.L164-.L180,.L298-.L180
	.half	1
	.byte	110
	.word	.L532-.L180,.L337-.L180
	.half	1
	.byte	110
	.word	0,0
.L345:
	.word	-1,.L180,0,.L514-.L180
	.half	2
	.byte	145,116
	.word	.L186-.L180,.L278-.L180
	.half	2
	.byte	145,116
	.word	.L188-.L180,.L273-.L180
	.half	2
	.byte	145,116
	.word	.L518-.L180,.L520-.L180
	.half	2
	.byte	145,116
	.word	.L521-.L180,.L522-.L180
	.half	2
	.byte	145,116
	.word	.L164-.L180,.L298-.L180
	.half	2
	.byte	145,116
	.word	.L532-.L180,.L337-.L180
	.half	2
	.byte	145,116
	.word	0,0
.L338:
	.word	-1,.L180,0,.L514-.L180
	.half	1
	.byte	100
	.word	.L515-.L180,.L514-.L180
	.half	1
	.byte	108
	.word	.L186-.L180,.L278-.L180
	.half	1
	.byte	108
	.word	.L186-.L180,.L278-.L180
	.half	1
	.byte	100
	.word	.L518-.L180,.L519-.L180
	.half	1
	.byte	100
	.word	.L188-.L180,.L273-.L180
	.half	1
	.byte	108
	.word	.L188-.L180,.L449-.L180
	.half	1
	.byte	100
	.word	.L518-.L180,.L520-.L180
	.half	1
	.byte	108
	.word	.L521-.L180,.L522-.L180
	.half	1
	.byte	108
	.word	.L523-.L180,.L524-.L180
	.half	1
	.byte	100
	.word	.L527-.L180,.L110-.L180
	.half	1
	.byte	100
	.word	.L164-.L180,.L298-.L180
	.half	1
	.byte	108
	.word	.L459-.L180,.L298-.L180
	.half	1
	.byte	100
	.word	.L532-.L180,.L337-.L180
	.half	1
	.byte	108
	.word	.L533-.L180,.L337-.L180
	.half	1
	.byte	100
	.word	0,0
.L340:
	.word	-1,.L180,0,.L514-.L180
	.half	1
	.byte	101
	.word	.L516-.L180,.L514-.L180
	.half	1
	.byte	109
	.word	.L186-.L180,.L278-.L180
	.half	1
	.byte	101
	.word	.L186-.L180,.L278-.L180
	.half	1
	.byte	109
	.word	.L188-.L180,.L273-.L180
	.half	1
	.byte	101
	.word	.L188-.L180,.L273-.L180
	.half	1
	.byte	109
	.word	.L518-.L180,.L93-.L180
	.half	1
	.byte	101
	.word	.L518-.L180,.L520-.L180
	.half	1
	.byte	109
	.word	.L521-.L180,.L522-.L180
	.half	1
	.byte	109
	.word	.L528-.L180,.L110-.L180
	.half	1
	.byte	101
	.word	.L531-.L180,.L529-.L180
	.half	1
	.byte	102
	.word	.L164-.L180,.L298-.L180
	.half	1
	.byte	109
	.word	.L534-.L180,.L298-.L180
	.half	1
	.byte	101
	.word	.L529-.L180,.L337-.L180
	.half	1
	.byte	101
	.word	.L532-.L180,.L337-.L180
	.half	1
	.byte	109
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('etharp_output_to_arp_index')
	.sect	'.debug_loc'
.L424:
	.word	-1,.L178,.L154-.L178,.L426-.L178
	.half	1
	.byte	84
	.word	.L156-.L178,.L308-.L178
	.half	1
	.byte	84
	.word	0,.L502-.L178
	.half	1
	.byte	84
	.word	.L186-.L178,.L278-.L178
	.half	1
	.byte	84
	.word	.L188-.L178,.L273-.L178
	.half	1
	.byte	84
	.word	.L505-.L178,.L85-.L178
	.half	1
	.byte	84
	.word	0,0
.L177:
	.word	-1,.L178,0,.L501-.L178
	.half	2
	.byte	138,0
	.word	.L501-.L178,.L421-.L178
	.half	2
	.byte	138,16
	.word	.L421-.L178,.L421-.L178
	.half	2
	.byte	138,0
	.word	0,0
.L422:
	.word	-1,.L178,.L154-.L178,.L426-.L178
	.half	1
	.byte	108
	.word	.L154-.L178,.L426-.L178
	.half	1
	.byte	100
	.word	.L156-.L178,.L308-.L178
	.half	1
	.byte	108
	.word	.L156-.L178,.L308-.L178
	.half	1
	.byte	100
	.word	.L503-.L178,.L502-.L178
	.half	1
	.byte	108
	.word	0,.L502-.L178
	.half	1
	.byte	100
	.word	.L186-.L178,.L278-.L178
	.half	1
	.byte	108
	.word	.L186-.L178,.L278-.L178
	.half	1
	.byte	100
	.word	.L505-.L178,.L506-.L178
	.half	1
	.byte	100
	.word	.L188-.L178,.L273-.L178
	.half	1
	.byte	108
	.word	.L188-.L178,.L449-.L178
	.half	1
	.byte	100
	.word	.L505-.L178,.L421-.L178
	.half	1
	.byte	108
	.word	.L507-.L178,.L508-.L178
	.half	1
	.byte	100
	.word	.L509-.L178,.L510-.L178
	.half	1
	.byte	100
	.word	.L511-.L178,.L421-.L178
	.half	1
	.byte	100
	.word	0,0
.L423:
	.word	-1,.L178,.L154-.L178,.L426-.L178
	.half	1
	.byte	109
	.word	.L154-.L178,.L426-.L178
	.half	1
	.byte	101
	.word	.L156-.L178,.L308-.L178
	.half	1
	.byte	109
	.word	.L156-.L178,.L308-.L178
	.half	1
	.byte	101
	.word	.L504-.L178,.L502-.L178
	.half	1
	.byte	109
	.word	0,.L502-.L178
	.half	1
	.byte	101
	.word	.L186-.L178,.L278-.L178
	.half	1
	.byte	109
	.word	.L186-.L178,.L278-.L178
	.half	1
	.byte	101
	.word	.L188-.L178,.L273-.L178
	.half	1
	.byte	109
	.word	.L188-.L178,.L273-.L178
	.half	1
	.byte	101
	.word	.L505-.L178,.L421-.L178
	.half	1
	.byte	109
	.word	.L505-.L178,.L85-.L178
	.half	1
	.byte	101
	.word	.L512-.L178,.L421-.L178
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('etharp_query')
	.sect	'.debug_loc'
.L363:
	.word	-1,.L182,.L132-.L182,.L552-.L182
	.half	1
	.byte	88
	.word	.L186-.L182,.L278-.L182
	.half	1
	.byte	88
	.word	.L188-.L182,.L273-.L182
	.half	1
	.byte	88
	.word	.L563-.L182,.L139-.L182
	.half	1
	.byte	88
	.word	.L184-.L182,.L288-.L182
	.half	1
	.byte	88
	.word	.L568-.L182,.L128-.L182
	.half	1
	.byte	88
	.word	0,0
.L181:
	.word	-1,.L182,0,.L535-.L182
	.half	2
	.byte	138,0
	.word	.L535-.L182,.L118-.L182
	.half	2
	.byte	138,24
	.word	.L118-.L182,.L118-.L182
	.half	2
	.byte	138,0
	.word	.L118-.L182,.L120-.L182
	.half	2
	.byte	138,24
	.word	.L120-.L182,.L120-.L182
	.half	2
	.byte	138,0
	.word	.L120-.L182,.L349-.L182
	.half	2
	.byte	138,24
	.word	.L349-.L182,.L349-.L182
	.half	2
	.byte	138,0
	.word	0,0
.L359:
	.word	0,0
.L358:
	.word	-1,.L182,.L184-.L182,.L542-.L182
	.half	1
	.byte	82
	.word	.L184-.L182,.L542-.L182
	.half	1
	.byte	88
	.word	.L540-.L182,.L544-.L182
	.half	1
	.byte	82
	.word	.L545-.L182,.L544-.L182
	.half	1
	.byte	88
	.word	.L186-.L182,.L278-.L182
	.half	1
	.byte	82
	.word	.L186-.L182,.L278-.L182
	.half	1
	.byte	88
	.word	.L188-.L182,.L273-.L182
	.half	1
	.byte	82
	.word	.L188-.L182,.L273-.L182
	.half	1
	.byte	88
	.word	.L551-.L182,.L124-.L182
	.half	1
	.byte	82
	.word	.L551-.L182,.L132-.L182
	.half	1
	.byte	88
	.word	0,0
.L351:
	.word	-1,.L182,0,.L536-.L182
	.half	1
	.byte	101
	.word	.L539-.L182,.L540-.L182
	.half	1
	.byte	100
	.word	.L184-.L182,.L542-.L182
	.half	1
	.byte	109
	.word	.L546-.L182,.L544-.L182
	.half	1
	.byte	109
	.word	.L186-.L182,.L278-.L182
	.half	1
	.byte	109
	.word	.L188-.L182,.L273-.L182
	.half	1
	.byte	109
	.word	.L551-.L182,.L552-.L182
	.half	1
	.byte	109
	.word	.L556-.L182,.L553-.L182
	.half	1
	.byte	101
	.word	.L563-.L182,.L139-.L182
	.half	1
	.byte	109
	.word	.L184-.L182,.L288-.L182
	.half	1
	.byte	109
	.word	.L568-.L182,.L349-.L182
	.half	1
	.byte	109
	.word	0,0
.L357:
	.word	-1,.L182,.L184-.L182,.L542-.L182
	.half	1
	.byte	90
	.word	.L537-.L182,.L544-.L182
	.half	1
	.byte	90
	.word	.L186-.L182,.L278-.L182
	.half	1
	.byte	90
	.word	.L188-.L182,.L273-.L182
	.half	1
	.byte	90
	.word	.L551-.L182,.L552-.L182
	.half	1
	.byte	90
	.word	.L563-.L182,.L139-.L182
	.half	1
	.byte	90
	.word	.L184-.L182,.L288-.L182
	.half	1
	.byte	90
	.word	.L568-.L182,.L349-.L182
	.half	1
	.byte	90
	.word	0,0
.L350:
	.word	-1,.L182,0,.L536-.L182
	.half	1
	.byte	100
	.word	.L541-.L182,.L540-.L182
	.half	1
	.byte	101
	.word	.L184-.L182,.L542-.L182
	.half	1
	.byte	108
	.word	.L547-.L182,.L544-.L182
	.half	1
	.byte	108
	.word	.L186-.L182,.L278-.L182
	.half	1
	.byte	108
	.word	.L188-.L182,.L273-.L182
	.half	1
	.byte	108
	.word	.L551-.L182,.L132-.L182
	.half	1
	.byte	108
	.word	.L555-.L182,.L553-.L182
	.half	1
	.byte	100
	.word	.L560-.L182,.L559-.L182
	.half	1
	.byte	100
	.word	0,0
.L362:
	.word	0,0
.L352:
	.word	-1,.L182,0,.L536-.L182
	.half	1
	.byte	102
	.word	.L538-.L182,.L121-.L182
	.half	1
	.byte	111
	.word	.L184-.L182,.L543-.L182
	.half	1
	.byte	111
	.word	.L184-.L182,.L542-.L182
	.half	2
	.byte	145,116
	.word	.L548-.L182,.L544-.L182
	.half	2
	.byte	145,116
	.word	.L186-.L182,.L278-.L182
	.half	2
	.byte	145,116
	.word	.L188-.L182,.L273-.L182
	.half	2
	.byte	145,116
	.word	.L551-.L182,.L552-.L182
	.half	2
	.byte	145,116
	.word	.L554-.L182,.L126-.L182
	.half	1
	.byte	111
	.word	.L557-.L182,.L127-.L182
	.half	1
	.byte	111
	.word	.L561-.L182,.L559-.L182
	.half	1
	.byte	101
	.word	.L132-.L182,.L552-.L182
	.half	1
	.byte	108
	.word	.L186-.L182,.L278-.L182
	.half	1
	.byte	108
	.word	.L188-.L182,.L273-.L182
	.half	1
	.byte	108
	.word	.L563-.L182,.L139-.L182
	.half	2
	.byte	145,116
	.word	.L563-.L182,.L564-.L182
	.half	1
	.byte	108
	.word	.L564-.L182,.L565-.L182
	.half	1
	.byte	100
	.word	.L565-.L182,.L137-.L182
	.half	1
	.byte	98
	.word	.L566-.L182,.L139-.L182
	.half	1
	.byte	108
	.word	.L567-.L182,.L138-.L182
	.half	1
	.byte	100
	.word	.L184-.L182,.L288-.L182
	.half	2
	.byte	145,116
	.word	.L184-.L182,.L288-.L182
	.half	1
	.byte	108
	.word	.L568-.L182,.L349-.L182
	.half	2
	.byte	145,116
	.word	.L568-.L182,.L128-.L182
	.half	1
	.byte	108
	.word	0,0
.L356:
	.word	-1,.L182,.L184-.L182,.L542-.L182
	.half	1
	.byte	89
	.word	.L548-.L182,.L544-.L182
	.half	1
	.byte	89
	.word	.L186-.L182,.L278-.L182
	.half	1
	.byte	89
	.word	.L188-.L182,.L273-.L182
	.half	1
	.byte	89
	.word	.L551-.L182,.L553-.L182
	.half	1
	.byte	89
	.word	.L553-.L182,.L127-.L182
	.half	1
	.byte	82
	.word	.L558-.L182,.L559-.L182
	.half	1
	.byte	89
	.word	.L559-.L182,.L129-.L182
	.half	1
	.byte	82
	.word	.L129-.L182,.L552-.L182
	.half	1
	.byte	89
	.word	.L563-.L182,.L139-.L182
	.half	1
	.byte	89
	.word	.L184-.L182,.L288-.L182
	.half	1
	.byte	89
	.word	.L568-.L182,.L349-.L182
	.half	1
	.byte	89
	.word	0,0
.L355:
	.word	-1,.L182,.L537-.L182,.L538-.L182
	.half	1
	.byte	111
	.word	.L184-.L182,.L542-.L182
	.half	2
	.byte	145,124
	.word	.L549-.L182,.L544-.L182
	.half	2
	.byte	145,124
	.word	.L120-.L182,.L550-.L182
	.half	1
	.byte	111
	.word	.L186-.L182,.L278-.L182
	.half	2
	.byte	145,124
	.word	.L188-.L182,.L273-.L182
	.half	2
	.byte	145,124
	.word	.L551-.L182,.L552-.L182
	.half	2
	.byte	145,124
	.word	.L562-.L182,.L559-.L182
	.half	1
	.byte	102
	.word	.L563-.L182,.L139-.L182
	.half	2
	.byte	145,124
	.word	.L184-.L182,.L288-.L182
	.half	2
	.byte	145,124
	.word	.L568-.L182,.L349-.L182
	.half	2
	.byte	145,124
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('etharp_raw')
	.sect	'.debug_loc'
.L189:
	.word	-1,.L190,0,.L569-.L190
	.half	2
	.byte	138,0
	.word	.L569-.L190,.L144-.L190
	.half	2
	.byte	138,24
	.word	.L144-.L190,.L144-.L190
	.half	2
	.byte	138,0
	.word	.L144-.L190,.L383-.L190
	.half	2
	.byte	138,24
	.word	.L383-.L190,.L383-.L190
	.half	2
	.byte	138,0
	.word	0,0
.L386:
	.word	-1,.L190,0,.L570-.L190
	.half	1
	.byte	102
	.word	.L573-.L190,.L570-.L190
	.half	2
	.byte	145,120
	.word	.L174-.L190,.L303-.L190
	.half	2
	.byte	145,120
	.word	.L174-.L190,.L303-.L190
	.half	1
	.byte	102
	.word	.L575-.L190,.L576-.L190
	.half	2
	.byte	145,120
	.word	.L575-.L190,.L576-.L190
	.half	1
	.byte	102
	.word	.L186-.L190,.L278-.L190
	.half	2
	.byte	145,120
	.word	.L186-.L190,.L278-.L190
	.half	1
	.byte	102
	.word	.L188-.L190,.L273-.L190
	.half	2
	.byte	145,120
	.word	.L188-.L190,.L273-.L190
	.half	1
	.byte	102
	.word	.L577-.L190,.L579-.L190
	.half	2
	.byte	145,120
	.word	.L577-.L190,.L143-.L190
	.half	1
	.byte	102
	.word	.L583-.L190,.L383-.L190
	.half	2
	.byte	145,120
	.word	.L597-.L190,.L594-.L190
	.half	1
	.byte	103
	.word	0,0
.L385:
	.word	-1,.L190,0,.L570-.L190
	.half	1
	.byte	101
	.word	.L572-.L190,.L570-.L190
	.half	2
	.byte	145,124
	.word	.L174-.L190,.L303-.L190
	.half	2
	.byte	145,124
	.word	.L174-.L190,.L303-.L190
	.half	1
	.byte	101
	.word	.L575-.L190,.L576-.L190
	.half	2
	.byte	145,124
	.word	.L575-.L190,.L576-.L190
	.half	1
	.byte	101
	.word	.L186-.L190,.L278-.L190
	.half	2
	.byte	145,124
	.word	.L186-.L190,.L278-.L190
	.half	1
	.byte	101
	.word	.L188-.L190,.L273-.L190
	.half	2
	.byte	145,124
	.word	.L188-.L190,.L273-.L190
	.half	1
	.byte	101
	.word	.L577-.L190,.L579-.L190
	.half	2
	.byte	145,124
	.word	.L577-.L190,.L143-.L190
	.half	1
	.byte	101
	.word	.L583-.L190,.L383-.L190
	.half	2
	.byte	145,124
	.word	.L596-.L190,.L594-.L190
	.half	1
	.byte	102
	.word	0,0
.L394:
	.word	-1,.L190,.L188-.L190,.L273-.L190
	.half	1
	.byte	111
	.word	.L584-.L190,.L383-.L190
	.half	1
	.byte	111
	.word	0,0
.L389:
	.word	-1,.L190,0,.L570-.L190
	.half	2
	.byte	145,4
	.word	.L174-.L190,.L303-.L190
	.half	2
	.byte	145,4
	.word	.L575-.L190,.L576-.L190
	.half	2
	.byte	145,4
	.word	.L186-.L190,.L278-.L190
	.half	2
	.byte	145,4
	.word	.L188-.L190,.L273-.L190
	.half	2
	.byte	145,4
	.word	.L577-.L190,.L579-.L190
	.half	2
	.byte	145,4
	.word	.L583-.L190,.L383-.L190
	.half	2
	.byte	145,4
	.word	.L587-.L190,.L588-.L190
	.half	1
	.byte	101
	.word	0,0
.L387:
	.word	-1,.L190,0,.L570-.L190
	.half	1
	.byte	103
	.word	.L574-.L190,.L570-.L190
	.half	2
	.byte	145,116
	.word	.L174-.L190,.L303-.L190
	.half	1
	.byte	103
	.word	.L174-.L190,.L303-.L190
	.half	2
	.byte	145,116
	.word	.L575-.L190,.L576-.L190
	.half	1
	.byte	103
	.word	.L575-.L190,.L576-.L190
	.half	2
	.byte	145,116
	.word	.L186-.L190,.L278-.L190
	.half	1
	.byte	103
	.word	.L186-.L190,.L278-.L190
	.half	2
	.byte	145,116
	.word	.L188-.L190,.L273-.L190
	.half	1
	.byte	103
	.word	.L188-.L190,.L273-.L190
	.half	2
	.byte	145,116
	.word	.L577-.L190,.L143-.L190
	.half	1
	.byte	103
	.word	.L577-.L190,.L579-.L190
	.half	2
	.byte	145,116
	.word	.L583-.L190,.L383-.L190
	.half	2
	.byte	145,116
	.word	.L585-.L190,.L586-.L190
	.half	1
	.byte	101
	.word	0,0
.L390:
	.word	-1,.L190,0,.L570-.L190
	.half	2
	.byte	145,8
	.word	.L174-.L190,.L303-.L190
	.half	2
	.byte	145,8
	.word	.L575-.L190,.L576-.L190
	.half	2
	.byte	145,8
	.word	.L186-.L190,.L278-.L190
	.half	2
	.byte	145,8
	.word	.L188-.L190,.L273-.L190
	.half	2
	.byte	145,8
	.word	.L577-.L190,.L579-.L190
	.half	2
	.byte	145,8
	.word	.L583-.L190,.L383-.L190
	.half	2
	.byte	145,8
	.word	.L591-.L190,.L592-.L190
	.half	1
	.byte	101
	.word	0,0
.L388:
	.word	-1,.L190,0,.L570-.L190
	.half	2
	.byte	145,0
	.word	.L174-.L190,.L303-.L190
	.half	2
	.byte	145,0
	.word	.L575-.L190,.L576-.L190
	.half	2
	.byte	145,0
	.word	.L186-.L190,.L278-.L190
	.half	2
	.byte	145,0
	.word	.L188-.L190,.L273-.L190
	.half	2
	.byte	145,0
	.word	.L577-.L190,.L579-.L190
	.half	2
	.byte	145,0
	.word	.L583-.L190,.L383-.L190
	.half	2
	.byte	145,0
	.word	.L589-.L190,.L590-.L190
	.half	1
	.byte	101
	.word	0,0
.L384:
	.word	-1,.L190,0,.L570-.L190
	.half	1
	.byte	100
	.word	.L571-.L190,.L570-.L190
	.half	1
	.byte	108
	.word	.L174-.L190,.L303-.L190
	.half	1
	.byte	108
	.word	.L174-.L190,.L303-.L190
	.half	1
	.byte	100
	.word	.L575-.L190,.L576-.L190
	.half	1
	.byte	108
	.word	.L575-.L190,.L576-.L190
	.half	1
	.byte	100
	.word	.L186-.L190,.L278-.L190
	.half	1
	.byte	108
	.word	.L186-.L190,.L278-.L190
	.half	1
	.byte	100
	.word	.L577-.L190,.L578-.L190
	.half	1
	.byte	100
	.word	.L188-.L190,.L273-.L190
	.half	1
	.byte	108
	.word	.L188-.L190,.L449-.L190
	.half	1
	.byte	100
	.word	.L577-.L190,.L579-.L190
	.half	1
	.byte	108
	.word	.L583-.L190,.L383-.L190
	.half	1
	.byte	108
	.word	.L593-.L190,.L594-.L190
	.half	1
	.byte	100
	.word	0,0
.L392:
	.word	-1,.L190,0,.L570-.L190
	.half	1
	.byte	84
	.word	.L174-.L190,.L303-.L190
	.half	1
	.byte	84
	.word	.L174-.L190,.L303-.L190
	.half	1
	.byte	88
	.word	.L575-.L190,.L576-.L190
	.half	1
	.byte	84
	.word	.L575-.L190,.L576-.L190
	.half	1
	.byte	88
	.word	.L186-.L190,.L278-.L190
	.half	1
	.byte	84
	.word	.L186-.L190,.L278-.L190
	.half	1
	.byte	88
	.word	.L188-.L190,.L273-.L190
	.half	1
	.byte	84
	.word	.L188-.L190,.L273-.L190
	.half	1
	.byte	88
	.word	.L577-.L190,.L143-.L190
	.half	1
	.byte	84
	.word	.L577-.L190,.L579-.L190
	.half	1
	.byte	88
	.word	.L583-.L190,.L383-.L190
	.half	1
	.byte	88
	.word	0,0
.L393:
	.word	-1,.L190,.L580-.L190,.L581-.L190
	.half	1
	.byte	98
	.word	.L582-.L190,.L579-.L190
	.half	1
	.byte	109
	.word	.L186-.L190,.L278-.L190
	.half	1
	.byte	109
	.word	.L188-.L190,.L273-.L190
	.half	1
	.byte	109
	.word	.L583-.L190,.L383-.L190
	.half	1
	.byte	109
	.word	.L595-.L190,.L594-.L190
	.half	1
	.byte	101
	.word	.L598-.L190,.L599-.L190
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('etharp_request')
	.sect	'.debug_loc'
.L193:
	.word	-1,.L194,0,.L364-.L194
	.half	2
	.byte	138,0
	.word	0,0
.L366:
	.word	-1,.L194,0,.L364-.L194
	.half	1
	.byte	101
	.word	0,0
.L365:
	.word	-1,.L194,0,.L364-.L194
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('etharp_request_dst')
	.sect	'.debug_loc'
.L191:
	.word	-1,.L192,0,.L600-.L192
	.half	2
	.byte	138,0
	.word	.L600-.L192,.L379-.L192
	.half	2
	.byte	138,16
	.word	.L379-.L192,.L379-.L192
	.half	2
	.byte	138,0
	.word	0,0
.L382:
	.word	-1,.L192,0,.L379-.L192
	.half	1
	.byte	102
	.word	0,0
.L381:
	.word	-1,.L192,0,.L601-.L192
	.half	1
	.byte	101
	.word	0,0
.L380:
	.word	-1,.L192,0,.L379-.L192
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('etharp_tmr')
	.sect	'.debug_loc'
.L157:
	.word	-1,.L158,0,.L313-.L158
	.half	2
	.byte	138,0
	.word	0,0
.L315:
	.word	-1,.L158,.L427-.L158,.L308-.L158
	.half	1
	.byte	88
	.word	0,.L313-.L158
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('etharp_update_arp_entry')
	.sect	'.debug_loc'
.L415:
	.word	-1,.L162,0,.L442-.L162
	.half	1
	.byte	102
	.word	.L446-.L162,.L442-.L162
	.half	1
	.byte	110
	.word	.L186-.L162,.L278-.L162
	.half	1
	.byte	102
	.word	.L186-.L162,.L278-.L162
	.half	1
	.byte	110
	.word	.L188-.L162,.L273-.L162
	.half	1
	.byte	102
	.word	.L188-.L162,.L273-.L162
	.half	1
	.byte	110
	.word	.L447-.L162,.L46-.L162
	.half	1
	.byte	102
	.word	.L447-.L162,.L51-.L162
	.half	1
	.byte	110
	.word	.L427-.L162,.L308-.L162
	.half	1
	.byte	110
	.word	.L166-.L162,.L283-.L162
	.half	1
	.byte	110
	.word	.L458-.L162,.L456-.L162
	.half	1
	.byte	101
	.word	.L164-.L162,.L298-.L162
	.half	1
	.byte	110
	.word	.L455-.L162,.L412-.L162
	.half	1
	.byte	110
	.word	.L462-.L162,.L461-.L162
	.half	1
	.byte	103
	.word	0,0
.L161:
	.word	-1,.L162,0,.L441-.L162
	.half	2
	.byte	138,0
	.word	.L441-.L162,.L49-.L162
	.half	2
	.byte	138,16
	.word	.L49-.L162,.L49-.L162
	.half	2
	.byte	138,0
	.word	.L49-.L162,.L51-.L162
	.half	2
	.byte	138,16
	.word	.L51-.L162,.L51-.L162
	.half	2
	.byte	138,0
	.word	.L51-.L162,.L412-.L162
	.half	2
	.byte	138,16
	.word	.L412-.L162,.L412-.L162
	.half	2
	.byte	138,0
	.word	0,0
.L416:
	.word	-1,.L162,0,.L442-.L162
	.half	1
	.byte	84
	.word	.L444-.L162,.L442-.L162
	.half	1
	.byte	88
	.word	.L186-.L162,.L278-.L162
	.half	1
	.byte	88
	.word	.L186-.L162,.L278-.L162
	.half	1
	.byte	84
	.word	.L188-.L162,.L273-.L162
	.half	1
	.byte	88
	.word	.L188-.L162,.L273-.L162
	.half	1
	.byte	84
	.word	.L447-.L162,.L51-.L162
	.half	1
	.byte	88
	.word	.L447-.L162,.L46-.L162
	.half	1
	.byte	84
	.word	.L454-.L162,.L453-.L162
	.half	1
	.byte	84
	.word	.L427-.L162,.L308-.L162
	.half	1
	.byte	88
	.word	.L166-.L162,.L283-.L162
	.half	1
	.byte	88
	.word	.L164-.L162,.L298-.L162
	.half	1
	.byte	88
	.word	.L455-.L162,.L412-.L162
	.half	1
	.byte	88
	.word	0,0
.L418:
	.word	-1,.L162,.L453-.L162,.L51-.L162
	.half	1
	.byte	82
	.word	.L427-.L162,.L308-.L162
	.half	1
	.byte	82
	.word	.L166-.L162,.L283-.L162
	.half	1
	.byte	82
	.word	.L455-.L162,.L456-.L162
	.half	1
	.byte	82
	.word	0,0
.L414:
	.word	-1,.L162,0,.L442-.L162
	.half	1
	.byte	101
	.word	.L445-.L162,.L442-.L162
	.half	1
	.byte	109
	.word	.L186-.L162,.L278-.L162
	.half	1
	.byte	101
	.word	.L186-.L162,.L278-.L162
	.half	1
	.byte	109
	.word	.L188-.L162,.L273-.L162
	.half	1
	.byte	101
	.word	.L188-.L162,.L273-.L162
	.half	1
	.byte	109
	.word	.L447-.L162,.L46-.L162
	.half	1
	.byte	101
	.word	.L447-.L162,.L51-.L162
	.half	1
	.byte	109
	.word	.L452-.L162,.L453-.L162
	.half	1
	.byte	100
	.word	.L427-.L162,.L308-.L162
	.half	1
	.byte	109
	.word	.L166-.L162,.L283-.L162
	.half	1
	.byte	109
	.word	.L455-.L162,.L457-.L162
	.half	1
	.byte	109
	.word	0,0
.L413:
	.word	-1,.L162,0,.L442-.L162
	.half	1
	.byte	100
	.word	.L443-.L162,.L442-.L162
	.half	1
	.byte	108
	.word	.L186-.L162,.L278-.L162
	.half	1
	.byte	108
	.word	.L186-.L162,.L278-.L162
	.half	1
	.byte	100
	.word	.L447-.L162,.L448-.L162
	.half	1
	.byte	100
	.word	.L188-.L162,.L273-.L162
	.half	1
	.byte	108
	.word	.L188-.L162,.L449-.L162
	.half	1
	.byte	100
	.word	.L447-.L162,.L51-.L162
	.half	1
	.byte	108
	.word	.L450-.L162,.L451-.L162
	.half	1
	.byte	100
	.word	.L454-.L162,.L453-.L162
	.half	1
	.byte	101
	.word	.L427-.L162,.L308-.L162
	.half	1
	.byte	108
	.word	.L166-.L162,.L283-.L162
	.half	1
	.byte	108
	.word	.L164-.L162,.L298-.L162
	.half	1
	.byte	108
	.word	.L459-.L162,.L298-.L162
	.half	1
	.byte	100
	.word	.L455-.L162,.L412-.L162
	.half	1
	.byte	108
	.word	.L460-.L162,.L461-.L162
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L918:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('etharp_free_entry')
	.sect	'.debug_frame'
	.word	12
	.word	.L918,.L152,.L395-.L152
	.sdecl	'.debug_frame',debug,cluster('etharp_tmr')
	.sect	'.debug_frame'
	.word	12
	.word	.L918,.L158,.L313-.L158
	.sdecl	'.debug_frame',debug,cluster('etharp_find_entry')
	.sect	'.debug_frame'
	.word	52
	.word	.L918,.L160,.L398-.L160
	.byte	4
	.word	(.L430-.L160)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L41-.L430)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L398-.L41)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('etharp_update_arp_entry')
	.sect	'.debug_frame'
	.word	68
	.word	.L918,.L162,.L412-.L162
	.byte	4
	.word	(.L441-.L162)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L49-.L441)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L51-.L49)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L412-.L51)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('etharp_cleanup_netif')
	.sect	'.debug_frame'
	.word	12
	.word	.L918,.L168,.L367-.L168
	.sdecl	'.debug_frame',debug,cluster('etharp_find_addr')
	.sect	'.debug_frame'
	.word	52
	.word	.L918,.L170,.L316-.L170
	.byte	4
	.word	(.L464-.L170)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L61-.L464)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L316-.L61)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('etharp_get_entry')
	.sect	'.debug_frame'
	.word	52
	.word	.L918,.L172,.L327-.L172
	.byte	4
	.word	(.L476-.L172)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L68-.L476)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L327-.L68)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('etharp_input')
	.sect	'.debug_frame'
	.word	52
	.word	.L918,.L176,.L370-.L176
	.byte	4
	.word	(.L487-.L176)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L71-.L487)/2
	.byte	19,0,8,26,19,24,22,26,3,19,138,24,4
	.word	(.L370-.L71)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('etharp_output_to_arp_index')
	.sect	'.debug_frame'
	.word	36
	.word	.L918,.L178,.L421-.L178
	.byte	4
	.word	(.L501-.L178)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L421-.L501)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('etharp_output')
	.sect	'.debug_frame'
	.word	88
	.word	.L918,.L180,.L337-.L180
	.byte	4
	.word	(.L513-.L180)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L103-.L513)/2
	.byte	19,0,8,26,19,24,22,26,3,19,138,24,4
	.word	(.L112-.L103)/2
	.byte	19,0,8,26,19,24,22,26,3,19,138,24,4
	.word	(.L99-.L112)/2
	.byte	19,0,8,26,19,24,22,26,3,19,138,24,4
	.word	(.L337-.L99)/2
	.byte	19,0,8,26,0,0,0
	.sdecl	'.debug_frame',debug,cluster('etharp_query')
	.sect	'.debug_frame'
	.word	68
	.word	.L918,.L182,.L349-.L182
	.byte	4
	.word	(.L535-.L182)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L118-.L535)/2
	.byte	19,0,8,26,19,24,22,26,3,19,138,24,4
	.word	(.L120-.L118)/2
	.byte	19,0,8,26,19,24,22,26,3,19,138,24,4
	.word	(.L349-.L120)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('etharp_raw')
	.sect	'.debug_frame'
	.word	52
	.word	.L918,.L190,.L383-.L190
	.byte	4
	.word	(.L569-.L190)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L144-.L569)/2
	.byte	19,0,8,26,19,24,22,26,3,19,138,24,4
	.word	(.L383-.L144)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('etharp_request_dst')
	.sect	'.debug_frame'
	.word	36
	.word	.L918,.L192,.L379-.L192
	.byte	4
	.word	(.L600-.L192)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L379-.L600)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('etharp_request')
	.sect	'.debug_frame'
	.word	12
	.word	.L918,.L194,.L364-.L194
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L919:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_54')
	.sect	'.debug_frame'
	.word	24
	.word	.L919,.L154,.L293-.L154
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_57')
	.sect	'.debug_frame'
	.word	24
	.word	.L919,.L156,.L308-.L156
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_55')
	.sect	'.debug_frame'
	.word	24
	.word	.L919,.L164,.L298-.L164
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_52')
	.sect	'.debug_frame'
	.word	24
	.word	.L919,.L166,.L283-.L166
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_56')
	.sect	'.debug_frame'
	.word	24
	.word	.L919,.L174,.L303-.L174
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_53')
	.sect	'.debug_frame'
	.word	24
	.word	.L919,.L184,.L288-.L184
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_51')
	.sect	'.debug_frame'
	.word	24
	.word	.L919,.L186,.L278-.L186
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_50')
	.sect	'.debug_frame'
	.word	24
	.word	.L919,.L188,.L273-.L188
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1202  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1203  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\etharp.c	  1204  #endif /* LWIP_IPV4 && LWIP_ARP */

	; Module end
