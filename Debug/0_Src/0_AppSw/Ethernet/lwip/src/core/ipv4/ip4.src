	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\.ip4.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Rtl8211f -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\ip4.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\ip4.src ..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\ip4.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\ip4.c'

	
$TC162
	
	.sdecl	'.text.ip4.ip4_route',code,cluster('ip4_route')
	.sect	'.text.ip4.ip4_route'
	.align	2
	
	.global	ip4_route

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	     1  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	     2   * @file
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	     3   * This is the IPv4 layer implementation for incoming and outgoing IP traffic.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	     4   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	     5   * @see ip_frag.c
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	     6   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	     7   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	     8  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	     9  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    10   * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    11   * All rights reserved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    12   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    13   * Redistribution and use in source and binary forms, with or without modification,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    14   * are permitted provided that the following conditions are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    15   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    16   * 1. Redistributions of source code must retain the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    17   *    this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    18   * 2. Redistributions in binary form must reproduce the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    19   *    this list of conditions and the following disclaimer in the documentation
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    20   *    and/or other materials provided with the distribution.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    21   * 3. The name of the author may not be used to endorse or promote products
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    22   *    derived from this software without specific prior written permission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    23   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    24   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    25   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    26   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    27   * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    28   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    29   * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    30   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    31   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    32   * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    33   * OF SUCH DAMAGE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    34   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    35   * This file is part of the lwIP TCP/IP stack.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    36   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    37   * Author: Adam Dunkels <adam@sics.se>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    38   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    39   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    40  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    41  #include "lwip/opt.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    42  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    43  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    44  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    45  #include "lwip/ip.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    46  #include "lwip/def.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    47  #include "lwip/mem.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    48  #include "lwip/ip4_frag.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    49  #include "lwip/inet_chksum.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    50  #include "lwip/netif.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    51  #include "lwip/icmp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    52  #include "lwip/igmp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    53  #include "lwip/priv/raw_priv.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    54  #include "lwip/udp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    55  #include "lwip/priv/tcp_priv.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    56  #include "lwip/autoip.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    57  #include "lwip/stats.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    58  #include "lwip/prot/iana.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    59  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    60  #include <string.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    61  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    62  #ifdef LWIP_HOOK_FILENAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    63  #include LWIP_HOOK_FILENAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    64  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    65  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    66  /** Set this to 0 in the rare case of wanting to call an extra function to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    67   * generate the IP checksum (in contrast to calculating it on-the-fly). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    68  #ifndef LWIP_INLINE_IP_CHKSUM
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    69  #if LWIP_CHECKSUM_CTRL_PER_NETIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    70  #define LWIP_INLINE_IP_CHKSUM   0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    71  #else /* LWIP_CHECKSUM_CTRL_PER_NETIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    72  #define LWIP_INLINE_IP_CHKSUM   1
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    73  #endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    74  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    75  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    76  #if LWIP_INLINE_IP_CHKSUM && CHECKSUM_GEN_IP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    77  #define CHECKSUM_GEN_IP_INLINE  1
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    78  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    79  #define CHECKSUM_GEN_IP_INLINE  0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    80  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    81  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    82  #if LWIP_DHCP || defined(LWIP_IP_ACCEPT_UDP_PORT)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    83  #define IP_ACCEPT_LINK_LAYER_ADDRESSING 1
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    84  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    85  /** Some defines for DHCP to let link-layer-addressed packets through while the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    86   * netif is down.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    87   * To use this in your own application/protocol, define LWIP_IP_ACCEPT_UDP_PORT(port)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    88   * to return 1 if the port is accepted and 0 if the port is not accepted.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    89   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    90  #if LWIP_DHCP && defined(LWIP_IP_ACCEPT_UDP_PORT)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    91  /* accept DHCP client port and custom port */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    92  #define IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(port) (((port) == PP_NTOHS(LWIP_IANA_PORT_DHCP_CLIENT)) \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    93           || (LWIP_IP_ACCEPT_UDP_PORT(port)))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    94  #elif defined(LWIP_IP_ACCEPT_UDP_PORT) /* LWIP_DHCP && defined(LWIP_IP_ACCEPT_UDP_PORT) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    95  /* accept custom port only */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    96  #define IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(port) (LWIP_IP_ACCEPT_UDP_PORT(port))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    97  #else /* LWIP_DHCP && defined(LWIP_IP_ACCEPT_UDP_PORT) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    98  /* accept DHCP client port only */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	    99  #define IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(port) ((port) == PP_NTOHS(LWIP_IANA_PORT_DHCP_CLIENT))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   100  #endif /* LWIP_DHCP && defined(LWIP_IP_ACCEPT_UDP_PORT) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   101  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   102  #else /* LWIP_DHCP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   103  #define IP_ACCEPT_LINK_LAYER_ADDRESSING 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   104  #endif /* LWIP_DHCP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   105  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   106  /** The IP header ID of the next outgoing IP packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   107  static u16_t ip_id;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   108  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   109  #if LWIP_MULTICAST_TX_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   110  /** The default netif used for multicast */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   111  static struct netif *ip4_default_multicast_netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   112  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   113  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   114   * @ingroup ip4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   115   * Set a default netif for IPv4 multicast. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   116  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   117  ip4_set_default_multicast_netif(struct netif *default_multicast_netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   118  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   119    ip4_default_multicast_netif = default_multicast_netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   120  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   121  #endif /* LWIP_MULTICAST_TX_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   122  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   123  #ifdef LWIP_HOOK_IP4_ROUTE_SRC
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   124  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   125   * Source based IPv4 routing must be fully implemented in
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   126   * LWIP_HOOK_IP4_ROUTE_SRC(). This function only provides the parameters.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   127   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   128  struct netif *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   129  ip4_route_src(const ip4_addr_t *src, const ip4_addr_t *dest)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   130  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   131    if (src != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   132      /* when src==NULL, the hook is called from ip4_route(dest) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   133      struct netif *netif = LWIP_HOOK_IP4_ROUTE_SRC(src, dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   134      if (netif != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   135        return netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   136      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   137    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   138    return ip4_route(dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   139  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   140  #endif /* LWIP_HOOK_IP4_ROUTE_SRC */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   141  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   142  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   143   * Finds the appropriate network interface for a given IP address. It
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   144   * searches the list of network interfaces linearly. A match is found
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   145   * if the masked IP address of the network interface equals the masked
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   146   * IP address given to the function.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   147   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   148   * @param dest the destination IP address for which to find the route
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   149   * @return the netif on which to send to reach dest
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   150   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   151  struct netif *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   152  ip4_route(const ip4_addr_t *dest)
; Function ip4_route
.L83:
ip4_route:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   153  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   154  #if !LWIP_SINGLE_NETIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   155    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   156  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   157    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   158  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   159  #if LWIP_MULTICAST_TX_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   160    /* Use administratively selected interface for multicast by default */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   161    if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   162      return ip4_default_multicast_netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   163    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   164  #endif /* LWIP_MULTICAST_TX_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   165  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   166    /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   167    LWIP_UNUSED_ARG(dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   168  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   169    /* iterate through netifs */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   170    NETIF_FOREACH(netif) {
	ld.a	a2,netif_list
.L207:
	j	.L2
.L3:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   171      /* is the netif up, does it have a link and a valid address? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   172      if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
	ld.bu	d0,[a2]41
	jz.t	d0:0,.L4
.L330:
	jz.t	d0:2,.L5
.L331:
	ld.w	d15,[a2]4
	jeq	d15,#0,.L6
.L332:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   173        /* network mask matches? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   174        if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
	ld.w	d1,[a2]8
	ld.w	d2,[a4]
	and	d15,d1
	and	d3,d2,d1
.L333:
	jeq	d15,d3,.L10
.L334:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   175          /* return netif on which to forward IP packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   176          return netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   177        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   178        /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   179        if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
	jnz.t	d0:1,.L8
.L335:
	ld.w	d15,[a2]12
	jeq	d15,d2,.L10
.L8:
.L6:
.L5:
.L4:
	ld.a	a2,[a2]
.L2:
	jnz.a	a2,.L3
.L336:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   180          /* return netif on which to forward IP packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   181          return netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   182        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   183      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   184    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   185  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   186  #if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   187    /* loopif is disabled, looopback traffic is passed through any netif */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   188    if (ip4_addr_isloopback(dest)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   189      /* don't check for link on loopback traffic */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   190      if (netif_default != NULL && netif_is_up(netif_default)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   191        return netif_default;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   192      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   193      /* default netif is not up, just use any netif for loopback traffic */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   194      NETIF_FOREACH(netif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   195        if (netif_is_up(netif)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   196          return netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   197        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   198      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   199      return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   200    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   201  #endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   202  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   203  #ifdef LWIP_HOOK_IP4_ROUTE_SRC
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   204    netif = LWIP_HOOK_IP4_ROUTE_SRC(NULL, dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   205    if (netif != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   206      return netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   207    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   208  #elif defined(LWIP_HOOK_IP4_ROUTE)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   209    netif = LWIP_HOOK_IP4_ROUTE(dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   210    if (netif != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   211      return netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   212    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   213  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   214  #endif /* !LWIP_SINGLE_NETIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   215  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   216    if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
	ld.a	a2,netif_default
.L208:
	jz.a	a2,.L11
.L337:
	ld.bu	d15,[a2]41
	jz.t	d15:0,.L12
.L338:
	jz.t	d15:2,.L13
.L339:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   217        ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
	ld.w	d15,[a2]4
	jeq	d15,#0,.L14
.L340:
	ld.w	d15,[a4]
	mov	d0,#127
	and	d15,#255
	jne	d15,d0,.L15
.L14:
.L13:
.L12:
.L11:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   218      /* No matching netif found and default netif is not usable.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   219         If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   220      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   221                  ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   222      IP_STATS_INC(ip.rterr);
	fcall	.cocofun_24
.L341:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   223      MIB2_STATS_INC(mib2.ipoutnoroutes);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   224      return NULL;
	mov.a	a2,#0
.L15:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   225    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   226  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   227    return netif_default;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   228  }
.L10:
	ret
.L152:
	
__ip4_route_function_end:
	.size	ip4_route,__ip4_route_function_end-ip4_route
.L108:
	; End of function
	
	.sdecl	'.text.ip4..cocofun_24',code,cluster('.cocofun_24')
	.sect	'.text.ip4..cocofun_24'
	.align	2
; Function .cocofun_24
.L85:
.cocofun_24:	.type	func
; Function body .cocofun_24, coco_iter:0
	movh.a	a15,#@his(lwip_stats+86)
	ld.hu	d15,[a15]@los(lwip_stats+86)
	add	d15,#1
	st.h	[a15]@los(lwip_stats+86),d15
.L209:
	fret
.L138:
	; End of function
	.sdecl	'.text.ip4.ip4_input_accept',code,cluster('ip4_input_accept')
	.sect	'.text.ip4.ip4_input_accept'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   229  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   230  #if IP_FORWARD
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   231  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   232   * Determine whether an IP address is in a reserved set of addresses
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   233   * that may not be forwarded, or whether datagrams to that destination
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   234   * may be forwarded.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   235   * @param p the packet to forward
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   236   * @return 1: can forward 0: discard
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   237   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   238  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   239  ip4_canforward(struct pbuf *p)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   240  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   241    u32_t addr = lwip_htonl(ip4_addr_get_u32(ip4_current_dest_addr()));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   242  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   243  #ifdef LWIP_HOOK_IP4_CANFORWARD
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   244    int ret = LWIP_HOOK_IP4_CANFORWARD(p, addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   245    if (ret >= 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   246      return ret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   247    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   248  #endif /* LWIP_HOOK_IP4_CANFORWARD */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   249  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   250    if (p->flags & PBUF_FLAG_LLBCAST) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   251      /* don't route link-layer broadcasts */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   252      return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   253    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   254    if ((p->flags & PBUF_FLAG_LLMCAST) || IP_MULTICAST(addr)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   255      /* don't route link-layer multicasts (use LWIP_HOOK_IP4_CANFORWARD instead) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   256      return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   257    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   258    if (IP_EXPERIMENTAL(addr)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   259      return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   260    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   261    if (IP_CLASSA(addr)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   262      u32_t net = addr & IP_CLASSA_NET;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   263      if ((net == 0) || (net == ((u32_t)IP_LOOPBACKNET << IP_CLASSA_NSHIFT))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   264        /* don't route loopback packets */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   265        return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   266      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   267    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   268    return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   269  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   270  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   271  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   272   * Forwards an IP packet. It finds an appropriate route for the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   273   * packet, decrements the TTL value of the packet, adjusts the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   274   * checksum and outputs the packet on the appropriate interface.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   275   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   276   * @param p the packet to forward (p->payload points to IP header)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   277   * @param iphdr the IP header of the input packet
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   278   * @param inp the netif on which this packet was received
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   279   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   280  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   281  ip4_forward(struct pbuf *p, struct ip_hdr *iphdr, struct netif *inp)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   282  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   283    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   284  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   285    PERF_START;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   286    LWIP_UNUSED_ARG(inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   287  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   288    if (!ip4_canforward(p)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   289      goto return_noroute;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   290    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   291  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   292    /* RFC3927 2.7: do not forward link-local addresses */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   293    if (ip4_addr_islinklocal(ip4_current_dest_addr())) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   294      LWIP_DEBUGF(IP_DEBUG, ("ip4_forward: not forwarding LLA %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   295                             ip4_addr1_16(ip4_current_dest_addr()), ip4_addr2_16(ip4_current_dest_addr()),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   296                             ip4_addr3_16(ip4_current_dest_addr()), ip4_addr4_16(ip4_current_dest_addr())));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   297      goto return_noroute;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   298    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   299  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   300    /* Find network interface where to forward this IP packet to. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   301    netif = ip4_route_src(ip4_current_src_addr(), ip4_current_dest_addr());
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   302    if (netif == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   303      LWIP_DEBUGF(IP_DEBUG, ("ip4_forward: no forwarding route for %"U16_F".%"U16_F".%"U16_F".%"U16_F" found\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   304                             ip4_addr1_16(ip4_current_dest_addr()), ip4_addr2_16(ip4_current_dest_addr()),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   305                             ip4_addr3_16(ip4_current_dest_addr()), ip4_addr4_16(ip4_current_dest_addr())));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   306      /* @todo: send ICMP_DUR_NET? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   307      goto return_noroute;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   308    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   309  #if !IP_FORWARD_ALLOW_TX_ON_RX_NETIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   310    /* Do not forward packets onto the same network interface on which
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   311     * they arrived. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   312    if (netif == inp) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   313      LWIP_DEBUGF(IP_DEBUG, ("ip4_forward: not bouncing packets back on incoming interface.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   314      goto return_noroute;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   315    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   316  #endif /* IP_FORWARD_ALLOW_TX_ON_RX_NETIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   317  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   318    /* decrement TTL */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   319    IPH_TTL_SET(iphdr, IPH_TTL(iphdr) - 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   320    /* send ICMP if TTL == 0 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   321    if (IPH_TTL(iphdr) == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   322      MIB2_STATS_INC(mib2.ipinhdrerrors);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   323  #if LWIP_ICMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   324      /* Don't send ICMP messages in response to ICMP messages */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   325      if (IPH_PROTO(iphdr) != IP_PROTO_ICMP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   326        icmp_time_exceeded(p, ICMP_TE_TTL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   327      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   328  #endif /* LWIP_ICMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   329      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   330    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   331  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   332    /* Incrementally update the IP checksum. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   333    if (IPH_CHKSUM(iphdr) >= PP_HTONS(0xffffU - 0x100)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   334      IPH_CHKSUM_SET(iphdr, (u16_t)(IPH_CHKSUM(iphdr) + PP_HTONS(0x100) + 1));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   335    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   336      IPH_CHKSUM_SET(iphdr, (u16_t)(IPH_CHKSUM(iphdr) + PP_HTONS(0x100)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   337    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   338  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   339    LWIP_DEBUGF(IP_DEBUG, ("ip4_forward: forwarding packet to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   340                           ip4_addr1_16(ip4_current_dest_addr()), ip4_addr2_16(ip4_current_dest_addr()),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   341                           ip4_addr3_16(ip4_current_dest_addr()), ip4_addr4_16(ip4_current_dest_addr())));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   342  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   343    IP_STATS_INC(ip.fw);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   344    MIB2_STATS_INC(mib2.ipforwdatagrams);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   345    IP_STATS_INC(ip.xmit);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   346  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   347    PERF_STOP("ip4_forward");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   348    /* don't fragment if interface has mtu set to 0 [loopif] */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   349    if (netif->mtu && (p->tot_len > netif->mtu)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   350      if ((IPH_OFFSET(iphdr) & PP_NTOHS(IP_DF)) == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   351  #if IP_FRAG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   352        ip4_frag(p, netif, ip4_current_dest_addr());
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   353  #else /* IP_FRAG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   354        /* @todo: send ICMP Destination Unreachable code 13 "Communication administratively prohibited"? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   355  #endif /* IP_FRAG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   356      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   357  #if LWIP_ICMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   358        /* send ICMP Destination Unreachable code 4: "Fragmentation Needed and DF Set" */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   359        icmp_dest_unreach(p, ICMP_DUR_FRAG);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   360  #endif /* LWIP_ICMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   361      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   362      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   363    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   364    /* transmit pbuf on chosen interface */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   365    netif->output(netif, p, ip4_current_dest_addr());
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   366    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   367  return_noroute:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   368    MIB2_STATS_INC(mib2.ipoutnoroutes);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   369  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   370  #endif /* IP_FORWARD */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   371  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   372  /** Return true if the current input packet should be accepted on this netif */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   373  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   374  ip4_input_accept(struct netif *netif)
; Function ip4_input_accept
.L87:
ip4_input_accept:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   375  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   376    LWIP_DEBUGF(IP_DEBUG, ("ip_input: iphdr->dest 0x%"X32_F" netif->ip_addr 0x%"X32_F" (0x%"X32_F", 0x%"X32_F", 0x%"X32_F")\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   377                           ip4_addr_get_u32(ip4_current_dest_addr()), ip4_addr_get_u32(netif_ip4_addr(netif)),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   378                           ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   379                           ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   380                           ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   381  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   382    /* interface is up and configured? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   383    if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
	ld.bu	d15,[a4]41
.L465:
	jz.t	d15:0,.L18
.L466:
	ld.w	d15,[a4]4
	jeq	d15,#0,.L19
.L467:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   384      /* unicast to this interface address? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   385      if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
	movh.a	a15,#@his(ip_data+18)
	ld.w	d4,[a15]@los(ip_data+18)
	jeq	d15,d4,.L20
.L468:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   386          /* or broadcast on this interface network address? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   387          ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
	call	ip4_addr_isbroadcast_u32
.L210:
	jeq	d2,#0,.L21
.L20:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   388  #if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   389          || (ip4_addr_get_u32(ip4_current_dest_addr()) == PP_HTONL(IPADDR_LOOPBACK))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   390  #endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   391         ) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   392        LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   393                               netif->name[0], netif->name[1]));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   394        /* accept on this netif */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   395        return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   396      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   397  #if LWIP_AUTOIP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   398      /* connections to link-local addresses must persist after changing
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   399          the netif's address (RFC3927 ch. 1.9) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   400      if (autoip_accept_packet(netif, ip4_current_dest_addr())) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   401        LWIP_DEBUGF(IP_DEBUG, ("ip4_input: LLA packet accepted on interface %c%c\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   402                               netif->name[0], netif->name[1]));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   403        /* accept on this netif */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   404        return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   405      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   406  #endif /* LWIP_AUTOIP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   407    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   408    return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   409  }
	mov	d2,#1
	ret
.L21:
.L19:
.L18:
	mov	d2,#0
	ret
.L205:
	
__ip4_input_accept_function_end:
	.size	ip4_input_accept,__ip4_input_accept_function_end-ip4_input_accept
.L133:
	; End of function
	
	.sdecl	'.text.ip4.ip4_input',code,cluster('ip4_input')
	.sect	'.text.ip4.ip4_input'
	.align	2
	
	.global	ip4_input

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   410  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   411  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   412   * This function is called by the network interface device driver when
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   413   * an IP packet is received. The function does the basic checks of the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   414   * IP header such as packet size being at least larger than the header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   415   * size etc. If the packet was not destined for us, the packet is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   416   * forwarded (using ip_forward). The IP checksum is always checked.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   417   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   418   * Finally, the packet is sent to the upper layer protocol input function.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   419   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   420   * @param p the received IP packet (p->payload points to IP header)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   421   * @param inp the netif on which this packet was received
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   422   * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   423   *         processed, but currently always returns ERR_OK)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   424   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   425  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   426  ip4_input(struct pbuf *p, struct netif *inp)
; Function ip4_input
.L89:
ip4_input:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   427  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   428    const struct ip_hdr *iphdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   429    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   430    u16_t iphdr_hlen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   431    u16_t iphdr_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   432  #if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   433    int check_ip_src = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   434  #endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   435  #if LWIP_RAW
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   436    raw_input_state_t raw_status;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   437  #endif /* LWIP_RAW */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   438  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   439    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   440  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   441    IP_STATS_INC(ip.recv);
	movh.a	a14,#@his(lwip_stats)
	lea	a14,[a14]@los(lwip_stats)
	ld.hu	d15,[a14]74
.L346:
	mov.aa	a12,a4
.L248:
	add	d15,#1
	st.h	[a14]74,d15
.L347:
	sub.a	a10,#32
.L211:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   442    MIB2_STATS_INC(mib2.ipinreceives);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   443  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   444    /* identify the IP header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   445    iphdr = (struct ip_hdr *)p->payload;
	ld.a	a2,[a12]4
.L213:
	st.a	[a10],a2
.L245:
	mov.aa	a13,a5
.L243:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   446    if (IPH_V(iphdr) != 4) {
	ld.bu	d15,[a2]
	sha	d0,d15,#-4
.L348:
	jeq	d0,#4,.L24
.L349:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   447      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   448      ip4_debug_print(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   449      pbuf_free(p);
	call	pbuf_free
.L212:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   450      IP_STATS_INC(ip.err);
	ld.hu	d15,[a14]92
	add	d15,#1
	st.h	[a14]92,d15
.L350:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   451      IP_STATS_INC(ip.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   452      MIB2_STATS_INC(mib2.ipinhdrerrors);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   453      return ERR_OK;
	j	.L25
.L24:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   454    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   455  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   456  #ifdef LWIP_HOOK_IP4_INPUT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   457    if (LWIP_HOOK_IP4_INPUT(p, inp)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   458      /* the packet has been eaten */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   459      return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   460    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   461  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   462  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   463    /* obtain IP header length in bytes */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   464    iphdr_hlen = IPH_HL_BYTES(iphdr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   465    /* obtain ip length in bytes */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   466    iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
	ld.a	a15,[a10]
.L215:
	and	d15,#15
	sha	d9,d15,#2
.L217:
	ld.hu	d4,[a15]2
	call	lwip_htons
.L214:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   467  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   468    /* Trim pbuf. This is especially required for packets < 60 bytes. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   469    if (iphdr_len < p->tot_len) {
	mov	d8,d2
	ld.hu	d0,[a12]8
.L218:
	jge.u	d8,d0,.L26
.L351:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   470      pbuf_realloc(p, iphdr_len);
	mov.aa	a4,a12
.L219:
	mov	d4,d8
	call	pbuf_realloc
.L26:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   471    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   472  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   473    /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   474    if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
	ld.hu	d0,[a12]10
.L352:
	jlt.u	d0,d9,.L27
.L353:
	ld.hu	d0,[a12]8
.L354:
	jlt.u	d0,d8,.L28
.L355:
	mov	d15,#20
.L356:
	jge.u	d9,d15,.L29
.L28:
.L27:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   475      if (iphdr_hlen < IP_HLEN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   476        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   477                    ("ip4_input: short IP header (%"U16_F" bytes) received, IP packet dropped\n", iphdr_hlen));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   478      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   479      if (iphdr_hlen > p->len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   480        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   481                    ("IP header (len %"U16_F") does not fit in first pbuf (len %"U16_F"), IP packet dropped.\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   482                     iphdr_hlen, p->len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   483      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   484      if (iphdr_len > p->tot_len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   485        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   486                    ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   487                     iphdr_len, p->tot_len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   488      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   489      /* free (drop) packet pbufs */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   490      pbuf_free(p);
	mov.aa	a4,a12
.L220:
	call	pbuf_free
.L221:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   491      IP_STATS_INC(ip.lenerr);
	ld.hu	d15,[a14]82
	add	d15,#1
	st.h	[a14]82,d15
.L357:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   492      IP_STATS_INC(ip.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   493      MIB2_STATS_INC(mib2.ipindiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   494      return ERR_OK;
	j	.L30
.L29:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   495    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   496  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   497    /* verify checksum */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   498  #if CHECKSUM_CHECK_IP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   499    IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   500      if (inet_chksum(iphdr, iphdr_hlen) != 0) {
	ld.a	a4,[a10]
.L216:
	mov	d4,d9
	call	inet_chksum
.L222:
	jeq	d2,#0,.L31
.L358:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   501  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   502        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   503                    ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   504        ip4_debug_print(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   505        pbuf_free(p);
	mov.aa	a4,a12
.L223:
	call	pbuf_free
.L224:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   506        IP_STATS_INC(ip.chkerr);
	ld.hu	d15,[a14]80
	add	d15,#1
	st.h	[a14]80,d15
.L359:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   507        IP_STATS_INC(ip.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   508        MIB2_STATS_INC(mib2.ipinhdrerrors);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   509        return ERR_OK;
	j	.L32
.L31:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   510      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   511    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   512  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   513  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   514    /* copy IP addresses to aligned ip_addr_t */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   515    ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
	movh.a	a2,#@his(ip_data)
	lea	a2,[a2]@los(ip_data)
	st.a	[a10]4,a2
	lea	a15,[a2]18
	st.a	[a10]8,a15
.L360:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   516    ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
	lea	a4,[a2]14
.L361:
	ld.a	a15,[a10]
.L225:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   517  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   518    /* match packet against an interface, i.e. is this packet for us? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   519    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
	mov	d0,#224
.L362:
	ld.w	d15,[a15]16
	st.w	[a2]18,d15
.L363:
	st.a	[a10]16,a4
	ld.w	d15,[a15]12
	st.w	[a2]14,d15
.L364:
	ld.w	d15,[a2]18
	and	d15,#240
.L365:
	jne	d15,d0,.L33
.L366:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   520  #if LWIP_IGMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   521      if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   522        /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   523        ip4_addr_t allsystems;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   524        IP4_ADDR(&allsystems, 224, 0, 0, 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   525        if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   526            ip4_addr_isany(ip4_current_src_addr())) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   527          check_ip_src = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   528        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   529        netif = inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   530      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   531        netif = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   532      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   533  #else /* LWIP_IGMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   534      if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
	ld.bu	d15,[a13]41
.L367:
	jz.t	d15:0,.L34
.L368:
	ld.w	d15,[a13]4
	jne	d15,#0,.L35
.L34:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   535        netif = inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   536      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   537        netif = NULL;
	mov.a	a15,#0
.L226:
	st.a	[a10]28,a15
.L227:
	j	.L36
.L33:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   538      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   539  #endif /* LWIP_IGMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   540    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   541      /* start trying with inp. if that's not acceptable, start walking the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   542         list of configured netifs. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   543      if (ip4_input_accept(inp)) {
	mov.aa	a4,a13
.L229:
	call	ip4_input_accept
.L230:
	jeq	d2,#0,.L37
.L35:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   544        netif = inp;
	st.a	[a10]28,a13
.L231:
	j	.L38
.L37:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   545      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   546        netif = NULL;
	mov.a	a15,#0
.L228:
	st.a	[a10]28,a15
.L233:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   547  #if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   548        /* Packets sent to the loopback address must not be accepted on an
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   549         * interface that does not have the loopback address assigned to it,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   550         * unless a non-loopback interface is used for loopback traffic. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   551        if (!ip4_addr_isloopback(ip4_current_dest_addr()))
	mov	d0,#127
	ld.a	a15,[a10]8
.L232:
	ld.w	d15,[a15]
	and	d15,#255
	jeq	d15,d0,.L39
.L369:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   552  #endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   553        {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   554  #if !LWIP_SINGLE_NETIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   555          NETIF_FOREACH(netif) {
	ld.a	a15,netif_list
.L234:
	j	.L40
.L41:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   556            if (netif == inp) {
	jeq.a	a15,a13,.L42
.L235:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   557              /* we checked that before already */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   558              continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   559            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   560            if (ip4_input_accept(netif)) {
	ld.a	a4,[a10]28
.L236:
	call	ip4_input_accept
.L237:
	jne	d2,#0,.L43
.L42:
	ld.a	a15,[a15]
.L40:
	st.a	[a10]28,a15
	jnz.a	a15,.L41

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   561              break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   562            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   563          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   564  #endif /* !LWIP_SINGLE_NETIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   565        }
.L43:
.L39:
.L38:
.L36:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   566      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   567    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   568  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   569  #if IP_ACCEPT_LINK_LAYER_ADDRESSING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   570    /* Pass DHCP messages regardless of destination address. DHCP traffic is addressed
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   571     * using link layer addressing (such as Ethernet MAC) so we must not filter on IP.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   572     * According to RFC 1542 section 3.1.1, referred by RFC 2131).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   573     *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   574     * If you want to accept private broadcast communication while a netif is down,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   575     * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   576     *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   577     * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   578     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   579    if (netif == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   580      /* remote port is DHCP server? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   581      if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   582        const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   583        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   584                                                lwip_ntohs(udphdr->dest)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   585        if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   586          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   587          netif = inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   588          check_ip_src = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   589        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   590      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   591    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   592  #endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   593  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   594    /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   595  #if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   596    if (check_ip_src
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   597  #if IP_ACCEPT_LINK_LAYER_ADDRESSING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   598        /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   599        && !ip4_addr_isany_val(*ip4_current_src_addr())
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   600  #endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   601       )
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   602  #endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   603    {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   604      if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
	ld.a	a15,[a10]16
	mov.aa	a4,a13
.L238:
	ld.w	d4,[a15]
	call	ip4_addr_isbroadcast_u32
.L239:
	jne	d2,#0,.L44
.L370:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   605          (ip4_addr_ismulticast(ip4_current_src_addr()))) {
	ld.w	d15,[a15]
	mov	d0,#224
	and	d15,#240
	jne	d15,d0,.L45
.L44:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   606        /* packet source is not valid */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   607        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   608        /* free (drop) packet pbufs */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   609        pbuf_free(p);
	mov.aa	a4,a12
.L240:
	call	pbuf_free

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   610        IP_STATS_INC(ip.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   611        MIB2_STATS_INC(mib2.ipinaddrerrors);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   612        MIB2_STATS_INC(mib2.ipindiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   613        return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   614      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   615    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   616  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   617    /* packet not for us? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   618    if (netif == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   619      /* packet not for us, route or discard */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   620      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: packet not for us.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   621  #if IP_FORWARD
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   622      /* non-broadcast packet? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   623      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), inp)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   624        /* try to forward IP packet on (other) interfaces */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   625        ip4_forward(p, (struct ip_hdr *)p->payload, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   626      } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   627  #endif /* IP_FORWARD */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   628      {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   629        IP_STATS_INC(ip.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   630        MIB2_STATS_INC(mib2.ipinaddrerrors);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   631        MIB2_STATS_INC(mib2.ipindiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   632      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   633      pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   634      return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   635    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   636    /* packet consists of multiple fragments? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   637    if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   638  #if IP_REASSEMBLY /* packet fragment reassembly code present? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   639      LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   640                             lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   641      /* reassemble the packet*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   642      p = ip4_reass(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   643      /* packet not fully reassembled yet? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   644      if (p == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   645        return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   646      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   647      iphdr = (const struct ip_hdr *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   648  #else /* IP_REASSEMBLY == 0, no packet fragment reassembly code present */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   649      pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   650      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since it was fragmented (0x%"X16_F") (while IP_REASSEMBLY == 0).\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   651                  lwip_ntohs(IPH_OFFSET(iphdr))));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   652      IP_STATS_INC(ip.opterr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   653      IP_STATS_INC(ip.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   654      /* unsupported protocol feature */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   655      MIB2_STATS_INC(mib2.ipinunknownprotos);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   656      return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   657  #endif /* IP_REASSEMBLY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   658    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   659  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   660  #if IP_OPTIONS_ALLOWED == 0 /* no support for IP options in the IP header? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   661  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   662  #if LWIP_IGMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   663    /* there is an extra "router alert" option in IGMP messages which we allow for but do not police */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   664    if ((iphdr_hlen > IP_HLEN) &&  (IPH_PROTO(iphdr) != IP_PROTO_IGMP)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   665  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   666    if (iphdr_hlen > IP_HLEN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   667  #endif /* LWIP_IGMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   668      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since there were IP options (while IP_OPTIONS_ALLOWED == 0).\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   669      pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   670      IP_STATS_INC(ip.opterr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   671      IP_STATS_INC(ip.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   672      /* unsupported protocol feature */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   673      MIB2_STATS_INC(mib2.ipinunknownprotos);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   674      return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   675    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   676  #endif /* IP_OPTIONS_ALLOWED == 0 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   677  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   678    /* send to upper layers */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   679    LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   680    ip4_debug_print(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   681    LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   682  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   683    ip_data.current_netif = netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   684    ip_data.current_input_netif = inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   685    ip_data.current_ip4_header = iphdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   686    ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   687  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   688  #if LWIP_RAW
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   689    /* raw input did not eat the packet? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   690    raw_status = raw_input(p, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   691    if (raw_status != RAW_INPUT_EATEN)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   692  #endif /* LWIP_RAW */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   693    {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   694      pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   695  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   696      switch (IPH_PROTO(iphdr)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   697  #if LWIP_UDP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   698        case IP_PROTO_UDP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   699  #if LWIP_UDPLITE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   700        case IP_PROTO_UDPLITE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   701  #endif /* LWIP_UDPLITE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   702          MIB2_STATS_INC(mib2.ipindelivers);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   703          udp_input(p, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   704          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   705  #endif /* LWIP_UDP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   706  #if LWIP_TCP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   707        case IP_PROTO_TCP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   708          MIB2_STATS_INC(mib2.ipindelivers);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   709          tcp_input(p, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   710          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   711  #endif /* LWIP_TCP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   712  #if LWIP_ICMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   713        case IP_PROTO_ICMP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   714          MIB2_STATS_INC(mib2.ipindelivers);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   715          icmp_input(p, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   716          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   717  #endif /* LWIP_ICMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   718  #if LWIP_IGMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   719        case IP_PROTO_IGMP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   720          igmp_input(p, inp, ip4_current_dest_addr());
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   721          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   722  #endif /* LWIP_IGMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   723        default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   724  #if LWIP_RAW
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   725          if (raw_status == RAW_INPUT_DELIVERED) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   726            MIB2_STATS_INC(mib2.ipindelivers);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   727          } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   728  #endif /* LWIP_RAW */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   729          {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   730  #if LWIP_ICMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   731            /* send ICMP destination protocol unreachable unless is was a broadcast */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   732            if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   733                !ip4_addr_ismulticast(ip4_current_dest_addr())) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   734              pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   735              icmp_dest_unreach(p, ICMP_DUR_PROTO);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   736            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   737  #endif /* LWIP_ICMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   738  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   739            LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   740  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   741            IP_STATS_INC(ip.proterr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   742            IP_STATS_INC(ip.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   743            MIB2_STATS_INC(mib2.ipinunknownprotos);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   744          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   745          pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   746          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   747      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   748    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   749  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   750    /* @todo: this is not really necessary... */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   751    ip_data.current_netif = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   752    ip_data.current_input_netif = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   753    ip_data.current_ip4_header = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   754    ip_data.current_ip_header_tot_len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   755    ip4_addr_set_any(ip4_current_src_addr());
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   756    ip4_addr_set_any(ip4_current_dest_addr());
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   757  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   758    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   759  }
.L32:
.L30:
.L25:
	ld.hu	d15,[a14]78
	add	d15,#1
	st.h	[a14]78,d15
.L371:
	j	.L46
.L45:
	ld.a	a15,[a10]28
.L246:
	jnz.a	a15,.L47
.L372:
	fcall	.cocofun_25
.L250:
	call	pbuf_free
.L251:
	j	.L48
.L47:
	ld.a	a15,[a10]
.L247:
	ld.hu	d15,[a15]6
.L373:
	mov.u	d0,#65343
.L374:
	and	d15,d0
.L375:
	jeq	d15,#0,.L49
.L376:
	mov.aa	a4,a12
.L252:
	call	ip4_reass
.L249:
	mov.aa	a12,a2
.L253:
	jz.a	a12,.L50
.L377:
	ld.a	a15,[a12]4
	st.a	[a10],a15
.L49:
	ld.a	a15,[a10]4
	ld.a	a2,[a10]28
.L254:
	mov	d4,d9
	mov.aa	a4,a12
.L256:
	st.a	[a15],a2
.L378:
	st.a	[+a15]4,a13
	st.a	[a10]12,a15
.L379:
	ld.a	a15,[a10]4
	ld.a	a2,[a10]
.L255:
	st.a	[a15]8,a2
.L380:
	ld.a	a15,[a10]
.L258:
	ld.bu	d15,[a15]
.L381:
	ld.a	a15,[a10]4
.L259:
	and	d15,#15
	sha	d15,#2
.L382:
	st.h	[a15]12,d15
.L383:
	call	pbuf_remove_header
.L257:
	ld.a	a15,[a10]
.L260:
	ld.bu	d15,[a15]9
.L384:
	jeq	d15,#1,.L51
.L385:
	jeq	d15,#6,.L52
.L386:
	mov	d0,#17
	jne	d15,d0,.L54
.L387:
	mov.aa	a4,a12
.L262:
	mov.aa	a5,a13
.L264:
	call	udp_input
.L263:
	j	.L55
.L52:
	mov.aa	a4,a12
.L265:
	mov.aa	a5,a13
.L267:
	call	tcp_input
.L266:
	j	.L56
.L51:
	mov.aa	a4,a12
.L268:
	mov.aa	a5,a13
.L270:
	call	icmp_input
.L269:
	j	.L57
.L54:
	ld.a	a15,[a10]8
.L261:
	ld.a	a4,[a10]28
.L271:
	ld.w	d4,[a15]
	call	ip4_addr_isbroadcast_u32
.L272:
	jne	d2,#0,.L58
.L388:
	ld.w	d15,[a15]
	mov	d0,#224
	and	d15,#240
	jeq	d15,d0,.L59
.L389:
	mov.aa	a4,a12
.L273:
	mov	d4,d9
	call	pbuf_header_force
.L274:
	mov	d4,#2
	mov.aa	a4,a12
.L275:
	call	icmp_dest_unreach
.L59:
.L58:
	ld.hu	d15,[a14]88
	add	d15,#1
	st.h	[a14]88,d15
.L244:
	fcall	.cocofun_25
.L276:
	call	pbuf_free
.L57:
.L56:
.L55:
	ld.a	a15,[a10]4
.L390:
	mov.a	a2,#0
.L391:
	mov	d15,#0
.L392:
	st.a	[a15],a2
.L393:
	ld.a	a15,[a10]12
	st.a	[a15],a2
.L394:
	ld.a	a15,[a10]4
	st.a	[a15]8,a2
.L395:
	st.h	[a15]12,d15
.L396:
	st.w	[a15]14,d15
.L397:
	st.w	[a15]18,d15
.L50:
.L48:
.L46:
	mov	d2,#0
	ret
.L158:
	
__ip4_input_function_end:
	.size	ip4_input,__ip4_input_function_end-ip4_input
.L113:
	; End of function
	
	.sdecl	'.text.ip4..cocofun_25',code,cluster('.cocofun_25')
	.sect	'.text.ip4..cocofun_25'
	.align	2
; Function .cocofun_25
.L91:
.cocofun_25:	.type	func
; Function body .cocofun_25, coco_iter:0
	ld.hu	d15,[a14]78
.L477:
	mov.aa	a4,a12
.L242:
	add	d15,#1
	st.h	[a14]78,d15
.L241:
	fret
.L143:
	; End of function
	.sdecl	'.text.ip4.ip4_output_if',code,cluster('ip4_output_if')
	.sect	'.text.ip4.ip4_output_if'
	.align	2
	
	.global	ip4_output_if

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   760  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   761  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   762   * Sends an IP packet on a network interface. This function constructs
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   763   * the IP header and calculates the IP header checksum. If the source
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   764   * IP address is NULL, the IP address of the outgoing network
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   765   * interface is filled in as source address.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   766   * If the destination IP address is LWIP_IP_HDRINCL, p is assumed to already
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   767   * include an IP header and p->payload points to it instead of the data.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   768   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   769   * @param p the packet to send (p->payload points to the data, e.g. next
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   770              protocol header; if dest == LWIP_IP_HDRINCL, p already includes an
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   771              IP header and p->payload points to that IP header)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   772   * @param src the source IP address to send from (if src == IP4_ADDR_ANY, the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   773   *         IP  address of the netif used to send is used as source address)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   774   * @param dest the destination IP address to send the packet to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   775   * @param ttl the TTL value to be set in the IP header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   776   * @param tos the TOS value to be set in the IP header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   777   * @param proto the PROTOCOL to be set in the IP header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   778   * @param netif the netif on which to send this packet
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   779   * @return ERR_OK if the packet was sent OK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   780   *         ERR_BUF if p doesn't have enough space for IP/LINK headers
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   781   *         returns errors returned by netif->output
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   782   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   783   * @note ip_id: RFC791 "some host may be able to simply use
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   784   *  unique identifiers independent of destination"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   785   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   786  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   787  ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
; Function ip4_output_if
.L93:
ip4_output_if:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   788                u8_t ttl, u8_t tos,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   789                u8_t proto, struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   790  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   791  #if IP_OPTIONS_SEND
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   792    return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   793  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   794  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   795  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   796   * Same as ip_output_if() but with the possibility to include IP options:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   797   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   798   * @ param ip_options pointer to the IP options, copied into the IP header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   799   * @ param optlen length of ip_options
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   800   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   801  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   802  ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   803                    u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   804                    u16_t optlen)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   805  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   806  #endif /* IP_OPTIONS_SEND */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   807    const ip4_addr_t *src_used = src;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   808    if (dest != LWIP_IP_HDRINCL) {
	jz.a	a6,.L61
.L410:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   809      if (ip4_addr_isany(src)) {
	jz.a	a5,.L62
.L411:
	ld.w	d15,[a5]
	jne	d15,#0,.L63
.L62:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   810        src_used = netif_ip4_addr(netif);
	lea	a5,[a7]4
.L63:
.L61:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   811      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   812    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   813  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   814  #if IP_OPTIONS_SEND
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   815    return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   816                                 ip_options, optlen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   817  #else /* IP_OPTIONS_SEND */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   818    return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
	j	ip4_output_if_src
.L178:
	
__ip4_output_if_function_end:
	.size	ip4_output_if,__ip4_output_if_function_end-ip4_output_if
.L123:
	; End of function
	
	.sdecl	'.text.ip4.ip4_output_if_src',code,cluster('ip4_output_if_src')
	.sect	'.text.ip4.ip4_output_if_src'
	.align	2
	
	.global	ip4_output_if_src

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   819  #endif /* IP_OPTIONS_SEND */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   820  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   821  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   822  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   823   * Same as ip_output_if() but 'src' address is not replaced by netif address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   824   * when it is 'any'.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   825   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   826  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   827  ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
; Function ip4_output_if_src
.L95:
ip4_output_if_src:	.type	func
	mov.aa	a12,a4
.L285:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   828                    u8_t ttl, u8_t tos,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   829                    u8_t proto, struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   830  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   831  #if IP_OPTIONS_SEND
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   832    return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   833  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   834  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   835  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   836   * Same as ip_output_if_opt() but 'src' address is not replaced by netif address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   837   * when it is 'any'.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   838   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   839  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   840  ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   841                        u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   842                        u16_t optlen)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   843  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   844  #endif /* IP_OPTIONS_SEND */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   845    struct ip_hdr *iphdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   846    ip4_addr_t dest_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   847  #if CHECKSUM_GEN_IP_INLINE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   848    u32_t chk_sum = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   849  #endif /* CHECKSUM_GEN_IP_INLINE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   850  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   851    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   852    LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
	mov	e8,d5,d4
	ld.bu	d15,[a12]14
.L416:
	mov	d10,d6
	sub.a	a10,#24
.L277:
	st.a	[a10]16,a5
.L286:
	mov.aa	a13,a6
.L282:
	mov.aa	a14,a7
.L284:
	jeq	d15,#1,.L65
.L417:
	movh.a	a2,#@his(.16.str)
	lea	a2,[a2]@los(.16.str)
	st.a	[a10],a2
	mov	d15,#852
	st.w	[a10]4,d15
	movh.a	a15,#@his(.17.str)
	lea	a15,[a15]@los(.17.str)
	st.a	[a10]8,a15
	fcall	.cocofun_26
.L278:
	call	Ifx_Lwip_printf
.L65:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   853  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   854    MIB2_STATS_INC(mib2.ipoutrequests);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   855  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   856    /* Should the IP header be generated or is it already included in p? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   857    if (dest != LWIP_IP_HDRINCL) {
	jz.a	a13,.L66
.L202:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   858      u16_t ip_hlen = IP_HLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   859  #if IP_OPTIONS_SEND
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   860      u16_t optlen_aligned = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   861      if (optlen != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   862  #if CHECKSUM_GEN_IP_INLINE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   863        int i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   864  #endif /* CHECKSUM_GEN_IP_INLINE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   865        if (optlen > (IP_HLEN_MAX - IP_HLEN)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   866          /* optlen too long */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   867          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: optlen too long\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   868          IP_STATS_INC(ip.err);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   869          MIB2_STATS_INC(mib2.ipoutdiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   870          return ERR_VAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   871        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   872        /* round up to a multiple of 4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   873        optlen_aligned = (u16_t)((optlen + 3) & ~3);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   874        ip_hlen = (u16_t)(ip_hlen + optlen_aligned);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   875        /* First write in the IP options */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   876        if (pbuf_add_header(p, optlen_aligned)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   877          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   878          IP_STATS_INC(ip.err);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   879          MIB2_STATS_INC(mib2.ipoutdiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   880          return ERR_BUF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   881        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   882        MEMCPY(p->payload, ip_options, optlen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   883        if (optlen < optlen_aligned) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   884          /* zero the remaining bytes */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   885          memset(((char *)p->payload) + optlen, 0, (size_t)(optlen_aligned - optlen));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   886        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   887  #if CHECKSUM_GEN_IP_INLINE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   888        for (i = 0; i < optlen_aligned / 2; i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   889          chk_sum += ((u16_t *)p->payload)[i];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   890        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   891  #endif /* CHECKSUM_GEN_IP_INLINE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   892      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   893  #endif /* IP_OPTIONS_SEND */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   894      /* generate IP header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   895      if (pbuf_add_header(p, IP_HLEN)) {
	mov	d4,#20
	mov.aa	a4,a12
.L280:
	call	pbuf_add_header
.L281:
	jne	d2,#0,.L67
.L418:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   896        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   897  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   898        IP_STATS_INC(ip.err);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   899        MIB2_STATS_INC(mib2.ipoutdiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   900        return ERR_BUF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   901      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   902  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   903      iphdr = (struct ip_hdr *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   904      LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
	mov	d15,#20
	ld.hu	d0,[a12]10
.L419:
	ld.a	a15,[a12]4
.L283:
	jge.u	d0,d15,.L68
.L420:
	movh.a	a2,#@his(.19.str)
	lea	a2,[a2]@los(.19.str)
	st.a	[a10],a2
	mov	d15,#904
	st.w	[a10]4,d15
	movh.a	a2,#@his(.17.str)
	lea	a2,[a2]@los(.17.str)
	st.a	[a10]8,a2
	fcall	.cocofun_26
	call	Ifx_Lwip_printf
.L68:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   905                  (p->len >= sizeof(struct ip_hdr)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   906  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   907      IPH_TTL_SET(iphdr, ttl);
	st.b	[a15]8,d8
.L287:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   908      IPH_PROTO_SET(iphdr, proto);
	st.b	[a15]9,d10
.L421:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   909  #if CHECKSUM_GEN_IP_INLINE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   910      chk_sum += PP_NTOHS(proto | (ttl << 8));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   911  #endif /* CHECKSUM_GEN_IP_INLINE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   912  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   913      /* dest cannot be NULL here */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   914      ip4_addr_copy(iphdr->dest, *dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   915  #if CHECKSUM_GEN_IP_INLINE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   916      chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   917      chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   918  #endif /* CHECKSUM_GEN_IP_INLINE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   919  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   920      IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
	mov	d15,#69
.L422:
	ld.w	d11,[a13]
	st.w	[a15]16,d11
.L423:
	st.b	[a15],d15
.L288:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   921      IPH_TOS_SET(iphdr, tos);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   922  #if CHECKSUM_GEN_IP_INLINE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   923      chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
	sha	d0,d15,#8
	st.b	[a15]1,d9
.L289:
	sha	d8,d8,#8
.L290:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   924  #endif /* CHECKSUM_GEN_IP_INLINE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   925      IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
	ld.hu	d4,[a12]8
.L424:
	or	d8,d10
.L425:
	or	d9,d0
	call	lwip_htons
.L426:
	and	d15,d8,#255
	st.h	[a15]2,d2
.L427:
	insert	d0,d11,#0,#16,#16
.L428:
	sha	d15,d15,#8
	sha	d8,#-8
	or	d15,d8
.L429:
	add	d15,d0
.L430:
	sh	d0,d11,#-16
.L431:
	add	d0,d15
.L432:
	and	d15,d9,#255
	sha	d15,d15,#8
	sha	d9,#-8
	or	d15,d9
.L433:
	add	d0,d15
.L434:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   926  #if CHECKSUM_GEN_IP_INLINE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   927      chk_sum += iphdr->_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   928  #endif /* CHECKSUM_GEN_IP_INLINE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   929      IPH_OFFSET_SET(iphdr, 0);
	mov	d15,#0
	st.h	[a15]6,d15
.L435:
	add	d8,d0,d2
.L291:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   930      IPH_ID_SET(iphdr, lwip_htons(ip_id));
	ld.hu	d4,ip_id
	call	lwip_htons
	st.h	[a15]4,d2
.L436:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   931  #if CHECKSUM_GEN_IP_INLINE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   932      chk_sum += iphdr->_id;
	add	d8,d2
.L437:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   933  #endif /* CHECKSUM_GEN_IP_INLINE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   934      ++ip_id;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   935  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   936      if (src == NULL) {
	ld.a	a2,[a10]16
.L293:
	ld.hu	d15,ip_id
.L438:
	add	d15,#1
	st.h	ip_id,d15
.L439:
	jnz.a	a2,.L69
.L440:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   937        ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
	ld.w	d15,ip_addr_any
.L441:
	j	.L70
.L69:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   938      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   939        /* src cannot be NULL here */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   940        ip4_addr_copy(iphdr->src, *src);
	ld.w	d15,[a2]
.L70:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   941      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   942  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   943  #if CHECKSUM_GEN_IP_INLINE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   944      chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
	insert	d0,d15,#0,#16,#16
	st.w	[a15]12,d15
.L442:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   945      chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
	sh	d15,d15,#-16
.L443:
	add	d8,d0
.L444:
	add	d8,d15
.L445:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   946      chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
	insert	d0,d8,#0,#16,#16
.L446:
	sh	d15,d8,#-16
.L294:
	add	d15,d0
.L292:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   947      chk_sum = (chk_sum >> 16) + chk_sum;
	sh	d0,d15,#-16
.L447:
	add	d0,d15
.L448:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   948      chk_sum = ~chk_sum;
	mov	d15,#-1
.L295:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   949      IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   950        iphdr->_chksum = (u16_t)chk_sum; /* network order */
	xor	d0,d15
	st.h	[a15]10,d0
.L203:
	j	.L71
.L66:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   951      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   952  #if LWIP_CHECKSUM_CTRL_PER_NETIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   953      else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   954        IPH_CHKSUM_SET(iphdr, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   955      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   956  #endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   957  #else /* CHECKSUM_GEN_IP_INLINE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   958      IPH_CHKSUM_SET(iphdr, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   959  #if CHECKSUM_GEN_IP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   960      IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   961        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, ip_hlen));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   962      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   963  #endif /* CHECKSUM_GEN_IP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   964  #endif /* CHECKSUM_GEN_IP_INLINE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   965    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   966      /* IP header already included in p */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   967      if (p->len < IP_HLEN) {
	ld.hu	d0,[a12]10
.L449:
	mov	d15,#20
.L450:
	jge.u	d0,d15,.L72
.L67:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   968        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   969        IP_STATS_INC(ip.err);
	movh.a	a15,#@his(lwip_stats+92)
	ld.hu	d15,[a15]@los(lwip_stats+92)
.L451:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   970        MIB2_STATS_INC(mib2.ipoutdiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   971        return ERR_BUF;
	mov	d2,#-2
.L452:
	add	d15,#1
	st.h	[a15]@los(lwip_stats+92),d15
.L453:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   972      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   973      iphdr = (struct ip_hdr *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   974      ip4_addr_copy(dest_addr, iphdr->dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   975      dest = &dest_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   976    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   977  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   978    IP_STATS_INC(ip.xmit);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   979  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   980    LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   981    ip4_debug_print(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   982  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   983  #if ENABLE_LOOPBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   984    if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   985  #if !LWIP_HAVE_LOOPIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   986        || ip4_addr_isloopback(dest)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   987  #endif /* !LWIP_HAVE_LOOPIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   988       ) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   989      /* Packet to self, enqueue it for loopback */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   990      LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   991      return netif_loop_output(netif, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   992    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   993  #if LWIP_MULTICAST_TX_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   994    if ((p->flags & PBUF_FLAG_MCASTLOOP) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   995      netif_loop_output(netif, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   996    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   997  #endif /* LWIP_MULTICAST_TX_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   998  #endif /* ENABLE_LOOPBACK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	   999  #if IP_FRAG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1000    /* don't fragment if interface has mtu set to 0 [loopif] */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1001    if (netif->mtu && (p->tot_len > netif->mtu)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1002      return ip4_frag(p, netif, dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1003    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1004  #endif /* IP_FRAG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1005  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1006    LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1007    return netif->output(netif, p, dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1008  }
	ret
.L72:
	ld.a	a15,[a12]4
.L296:
	lea	a13,[a10]12
.L454:
	ld.w	d15,[a15]16
	st.w	[a10]12,d15
.L71:
	movh.a	a15,#@his(lwip_stats+72)
	ld.hu	d15,[a15]@los(lwip_stats+72)
	add	d15,#1
	st.h	[a15]@los(lwip_stats+72),d15
.L455:
	ld.hu	d15,[a14]32
.L456:
	jeq	d15,#0,.L74
.L457:
	ld.hu	d0,[a12]8
.L458:
	jge.u	d15,d0,.L75
.L459:
	mov.aa	a4,a12
.L297:
	mov.aa	a5,a14
.L298:
	mov.aa	a6,a13
.L299:
	j	ip4_frag
.L75:
.L74:
	ld.a	a15,[a14]20
.L460:
	mov.aa	a4,a14
.L300:
	mov.aa	a5,a12
.L301:
	mov.aa	a6,a13
.L302:
	ji	a15
.L187:
	
__ip4_output_if_src_function_end:
	.size	ip4_output_if_src,__ip4_output_if_src_function_end-ip4_output_if_src
.L128:
	; End of function
	
	.sdecl	'.text.ip4..cocofun_26',code,cluster('.cocofun_26')
	.sect	'.text.ip4..cocofun_26'
	.align	2
; Function .cocofun_26
.L97:
.cocofun_26:	.type	func
; Function body .cocofun_26, coco_iter:0
	movh.a	a4,#@his(.15.str)
.L279:
	lea	a4,[a4]@los(.15.str)
.L482:
	fret
.L148:
	; End of function
	.sdecl	'.text.ip4.ip4_output',code,cluster('ip4_output')
	.sect	'.text.ip4.ip4_output'
	.align	2
	
	.global	ip4_output

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1009  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1010  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1011   * Simple interface to ip_output_if. It finds the outgoing network
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1012   * interface and calls upon ip_output_if to do the actual work.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1013   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1014   * @param p the packet to send (p->payload points to the data, e.g. next
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1015              protocol header; if dest == LWIP_IP_HDRINCL, p already includes an
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1016              IP header and p->payload points to that IP header)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1017   * @param src the source IP address to send from (if src == IP4_ADDR_ANY, the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1018   *         IP  address of the netif used to send is used as source address)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1019   * @param dest the destination IP address to send the packet to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1020   * @param ttl the TTL value to be set in the IP header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1021   * @param tos the TOS value to be set in the IP header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1022   * @param proto the PROTOCOL to be set in the IP header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1023   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1024   * @return ERR_RTE if no route is found
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1025   *         see ip_output_if() for more return values
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1026   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1027  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1028  ip4_output(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
; Function ip4_output
.L99:
ip4_output:	.type	func
	mov.aa	a12,a4
.L308:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1029             u8_t ttl, u8_t tos, u8_t proto)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1030  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1031    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1032  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1033    LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
	mov	e8,d5,d4
	ld.bu	d15,[a12]14
.L402:
	mov	d10,d6
	mov.aa	a13,a5
.L309:
	mov.aa	a14,a6
.L307:
	sub.a	a10,#16
.L303:
	jeq	d15,#1,.L78
.L403:
	movh.a	a2,#@his(.16.str)
	lea	a2,[a2]@los(.16.str)
	st.a	[a10],a2
	mov	d15,#1033
	st.w	[a10]4,d15
	movh.a	a15,#@his(.17.str)
	lea	a15,[a15]@los(.17.str)
	st.a	[a10]8,a15
	fcall	.cocofun_26
.L304:
	call	Ifx_Lwip_printf
.L78:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1034  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1035    if ((netif = ip4_route_src(src, dest)) == NULL) {
	mov.aa	a4,a14
.L305:
	call	ip4_route
.L306:
	jnz.a	a2,.L79
.L404:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1036      LWIP_DEBUGF(IP_DEBUG, ("ip4_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1037                             ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1038      IP_STATS_INC(ip.rterr);
	fcall	.cocofun_24
.L405:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1039      return ERR_RTE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1040    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1041  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1042    return ip4_output_if(p, src, dest, ttl, tos, proto, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1043  }
	mov	d2,#-4
	ret
.L79:
	mov	e4,d9,d8
	mov.aa	a4,a12
.L310:
	mov	d6,d10
	mov.aa	a5,a13
.L311:
	mov.aa	a6,a14
.L312:
	mov.aa	a7,a2
.L313:
	j	ip4_output_if
.L169:
	
__ip4_output_function_end:
	.size	ip4_output,__ip4_output_function_end-ip4_output
.L118:
	; End of function
	
	.sdecl	'.zbss.ip4.ip_id',data,cluster('ip_id')
	.sect	'.zbss.ip4.ip_id'
	.align	2
ip_id:	.type	object
	.size	ip_id,2
	.space	2
	.sdecl	'.rodata.ip4..15.str',data,rom
	.sect	'.rodata.ip4..15.str'
.15.str:	.type	object
	.size	.15.str,40
	.byte	65,115,115,101
	.byte	114,116,105,111
	.byte	110,32,34,37
	.byte	115,34,32,102
	.byte	97,105,108,101
	.byte	100,32,97,116
	.byte	32,108,105,110
	.byte	101,32,37,100
	.byte	32,105,110,32
	.byte	37,115,10
	.space	1
	.sdecl	'.rodata.ip4..16.str',data,rom
	.sect	'.rodata.ip4..16.str'
.16.str:	.type	object
	.size	.16.str,12
	.byte	112,45,62,114
	.byte	101,102,32,61
	.byte	61,32,49
	.space	1
	.sdecl	'.rodata.ip4..17.str',data,rom
	.sect	'.rodata.ip4..17.str'
.17.str:	.type	object
	.size	.17.str,51
	.byte	46,46,92,48
	.byte	95,83,114,99
	.byte	92,48,95,65
	.byte	112,112,83,119
	.byte	92,69,116,104
	.byte	101,114,110,101
	.byte	116,92,108,119
	.byte	105,112,92,115
	.byte	114,99,92,99
	.byte	111,114,101,92
	.byte	105,112,118,52
	.byte	92,105,112,52
	.byte	46,99
	.space	1
	.sdecl	'.rodata.ip4..19.str',data,rom
	.sect	'.rodata.ip4..19.str'
.19.str:	.type	object
	.size	.19.str,45
	.byte	99,104,101,99
	.byte	107,32,116,104
	.byte	97,116,32,102
	.byte	105,114,115,116
	.byte	32,112,98,117
	.byte	102,32,99,97
	.byte	110,32,104,111
	.byte	108,100,32,115
	.byte	116,114,117,99
	.byte	116,32,105,112
	.byte	95,104,100,114
	.space	1
	.calls	'ip4_input_accept','ip4_addr_isbroadcast_u32'
	.calls	'ip4_input','pbuf_free'
	.calls	'ip4_input','lwip_htons'
	.calls	'ip4_input','pbuf_realloc'
	.calls	'ip4_input','inet_chksum'
	.calls	'ip4_input','ip4_input_accept'
	.calls	'ip4_input','ip4_addr_isbroadcast_u32'
	.calls	'ip4_input','ip4_reass'
	.calls	'ip4_input','pbuf_remove_header'
	.calls	'ip4_input','udp_input'
	.calls	'ip4_input','tcp_input'
	.calls	'ip4_input','icmp_input'
	.calls	'ip4_input','pbuf_header_force'
	.calls	'ip4_input','icmp_dest_unreach'
	.calls	'ip4_output_if','ip4_output_if_src'
	.calls	'ip4_output_if_src','Ifx_Lwip_printf'
	.calls	'ip4_output_if_src','pbuf_add_header'
	.calls	'ip4_output_if_src','lwip_htons'
	.calls	'ip4_output_if_src','ip4_frag'
	.calls	'ip4_output_if_src','__INDIRECT__'
	.calls	'ip4_output','Ifx_Lwip_printf'
	.calls	'ip4_output','ip4_route'
	.calls	'ip4_output','ip4_output_if'
	.calls	'ip4_route','.cocofun_24'
	.calls	'ip4_input','.cocofun_25'
	.calls	'ip4_output_if_src','.cocofun_26'
	.calls	'ip4_output','.cocofun_26'
	.calls	'ip4_output','.cocofun_24'
	.calls	'ip4_route','',0
	.calls	'.cocofun_24','',0
	.calls	'ip4_input_accept','',0
	.calls	'ip4_input','',32
	.calls	'.cocofun_25','',0
	.calls	'ip4_output_if','',0
	.calls	'ip4_output_if_src','',24
	.calls	'.cocofun_26','',0
	.extern	Ifx_Lwip_printf
	.extern	lwip_htons
	.extern	pbuf_realloc
	.extern	pbuf_header_force
	.extern	pbuf_add_header
	.extern	pbuf_remove_header
	.extern	pbuf_free
	.extern	ip4_addr_isbroadcast_u32
	.extern	ip_addr_any
	.extern	lwip_stats
	.extern	netif_list
	.extern	netif_default
	.extern	ip_data
	.extern	ip4_reass
	.extern	ip4_frag
	.extern	inet_chksum
	.extern	icmp_input
	.extern	icmp_dest_unreach
	.extern	udp_input
	.extern	tcp_input
	.extern	__INDIRECT__
	.calls	'ip4_output','',16
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L101:
	.word	6415
	.half	3
	.word	.L102
	.byte	4
.L100:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\ip4.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L103
.L204:
	.byte	2
	.byte	'int',0,4,5,3
	.word	170
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	177
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	219
	.byte	7
	.word	219
	.byte	8
	.byte	'__cmpswapw',0
	.word	235
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	240
	.byte	9
	.byte	'value',0
	.word	219
	.byte	9
	.byte	'compare',0
	.word	219
	.byte	0
.L157:
	.byte	2
	.byte	'char',0,1,6,2
	.byte	'char',0,1,6,3
	.word	305
	.byte	7
	.word	313
	.byte	10
	.byte	'Ifx_Lwip_printf',0,1,123,6
	.word	297
	.byte	1,1,1,1,11
	.byte	's',0,1,123,34
	.word	318
	.byte	12,1,123,37,0
.L166:
	.byte	2
	.byte	'unsigned short int',0,2,7,10
	.byte	'lwip_htons',0,2,96,7
	.word	366
	.byte	1,1,1,1,11
	.byte	'x',0,2,96,24
	.word	366
	.byte	0,13
	.byte	'void',0,7
	.word	422
.L173:
	.byte	2
	.byte	'unsigned char',0,1,8,14
	.byte	'pbuf',0,3,186,1,8,16,15
	.byte	'next',0
	.word	.L159-.L101
	.byte	4,2,35,0,15
	.byte	'payload',0
	.word	428
	.byte	4,2,35,4,15
	.byte	'tot_len',0
	.word	366
	.byte	2,2,35,8,15
	.byte	'len',0
	.word	366
	.byte	2,2,35,10,15
	.byte	'type_internal',0
	.word	433
	.byte	1,2,35,12,15
	.byte	'flags',0
	.word	433
	.byte	1,2,35,13,15
	.byte	'ref',0
	.word	433
	.byte	1,2,35,14,15
	.byte	'if_idx',0
	.word	433
	.byte	1,2,35,15,0
.L159:
	.byte	7
	.word	450
	.byte	16
	.byte	'pbuf_realloc',0,3,154,2,6,1,1,1,1,11
	.byte	'p',0,3,154,2,32
	.word	590
	.byte	11
	.byte	'size',0,3,154,2,41
	.word	366
	.byte	0,2
	.byte	'short int',0,2,5,10
	.byte	'pbuf_header_force',0,3,159,2,6
	.word	433
	.byte	1,1,1,1,11
	.byte	'p',0,3,159,2,37
	.word	590
	.byte	11
	.byte	'header_size',0,3,159,2,46
	.word	643
	.byte	0,10
	.byte	'pbuf_add_header',0,3,160,2,6
	.word	433
	.byte	1,1,1,1,11
	.byte	'p',0,3,160,2,35
	.word	590
	.byte	11
	.byte	'header_size_increment',0,3,160,2,45
	.word	219
	.byte	0,10
	.byte	'pbuf_remove_header',0,3,162,2,6
	.word	433
	.byte	1,1,1,1,11
	.byte	'p',0,3,162,2,38
	.word	590
	.byte	11
	.byte	'header_size',0,3,162,2,48
	.word	219
	.byte	0,10
	.byte	'pbuf_free',0,3,165,2,6
	.word	433
	.byte	1,1,1,1,11
	.byte	'p',0,3,165,2,29
	.word	590
	.byte	0
.L200:
	.byte	2
	.byte	'unsigned long int',0,4,7
.L151:
	.byte	7
	.word	.L314-.L101
.L198:
	.byte	14
	.byte	'ip4_addr',0,4,51,8,4,15
	.byte	'addr',0
	.word	892
	.byte	4,2,35,0,0,17
	.word	297
	.byte	1,1,5
	.word	590
	.byte	5
	.word	913
	.byte	0,7
	.word	947
	.byte	18
	.byte	'netif_input_fn',0,5,178,1,17
	.word	965
	.byte	3
	.word	918
	.byte	7
	.word	994
	.byte	17
	.word	297
	.byte	1,1,5
	.word	913
	.byte	5
	.word	590
	.byte	5
	.word	999
	.byte	0,7
	.word	1004
	.byte	18
	.byte	'netif_output_fn',0,5,189,1,17
	.word	1027
	.byte	17
	.word	297
	.byte	1,1,5
	.word	913
	.byte	5
	.word	590
	.byte	0,7
	.word	1057
	.byte	18
	.byte	'netif_linkoutput_fn',0,5,212,1,17
	.word	1075
	.byte	19,6
	.word	433
	.byte	20,5,0,19,2
	.word	305
	.byte	20,1,0
.L314:
	.byte	14
	.byte	'netif',0,5,132,2,8,48,15
	.byte	'next',0
	.word	913
	.byte	4,2,35,0,15
	.byte	'ip_addr',0
	.word	918
	.byte	4,2,35,4,15
	.byte	'netmask',0
	.word	918
	.byte	4,2,35,8,15
	.byte	'gw',0
	.word	918
	.byte	4,2,35,12,15
	.byte	'input',0
	.word	970
	.byte	4,2,35,16,15
	.byte	'output',0
	.word	1032
	.byte	4,2,35,20,15
	.byte	'linkoutput',0
	.word	1080
	.byte	4,2,35,24,15
	.byte	'state',0
	.word	428
	.byte	4,2,35,28,15
	.byte	'mtu',0
	.word	366
	.byte	2,2,35,32,15
	.byte	'hwaddr',0
	.word	1109
	.byte	6,2,35,34,15
	.byte	'hwaddr_len',0
	.word	433
	.byte	1,2,35,40,15
	.byte	'flags',0
	.word	433
	.byte	1,2,35,41,15
	.byte	'name',0
	.word	1118
	.byte	2,2,35,42,15
	.byte	'num',0
	.word	433
	.byte	1,2,35,44,15
	.byte	'rs_count',0
	.word	433
	.byte	1,2,35,45,0,3
	.word	1127
	.byte	7
	.word	1375
	.byte	10
	.byte	'ip4_addr_isbroadcast_u32',0,4,151,1,6
	.word	433
	.byte	1,1,1,1,11
	.byte	'addr',0,4,151,1,37
	.word	892
	.byte	11
	.byte	'netif',0,4,151,1,63
	.word	1380
	.byte	0,7
	.word	947
	.byte	7
	.word	1004
	.byte	7
	.word	1057
	.byte	3
	.word	918
.L153:
	.byte	7
	.word	1468
	.byte	14
	.byte	'ip4_addr_packed',0,6,53,8,4,15
	.byte	'addr',0
	.word	892
	.byte	4,2,35,0,0,14
	.byte	'ip_hdr',0,6,73,8,20,15
	.byte	'_v_hl',0
	.word	433
	.byte	1,2,35,0,15
	.byte	'_tos',0
	.word	433
	.byte	1,2,35,1,15
	.byte	'_len',0
	.word	366
	.byte	2,2,35,2,15
	.byte	'_id',0
	.word	366
	.byte	2,2,35,4,15
	.byte	'_offset',0
	.word	366
	.byte	2,2,35,6,15
	.byte	'_ttl',0
	.word	433
	.byte	1,2,35,8,15
	.byte	'_proto',0
	.word	433
	.byte	1,2,35,9,15
	.byte	'_chksum',0
	.word	366
	.byte	2,2,35,10,15
	.byte	'src',0
	.word	1478
	.byte	4,2,35,12,15
	.byte	'dest',0
	.word	1478
	.byte	4,2,35,16,0,3
	.word	1514
.L163:
	.byte	7
	.word	1674
.L196:
	.byte	7
	.word	1514
	.byte	10
	.byte	'ip4_reass',0,7,72,15
	.word	590
	.byte	1,1,1,1,11
	.byte	'p',0,7,72,38
	.word	590
	.byte	0,10
	.byte	'ip4_frag',0,7,91,7
	.word	297
	.byte	1,1,1,1,11
	.byte	'p',0,7,91,29
	.word	590
	.byte	11
	.byte	'netif',0,7,91,46
	.word	913
	.byte	11
	.byte	'dest',0,7,91,71
	.word	1473
	.byte	0,3
	.word	422
	.byte	7
	.word	1781
	.byte	10
	.byte	'inet_chksum',0,8,74,7
	.word	366
	.byte	1,1,1,1,11
	.byte	'dataptr',0,8,74,31
	.word	1786
	.byte	11
	.byte	'len',0,8,74,46
	.word	366
	.byte	0,16
	.byte	'icmp_input',0,9,80,6,1,1,1,1,11
	.byte	'p',0,9,80,30
	.word	590
	.byte	11
	.byte	'inp',0,9,80,47
	.word	913
	.byte	0,21
	.byte	'icmp_dur_type',0,9,55,6,1,22
	.byte	'ICMP_DUR_NET',0,0,22
	.byte	'ICMP_DUR_HOST',0,1,22
	.byte	'ICMP_DUR_PROTO',0,2,22
	.byte	'ICMP_DUR_PORT',0,3,22
	.byte	'ICMP_DUR_FRAG',0,4,22
	.byte	'ICMP_DUR_SR',0,5,0,16
	.byte	'icmp_dest_unreach',0,9,81,6,1,1,1,1,11
	.byte	'p',0,9,81,37
	.word	590
	.byte	11
	.byte	't',0,9,81,59
	.word	1886
	.byte	0,16
	.byte	'udp_input',0,10,163,1,18,1,1,1,1,11
	.byte	'p',0,10,163,1,47
	.word	590
	.byte	11
	.byte	'inp',0,10,163,1,64
	.word	913
	.byte	0,16
	.byte	'tcp_input',0,11,77,18,1,1,1,1,11
	.byte	'p',0,11,77,44
	.word	590
	.byte	11
	.byte	'inp',0,11,77,61
	.word	913
	.byte	0,23
	.byte	'__INDIRECT__',0,12,1,1,1,1,1,18
	.byte	'__wchar_t',0,12,1,1
	.word	643
	.byte	18
	.byte	'__size_t',0,12,1,1
	.word	219
	.byte	18
	.byte	'__ptrdiff_t',0,12,1,1
	.word	170
	.byte	24,1,7
	.word	2207
	.byte	18
	.byte	'__codeptr',0,12,1,1
	.word	2209
	.byte	18
	.byte	'__intptr_t',0,12,1,1
	.word	170
	.byte	18
	.byte	'__uintptr_t',0,12,1,1
	.word	219
	.byte	18
	.byte	'size_t',0,13,24,25
	.word	219
	.byte	18
	.byte	'uint8',0,14,108,29
	.word	433
	.byte	18
	.byte	'uint16',0,14,112,29
	.word	366
	.byte	18
	.byte	'uint32',0,14,116,29
	.word	892
	.byte	18
	.byte	'sint8',0,14,125,29
	.word	297
	.byte	18
	.byte	'sint16',0,14,129,1,29
	.word	643
	.byte	2
	.byte	'long int',0,4,5,18
	.byte	'sint32',0,14,134,1,29
	.word	2360
	.byte	2
	.byte	'long long int',0,8,5,18
	.byte	'sint64',0,14,141,1,29
	.word	2388
	.byte	2
	.byte	'float',0,4,4,18
	.byte	'float32',0,14,170,1,29
	.word	2421
	.byte	18
	.byte	'pvoid',0,15,54,28
	.word	428
	.byte	18
	.byte	'Ifx_TickTime',0,15,76,28
	.word	2388
	.byte	18
	.byte	'u8_t',0,1,85,16
	.word	433
	.byte	18
	.byte	'u16_t',0,1,86,16
	.word	366
	.byte	18
	.byte	'u32_t',0,1,87,16
	.word	892
	.byte	18
	.byte	's8_t',0,1,88,16
	.word	297
	.byte	18
	.byte	's16_t',0,1,89,16
	.word	643
	.byte	18
	.byte	'intmax_t',0,16,198,2,41
	.word	2388
	.byte	18
	.byte	'err_t',0,17,96,14
	.word	297
	.byte	25,1,1,5
	.word	590
	.byte	0,7
	.word	2582
	.byte	18
	.byte	'pbuf_free_custom_fn',0,3,242,1,16
	.word	2591
	.byte	18
	.byte	'ip4_addr_t',0,4,57,25
	.word	918
	.byte	18
	.byte	'ip_addr_t',0,18,142,2,20
	.word	918
	.byte	3
	.word	918
	.byte	26
	.byte	'ip_addr_any',0,18,241,2,24
	.word	2663
	.byte	1,1,18
	.byte	'mem_size_t',0,19,67,15
	.word	366
	.byte	14
	.byte	'stats_proto',0,20,64,8,24,15
	.byte	'xmit',0
	.word	366
	.byte	2,2,35,0,15
	.byte	'recv',0
	.word	366
	.byte	2,2,35,2,15
	.byte	'fw',0
	.word	366
	.byte	2,2,35,4,15
	.byte	'drop',0
	.word	366
	.byte	2,2,35,6,15
	.byte	'chkerr',0
	.word	366
	.byte	2,2,35,8,15
	.byte	'lenerr',0
	.word	366
	.byte	2,2,35,10,15
	.byte	'memerr',0
	.word	366
	.byte	2,2,35,12,15
	.byte	'rterr',0
	.word	366
	.byte	2,2,35,14,15
	.byte	'proterr',0
	.word	366
	.byte	2,2,35,16,15
	.byte	'opterr',0
	.word	366
	.byte	2,2,35,18,15
	.byte	'err',0
	.word	366
	.byte	2,2,35,20,15
	.byte	'cachehit',0
	.word	366
	.byte	2,2,35,22,0,14
	.byte	'stats_mem',0,20,98,8,16,15
	.byte	'name',0
	.word	318
	.byte	4,2,35,0,15
	.byte	'err',0
	.word	366
	.byte	2,2,35,4,15
	.byte	'avail',0
	.word	366
	.byte	2,2,35,6,15
	.byte	'used',0
	.word	366
	.byte	2,2,35,8,15
	.byte	'max',0
	.word	366
	.byte	2,2,35,10,15
	.byte	'illegal',0
	.word	366
	.byte	2,2,35,12,0,7
	.word	2909
	.byte	19,36
	.word	3011
	.byte	20,8,0,14
	.byte	'stats_',0,20,232,1,8,220,1,15
	.byte	'link',0
	.word	2710
	.byte	24,2,35,0,15
	.byte	'etharp',0
	.word	2710
	.byte	24,2,35,24,15
	.byte	'ip_frag',0
	.word	2710
	.byte	24,2,35,48,15
	.byte	'ip',0
	.word	2710
	.byte	24,2,35,72,15
	.byte	'icmp',0
	.word	2710
	.byte	24,2,35,96,15
	.byte	'udp',0
	.word	2710
	.byte	24,2,35,120,15
	.byte	'tcp',0
	.word	2710
	.byte	24,3,35,144,1,15
	.byte	'mem',0
	.word	2909
	.byte	16,3,35,168,1,15
	.byte	'memp',0
	.word	3016
	.byte	36,3,35,184,1,0,26
	.byte	'lwip_stats',0,20,176,2,22
	.word	3025
	.byte	1,1,26
	.byte	'netif_list',0,5,149,3,22
	.word	913
	.byte	1,1,26
	.byte	'netif_default',0,5,153,3,22
	.word	913
	.byte	1,1,14
	.byte	'link_changed_s',0,5,213,4,10,1,15
	.byte	'state',0
	.word	433
	.byte	1,2,35,0,0,14
	.byte	'status_changed_s',0,5,219,4,10,1,15
	.byte	'state',0
	.word	433
	.byte	1,2,35,0,0,3
	.word	918
	.byte	7
	.word	3314
	.byte	14
	.byte	'ipv4_changed_s',0,5,225,4,10,12,15
	.byte	'old_address',0
	.word	3319
	.byte	4,2,35,0,15
	.byte	'old_netmask',0
	.word	3319
	.byte	4,2,35,4,15
	.byte	'old_gw',0
	.word	3319
	.byte	4,2,35,8,0,14
	.byte	'ipv6_set_s',0,5,233,4,10,8,15
	.byte	'addr_index',0
	.word	297
	.byte	1,2,35,0,15
	.byte	'old_address',0
	.word	3319
	.byte	4,2,35,4,0,14
	.byte	'ipv6_addr_state_changed_s',0,5,241,4,10,8,15
	.byte	'addr_index',0
	.word	297
	.byte	1,2,35,0,15
	.byte	'old_state',0
	.word	433
	.byte	1,2,35,1,15
	.byte	'address',0
	.word	3319
	.byte	4,2,35,4,0,27,5,210,4,9,12,15
	.byte	'link_changed',0
	.word	3238
	.byte	1,2,35,0,15
	.byte	'status_changed',0
	.word	3275
	.byte	1,2,35,0,15
	.byte	'ipv4_changed',0
	.word	3324
	.byte	12,2,35,0,15
	.byte	'ipv6_set',0
	.word	3404
	.byte	8,2,35,0,15
	.byte	'ipv6_addr_state_changed',0
	.word	3463
	.byte	8,2,35,0,0,3
	.word	3552
	.byte	7
	.word	3678
	.byte	25,1,1,5
	.word	913
	.byte	5
	.word	366
	.byte	5
	.word	3683
	.byte	0,7
	.word	3688
	.byte	18
	.byte	'netif_ext_callback_fn',0,5,132,5,16
	.word	3707
	.byte	18
	.byte	'ip4_addr_p_t',0,6,61,32
	.word	1478
	.byte	14
	.byte	'ip_globals',0,21,107,8,24,15
	.byte	'current_netif',0
	.word	913
	.byte	4,2,35,0,15
	.byte	'current_input_netif',0
	.word	913
	.byte	4,2,35,4,15
	.byte	'current_ip4_header',0
	.word	1679
	.byte	4,2,35,8,15
	.byte	'current_ip_header_tot_len',0
	.word	366
	.byte	2,2,35,12,15
	.byte	'current_iphdr_src',0
	.word	918
	.byte	4,2,35,14,15
	.byte	'current_iphdr_dest',0
	.word	918
	.byte	4,2,35,18,0,26
	.byte	'ip_data',0,21,128,1,26
	.word	3764
	.byte	1,1,14
	.byte	'udp_pcb',0,10,81,8,32,15
	.byte	'local_ip',0
	.word	918
	.byte	4,2,35,0,15
	.byte	'remote_ip',0
	.word	918
	.byte	4,2,35,4,15
	.byte	'netif_idx',0
	.word	433
	.byte	1,2,35,8,15
	.byte	'so_options',0
	.word	433
	.byte	1,2,35,9,15
	.byte	'tos',0
	.word	433
	.byte	1,2,35,10,15
	.byte	'ttl',0
	.word	433
	.byte	1,2,35,11,15
	.byte	'next',0
	.word	.L315-.L101
	.byte	4,2,35,12,15
	.byte	'flags',0
	.word	433
	.byte	1,2,35,16,15
	.byte	'local_port',0
	.word	366
	.byte	2,2,35,18,15
	.byte	'remote_port',0
	.word	366
	.byte	2,2,35,20,15
	.byte	'recv',0
	.word	.L316-.L101
	.byte	4,2,35,24,15
	.byte	'recv_arg',0
	.word	428
	.byte	4,2,35,28,0
.L315:
	.byte	7
	.word	3970
	.byte	25,1,1,5
	.word	428
	.byte	5
	.word	4188
	.byte	5
	.word	590
	.byte	5
	.word	999
	.byte	5
	.word	366
	.byte	0,7
	.word	4193
.L316:
	.byte	18
	.byte	'udp_recv_fn',0,10,77,16
	.word	4222
	.byte	7
	.word	4193
	.byte	18
	.byte	'tcpwnd_size_t',0,22,53,15
	.word	366
	.byte	21
	.byte	'tcp_state',0,22,56,6,1,22
	.byte	'CLOSED',0,0,22
	.byte	'LISTEN',0,1,22
	.byte	'SYN_SENT',0,2,22
	.byte	'SYN_RCVD',0,3,22
	.byte	'ESTABLISHED',0,4,22
	.byte	'FIN_WAIT_1',0,5,22
	.byte	'FIN_WAIT_2',0,6,22
	.byte	'CLOSE_WAIT',0,7,22
	.byte	'CLOSING',0,8,22
	.byte	'LAST_ACK',0,9,22
	.byte	'TIME_WAIT',0,10,0,14
	.byte	'tcp_hdr',0,24,56,8,20,15
	.byte	'src',0
	.word	366
	.byte	2,2,35,0,15
	.byte	'dest',0
	.word	366
	.byte	2,2,35,2,15
	.byte	'seqno',0
	.word	892
	.byte	4,2,35,4,15
	.byte	'ackno',0
	.word	892
	.byte	4,2,35,8,15
	.byte	'_hdrlen_rsvd_flags',0
	.word	366
	.byte	2,2,35,12,15
	.byte	'wnd',0
	.word	366
	.byte	2,2,35,14,15
	.byte	'chksum',0
	.word	366
	.byte	2,2,35,16,15
	.byte	'urgp',0
	.word	366
	.byte	2,2,35,18,0,7
	.word	4416
	.byte	14
	.byte	'tcp_seg',0,11,253,1,8,20,15
	.byte	'next',0
	.word	.L317-.L101
	.byte	4,2,35,0,15
	.byte	'p',0
	.word	590
	.byte	4,2,35,4,15
	.byte	'len',0
	.word	366
	.byte	2,2,35,8,15
	.byte	'oversize_left',0
	.word	366
	.byte	2,2,35,10,15
	.byte	'flags',0
	.word	433
	.byte	1,2,35,12,15
	.byte	'tcphdr',0
	.word	4558
	.byte	4,2,35,16,0
.L317:
	.byte	7
	.word	4563
	.byte	14
	.byte	'tcp_pcb_listen',0,23,223,1,8,28,15
	.byte	'local_ip',0
	.word	918
	.byte	4,2,35,0,15
	.byte	'remote_ip',0
	.word	918
	.byte	4,2,35,4,15
	.byte	'netif_idx',0
	.word	433
	.byte	1,2,35,8,15
	.byte	'so_options',0
	.word	433
	.byte	1,2,35,9,15
	.byte	'tos',0
	.word	433
	.byte	1,2,35,10,15
	.byte	'ttl',0
	.word	433
	.byte	1,2,35,11,15
	.byte	'next',0
	.word	.L318-.L101
	.byte	4,2,35,12,15
	.byte	'callback_arg',0
	.word	428
	.byte	4,2,35,16,15
	.byte	'state',0
	.word	4274
	.byte	1,2,35,20,15
	.byte	'prio',0
	.word	433
	.byte	1,2,35,21,15
	.byte	'local_port',0
	.word	366
	.byte	2,2,35,22,15
	.byte	'accept',0
	.word	.L319-.L101
	.byte	4,2,35,24,0
.L318:
	.byte	7
	.word	4675
	.byte	17
	.word	297
	.byte	1,1,5
	.word	428
	.byte	5
	.word	.L320-.L101
	.byte	5
	.word	366
	.byte	0,7
	.word	4905
	.byte	18
	.byte	'tcp_sent_fn',0,23,96,17
	.word	4928
	.byte	17
	.word	297
	.byte	1,1,5
	.word	428
	.byte	5
	.word	.L320-.L101
	.byte	5
	.word	590
	.byte	5
	.word	297
	.byte	0,7
	.word	4953
	.byte	18
	.byte	'tcp_recv_fn',0,23,82,17
	.word	4981
	.byte	18
	.byte	'tcp_connected_fn',0,23,134,1,17
	.word	.L321-.L101
	.byte	17
	.word	297
	.byte	1,1,5
	.word	428
	.byte	5
	.word	.L320-.L101
	.byte	0,7
	.word	5032
	.byte	18
	.byte	'tcp_poll_fn',0,23,108,17
	.word	5050
	.byte	25,1,1,5
	.word	428
	.byte	5
	.word	297
	.byte	0,7
	.word	5075
	.byte	18
	.byte	'tcp_err_fn',0,23,120,17
	.word	5089
	.byte	14
	.byte	'tcp_pcb',0,23,242,1,8,156,1,15
	.byte	'local_ip',0
	.word	918
	.byte	4,2,35,0,15
	.byte	'remote_ip',0
	.word	918
	.byte	4,2,35,4,15
	.byte	'netif_idx',0
	.word	433
	.byte	1,2,35,8,15
	.byte	'so_options',0
	.word	433
	.byte	1,2,35,9,15
	.byte	'tos',0
	.word	433
	.byte	1,2,35,10,15
	.byte	'ttl',0
	.word	433
	.byte	1,2,35,11,15
	.byte	'next',0
	.word	.L320-.L101
	.byte	4,2,35,12,15
	.byte	'callback_arg',0
	.word	428
	.byte	4,2,35,16,15
	.byte	'state',0
	.word	4274
	.byte	1,2,35,20,15
	.byte	'prio',0
	.word	433
	.byte	1,2,35,21,15
	.byte	'local_port',0
	.word	366
	.byte	2,2,35,22,15
	.byte	'remote_port',0
	.word	366
	.byte	2,2,35,24,15
	.byte	'flags',0
	.word	366
	.byte	2,2,35,26,15
	.byte	'polltmr',0
	.word	433
	.byte	1,2,35,28,15
	.byte	'pollinterval',0
	.word	433
	.byte	1,2,35,29,15
	.byte	'last_timer',0
	.word	433
	.byte	1,2,35,30,15
	.byte	'tmr',0
	.word	892
	.byte	4,2,35,32,15
	.byte	'rcv_nxt',0
	.word	892
	.byte	4,2,35,36,15
	.byte	'rcv_wnd',0
	.word	366
	.byte	2,2,35,40,15
	.byte	'rcv_ann_wnd',0
	.word	366
	.byte	2,2,35,42,15
	.byte	'rcv_ann_right_edge',0
	.word	892
	.byte	4,2,35,44,15
	.byte	'rtime',0
	.word	643
	.byte	2,2,35,48,15
	.byte	'mss',0
	.word	366
	.byte	2,2,35,50,15
	.byte	'rttest',0
	.word	892
	.byte	4,2,35,52,15
	.byte	'rtseq',0
	.word	892
	.byte	4,2,35,56,15
	.byte	'sa',0
	.word	643
	.byte	2,2,35,60,15
	.byte	'sv',0
	.word	643
	.byte	2,2,35,62,15
	.byte	'rto',0
	.word	643
	.byte	2,2,35,64,15
	.byte	'nrtx',0
	.word	433
	.byte	1,2,35,66,15
	.byte	'dupacks',0
	.word	433
	.byte	1,2,35,67,15
	.byte	'lastack',0
	.word	892
	.byte	4,2,35,68,15
	.byte	'cwnd',0
	.word	366
	.byte	2,2,35,72,15
	.byte	'ssthresh',0
	.word	366
	.byte	2,2,35,74,15
	.byte	'rto_end',0
	.word	892
	.byte	4,2,35,76,15
	.byte	'snd_nxt',0
	.word	892
	.byte	4,2,35,80,15
	.byte	'snd_wl1',0
	.word	892
	.byte	4,2,35,84,15
	.byte	'snd_wl2',0
	.word	892
	.byte	4,2,35,88,15
	.byte	'snd_lbb',0
	.word	892
	.byte	4,2,35,92,15
	.byte	'snd_wnd',0
	.word	366
	.byte	2,2,35,96,15
	.byte	'snd_wnd_max',0
	.word	366
	.byte	2,2,35,98,15
	.byte	'snd_buf',0
	.word	366
	.byte	2,2,35,100,15
	.byte	'snd_queuelen',0
	.word	366
	.byte	2,2,35,102,15
	.byte	'unsent_oversize',0
	.word	366
	.byte	2,2,35,104,15
	.byte	'bytes_acked',0
	.word	366
	.byte	2,2,35,106,15
	.byte	'unsent',0
	.word	4670
	.byte	4,2,35,108,15
	.byte	'unacked',0
	.word	4670
	.byte	4,2,35,112,15
	.byte	'ooseq',0
	.word	4670
	.byte	4,2,35,116,15
	.byte	'refused_data',0
	.word	590
	.byte	4,2,35,120,15
	.byte	'listener',0
	.word	4900
	.byte	4,2,35,124,15
	.byte	'sent',0
	.word	4933
	.byte	4,3,35,128,1,15
	.byte	'recv',0
	.word	4986
	.byte	4,3,35,132,1,15
	.byte	'connected',0
	.word	5006
	.byte	4,3,35,136,1,15
	.byte	'poll',0
	.word	5055
	.byte	4,3,35,140,1,15
	.byte	'errf',0
	.word	5094
	.byte	4,3,35,144,1,15
	.byte	'keep_idle',0
	.word	892
	.byte	4,3,35,148,1,15
	.byte	'persist_cnt',0
	.word	433
	.byte	1,3,35,152,1,15
	.byte	'persist_backoff',0
	.word	433
	.byte	1,3,35,153,1,15
	.byte	'persist_probe',0
	.word	433
	.byte	1,3,35,154,1,15
	.byte	'keep_cnt_sent',0
	.word	433
	.byte	1,3,35,155,1,0
.L320:
	.byte	7
	.word	5113
	.byte	17
	.word	297
	.byte	1,1,5
	.word	428
	.byte	5
	.word	6175
	.byte	5
	.word	297
	.byte	0
.L321:
	.byte	7
	.word	6180
.L319:
	.byte	18
	.byte	'tcp_accept_fn',0,23,70,17
	.word	6203
	.byte	7
	.word	6180
	.byte	7
	.word	4905
	.byte	7
	.word	4953
	.byte	7
	.word	6180
	.byte	7
	.word	5032
	.byte	7
	.word	5075
	.byte	25,1,1,5
	.word	433
	.byte	5
	.word	428
	.byte	0,7
	.word	6260
	.byte	18
	.byte	'tcp_extarg_callback_pcb_destroyed_fn',0,23,173,1,16
	.word	6274
	.byte	17
	.word	297
	.byte	1,1,5
	.word	433
	.byte	5
	.word	4900
	.byte	5
	.word	6175
	.byte	0,7
	.word	6325
	.byte	18
	.byte	'tcp_extarg_callback_passive_open_fn',0,23,182,1,17
	.word	6348
	.byte	18
	.byte	'tcpflags_t',0,23,206,1,15
	.word	366
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L102:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,11
	.byte	5,0,3,8,58,15,59,15,57,15,73,19,0,0,12,24,0,58,15,59,15,57,15,0,0,13,59,0,3,8,0,0,14,19,1,3,8,58,15,59
	.byte	15,57,15,11,15,0,0,15,13,0,3,8,73,19,11,15,56,9,0,0,16,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60
	.byte	12,0,0,17,21,1,73,19,54,15,39,12,0,0,18,22,0,3,8,58,15,59,15,57,15,73,19,0,0,19,1,1,11,15,73,19,0,0,20
	.byte	33,0,47,15,0,0,21,4,1,3,8,58,15,59,15,57,15,11,15,0,0,22,40,0,3,8,28,13,0,0,23,46,0,3,8,58,15,59,15,57
	.byte	15,54,15,63,12,60,12,0,0,24,21,0,54,15,0,0,25,21,1,54,15,39,12,0,0,26,52,0,3,8,58,15,59,15,57,15,73,19
	.byte	63,12,60,12,0,0,27,23,1,58,15,59,15,57,15,11,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L103:
	.word	.L323-.L322
.L322:
	.half	3
	.word	.L325-.L324
.L324:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'cc.h',0,1,0,0
	.byte	'def.h',0,2,0,0
	.byte	'pbuf.h',0,2,0,0
	.byte	'ip4_addr.h',0,2,0,0
	.byte	'netif.h',0,2,0,0
	.byte	'ip4.h',0,3,0,0
	.byte	'ip4_frag.h',0,2,0,0
	.byte	'inet_chksum.h',0,2,0,0
	.byte	'icmp.h',0,2,0,0
	.byte	'udp.h',0,2,0,0
	.byte	'tcp_priv.h',0,4,0,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\ip4.c',0,0,0,0
	.byte	'stddef.h',0,5,0,0
	.byte	'Platform_Types.h',0,6,0,0
	.byte	'Ifx_Types.h',0,6,0,0
	.byte	'stdint.h',0,5,0,0
	.byte	'err.h',0,2,0,0
	.byte	'ip_addr.h',0,2,0,0
	.byte	'mem.h',0,2,0,0
	.byte	'stats.h',0,2,0,0
	.byte	'ip.h',0,2,0,0
	.byte	'tcpbase.h',0,2,0,0
	.byte	'tcp.h',0,2,0,0
	.byte	'tcp.h',0,3,0,0,0
.L325:
.L323:
	.sdecl	'.debug_info',debug,cluster('ip4_route')
	.sect	'.debug_info'
.L104:
	.word	254
	.half	3
	.word	.L105
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\ip4.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L107,.L106
	.byte	2
	.word	.L100
	.byte	3
	.byte	'ip4_route',0,1,152,1,1
	.word	.L151
	.byte	1,1,1
	.word	.L83,.L152,.L82
	.byte	4
	.byte	'dest',0,1,152,1,29
	.word	.L153,.L154
	.byte	5
	.word	.L155
	.byte	6
	.byte	'netif',0,1,155,1,17
	.word	.L151,.L156
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ip4_route')
	.sect	'.debug_abbrev'
.L105:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('ip4_route')
	.sect	'.debug_line'
.L106:
	.word	.L327-.L326
.L326:
	.half	3
	.word	.L329-.L328
.L328:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\ip4.c',0,0,0,0,0
.L329:
	.byte	5,3,7,0,5,2
	.word	.L83
	.byte	3,169,1,1,5,9,9
	.half	.L3-.L83
	.byte	3,2,1,5,31,9
	.half	.L330-.L3
	.byte	1,5,59,7,9
	.half	.L331-.L330
	.byte	1,5,11,9
	.half	.L332-.L331
	.byte	3,2,1,5,7,9
	.half	.L333-.L332
	.byte	1,5,11,7,9
	.half	.L334-.L333
	.byte	3,5,1,5,59,7,9
	.half	.L335-.L334
	.byte	1,5,3,9
	.half	.L4-.L335
	.byte	3,119,1,5,8,9
	.half	.L336-.L4
	.byte	3,46,1,5,7,9
	.half	.L208-.L336
	.byte	1,5,35,7,9
	.half	.L337-.L208
	.byte	1,5,66,9
	.half	.L338-.L337
	.byte	1,5,7,7,9
	.half	.L339-.L338
	.byte	3,1,1,5,61,9
	.half	.L340-.L339
	.byte	1,5,5,9
	.half	.L11-.L340
	.byte	3,5,1,5,12,9
	.half	.L341-.L11
	.byte	3,2,1,5,1,9
	.half	.L10-.L341
	.byte	3,4,1,7,9
	.half	.L108-.L10
	.byte	0,1,1
.L327:
	.sdecl	'.debug_ranges',debug,cluster('ip4_route')
	.sect	'.debug_ranges'
.L107:
	.word	-1,.L83,0,.L108-.L83,0,0
.L155:
	.word	-1,.L83,0,.L152-.L83,-1,.L85,0,.L138-.L85,0,0
	.sdecl	'.debug_info',debug,cluster('ip4_input')
	.sect	'.debug_info'
.L109:
	.word	334
	.half	3
	.word	.L110
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\ip4.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L112,.L111
	.byte	2
	.word	.L100
	.byte	3
	.byte	'ip4_input',0,1,170,3,1
	.word	.L157
	.byte	1,1,1
	.word	.L89,.L158,.L88
	.byte	4
	.byte	'p',0,1,170,3,24
	.word	.L159,.L160
	.byte	4
	.byte	'inp',0,1,170,3,41
	.word	.L151,.L161
	.byte	5
	.word	.L162
	.byte	6
	.byte	'iphdr',0,1,172,3,24
	.word	.L163,.L164
	.byte	6
	.byte	'netif',0,1,173,3,17
	.word	.L151,.L165
	.byte	6
	.byte	'iphdr_hlen',0,1,174,3,9
	.word	.L166,.L167
	.byte	6
	.byte	'iphdr_len',0,1,175,3,9
	.word	.L166,.L168
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ip4_input')
	.sect	'.debug_abbrev'
.L110:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('ip4_input')
	.sect	'.debug_line'
.L111:
	.word	.L343-.L342
.L342:
	.half	3
	.word	.L345-.L344
.L344:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\ip4.c',0,0,0,0,0
.L345:
	.byte	5,3,7,0,5,2
	.word	.L89
	.byte	3,184,3,1,5,1,9
	.half	.L346-.L89
	.byte	3,113,1,5,3,9
	.half	.L248-.L346
	.byte	3,15,1,5,1,9
	.half	.L347-.L248
	.byte	3,113,1,5,29,9
	.half	.L211-.L347
	.byte	3,19,1,5,1,9
	.half	.L245-.L211
	.byte	3,109,1,5,7,9
	.half	.L243-.L245
	.byte	3,20,1,5,3,9
	.half	.L348-.L243
	.byte	1,5,15,7,9
	.half	.L349-.L348
	.byte	3,3,1,5,5,9
	.half	.L212-.L349
	.byte	3,1,1,9
	.half	.L350-.L212
	.byte	3,3,1,5,15,9
	.half	.L24-.L350
	.byte	3,13,1,5,16,9
	.half	.L215-.L24
	.byte	3,126,1,5,15,9
	.half	.L217-.L215
	.byte	3,2,1,5,13,9
	.half	.L214-.L217
	.byte	1,5,20,3,3,1,5,3,9
	.half	.L218-.L214
	.byte	1,5,21,7,9
	.half	.L351-.L218
	.byte	3,1,1,5,22,9
	.half	.L26-.L351
	.byte	3,4,1,5,7,9
	.half	.L352-.L26
	.byte	1,5,46,7,9
	.half	.L353-.L352
	.byte	1,5,43,9
	.half	.L354-.L353
	.byte	1,5,74,7,9
	.half	.L355-.L354
	.byte	1,5,72,9
	.half	.L356-.L355
	.byte	1,5,15,7,9
	.half	.L27-.L356
	.byte	3,16,1,5,5,9
	.half	.L221-.L27
	.byte	3,1,1,9
	.half	.L357-.L221
	.byte	3,3,1,5,28,9
	.half	.L29-.L357
	.byte	3,6,1,5,5,9
	.half	.L222-.L29
	.byte	1,5,17,7,9
	.half	.L358-.L222
	.byte	3,5,1,5,7,9
	.half	.L224-.L358
	.byte	3,1,1,9
	.half	.L359-.L224
	.byte	3,3,1,5,3,9
	.half	.L31-.L359
	.byte	3,6,1,9
	.half	.L360-.L31
	.byte	3,1,1,9
	.half	.L361-.L360
	.byte	3,127,1,5,7,9
	.half	.L225-.L361
	.byte	3,4,1,5,3,9
	.half	.L362-.L225
	.byte	3,124,1,9
	.half	.L363-.L362
	.byte	3,1,1,5,7,9
	.half	.L364-.L363
	.byte	3,3,1,5,3,9
	.half	.L365-.L364
	.byte	1,5,10,7,9
	.half	.L366-.L365
	.byte	3,15,1,5,9,9
	.half	.L367-.L366
	.byte	1,5,33,7,9
	.half	.L368-.L367
	.byte	1,5,13,9
	.half	.L34-.L368
	.byte	3,3,1,5,7,9
	.half	.L227-.L34
	.byte	3,127,1,5,26,9
	.half	.L33-.L227
	.byte	3,7,1,5,5,9
	.half	.L230-.L33
	.byte	1,5,13,7,9
	.half	.L35-.L230
	.byte	3,1,1,5,18,9
	.half	.L231-.L35
	.byte	1,5,13,9
	.half	.L37-.L231
	.byte	3,2,1,5,12,9
	.half	.L233-.L37
	.byte	3,5,1,5,9,9
	.half	.L369-.L233
	.byte	3,4,1,5,11,9
	.half	.L41-.L369
	.byte	3,1,1,5,32,7,9
	.half	.L235-.L41
	.byte	3,4,1,5,11,9
	.half	.L237-.L235
	.byte	1,5,9,7,9
	.half	.L42-.L237
	.byte	3,123,1,5,10,9
	.half	.L36-.L42
	.byte	3,49,1,5,9,9
	.half	.L239-.L36
	.byte	1,5,10,7,9
	.half	.L370-.L239
	.byte	3,1,1,5,17,9
	.half	.L44-.L370
	.byte	3,4,1,5,7,9
	.half	.L25-.L44
	.byte	3,1,1,9
	.half	.L371-.L25
	.byte	3,3,1,5,3,9
	.half	.L45-.L371
	.byte	3,5,1,5,7,9
	.half	.L372-.L45
	.byte	3,11,1,5,15,9
	.half	.L250-.L372
	.byte	3,4,1,5,5,9
	.half	.L251-.L250
	.byte	3,1,1,5,8,9
	.half	.L47-.L251
	.byte	3,3,1,5,28,9
	.half	.L373-.L47
	.byte	1,5,26,9
	.half	.L374-.L373
	.byte	1,5,3,9
	.half	.L375-.L374
	.byte	1,5,19,7,9
	.half	.L376-.L375
	.byte	3,5,1,5,7,9
	.half	.L249-.L376
	.byte	1,5,5,9
	.half	.L253-.L249
	.byte	3,2,1,5,37,7,9
	.half	.L377-.L253
	.byte	3,3,1,5,25,9
	.half	.L49-.L377
	.byte	3,36,1,5,27,9
	.half	.L254-.L49
	.byte	3,11,1,5,25,9
	.half	.L256-.L254
	.byte	3,117,1,5,31,9
	.half	.L378-.L256
	.byte	3,1,1,5,30,9
	.half	.L379-.L378
	.byte	3,1,1,5,39,9
	.half	.L380-.L379
	.byte	3,1,1,5,37,9
	.half	.L381-.L380
	.byte	1,5,39,9
	.half	.L259-.L381
	.byte	1,5,37,9
	.half	.L382-.L259
	.byte	1,5,27,9
	.half	.L383-.L382
	.byte	3,8,1,5,13,9
	.half	.L257-.L383
	.byte	3,2,1,5,12,9
	.half	.L384-.L257
	.byte	3,17,1,7,9
	.half	.L385-.L384
	.byte	3,122,1,7,9
	.half	.L386-.L385
	.byte	3,119,1,5,22,9
	.half	.L387-.L386
	.byte	3,5,1,5,9,9
	.half	.L263-.L387
	.byte	3,1,1,5,22,9
	.half	.L52-.L263
	.byte	3,5,1,5,9,9
	.half	.L266-.L52
	.byte	3,1,1,5,23,9
	.half	.L51-.L266
	.byte	3,5,1,5,9,9
	.half	.L269-.L51
	.byte	3,1,1,5,16,9
	.half	.L54-.L269
	.byte	3,16,1,9
	.half	.L388-.L54
	.byte	3,1,1,5,34,9
	.half	.L389-.L388
	.byte	3,1,1,9
	.half	.L274-.L389
	.byte	3,1,1,5,11,9
	.half	.L58-.L274
	.byte	3,6,1,9
	.half	.L244-.L58
	.byte	3,1,1,5,19,9
	.half	.L276-.L244
	.byte	3,3,1,5,25,9
	.half	.L55-.L276
	.byte	3,6,1,5,27,9
	.half	.L390-.L55
	.byte	1,5,39,9
	.half	.L391-.L390
	.byte	3,3,1,5,25,9
	.half	.L392-.L391
	.byte	3,125,1,5,31,9
	.half	.L393-.L392
	.byte	3,1,1,5,30,9
	.half	.L394-.L393
	.byte	3,1,1,5,37,9
	.half	.L395-.L394
	.byte	3,1,1,5,3,9
	.half	.L396-.L395
	.byte	3,1,1,9
	.half	.L397-.L396
	.byte	3,1,1,5,10,9
	.half	.L46-.L397
	.byte	3,2,1,5,1,3,1,1,7,9
	.half	.L113-.L46
	.byte	0,1,1
.L343:
	.sdecl	'.debug_ranges',debug,cluster('ip4_input')
	.sect	'.debug_ranges'
.L112:
	.word	-1,.L89,0,.L113-.L89,0,0
.L162:
	.word	-1,.L89,0,.L158-.L89,-1,.L91,0,.L143-.L91,0,0
	.sdecl	'.debug_info',debug,cluster('ip4_output')
	.sect	'.debug_info'
.L114:
	.word	344
	.half	3
	.word	.L115
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\ip4.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L117,.L116
	.byte	2
	.word	.L100
	.byte	3
	.byte	'ip4_output',0,1,132,8,1
	.word	.L157
	.byte	1,1,1
	.word	.L99,.L169,.L98
	.byte	4
	.byte	'p',0,1,132,8,25
	.word	.L159,.L170
	.byte	4
	.byte	'src',0,1,132,8,46
	.word	.L153,.L171
	.byte	4
	.byte	'dest',0,1,132,8,69
	.word	.L153,.L172
	.byte	4
	.byte	'ttl',0,1,133,8,17
	.word	.L173,.L174
	.byte	4
	.byte	'tos',0,1,133,8,27
	.word	.L173,.L175
	.byte	4
	.byte	'proto',0,1,133,8,37
	.word	.L173,.L176
	.byte	5
	.word	.L99,.L169
	.byte	6
	.byte	'netif',0,1,135,8,17
	.word	.L151,.L177
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ip4_output')
	.sect	'.debug_abbrev'
.L115:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('ip4_output')
	.sect	'.debug_line'
.L116:
	.word	.L399-.L398
.L398:
	.half	3
	.word	.L401-.L400
.L400:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\ip4.c',0,0,0,0,0
.L401:
	.byte	5,1,7,0,5,2
	.word	.L99
	.byte	3,131,8,1,5,3,9
	.half	.L308-.L99
	.byte	3,5,1,5,1,9
	.half	.L402-.L308
	.byte	3,123,1,5,3,9
	.half	.L303-.L402
	.byte	3,5,1,7,9
	.half	.L403-.L303
	.byte	1,5,16,9
	.half	.L78-.L403
	.byte	3,2,1,5,3,9
	.half	.L306-.L78
	.byte	1,5,5,7,9
	.half	.L404-.L306
	.byte	3,3,1,5,12,9
	.half	.L405-.L404
	.byte	3,1,1,5,1,3,4,1,5,55,7,9
	.half	.L79-.L405
	.byte	3,127,1,5,1,9
	.half	.L118-.L79
	.byte	3,1,0,1,1
.L399:
	.sdecl	'.debug_ranges',debug,cluster('ip4_output')
	.sect	'.debug_ranges'
.L117:
	.word	-1,.L99,0,.L118-.L99,0,0
	.sdecl	'.debug_info',debug,cluster('ip4_output_if')
	.sect	'.debug_info'
.L119:
	.word	369
	.half	3
	.word	.L120
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\ip4.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L122,.L121
	.byte	2
	.word	.L100
	.byte	3
	.byte	'ip4_output_if',0,1,147,6,1
	.word	.L157
	.byte	1,1,1
	.word	.L93,.L178,.L92
	.byte	4
	.byte	'p',0,1,147,6,28
	.word	.L159,.L179
	.byte	4
	.byte	'src',0,1,147,6,49
	.word	.L153,.L180
	.byte	4
	.byte	'dest',0,1,147,6,72
	.word	.L153,.L181
	.byte	4
	.byte	'ttl',0,1,148,6,20
	.word	.L173,.L182
	.byte	4
	.byte	'tos',0,1,148,6,30
	.word	.L173,.L183
	.byte	4
	.byte	'proto',0,1,149,6,20
	.word	.L173,.L184
	.byte	4
	.byte	'netif',0,1,149,6,41
	.word	.L151,.L185
	.byte	5
	.word	.L93,.L178
	.byte	6
	.byte	'src_used',0,1,167,6,21
	.word	.L153,.L186
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ip4_output_if')
	.sect	'.debug_abbrev'
.L120:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('ip4_output_if')
	.sect	'.debug_line'
.L121:
	.word	.L407-.L406
.L406:
	.half	3
	.word	.L409-.L408
.L408:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\ip4.c',0,0,0,0,0
.L409:
	.byte	5,3,7,0,5,2
	.word	.L93
	.byte	3,167,6,1,5,9,7,9
	.half	.L410-.L93
	.byte	3,1,1,7,9
	.half	.L411-.L410
	.byte	1,5,18,9
	.half	.L62-.L411
	.byte	3,1,1,5,64,9
	.half	.L61-.L62
	.byte	3,8,1,5,1,7,9
	.half	.L123-.L61
	.byte	3,2,0,1,1
.L407:
	.sdecl	'.debug_ranges',debug,cluster('ip4_output_if')
	.sect	'.debug_ranges'
.L122:
	.word	-1,.L93,0,.L123-.L93,0,0
	.sdecl	'.debug_info',debug,cluster('ip4_output_if_src')
	.sect	'.debug_info'
.L124:
	.word	419
	.half	3
	.word	.L125
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\ip4.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L127,.L126
	.byte	2
	.word	.L100
	.byte	3
	.byte	'ip4_output_if_src',0,1,187,6,1
	.word	.L157
	.byte	1,1,1
	.word	.L95,.L187,.L94
	.byte	4
	.byte	'p',0,1,187,6,32
	.word	.L159,.L188
	.byte	4
	.byte	'src',0,1,187,6,53
	.word	.L153,.L189
	.byte	4
	.byte	'dest',0,1,187,6,76
	.word	.L153,.L190
	.byte	4
	.byte	'ttl',0,1,188,6,24
	.word	.L173,.L191
	.byte	4
	.byte	'tos',0,1,188,6,34
	.word	.L173,.L192
	.byte	4
	.byte	'proto',0,1,189,6,24
	.word	.L173,.L193
	.byte	4
	.byte	'netif',0,1,189,6,45
	.word	.L151,.L194
	.byte	5
	.word	.L195
	.byte	6
	.byte	'iphdr',0,1,205,6,18
	.word	.L196,.L197
	.byte	6
	.byte	'dest_addr',0,1,206,6,14
	.word	.L198,.L199
	.byte	6
	.byte	'chk_sum',0,1,208,6,9
	.word	.L200,.L201
	.byte	7
	.word	.L202,.L203
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('ip4_output_if_src')
	.sect	'.debug_abbrev'
.L125:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('ip4_output_if_src')
	.sect	'.debug_line'
.L126:
	.word	.L413-.L412
.L412:
	.half	3
	.word	.L415-.L414
.L414:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\ip4.c',0,0,0,0,0
.L415:
	.byte	5,1,7,0,5,2
	.word	.L95
	.byte	3,186,6,1,5,3,9
	.half	.L285-.L95
	.byte	3,25,1,5,1,9
	.half	.L416-.L285
	.byte	3,103,1,5,3,9
	.half	.L284-.L416
	.byte	3,25,1,7,9
	.half	.L417-.L284
	.byte	1,9
	.half	.L65-.L417
	.byte	3,5,1,5,28,7,9
	.half	.L202-.L65
	.byte	3,38,1,5,5,9
	.half	.L281-.L202
	.byte	1,7,9
	.half	.L418-.L281
	.byte	3,9,1,5,31,9
	.half	.L419-.L418
	.byte	3,127,1,5,5,9
	.half	.L283-.L419
	.byte	3,1,1,7,9
	.half	.L420-.L283
	.byte	1,9
	.half	.L68-.L420
	.byte	3,3,1,9
	.half	.L287-.L68
	.byte	3,1,1,9
	.half	.L421-.L287
	.byte	3,12,1,9
	.half	.L422-.L421
	.byte	3,122,1,9
	.half	.L423-.L422
	.byte	3,6,1,5,16,9
	.half	.L288-.L423
	.byte	3,3,1,5,5,3,126,1,5,16,9
	.half	.L289-.L288
	.byte	3,117,1,5,5,9
	.half	.L290-.L289
	.byte	3,15,1,5,16,9
	.half	.L424-.L290
	.byte	3,113,1,9
	.half	.L425-.L424
	.byte	3,13,1,5,5,3,2,1,5,16,9
	.half	.L426-.L425
	.byte	3,113,1,5,5,3,15,1,5,47,9
	.half	.L427-.L426
	.byte	3,119,1,5,16,9
	.half	.L428-.L427
	.byte	3,122,1,5,13,9
	.half	.L429-.L428
	.byte	3,6,1,5,47,9
	.half	.L430-.L429
	.byte	3,1,1,5,13,9
	.half	.L431-.L430
	.byte	1,5,16,9
	.half	.L432-.L431
	.byte	3,6,1,5,13,9
	.half	.L433-.L432
	.byte	1,5,5,9
	.half	.L434-.L433
	.byte	3,6,1,5,13,9
	.half	.L435-.L434
	.byte	3,126,1,5,5,9
	.half	.L291-.L435
	.byte	3,3,1,5,13,9
	.half	.L436-.L291
	.byte	3,2,1,5,5,9
	.half	.L437-.L436
	.byte	3,4,1,5,7,9
	.half	.L293-.L437
	.byte	3,126,1,5,5,9
	.half	.L438-.L293
	.byte	1,9
	.half	.L439-.L438
	.byte	3,2,1,5,7,7,9
	.half	.L440-.L439
	.byte	3,1,1,5,48,9
	.half	.L441-.L440
	.byte	1,5,7,9
	.half	.L69-.L441
	.byte	3,3,1,5,46,9
	.half	.L70-.L69
	.byte	3,4,1,5,7,3,124,1,5,46,9
	.half	.L442-.L70
	.byte	3,5,1,5,13,9
	.half	.L443-.L442
	.byte	3,127,1,9
	.half	.L444-.L443
	.byte	3,1,1,5,42,9
	.half	.L445-.L444
	.byte	3,1,1,5,24,9
	.half	.L446-.L445
	.byte	1,5,31,9
	.half	.L294-.L446
	.byte	1,5,24,9
	.half	.L292-.L294
	.byte	3,1,1,5,31,9
	.half	.L447-.L292
	.byte	1,5,15,9
	.half	.L448-.L447
	.byte	3,1,1,5,22,9
	.half	.L295-.L448
	.byte	3,2,1,5,54,9
	.half	.L203-.L295
	.byte	3,122,1,5,10,9
	.half	.L66-.L203
	.byte	3,23,1,5,18,9
	.half	.L449-.L66
	.byte	1,5,5,9
	.half	.L450-.L449
	.byte	1,5,7,7,9
	.half	.L67-.L450
	.byte	3,2,1,5,14,9
	.half	.L451-.L67
	.byte	3,2,1,5,7,9
	.half	.L452-.L451
	.byte	3,126,1,5,1,9
	.half	.L453-.L452
	.byte	3,39,1,5,31,7,9
	.half	.L72-.L453
	.byte	3,93,1,5,13,9
	.half	.L296-.L72
	.byte	3,2,1,5,5,9
	.half	.L454-.L296
	.byte	3,127,1,5,3,9
	.half	.L71-.L454
	.byte	3,4,1,5,12,9
	.half	.L455-.L71
	.byte	3,23,1,5,7,9
	.half	.L456-.L455
	.byte	1,5,23,7,9
	.half	.L457-.L456
	.byte	1,5,33,9
	.half	.L458-.L457
	.byte	1,5,31,7,9
	.half	.L459-.L458
	.byte	3,1,1,5,15,9
	.half	.L74-.L459
	.byte	3,5,1,5,34,9
	.half	.L460-.L74
	.byte	1,5,1,9
	.half	.L128-.L460
	.byte	3,1,0,1,1
.L413:
	.sdecl	'.debug_ranges',debug,cluster('ip4_output_if_src')
	.sect	'.debug_ranges'
.L127:
	.word	-1,.L95,0,.L128-.L95,0,0
.L195:
	.word	-1,.L95,0,.L187-.L95,-1,.L97,0,.L148-.L97,0,0
	.sdecl	'.debug_info',debug,cluster('ip4_input_accept')
	.sect	'.debug_info'
.L129:
	.word	245
	.half	3
	.word	.L130
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\ip4.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L132,.L131
	.byte	2
	.word	.L100
	.byte	3
	.byte	'ip4_input_accept',0,1,246,2,1
	.word	.L204
	.byte	1,1
	.word	.L87,.L205,.L86
	.byte	4
	.byte	'netif',0,1,246,2,32
	.word	.L151,.L206
	.byte	5
	.word	.L87,.L205
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('ip4_input_accept')
	.sect	'.debug_abbrev'
.L130:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('ip4_input_accept')
	.sect	'.debug_line'
.L131:
	.word	.L462-.L461
.L461:
	.half	3
	.word	.L464-.L463
.L463:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\ip4.c',0,0,0,0,0
.L464:
	.byte	5,8,7,0,5,2
	.word	.L87
	.byte	3,254,2,1,5,7,9
	.half	.L465-.L87
	.byte	1,5,33,7,9
	.half	.L466-.L465
	.byte	1,5,9,9
	.half	.L467-.L466
	.byte	3,2,1,9
	.half	.L468-.L467
	.byte	3,2,1,5,14,9
	.half	.L20-.L468
	.byte	3,8,1,5,1,3,14,1,5,10,7,9
	.half	.L18-.L20
	.byte	3,127,1,5,1,3,1,1,7,9
	.half	.L133-.L18
	.byte	0,1,1
.L462:
	.sdecl	'.debug_ranges',debug,cluster('ip4_input_accept')
	.sect	'.debug_ranges'
.L132:
	.word	-1,.L87,0,.L133-.L87,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_24')
	.sect	'.debug_info'
.L134:
	.word	206
	.half	3
	.word	.L135
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\ip4.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L137,.L136
	.byte	2
	.word	.L100
	.byte	3
	.byte	'.cocofun_24',0,1,152,1,1,1
	.word	.L85,.L138,.L84
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_24')
	.sect	'.debug_abbrev'
.L135:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_24')
	.sect	'.debug_line'
.L136:
	.word	.L470-.L469
.L469:
	.half	3
	.word	.L472-.L471
.L471:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\ip4.c',0,0,0,0,0
.L472:
	.byte	5,5,7,0,5,2
	.word	.L85
	.byte	3,221,1,1,9
	.half	.L138-.L85
	.byte	0,1,1,5,5,0,5,2
	.word	.L85
	.byte	3,141,8,1,9
	.half	.L209-.L85
	.byte	3,208,121,1,7,9
	.half	.L138-.L209
	.byte	0,1,1
.L470:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_24')
	.sect	'.debug_ranges'
.L137:
	.word	-1,.L85,0,.L138-.L85,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_25')
	.sect	'.debug_info'
.L139:
	.word	206
	.half	3
	.word	.L140
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\ip4.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L142,.L141
	.byte	2
	.word	.L100
	.byte	3
	.byte	'.cocofun_25',0,1,170,3,1,1
	.word	.L91,.L143,.L90
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_25')
	.sect	'.debug_abbrev'
.L140:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_25')
	.sect	'.debug_line'
.L141:
	.word	.L474-.L473
.L473:
	.half	3
	.word	.L476-.L475
.L475:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\ip4.c',0,0,0,0,0
.L476:
	.byte	5,7,7,0,5,2
	.word	.L91
	.byte	3,244,4,1,5,15,9
	.half	.L477-.L91
	.byte	3,4,1,5,7,9
	.half	.L242-.L477
	.byte	3,124,1,5,15,9
	.half	.L241-.L242
	.byte	3,4,1,7,9
	.half	.L143-.L241
	.byte	0,1,1,5,11,0,5,2
	.word	.L91
	.byte	3,229,5,1,5,19,9
	.half	.L477-.L91
	.byte	3,3,1,5,11,9
	.half	.L242-.L477
	.byte	3,125,1,5,15,9
	.half	.L241-.L242
	.byte	3,147,127,1,7,9
	.half	.L143-.L241
	.byte	0,1,1
.L474:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_25')
	.sect	'.debug_ranges'
.L142:
	.word	-1,.L91,0,.L143-.L91,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_26')
	.sect	'.debug_info'
.L144:
	.word	206
	.half	3
	.word	.L145
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\ip4.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L147,.L146
	.byte	2
	.word	.L100
	.byte	3
	.byte	'.cocofun_26',0,1,187,6,1,1
	.word	.L97,.L148,.L96
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_26')
	.sect	'.debug_abbrev'
.L145:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_26')
	.sect	'.debug_line'
.L146:
	.word	.L479-.L478
.L478:
	.half	3
	.word	.L481-.L480
.L480:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\ip4.c',0,0,0,0,0
.L481:
	.byte	5,3,7,0,5,2
	.word	.L97
	.byte	3,211,6,1,9
	.half	.L148-.L97
	.byte	0,1,1,5,5,0,5,2
	.word	.L97
	.byte	3,135,7,1,5,3,9
	.half	.L482-.L97
	.byte	3,76,1,7,9
	.half	.L148-.L482
	.byte	0,1,1,5,3,0,5,2
	.word	.L97
	.byte	3,136,8,1,9
	.half	.L482-.L97
	.byte	3,203,126,1,7,9
	.half	.L148-.L482
	.byte	0,1,1
.L479:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_26')
	.sect	'.debug_ranges'
.L147:
	.word	-1,.L97,0,.L148-.L97,0,0
	.sdecl	'.debug_info',debug,cluster('ip_id')
	.sect	'.debug_info'
.L149:
	.word	188
	.half	3
	.word	.L150
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\ip4.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1,2
	.word	.L100
	.byte	3
	.byte	'ip_id',0,12,107,14
	.word	.L166
	.byte	5,3
	.word	ip_id
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('ip_id')
	.sect	'.debug_abbrev'
.L150:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_24')
	.sect	'.debug_loc'
.L84:
	.word	-1,.L85,0,.L138-.L85
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_25')
	.sect	'.debug_loc'
.L90:
	.word	-1,.L91,0,.L143-.L91
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_26')
	.sect	'.debug_loc'
.L96:
	.word	-1,.L97,0,.L148-.L97
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ip4_input')
	.sect	'.debug_loc'
.L161:
	.word	-1,.L89,0,.L212-.L89
	.half	1
	.byte	101
	.word	.L24-.L89,.L214-.L89
	.half	1
	.byte	101
	.word	.L229-.L89,.L230-.L89
	.half	1
	.byte	100
	.word	.L238-.L89,.L239-.L89
	.half	1
	.byte	100
	.word	.L91-.L89,.L241-.L89
	.half	1
	.byte	109
	.word	.L243-.L89,.L244-.L89
	.half	1
	.byte	109
	.word	.L264-.L89,.L263-.L89
	.half	1
	.byte	101
	.word	.L267-.L89,.L266-.L89
	.half	1
	.byte	101
	.word	.L270-.L89,.L269-.L89
	.half	1
	.byte	101
	.word	.L91-.L89,.L143-.L89
	.half	1
	.byte	109
	.word	.L276-.L89,.L158-.L89
	.half	1
	.byte	109
	.word	0,0
.L88:
	.word	-1,.L89,0,.L211-.L89
	.half	2
	.byte	138,0
	.word	.L211-.L89,.L158-.L89
	.half	2
	.byte	138,32
	.word	.L158-.L89,.L158-.L89
	.half	2
	.byte	138,0
	.word	0,0
.L164:
	.word	-1,.L89,.L213-.L89,.L212-.L89
	.half	1
	.byte	98
	.word	.L24-.L89,.L215-.L89
	.half	1
	.byte	98
	.word	.L215-.L89,.L216-.L89
	.half	1
	.byte	111
	.word	.L216-.L89,.L222-.L89
	.half	1
	.byte	100
	.word	.L225-.L89,.L226-.L89
	.half	1
	.byte	111
	.word	.L33-.L89,.L228-.L89
	.half	1
	.byte	111
	.word	.L91-.L89,.L241-.L89
	.half	2
	.byte	145,96
	.word	.L245-.L89,.L244-.L89
	.half	2
	.byte	145,96
	.word	.L247-.L89,.L49-.L89
	.half	1
	.byte	111
	.word	.L255-.L89,.L258-.L89
	.half	1
	.byte	98
	.word	.L258-.L89,.L259-.L89
	.half	1
	.byte	111
	.word	.L260-.L89,.L261-.L89
	.half	1
	.byte	111
	.word	.L91-.L89,.L143-.L89
	.half	2
	.byte	145,96
	.word	.L276-.L89,.L158-.L89
	.half	2
	.byte	145,96
	.word	0,0
.L167:
	.word	-1,.L89,.L217-.L89,.L25-.L89
	.half	1
	.byte	89
	.word	.L91-.L89,.L241-.L89
	.half	1
	.byte	89
	.word	.L45-.L89,.L244-.L89
	.half	1
	.byte	89
	.word	.L256-.L89,.L257-.L89
	.half	1
	.byte	84
	.word	.L91-.L89,.L143-.L89
	.half	1
	.byte	89
	.word	.L276-.L89,.L46-.L89
	.half	1
	.byte	89
	.word	0,0
.L168:
	.word	-1,.L89,.L214-.L89,.L26-.L89
	.half	1
	.byte	82
	.word	.L218-.L89,.L25-.L89
	.half	1
	.byte	88
	.word	.L91-.L89,.L241-.L89
	.half	1
	.byte	88
	.word	.L45-.L89,.L244-.L89
	.half	1
	.byte	88
	.word	.L91-.L89,.L143-.L89
	.half	1
	.byte	88
	.word	.L276-.L89,.L46-.L89
	.half	1
	.byte	88
	.word	0,0
.L165:
	.word	-1,.L89,.L226-.L89,.L33-.L89
	.half	1
	.byte	111
	.word	.L227-.L89,.L33-.L89
	.half	2
	.byte	145,124
	.word	.L231-.L89,.L37-.L89
	.half	2
	.byte	145,124
	.word	.L228-.L89,.L232-.L89
	.half	1
	.byte	111
	.word	.L233-.L89,.L25-.L89
	.half	2
	.byte	145,124
	.word	.L234-.L89,.L235-.L89
	.half	1
	.byte	111
	.word	.L236-.L89,.L237-.L89
	.half	1
	.byte	100
	.word	.L42-.L89,.L36-.L89
	.half	1
	.byte	111
	.word	.L91-.L89,.L241-.L89
	.half	2
	.byte	145,124
	.word	.L91-.L89,.L241-.L89
	.half	1
	.byte	111
	.word	.L45-.L89,.L244-.L89
	.half	2
	.byte	145,124
	.word	.L246-.L89,.L247-.L89
	.half	1
	.byte	111
	.word	.L254-.L89,.L255-.L89
	.half	1
	.byte	98
	.word	.L271-.L89,.L272-.L89
	.half	1
	.byte	100
	.word	.L91-.L89,.L143-.L89
	.half	2
	.byte	145,124
	.word	.L276-.L89,.L46-.L89
	.half	2
	.byte	145,124
	.word	0,0
.L160:
	.word	-1,.L89,0,.L212-.L89
	.half	1
	.byte	100
	.word	.L24-.L89,.L214-.L89
	.half	1
	.byte	100
	.word	.L219-.L89,.L26-.L89
	.half	1
	.byte	100
	.word	.L220-.L89,.L221-.L89
	.half	1
	.byte	100
	.word	.L223-.L89,.L224-.L89
	.half	1
	.byte	100
	.word	.L240-.L89,.L25-.L89
	.half	1
	.byte	100
	.word	.L91-.L89,.L241-.L89
	.half	1
	.byte	108
	.word	.L242-.L89,.L241-.L89
	.half	1
	.byte	100
	.word	.L248-.L89,.L249-.L89
	.half	1
	.byte	108
	.word	.L250-.L89,.L251-.L89
	.half	1
	.byte	100
	.word	.L252-.L89,.L249-.L89
	.half	1
	.byte	100
	.word	.L249-.L89,.L49-.L89
	.half	1
	.byte	98
	.word	.L253-.L89,.L244-.L89
	.half	1
	.byte	108
	.word	.L256-.L89,.L257-.L89
	.half	1
	.byte	100
	.word	.L262-.L89,.L263-.L89
	.half	1
	.byte	100
	.word	.L265-.L89,.L266-.L89
	.half	1
	.byte	100
	.word	.L268-.L89,.L269-.L89
	.half	1
	.byte	100
	.word	.L273-.L89,.L274-.L89
	.half	1
	.byte	100
	.word	.L275-.L89,.L58-.L89
	.half	1
	.byte	100
	.word	.L91-.L89,.L143-.L89
	.half	1
	.byte	108
	.word	.L242-.L89,.L143-.L89
	.half	1
	.byte	100
	.word	.L276-.L89,.L158-.L89
	.half	1
	.byte	108
	.word	.L276-.L89,.L55-.L89
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ip4_input_accept')
	.sect	'.debug_loc'
.L86:
	.word	-1,.L87,0,.L205-.L87
	.half	2
	.byte	138,0
	.word	0,0
.L206:
	.word	-1,.L87,0,.L210-.L87
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ip4_output')
	.sect	'.debug_loc'
.L172:
	.word	-1,.L99,.L97-.L99,.L148-.L99
	.half	1
	.byte	102
	.word	.L97-.L99,.L148-.L99
	.half	1
	.byte	110
	.word	0,.L78-.L99
	.half	1
	.byte	102
	.word	.L305-.L99,.L306-.L99
	.half	1
	.byte	100
	.word	.L85-.L99,.L138-.L99
	.half	1
	.byte	110
	.word	.L307-.L99,.L169-.L99
	.half	1
	.byte	110
	.word	.L312-.L99,.L169-.L99
	.half	1
	.byte	102
	.word	0,0
.L98:
	.word	-1,.L99,0,.L303-.L99
	.half	2
	.byte	138,0
	.word	.L303-.L99,.L79-.L99
	.half	2
	.byte	138,16
	.word	.L79-.L99,.L79-.L99
	.half	2
	.byte	138,0
	.word	.L79-.L99,.L169-.L99
	.half	2
	.byte	138,16
	.word	.L169-.L99,.L169-.L99
	.half	2
	.byte	138,0
	.word	0,0
.L177:
	.word	-1,.L99,.L85-.L99,.L138-.L99
	.half	1
	.byte	98
	.word	.L306-.L99,.L169-.L99
	.half	1
	.byte	98
	.word	.L313-.L99,.L169-.L99
	.half	1
	.byte	103
	.word	0,0
.L170:
	.word	-1,.L99,0,.L304-.L99
	.half	1
	.byte	100
	.word	.L97-.L99,.L279-.L99
	.half	1
	.byte	100
	.word	.L97-.L99,.L148-.L99
	.half	1
	.byte	108
	.word	.L85-.L99,.L138-.L99
	.half	1
	.byte	108
	.word	.L308-.L99,.L169-.L99
	.half	1
	.byte	108
	.word	.L310-.L99,.L169-.L99
	.half	1
	.byte	100
	.word	0,0
.L176:
	.word	-1,.L99,.L97-.L99,.L148-.L99
	.half	1
	.byte	90
	.word	.L97-.L99,.L148-.L99
	.half	1
	.byte	86
	.word	0,.L78-.L99
	.half	1
	.byte	86
	.word	.L85-.L99,.L138-.L99
	.half	1
	.byte	90
	.word	.L309-.L99,.L169-.L99
	.half	1
	.byte	90
	.word	.L311-.L99,.L169-.L99
	.half	1
	.byte	86
	.word	0,0
.L171:
	.word	-1,.L99,.L97-.L99,.L148-.L99
	.half	1
	.byte	101
	.word	.L97-.L99,.L148-.L99
	.half	1
	.byte	109
	.word	0,.L78-.L99
	.half	1
	.byte	101
	.word	.L85-.L99,.L138-.L99
	.half	1
	.byte	109
	.word	.L309-.L99,.L169-.L99
	.half	1
	.byte	109
	.word	.L311-.L99,.L169-.L99
	.half	1
	.byte	101
	.word	0,0
.L175:
	.word	-1,.L99,.L97-.L99,.L148-.L99
	.half	1
	.byte	85
	.word	0,.L78-.L99
	.half	1
	.byte	85
	.word	.L79-.L99,.L310-.L99
	.half	1
	.byte	89
	.word	0,0
.L174:
	.word	-1,.L99,.L97-.L99,.L148-.L99
	.half	1
	.byte	84
	.word	0,.L78-.L99
	.half	1
	.byte	84
	.word	.L79-.L99,.L310-.L99
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ip4_output_if')
	.sect	'.debug_loc'
.L181:
	.word	-1,.L93,0,.L178-.L93
	.half	1
	.byte	102
	.word	0,0
.L92:
	.word	-1,.L93,0,.L178-.L93
	.half	2
	.byte	138,0
	.word	0,0
.L185:
	.word	-1,.L93,0,.L178-.L93
	.half	1
	.byte	103
	.word	0,0
.L179:
	.word	-1,.L93,0,.L178-.L93
	.half	1
	.byte	100
	.word	0,0
.L184:
	.word	-1,.L93,0,.L178-.L93
	.half	1
	.byte	86
	.word	0,0
.L180:
	.word	-1,.L93,0,.L178-.L93
	.half	1
	.byte	101
	.word	0,0
.L186:
	.word	-1,.L93,0,.L178-.L93
	.half	1
	.byte	101
	.word	0,0
.L183:
	.word	-1,.L93,0,.L178-.L93
	.half	1
	.byte	85
	.word	0,0
.L182:
	.word	-1,.L93,0,.L178-.L93
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ip4_output_if_src')
	.sect	'.debug_loc'
.L201:
	.word	-1,.L95,.L291-.L95,.L292-.L95
	.half	1
	.byte	88
	.word	.L294-.L95,.L295-.L95
	.half	1
	.byte	95
	.word	.L295-.L95,.L66-.L95
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L190:
	.word	-1,.L95,.L97-.L95,.L148-.L95
	.half	1
	.byte	109
	.word	.L97-.L95,.L148-.L95
	.half	1
	.byte	102
	.word	0,.L65-.L95
	.half	1
	.byte	102
	.word	.L282-.L95,.L187-.L95
	.half	1
	.byte	109
	.word	.L299-.L95,.L74-.L95
	.half	1
	.byte	102
	.word	.L302-.L95,.L187-.L95
	.half	1
	.byte	102
	.word	0,0
.L199:
	.word	-1,.L95,.L97-.L95,.L148-.L95
	.half	2
	.byte	145,116
	.word	0,.L187-.L95
	.half	2
	.byte	145,116
	.word	0,0
.L94:
	.word	-1,.L95,0,.L277-.L95
	.half	2
	.byte	138,0
	.word	.L277-.L95,.L72-.L95
	.half	2
	.byte	138,24
	.word	.L72-.L95,.L72-.L95
	.half	2
	.byte	138,0
	.word	.L72-.L95,.L75-.L95
	.half	2
	.byte	138,24
	.word	.L75-.L95,.L75-.L95
	.half	2
	.byte	138,0
	.word	.L75-.L95,.L187-.L95
	.half	2
	.byte	138,24
	.word	.L187-.L95,.L187-.L95
	.half	2
	.byte	138,0
	.word	0,0
.L197:
	.word	-1,.L95,.L97-.L95,.L148-.L95
	.half	1
	.byte	111
	.word	.L283-.L95,.L66-.L95
	.half	1
	.byte	111
	.word	.L296-.L95,.L71-.L95
	.half	1
	.byte	111
	.word	0,0
.L194:
	.word	-1,.L95,.L97-.L95,.L148-.L95
	.half	1
	.byte	110
	.word	.L97-.L95,.L148-.L95
	.half	1
	.byte	103
	.word	0,.L65-.L95
	.half	1
	.byte	103
	.word	.L284-.L95,.L187-.L95
	.half	1
	.byte	110
	.word	.L298-.L95,.L74-.L95
	.half	1
	.byte	101
	.word	.L300-.L95,.L187-.L95
	.half	1
	.byte	100
	.word	0,0
.L188:
	.word	-1,.L95,0,.L278-.L95
	.half	1
	.byte	100
	.word	.L97-.L95,.L148-.L95
	.half	1
	.byte	108
	.word	.L97-.L95,.L279-.L95
	.half	1
	.byte	100
	.word	.L280-.L95,.L281-.L95
	.half	1
	.byte	100
	.word	.L285-.L95,.L187-.L95
	.half	1
	.byte	108
	.word	.L297-.L95,.L74-.L95
	.half	1
	.byte	100
	.word	.L301-.L95,.L187-.L95
	.half	1
	.byte	101
	.word	0,0
.L193:
	.word	-1,.L95,.L97-.L95,.L148-.L95
	.half	1
	.byte	90
	.word	.L97-.L95,.L148-.L95
	.half	1
	.byte	86
	.word	0,.L65-.L95
	.half	1
	.byte	86
	.word	.L277-.L95,.L187-.L95
	.half	1
	.byte	90
	.word	0,0
.L189:
	.word	-1,.L95,.L97-.L95,.L148-.L95
	.half	1
	.byte	101
	.word	.L97-.L95,.L148-.L95
	.half	2
	.byte	145,120
	.word	0,.L65-.L95
	.half	1
	.byte	101
	.word	.L286-.L95,.L187-.L95
	.half	2
	.byte	145,120
	.word	.L293-.L95,.L66-.L95
	.half	1
	.byte	98
	.word	0,0
.L192:
	.word	-1,.L95,.L97-.L95,.L148-.L95
	.half	1
	.byte	85
	.word	0,.L65-.L95
	.half	1
	.byte	85
	.word	.L288-.L95,.L289-.L95
	.half	1
	.byte	89
	.word	0,0
.L191:
	.word	-1,.L95,.L97-.L95,.L148-.L95
	.half	1
	.byte	84
	.word	0,.L65-.L95
	.half	1
	.byte	84
	.word	.L68-.L95,.L287-.L95
	.half	1
	.byte	88
	.word	.L289-.L95,.L290-.L95
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ip4_route')
	.sect	'.debug_loc'
.L154:
	.word	-1,.L83,.L85-.L83,.L209-.L83
	.half	1
	.byte	100
	.word	0,.L152-.L83
	.half	1
	.byte	100
	.word	0,0
.L82:
	.word	-1,.L83,0,.L152-.L83
	.half	2
	.byte	138,0
	.word	0,0
.L156:
	.word	-1,.L83,.L207-.L83,.L208-.L83
	.half	1
	.byte	98
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L483:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('ip4_route')
	.sect	'.debug_frame'
	.word	20
	.word	.L483,.L83,.L152-.L83
	.byte	8,19,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('ip4_input_accept')
	.sect	'.debug_frame'
	.word	12
	.word	.L483,.L87,.L205-.L87
	.sdecl	'.debug_frame',debug,cluster('ip4_input')
	.sect	'.debug_frame'
	.word	36
	.word	.L483,.L89,.L158-.L89
	.byte	4
	.word	(.L211-.L89)/2
	.byte	19,32,22,26,3,19,138,32,4
	.word	(.L158-.L211)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('ip4_output_if')
	.sect	'.debug_frame'
	.word	12
	.word	.L483,.L93,.L178-.L93
	.sdecl	'.debug_frame',debug,cluster('ip4_output_if_src')
	.sect	'.debug_frame'
	.word	68
	.word	.L483,.L95,.L187-.L95
	.byte	4
	.word	(.L277-.L95)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L72-.L277)/2
	.byte	19,0,8,26,19,24,22,26,3,19,138,24,4
	.word	(.L75-.L72)/2
	.byte	19,0,8,26,19,24,22,26,3,19,138,24,4
	.word	(.L187-.L75)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('ip4_output')
	.sect	'.debug_frame'
	.word	52
	.word	.L483,.L99,.L169-.L99
	.byte	4
	.word	(.L303-.L99)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L79-.L303)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L169-.L79)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L484:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_24')
	.sect	'.debug_frame'
	.word	24
	.word	.L484,.L85,.L138-.L85
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_25')
	.sect	'.debug_frame'
	.word	24
	.word	.L484,.L91,.L143-.L91
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_26')
	.sect	'.debug_frame'
	.word	24
	.word	.L484,.L97,.L148-.L97
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1044  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1045  #if LWIP_NETIF_USE_HINTS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1046  /** Like ip_output, but takes and addr_hint pointer that is passed on to netif->addr_hint
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1047   *  before calling ip_output_if.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1048   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1049   * @param p the packet to send (p->payload points to the data, e.g. next
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1050              protocol header; if dest == LWIP_IP_HDRINCL, p already includes an
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1051              IP header and p->payload points to that IP header)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1052   * @param src the source IP address to send from (if src == IP4_ADDR_ANY, the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1053   *         IP  address of the netif used to send is used as source address)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1054   * @param dest the destination IP address to send the packet to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1055   * @param ttl the TTL value to be set in the IP header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1056   * @param tos the TOS value to be set in the IP header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1057   * @param proto the PROTOCOL to be set in the IP header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1058   * @param netif_hint netif output hint pointer set to netif->hint before
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1059   *        calling ip_output_if()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1060   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1061   * @return ERR_RTE if no route is found
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1062   *         see ip_output_if() for more return values
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1063   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1064  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1065  ip4_output_hinted(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1066                    u8_t ttl, u8_t tos, u8_t proto, struct netif_hint *netif_hint)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1067  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1068    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1069    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1070  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1071    LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1072  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1073    if ((netif = ip4_route_src(src, dest)) == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1074      LWIP_DEBUGF(IP_DEBUG, ("ip4_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1075                             ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1076      IP_STATS_INC(ip.rterr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1077      return ERR_RTE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1078    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1079  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1080    NETIF_SET_HINTS(netif, netif_hint);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1081    err = ip4_output_if(p, src, dest, ttl, tos, proto, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1082    NETIF_RESET_HINTS(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1083  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1084    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1085  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1086  #endif /* LWIP_NETIF_USE_HINTS*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1087  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1088  #if IP_DEBUG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1089  /* Print an IP header by using LWIP_DEBUGF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1090   * @param p an IP packet, p->payload pointing to the IP header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1091   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1092  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1093  ip4_debug_print(struct pbuf *p)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1094  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1095    struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1096  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1097    LWIP_DEBUGF(IP_DEBUG, ("IP header:\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1098    LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1099    LWIP_DEBUGF(IP_DEBUG, ("|%2"S16_F" |%2"S16_F" |  0x%02"X16_F" |     %5"U16_F"     | (v, hl, tos, len)\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1100                           (u16_t)IPH_V(iphdr),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1101                           (u16_t)IPH_HL(iphdr),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1102                           (u16_t)IPH_TOS(iphdr),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1103                           lwip_ntohs(IPH_LEN(iphdr))));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1104    LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1105    LWIP_DEBUGF(IP_DEBUG, ("|    %5"U16_F"      |%"U16_F"%"U16_F"%"U16_F"|    %4"U16_F"   | (id, flags, offset)\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1106                           lwip_ntohs(IPH_ID(iphdr)),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1107                           (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 15 & 1),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1108                           (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 14 & 1),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1109                           (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 13 & 1),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1110                           (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1111    LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1112    LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |    0x%04"X16_F"     | (ttl, proto, chksum)\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1113                           (u16_t)IPH_TTL(iphdr),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1114                           (u16_t)IPH_PROTO(iphdr),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1115                           lwip_ntohs(IPH_CHKSUM(iphdr))));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1116    LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1117    LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  | (src)\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1118                           ip4_addr1_16_val(iphdr->src),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1119                           ip4_addr2_16_val(iphdr->src),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1120                           ip4_addr3_16_val(iphdr->src),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1121                           ip4_addr4_16_val(iphdr->src)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1122    LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1123    LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  | (dest)\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1124                           ip4_addr1_16_val(iphdr->dest),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1125                           ip4_addr2_16_val(iphdr->dest),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1126                           ip4_addr3_16_val(iphdr->dest),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1127                           ip4_addr4_16_val(iphdr->dest)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1128    LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1129  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1130  #endif /* IP_DEBUG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1131  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\ip4.c	  1132  #endif /* LWIP_IPV4 */

	; Module end
