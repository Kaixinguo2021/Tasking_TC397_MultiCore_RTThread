	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\.igmp.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Rtl8211f -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\igmp.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\igmp.src ..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\igmp.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\igmp.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	734
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\igmp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L5
	.byte	2
	.byte	'int',0,4,5,3
	.word	171
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	178
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	220
	.byte	7
	.word	220
	.byte	8
	.byte	'__cmpswapw',0
	.word	236
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	241
	.byte	9
	.byte	'value',0
	.word	220
	.byte	9
	.byte	'compare',0
	.word	220
	.byte	0,2
	.byte	'short int',0,2,5,10
	.byte	'__wchar_t',0,1,1,1
	.word	298
	.byte	10
	.byte	'__size_t',0,1,1,1
	.word	220
	.byte	10
	.byte	'__ptrdiff_t',0,1,1,1
	.word	171
	.byte	11,1,7
	.word	366
	.byte	10
	.byte	'__codeptr',0,1,1,1
	.word	368
	.byte	10
	.byte	'__intptr_t',0,1,1,1
	.word	171
	.byte	10
	.byte	'__uintptr_t',0,1,1,1
	.word	220
	.byte	2
	.byte	'unsigned char',0,1,8,10
	.byte	'uint8',0,2,108,29
	.word	430
	.byte	2
	.byte	'unsigned short int',0,2,7,10
	.byte	'uint16',0,2,112,29
	.word	461
	.byte	2
	.byte	'unsigned long int',0,4,7,10
	.byte	'uint32',0,2,116,29
	.word	498
	.byte	2
	.byte	'char',0,1,6,10
	.byte	'sint8',0,2,125,29
	.word	534
	.byte	10
	.byte	'sint16',0,2,129,1,29
	.word	298
	.byte	2
	.byte	'long int',0,4,5,10
	.byte	'sint32',0,2,134,1,29
	.word	572
	.byte	2
	.byte	'long long int',0,8,5,10
	.byte	'sint64',0,2,141,1,29
	.word	600
	.byte	2
	.byte	'float',0,4,4,10
	.byte	'float32',0,2,170,1,29
	.word	633
	.byte	12
	.byte	'void',0,7
	.word	659
	.byte	10
	.byte	'pvoid',0,3,54,28
	.word	665
	.byte	10
	.byte	'Ifx_TickTime',0,3,76,28
	.word	600
	.byte	10
	.byte	'u32_t',0,4,87,16
	.word	498
	.byte	10
	.byte	'intmax_t',0,5,198,2,41
	.word	600
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,22,0,3,8,58,15,59,15,57,15,73,19,0,0,11,21,0,54,15,0,0,12,59,0
	.byte	3,8,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\igmp.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'cc.h',0,2,0,0
	.byte	'stdint.h',0,3,0,0,0
.L9:
.L7:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	     1  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	     2   * @file
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	     3   * IGMP - Internet Group Management Protocol
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	     4   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	     5   * @defgroup igmp IGMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	     6   * @ingroup ip4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	     7   * To be called from TCPIP thread
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	     8   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	     9  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    10  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    11   * Copyright (c) 2002 CITEL Technologies Ltd.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    12   * All rights reserved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    13   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    14   * Redistribution and use in source and binary forms, with or without
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    15   * modification, are permitted provided that the following conditions
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    16   * are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    17   * 1. Redistributions of source code must retain the above copyright
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    18   *    notice, this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    19   * 2. Redistributions in binary form must reproduce the above copyright
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    20   *    notice, this list of conditions and the following disclaimer in the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    21   *    documentation and/or other materials provided with the distribution.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    22   * 3. Neither the name of CITEL Technologies Ltd nor the names of its contributors
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    23   *    may be used to endorse or promote products derived from this software
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    24   *    without specific prior written permission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    25   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    26   * THIS SOFTWARE IS PROVIDED BY CITEL TECHNOLOGIES AND CONTRIBUTORS ``AS IS''
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    27   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    28   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    29   * ARE DISCLAIMED.  IN NO EVENT SHALL CITEL TECHNOLOGIES OR CONTRIBUTORS BE LIABLE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    30   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    31   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    32   * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    33   * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    34   * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    35   * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    36   * SUCH DAMAGE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    37   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    38   * This file is a contribution to the lwIP TCP/IP stack.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    39   * The Swedish Institute of Computer Science and Adam Dunkels
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    40   * are specifically granted permission to redistribute this
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    41   * source code.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    42  */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    43  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    44  /*-------------------------------------------------------------
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    45  Note 1)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    46  Although the rfc requires V1 AND V2 capability
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    47  we will only support v2 since now V1 is very old (August 1989)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    48  V1 can be added if required
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    49  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    50  a debug print and statistic have been implemented to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    51  show this up.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    52  -------------------------------------------------------------
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    53  -------------------------------------------------------------
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    54  Note 2)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    55  A query for a specific group address (as opposed to ALLHOSTS)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    56  has now been implemented as I am unsure if it is required
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    57  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    58  a debug print and statistic have been implemented to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    59  show this up.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    60  -------------------------------------------------------------
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    61  -------------------------------------------------------------
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    62  Note 3)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    63  The router alert rfc 2113 is implemented in outgoing packets
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    64  but not checked rigorously incoming
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    65  -------------------------------------------------------------
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    66  Steve Reynolds
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    67  ------------------------------------------------------------*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    68  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    69  /*-----------------------------------------------------------------------------
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    70   * RFC 988  - Host extensions for IP multicasting                         - V0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    71   * RFC 1054 - Host extensions for IP multicasting                         -
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    72   * RFC 1112 - Host extensions for IP multicasting                         - V1
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    73   * RFC 2236 - Internet Group Management Protocol, Version 2               - V2  <- this code is based on this RFC (it's the "de facto" standard)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    74   * RFC 3376 - Internet Group Management Protocol, Version 3               - V3
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    75   * RFC 4604 - Using Internet Group Management Protocol Version 3...       - V3+
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    76   * RFC 2113 - IP Router Alert Option                                      -
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    77   *----------------------------------------------------------------------------*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    78  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    79  /*-----------------------------------------------------------------------------
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    80   * Includes
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    81   *----------------------------------------------------------------------------*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    82  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    83  #include "lwip/opt.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    84  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    85  #if LWIP_IPV4 && LWIP_IGMP /* don't build if not configured for use in lwipopts.h */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    86  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    87  #include "lwip/igmp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    88  #include "lwip/debug.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    89  #include "lwip/def.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    90  #include "lwip/mem.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    91  #include "lwip/ip.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    92  #include "lwip/inet_chksum.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    93  #include "lwip/netif.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    94  #include "lwip/stats.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    95  #include "lwip/prot/igmp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    96  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    97  #include <string.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    98  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	    99  static struct igmp_group *igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   100  static err_t  igmp_remove_group(struct netif *netif, struct igmp_group *group);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   101  static void   igmp_timeout(struct netif *netif, struct igmp_group *group);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   102  static void   igmp_start_timer(struct igmp_group *group, u8_t max_time);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   103  static void   igmp_delaying_member(struct igmp_group *group, u8_t maxresp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   104  static err_t  igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   105  static void   igmp_send(struct netif *netif, struct igmp_group *group, u8_t type);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   106  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   107  static ip4_addr_t     allsystems;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   108  static ip4_addr_t     allrouters;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   109  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   110  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   111   * Initialize the IGMP module
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   112   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   113  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   114  igmp_init(void)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   115  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   116    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   117  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   118    IP4_ADDR(&allsystems, 224, 0, 0, 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   119    IP4_ADDR(&allrouters, 224, 0, 0, 2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   120  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   121  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   122  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   123   * Start IGMP processing on interface
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   124   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   125   * @param netif network interface on which start IGMP processing
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   126   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   127  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   128  igmp_start(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   129  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   130    struct igmp_group *group;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   131  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   132    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void *)netif));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   133  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   134    group = igmp_lookup_group(netif, &allsystems);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   135  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   136    if (group != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   137      group->group_state = IGMP_GROUP_IDLE_MEMBER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   138      group->use++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   139  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   140      /* Allow the igmp messages at the MAC level */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   141      if (netif->igmp_mac_filter != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   142        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   143        ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   144        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   145        netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   146      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   147  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   148      return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   149    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   150  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   151    return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   152  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   153  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   154  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   155   * Stop IGMP processing on interface
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   156   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   157   * @param netif network interface on which stop IGMP processing
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   158   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   159  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   160  igmp_stop(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   161  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   162    struct igmp_group *group = netif_igmp_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   163  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   164    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   165  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   166    while (group != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   167      struct igmp_group *next = group->next; /* avoid use-after-free below */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   168  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   169      /* disable the group at the MAC level */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   170      if (netif->igmp_mac_filter != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   171        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_stop: igmp_mac_filter(DEL "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   172        ip4_addr_debug_print_val(IGMP_DEBUG, group->group_address);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   173        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   174        netif->igmp_mac_filter(netif, &(group->group_address), NETIF_DEL_MAC_FILTER);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   175      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   176  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   177      /* free group */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   178      memp_free(MEMP_IGMP_GROUP, group);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   179  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   180      /* move to "next" */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   181      group = next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   182    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   183    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   184  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   185  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   186  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   187   * Report IGMP memberships for this interface
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   188   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   189   * @param netif network interface on which report IGMP memberships
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   190   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   191  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   192  igmp_report_groups(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   193  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   194    struct igmp_group *group = netif_igmp_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   195  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   196    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void *)netif));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   197  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   198    /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   199    if (group != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   200      group = group->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   201    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   202  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   203    while (group != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   204      igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   205      group = group->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   206    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   207  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   208  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   209  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   210   * Search for a group in the netif's igmp group list
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   211   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   212   * @param ifp the network interface for which to look
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   213   * @param addr the group ip address to search for
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   214   * @return a struct igmp_group* if the group has been found,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   215   *         NULL if the group wasn't found.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   216   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   217  struct igmp_group *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   218  igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   219  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   220    struct igmp_group *group = netif_igmp_data(ifp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   221  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   222    while (group != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   223      if (ip4_addr_cmp(&(group->group_address), addr)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   224        return group;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   225      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   226      group = group->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   227    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   228  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   229    /* to be clearer, we return NULL here instead of
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   230     * 'group' (which is also NULL at this point).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   231     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   232    return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   233  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   234  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   235  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   236   * Search for a specific igmp group and create a new one if not found-
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   237   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   238   * @param ifp the network interface for which to look
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   239   * @param addr the group ip address to search
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   240   * @return a struct igmp_group*,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   241   *         NULL on memory error.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   242   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   243  static struct igmp_group *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   244  igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   245  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   246    struct igmp_group *group;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   247    struct igmp_group *list_head = netif_igmp_data(ifp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   248  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   249    /* Search if the group already exists */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   250    group = igmp_lookfor_group(ifp, addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   251    if (group != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   252      /* Group already exists. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   253      return group;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   254    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   255  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   256    /* Group doesn't exist yet, create a new one */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   257    group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   258    if (group != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   259      ip4_addr_set(&(group->group_address), addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   260      group->timer              = 0; /* Not running */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   261      group->group_state        = IGMP_GROUP_NON_MEMBER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   262      group->last_reporter_flag = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   263      group->use                = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   264  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   265      /* Ensure allsystems group is always first in list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   266      if (list_head == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   267        /* this is the first entry in linked list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   268        LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   269                    (ip4_addr_cmp(addr, &allsystems) != 0));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   270        group->next = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   271        netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   272      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   273        /* append _after_ first entry */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   274        LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   275                    (ip4_addr_cmp(addr, &allsystems) == 0));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   276        group->next = list_head->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   277        list_head->next = group;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   278      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   279    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   280  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   281    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group ? "" : "impossible to ")));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   282    ip4_addr_debug_print(IGMP_DEBUG, addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   283    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)ifp));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   284  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   285    return group;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   286  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   287  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   288  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   289   * Remove a group from netif's igmp group list, but don't free it yet
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   290   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   291   * @param group the group to remove from the netif's igmp group list
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   292   * @return ERR_OK if group was removed from the list, an err_t otherwise
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   293   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   294  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   295  igmp_remove_group(struct netif *netif, struct igmp_group *group)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   296  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   297    err_t err = ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   298    struct igmp_group *tmp_group;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   299  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   300    /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   301    for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   302      if (tmp_group->next == group) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   303        tmp_group->next = group->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   304        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   305      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   306    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   307    /* Group not found in netif's igmp group list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   308    if (tmp_group == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   309      err = ERR_ARG;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   310    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   311  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   312    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   313  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   314  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   315  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   316   * Called from ip_input() if a new IGMP packet is received.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   317   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   318   * @param p received igmp packet, p->payload pointing to the igmp header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   319   * @param inp network interface on which the packet was received
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   320   * @param dest destination ip address of the igmp packet
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   321   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   322  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   323  igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   324  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   325    struct igmp_msg   *igmp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   326    struct igmp_group *group;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   327    struct igmp_group *groupref;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   328  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   329    IGMP_STATS_INC(igmp.recv);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   330  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   331    /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   332    if (p->len < IGMP_MINLEN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   333      pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   334      IGMP_STATS_INC(igmp.lenerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   335      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   336      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   337    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   338  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   339    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: message from "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   340    ip4_addr_debug_print_val(IGMP_DEBUG, ip4_current_header()->src);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   341    LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   342    ip4_addr_debug_print_val(IGMP_DEBUG, ip4_current_header()->dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   343    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)inp));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   344  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   345    /* Now calculate and check the checksum */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   346    igmp = (struct igmp_msg *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   347    if (inet_chksum(igmp, p->len)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   348      pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   349      IGMP_STATS_INC(igmp.chkerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   350      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   351      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   352    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   353  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   354    /* Packet is ok so find an existing group */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   355    group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   356  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   357    /* If group can be found or create... */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   358    if (!group) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   359      pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   360      IGMP_STATS_INC(igmp.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   361      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   362      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   363    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   364  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   365    /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   366    switch (igmp->igmp_msgtype) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   367      case IGMP_MEMB_QUERY:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   368        /* IGMP_MEMB_QUERY to the "all systems" address ? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   369        if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   370          /* THIS IS THE GENERAL QUERY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   371          LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: General IGMP_MEMB_QUERY on \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   372  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   373          if (igmp->igmp_maxresp == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   374            IGMP_STATS_INC(igmp.rx_v1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   375            LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: got an all hosts query with time== 0 - this is V1 and not implemented - treat as v2\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   376            igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   377          } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   378            IGMP_STATS_INC(igmp.rx_general);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   379          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   380  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   381          groupref = netif_igmp_data(inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   382  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   383          /* Do not send messages on the all systems group address! */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   384          /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   385          if (groupref != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   386            groupref = groupref->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   387          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   388  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   389          while (groupref) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   390            igmp_delaying_member(groupref, igmp->igmp_maxresp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   391            groupref = groupref->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   392          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   393        } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   394          /* IGMP_MEMB_QUERY to a specific group ? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   395          if (!ip4_addr_isany(&igmp->igmp_group_address)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   396            LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_MEMB_QUERY to a specific group "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   397            ip4_addr_debug_print_val(IGMP_DEBUG, igmp->igmp_group_address);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   398            if (ip4_addr_cmp(dest, &allsystems)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   399              ip4_addr_t groupaddr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   400              LWIP_DEBUGF(IGMP_DEBUG, (" using \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   401              /* we first need to re-look for the group since we used dest last time */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   402              ip4_addr_copy(groupaddr, igmp->igmp_group_address);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   403              group = igmp_lookfor_group(inp, &groupaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   404            } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   405              LWIP_DEBUGF(IGMP_DEBUG, (" with the group address as destination [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   406            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   407  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   408            if (group != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   409              IGMP_STATS_INC(igmp.rx_group);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   410              igmp_delaying_member(group, igmp->igmp_maxresp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   411            } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   412              IGMP_STATS_INC(igmp.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   413            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   414          } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   415            IGMP_STATS_INC(igmp.proterr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   416          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   417        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   418        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   419      case IGMP_V2_MEMB_REPORT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   420        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_V2_MEMB_REPORT\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   421        IGMP_STATS_INC(igmp.rx_report);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   422        if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   423          /* This is on a specific group we have already looked up */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   424          group->timer = 0; /* stopped */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   425          group->group_state = IGMP_GROUP_IDLE_MEMBER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   426          group->last_reporter_flag = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   427        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   428        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   429      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   430        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   431                                 igmp->igmp_msgtype, group->group_state, (void *)&group, (void *)inp));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   432        IGMP_STATS_INC(igmp.proterr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   433        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   434    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   435  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   436    pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   437    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   438  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   439  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   440  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   441   * @ingroup igmp
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   442   * Join a group on one network interface.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   443   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   444   * @param ifaddr ip address of the network interface which should join a new group
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   445   * @param groupaddr the ip address of the group which to join
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   446   * @return ERR_OK if group was joined on the netif(s), an err_t otherwise
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   447   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   448  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   449  igmp_joingroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   450  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   451    err_t err = ERR_VAL; /* no matching interface */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   452    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   453  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   454    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   455  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   456    /* make sure it is multicast address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   457    LWIP_ERROR("igmp_joingroup: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   458    LWIP_ERROR("igmp_joingroup: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   459  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   460    /* loop through netif's */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   461    NETIF_FOREACH(netif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   462      /* Should we join this interface ? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   463      if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   464        err = igmp_joingroup_netif(netif, groupaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   465        if (err != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   466          /* Return an error even if some network interfaces are joined */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   467          /** @todo undo any other netif already joined */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   468          return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   469        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   470      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   471    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   472  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   473    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   474  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   475  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   476  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   477   * @ingroup igmp
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   478   * Join a group on one network interface.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   479   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   480   * @param netif the network interface which should join a new group
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   481   * @param groupaddr the ip address of the group which to join
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   482   * @return ERR_OK if group was joined on the netif, an err_t otherwise
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   483   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   484  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   485  igmp_joingroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   486  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   487    struct igmp_group *group;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   488  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   489    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   490  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   491    /* make sure it is multicast address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   492    LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   493    LWIP_ERROR("igmp_joingroup_netif: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   494  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   495    /* make sure it is an igmp-enabled netif */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   496    LWIP_ERROR("igmp_joingroup_netif: attempt to join on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   497  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   498    /* find group or create a new one if not found */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   499    group = igmp_lookup_group(netif, groupaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   500  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   501    if (group != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   502      /* This should create a new group, check the state to make sure */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   503      if (group->group_state != IGMP_GROUP_NON_MEMBER) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   504        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: join to group not in state IGMP_GROUP_NON_MEMBER\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   505      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   506        /* OK - it was new group */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   507        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: join to new group: "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   508        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   509        LWIP_DEBUGF(IGMP_DEBUG, ("\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   510  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   511        /* If first use of the group, allow the group at the MAC level */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   512        if ((group->use == 0) && (netif->igmp_mac_filter != NULL)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   513          LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: igmp_mac_filter(ADD "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   514          ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   515          LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   516          netif->igmp_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   517        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   518  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   519        IGMP_STATS_INC(igmp.tx_join);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   520        igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   521  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   522        igmp_start_timer(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   523  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   524        /* Need to work out where this timer comes from */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   525        group->group_state = IGMP_GROUP_DELAYING_MEMBER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   526      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   527      /* Increment group use */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   528      group->use++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   529      /* Join on this interface */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   530      return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   531    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   532      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: Not enough memory to join to group\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   533      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   534    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   535  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   536  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   537  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   538   * @ingroup igmp
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   539   * Leave a group on one network interface.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   540   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   541   * @param ifaddr ip address of the network interface which should leave a group
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   542   * @param groupaddr the ip address of the group which to leave
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   543   * @return ERR_OK if group was left on the netif(s), an err_t otherwise
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   544   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   545  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   546  igmp_leavegroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   547  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   548    err_t err = ERR_VAL; /* no matching interface */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   549    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   550  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   551    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   552  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   553    /* make sure it is multicast address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   554    LWIP_ERROR("igmp_leavegroup: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   555    LWIP_ERROR("igmp_leavegroup: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   556  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   557    /* loop through netif's */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   558    NETIF_FOREACH(netif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   559      /* Should we leave this interface ? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   560      if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   561        err_t res = igmp_leavegroup_netif(netif, groupaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   562        if (err != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   563          /* Store this result if we have not yet gotten a success */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   564          err = res;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   565        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   566      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   567    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   568  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   569    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   570  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   571  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   572  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   573   * @ingroup igmp
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   574   * Leave a group on one network interface.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   575   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   576   * @param netif the network interface which should leave a group
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   577   * @param groupaddr the ip address of the group which to leave
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   578   * @return ERR_OK if group was left on the netif, an err_t otherwise
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   579   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   580  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   581  igmp_leavegroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   582  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   583    struct igmp_group *group;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   584  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   585    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   586  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   587    /* make sure it is multicast address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   588    LWIP_ERROR("igmp_leavegroup_netif: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   589    LWIP_ERROR("igmp_leavegroup_netif: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   590  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   591    /* make sure it is an igmp-enabled netif */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   592    LWIP_ERROR("igmp_leavegroup_netif: attempt to leave on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   593  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   594    /* find group */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   595    group = igmp_lookfor_group(netif, groupaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   596  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   597    if (group != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   598      /* Only send a leave if the flag is set according to the state diagram */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   599      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: Leaving group: "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   600      ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   601      LWIP_DEBUGF(IGMP_DEBUG, ("\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   602  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   603      /* If there is no other use of the group */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   604      if (group->use <= 1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   605        /* Remove the group from the list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   606        igmp_remove_group(netif, group);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   607  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   608        /* If we are the last reporter for this group */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   609        if (group->last_reporter_flag) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   610          LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: sending leaving group\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   611          IGMP_STATS_INC(igmp.tx_leave);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   612          igmp_send(netif, group, IGMP_LEAVE_GROUP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   613        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   614  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   615        /* Disable the group at the MAC level */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   616        if (netif->igmp_mac_filter != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   617          LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: igmp_mac_filter(DEL "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   618          ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   619          LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   620          netif->igmp_mac_filter(netif, groupaddr, NETIF_DEL_MAC_FILTER);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   621        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   622  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   623        /* Free group struct */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   624        memp_free(MEMP_IGMP_GROUP, group);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   625      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   626        /* Decrement group use */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   627        group->use--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   628      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   629      return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   630    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   631      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: not member of group\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   632      return ERR_VAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   633    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   634  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   635  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   636  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   637   * The igmp timer function (both for NO_SYS=1 and =0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   638   * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   639   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   640  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   641  igmp_tmr(void)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   642  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   643    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   644  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   645    NETIF_FOREACH(netif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   646      struct igmp_group *group = netif_igmp_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   647  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   648      while (group != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   649        if (group->timer > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   650          group->timer--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   651          if (group->timer == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   652            igmp_timeout(netif, group);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   653          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   654        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   655        group = group->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   656      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   657    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   658  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   659  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   660  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   661   * Called if a timeout for one group is reached.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   662   * Sends a report for this group.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   663   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   664   * @param group an igmp_group for which a timeout is reached
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   665   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   666  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   667  igmp_timeout(struct netif *netif, struct igmp_group *group)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   668  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   669    /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   670       (unless it is the allsystems group) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   671    if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   672        (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   673      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   674      ip4_addr_debug_print_val(IGMP_DEBUG, group->group_address);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   675      LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)netif));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   676  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   677      group->group_state = IGMP_GROUP_IDLE_MEMBER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   678  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   679      IGMP_STATS_INC(igmp.tx_report);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   680      igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   681    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   682  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   683  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   684  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   685   * Start a timer for an igmp group
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   686   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   687   * @param group the igmp_group for which to start a timer
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   688   * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   689   *        every call to igmp_tmr())
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   690   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   691  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   692  igmp_start_timer(struct igmp_group *group, u8_t max_time)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   693  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   694  #ifdef LWIP_RAND
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   695    group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   696  #else /* LWIP_RAND */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   697    /* ATTENTION: use this only if absolutely necessary! */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   698    group->timer = max_time / 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   699  #endif /* LWIP_RAND */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   700  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   701    if (group->timer == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   702      group->timer = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   703    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   704  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   705  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   706  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   707   * Delaying membership report for a group if necessary
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   708   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   709   * @param group the igmp_group for which "delaying" membership report
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   710   * @param maxresp query delay
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   711   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   712  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   713  igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   714  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   715    if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   716        ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   717         ((group->timer == 0) || (maxresp < group->timer)))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   718      igmp_start_timer(group, maxresp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   719      group->group_state = IGMP_GROUP_DELAYING_MEMBER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   720    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   721  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   722  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   723  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   724  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   725   * Sends an IP packet on a network interface. This function constructs the IP header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   726   * and calculates the IP header checksum. If the source IP address is NULL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   727   * the IP address of the outgoing network interface is filled in as source address.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   728   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   729   * @param p the packet to send (p->payload points to the data, e.g. next
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   730              protocol header; if dest == LWIP_IP_HDRINCL, p already includes an
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   731              IP header and p->payload points to that IP header)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   732   * @param src the source IP address to send from (if src == IP4_ADDR_ANY, the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   733   *         IP  address of the netif used to send is used as source address)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   734   * @param dest the destination IP address to send the packet to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   735   * @param netif the netif on which to send this packet
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   736   * @return ERR_OK if the packet was sent OK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   737   *         ERR_BUF if p doesn't have enough space for IP/LINK headers
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   738   *         returns errors returned by netif->output
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   739   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   740  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   741  igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   742  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   743    /* This is the "router alert" option */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   744    u16_t ra[2];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   745    ra[0] = PP_HTONS(ROUTER_ALERT);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   746    ra[1] = 0x0000; /* Router shall examine packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   747    IGMP_STATS_INC(igmp.xmit);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   748    return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   749  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   750  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   751  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   752   * Send an igmp packet to a specific group.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   753   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   754   * @param group the group to which to send the packet
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   755   * @param type the type of igmp packet to send
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   756   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   757  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   758  igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   759  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   760    struct pbuf     *p    = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   761    struct igmp_msg *igmp = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   762    ip4_addr_t   src  = *IP4_ADDR_ANY4;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   763    ip4_addr_t  *dest = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   764  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   765    /* IP header + "router alert" option + IGMP header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   766    p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   767  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   768    if (p) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   769      igmp = (struct igmp_msg *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   770      LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   771                  (p->len >= sizeof(struct igmp_msg)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   772      ip4_addr_copy(src, *netif_ip4_addr(netif));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   773  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   774      if (type == IGMP_V2_MEMB_REPORT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   775        dest = &(group->group_address);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   776        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   777        group->last_reporter_flag = 1; /* Remember we were the last to report */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   778      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   779        if (type == IGMP_LEAVE_GROUP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   780          dest = &allrouters;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   781          ip4_addr_copy(igmp->igmp_group_address, group->group_address);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   782        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   783      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   784  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   785      if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   786        igmp->igmp_msgtype  = type;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   787        igmp->igmp_maxresp  = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   788        igmp->igmp_checksum = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   789        igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   790  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   791        igmp_ip_output_if(p, &src, dest, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   792      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   793  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   794      pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   795    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   796      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   797      IGMP_STATS_INC(igmp.memerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   798    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   799  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   800  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\igmp.c	   801  #endif /* LWIP_IPV4 && LWIP_IGMP */

	; Module end
