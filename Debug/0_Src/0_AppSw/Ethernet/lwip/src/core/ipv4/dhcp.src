	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\.dhcp.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Rtl8211f -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\dhcp.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\dhcp.src ..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\dhcp.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\dhcp.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	734
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\dhcp.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L5
	.byte	2
	.byte	'int',0,4,5,3
	.word	171
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	178
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	220
	.byte	7
	.word	220
	.byte	8
	.byte	'__cmpswapw',0
	.word	236
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	241
	.byte	9
	.byte	'value',0
	.word	220
	.byte	9
	.byte	'compare',0
	.word	220
	.byte	0,2
	.byte	'short int',0,2,5,10
	.byte	'__wchar_t',0,1,1,1
	.word	298
	.byte	10
	.byte	'__size_t',0,1,1,1
	.word	220
	.byte	10
	.byte	'__ptrdiff_t',0,1,1,1
	.word	171
	.byte	11,1,7
	.word	366
	.byte	10
	.byte	'__codeptr',0,1,1,1
	.word	368
	.byte	10
	.byte	'__intptr_t',0,1,1,1
	.word	171
	.byte	10
	.byte	'__uintptr_t',0,1,1,1
	.word	220
	.byte	2
	.byte	'unsigned char',0,1,8,10
	.byte	'uint8',0,2,108,29
	.word	430
	.byte	2
	.byte	'unsigned short int',0,2,7,10
	.byte	'uint16',0,2,112,29
	.word	461
	.byte	2
	.byte	'unsigned long int',0,4,7,10
	.byte	'uint32',0,2,116,29
	.word	498
	.byte	2
	.byte	'char',0,1,6,10
	.byte	'sint8',0,2,125,29
	.word	534
	.byte	10
	.byte	'sint16',0,2,129,1,29
	.word	298
	.byte	2
	.byte	'long int',0,4,5,10
	.byte	'sint32',0,2,134,1,29
	.word	572
	.byte	2
	.byte	'long long int',0,8,5,10
	.byte	'sint64',0,2,141,1,29
	.word	600
	.byte	2
	.byte	'float',0,4,4,10
	.byte	'float32',0,2,170,1,29
	.word	633
	.byte	12
	.byte	'void',0,7
	.word	659
	.byte	10
	.byte	'pvoid',0,3,54,28
	.word	665
	.byte	10
	.byte	'Ifx_TickTime',0,3,76,28
	.word	600
	.byte	10
	.byte	'u32_t',0,4,87,16
	.word	498
	.byte	10
	.byte	'intmax_t',0,5,198,2,41
	.word	600
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,22,0,3,8,58,15,59,15,57,15,73,19,0,0,11,21,0,54,15,0,0,12,59,0
	.byte	3,8,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4\\dhcp.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'cc.h',0,2,0,0
	.byte	'stdint.h',0,3,0,0,0
.L9:
.L7:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	     1  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	     2   * @file
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	     3   * Dynamic Host Configuration Protocol client
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	     4   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	     5   * @defgroup dhcp4 DHCPv4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	     6   * @ingroup ip4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	     7   * DHCP (IPv4) related functions
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	     8   * This is a DHCP client for the lwIP TCP/IP stack. It aims to conform
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	     9   * with RFC 2131 and RFC 2132.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    10   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    11   * @todo:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    12   * - Support for interfaces other than Ethernet (SLIP, PPP, ...)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    13   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    14   * Options:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    15   * @ref DHCP_COARSE_TIMER_SECS (recommended 60 which is a minute)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    16   * @ref DHCP_FINE_TIMER_MSECS (recommended 500 which equals TCP coarse timer)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    17   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    18   * dhcp_start() starts a DHCP client instance which
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    19   * configures the interface by obtaining an IP address lease and maintaining it.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    20   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    21   * Use dhcp_release() to end the lease and use dhcp_stop()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    22   * to remove the DHCP client.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    23   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    24   * @see LWIP_HOOK_DHCP_APPEND_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    25   * @see LWIP_HOOK_DHCP_PARSE_OPTION
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    26   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    27   * @see netifapi_dhcp4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    28   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    29  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    30  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    31   * Copyright (c) 2001-2004 Leon Woestenberg <leon.woestenberg@gmx.net>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    32   * Copyright (c) 2001-2004 Axon Digital Design B.V., The Netherlands.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    33   * All rights reserved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    34   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    35   * Redistribution and use in source and binary forms, with or without modification,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    36   * are permitted provided that the following conditions are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    37   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    38   * 1. Redistributions of source code must retain the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    39   *    this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    40   * 2. Redistributions in binary form must reproduce the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    41   *    this list of conditions and the following disclaimer in the documentation
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    42   *    and/or other materials provided with the distribution.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    43   * 3. The name of the author may not be used to endorse or promote products
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    44   *    derived from this software without specific prior written permission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    45   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    46   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    47   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    48   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    49   * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    50   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    51   * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    52   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    53   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    54   * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    55   * OF SUCH DAMAGE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    56   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    57   * This file is part of the lwIP TCP/IP stack.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    58   * The Swedish Institute of Computer Science and Adam Dunkels
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    59   * are specifically granted permission to redistribute this
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    60   * source code.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    61   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    62   * Author: Leon Woestenberg <leon.woestenberg@gmx.net>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    63   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    64   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    65  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    66  #include "lwip/opt.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    67  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    68  #if LWIP_IPV4 && LWIP_DHCP /* don't build if not configured for use in lwipopts.h */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    69  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    70  #include "lwip/stats.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    71  #include "lwip/mem.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    72  #include "lwip/udp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    73  #include "lwip/ip_addr.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    74  #include "lwip/netif.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    75  #include "lwip/def.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    76  #include "lwip/dhcp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    77  #include "lwip/autoip.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    78  #include "lwip/dns.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    79  #include "lwip/etharp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    80  #include "lwip/prot/dhcp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    81  #include "lwip/prot/iana.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    82  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    83  #include <string.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    84  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    85  #ifdef LWIP_HOOK_FILENAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    86  #include LWIP_HOOK_FILENAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    87  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    88  #ifndef LWIP_HOOK_DHCP_APPEND_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    89  #define LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, state, msg, msg_type, options_len_ptr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    90  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    91  #ifndef LWIP_HOOK_DHCP_PARSE_OPTION
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    92  #define LWIP_HOOK_DHCP_PARSE_OPTION(netif, dhcp, state, msg, msg_type, option, len, pbuf, offset) do { LWIP_UNUSED_ARG(msg); } while(0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    93  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    94  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    95  /** DHCP_CREATE_RAND_XID: if this is set to 1, the xid is created using
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    96   * LWIP_RAND() (this overrides DHCP_GLOBAL_XID)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    97   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    98  #ifndef DHCP_CREATE_RAND_XID
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	    99  #define DHCP_CREATE_RAND_XID        1
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   100  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   101  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   102  /** Default for DHCP_GLOBAL_XID is 0xABCD0000
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   103   * This can be changed by defining DHCP_GLOBAL_XID and DHCP_GLOBAL_XID_HEADER, e.g.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   104   *  \#define DHCP_GLOBAL_XID_HEADER "stdlib.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   105   *  \#define DHCP_GLOBAL_XID rand()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   106   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   107  #ifdef DHCP_GLOBAL_XID_HEADER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   108  #include DHCP_GLOBAL_XID_HEADER /* include optional starting XID generation prototypes */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   109  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   110  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   111  /** DHCP_OPTION_MAX_MSG_SIZE is set to the MTU
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   112   * MTU is checked to be big enough in dhcp_start */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   113  #define DHCP_MAX_MSG_LEN(netif)        (netif->mtu)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   114  #define DHCP_MAX_MSG_LEN_MIN_REQUIRED  576
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   115  /** Minimum length for reply before packet is parsed */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   116  #define DHCP_MIN_REPLY_LEN             44
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   117  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   118  #define REBOOT_TRIES                2
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   119  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   120  #if LWIP_DNS && LWIP_DHCP_MAX_DNS_SERVERS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   121  #if DNS_MAX_SERVERS > LWIP_DHCP_MAX_DNS_SERVERS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   122  #define LWIP_DHCP_PROVIDE_DNS_SERVERS LWIP_DHCP_MAX_DNS_SERVERS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   123  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   124  #define LWIP_DHCP_PROVIDE_DNS_SERVERS DNS_MAX_SERVERS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   125  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   126  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   127  #define LWIP_DHCP_PROVIDE_DNS_SERVERS 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   128  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   129  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   130  /** Option handling: options are parsed in dhcp_parse_reply
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   131   * and saved in an array where other functions can load them from.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   132   * This might be moved into the struct dhcp (not necessarily since
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   133   * lwIP is single-threaded and the array is only used while in recv
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   134   * callback). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   135  enum dhcp_option_idx {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   136    DHCP_OPTION_IDX_OVERLOAD = 0,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   137    DHCP_OPTION_IDX_MSG_TYPE,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   138    DHCP_OPTION_IDX_SERVER_ID,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   139    DHCP_OPTION_IDX_LEASE_TIME,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   140    DHCP_OPTION_IDX_T1,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   141    DHCP_OPTION_IDX_T2,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   142    DHCP_OPTION_IDX_SUBNET_MASK,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   143    DHCP_OPTION_IDX_ROUTER,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   144  #if LWIP_DHCP_PROVIDE_DNS_SERVERS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   145    DHCP_OPTION_IDX_DNS_SERVER,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   146    DHCP_OPTION_IDX_DNS_SERVER_LAST = DHCP_OPTION_IDX_DNS_SERVER + LWIP_DHCP_PROVIDE_DNS_SERVERS - 1,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   147  #endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   148  #if LWIP_DHCP_GET_NTP_SRV
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   149    DHCP_OPTION_IDX_NTP_SERVER,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   150    DHCP_OPTION_IDX_NTP_SERVER_LAST = DHCP_OPTION_IDX_NTP_SERVER + LWIP_DHCP_MAX_NTP_SERVERS - 1,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   151  #endif /* LWIP_DHCP_GET_NTP_SRV */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   152    DHCP_OPTION_IDX_MAX
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   153  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   154  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   155  /** Holds the decoded option values, only valid while in dhcp_recv.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   156      @todo: move this into struct dhcp? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   157  u32_t dhcp_rx_options_val[DHCP_OPTION_IDX_MAX];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   158  /** Holds a flag which option was received and is contained in dhcp_rx_options_val,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   159      only valid while in dhcp_recv.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   160      @todo: move this into struct dhcp? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   161  u8_t  dhcp_rx_options_given[DHCP_OPTION_IDX_MAX];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   162  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   163  static u8_t dhcp_discover_request_options[] = {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   164    DHCP_OPTION_SUBNET_MASK,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   165    DHCP_OPTION_ROUTER,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   166    DHCP_OPTION_BROADCAST
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   167  #if LWIP_DHCP_PROVIDE_DNS_SERVERS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   168    , DHCP_OPTION_DNS_SERVER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   169  #endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   170  #if LWIP_DHCP_GET_NTP_SRV
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   171    , DHCP_OPTION_NTP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   172  #endif /* LWIP_DHCP_GET_NTP_SRV */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   173  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   174  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   175  #ifdef DHCP_GLOBAL_XID
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   176  static u32_t xid;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   177  static u8_t xid_initialised;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   178  #endif /* DHCP_GLOBAL_XID */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   179  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   180  #define dhcp_option_given(dhcp, idx)          (dhcp_rx_options_given[idx] != 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   181  #define dhcp_got_option(dhcp, idx)            (dhcp_rx_options_given[idx] = 1)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   182  #define dhcp_clear_option(dhcp, idx)          (dhcp_rx_options_given[idx] = 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   183  #define dhcp_clear_all_options(dhcp)          (memset(dhcp_rx_options_given, 0, sizeof(dhcp_rx_options_given)))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   184  #define dhcp_get_option_value(dhcp, idx)      (dhcp_rx_options_val[idx])
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   185  #define dhcp_set_option_value(dhcp, idx, val) (dhcp_rx_options_val[idx] = (val))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   186  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   187  static struct udp_pcb *dhcp_pcb;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   188  static u8_t dhcp_pcb_refcount;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   189  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   190  /* DHCP client state machine functions */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   191  static err_t dhcp_discover(struct netif *netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   192  static err_t dhcp_select(struct netif *netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   193  static void dhcp_bind(struct netif *netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   194  #if DHCP_DOES_ARP_CHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   195  static err_t dhcp_decline(struct netif *netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   196  #endif /* DHCP_DOES_ARP_CHECK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   197  static err_t dhcp_rebind(struct netif *netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   198  static err_t dhcp_reboot(struct netif *netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   199  static void dhcp_set_state(struct dhcp *dhcp, u8_t new_state);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   200  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   201  /* receive, unfold, parse and free incoming messages */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   202  static void dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   203  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   204  /* set the DHCP timers */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   205  static void dhcp_timeout(struct netif *netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   206  static void dhcp_t1_timeout(struct netif *netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   207  static void dhcp_t2_timeout(struct netif *netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   208  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   209  /* build outgoing messages */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   210  /* create a DHCP message, fill in common headers */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   211  static struct pbuf *dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   212  /* add a DHCP option (type, then length in bytes) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   213  static u16_t dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   214  /* add option values */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   215  static u16_t dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   216  static u16_t dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   217  static u16_t dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   218  #if LWIP_NETIF_HOSTNAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   219  static u16_t dhcp_option_hostname(u16_t options_out_len, u8_t *options, struct netif *netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   220  #endif /* LWIP_NETIF_HOSTNAME */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   221  /* always add the DHCP options trailer to end and pad */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   222  static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   223  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   224  /** Ensure DHCP PCB is allocated and bound */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   225  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   226  dhcp_inc_pcb_refcount(void)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   227  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   228    if (dhcp_pcb_refcount == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   229      LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   230  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   231      /* allocate UDP PCB */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   232      dhcp_pcb = udp_new();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   233  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   234      if (dhcp_pcb == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   235        return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   236      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   237  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   238      ip_set_option(dhcp_pcb, SOF_BROADCAST);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   239  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   240      /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   241      udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   242      udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   243      udp_recv(dhcp_pcb, dhcp_recv, NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   244    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   245  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   246    dhcp_pcb_refcount++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   247  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   248    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   249  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   250  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   251  /** Free DHCP PCB if the last netif stops using it */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   252  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   253  dhcp_dec_pcb_refcount(void)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   254  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   255    LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   256    dhcp_pcb_refcount--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   257  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   258    if (dhcp_pcb_refcount == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   259      udp_remove(dhcp_pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   260      dhcp_pcb = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   261    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   262  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   263  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   264  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   265   * Back-off the DHCP client (because of a received NAK response).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   266   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   267   * Back-off the DHCP client because of a received NAK. Receiving a
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   268   * NAK means the client asked for something non-sensible, for
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   269   * example when it tries to renew a lease obtained on another network.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   270   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   271   * We clear any existing set IP address and restart DHCP negotiation
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   272   * afresh (as per RFC2131 3.2.3).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   273   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   274   * @param netif the netif under DHCP control
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   275   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   276  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   277  dhcp_handle_nak(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   278  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   279    struct dhcp *dhcp = netif_dhcp_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   280  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   281    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   282                (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   283    /* Change to a defined state - set this before assigning the address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   284       to ensure the callback can use dhcp_supplied_address() */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   285    dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   286    /* remove IP address from interface (must no longer be used, as per RFC2131) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   287    netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   288    /* We can immediately restart discovery */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   289    dhcp_discover(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   290  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   291  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   292  #if DHCP_DOES_ARP_CHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   293  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   294   * Checks if the offered IP address is already in use.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   295   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   296   * It does so by sending an ARP request for the offered address and
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   297   * entering CHECKING state. If no ARP reply is received within a small
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   298   * interval, the address is assumed to be free for use by us.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   299   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   300   * @param netif the netif under DHCP control
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   301   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   302  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   303  dhcp_check(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   304  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   305    struct dhcp *dhcp = netif_dhcp_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   306    err_t result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   307    u16_t msecs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   308    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   309                (s16_t)netif->name[1]));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   310    dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   311    /* create an ARP query for the offered IP address, expecting that no host
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   312       responds, as the IP address should not be in use. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   313    result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   314    if (result != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   315      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   316    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   317    if (dhcp->tries < 255) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   318      dhcp->tries++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   319    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   320    msecs = 500;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   321    dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   322    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   323  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   324  #endif /* DHCP_DOES_ARP_CHECK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   325  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   326  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   327   * Remember the configuration offered by a DHCP server.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   328   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   329   * @param netif the netif under DHCP control
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   330   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   331  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   332  dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   333  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   334    struct dhcp *dhcp = netif_dhcp_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   335  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   336    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   337                (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   338    /* obtain the server address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   339    if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   340      dhcp->request_timeout = 0; /* stop timer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   341  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   342      ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   343      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   344                  ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   345      /* remember offered address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   346      ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   347      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   348                  ip4_addr_get_u32(&dhcp->offered_ip_addr)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   349  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   350      dhcp_select(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   351    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   352      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   353                  ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   354    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   355  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   356  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   357  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   358   * Select a DHCP server offer out of all offers.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   359   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   360   * Simply select the first offer received.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   361   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   362   * @param netif the netif under DHCP control
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   363   * @return lwIP specific error (see error.h)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   364   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   365  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   366  dhcp_select(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   367  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   368    struct dhcp *dhcp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   369    err_t result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   370    u16_t msecs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   371    u8_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   372    struct pbuf *p_out;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   373    u16_t options_out_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   374  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   375    LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   376    dhcp = netif_dhcp_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   377    LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   378  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   379    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   380    dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   381  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   382    /* create and initialize the DHCP message header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   383    p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   384    if (p_out != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   385      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   386      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   387      options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   388  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   389      /* MUST request the offered IP address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   390      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   391      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   392  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   393      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   394      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   395  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   396      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   397      for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   398        options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   399      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   400  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   401  #if LWIP_NETIF_HOSTNAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   402      options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   403  #endif /* LWIP_NETIF_HOSTNAME */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   404  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   405      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   406      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   407  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   408      /* send broadcast to any DHCP server */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   409      result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   410      pbuf_free(p_out);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   411      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   412    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   413      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   414      result = ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   415    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   416    if (dhcp->tries < 255) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   417      dhcp->tries++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   418    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   419    msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   420    dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   421    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   422    return result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   423  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   424  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   425  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   426   * The DHCP timer that checks for lease renewal/rebind timeouts.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   427   * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   428   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   429  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   430  dhcp_coarse_tmr(void)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   431  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   432    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   433    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   434    /* iterate through all network interfaces */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   435    NETIF_FOREACH(netif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   436      /* only act on DHCP configured interfaces */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   437      struct dhcp *dhcp = netif_dhcp_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   438      if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   439        /* compare lease time to expire timeout */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   440        if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   441          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   442          /* this clients' lease time has expired */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   443          dhcp_release_and_stop(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   444          dhcp_start(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   445          /* timer is active (non zero), and triggers (zeroes) now? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   446        } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   447          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   448          /* this clients' rebind timeout triggered */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   449          dhcp_t2_timeout(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   450          /* timer is active (non zero), and triggers (zeroes) now */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   451        } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   452          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   453          /* this clients' renewal timeout triggered */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   454          dhcp_t1_timeout(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   455        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   456      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   457    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   458  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   459  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   460  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   461   * DHCP transaction timeout handling (this function must be called every 500ms,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   462   * see @ref DHCP_FINE_TIMER_MSECS).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   463   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   464   * A DHCP server is expected to respond within a short period of time.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   465   * This timer checks whether an outstanding DHCP request is timed out.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   466   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   467  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   468  dhcp_fine_tmr(void)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   469  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   470    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   471    /* loop through netif's */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   472    NETIF_FOREACH(netif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   473      struct dhcp *dhcp = netif_dhcp_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   474      /* only act on DHCP configured interfaces */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   475      if (dhcp != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   476        /* timer is active (non zero), and is about to trigger now */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   477        if (dhcp->request_timeout > 1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   478          dhcp->request_timeout--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   479        } else if (dhcp->request_timeout == 1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   480          dhcp->request_timeout--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   481          /* { dhcp->request_timeout == 0 } */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   482          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   483          /* this client's request timeout triggered */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   484          dhcp_timeout(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   485        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   486      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   487    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   488  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   489  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   490  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   491   * A DHCP negotiation transaction, or ARP request, has timed out.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   492   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   493   * The timer that was started with the DHCP or ARP request has
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   494   * timed out, indicating no response was received in time.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   495   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   496   * @param netif the netif under DHCP control
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   497   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   498  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   499  dhcp_timeout(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   500  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   501    struct dhcp *dhcp = netif_dhcp_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   502  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   503    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   504    /* back-off period has passed, or server selection timed out */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   505    if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   506      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   507      dhcp_discover(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   508      /* receiving the requested lease timed out */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   509    } else if (dhcp->state == DHCP_STATE_REQUESTING) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   510      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   511      if (dhcp->tries <= 5) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   512        dhcp_select(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   513      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   514        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, releasing, restarting\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   515        dhcp_release_and_stop(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   516        dhcp_start(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   517      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   518  #if DHCP_DOES_ARP_CHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   519      /* received no ARP reply for the offered address (which is good) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   520    } else if (dhcp->state == DHCP_STATE_CHECKING) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   521      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   522      if (dhcp->tries <= 1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   523        dhcp_check(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   524        /* no ARP replies on the offered address,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   525           looks like the IP address is indeed free */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   526      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   527        /* bind the interface to the offered address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   528        dhcp_bind(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   529      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   530  #endif /* DHCP_DOES_ARP_CHECK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   531    } else if (dhcp->state == DHCP_STATE_REBOOTING) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   532      if (dhcp->tries < REBOOT_TRIES) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   533        dhcp_reboot(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   534      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   535        dhcp_discover(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   536      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   537    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   538  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   539  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   540  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   541   * The renewal period has timed out.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   542   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   543   * @param netif the netif under DHCP control
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   544   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   545  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   546  dhcp_t1_timeout(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   547  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   548    struct dhcp *dhcp = netif_dhcp_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   549  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   550    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   551    if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   552        (dhcp->state == DHCP_STATE_RENEWING)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   553      /* just retry to renew - note that the rebind timer (t2) will
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   554       * eventually time-out if renew tries fail. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   555      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   556                  ("dhcp_t1_timeout(): must renew\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   557      /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   558         DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   559      dhcp_renew(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   560      /* Calculate next timeout */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   561      if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   562        dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   563      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   564    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   565  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   566  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   567  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   568   * The rebind period has timed out.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   569   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   570   * @param netif the netif under DHCP control
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   571   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   572  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   573  dhcp_t2_timeout(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   574  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   575    struct dhcp *dhcp = netif_dhcp_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   576  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   577    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   578    if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   579        (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   580      /* just retry to rebind */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   581      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   582                  ("dhcp_t2_timeout(): must rebind\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   583      /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   584         DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   585      dhcp_rebind(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   586      /* Calculate next timeout */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   587      if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   588        dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   589      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   590    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   591  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   592  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   593  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   594   * Handle a DHCP ACK packet
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   595   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   596   * @param netif the netif under DHCP control
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   597   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   598  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   599  dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   600  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   601    struct dhcp *dhcp = netif_dhcp_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   602  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   603  #if LWIP_DHCP_PROVIDE_DNS_SERVERS || LWIP_DHCP_GET_NTP_SRV
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   604    u8_t n;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   605  #endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS || LWIP_DHCP_GET_NTP_SRV */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   606  #if LWIP_DHCP_GET_NTP_SRV
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   607    ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   608  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   609  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   610    /* clear options we might not get from the ACK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   611    ip4_addr_set_zero(&dhcp->offered_sn_mask);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   612    ip4_addr_set_zero(&dhcp->offered_gw_addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   613  #if LWIP_DHCP_BOOTP_FILE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   614    ip4_addr_set_zero(&dhcp->offered_si_addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   615  #endif /* LWIP_DHCP_BOOTP_FILE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   616  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   617    /* lease time given? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   618    if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   619      /* remember offered lease time */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   620      dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   621    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   622    /* renewal period given? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   623    if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   624      /* remember given renewal period */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   625      dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   626    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   627      /* calculate safe periods for renewal */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   628      dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   629    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   630  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   631    /* renewal period given? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   632    if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   633      /* remember given rebind period */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   634      dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   635    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   636      /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   637      dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   638    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   639  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   640    /* (y)our internet address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   641    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   642  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   643  #if LWIP_DHCP_BOOTP_FILE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   644    /* copy boot server address,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   645       boot file name copied in dhcp_parse_reply if not overloaded */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   646    ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   647  #endif /* LWIP_DHCP_BOOTP_FILE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   648  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   649    /* subnet mask given? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   650    if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   651      /* remember given subnet mask */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   652      ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   653      dhcp->subnet_mask_given = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   654    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   655      dhcp->subnet_mask_given = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   656    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   657  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   658    /* gateway router */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   659    if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   660      ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   661    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   662  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   663  #if LWIP_DHCP_GET_NTP_SRV
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   664    /* NTP servers */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   665    for (n = 0; (n < LWIP_DHCP_MAX_NTP_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_NTP_SERVER + n); n++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   666      ip4_addr_set_u32(&ntp_server_addrs[n], lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_NTP_SERVER + n)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   667    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   668    dhcp_set_ntp_servers(n, ntp_server_addrs);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   669  #endif /* LWIP_DHCP_GET_NTP_SRV */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   670  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   671  #if LWIP_DHCP_PROVIDE_DNS_SERVERS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   672    /* DNS servers */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   673    for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   674      ip_addr_t dns_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   675      ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   676      dns_setserver(n, &dns_addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   677    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   678  #endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   679  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   680  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   681  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   682   * @ingroup dhcp4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   683   * Set a statically allocated struct dhcp to work with.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   684   * Using this prevents dhcp_start to allocate it using mem_malloc.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   685   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   686   * @param netif the netif for which to set the struct dhcp
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   687   * @param dhcp (uninitialised) dhcp struct allocated by the application
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   688   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   689  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   690  dhcp_set_struct(struct netif *netif, struct dhcp *dhcp)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   691  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   692    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   693    LWIP_ASSERT("netif != NULL", netif != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   694    LWIP_ASSERT("dhcp != NULL", dhcp != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   695    LWIP_ASSERT("netif already has a struct dhcp set", netif_dhcp_data(netif) == NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   696  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   697    /* clear data structure */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   698    memset(dhcp, 0, sizeof(struct dhcp));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   699    /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   700    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   701  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   702  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   703  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   704   * @ingroup dhcp4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   705   * Removes a struct dhcp from a netif.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   706   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   707   * ATTENTION: Only use this when not using dhcp_set_struct() to allocate the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   708   *            struct dhcp since the memory is passed back to the heap.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   709   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   710   * @param netif the netif from which to remove the struct dhcp
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   711   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   712  void dhcp_cleanup(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   713  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   714    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   715    LWIP_ASSERT("netif != NULL", netif != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   716  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   717    if (netif_dhcp_data(netif) != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   718      mem_free(netif_dhcp_data(netif));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   719      netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   720    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   721  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   722  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   723  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   724   * @ingroup dhcp4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   725   * Start DHCP negotiation for a network interface.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   726   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   727   * If no DHCP client instance was attached to this interface,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   728   * a new client is created first. If a DHCP client instance
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   729   * was already present, it restarts negotiation.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   730   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   731   * @param netif The lwIP network interface
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   732   * @return lwIP error code
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   733   * - ERR_OK - No error
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   734   * - ERR_MEM - Out of memory
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   735   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   736  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   737  dhcp_start(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   738  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   739    struct dhcp *dhcp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   740    err_t result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   741  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   742    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   743    LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   744    LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   745    dhcp = netif_dhcp_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   746    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   747  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   748    /* check MTU of the netif */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   749    if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   750      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   751      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   752    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   753  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   754    /* no DHCP client attached yet? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   755    if (dhcp == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   756      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   757      dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   758      if (dhcp == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   759        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   760        return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   761      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   762  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   763      /* store this dhcp client in the netif */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   764      netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   765      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   766      /* already has DHCP client attached */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   767    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   768      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   769  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   770      if (dhcp->pcb_allocated != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   771        dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   772      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   773      /* dhcp is cleared below, no need to reset flag*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   774    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   775  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   776    /* clear data structure */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   777    memset(dhcp, 0, sizeof(struct dhcp));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   778    /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   779  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   780    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   781  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   782    if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   783      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   784    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   785    dhcp->pcb_allocated = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   786  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   787    if (!netif_is_link_up(netif)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   788      /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   789      dhcp_set_state(dhcp, DHCP_STATE_INIT);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   790      return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   791    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   792  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   793    /* (re)start the DHCP negotiation */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   794    result = dhcp_discover(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   795    if (result != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   796      /* free resources allocated above */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   797      dhcp_release_and_stop(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   798      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   799    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   800    return result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   801  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   802  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   803  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   804   * @ingroup dhcp4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   805   * Inform a DHCP server of our manual configuration.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   806   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   807   * This informs DHCP servers of our fixed IP address configuration
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   808   * by sending an INFORM message. It does not involve DHCP address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   809   * configuration, it is just here to be nice to the network.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   810   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   811   * @param netif The lwIP network interface
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   812   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   813  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   814  dhcp_inform(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   815  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   816    struct dhcp dhcp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   817    struct pbuf *p_out;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   818    u16_t options_out_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   819  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   820    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   821    LWIP_ERROR("netif != NULL", (netif != NULL), return;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   822  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   823    if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   824      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   825    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   826  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   827    memset(&dhcp, 0, sizeof(struct dhcp));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   828    dhcp_set_state(&dhcp, DHCP_STATE_INFORMING);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   829  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   830    /* create and initialize the DHCP message header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   831    p_out = dhcp_create_msg(netif, &dhcp, DHCP_INFORM, &options_out_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   832    if (p_out != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   833      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   834      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   835      options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   836  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   837      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, &dhcp, DHCP_STATE_INFORMING, msg_out, DHCP_INFORM, &options_out_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   838      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   839  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   840      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_inform: INFORMING\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   841  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   842      udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   843  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   844      pbuf_free(p_out);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   845    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   846      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform: could not allocate DHCP request\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   847    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   848  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   849    dhcp_dec_pcb_refcount(); /* delete DHCP PCB if not needed any more */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   850  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   851  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   852  /** Handle a possible change in the network configuration.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   853   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   854   * This enters the REBOOTING state to verify that the currently bound
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   855   * address is still valid.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   856   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   857  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   858  dhcp_network_changed(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   859  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   860    struct dhcp *dhcp = netif_dhcp_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   861  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   862    if (!dhcp) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   863      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   864    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   865    switch (dhcp->state) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   866      case DHCP_STATE_REBINDING:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   867      case DHCP_STATE_RENEWING:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   868      case DHCP_STATE_BOUND:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   869      case DHCP_STATE_REBOOTING:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   870        dhcp->tries = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   871        dhcp_reboot(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   872        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   873      case DHCP_STATE_OFF:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   874        /* stay off */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   875        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   876      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   877        LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   878        /* INIT/REQUESTING/CHECKING/BACKING_OFF restart with new 'rid' because the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   879           state changes, SELECTING: continue with current 'rid' as we stay in the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   880           same state */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   881  #if LWIP_DHCP_AUTOIP_COOP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   882        if (dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   883          autoip_stop(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   884          dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   885        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   886  #endif /* LWIP_DHCP_AUTOIP_COOP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   887        /* ensure we start with short timeouts, even if already discovering */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   888        dhcp->tries = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   889        dhcp_discover(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   890        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   891    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   892  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   893  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   894  #if DHCP_DOES_ARP_CHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   895  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   896   * Match an ARP reply with the offered IP address:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   897   * check whether the offered IP address is not in use using ARP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   898   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   899   * @param netif the network interface on which the reply was received
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   900   * @param addr The IP address we received a reply from
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   901   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   902  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   903  dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   904  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   905    struct dhcp *dhcp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   906  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   907    LWIP_ERROR("netif != NULL", (netif != NULL), return;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   908    dhcp = netif_dhcp_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   909    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   910    /* is a DHCP client doing an ARP check? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   911    if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   912      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   913                  ip4_addr_get_u32(addr)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   914      /* did a host respond with the address we
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   915         were offered by the DHCP server? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   916      if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   917        /* we will not accept the offered address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   918        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   919                    ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   920        dhcp_decline(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   921      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   922    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   923  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   924  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   925  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   926   * Decline an offered lease.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   927   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   928   * Tell the DHCP server we do not accept the offered address.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   929   * One reason to decline the lease is when we find out the address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   930   * is already in use by another host (through ARP).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   931   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   932   * @param netif the netif under DHCP control
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   933   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   934  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   935  dhcp_decline(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   936  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   937    struct dhcp *dhcp = netif_dhcp_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   938    err_t result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   939    u16_t msecs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   940    struct pbuf *p_out;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   941    u16_t options_out_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   942  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   943    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   944    dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   945    /* create and initialize the DHCP message header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   946    p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   947    if (p_out != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   948      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   949      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   950      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   951  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   952      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   953      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   954  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   955      /* per section 4.4.4, broadcast DECLINE messages */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   956      result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   957      pbuf_free(p_out);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   958      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   959    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   960      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   961                  ("dhcp_decline: could not allocate DHCP request\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   962      result = ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   963    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   964    if (dhcp->tries < 255) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   965      dhcp->tries++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   966    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   967    msecs = 10 * 1000;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   968    dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   969    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   970    return result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   971  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   972  #endif /* DHCP_DOES_ARP_CHECK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   973  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   974  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   975  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   976   * Start the DHCP process, discover a DHCP server.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   977   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   978   * @param netif the netif under DHCP control
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   979   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   980  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   981  dhcp_discover(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   982  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   983    struct dhcp *dhcp = netif_dhcp_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   984    err_t result = ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   985    u16_t msecs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   986    u8_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   987    struct pbuf *p_out;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   988    u16_t options_out_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   989  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   990    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   991  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   992    ip4_addr_set_any(&dhcp->offered_ip_addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   993    dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   994    /* create and initialize the DHCP message header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   995    p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   996    if (p_out != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   997      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   998      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	   999  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1000      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1001      options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1002  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1003      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1004      for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1005        options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1006      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1007      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1008      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1009  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1010      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1011      udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1012      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1013      pbuf_free(p_out);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1014      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1015    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1016      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1017    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1018    if (dhcp->tries < 255) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1019      dhcp->tries++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1020    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1021  #if LWIP_DHCP_AUTOIP_COOP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1022    if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1023      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1024      autoip_start(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1025    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1026  #endif /* LWIP_DHCP_AUTOIP_COOP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1027    msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1028    dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1029    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1030    return result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1031  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1032  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1033  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1034  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1035   * Bind the interface to the offered IP address.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1036   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1037   * @param netif network interface to bind to the offered address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1038   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1039  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1040  dhcp_bind(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1041  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1042    u32_t timeout;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1043    struct dhcp *dhcp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1044    ip4_addr_t sn_mask, gw_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1045    LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1046    dhcp = netif_dhcp_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1047    LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1048    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1049  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1050    /* reset time used of lease */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1051    dhcp->lease_used = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1052  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1053    if (dhcp->offered_t0_lease != 0xffffffffUL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1054      /* set renewal period timer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1055      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1056      timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1057      if (timeout > 0xffff) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1058        timeout = 0xffff;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1059      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1060      dhcp->t0_timeout = (u16_t)timeout;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1061      if (dhcp->t0_timeout == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1062        dhcp->t0_timeout = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1063      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1064      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1065    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1066  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1067    /* temporary DHCP lease? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1068    if (dhcp->offered_t1_renew != 0xffffffffUL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1069      /* set renewal period timer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1070      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1071      timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1072      if (timeout > 0xffff) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1073        timeout = 0xffff;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1074      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1075      dhcp->t1_timeout = (u16_t)timeout;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1076      if (dhcp->t1_timeout == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1077        dhcp->t1_timeout = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1078      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1079      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1080      dhcp->t1_renew_time = dhcp->t1_timeout;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1081    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1082    /* set renewal period timer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1083    if (dhcp->offered_t2_rebind != 0xffffffffUL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1084      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1085      timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1086      if (timeout > 0xffff) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1087        timeout = 0xffff;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1088      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1089      dhcp->t2_timeout = (u16_t)timeout;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1090      if (dhcp->t2_timeout == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1091        dhcp->t2_timeout = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1092      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1093      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1094      dhcp->t2_rebind_time = dhcp->t2_timeout;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1095    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1096  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1097    /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1098    if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1099      dhcp->t1_timeout = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1100    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1101  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1102    if (dhcp->subnet_mask_given) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1103      /* copy offered network mask */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1104      ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1105    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1106      /* subnet mask not given, choose a safe subnet mask given the network class */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1107      u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1108      if (first_octet <= 127) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1109        ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1110      } else if (first_octet >= 192) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1111        ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1112      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1113        ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1114      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1115    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1116  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1117    ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1118    /* gateway address not given? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1119    if (ip4_addr_isany_val(gw_addr)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1120      /* copy network address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1121      ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1122      /* use first host address on network as gateway */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1123      ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1124    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1125  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1126  #if LWIP_DHCP_AUTOIP_COOP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1127    if (dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1128      autoip_stop(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1129      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1130    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1131  #endif /* LWIP_DHCP_AUTOIP_COOP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1132  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1133    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1134                ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1135    /* netif is now bound to DHCP leased address - set this before assigning the address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1136       to ensure the callback can use dhcp_supplied_address() */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1137    dhcp_set_state(dhcp, DHCP_STATE_BOUND);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1138  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1139    netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1140    /* interface is used by routing now that an address is set */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1141  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1142  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1143  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1144   * @ingroup dhcp4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1145   * Renew an existing DHCP lease at the involved DHCP server.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1146   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1147   * @param netif network interface which must renew its lease
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1148   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1149  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1150  dhcp_renew(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1151  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1152    struct dhcp *dhcp = netif_dhcp_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1153    err_t result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1154    u16_t msecs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1155    u8_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1156    struct pbuf *p_out;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1157    u16_t options_out_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1158  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1159    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1160    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1161    dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1162  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1163    /* create and initialize the DHCP message header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1164    p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1165    if (p_out != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1166      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1167      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1168      options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1169  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1170      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1171      for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1172        options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1173      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1174  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1175  #if LWIP_NETIF_HOSTNAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1176      options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1177  #endif /* LWIP_NETIF_HOSTNAME */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1178  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1179      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1180      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1181  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1182      result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1183      pbuf_free(p_out);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1184  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1185      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1186    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1187      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1188      result = ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1189    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1190    if (dhcp->tries < 255) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1191      dhcp->tries++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1192    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1193    /* back-off on retries, but to a maximum of 20 seconds */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1194    msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1195    dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1196    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1197    return result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1198  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1199  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1200  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1201   * Rebind with a DHCP server for an existing DHCP lease.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1202   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1203   * @param netif network interface which must rebind with a DHCP server
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1204   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1205  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1206  dhcp_rebind(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1207  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1208    struct dhcp *dhcp = netif_dhcp_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1209    err_t result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1210    u16_t msecs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1211    u8_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1212    struct pbuf *p_out;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1213    u16_t options_out_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1214  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1215    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1216    dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1217  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1218    /* create and initialize the DHCP message header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1219    p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1220    if (p_out != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1221      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1222      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1223      options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1224  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1225      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1226      for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1227        options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1228      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1229  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1230  #if LWIP_NETIF_HOSTNAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1231      options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1232  #endif /* LWIP_NETIF_HOSTNAME */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1233  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1234      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1235      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1236  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1237      /* broadcast to server */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1238      result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1239      pbuf_free(p_out);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1240      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1241    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1242      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1243      result = ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1244    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1245    if (dhcp->tries < 255) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1246      dhcp->tries++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1247    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1248    msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1249    dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1250    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1251    return result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1252  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1253  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1254  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1255   * Enter REBOOTING state to verify an existing lease
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1256   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1257   * @param netif network interface which must reboot
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1258   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1259  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1260  dhcp_reboot(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1261  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1262    struct dhcp *dhcp = netif_dhcp_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1263    err_t result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1264    u16_t msecs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1265    u8_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1266    struct pbuf *p_out;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1267    u16_t options_out_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1268  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1269    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1270    dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1271  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1272    /* create and initialize the DHCP message header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1273    p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1274    if (p_out != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1275      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1276      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1277      options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1278  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1279      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1280      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1281  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1282      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1283      for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1284        options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1285      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1286  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1287  #if LWIP_NETIF_HOSTNAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1288      options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1289  #endif /* LWIP_NETIF_HOSTNAME */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1290  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1291      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1292      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1293  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1294      /* broadcast to server */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1295      result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1296      pbuf_free(p_out);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1297      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1298    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1299      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1300      result = ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1301    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1302    if (dhcp->tries < 255) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1303      dhcp->tries++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1304    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1305    msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1306    dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1307    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1308    return result;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1309  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1310  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1311  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1312   * @ingroup dhcp4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1313   * Release a DHCP lease and stop DHCP statemachine (and AUTOIP if LWIP_DHCP_AUTOIP_COOP).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1314   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1315   * @param netif network interface
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1316   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1317  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1318  dhcp_release_and_stop(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1319  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1320    struct dhcp *dhcp = netif_dhcp_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1321    ip_addr_t server_ip_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1322  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1323    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1324    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1325    if (dhcp == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1326      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1327    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1328  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1329    /* already off? -> nothing to do */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1330    if (dhcp->state == DHCP_STATE_OFF) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1331      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1332    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1333  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1334    ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1335  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1336    /* clean old DHCP offer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1337    ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1338    ip4_addr_set_zero(&dhcp->offered_ip_addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1339    ip4_addr_set_zero(&dhcp->offered_sn_mask);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1340    ip4_addr_set_zero(&dhcp->offered_gw_addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1341  #if LWIP_DHCP_BOOTP_FILE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1342    ip4_addr_set_zero(&dhcp->offered_si_addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1343  #endif /* LWIP_DHCP_BOOTP_FILE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1344    dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1345    dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1346  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1347    /* send release message when current IP was assigned via DHCP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1348    if (dhcp_supplied_address(netif)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1349      /* create and initialize the DHCP message header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1350      struct pbuf *p_out;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1351      u16_t options_out_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1352      p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1353      if (p_out != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1354        struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1355        options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1356        options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1357  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1358        LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1359        dhcp_option_trailer(options_out_len, msg_out->options, p_out);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1360  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1361        udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1362        pbuf_free(p_out);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1363        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release: RELEASED, DHCP_STATE_OFF\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1364      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1365        /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1366        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1367      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1368    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1369  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1370    /* remove IP address from interface (prevents routing from selecting this interface) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1371    netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1372  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1373  #if LWIP_DHCP_AUTOIP_COOP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1374    if (dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1375      autoip_stop(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1376      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1377    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1378  #endif /* LWIP_DHCP_AUTOIP_COOP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1379  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1380    dhcp_set_state(dhcp, DHCP_STATE_OFF);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1381  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1382    if (dhcp->pcb_allocated != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1383      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1384      dhcp->pcb_allocated = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1385    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1386  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1387  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1388  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1389   * @ingroup dhcp4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1390   * This function calls dhcp_release_and_stop() internally.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1391   * @deprecated Use dhcp_release_and_stop() instead.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1392   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1393  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1394  dhcp_release(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1395  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1396    dhcp_release_and_stop(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1397    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1398  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1399  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1400  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1401   * @ingroup dhcp4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1402   * This function calls dhcp_release_and_stop() internally.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1403   * @deprecated Use dhcp_release_and_stop() instead.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1404   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1405  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1406  dhcp_stop(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1407  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1408    dhcp_release_and_stop(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1409  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1410  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1411  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1412   * Set the DHCP state of a DHCP client.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1413   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1414   * If the state changed, reset the number of tries.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1415   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1416  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1417  dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1418  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1419    if (new_state != dhcp->state) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1420      dhcp->state = new_state;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1421      dhcp->tries = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1422      dhcp->request_timeout = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1423    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1424  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1425  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1426  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1427   * Concatenate an option type and length field to the outgoing
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1428   * DHCP message.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1429   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1430   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1431  static u16_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1432  dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1433  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1434    LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1435    options[options_out_len++] = option_type;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1436    options[options_out_len++] = option_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1437    return options_out_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1438  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1439  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1440   * Concatenate a single byte to the outgoing DHCP message.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1441   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1442   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1443  static u16_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1444  dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1445  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1446    LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1447    options[options_out_len++] = value;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1448    return options_out_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1449  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1450  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1451  static u16_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1452  dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1453  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1454    LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1455    options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1456    options[options_out_len++] = (u8_t) (value & 0x00ffU);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1457    return options_out_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1458  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1459  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1460  static u16_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1461  dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1462  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1463    LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1464    options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1465    options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1466    options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1467    options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1468    return options_out_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1469  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1470  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1471  #if LWIP_NETIF_HOSTNAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1472  static u16_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1473  dhcp_option_hostname(u16_t options_out_len, u8_t *options, struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1474  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1475    if (netif->hostname != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1476      size_t namelen = strlen(netif->hostname);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1477      if (namelen > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1478        size_t len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1479        const char *p = netif->hostname;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1480        /* Shrink len to available bytes (need 2 bytes for OPTION_HOSTNAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1481           and 1 byte for trailer) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1482        size_t available = DHCP_OPTIONS_LEN - options_out_len - 3;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1483        LWIP_ASSERT("DHCP: hostname is too long!", namelen <= available);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1484        len = LWIP_MIN(namelen, available);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1485        LWIP_ASSERT("DHCP: hostname is too long!", len <= 0xFF);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1486        options_out_len = dhcp_option(options_out_len, options, DHCP_OPTION_HOSTNAME, (u8_t)len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1487        while (len--) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1488          options_out_len = dhcp_option_byte(options_out_len, options, *p++);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1489        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1490      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1491    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1492    return options_out_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1493  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1494  #endif /* LWIP_NETIF_HOSTNAME */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1495  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1496  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1497   * Extract the DHCP message and the DHCP options.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1498   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1499   * Extract the DHCP message and the DHCP options, each into a contiguous
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1500   * piece of memory. As a DHCP message is variable sized by its options,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1501   * and also allows overriding some fields for options, the easy approach
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1502   * is to first unfold the options into a contiguous piece of memory, and
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1503   * use that further on.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1504   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1505   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1506  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1507  dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1508  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1509    u8_t *options;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1510    u16_t offset;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1511    u16_t offset_max;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1512    u16_t options_idx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1513    u16_t options_idx_max;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1514    struct pbuf *q;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1515    int parse_file_as_options = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1516    int parse_sname_as_options = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1517    struct dhcp_msg *msg_in;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1518  #if LWIP_DHCP_BOOTP_FILE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1519    int file_overloaded = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1520  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1521  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1522    LWIP_UNUSED_ARG(dhcp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1523  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1524    /* clear received options */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1525    dhcp_clear_all_options(dhcp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1526    /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1527    if (p->len < DHCP_SNAME_OFS) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1528      return ERR_BUF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1529    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1530    msg_in = (struct dhcp_msg *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1531  #if LWIP_DHCP_BOOTP_FILE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1532    /* clear boot file name */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1533    dhcp->boot_file_name[0] = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1534  #endif /* LWIP_DHCP_BOOTP_FILE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1535  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1536    /* parse options */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1537  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1538    /* start with options field */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1539    options_idx = DHCP_OPTIONS_OFS;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1540    /* parse options to the end of the received packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1541    options_idx_max = p->tot_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1542  again:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1543    q = p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1544    while ((q != NULL) && (options_idx >= q->len)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1545      options_idx = (u16_t)(options_idx - q->len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1546      options_idx_max = (u16_t)(options_idx_max - q->len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1547      q = q->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1548    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1549    if (q == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1550      return ERR_BUF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1551    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1552    offset = options_idx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1553    offset_max = options_idx_max;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1554    options = (u8_t *)q->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1555    /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1556    while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1557      u8_t op = options[offset];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1558      u8_t len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1559      u8_t decode_len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1560      int decode_idx = -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1561      u16_t val_offset = (u16_t)(offset + 2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1562      if (val_offset < offset) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1563        /* overflow */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1564        return ERR_BUF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1565      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1566      /* len byte might be in the next pbuf */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1567      if ((offset + 1) < q->len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1568        len = options[offset + 1];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1569      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1570        len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1571      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1572      /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1573      decode_len = len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1574      switch (op) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1575        /* case(DHCP_OPTION_END): handled above */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1576        case (DHCP_OPTION_PAD):
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1577          /* special option: no len encoded */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1578          decode_len = len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1579          /* will be increased below */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1580          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1581        case (DHCP_OPTION_SUBNET_MASK):
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1582          LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1583          decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1584          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1585        case (DHCP_OPTION_ROUTER):
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1586          decode_len = 4; /* only copy the first given router */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1587          LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1588          decode_idx = DHCP_OPTION_IDX_ROUTER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1589          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1590  #if LWIP_DHCP_PROVIDE_DNS_SERVERS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1591        case (DHCP_OPTION_DNS_SERVER):
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1592          /* special case: there might be more than one server */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1593          LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1594          /* limit number of DNS servers */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1595          decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1596          LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1597          decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1598          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1599  #endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1600        case (DHCP_OPTION_LEASE_TIME):
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1601          LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1602          decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1603          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1604  #if LWIP_DHCP_GET_NTP_SRV
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1605        case (DHCP_OPTION_NTP):
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1606          /* special case: there might be more than one server */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1607          LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1608          /* limit number of NTP servers */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1609          decode_len = LWIP_MIN(len, 4 * LWIP_DHCP_MAX_NTP_SERVERS);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1610          LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1611          decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1612          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1613  #endif /* LWIP_DHCP_GET_NTP_SRV*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1614        case (DHCP_OPTION_OVERLOAD):
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1615          LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1616          /* decode overload only in options, not in file/sname: invalid packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1617          LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1618          decode_idx = DHCP_OPTION_IDX_OVERLOAD;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1619          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1620        case (DHCP_OPTION_MESSAGE_TYPE):
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1621          LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1622          decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1623          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1624        case (DHCP_OPTION_SERVER_ID):
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1625          LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1626          decode_idx = DHCP_OPTION_IDX_SERVER_ID;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1627          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1628        case (DHCP_OPTION_T1):
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1629          LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1630          decode_idx = DHCP_OPTION_IDX_T1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1631          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1632        case (DHCP_OPTION_T2):
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1633          LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1634          decode_idx = DHCP_OPTION_IDX_T2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1635          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1636        default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1637          decode_len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1638          LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1639          LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1640                                      dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1641                                      op, len, q, val_offset);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1642          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1643      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1644      if (op == DHCP_OPTION_PAD) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1645        offset++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1646      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1647        if (offset + len + 2 > 0xFFFF) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1648          /* overflow */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1649          return ERR_BUF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1650        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1651        offset = (u16_t)(offset + len + 2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1652        if (decode_len > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1653          u32_t value = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1654          u16_t copy_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1655  decode_next:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1656          LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1657          if (!dhcp_option_given(dhcp, decode_idx)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1658            copy_len = LWIP_MIN(decode_len, 4);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1659            if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1660              return ERR_BUF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1661            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1662            if (decode_len > 4) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1663              /* decode more than one u32_t */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1664              u16_t next_val_offset;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1665              LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1666              dhcp_got_option(dhcp, decode_idx);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1667              dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1668              decode_len = (u8_t)(decode_len - 4);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1669              next_val_offset = (u16_t)(val_offset + 4);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1670              if (next_val_offset < val_offset) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1671                /* overflow */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1672                return ERR_BUF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1673              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1674              val_offset = next_val_offset;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1675              decode_idx++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1676              goto decode_next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1677            } else if (decode_len == 4) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1678              value = lwip_ntohl(value);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1679            } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1680              LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1681              value = ((u8_t *)&value)[0];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1682            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1683            dhcp_got_option(dhcp, decode_idx);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1684            dhcp_set_option_value(dhcp, decode_idx, value);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1685          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1686        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1687      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1688      if (offset >= q->len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1689        offset = (u16_t)(offset - q->len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1690        offset_max = (u16_t)(offset_max - q->len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1691        if (offset < offset_max) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1692          q = q->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1693          LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1694          options = (u8_t *)q->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1695        } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1696          /* We've run out of bytes, probably no end marker. Don't proceed. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1697          return ERR_BUF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1698        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1699      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1700    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1701    /* is this an overloaded message? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1702    if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1703      u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1704      dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1705      if (overload == DHCP_OVERLOAD_FILE) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1706        parse_file_as_options = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1707        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1708      } else if (overload == DHCP_OVERLOAD_SNAME) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1709        parse_sname_as_options = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1710        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1711      } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1712        parse_sname_as_options = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1713        parse_file_as_options = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1714        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1715      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1716        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1717      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1718    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1719    if (parse_file_as_options) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1720      /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1721      parse_file_as_options = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1722      options_idx = DHCP_FILE_OFS;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1723      options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1724  #if LWIP_DHCP_BOOTP_FILE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1725      file_overloaded = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1726  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1727      goto again;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1728    } else if (parse_sname_as_options) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1729      parse_sname_as_options = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1730      options_idx = DHCP_SNAME_OFS;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1731      options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1732      goto again;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1733    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1734  #if LWIP_DHCP_BOOTP_FILE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1735    if (!file_overloaded) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1736      /* only do this for ACK messages */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1737      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1738        (dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) == DHCP_ACK))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1739      /* copy bootp file name, don't care for sname (server hostname) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1740      if (pbuf_copy_partial(p, dhcp->boot_file_name, DHCP_FILE_LEN-1, DHCP_FILE_OFS) != (DHCP_FILE_LEN-1)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1741        return ERR_BUF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1742      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1743      /* make sure the string is really NULL-terminated */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1744      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1745    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1746  #endif /* LWIP_DHCP_BOOTP_FILE */ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1747    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1748  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1749  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1750  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1751   * If an incoming DHCP message is in response to us, then trigger the state machine
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1752   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1753  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1754  dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1755  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1756    struct netif *netif = ip_current_input_netif();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1757    struct dhcp *dhcp = netif_dhcp_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1758    struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1759    u8_t msg_type;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1760    u8_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1761    struct dhcp_msg *msg_in;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1762  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1763    LWIP_UNUSED_ARG(arg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1764  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1765    /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1766    if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1767      goto free_pbuf_and_return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1768    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1769  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1770    LWIP_ASSERT("invalid server address type", IP_IS_V4(addr));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1771  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1772    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_recv(pbuf = %p) from DHCP server %"U16_F".%"U16_F".%"U16_F".%"U16_F" port %"U16_F"\n", (void *)p,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1773                ip4_addr1_16(ip_2_ip4(addr)), ip4_addr2_16(ip_2_ip4(addr)), ip4_addr3_16(ip_2_ip4(addr)), ip4_addr4_16(ip_2_ip4(addr)), port));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1774    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->len = %"U16_F"\n", p->len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1775    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->tot_len = %"U16_F"\n", p->tot_len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1776    /* prevent warnings about unused arguments */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1777    LWIP_UNUSED_ARG(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1778    LWIP_UNUSED_ARG(addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1779    LWIP_UNUSED_ARG(port);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1780  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1781    if (p->len < DHCP_MIN_REPLY_LEN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1782      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1783      goto free_pbuf_and_return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1784    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1785  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1786    if (reply_msg->op != DHCP_BOOTREPLY) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1787      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1788      goto free_pbuf_and_return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1789    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1790    /* iterate through hardware address and match against DHCP message */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1791    for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1792      if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1793        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1794                    ("netif->hwaddr[%"U16_F"]==%02"X16_F" != reply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1795                     (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1796        goto free_pbuf_and_return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1797      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1798    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1799    /* match transaction ID against what we expected */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1800    if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1801      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1802                  ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1803      goto free_pbuf_and_return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1804    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1805    /* option fields could be unfold? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1806    if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1807      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1808                  ("problem unfolding DHCP message - too short on memory?\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1809      goto free_pbuf_and_return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1810    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1811  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1812    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1813    /* obtain pointer to DHCP message type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1814    if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1815      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1816      goto free_pbuf_and_return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1817    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1818  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1819    msg_in = (struct dhcp_msg *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1820    /* read DHCP message type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1821    msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1822    /* message type is DHCP ACK? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1823    if (msg_type == DHCP_ACK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1824      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1825      /* in requesting state? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1826      if (dhcp->state == DHCP_STATE_REQUESTING) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1827        dhcp_handle_ack(netif, msg_in);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1828  #if DHCP_DOES_ARP_CHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1829        if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1830          /* check if the acknowledged lease address is already in use */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1831          dhcp_check(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1832        } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1833          /* bind interface to the acknowledged lease address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1834          dhcp_bind(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1835        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1836  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1837        /* bind interface to the acknowledged lease address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1838        dhcp_bind(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1839  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1840      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1841      /* already bound to the given lease address? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1842      else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1843               (dhcp->state == DHCP_STATE_RENEWING)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1844        dhcp_handle_ack(netif, msg_in);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1845        dhcp_bind(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1846      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1847    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1848    /* received a DHCP_NAK in appropriate state? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1849    else if ((msg_type == DHCP_NAK) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1850             ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1851              (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1852      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1853      dhcp_handle_nak(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1854    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1855    /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1856    else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1857      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1858      /* remember offered lease */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1859      dhcp_handle_offer(netif, msg_in);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1860    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1861  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1862  free_pbuf_and_return:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1863    pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1864  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1865  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1866  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1867   * Create a DHCP request, fill in common headers
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1868   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1869   * @param netif the netif under DHCP control
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1870   * @param dhcp dhcp control struct
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1871   * @param message_type message type of the request
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1872   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1873  static struct pbuf *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1874  dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1875  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1876    u16_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1877    struct pbuf *p_out;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1878    struct dhcp_msg *msg_out;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1879    u16_t options_out_len_loc;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1880  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1881  #ifndef DHCP_GLOBAL_XID
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1882    /** default global transaction identifier starting value (easy to match
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1883     *  with a packet analyser). We simply increment for each new request.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1884     *  Predefine DHCP_GLOBAL_XID to a better value or a function call to generate one
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1885     *  at runtime, any supporting function prototypes can be defined in DHCP_GLOBAL_XID_HEADER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1886  #if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1887    static u32_t xid;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1888  #else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1889    static u32_t xid = 0xABCD0000;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1890  #endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1891  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1892    if (!xid_initialised) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1893      xid = DHCP_GLOBAL_XID;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1894      xid_initialised = !xid_initialised;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1895    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1896  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1897    LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1898    LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1899    p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1900    if (p_out == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1901      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1902                  ("dhcp_create_msg(): could not allocate pbuf\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1903      return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1904    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1905    LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1906                (p_out->len >= sizeof(struct dhcp_msg)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1907  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1908    /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1909    if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1910      /* reuse transaction identifier in retransmissions */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1911      if (dhcp->tries == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1912  #if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1913        xid = LWIP_RAND();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1914  #else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1915        xid++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1916  #endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1917      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1918      dhcp->xid = xid;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1919    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1920    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1921                ("transaction id xid(%"X32_F")\n", xid));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1922  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1923    msg_out = (struct dhcp_msg *)p_out->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1924    memset(msg_out, 0, sizeof(struct dhcp_msg));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1925  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1926    msg_out->op = DHCP_BOOTREQUEST;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1927    /* @todo: make link layer independent */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1928    msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1929    msg_out->hlen = netif->hwaddr_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1930    msg_out->xid = lwip_htonl(dhcp->xid);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1931    /* we don't need the broadcast flag since we can receive unicast traffic
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1932       before being fully configured! */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1933    /* set ciaddr to netif->ip_addr based on message_type and state */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1934    if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1935        ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1936         ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1937      ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1938    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1939    for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1940      /* copy netif hardware address (padded with zeroes through memset already) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1941      msg_out->chaddr[i] = netif->hwaddr[i];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1942    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1943    msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1944    /* Add option MESSAGE_TYPE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1945    options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1946    options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1947    if (options_out_len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1948      *options_out_len = options_out_len_loc;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1949    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1950    return p_out;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1951  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1952  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1953  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1954   * Add a DHCP message trailer
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1955   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1956   * Adds the END option to the DHCP message, and if
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1957   * necessary, up to three padding bytes.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1958   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1959  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1960  dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1961  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1962    options[options_out_len++] = DHCP_OPTION_END;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1963    /* packet is too small, or not 4 byte aligned? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1964    while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1965           (options_out_len < DHCP_OPTIONS_LEN)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1966      /* add a fill/padding byte */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1967      options[options_out_len++] = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1968    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1969    /* shrink the pbuf to the actual content length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1970    pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1971  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1972  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1973  /** check if DHCP supplied netif->ip_addr
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1974   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1975   * @param netif the netif to check
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1976   * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1977   *         0 otherwise
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1978   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1979  u8_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1980  dhcp_supplied_address(const struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1981  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1982    if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1983      struct dhcp *dhcp = netif_dhcp_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1984      return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1985             (dhcp->state == DHCP_STATE_REBINDING);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1986    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1987    return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1988  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1989  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv4\dhcp.c	  1990  #endif /* LWIP_IPV4 && LWIP_DHCP */

	; Module end
