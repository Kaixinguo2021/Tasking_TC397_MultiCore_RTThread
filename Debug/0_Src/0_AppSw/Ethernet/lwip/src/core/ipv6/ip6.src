	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6\\.ip6.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Rtl8211f -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6\\ip6.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6\\ip6.src ..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6\\ip6.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6\\ip6.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	733
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6\\ip6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L5
	.byte	2
	.byte	'int',0,4,5,3
	.word	170
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	177
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	219
	.byte	7
	.word	219
	.byte	8
	.byte	'__cmpswapw',0
	.word	235
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	240
	.byte	9
	.byte	'value',0
	.word	219
	.byte	9
	.byte	'compare',0
	.word	219
	.byte	0,2
	.byte	'short int',0,2,5,10
	.byte	'__wchar_t',0,1,1,1
	.word	297
	.byte	10
	.byte	'__size_t',0,1,1,1
	.word	219
	.byte	10
	.byte	'__ptrdiff_t',0,1,1,1
	.word	170
	.byte	11,1,7
	.word	365
	.byte	10
	.byte	'__codeptr',0,1,1,1
	.word	367
	.byte	10
	.byte	'__intptr_t',0,1,1,1
	.word	170
	.byte	10
	.byte	'__uintptr_t',0,1,1,1
	.word	219
	.byte	2
	.byte	'unsigned char',0,1,8,10
	.byte	'uint8',0,2,108,29
	.word	429
	.byte	2
	.byte	'unsigned short int',0,2,7,10
	.byte	'uint16',0,2,112,29
	.word	460
	.byte	2
	.byte	'unsigned long int',0,4,7,10
	.byte	'uint32',0,2,116,29
	.word	497
	.byte	2
	.byte	'char',0,1,6,10
	.byte	'sint8',0,2,125,29
	.word	533
	.byte	10
	.byte	'sint16',0,2,129,1,29
	.word	297
	.byte	2
	.byte	'long int',0,4,5,10
	.byte	'sint32',0,2,134,1,29
	.word	571
	.byte	2
	.byte	'long long int',0,8,5,10
	.byte	'sint64',0,2,141,1,29
	.word	599
	.byte	2
	.byte	'float',0,4,4,10
	.byte	'float32',0,2,170,1,29
	.word	632
	.byte	12
	.byte	'void',0,7
	.word	658
	.byte	10
	.byte	'pvoid',0,3,54,28
	.word	664
	.byte	10
	.byte	'Ifx_TickTime',0,3,76,28
	.word	599
	.byte	10
	.byte	'u32_t',0,4,87,16
	.word	497
	.byte	10
	.byte	'intmax_t',0,5,198,2,41
	.word	599
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,22,0,3,8,58,15,59,15,57,15,73,19,0,0,11,21,0,54,15,0,0,12,59,0
	.byte	3,8,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6\\ip6.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'cc.h',0,2,0,0
	.byte	'stdint.h',0,3,0,0,0
.L9:
.L7:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	     1  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	     2   * @file
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	     3   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	     4   * IPv6 layer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	     5   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	     6  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	     7  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	     8   * Copyright (c) 2010 Inico Technologies Ltd.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	     9   * All rights reserved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    10   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    11   * Redistribution and use in source and binary forms, with or without modification,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    12   * are permitted provided that the following conditions are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    13   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    14   * 1. Redistributions of source code must retain the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    15   *    this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    16   * 2. Redistributions in binary form must reproduce the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    17   *    this list of conditions and the following disclaimer in the documentation
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    18   *    and/or other materials provided with the distribution.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    19   * 3. The name of the author may not be used to endorse or promote products
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    20   *    derived from this software without specific prior written permission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    21   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    22   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    23   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    24   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    25   * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    26   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    27   * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    28   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    29   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    30   * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    31   * OF SUCH DAMAGE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    32   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    33   * This file is part of the lwIP TCP/IP stack.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    34   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    35   * Author: Ivan Delamer <delamer@inicotech.com>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    36   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    37   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    38   * Please coordinate changes and requests with Ivan Delamer
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    39   * <delamer@inicotech.com>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    40   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    41  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    42  #include "lwip/opt.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    43  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    44  #if LWIP_IPV6  /* don't build if not configured for use in lwipopts.h */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    45  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    46  #include "lwip/def.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    47  #include "lwip/mem.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    48  #include "lwip/netif.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    49  #include "lwip/ip.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    50  #include "lwip/ip6.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    51  #include "lwip/ip6_addr.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    52  #include "lwip/ip6_frag.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    53  #include "lwip/icmp6.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    54  #include "lwip/priv/raw_priv.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    55  #include "lwip/udp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    56  #include "lwip/priv/tcp_priv.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    57  #include "lwip/dhcp6.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    58  #include "lwip/nd6.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    59  #include "lwip/mld6.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    60  #include "lwip/debug.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    61  #include "lwip/stats.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    62  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    63  #ifdef LWIP_HOOK_FILENAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    64  #include LWIP_HOOK_FILENAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    65  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    66  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    67  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    68   * Finds the appropriate network interface for a given IPv6 address. It tries to select
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    69   * a netif following a sequence of heuristics:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    70   * 1) if there is only 1 netif, return it
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    71   * 2) if the destination is a zoned address, match its zone to a netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    72   * 3) if the either the source or destination address is a scoped address,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    73   *    match the source address's zone (if set) or address (if not) to a netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    74   * 4) tries to match the destination subnet to a configured address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    75   * 5) tries to find a router-announced route
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    76   * 6) tries to match the (unscoped) source address to the netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    77   * 7) returns the default netif, if configured
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    78   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    79   * Note that each of the two given addresses may or may not be properly zoned.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    80   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    81   * @param src the source IPv6 address, if known
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    82   * @param dest the destination IPv6 address for which to find the route
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    83   * @return the netif on which to send to reach dest
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    84   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    85  struct netif *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    86  ip6_route(const ip6_addr_t *src, const ip6_addr_t *dest)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    87  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    88  #if LWIP_SINGLE_NETIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    89    LWIP_UNUSED_ARG(src);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    90    LWIP_UNUSED_ARG(dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    91  #else /* LWIP_SINGLE_NETIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    92    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    93    s8_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    94  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    95    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    96  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    97    /* If single netif configuration, fast return. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    98    if ((netif_list != NULL) && (netif_list->next == NULL)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	    99      if (!netif_is_up(netif_list) || !netif_is_link_up(netif_list) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   100          (ip6_addr_has_zone(dest) && !ip6_addr_test_zone(dest, netif_list))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   101        return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   102      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   103      return netif_list;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   104    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   105  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   106  #if LWIP_IPV6_SCOPES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   107    /* Special processing for zoned destination addresses. This includes link-
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   108     * local unicast addresses and interface/link-local multicast addresses. Use
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   109     * the zone to find a matching netif. If the address is not zoned, then there
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   110     * is technically no "wrong" netif to choose, and we leave routing to other
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   111     * rules; in most cases this should be the scoped-source rule below. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   112    if (ip6_addr_has_zone(dest)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   113      IP6_ADDR_ZONECHECK(dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   114      /* Find a netif based on the zone. For custom mappings, one zone may map
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   115       * to multiple netifs, so find one that can actually send a packet. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   116      NETIF_FOREACH(netif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   117        if (ip6_addr_test_zone(dest, netif) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   118            netif_is_up(netif) && netif_is_link_up(netif)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   119          return netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   120        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   121      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   122      /* No matching netif found. Do no try to route to a different netif,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   123       * as that would be a zone violation, resulting in any packets sent to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   124       * that netif being dropped on output. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   125      return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   126    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   127  #endif /* LWIP_IPV6_SCOPES */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   128  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   129    /* Special processing for scoped source and destination addresses. If we get
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   130     * here, the destination address does not have a zone, so either way we need
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   131     * to look at the source address, which may or may not have a zone. If it
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   132     * does, the zone is restrictive: there is (typically) only one matching
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   133     * netif for it, and we should avoid routing to any other netif as that would
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   134     * result in guaranteed zone violations. For scoped source addresses that do
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   135     * not have a zone, use (only) a netif that has that source address locally
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   136     * assigned. This case also applies to the loopback source address, which has
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   137     * an implied link-local scope. If only the destination address is scoped
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   138     * (but, again, not zoned), we still want to use only the source address to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   139     * determine its zone because that's most likely what the user/application
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   140     * wants, regardless of whether the source address is scoped. Finally, some
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   141     * of this story also applies if scoping is disabled altogether. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   142  #if LWIP_IPV6_SCOPES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   143    if (ip6_addr_has_scope(dest, IP6_UNKNOWN) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   144        ip6_addr_has_scope(src, IP6_UNICAST) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   145  #else /* LWIP_IPV6_SCOPES */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   146    if (ip6_addr_islinklocal(dest) || ip6_addr_ismulticast_iflocal(dest) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   147        ip6_addr_ismulticast_linklocal(dest) || ip6_addr_islinklocal(src) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   148  #endif /* LWIP_IPV6_SCOPES */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   149        ip6_addr_isloopback(src)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   150  #if LWIP_IPV6_SCOPES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   151      if (ip6_addr_has_zone(src)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   152        /* Find a netif matching the source zone (relatively cheap). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   153        NETIF_FOREACH(netif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   154          if (netif_is_up(netif) && netif_is_link_up(netif) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   155              ip6_addr_test_zone(src, netif)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   156            return netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   157          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   158        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   159      } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   160  #endif /* LWIP_IPV6_SCOPES */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   161      {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   162        /* Find a netif matching the source address (relatively expensive). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   163        NETIF_FOREACH(netif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   164          if (!netif_is_up(netif) || !netif_is_link_up(netif)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   165            continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   166          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   167          for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   168            if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   169                ip6_addr_cmp_zoneless(src, netif_ip6_addr(netif, i))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   170              return netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   171            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   172          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   173        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   174      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   175      /* Again, do not use any other netif in this case, as that could result in
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   176       * zone boundary violations. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   177      return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   178    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   179  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   180    /* We come here only if neither source nor destination is scoped. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   181    IP6_ADDR_ZONECHECK(src);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   182  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   183  #ifdef LWIP_HOOK_IP6_ROUTE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   184    netif = LWIP_HOOK_IP6_ROUTE(src, dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   185    if (netif != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   186      return netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   187    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   188  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   189  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   190    /* See if the destination subnet matches a configured address. In accordance
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   191     * with RFC 5942, dynamically configured addresses do not have an implied
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   192     * local subnet, and thus should be considered /128 assignments. However, as
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   193     * such, the destination address may still match a local address, and so we
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   194     * still need to check for exact matches here. By (lwIP) policy, statically
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   195     * configured addresses do always have an implied local /64 subnet. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   196    NETIF_FOREACH(netif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   197      if (!netif_is_up(netif) || !netif_is_link_up(netif)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   198        continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   199      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   200      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   201        if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   202            ip6_addr_netcmp(dest, netif_ip6_addr(netif, i)) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   203            (netif_ip6_addr_isstatic(netif, i) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   204            ip6_addr_nethostcmp(dest, netif_ip6_addr(netif, i)))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   205          return netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   206        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   207      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   208    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   209  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   210    /* Get the netif for a suitable router-announced route. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   211    netif = nd6_find_route(dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   212    if (netif != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   213      return netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   214    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   215  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   216    /* Try with the netif that matches the source address. Given the earlier rule
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   217     * for scoped source addresses, this applies to unscoped addresses only. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   218    if (!ip6_addr_isany(src)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   219      NETIF_FOREACH(netif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   220        if (!netif_is_up(netif) || !netif_is_link_up(netif)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   221          continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   222        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   223        for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   224          if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   225              ip6_addr_cmp(src, netif_ip6_addr(netif, i))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   226            return netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   227          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   228        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   229      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   230    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   231  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   232  #if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   233    /* loopif is disabled, loopback traffic is passed through any netif */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   234    if (ip6_addr_isloopback(dest)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   235      /* don't check for link on loopback traffic */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   236      if (netif_default != NULL && netif_is_up(netif_default)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   237        return netif_default;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   238      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   239      /* default netif is not up, just use any netif for loopback traffic */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   240      NETIF_FOREACH(netif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   241        if (netif_is_up(netif)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   242          return netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   243        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   244      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   245      return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   246    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   247  #endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   248  #endif /* !LWIP_SINGLE_NETIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   249  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   250    /* no matching netif found, use default netif, if up */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   251    if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   252      return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   253    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   254    return netif_default;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   255  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   256  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   257  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   258   * @ingroup ip6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   259   * Select the best IPv6 source address for a given destination IPv6 address.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   260   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   261   * This implementation follows RFC 6724 Sec. 5 to the following extent:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   262   * - Rules 1, 2, 3: fully implemented
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   263   * - Rules 4, 5, 5.5: not applicable
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   264   * - Rule 6: not implemented
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   265   * - Rule 7: not applicable
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   266   * - Rule 8: limited to "prefer /64 subnet match over non-match"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   267   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   268   * For Rule 2, we deliberately deviate from RFC 6724 Sec. 3.1 by considering
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   269   * ULAs to be of smaller scope than global addresses, to avoid that a preferred
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   270   * ULA is picked over a deprecated global address when given a global address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   271   * as destination, as that would likely result in broken two-way communication.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   272   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   273   * As long as temporary addresses are not supported (as used in Rule 7), a
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   274   * proper implementation of Rule 8 would obviate the need to implement Rule 6.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   275   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   276   * @param netif the netif on which to send a packet
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   277   * @param dest the destination we are trying to reach (possibly not properly
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   278   *             zoned)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   279   * @return the most suitable source address to use, or NULL if no suitable
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   280   *         source address is found
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   281   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   282  const ip_addr_t *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   283  ip6_select_source_address(struct netif *netif, const ip6_addr_t *dest)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   284  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   285    const ip_addr_t *best_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   286    const ip6_addr_t *cand_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   287    s8_t dest_scope, cand_scope;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   288    s8_t best_scope = IP6_MULTICAST_SCOPE_RESERVED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   289    u8_t i, cand_pref, cand_bits;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   290    u8_t best_pref = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   291    u8_t best_bits = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   292  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   293    /* Start by determining the scope of the given destination address. These
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   294     * tests are hopefully (roughly) in order of likeliness to match. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   295    if (ip6_addr_isglobal(dest)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   296      dest_scope = IP6_MULTICAST_SCOPE_GLOBAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   297    } else if (ip6_addr_islinklocal(dest) || ip6_addr_isloopback(dest)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   298      dest_scope = IP6_MULTICAST_SCOPE_LINK_LOCAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   299    } else if (ip6_addr_isuniquelocal(dest)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   300      dest_scope = IP6_MULTICAST_SCOPE_ORGANIZATION_LOCAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   301    } else if (ip6_addr_ismulticast(dest)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   302      dest_scope = ip6_addr_multicast_scope(dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   303    } else if (ip6_addr_issitelocal(dest)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   304      dest_scope = IP6_MULTICAST_SCOPE_SITE_LOCAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   305    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   306      /* no match, consider scope global */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   307      dest_scope = IP6_MULTICAST_SCOPE_GLOBAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   308    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   309  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   310    best_addr = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   311  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   312    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   313      /* Consider only valid (= preferred and deprecated) addresses. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   314      if (!ip6_addr_isvalid(netif_ip6_addr_state(netif, i))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   315        continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   316      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   317      /* Determine the scope of this candidate address. Same ordering idea. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   318      cand_addr = netif_ip6_addr(netif, i);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   319      if (ip6_addr_isglobal(cand_addr)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   320        cand_scope = IP6_MULTICAST_SCOPE_GLOBAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   321      } else if (ip6_addr_islinklocal(cand_addr)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   322        cand_scope = IP6_MULTICAST_SCOPE_LINK_LOCAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   323      } else if (ip6_addr_isuniquelocal(cand_addr)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   324        cand_scope = IP6_MULTICAST_SCOPE_ORGANIZATION_LOCAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   325      } else if (ip6_addr_issitelocal(cand_addr)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   326        cand_scope = IP6_MULTICAST_SCOPE_SITE_LOCAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   327      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   328        /* no match, treat as low-priority global scope */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   329        cand_scope = IP6_MULTICAST_SCOPE_RESERVEDF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   330      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   331      cand_pref = ip6_addr_ispreferred(netif_ip6_addr_state(netif, i));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   332      /* @todo compute the actual common bits, for longest matching prefix. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   333      /* We cannot count on the destination address having a proper zone
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   334       * assignment, so do not compare zones in this case. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   335      cand_bits = ip6_addr_netcmp_zoneless(cand_addr, dest); /* just 1 or 0 for now */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   336      if (cand_bits && ip6_addr_nethostcmp(cand_addr, dest)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   337        return netif_ip_addr6(netif, i); /* Rule 1 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   338      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   339      if ((best_addr == NULL) || /* no alternative yet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   340          ((cand_scope < best_scope) && (cand_scope >= dest_scope)) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   341          ((cand_scope > best_scope) && (best_scope < dest_scope)) || /* Rule 2 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   342          ((cand_scope == best_scope) && ((cand_pref > best_pref) || /* Rule 3 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   343          ((cand_pref == best_pref) && (cand_bits > best_bits))))) { /* Rule 8 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   344        /* We found a new "winning" candidate. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   345        best_addr = netif_ip_addr6(netif, i);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   346        best_scope = cand_scope;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   347        best_pref = cand_pref;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   348        best_bits = cand_bits;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   349      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   350    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   351  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   352    return best_addr; /* may be NULL */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   353  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   354  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   355  #if LWIP_IPV6_FORWARD
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   356  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   357   * Forwards an IPv6 packet. It finds an appropriate route for the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   358   * packet, decrements the HL value of the packet, and outputs
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   359   * the packet on the appropriate interface.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   360   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   361   * @param p the packet to forward (p->payload points to IP header)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   362   * @param iphdr the IPv6 header of the input packet
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   363   * @param inp the netif on which this packet was received
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   364   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   365  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   366  ip6_forward(struct pbuf *p, struct ip6_hdr *iphdr, struct netif *inp)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   367  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   368    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   369  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   370    /* do not forward link-local or loopback addresses */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   371    if (ip6_addr_islinklocal(ip6_current_dest_addr()) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   372        ip6_addr_isloopback(ip6_current_dest_addr())) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   373      LWIP_DEBUGF(IP6_DEBUG, ("ip6_forward: not forwarding link-local address.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   374      IP6_STATS_INC(ip6.rterr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   375      IP6_STATS_INC(ip6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   376      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   377    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   378  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   379    /* Find network interface where to forward this IP packet to. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   380    netif = ip6_route(IP6_ADDR_ANY6, ip6_current_dest_addr());
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   381    if (netif == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   382      LWIP_DEBUGF(IP6_DEBUG, ("ip6_forward: no route for %"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   383          IP6_ADDR_BLOCK1(ip6_current_dest_addr()),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   384          IP6_ADDR_BLOCK2(ip6_current_dest_addr()),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   385          IP6_ADDR_BLOCK3(ip6_current_dest_addr()),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   386          IP6_ADDR_BLOCK4(ip6_current_dest_addr()),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   387          IP6_ADDR_BLOCK5(ip6_current_dest_addr()),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   388          IP6_ADDR_BLOCK6(ip6_current_dest_addr()),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   389          IP6_ADDR_BLOCK7(ip6_current_dest_addr()),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   390          IP6_ADDR_BLOCK8(ip6_current_dest_addr())));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   391  #if LWIP_ICMP6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   392      /* Don't send ICMP messages in response to ICMP messages */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   393      if (IP6H_NEXTH(iphdr) != IP6_NEXTH_ICMP6) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   394        icmp6_dest_unreach(p, ICMP6_DUR_NO_ROUTE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   395      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   396  #endif /* LWIP_ICMP6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   397      IP6_STATS_INC(ip6.rterr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   398      IP6_STATS_INC(ip6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   399      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   400    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   401  #if LWIP_IPV6_SCOPES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   402    /* Do not forward packets with a zoned (e.g., link-local) source address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   403     * outside of their zone. We determined the zone a bit earlier, so we know
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   404     * that the address is properly zoned here, so we can safely use has_zone.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   405     * Also skip packets with a loopback source address (link-local implied). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   406    if ((ip6_addr_has_zone(ip6_current_src_addr()) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   407        !ip6_addr_test_zone(ip6_current_src_addr(), netif)) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   408        ip6_addr_isloopback(ip6_current_src_addr())) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   409      LWIP_DEBUGF(IP6_DEBUG, ("ip6_forward: not forwarding packet beyond its source address zone.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   410      IP6_STATS_INC(ip6.rterr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   411      IP6_STATS_INC(ip6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   412      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   413    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   414  #endif /* LWIP_IPV6_SCOPES */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   415    /* Do not forward packets onto the same network interface on which
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   416     * they arrived. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   417    if (netif == inp) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   418      LWIP_DEBUGF(IP6_DEBUG, ("ip6_forward: not bouncing packets back on incoming interface.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   419      IP6_STATS_INC(ip6.rterr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   420      IP6_STATS_INC(ip6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   421      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   422    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   423  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   424    /* decrement HL */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   425    IP6H_HOPLIM_SET(iphdr, IP6H_HOPLIM(iphdr) - 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   426    /* send ICMP6 if HL == 0 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   427    if (IP6H_HOPLIM(iphdr) == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   428  #if LWIP_ICMP6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   429      /* Don't send ICMP messages in response to ICMP messages */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   430      if (IP6H_NEXTH(iphdr) != IP6_NEXTH_ICMP6) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   431        icmp6_time_exceeded(p, ICMP6_TE_HL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   432      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   433  #endif /* LWIP_ICMP6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   434      IP6_STATS_INC(ip6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   435      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   436    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   437  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   438    if (netif->mtu && (p->tot_len > netif->mtu)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   439  #if LWIP_ICMP6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   440      /* Don't send ICMP messages in response to ICMP messages */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   441      if (IP6H_NEXTH(iphdr) != IP6_NEXTH_ICMP6) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   442        icmp6_packet_too_big(p, netif->mtu);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   443      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   444  #endif /* LWIP_ICMP6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   445      IP6_STATS_INC(ip6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   446      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   447    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   448  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   449    LWIP_DEBUGF(IP6_DEBUG, ("ip6_forward: forwarding packet to %"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   450        IP6_ADDR_BLOCK1(ip6_current_dest_addr()),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   451        IP6_ADDR_BLOCK2(ip6_current_dest_addr()),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   452        IP6_ADDR_BLOCK3(ip6_current_dest_addr()),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   453        IP6_ADDR_BLOCK4(ip6_current_dest_addr()),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   454        IP6_ADDR_BLOCK5(ip6_current_dest_addr()),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   455        IP6_ADDR_BLOCK6(ip6_current_dest_addr()),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   456        IP6_ADDR_BLOCK7(ip6_current_dest_addr()),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   457        IP6_ADDR_BLOCK8(ip6_current_dest_addr())));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   458  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   459    /* transmit pbuf on chosen interface */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   460    netif->output_ip6(netif, p, ip6_current_dest_addr());
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   461    IP6_STATS_INC(ip6.fw);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   462    IP6_STATS_INC(ip6.xmit);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   463    return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   464  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   465  #endif /* LWIP_IPV6_FORWARD */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   466  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   467  /** Return true if the current input packet should be accepted on this netif */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   468  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   469  ip6_input_accept(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   470  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   471    /* interface is up? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   472    if (netif_is_up(netif)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   473      u8_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   474      /* unicast to this interface address? address configured? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   475      /* If custom scopes are used, the destination zone will be tested as
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   476        * part of the local-address comparison, but we need to test the source
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   477        * scope as well (e.g., is this interface on the same link?). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   478      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   479        if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   480            ip6_addr_cmp(ip6_current_dest_addr(), netif_ip6_addr(netif, i))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   481  #if IPV6_CUSTOM_SCOPES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   482            && (!ip6_addr_has_zone(ip6_current_src_addr()) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   483                ip6_addr_test_zone(ip6_current_src_addr(), netif))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   484  #endif /* IPV6_CUSTOM_SCOPES */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   485        ) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   486          /* accept on this netif */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   487          return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   488        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   489      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   490    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   491    return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   492  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   493  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   494  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   495   * This function is called by the network interface device driver when
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   496   * an IPv6 packet is received. The function does the basic checks of the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   497   * IP header such as packet size being at least larger than the header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   498   * size etc. If the packet was not destined for us, the packet is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   499   * forwarded (using ip6_forward).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   500   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   501   * Finally, the packet is sent to the upper layer protocol input function.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   502   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   503   * @param p the received IPv6 packet (p->payload points to IPv6 header)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   504   * @param inp the netif on which this packet was received
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   505   * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   506   *         processed, but currently always returns ERR_OK)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   507   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   508  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   509  ip6_input(struct pbuf *p, struct netif *inp)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   510  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   511    struct ip6_hdr *ip6hdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   512    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   513    const u8_t *nexth;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   514    u16_t hlen, hlen_tot; /* the current header length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   515  #if 0 /*IP_ACCEPT_LINK_LAYER_ADDRESSING*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   516    @todo
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   517    int check_ip_src=1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   518  #endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   519  #if LWIP_RAW
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   520    raw_input_state_t raw_status;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   521  #endif /* LWIP_RAW */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   522  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   523    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   524  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   525    IP6_STATS_INC(ip6.recv);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   526  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   527    /* identify the IP header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   528    ip6hdr = (struct ip6_hdr *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   529    if (IP6H_V(ip6hdr) != 6) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   530      LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IPv6 packet dropped due to bad version number %"U32_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   531          IP6H_V(ip6hdr)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   532      pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   533      IP6_STATS_INC(ip6.err);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   534      IP6_STATS_INC(ip6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   535      return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   536    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   537  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   538  #ifdef LWIP_HOOK_IP6_INPUT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   539    if (LWIP_HOOK_IP6_INPUT(p, inp)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   540      /* the packet has been eaten */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   541      return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   542    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   543  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   544  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   545    /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   546    if ((IP6_HLEN > p->len) || (IP6H_PLEN(ip6hdr) > (p->tot_len - IP6_HLEN))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   547      if (IP6_HLEN > p->len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   548        LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   549          ("IPv6 header (len %"U16_F") does not fit in first pbuf (len %"U16_F"), IP packet dropped.\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   550              (u16_t)IP6_HLEN, p->len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   551      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   552      if ((IP6H_PLEN(ip6hdr) + IP6_HLEN) > p->tot_len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   553        LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   554          ("IPv6 (plen %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   555              (u16_t)(IP6H_PLEN(ip6hdr) + IP6_HLEN), p->tot_len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   556      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   557      /* free (drop) packet pbufs */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   558      pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   559      IP6_STATS_INC(ip6.lenerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   560      IP6_STATS_INC(ip6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   561      return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   562    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   563  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   564    /* Trim pbuf. This should have been done at the netif layer,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   565     * but we'll do it anyway just to be sure that its done. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   566    pbuf_realloc(p, (u16_t)(IP6_HLEN + IP6H_PLEN(ip6hdr)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   567  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   568    /* copy IP addresses to aligned ip6_addr_t */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   569    ip_addr_copy_from_ip6_packed(ip_data.current_iphdr_dest, ip6hdr->dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   570    ip_addr_copy_from_ip6_packed(ip_data.current_iphdr_src, ip6hdr->src);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   571  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   572    /* Don't accept virtual IPv4 mapped IPv6 addresses.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   573     * Don't accept multicast source addresses. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   574    if (ip6_addr_isipv4mappedipv6(ip_2_ip6(&ip_data.current_iphdr_dest)) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   575       ip6_addr_isipv4mappedipv6(ip_2_ip6(&ip_data.current_iphdr_src)) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   576       ip6_addr_ismulticast(ip_2_ip6(&ip_data.current_iphdr_src))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   577      /* free (drop) packet pbufs */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   578      pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   579      IP6_STATS_INC(ip6.err);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   580      IP6_STATS_INC(ip6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   581      return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   582    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   583  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   584    /* Set the appropriate zone identifier on the addresses. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   585    ip6_addr_assign_zone(ip_2_ip6(&ip_data.current_iphdr_dest), IP6_UNKNOWN, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   586    ip6_addr_assign_zone(ip_2_ip6(&ip_data.current_iphdr_src), IP6_UNICAST, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   587  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   588    /* current header pointer. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   589    ip_data.current_ip6_header = ip6hdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   590  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   591    /* In netif, used in case we need to send ICMPv6 packets back. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   592    ip_data.current_netif = inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   593    ip_data.current_input_netif = inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   594  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   595    /* match packet against an interface, i.e. is this packet for us? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   596    if (ip6_addr_ismulticast(ip6_current_dest_addr())) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   597      /* Always joined to multicast if-local and link-local all-nodes group. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   598      if (ip6_addr_isallnodes_iflocal(ip6_current_dest_addr()) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   599          ip6_addr_isallnodes_linklocal(ip6_current_dest_addr())) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   600        netif = inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   601      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   602  #if LWIP_IPV6_MLD
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   603      else if (mld6_lookfor_group(inp, ip6_current_dest_addr())) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   604        netif = inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   605      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   606  #else /* LWIP_IPV6_MLD */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   607      else if (ip6_addr_issolicitednode(ip6_current_dest_addr())) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   608        u8_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   609        /* Filter solicited node packets when MLD is not enabled
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   610         * (for Neighbor discovery). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   611        netif = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   612        for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   613          if (ip6_addr_isvalid(netif_ip6_addr_state(inp, i)) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   614              ip6_addr_cmp_solicitednode(ip6_current_dest_addr(), netif_ip6_addr(inp, i))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   615            netif = inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   616            LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: solicited node packet accepted on interface %c%c\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   617                netif->name[0], netif->name[1]));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   618            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   619          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   620        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   621      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   622  #endif /* LWIP_IPV6_MLD */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   623      else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   624        netif = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   625      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   626    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   627      /* start trying with inp. if that's not acceptable, start walking the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   628         list of configured netifs. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   629      if (ip6_input_accept(inp)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   630        netif = inp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   631      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   632        netif = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   633  #if !IPV6_CUSTOM_SCOPES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   634        /* Shortcut: stop looking for other interfaces if either the source or
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   635          * the destination has a scope constrained to this interface. Custom
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   636          * scopes may break the 1:1 link/interface mapping, however. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   637        if (ip6_addr_islinklocal(ip6_current_dest_addr()) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   638            ip6_addr_islinklocal(ip6_current_src_addr())) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   639          goto netif_found;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   640        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   641  #endif /* !IPV6_CUSTOM_SCOPES */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   642  #if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   643        /* The loopback address is to be considered link-local. Packets to it
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   644          * should be dropped on other interfaces, as per RFC 4291 Sec. 2.5.3.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   645          * Its implied scope means packets *from* the loopback address should
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   646          * not be accepted on other interfaces, either. These requirements
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   647          * cannot be implemented in the case that loopback traffic is sent
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   648          * across a non-loopback interface, however. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   649        if (ip6_addr_isloopback(ip6_current_dest_addr()) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   650            ip6_addr_isloopback(ip6_current_src_addr())) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   651          goto netif_found;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   652        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   653  #endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   654  #if !LWIP_SINGLE_NETIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   655        NETIF_FOREACH(netif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   656          if (netif == inp) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   657            /* we checked that before already */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   658            continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   659          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   660          if (ip6_input_accept(netif)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   661            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   662          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   663        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   664  #endif /* !LWIP_SINGLE_NETIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   665      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   666  netif_found:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   667      LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet accepted on interface %c%c\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   668          netif ? netif->name[0] : 'X', netif? netif->name[1] : 'X'));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   669    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   670  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   671    /* "::" packet source address? (used in duplicate address detection) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   672    if (ip6_addr_isany(ip6_current_src_addr()) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   673        (!ip6_addr_issolicitednode(ip6_current_dest_addr()))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   674      /* packet source is not valid */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   675      /* free (drop) packet pbufs */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   676      LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with src ANY_ADDRESS dropped\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   677      pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   678      IP6_STATS_INC(ip6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   679      goto ip6_input_cleanup;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   680    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   681  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   682    /* packet not for us? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   683    if (netif == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   684      /* packet not for us, route or discard */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   685      LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_TRACE, ("ip6_input: packet not for us.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   686  #if LWIP_IPV6_FORWARD
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   687      /* non-multicast packet? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   688      if (!ip6_addr_ismulticast(ip6_current_dest_addr())) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   689        /* try to forward IP packet on (other) interfaces */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   690        ip6_forward(p, ip6hdr, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   691      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   692  #endif /* LWIP_IPV6_FORWARD */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   693      pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   694      goto ip6_input_cleanup;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   695    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   696  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   697    /* current netif pointer. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   698    ip_data.current_netif = netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   699  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   700    /* Save next header type. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   701    nexth = &IP6H_NEXTH(ip6hdr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   702  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   703    /* Init header length. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   704    hlen = hlen_tot = IP6_HLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   705  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   706    /* Move to payload. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   707    pbuf_remove_header(p, IP6_HLEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   708  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   709    /* Process known option extension headers, if present. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   710    while (*nexth != IP6_NEXTH_NONE)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   711    {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   712      switch (*nexth) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   713      case IP6_NEXTH_HOPBYHOP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   714      {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   715        s32_t opt_offset;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   716        struct ip6_hbh_hdr *hbh_hdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   717        struct ip6_opt_hdr *opt_hdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   718        LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with Hop-by-Hop options header\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   719  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   720        /* Get and check the header length, while staying in packet bounds. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   721        hbh_hdr = (struct ip6_hbh_hdr *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   722  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   723        /* Get next header type. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   724        nexth = &IP6_HBH_NEXTH(hbh_hdr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   725  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   726        /* Get the header length. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   727        hlen = (u16_t)(8 * (1 + hbh_hdr->_hlen));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   728  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   729        if ((p->len < 8) || (hlen > p->len)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   730          LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   731            ("IPv6 options header (hlen %"U16_F") does not fit in first pbuf (len %"U16_F"), IPv6 packet dropped.\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   732                hlen, p->len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   733          /* free (drop) packet pbufs */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   734          pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   735          IP6_STATS_INC(ip6.lenerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   736          IP6_STATS_INC(ip6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   737          goto ip6_input_cleanup;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   738        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   739  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   740        hlen_tot = (u16_t)(hlen_tot + hlen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   741  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   742        /* The extended option header starts right after Hop-by-Hop header. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   743        opt_offset = IP6_HBH_HLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   744        while (opt_offset < hlen)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   745        {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   746          s32_t opt_dlen = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   747  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   748          opt_hdr = (struct ip6_opt_hdr *)((u8_t *)hbh_hdr + opt_offset);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   749  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   750          switch (IP6_OPT_TYPE(opt_hdr)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   751          /* @todo: process IPV6 Hop-by-Hop option data */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   752          case IP6_PAD1_OPTION:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   753            /* PAD1 option doesn't have length and value field */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   754            opt_dlen = -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   755            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   756          case IP6_PADN_OPTION:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   757            opt_dlen = IP6_OPT_DLEN(opt_hdr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   758            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   759          case IP6_ROUTER_ALERT_OPTION:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   760            opt_dlen = IP6_OPT_DLEN(opt_hdr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   761            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   762          case IP6_JUMBO_OPTION:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   763            opt_dlen = IP6_OPT_DLEN(opt_hdr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   764            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   765          default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   766            /* Check 2 MSB of Hop-by-Hop header type. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   767            switch (IP6_OPT_TYPE_ACTION(opt_hdr)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   768            case 1:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   769              /* Discard the packet. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   770              LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with invalid Hop-by-Hop option type dropped.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   771              pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   772              IP6_STATS_INC(ip6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   773              goto ip6_input_cleanup;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   774            case 2:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   775              /* Send ICMP Parameter Problem */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   776              icmp6_param_problem(p, ICMP6_PP_OPTION, opt_hdr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   777              LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with invalid Hop-by-Hop option type dropped.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   778              pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   779              IP6_STATS_INC(ip6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   780              goto ip6_input_cleanup;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   781            case 3:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   782              /* Send ICMP Parameter Problem if destination address is not a multicast address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   783              if (!ip6_addr_ismulticast(ip6_current_dest_addr())) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   784                icmp6_param_problem(p, ICMP6_PP_OPTION, opt_hdr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   785              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   786              LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with invalid Hop-by-Hop option type dropped.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   787              pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   788              IP6_STATS_INC(ip6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   789              goto ip6_input_cleanup;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   790            default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   791              /* Skip over this option. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   792              opt_dlen = IP6_OPT_DLEN(opt_hdr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   793              break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   794            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   795            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   796          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   797  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   798          /* Adjust the offset to move to the next extended option header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   799          opt_offset = opt_offset + IP6_OPT_HLEN + opt_dlen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   800        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   801        pbuf_remove_header(p, hlen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   802        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   803      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   804      case IP6_NEXTH_DESTOPTS:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   805      {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   806        s32_t opt_offset;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   807        struct ip6_dest_hdr *dest_hdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   808        struct ip6_opt_hdr *opt_hdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   809        LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with Destination options header\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   810  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   811        dest_hdr = (struct ip6_dest_hdr *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   812  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   813        /* Get next header type. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   814        nexth = &IP6_DEST_NEXTH(dest_hdr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   815  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   816        /* Get the header length. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   817        hlen = 8 * (1 + dest_hdr->_hlen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   818        if ((p->len < 8) || (hlen > p->len)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   819          LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   820            ("IPv6 options header (hlen %"U16_F") does not fit in first pbuf (len %"U16_F"), IPv6 packet dropped.\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   821                hlen, p->len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   822          /* free (drop) packet pbufs */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   823          pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   824          IP6_STATS_INC(ip6.lenerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   825          IP6_STATS_INC(ip6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   826          goto ip6_input_cleanup;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   827        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   828  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   829        hlen_tot = (u16_t)(hlen_tot + hlen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   830  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   831        /* The extended option header starts right after Destination header. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   832        opt_offset = IP6_DEST_HLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   833        while (opt_offset < hlen)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   834        {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   835          s32_t opt_dlen = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   836  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   837          opt_hdr = (struct ip6_opt_hdr *)((u8_t *)dest_hdr + opt_offset);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   838  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   839          switch (IP6_OPT_TYPE(opt_hdr))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   840          {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   841          /* @todo: process IPV6 Destination option data */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   842          case IP6_PAD1_OPTION:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   843            /* PAD1 option deosn't have length and value field */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   844            opt_dlen = -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   845            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   846          case IP6_PADN_OPTION:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   847            opt_dlen = IP6_OPT_DLEN(opt_hdr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   848            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   849          case IP6_ROUTER_ALERT_OPTION:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   850            opt_dlen = IP6_OPT_DLEN(opt_hdr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   851            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   852          case IP6_JUMBO_OPTION:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   853            opt_dlen = IP6_OPT_DLEN(opt_hdr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   854            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   855          case IP6_HOME_ADDRESS_OPTION:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   856            opt_dlen = IP6_OPT_DLEN(opt_hdr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   857            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   858          default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   859            /* Check 2 MSB of Destination header type. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   860            switch (IP6_OPT_TYPE_ACTION(opt_hdr))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   861            {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   862            case 1:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   863              /* Discard the packet. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   864              LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with invalid destination option type dropped.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   865              pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   866              IP6_STATS_INC(ip6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   867              goto ip6_input_cleanup;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   868            case 2:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   869              /* Send ICMP Parameter Problem */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   870              icmp6_param_problem(p, ICMP6_PP_OPTION, opt_hdr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   871              LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with invalid destination option type dropped.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   872              pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   873              IP6_STATS_INC(ip6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   874              goto ip6_input_cleanup;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   875            case 3:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   876              /* Send ICMP Parameter Problem if destination address is not a multicast address */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   877              if (!ip6_addr_ismulticast(ip6_current_dest_addr())) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   878                icmp6_param_problem(p, ICMP6_PP_OPTION, opt_hdr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   879              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   880              LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with invalid destination option type dropped.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   881              pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   882              IP6_STATS_INC(ip6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   883              goto ip6_input_cleanup;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   884            default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   885              /* Skip over this option. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   886              opt_dlen = IP6_OPT_DLEN(opt_hdr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   887              break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   888            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   889            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   890          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   891  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   892          /* Adjust the offset to move to the next extended option header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   893          opt_offset = opt_offset + IP6_OPT_HLEN + opt_dlen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   894        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   895  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   896        pbuf_remove_header(p, hlen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   897        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   898      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   899      case IP6_NEXTH_ROUTING:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   900      {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   901        struct ip6_rout_hdr *rout_hdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   902        LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with Routing header\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   903  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   904        rout_hdr = (struct ip6_rout_hdr *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   905  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   906        /* Get next header type. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   907        nexth = &IP6_ROUT_NEXTH(rout_hdr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   908  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   909        /* Get the header length. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   910        hlen = 8 * (1 + rout_hdr->_hlen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   911  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   912        if ((p->len < 8) || (hlen > p->len)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   913          LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   914            ("IPv6 options header (hlen %"U16_F") does not fit in first pbuf (len %"U16_F"), IPv6 packet dropped.\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   915                hlen, p->len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   916          /* free (drop) packet pbufs */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   917          pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   918          IP6_STATS_INC(ip6.lenerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   919          IP6_STATS_INC(ip6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   920          goto ip6_input_cleanup;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   921        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   922  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   923        /* Skip over this header. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   924        hlen_tot = (u16_t)(hlen_tot + hlen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   925  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   926        /* if segment left value is 0 in routing header, ignore the option */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   927        if (IP6_ROUT_SEG_LEFT(rout_hdr)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   928          /* The length field of routing option header must be even */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   929          if (rout_hdr->_hlen & 0x1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   930            /* Discard and send parameter field error */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   931            icmp6_param_problem(p, ICMP6_PP_FIELD, &rout_hdr->_hlen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   932            LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with invalid routing type dropped\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   933            pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   934            IP6_STATS_INC(ip6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   935            goto ip6_input_cleanup;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   936          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   937  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   938          switch (IP6_ROUT_TYPE(rout_hdr))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   939          {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   940          /* TODO: process routing by the type */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   941          case IP6_ROUT_TYPE2:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   942            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   943          case IP6_ROUT_RPL:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   944            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   945          default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   946            /* Discard unrecognized routing type and send parameter field error */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   947            icmp6_param_problem(p, ICMP6_PP_FIELD, &IP6_ROUT_TYPE(rout_hdr));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   948            LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with invalid routing type dropped\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   949            pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   950            IP6_STATS_INC(ip6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   951            goto ip6_input_cleanup;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   952          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   953        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   954  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   955        pbuf_remove_header(p, hlen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   956        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   957      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   958      case IP6_NEXTH_FRAGMENT:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   959      {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   960        struct ip6_frag_hdr *frag_hdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   961        LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with Fragment header\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   962  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   963        frag_hdr = (struct ip6_frag_hdr *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   964  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   965        /* Get next header type. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   966        nexth = &IP6_FRAG_NEXTH(frag_hdr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   967  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   968        /* Fragment Header length. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   969        hlen = 8;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   970  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   971        /* Make sure this header fits in current pbuf. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   972        if (hlen > p->len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   973          LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   974            ("IPv6 options header (hlen %"U16_F") does not fit in first pbuf (len %"U16_F"), IPv6 packet dropped.\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   975                hlen, p->len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   976          /* free (drop) packet pbufs */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   977          pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   978          IP6_FRAG_STATS_INC(ip6_frag.lenerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   979          IP6_FRAG_STATS_INC(ip6_frag.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   980          goto ip6_input_cleanup;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   981        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   982  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   983        hlen_tot = (u16_t)(hlen_tot + hlen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   984  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   985        /* check payload length is multiple of 8 octets when mbit is set */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   986        if (IP6_FRAG_MBIT(frag_hdr) && (IP6H_PLEN(ip6hdr) & 0x7)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   987          /* ipv6 payload length is not multiple of 8 octets */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   988          icmp6_param_problem(p, ICMP6_PP_FIELD, LWIP_PACKED_CAST(const void *, &ip6hdr->_plen));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   989          LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with invalid payload length dropped\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   990          pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   991          IP6_STATS_INC(ip6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   992          goto ip6_input_cleanup;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   993        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   994  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   995        /* Offset == 0 and more_fragments == 0? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   996        if ((frag_hdr->_fragment_offset &
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   997             PP_HTONS(IP6_FRAG_OFFSET_MASK | IP6_FRAG_MORE_FLAG)) == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   998          /* This is a 1-fragment packet. Skip this header and continue. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	   999          pbuf_remove_header(p, hlen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1000        } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1001  #if LWIP_IPV6_REASS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1002          /* reassemble the packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1003          ip_data.current_ip_header_tot_len = hlen_tot;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1004          p = ip6_reass(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1005          /* packet not fully reassembled yet? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1006          if (p == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1007            goto ip6_input_cleanup;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1008          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1009  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1010          /* Returned p point to IPv6 header.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1011           * Update all our variables and pointers and continue. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1012          ip6hdr = (struct ip6_hdr *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1013          nexth = &IP6H_NEXTH(ip6hdr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1014          hlen = hlen_tot = IP6_HLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1015          pbuf_remove_header(p, IP6_HLEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1016  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1017  #else /* LWIP_IPV6_REASS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1018          /* free (drop) packet pbufs */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1019          LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with Fragment header dropped (with LWIP_IPV6_REASS==0)\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1020          pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1021          IP6_STATS_INC(ip6.opterr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1022          IP6_STATS_INC(ip6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1023          goto ip6_input_cleanup;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1024  #endif /* LWIP_IPV6_REASS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1025        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1026        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1027      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1028      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1029        goto options_done;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1030      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1031  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1032      if (*nexth == IP6_NEXTH_HOPBYHOP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1033        /* Hop-by-Hop header comes only as a first option */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1034        icmp6_param_problem(p, ICMP6_PP_HEADER, nexth);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1035        LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: packet with Hop-by-Hop options header dropped (only valid as a first option)\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1036        pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1037        IP6_STATS_INC(ip6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1038        goto ip6_input_cleanup;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1039      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1040    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1041  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1042  options_done:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1043  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1044    /* send to upper layers */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1045    LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: \n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1046    ip6_debug_print(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1047    LWIP_DEBUGF(IP6_DEBUG, ("ip6_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1048  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1049    ip_data.current_ip_header_tot_len = hlen_tot;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1050    
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1051  #if LWIP_RAW
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1052    /* p points to IPv6 header again for raw_input. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1053    pbuf_add_header_force(p, hlen_tot);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1054    /* raw input did not eat the packet? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1055    raw_status = raw_input(p, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1056    if (raw_status != RAW_INPUT_EATEN)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1057    {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1058      /* Point to payload. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1059      pbuf_remove_header(p, hlen_tot);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1060  #else /* LWIP_RAW */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1061    {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1062  #endif /* LWIP_RAW */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1063      switch (*nexth) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1064      case IP6_NEXTH_NONE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1065        pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1066        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1067  #if LWIP_UDP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1068      case IP6_NEXTH_UDP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1069  #if LWIP_UDPLITE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1070      case IP6_NEXTH_UDPLITE:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1071  #endif /* LWIP_UDPLITE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1072        udp_input(p, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1073        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1074  #endif /* LWIP_UDP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1075  #if LWIP_TCP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1076      case IP6_NEXTH_TCP:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1077        tcp_input(p, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1078        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1079  #endif /* LWIP_TCP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1080  #if LWIP_ICMP6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1081      case IP6_NEXTH_ICMP6:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1082        icmp6_input(p, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1083        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1084  #endif /* LWIP_ICMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1085      default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1086  #if LWIP_RAW
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1087          if (raw_status == RAW_INPUT_DELIVERED) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1088            /* @todo: ipv6 mib in-delivers? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1089          } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1090  #endif /* LWIP_RAW */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1091          {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1092  #if LWIP_ICMP6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1093          /* p points to IPv6 header again for raw_input. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1094          pbuf_add_header_force(p, hlen_tot);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1095          /* send ICMP parameter problem unless it was a multicast or ICMPv6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1096          if ((!ip6_addr_ismulticast(ip6_current_dest_addr())) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1097              (IP6H_NEXTH(ip6hdr) != IP6_NEXTH_ICMP6)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1098            icmp6_param_problem(p, ICMP6_PP_HEADER, nexth);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1099          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1100  #endif /* LWIP_ICMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1101          LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip6_input: Unsupported transport protocol %"U16_F"\n", (u16_t)IP6H_NEXTH(ip6hdr)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1102          IP6_STATS_INC(ip6.proterr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1103          IP6_STATS_INC(ip6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1104        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1105        pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1106        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1107      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1108    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1109  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1110  ip6_input_cleanup:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1111    ip_data.current_netif = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1112    ip_data.current_input_netif = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1113    ip_data.current_ip6_header = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1114    ip_data.current_ip_header_tot_len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1115    ip6_addr_set_zero(ip6_current_src_addr());
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1116    ip6_addr_set_zero(ip6_current_dest_addr());
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1117  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1118    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1119  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1120  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1121  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1122  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1123   * Sends an IPv6 packet on a network interface. This function constructs
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1124   * the IPv6 header. If the source IPv6 address is NULL, the IPv6 "ANY" address is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1125   * used as source (usually during network startup). If the source IPv6 address it
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1126   * IP6_ADDR_ANY, the most appropriate IPv6 address of the outgoing network
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1127   * interface is filled in as source address. If the destination IPv6 address is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1128   * LWIP_IP_HDRINCL, p is assumed to already include an IPv6 header and
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1129   * p->payload points to it instead of the data.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1130   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1131   * @param p the packet to send (p->payload points to the data, e.g. next
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1132              protocol header; if dest == LWIP_IP_HDRINCL, p already includes an
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1133              IPv6 header and p->payload points to that IPv6 header)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1134   * @param src the source IPv6 address to send from (if src == IP6_ADDR_ANY, an
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1135   *         IP address of the netif is selected and used as source address.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1136   *         if src == NULL, IP6_ADDR_ANY is used as source) (src is possibly not
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1137   *         properly zoned)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1138   * @param dest the destination IPv6 address to send the packet to (possibly not
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1139   *             properly zoned)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1140   * @param hl the Hop Limit value to be set in the IPv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1141   * @param tc the Traffic Class value to be set in the IPv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1142   * @param nexth the Next Header to be set in the IPv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1143   * @param netif the netif on which to send this packet
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1144   * @return ERR_OK if the packet was sent OK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1145   *         ERR_BUF if p doesn't have enough space for IPv6/LINK headers
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1146   *         returns errors returned by netif->output_ip6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1147   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1148  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1149  ip6_output_if(struct pbuf *p, const ip6_addr_t *src, const ip6_addr_t *dest,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1150               u8_t hl, u8_t tc,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1151               u8_t nexth, struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1152  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1153    const ip6_addr_t *src_used = src;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1154    if (dest != LWIP_IP_HDRINCL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1155      if (src != NULL && ip6_addr_isany(src)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1156        src_used = ip_2_ip6(ip6_select_source_address(netif, dest));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1157        if ((src_used == NULL) || ip6_addr_isany(src_used)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1158          /* No appropriate source address was found for this packet. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1159          LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip6_output: No suitable source address for packet.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1160          IP6_STATS_INC(ip6.rterr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1161          return ERR_RTE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1162        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1163      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1164    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1165    return ip6_output_if_src(p, src_used, dest, hl, tc, nexth, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1166  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1167  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1168  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1169   * Same as ip6_output_if() but 'src' address is not replaced by netif address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1170   * when it is 'any'.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1171   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1172  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1173  ip6_output_if_src(struct pbuf *p, const ip6_addr_t *src, const ip6_addr_t *dest,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1174               u8_t hl, u8_t tc,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1175               u8_t nexth, struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1176  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1177    struct ip6_hdr *ip6hdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1178    ip6_addr_t dest_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1179  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1180    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1181    LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1182  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1183    /* Should the IPv6 header be generated or is it already included in p? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1184    if (dest != LWIP_IP_HDRINCL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1185  #if LWIP_IPV6_SCOPES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1186      /* If the destination address is scoped but lacks a zone, add a zone now,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1187       * based on the outgoing interface. The lower layers (e.g., nd6) absolutely
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1188       * require addresses to be properly zoned for correctness. In some cases,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1189       * earlier attempts will have been made to add a zone to the destination,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1190       * but this function is the only one that is called in all (other) cases,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1191       * so we must do this here. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1192      if (ip6_addr_lacks_zone(dest, IP6_UNKNOWN)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1193        ip6_addr_copy(dest_addr, *dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1194        ip6_addr_assign_zone(&dest_addr, IP6_UNKNOWN, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1195        dest = &dest_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1196      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1197  #endif /* LWIP_IPV6_SCOPES */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1198  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1199      /* generate IPv6 header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1200      if (pbuf_add_header(p, IP6_HLEN)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1201        LWIP_DEBUGF(IP6_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip6_output: not enough room for IPv6 header in pbuf\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1202        IP6_STATS_INC(ip6.err);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1203        return ERR_BUF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1204      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1205  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1206      ip6hdr = (struct ip6_hdr *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1207      LWIP_ASSERT("check that first pbuf can hold struct ip6_hdr",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1208                 (p->len >= sizeof(struct ip6_hdr)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1209  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1210      IP6H_HOPLIM_SET(ip6hdr, hl);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1211      IP6H_NEXTH_SET(ip6hdr, nexth);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1212  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1213      /* dest cannot be NULL here */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1214      ip6_addr_copy_to_packed(ip6hdr->dest, *dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1215  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1216      IP6H_VTCFL_SET(ip6hdr, 6, tc, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1217      IP6H_PLEN_SET(ip6hdr, (u16_t)(p->tot_len - IP6_HLEN));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1218  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1219      if (src == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1220        src = IP6_ADDR_ANY6;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1221      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1222      /* src cannot be NULL here */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1223      ip6_addr_copy_to_packed(ip6hdr->src, *src);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1224  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1225    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1226      /* IP header already included in p */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1227      ip6hdr = (struct ip6_hdr *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1228      ip6_addr_copy_from_packed(dest_addr, ip6hdr->dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1229      ip6_addr_assign_zone(&dest_addr, IP6_UNKNOWN, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1230      dest = &dest_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1231    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1232  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1233    IP6_STATS_INC(ip6.xmit);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1234  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1235    LWIP_DEBUGF(IP6_DEBUG, ("ip6_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1236    ip6_debug_print(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1237  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1238  #if ENABLE_LOOPBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1239    {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1240      int i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1241  #if !LWIP_HAVE_LOOPIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1242      if (ip6_addr_isloopback(dest)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1243        return netif_loop_output(netif, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1244      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1245  #endif /* !LWIP_HAVE_LOOPIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1246      for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1247        if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i)) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1248            ip6_addr_cmp(dest, netif_ip6_addr(netif, i))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1249          /* Packet to self, enqueue it for loopback */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1250          LWIP_DEBUGF(IP6_DEBUG, ("netif_loop_output()\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1251          return netif_loop_output(netif, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1252        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1253      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1254    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1255  #if LWIP_MULTICAST_TX_OPTIONS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1256    if ((p->flags & PBUF_FLAG_MCASTLOOP) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1257      netif_loop_output(netif, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1258    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1259  #endif /* LWIP_MULTICAST_TX_OPTIONS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1260  #endif /* ENABLE_LOOPBACK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1261  #if LWIP_IPV6_FRAG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1262    /* don't fragment if interface has mtu set to 0 [loopif] */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1263    if (netif_mtu6(netif) && (p->tot_len > nd6_get_destination_mtu(dest, netif))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1264      return ip6_frag(p, netif, dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1265    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1266  #endif /* LWIP_IPV6_FRAG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1267  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1268    LWIP_DEBUGF(IP6_DEBUG, ("netif->output_ip6()\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1269    return netif->output_ip6(netif, p, dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1270  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1271  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1272  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1273   * Simple interface to ip6_output_if. It finds the outgoing network
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1274   * interface and calls upon ip6_output_if to do the actual work.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1275   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1276   * @param p the packet to send (p->payload points to the data, e.g. next
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1277              protocol header; if dest == LWIP_IP_HDRINCL, p already includes an
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1278              IPv6 header and p->payload points to that IPv6 header)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1279   * @param src the source IPv6 address to send from (if src == IP6_ADDR_ANY, an
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1280   *         IP address of the netif is selected and used as source address.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1281   *         if src == NULL, IP6_ADDR_ANY is used as source)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1282   * @param dest the destination IPv6 address to send the packet to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1283   * @param hl the Hop Limit value to be set in the IPv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1284   * @param tc the Traffic Class value to be set in the IPv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1285   * @param nexth the Next Header to be set in the IPv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1286   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1287   * @return ERR_RTE if no route is found
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1288   *         see ip_output_if() for more return values
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1289   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1290  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1291  ip6_output(struct pbuf *p, const ip6_addr_t *src, const ip6_addr_t *dest,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1292            u8_t hl, u8_t tc, u8_t nexth)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1293  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1294    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1295    struct ip6_hdr *ip6hdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1296    ip6_addr_t src_addr, dest_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1297  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1298    LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1299  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1300    if (dest != LWIP_IP_HDRINCL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1301      netif = ip6_route(src, dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1302    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1303      /* IP header included in p, read addresses. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1304      ip6hdr = (struct ip6_hdr *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1305      ip6_addr_copy_from_packed(src_addr, ip6hdr->src);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1306      ip6_addr_copy_from_packed(dest_addr, ip6hdr->dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1307      netif = ip6_route(&src_addr, &dest_addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1308    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1309  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1310    if (netif == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1311      LWIP_DEBUGF(IP6_DEBUG, ("ip6_output: no route for %"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1312          IP6_ADDR_BLOCK1(dest),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1313          IP6_ADDR_BLOCK2(dest),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1314          IP6_ADDR_BLOCK3(dest),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1315          IP6_ADDR_BLOCK4(dest),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1316          IP6_ADDR_BLOCK5(dest),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1317          IP6_ADDR_BLOCK6(dest),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1318          IP6_ADDR_BLOCK7(dest),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1319          IP6_ADDR_BLOCK8(dest)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1320      IP6_STATS_INC(ip6.rterr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1321      return ERR_RTE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1322    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1323  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1324    return ip6_output_if(p, src, dest, hl, tc, nexth, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1325  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1326  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1327  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1328  #if LWIP_NETIF_USE_HINTS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1329  /** Like ip6_output, but takes and addr_hint pointer that is passed on to netif->addr_hint
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1330   *  before calling ip6_output_if.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1331   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1332   * @param p the packet to send (p->payload points to the data, e.g. next
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1333              protocol header; if dest == LWIP_IP_HDRINCL, p already includes an
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1334              IPv6 header and p->payload points to that IPv6 header)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1335   * @param src the source IPv6 address to send from (if src == IP6_ADDR_ANY, an
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1336   *         IP address of the netif is selected and used as source address.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1337   *         if src == NULL, IP6_ADDR_ANY is used as source)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1338   * @param dest the destination IPv6 address to send the packet to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1339   * @param hl the Hop Limit value to be set in the IPv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1340   * @param tc the Traffic Class value to be set in the IPv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1341   * @param nexth the Next Header to be set in the IPv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1342   * @param netif_hint netif output hint pointer set to netif->hint before
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1343   *        calling ip_output_if()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1344   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1345   * @return ERR_RTE if no route is found
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1346   *         see ip_output_if() for more return values
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1347   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1348  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1349  ip6_output_hinted(struct pbuf *p, const ip6_addr_t *src, const ip6_addr_t *dest,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1350            u8_t hl, u8_t tc, u8_t nexth, struct netif_hint *netif_hint)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1351  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1352    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1353    struct ip6_hdr *ip6hdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1354    ip6_addr_t src_addr, dest_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1355    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1356  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1357    LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1358  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1359    if (dest != LWIP_IP_HDRINCL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1360      netif = ip6_route(src, dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1361    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1362      /* IP header included in p, read addresses. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1363      ip6hdr = (struct ip6_hdr *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1364      ip6_addr_copy_from_packed(src_addr, ip6hdr->src);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1365      ip6_addr_copy_from_packed(dest_addr, ip6hdr->dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1366      netif = ip6_route(&src_addr, &dest_addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1367    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1368  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1369    if (netif == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1370      LWIP_DEBUGF(IP6_DEBUG, ("ip6_output: no route for %"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F":%"X16_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1371          IP6_ADDR_BLOCK1(dest),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1372          IP6_ADDR_BLOCK2(dest),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1373          IP6_ADDR_BLOCK3(dest),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1374          IP6_ADDR_BLOCK4(dest),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1375          IP6_ADDR_BLOCK5(dest),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1376          IP6_ADDR_BLOCK6(dest),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1377          IP6_ADDR_BLOCK7(dest),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1378          IP6_ADDR_BLOCK8(dest)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1379      IP6_STATS_INC(ip6.rterr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1380      return ERR_RTE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1381    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1382  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1383    NETIF_SET_HINTS(netif, netif_hint);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1384    err = ip6_output_if(p, src, dest, hl, tc, nexth, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1385    NETIF_RESET_HINTS(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1386  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1387    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1388  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1389  #endif /* LWIP_NETIF_USE_HINTS*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1390  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1391  #if LWIP_IPV6_MLD
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1392  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1393   * Add a hop-by-hop options header with a router alert option and padding.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1394   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1395   * Used by MLD when sending a Multicast listener report/done message.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1396   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1397   * @param p the packet to which we will prepend the options header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1398   * @param nexth the next header protocol number (e.g. IP6_NEXTH_ICMP6)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1399   * @param value the value of the router alert option data (e.g. IP6_ROUTER_ALERT_VALUE_MLD)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1400   * @return ERR_OK if hop-by-hop header was added, ERR_* otherwise
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1401   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1402  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1403  ip6_options_add_hbh_ra(struct pbuf *p, u8_t nexth, u8_t value)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1404  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1405    u8_t *opt_data;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1406    u32_t offset = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1407    struct ip6_hbh_hdr *hbh_hdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1408    struct ip6_opt_hdr *opt_hdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1409  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1410    /* fixed 4 bytes for router alert option and 2 bytes padding */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1411    const u8_t hlen = (sizeof(struct ip6_opt_hdr) * 2) + IP6_ROUTER_ALERT_DLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1412    /* Move pointer to make room for hop-by-hop options header. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1413    if (pbuf_add_header(p, sizeof(struct ip6_hbh_hdr) + hlen)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1414      LWIP_DEBUGF(IP6_DEBUG, ("ip6_options: no space for options header\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1415      IP6_STATS_INC(ip6.err);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1416      return ERR_BUF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1417    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1418  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1419    /* Set fields of Hop-by-Hop header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1420    hbh_hdr = (struct ip6_hbh_hdr *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1421    IP6_HBH_NEXTH(hbh_hdr) = nexth;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1422    hbh_hdr->_hlen = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1423    offset = IP6_HBH_HLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1424  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1425    /* Set router alert options to Hop-by-Hop extended option header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1426    opt_hdr = (struct ip6_opt_hdr *)((u8_t *)hbh_hdr + offset);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1427    IP6_OPT_TYPE(opt_hdr) = IP6_ROUTER_ALERT_OPTION;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1428    IP6_OPT_DLEN(opt_hdr) = IP6_ROUTER_ALERT_DLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1429    offset += IP6_OPT_HLEN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1430  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1431    /* Set router alert option data */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1432    opt_data = (u8_t *)hbh_hdr + offset;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1433    opt_data[0] = value;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1434    opt_data[1] = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1435    offset += IP6_OPT_DLEN(opt_hdr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1436  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1437    /* add 2 bytes padding to make 8 bytes Hop-by-Hop header length */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1438    opt_hdr = (struct ip6_opt_hdr *)((u8_t *)hbh_hdr + offset);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1439    IP6_OPT_TYPE(opt_hdr) = IP6_PADN_OPTION;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1440    IP6_OPT_DLEN(opt_hdr) = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1441  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1442    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1443  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1444  #endif /* LWIP_IPV6_MLD */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1445  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1446  #if IP6_DEBUG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1447  /* Print an IPv6 header by using LWIP_DEBUGF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1448   * @param p an IPv6 packet, p->payload pointing to the IPv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1449   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1450  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1451  ip6_debug_print(struct pbuf *p)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1452  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1453    struct ip6_hdr *ip6hdr = (struct ip6_hdr *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1454  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1455    LWIP_DEBUGF(IP6_DEBUG, ("IPv6 header:\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1456    LWIP_DEBUGF(IP6_DEBUG, ("+-------------------------------+\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1457    LWIP_DEBUGF(IP6_DEBUG, ("| %2"U16_F" |  %3"U16_F"  |      %7"U32_F"     | (ver, class, flow)\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1458                      IP6H_V(ip6hdr),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1459                      IP6H_TC(ip6hdr),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1460                      IP6H_FL(ip6hdr)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1461    LWIP_DEBUGF(IP6_DEBUG, ("+-------------------------------+\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1462    LWIP_DEBUGF(IP6_DEBUG, ("|     %5"U16_F"     |  %3"U16_F"  |  %3"U16_F"  | (plen, nexth, hopl)\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1463                      IP6H_PLEN(ip6hdr),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1464                      IP6H_NEXTH(ip6hdr),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1465                      IP6H_HOPLIM(ip6hdr)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1466    LWIP_DEBUGF(IP6_DEBUG, ("+-------------------------------+\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1467    LWIP_DEBUGF(IP6_DEBUG, ("|  %4"X32_F" |  %4"X32_F" |  %4"X32_F" |  %4"X32_F" | (src)\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1468                      IP6_ADDR_BLOCK1(&(ip6hdr->src)),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1469                      IP6_ADDR_BLOCK2(&(ip6hdr->src)),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1470                      IP6_ADDR_BLOCK3(&(ip6hdr->src)),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1471                      IP6_ADDR_BLOCK4(&(ip6hdr->src))));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1472    LWIP_DEBUGF(IP6_DEBUG, ("|  %4"X32_F" |  %4"X32_F" |  %4"X32_F" |  %4"X32_F" |\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1473                      IP6_ADDR_BLOCK5(&(ip6hdr->src)),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1474                      IP6_ADDR_BLOCK6(&(ip6hdr->src)),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1475                      IP6_ADDR_BLOCK7(&(ip6hdr->src)),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1476                      IP6_ADDR_BLOCK8(&(ip6hdr->src))));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1477    LWIP_DEBUGF(IP6_DEBUG, ("+-------------------------------+\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1478    LWIP_DEBUGF(IP6_DEBUG, ("|  %4"X32_F" |  %4"X32_F" |  %4"X32_F" |  %4"X32_F" | (dest)\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1479                      IP6_ADDR_BLOCK1(&(ip6hdr->dest)),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1480                      IP6_ADDR_BLOCK2(&(ip6hdr->dest)),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1481                      IP6_ADDR_BLOCK3(&(ip6hdr->dest)),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1482                      IP6_ADDR_BLOCK4(&(ip6hdr->dest))));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1483    LWIP_DEBUGF(IP6_DEBUG, ("|  %4"X32_F" |  %4"X32_F" |  %4"X32_F" |  %4"X32_F" |\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1484                      IP6_ADDR_BLOCK5(&(ip6hdr->dest)),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1485                      IP6_ADDR_BLOCK6(&(ip6hdr->dest)),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1486                      IP6_ADDR_BLOCK7(&(ip6hdr->dest)),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1487                      IP6_ADDR_BLOCK8(&(ip6hdr->dest))));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1488    LWIP_DEBUGF(IP6_DEBUG, ("+-------------------------------+\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1489  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1490  #endif /* IP6_DEBUG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1491  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\ip6.c	  1492  #endif /* LWIP_IPV6 */

	; Module end
