	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6\\.icmp6.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Rtl8211f -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6\\icmp6.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6\\icmp6.src ..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6\\icmp6.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6\\icmp6.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	735
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6\\icmp6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L5
	.byte	2
	.byte	'int',0,4,5,3
	.word	172
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	179
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	221
	.byte	7
	.word	221
	.byte	8
	.byte	'__cmpswapw',0
	.word	237
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	242
	.byte	9
	.byte	'value',0
	.word	221
	.byte	9
	.byte	'compare',0
	.word	221
	.byte	0,2
	.byte	'short int',0,2,5,10
	.byte	'__wchar_t',0,1,1,1
	.word	299
	.byte	10
	.byte	'__size_t',0,1,1,1
	.word	221
	.byte	10
	.byte	'__ptrdiff_t',0,1,1,1
	.word	172
	.byte	11,1,7
	.word	367
	.byte	10
	.byte	'__codeptr',0,1,1,1
	.word	369
	.byte	10
	.byte	'__intptr_t',0,1,1,1
	.word	172
	.byte	10
	.byte	'__uintptr_t',0,1,1,1
	.word	221
	.byte	2
	.byte	'unsigned char',0,1,8,10
	.byte	'uint8',0,2,108,29
	.word	431
	.byte	2
	.byte	'unsigned short int',0,2,7,10
	.byte	'uint16',0,2,112,29
	.word	462
	.byte	2
	.byte	'unsigned long int',0,4,7,10
	.byte	'uint32',0,2,116,29
	.word	499
	.byte	2
	.byte	'char',0,1,6,10
	.byte	'sint8',0,2,125,29
	.word	535
	.byte	10
	.byte	'sint16',0,2,129,1,29
	.word	299
	.byte	2
	.byte	'long int',0,4,5,10
	.byte	'sint32',0,2,134,1,29
	.word	573
	.byte	2
	.byte	'long long int',0,8,5,10
	.byte	'sint64',0,2,141,1,29
	.word	601
	.byte	2
	.byte	'float',0,4,4,10
	.byte	'float32',0,2,170,1,29
	.word	634
	.byte	12
	.byte	'void',0,7
	.word	660
	.byte	10
	.byte	'pvoid',0,3,54,28
	.word	666
	.byte	10
	.byte	'Ifx_TickTime',0,3,76,28
	.word	601
	.byte	10
	.byte	'u32_t',0,4,87,16
	.word	499
	.byte	10
	.byte	'intmax_t',0,5,198,2,41
	.word	601
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,22,0,3,8,58,15,59,15,57,15,73,19,0,0,11,21,0,54,15,0,0,12,59,0
	.byte	3,8,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6\\icmp6.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'cc.h',0,2,0,0
	.byte	'stdint.h',0,3,0,0,0
.L9:
.L7:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	     1  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	     2   * @file
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	     3   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	     4   * IPv6 version of ICMP, as per RFC 4443.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	     5   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	     6  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	     7  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	     8   * Copyright (c) 2010 Inico Technologies Ltd.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	     9   * All rights reserved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    10   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    11   * Redistribution and use in source and binary forms, with or without modification,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    12   * are permitted provided that the following conditions are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    13   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    14   * 1. Redistributions of source code must retain the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    15   *    this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    16   * 2. Redistributions in binary form must reproduce the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    17   *    this list of conditions and the following disclaimer in the documentation
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    18   *    and/or other materials provided with the distribution.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    19   * 3. The name of the author may not be used to endorse or promote products
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    20   *    derived from this software without specific prior written permission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    21   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    22   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    23   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    24   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    25   * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    26   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    27   * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    28   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    29   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    30   * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    31   * OF SUCH DAMAGE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    32   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    33   * This file is part of the lwIP TCP/IP stack.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    34   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    35   * Author: Ivan Delamer <delamer@inicotech.com>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    36   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    37   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    38   * Please coordinate changes and requests with Ivan Delamer
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    39   * <delamer@inicotech.com>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    40   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    41  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    42  #include "lwip/opt.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    43  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    44  #if LWIP_ICMP6 && LWIP_IPV6 /* don't build if not configured for use in lwipopts.h */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    45  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    46  #include "lwip/icmp6.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    47  #include "lwip/prot/icmp6.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    48  #include "lwip/ip6.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    49  #include "lwip/ip6_addr.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    50  #include "lwip/inet_chksum.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    51  #include "lwip/pbuf.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    52  #include "lwip/netif.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    53  #include "lwip/nd6.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    54  #include "lwip/mld6.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    55  #include "lwip/ip.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    56  #include "lwip/stats.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    57  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    58  #include <string.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    59  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    60  #if LWIP_ICMP6_DATASIZE == 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    61  #undef LWIP_ICMP6_DATASIZE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    62  #define LWIP_ICMP6_DATASIZE   8
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    63  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    64  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    65  /* Forward declarations */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    66  static void icmp6_send_response(struct pbuf *p, u8_t code, u32_t data, u8_t type);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    67  static void icmp6_send_response_with_addrs(struct pbuf *p, u8_t code, u32_t data,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    68      u8_t type, const ip6_addr_t *src_addr, const ip6_addr_t *dest_addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    69  static void icmp6_send_response_with_addrs_and_netif(struct pbuf *p, u8_t code, u32_t data,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    70      u8_t type, const ip6_addr_t *src_addr, const ip6_addr_t *dest_addr, struct netif *netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    71  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    72  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    73  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    74   * Process an input ICMPv6 message. Called by ip6_input.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    75   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    76   * Will generate a reply for echo requests. Other messages are forwarded
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    77   * to nd6_input, or mld6_input.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    78   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    79   * @param p the mld packet, p->payload pointing to the icmpv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    80   * @param inp the netif on which this packet was received
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    81   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    82  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    83  icmp6_input(struct pbuf *p, struct netif *inp)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    84  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    85    struct icmp6_hdr *icmp6hdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    86    struct pbuf *r;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    87    const ip6_addr_t *reply_src;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    88  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    89    ICMP6_STATS_INC(icmp6.recv);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    90  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    91    /* Check that ICMPv6 header fits in payload */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    92    if (p->len < sizeof(struct icmp6_hdr)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    93      /* drop short packets */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    94      pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    95      ICMP6_STATS_INC(icmp6.lenerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    96      ICMP6_STATS_INC(icmp6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    97      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    98    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	    99  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   100    icmp6hdr = (struct icmp6_hdr *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   101  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   102  #if CHECKSUM_CHECK_ICMP6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   103    IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP6) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   104      if (ip6_chksum_pseudo(p, IP6_NEXTH_ICMP6, p->tot_len, ip6_current_src_addr(),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   105                            ip6_current_dest_addr()) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   106        /* Checksum failed */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   107        pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   108        ICMP6_STATS_INC(icmp6.chkerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   109        ICMP6_STATS_INC(icmp6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   110        return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   111      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   112    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   113  #endif /* CHECKSUM_CHECK_ICMP6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   114  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   115    switch (icmp6hdr->type) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   116    case ICMP6_TYPE_NA: /* Neighbor advertisement */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   117    case ICMP6_TYPE_NS: /* Neighbor solicitation */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   118    case ICMP6_TYPE_RA: /* Router advertisement */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   119    case ICMP6_TYPE_RD: /* Redirect */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   120    case ICMP6_TYPE_PTB: /* Packet too big */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   121      nd6_input(p, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   122      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   123    case ICMP6_TYPE_RS:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   124  #if LWIP_IPV6_FORWARD
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   125      /* @todo implement router functionality */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   126  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   127      break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   128  #if LWIP_IPV6_MLD
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   129    case ICMP6_TYPE_MLQ:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   130    case ICMP6_TYPE_MLR:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   131    case ICMP6_TYPE_MLD:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   132      mld6_input(p, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   133      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   134  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   135    case ICMP6_TYPE_EREQ:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   136  #if !LWIP_MULTICAST_PING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   137      /* multicast destination address? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   138      if (ip6_addr_ismulticast(ip6_current_dest_addr())) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   139        /* drop */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   140        pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   141        ICMP6_STATS_INC(icmp6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   142        return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   143      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   144  #endif /* LWIP_MULTICAST_PING */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   145  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   146      /* Allocate reply. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   147      r = pbuf_alloc(PBUF_IP, p->tot_len, PBUF_RAM);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   148      if (r == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   149        /* drop */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   150        pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   151        ICMP6_STATS_INC(icmp6.memerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   152        return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   153      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   154  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   155      /* Copy echo request. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   156      if (pbuf_copy(r, p) != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   157        /* drop */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   158        pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   159        pbuf_free(r);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   160        ICMP6_STATS_INC(icmp6.err);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   161        return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   162      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   163  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   164      /* Determine reply source IPv6 address. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   165  #if LWIP_MULTICAST_PING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   166      if (ip6_addr_ismulticast(ip6_current_dest_addr())) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   167        reply_src = ip_2_ip6(ip6_select_source_address(inp, ip6_current_src_addr()));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   168        if (reply_src == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   169          /* drop */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   170          pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   171          pbuf_free(r);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   172          ICMP6_STATS_INC(icmp6.rterr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   173          return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   174        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   175      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   176      else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   177  #endif /* LWIP_MULTICAST_PING */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   178      {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   179        reply_src = ip6_current_dest_addr();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   180      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   181  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   182      /* Set fields in reply. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   183      ((struct icmp6_echo_hdr *)(r->payload))->type = ICMP6_TYPE_EREP;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   184      ((struct icmp6_echo_hdr *)(r->payload))->chksum = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   185  #if CHECKSUM_GEN_ICMP6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   186      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP6) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   187        ((struct icmp6_echo_hdr *)(r->payload))->chksum = ip6_chksum_pseudo(r,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   188            IP6_NEXTH_ICMP6, r->tot_len, reply_src, ip6_current_src_addr());
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   189      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   190  #endif /* CHECKSUM_GEN_ICMP6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   191  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   192      /* Send reply. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   193      ICMP6_STATS_INC(icmp6.xmit);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   194      ip6_output_if(r, reply_src, ip6_current_src_addr(),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   195          LWIP_ICMP6_HL, 0, IP6_NEXTH_ICMP6, inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   196      pbuf_free(r);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   197  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   198      break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   199    default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   200      ICMP6_STATS_INC(icmp6.proterr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   201      ICMP6_STATS_INC(icmp6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   202      break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   203    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   204  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   205    pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   206  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   207  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   208  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   209  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   210   * Send an icmpv6 'destination unreachable' packet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   211   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   212   * This function must be used only in direct response to a packet that is being
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   213   * received right now. Otherwise, address zones would be lost.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   214   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   215   * @param p the input packet for which the 'unreachable' should be sent,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   216   *          p->payload pointing to the IPv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   217   * @param c ICMPv6 code for the unreachable type
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   218   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   219  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   220  icmp6_dest_unreach(struct pbuf *p, enum icmp6_dur_code c)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   221  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   222    icmp6_send_response(p, c, 0, ICMP6_TYPE_DUR);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   223  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   224  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   225  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   226   * Send an icmpv6 'packet too big' packet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   227   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   228   * This function must be used only in direct response to a packet that is being
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   229   * received right now. Otherwise, address zones would be lost.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   230   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   231   * @param p the input packet for which the 'packet too big' should be sent,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   232   *          p->payload pointing to the IPv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   233   * @param mtu the maximum mtu that we can accept
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   234   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   235  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   236  icmp6_packet_too_big(struct pbuf *p, u32_t mtu)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   237  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   238    icmp6_send_response(p, 0, mtu, ICMP6_TYPE_PTB);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   239  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   240  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   241  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   242   * Send an icmpv6 'time exceeded' packet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   243   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   244   * This function must be used only in direct response to a packet that is being
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   245   * received right now. Otherwise, address zones would be lost.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   246   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   247   * @param p the input packet for which the 'time exceeded' should be sent,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   248   *          p->payload pointing to the IPv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   249   * @param c ICMPv6 code for the time exceeded type
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   250   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   251  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   252  icmp6_time_exceeded(struct pbuf *p, enum icmp6_te_code c)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   253  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   254    icmp6_send_response(p, c, 0, ICMP6_TYPE_TE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   255  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   256  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   257  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   258   * Send an icmpv6 'time exceeded' packet, with explicit source and destination
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   259   * addresses.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   260   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   261   * This function may be used to send a response sometime after receiving the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   262   * packet for which this response is meant. The provided source and destination
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   263   * addresses are used primarily to retain their zone information.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   264   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   265   * @param p the input packet for which the 'time exceeded' should be sent,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   266   *          p->payload pointing to the IPv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   267   * @param c ICMPv6 code for the time exceeded type
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   268   * @param src_addr source address of the original packet, with zone information
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   269   * @param dest_addr destination address of the original packet, with zone
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   270   *                  information
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   271   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   272  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   273  icmp6_time_exceeded_with_addrs(struct pbuf *p, enum icmp6_te_code c,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   274      const ip6_addr_t *src_addr, const ip6_addr_t *dest_addr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   275  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   276    icmp6_send_response_with_addrs(p, c, 0, ICMP6_TYPE_TE, src_addr, dest_addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   277  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   278  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   279  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   280   * Send an icmpv6 'parameter problem' packet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   281   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   282   * This function must be used only in direct response to a packet that is being
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   283   * received right now. Otherwise, address zones would be lost and the calculated
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   284   * offset would be wrong (calculated against ip6_current_header()).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   285   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   286   * @param p the input packet for which the 'param problem' should be sent,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   287   *          p->payload pointing to the IP header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   288   * @param c ICMPv6 code for the param problem type
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   289   * @param pointer the pointer to the byte where the parameter is found
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   290   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   291  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   292  icmp6_param_problem(struct pbuf *p, enum icmp6_pp_code c, const void *pointer)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   293  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   294    u32_t pointer_u32 = (u32_t)((const u8_t *)pointer - (const u8_t *)ip6_current_header());
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   295    icmp6_send_response(p, c, pointer_u32, ICMP6_TYPE_PP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   296  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   297  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   298  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   299   * Send an ICMPv6 packet in response to an incoming packet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   300   * The packet is sent *to* ip_current_src_addr() on ip_current_netif().
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   301   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   302   * @param p the input packet for which the response should be sent,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   303   *          p->payload pointing to the IPv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   304   * @param code Code of the ICMPv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   305   * @param data Additional 32-bit parameter in the ICMPv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   306   * @param type Type of the ICMPv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   307   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   308  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   309  icmp6_send_response(struct pbuf *p, u8_t code, u32_t data, u8_t type)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   310  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   311    const struct ip6_addr *reply_src, *reply_dest;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   312    struct netif *netif = ip_current_netif();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   313  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   314    LWIP_ASSERT("icmpv6 packet not a direct response", netif != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   315    reply_dest = ip6_current_src_addr();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   316  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   317    /* Select an address to use as source. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   318    reply_src = ip_2_ip6(ip6_select_source_address(netif, reply_dest));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   319    if (reply_src == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   320      ICMP6_STATS_INC(icmp6.rterr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   321      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   322    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   323    icmp6_send_response_with_addrs_and_netif(p, code, data, type, reply_src, reply_dest, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   324  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   325  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   326  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   327   * Send an ICMPv6 packet in response to an incoming packet.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   328   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   329   * Call this function if the packet is NOT sent as a direct response to an
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   330   * incoming packet, but rather sometime later (e.g. for a fragment reassembly
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   331   * timeout). The caller must provide the zoned source and destination addresses
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   332   * from the original packet with the src_addr and dest_addr parameters. The
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   333   * reason for this approach is that while the addresses themselves are part of
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   334   * the original packet, their zone information is not, thus possibly resulting
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   335   * in a link-local response being sent over the wrong link.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   336   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   337   * @param p the input packet for which the response should be sent,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   338   *          p->payload pointing to the IPv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   339   * @param code Code of the ICMPv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   340   * @param data Additional 32-bit parameter in the ICMPv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   341   * @param type Type of the ICMPv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   342   * @param src_addr original source address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   343   * @param dest_addr original destination address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   344   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   345  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   346  icmp6_send_response_with_addrs(struct pbuf *p, u8_t code, u32_t data, u8_t type,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   347      const ip6_addr_t *src_addr, const ip6_addr_t *dest_addr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   348  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   349    const struct ip6_addr *reply_src, *reply_dest;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   350    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   351  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   352    /* Get the destination address and netif for this ICMP message. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   353    LWIP_ASSERT("must provide both source and destination", src_addr != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   354    LWIP_ASSERT("must provide both source and destination", dest_addr != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   355  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   356    /* Special case, as ip6_current_xxx is either NULL, or points
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   357       to a different packet than the one that expired. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   358    IP6_ADDR_ZONECHECK(src_addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   359    IP6_ADDR_ZONECHECK(dest_addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   360    /* Swap source and destination for the reply. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   361    reply_dest = src_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   362    reply_src = dest_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   363    netif = ip6_route(reply_src, reply_dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   364    if (netif == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   365      ICMP6_STATS_INC(icmp6.rterr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   366      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   367    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   368    icmp6_send_response_with_addrs_and_netif(p, code, data, type, reply_src,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   369      reply_dest, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   370  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   371  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   372  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   373   * Send an ICMPv6 packet (with srd/dst address and netif given).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   374   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   375   * @param p the input packet for which the response should be sent,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   376   *          p->payload pointing to the IPv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   377   * @param code Code of the ICMPv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   378   * @param data Additional 32-bit parameter in the ICMPv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   379   * @param type Type of the ICMPv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   380   * @param reply_src source address of the packet to send
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   381   * @param reply_dest destination address of the packet to send
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   382   * @param netif netif to send the packet
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   383   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   384  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   385  icmp6_send_response_with_addrs_and_netif(struct pbuf *p, u8_t code, u32_t data, u8_t type,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   386      const ip6_addr_t *reply_src, const ip6_addr_t *reply_dest, struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   387  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   388    struct pbuf *q;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   389    struct icmp6_hdr *icmp6hdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   390  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   391    /* ICMPv6 header + IPv6 header + data */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   392    q = pbuf_alloc(PBUF_IP, sizeof(struct icmp6_hdr) + IP6_HLEN + LWIP_ICMP6_DATASIZE,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   393                   PBUF_RAM);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   394    if (q == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   395      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMPv6 packet.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   396      ICMP6_STATS_INC(icmp6.memerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   397      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   398    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   399    LWIP_ASSERT("check that first pbuf can hold icmp 6message",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   400               (q->len >= (sizeof(struct icmp6_hdr) + IP6_HLEN + LWIP_ICMP6_DATASIZE)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   401  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   402    icmp6hdr = (struct icmp6_hdr *)q->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   403    icmp6hdr->type = type;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   404    icmp6hdr->code = code;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   405    icmp6hdr->data = lwip_htonl(data);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   406  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   407    /* copy fields from original packet */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   408    SMEMCPY((u8_t *)q->payload + sizeof(struct icmp6_hdr), (u8_t *)p->payload,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   409            IP6_HLEN + LWIP_ICMP6_DATASIZE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   410  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   411    /* calculate checksum */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   412    icmp6hdr->chksum = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   413  #if CHECKSUM_GEN_ICMP6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   414    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP6) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   415      icmp6hdr->chksum = ip6_chksum_pseudo(q, IP6_NEXTH_ICMP6, q->tot_len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   416        reply_src, reply_dest);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   417    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   418  #endif /* CHECKSUM_GEN_ICMP6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   419  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   420    ICMP6_STATS_INC(icmp6.xmit);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   421    ip6_output_if(q, reply_src, reply_dest, LWIP_ICMP6_HL, 0, IP6_NEXTH_ICMP6, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   422    pbuf_free(q);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   423  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   424  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\icmp6.c	   425  #endif /* LWIP_ICMP6 && LWIP_IPV6 */

	; Module end
