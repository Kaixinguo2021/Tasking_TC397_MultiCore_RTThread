	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6\\.mld6.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Rtl8211f -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6\\mld6.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6\\mld6.src ..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6\\mld6.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6\\mld6.c'

	
$TC162
	
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L3:
	.word	734
	.half	3
	.word	.L4
	.byte	4
.L2:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6\\mld6.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L5
	.byte	2
	.byte	'int',0,4,5,3
	.word	171
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	178
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	220
	.byte	7
	.word	220
	.byte	8
	.byte	'__cmpswapw',0
	.word	236
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	241
	.byte	9
	.byte	'value',0
	.word	220
	.byte	9
	.byte	'compare',0
	.word	220
	.byte	0,2
	.byte	'short int',0,2,5,10
	.byte	'__wchar_t',0,1,1,1
	.word	298
	.byte	10
	.byte	'__size_t',0,1,1,1
	.word	220
	.byte	10
	.byte	'__ptrdiff_t',0,1,1,1
	.word	171
	.byte	11,1,7
	.word	366
	.byte	10
	.byte	'__codeptr',0,1,1,1
	.word	368
	.byte	10
	.byte	'__intptr_t',0,1,1,1
	.word	171
	.byte	10
	.byte	'__uintptr_t',0,1,1,1
	.word	220
	.byte	2
	.byte	'unsigned char',0,1,8,10
	.byte	'uint8',0,2,108,29
	.word	430
	.byte	2
	.byte	'unsigned short int',0,2,7,10
	.byte	'uint16',0,2,112,29
	.word	461
	.byte	2
	.byte	'unsigned long int',0,4,7,10
	.byte	'uint32',0,2,116,29
	.word	498
	.byte	2
	.byte	'char',0,1,6,10
	.byte	'sint8',0,2,125,29
	.word	534
	.byte	10
	.byte	'sint16',0,2,129,1,29
	.word	298
	.byte	2
	.byte	'long int',0,4,5,10
	.byte	'sint32',0,2,134,1,29
	.word	572
	.byte	2
	.byte	'long long int',0,8,5,10
	.byte	'sint64',0,2,141,1,29
	.word	600
	.byte	2
	.byte	'float',0,4,4,10
	.byte	'float32',0,2,170,1,29
	.word	633
	.byte	12
	.byte	'void',0,7
	.word	659
	.byte	10
	.byte	'pvoid',0,3,54,28
	.word	665
	.byte	10
	.byte	'Ifx_TickTime',0,3,76,28
	.word	600
	.byte	10
	.byte	'u32_t',0,4,87,16
	.word	498
	.byte	10
	.byte	'intmax_t',0,5,198,2,41
	.word	600
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L4:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,22,0,3,8,58,15,59,15,57,15,73,19,0,0,11,21,0,54,15,0,0,12,59,0
	.byte	3,8,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L5:
	.word	.L7-.L6
.L6:
	.half	3
	.word	.L9-.L8
.L8:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6\\mld6.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'cc.h',0,2,0,0
	.byte	'stdint.h',0,3,0,0,0
.L9:
.L7:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	     1  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	     2   * @file
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	     3   * Multicast listener discovery
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	     4   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	     5   * @defgroup mld6 MLD6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	     6   * @ingroup ip6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	     7   * Multicast listener discovery for IPv6. Aims to be compliant with RFC 2710.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	     8   * No support for MLDv2.\n
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	     9   * Note: The allnodes (ff01::1, ff02::1) group is assumed be received by your 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    10   * netif since it must always be received for correct IPv6 operation (e.g. SLAAC).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    11   * Ensure the netif filters are configured accordingly!\n
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    12   * The netif flags also need NETIF_FLAG_MLD6 flag set to enable MLD6 on a
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    13   * netif ("netif->flags |= NETIF_FLAG_MLD6;").\n
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    14   * To be called from TCPIP thread.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    15   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    16  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    17  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    18   * Copyright (c) 2010 Inico Technologies Ltd.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    19   * All rights reserved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    20   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    21   * Redistribution and use in source and binary forms, with or without modification,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    22   * are permitted provided that the following conditions are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    23   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    24   * 1. Redistributions of source code must retain the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    25   *    this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    26   * 2. Redistributions in binary form must reproduce the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    27   *    this list of conditions and the following disclaimer in the documentation
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    28   *    and/or other materials provided with the distribution.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    29   * 3. The name of the author may not be used to endorse or promote products
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    30   *    derived from this software without specific prior written permission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    31   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    32   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    33   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    34   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    35   * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    36   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    37   * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    38   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    39   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    40   * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    41   * OF SUCH DAMAGE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    42   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    43   * This file is part of the lwIP TCP/IP stack.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    44   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    45   * Author: Ivan Delamer <delamer@inicotech.com>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    46   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    47   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    48   * Please coordinate changes and requests with Ivan Delamer
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    49   * <delamer@inicotech.com>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    50   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    51  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    52  /* Based on igmp.c implementation of igmp v2 protocol */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    53  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    54  #include "lwip/opt.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    55  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    56  #if LWIP_IPV6 && LWIP_IPV6_MLD  /* don't build if not configured for use in lwipopts.h */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    57  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    58  #include "lwip/mld6.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    59  #include "lwip/prot/mld6.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    60  #include "lwip/icmp6.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    61  #include "lwip/ip6.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    62  #include "lwip/ip6_addr.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    63  #include "lwip/ip.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    64  #include "lwip/inet_chksum.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    65  #include "lwip/pbuf.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    66  #include "lwip/netif.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    67  #include "lwip/memp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    68  #include "lwip/stats.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    69  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    70  #include <string.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    71  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    72  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    73  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    74   * MLD constants
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    75   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    76  #define MLD6_HL                           1
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    77  #define MLD6_JOIN_DELAYING_MEMBER_TMR_MS  (500)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    78  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    79  #define MLD6_GROUP_NON_MEMBER             0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    80  #define MLD6_GROUP_DELAYING_MEMBER        1
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    81  #define MLD6_GROUP_IDLE_MEMBER            2
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    82  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    83  /* Forward declarations. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    84  static struct mld_group *mld6_new_group(struct netif *ifp, const ip6_addr_t *addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    85  static err_t mld6_remove_group(struct netif *netif, struct mld_group *group);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    86  static void mld6_delayed_report(struct mld_group *group, u16_t maxresp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    87  static void mld6_send(struct netif *netif, struct mld_group *group, u8_t type);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    88  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    89  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    90  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    91   * Stop MLD processing on interface
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    92   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    93   * @param netif network interface on which stop MLD processing
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    94   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    95  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    96  mld6_stop(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    97  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    98    struct mld_group *group = netif_mld6_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	    99  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   100    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_MLD6, NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   101  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   102    while (group != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   103      struct mld_group *next = group->next; /* avoid use-after-free below */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   104  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   105      /* disable the group at the MAC level */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   106      if (netif->mld_mac_filter != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   107        netif->mld_mac_filter(netif, &(group->group_address), NETIF_DEL_MAC_FILTER);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   108      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   109  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   110      /* free group */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   111      memp_free(MEMP_MLD6_GROUP, group);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   112  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   113      /* move to "next" */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   114      group = next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   115    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   116    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   117  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   118  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   119  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   120   * Report MLD memberships for this interface
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   121   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   122   * @param netif network interface on which report MLD memberships
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   123   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   124  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   125  mld6_report_groups(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   126  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   127    struct mld_group *group = netif_mld6_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   128  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   129    while (group != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   130      mld6_delayed_report(group, MLD6_JOIN_DELAYING_MEMBER_TMR_MS);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   131      group = group->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   132    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   133  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   134  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   135  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   136   * Search for a group that is joined on a netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   137   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   138   * @param ifp the network interface for which to look
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   139   * @param addr the group ipv6 address to search for
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   140   * @return a struct mld_group* if the group has been found,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   141   *         NULL if the group wasn't found.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   142   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   143  struct mld_group *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   144  mld6_lookfor_group(struct netif *ifp, const ip6_addr_t *addr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   145  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   146    struct mld_group *group = netif_mld6_data(ifp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   147  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   148    while (group != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   149      if (ip6_addr_cmp(&(group->group_address), addr)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   150        return group;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   151      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   152      group = group->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   153    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   154  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   155    return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   156  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   157  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   158  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   159  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   160   * create a new group
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   161   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   162   * @param ifp the network interface for which to create
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   163   * @param addr the new group ipv6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   164   * @return a struct mld_group*,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   165   *         NULL on memory error.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   166   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   167  static struct mld_group *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   168  mld6_new_group(struct netif *ifp, const ip6_addr_t *addr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   169  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   170    struct mld_group *group;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   171  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   172    group = (struct mld_group *)memp_malloc(MEMP_MLD6_GROUP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   173    if (group != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   174      ip6_addr_set(&(group->group_address), addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   175      group->timer              = 0; /* Not running */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   176      group->group_state        = MLD6_GROUP_IDLE_MEMBER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   177      group->last_reporter_flag = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   178      group->use                = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   179      group->next               = netif_mld6_data(ifp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   180  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   181      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_MLD6, group);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   182    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   183  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   184    return group;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   185  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   186  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   187  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   188   * Remove a group from the mld_group_list, but do not free it yet
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   189   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   190   * @param group the group to remove
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   191   * @return ERR_OK if group was removed from the list, an err_t otherwise
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   192   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   193  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   194  mld6_remove_group(struct netif *netif, struct mld_group *group)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   195  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   196    err_t err = ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   197  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   198    /* Is it the first group? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   199    if (netif_mld6_data(netif) == group) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   200      netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_MLD6, group->next);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   201    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   202      /* look for group further down the list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   203      struct mld_group *tmpGroup;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   204      for (tmpGroup = netif_mld6_data(netif); tmpGroup != NULL; tmpGroup = tmpGroup->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   205        if (tmpGroup->next == group) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   206          tmpGroup->next = group->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   207          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   208        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   209      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   210      /* Group not find group */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   211      if (tmpGroup == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   212        err = ERR_ARG;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   213      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   214    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   215  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   216    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   217  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   218  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   219  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   220  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   221   * Process an input MLD message. Called by icmp6_input.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   222   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   223   * @param p the mld packet, p->payload pointing to the icmpv6 header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   224   * @param inp the netif on which this packet was received
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   225   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   226  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   227  mld6_input(struct pbuf *p, struct netif *inp)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   228  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   229    struct mld_header *mld_hdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   230    struct mld_group *group;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   231  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   232    MLD6_STATS_INC(mld6.recv);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   233  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   234    /* Check that mld header fits in packet. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   235    if (p->len < sizeof(struct mld_header)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   236      /* @todo debug message */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   237      pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   238      MLD6_STATS_INC(mld6.lenerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   239      MLD6_STATS_INC(mld6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   240      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   241    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   242  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   243    mld_hdr = (struct mld_header *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   244  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   245    switch (mld_hdr->type) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   246    case ICMP6_TYPE_MLQ: /* Multicast listener query. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   247      /* Is it a general query? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   248      if (ip6_addr_isallnodes_linklocal(ip6_current_dest_addr()) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   249          ip6_addr_isany(&(mld_hdr->multicast_address))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   250        MLD6_STATS_INC(mld6.rx_general);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   251        /* Report all groups, except all nodes group, and if-local groups. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   252        group = netif_mld6_data(inp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   253        while (group != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   254          if ((!(ip6_addr_ismulticast_iflocal(&(group->group_address)))) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   255              (!(ip6_addr_isallnodes_linklocal(&(group->group_address))))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   256            mld6_delayed_report(group, mld_hdr->max_resp_delay);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   257          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   258          group = group->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   259        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   260      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   261        /* Have we joined this group?
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   262         * We use IP6 destination address to have a memory aligned copy.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   263         * mld_hdr->multicast_address should be the same. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   264        MLD6_STATS_INC(mld6.rx_group);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   265        group = mld6_lookfor_group(inp, ip6_current_dest_addr());
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   266        if (group != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   267          /* Schedule a report. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   268          mld6_delayed_report(group, mld_hdr->max_resp_delay);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   269        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   270      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   271      break; /* ICMP6_TYPE_MLQ */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   272    case ICMP6_TYPE_MLR: /* Multicast listener report. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   273      /* Have we joined this group?
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   274       * We use IP6 destination address to have a memory aligned copy.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   275       * mld_hdr->multicast_address should be the same. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   276      MLD6_STATS_INC(mld6.rx_report);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   277      group = mld6_lookfor_group(inp, ip6_current_dest_addr());
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   278      if (group != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   279        /* If we are waiting to report, cancel it. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   280        if (group->group_state == MLD6_GROUP_DELAYING_MEMBER) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   281          group->timer = 0; /* stopped */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   282          group->group_state = MLD6_GROUP_IDLE_MEMBER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   283          group->last_reporter_flag = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   284        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   285      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   286      break; /* ICMP6_TYPE_MLR */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   287    case ICMP6_TYPE_MLD: /* Multicast listener done. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   288      /* Do nothing, router will query us. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   289      break; /* ICMP6_TYPE_MLD */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   290    default:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   291      MLD6_STATS_INC(mld6.proterr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   292      MLD6_STATS_INC(mld6.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   293      break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   294    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   295  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   296    pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   297  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   298  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   299  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   300   * @ingroup mld6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   301   * Join a group on one or all network interfaces.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   302   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   303   * If the group is to be joined on all interfaces, the given group address must
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   304   * not have a zone set (i.e., it must have its zone index set to IP6_NO_ZONE).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   305   * If the group is to be joined on one particular interface, the given group
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   306   * address may or may not have a zone set.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   307   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   308   * @param srcaddr ipv6 address (zoned) of the network interface which should
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   309   *                join a new group. If IP6_ADDR_ANY6, join on all netifs
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   310   * @param groupaddr the ipv6 address of the group to join (possibly but not
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   311   *                  necessarily zoned)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   312   * @return ERR_OK if group was joined on the netif(s), an err_t otherwise
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   313   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   314  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   315  mld6_joingroup(const ip6_addr_t *srcaddr, const ip6_addr_t *groupaddr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   316  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   317    err_t         err = ERR_VAL; /* no matching interface */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   318    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   319  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   320    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   321  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   322    /* loop through netif's */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   323    NETIF_FOREACH(netif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   324      /* Should we join this interface ? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   325      if (ip6_addr_isany(srcaddr) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   326          netif_get_ip6_addr_match(netif, srcaddr) >= 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   327        err = mld6_joingroup_netif(netif, groupaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   328        if (err != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   329          return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   330        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   331      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   332    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   333  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   334    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   335  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   336  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   337  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   338   * @ingroup mld6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   339   * Join a group on a network interface.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   340   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   341   * @param netif the network interface which should join a new group.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   342   * @param groupaddr the ipv6 address of the group to join (possibly but not
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   343   *                  necessarily zoned)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   344   * @return ERR_OK if group was joined on the netif, an err_t otherwise
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   345   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   346  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   347  mld6_joingroup_netif(struct netif *netif, const ip6_addr_t *groupaddr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   348  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   349    struct mld_group *group;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   350  #if LWIP_IPV6_SCOPES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   351    ip6_addr_t ip6addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   352  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   353    /* If the address has a particular scope but no zone set, use the netif to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   354     * set one now. Within the mld6 module, all addresses are properly zoned. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   355    if (ip6_addr_lacks_zone(groupaddr, IP6_MULTICAST)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   356      ip6_addr_set(&ip6addr, groupaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   357      ip6_addr_assign_zone(&ip6addr, IP6_MULTICAST, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   358      groupaddr = &ip6addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   359    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   360    IP6_ADDR_ZONECHECK_NETIF(groupaddr, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   361  #endif /* LWIP_IPV6_SCOPES */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   362  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   363    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   364  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   365    /* find group or create a new one if not found */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   366    group = mld6_lookfor_group(netif, groupaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   367  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   368    if (group == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   369      /* Joining a new group. Create a new group entry. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   370      group = mld6_new_group(netif, groupaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   371      if (group == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   372        return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   373      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   374  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   375      /* Activate this address on the MAC layer. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   376      if (netif->mld_mac_filter != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   377        netif->mld_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   378      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   379  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   380      /* Report our membership. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   381      MLD6_STATS_INC(mld6.tx_report);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   382      mld6_send(netif, group, ICMP6_TYPE_MLR);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   383      mld6_delayed_report(group, MLD6_JOIN_DELAYING_MEMBER_TMR_MS);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   384    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   385  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   386    /* Increment group use */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   387    group->use++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   388    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   389  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   390  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   391  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   392   * @ingroup mld6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   393   * Leave a group on a network interface.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   394   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   395   * Zoning of address follows the same rules as @ref mld6_joingroup.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   396   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   397   * @param srcaddr ipv6 address (zoned) of the network interface which should
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   398   *                leave the group. If IP6_ADDR_ANY6, leave on all netifs
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   399   * @param groupaddr the ipv6 address of the group to leave (possibly, but not
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   400   *                  necessarily zoned)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   401   * @return ERR_OK if group was left on the netif(s), an err_t otherwise
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   402   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   403  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   404  mld6_leavegroup(const ip6_addr_t *srcaddr, const ip6_addr_t *groupaddr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   405  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   406    err_t         err = ERR_VAL; /* no matching interface */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   407    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   408  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   409    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   410  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   411    /* loop through netif's */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   412    NETIF_FOREACH(netif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   413      /* Should we leave this interface ? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   414      if (ip6_addr_isany(srcaddr) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   415          netif_get_ip6_addr_match(netif, srcaddr) >= 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   416        err_t res = mld6_leavegroup_netif(netif, groupaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   417        if (err != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   418          /* Store this result if we have not yet gotten a success */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   419          err = res;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   420        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   421      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   422    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   423  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   424    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   425  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   426  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   427  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   428   * @ingroup mld6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   429   * Leave a group on a network interface.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   430   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   431   * @param netif the network interface which should leave the group.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   432   * @param groupaddr the ipv6 address of the group to leave (possibly, but not
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   433   *                  necessarily zoned)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   434   * @return ERR_OK if group was left on the netif, an err_t otherwise
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   435   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   436  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   437  mld6_leavegroup_netif(struct netif *netif, const ip6_addr_t *groupaddr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   438  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   439    struct mld_group *group;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   440  #if LWIP_IPV6_SCOPES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   441    ip6_addr_t ip6addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   442  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   443    if (ip6_addr_lacks_zone(groupaddr, IP6_MULTICAST)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   444      ip6_addr_set(&ip6addr, groupaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   445      ip6_addr_assign_zone(&ip6addr, IP6_MULTICAST, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   446      groupaddr = &ip6addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   447    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   448    IP6_ADDR_ZONECHECK_NETIF(groupaddr, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   449  #endif /* LWIP_IPV6_SCOPES */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   450  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   451    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   452  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   453    /* find group */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   454    group = mld6_lookfor_group(netif, groupaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   455  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   456    if (group != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   457      /* Leave if there is no other use of the group */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   458      if (group->use <= 1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   459        /* Remove the group from the list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   460        mld6_remove_group(netif, group);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   461  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   462        /* If we are the last reporter for this group */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   463        if (group->last_reporter_flag) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   464          MLD6_STATS_INC(mld6.tx_leave);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   465          mld6_send(netif, group, ICMP6_TYPE_MLD);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   466        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   467  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   468        /* Disable the group at the MAC level */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   469        if (netif->mld_mac_filter != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   470          netif->mld_mac_filter(netif, groupaddr, NETIF_DEL_MAC_FILTER);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   471        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   472  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   473        /* free group struct */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   474        memp_free(MEMP_MLD6_GROUP, group);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   475      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   476        /* Decrement group use */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   477        group->use--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   478      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   479  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   480      /* Left group */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   481      return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   482    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   483  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   484    /* Group not found */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   485    return ERR_VAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   486  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   487  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   488  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   489  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   490   * Periodic timer for mld processing. Must be called every
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   491   * MLD6_TMR_INTERVAL milliseconds (100).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   492   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   493   * When a delaying member expires, a membership report is sent.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   494   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   495  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   496  mld6_tmr(void)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   497  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   498    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   499  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   500    NETIF_FOREACH(netif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   501      struct mld_group *group = netif_mld6_data(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   502  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   503      while (group != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   504        if (group->timer > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   505          group->timer--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   506          if (group->timer == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   507            /* If the state is MLD6_GROUP_DELAYING_MEMBER then we send a report for this group */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   508            if (group->group_state == MLD6_GROUP_DELAYING_MEMBER) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   509              MLD6_STATS_INC(mld6.tx_report);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   510              mld6_send(netif, group, ICMP6_TYPE_MLR);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   511              group->group_state = MLD6_GROUP_IDLE_MEMBER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   512            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   513          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   514        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   515        group = group->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   516      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   517    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   518  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   519  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   520  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   521   * Schedule a delayed membership report for a group
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   522   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   523   * @param group the mld_group for which "delaying" membership report
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   524   *              should be sent
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   525   * @param maxresp_in the max resp delay provided in the query
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   526   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   527  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   528  mld6_delayed_report(struct mld_group *group, u16_t maxresp_in)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   529  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   530    /* Convert maxresp from milliseconds to tmr ticks */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   531    u16_t maxresp = maxresp_in / MLD6_TMR_INTERVAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   532    if (maxresp == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   533      maxresp = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   534    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   535  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   536  #ifdef LWIP_RAND
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   537    /* Randomize maxresp. (if LWIP_RAND is supported) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   538    maxresp = (u16_t)(LWIP_RAND() % maxresp);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   539    if (maxresp == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   540      maxresp = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   541    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   542  #endif /* LWIP_RAND */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   543  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   544    /* Apply timer value if no report has been scheduled already. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   545    if ((group->group_state == MLD6_GROUP_IDLE_MEMBER) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   546       ((group->group_state == MLD6_GROUP_DELAYING_MEMBER) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   547        ((group->timer == 0) || (maxresp < group->timer)))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   548      group->timer = maxresp;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   549      group->group_state = MLD6_GROUP_DELAYING_MEMBER;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   550    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   551  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   552  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   553  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   554   * Send a MLD message (report or done).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   555   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   556   * An IPv6 hop-by-hop options header with a router alert option
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   557   * is prepended.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   558   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   559   * @param group the group to report or quit
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   560   * @param type ICMP6_TYPE_MLR (report) or ICMP6_TYPE_MLD (done)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   561   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   562  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   563  mld6_send(struct netif *netif, struct mld_group *group, u8_t type)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   564  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   565    struct mld_header *mld_hdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   566    struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   567    const ip6_addr_t *src_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   568  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   569    /* Allocate a packet. Size is MLD header + IPv6 Hop-by-hop options header. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   570    p = pbuf_alloc(PBUF_IP, sizeof(struct mld_header) + MLD6_HBH_HLEN, PBUF_RAM);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   571    if (p == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   572      MLD6_STATS_INC(mld6.memerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   573      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   574    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   575  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   576    /* Move to make room for Hop-by-hop options header. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   577    if (pbuf_remove_header(p, MLD6_HBH_HLEN)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   578      pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   579      MLD6_STATS_INC(mld6.lenerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   580      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   581    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   582  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   583    /* Select our source address. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   584    if (!ip6_addr_isvalid(netif_ip6_addr_state(netif, 0))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   585      /* This is a special case, when we are performing duplicate address detection.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   586       * We must join the multicast group, but we don't have a valid address yet. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   587      src_addr = IP6_ADDR_ANY6;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   588    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   589      /* Use link-local address as source address. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   590      src_addr = netif_ip6_addr(netif, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   591    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   592  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   593    /* MLD message header pointer. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   594    mld_hdr = (struct mld_header *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   595  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   596    /* Set fields. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   597    mld_hdr->type = type;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   598    mld_hdr->code = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   599    mld_hdr->chksum = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   600    mld_hdr->max_resp_delay = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   601    mld_hdr->reserved = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   602    ip6_addr_copy_to_packed(mld_hdr->multicast_address, group->group_address);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   603  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   604  #if CHECKSUM_GEN_ICMP6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   605    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP6) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   606      mld_hdr->chksum = ip6_chksum_pseudo(p, IP6_NEXTH_ICMP6, p->len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   607        src_addr, &(group->group_address));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   608    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   609  #endif /* CHECKSUM_GEN_ICMP6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   610  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   611    /* Add hop-by-hop headers options: router alert with MLD value. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   612    ip6_options_add_hbh_ra(p, IP6_NEXTH_ICMP6, IP6_ROUTER_ALERT_VALUE_MLD);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   613  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   614    if (type == ICMP6_TYPE_MLR) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   615      /* Remember we were the last to report */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   616      group->last_reporter_flag = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   617    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   618  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   619    /* Send the packet out. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   620    MLD6_STATS_INC(mld6.xmit);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   621    ip6_output_if(p, (ip6_addr_isany(src_addr)) ? NULL : src_addr, &(group->group_address),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   622        MLD6_HL, 0, IP6_NEXTH_HOPBYHOP, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   623    pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   624  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   625  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\ipv6\mld6.c	   626  #endif /* LWIP_IPV6 */

	; Module end
