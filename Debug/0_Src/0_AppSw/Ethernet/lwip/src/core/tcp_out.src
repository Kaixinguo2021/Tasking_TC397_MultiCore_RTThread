	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\.tcp_out.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Rtl8211f -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.src ..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c'

	
$TC162
	
	.sdecl	'.text.tcp_out.tcp_route',code,cluster('tcp_route')
	.sect	'.text.tcp_out.tcp_route'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	     1  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	     2   * @file
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	     3   * Transmission Control Protocol, outgoing traffic
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	     4   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	     5   * The output functions of TCP.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	     6   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	     7   * There are two distinct ways for TCP segments to get sent:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	     8   * - queued data: these are segments transferring data or segments containing
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	     9   *   SYN or FIN (which both count as one sequence number). They are created as
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    10   *   struct @ref pbuf together with a struct tcp_seg and enqueue to the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    11   *   unsent list of the pcb. They are sent by tcp_output:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    12   *   - @ref tcp_write : creates data segments
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    13   *   - @ref tcp_split_unsent_seg : splits a data segment
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    14   *   - @ref tcp_enqueue_flags : creates SYN-only or FIN-only segments
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    15   *   - @ref tcp_output / tcp_output_segment : finalize the tcp header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    16   *      (e.g. sequence numbers, options, checksum) and output to IP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    17   *   - the various tcp_rexmit functions shuffle around segments between the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    18   *     unsent an unacked lists to retransmit them
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    19   *   - tcp_create_segment and tcp_pbuf_prealloc allocate pbuf and
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    20   *     segment for these functions
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    21   * - direct send: these segments don't contain data but control the connection
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    22   *   behaviour. They are created as pbuf only and sent directly without
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    23   *   enqueueing them:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    24   *   - @ref tcp_send_empty_ack sends an ACK-only segment
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    25   *   - @ref tcp_rst sends a RST segment
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    26   *   - @ref tcp_keepalive sends a keepalive segment
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    27   *   - @ref tcp_zero_window_probe sends a window probe segment
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    28   *   - tcp_output_alloc_header allocates a header-only pbuf for these functions
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    29   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    30  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    31  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    32   * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    33   * All rights reserved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    34   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    35   * Redistribution and use in source and binary forms, with or without modification,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    36   * are permitted provided that the following conditions are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    37   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    38   * 1. Redistributions of source code must retain the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    39   *    this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    40   * 2. Redistributions in binary form must reproduce the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    41   *    this list of conditions and the following disclaimer in the documentation
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    42   *    and/or other materials provided with the distribution.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    43   * 3. The name of the author may not be used to endorse or promote products
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    44   *    derived from this software without specific prior written permission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    45   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    46   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    47   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    48   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    49   * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    50   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    51   * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    52   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    53   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    54   * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    55   * OF SUCH DAMAGE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    56   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    57   * This file is part of the lwIP TCP/IP stack.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    58   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    59   * Author: Adam Dunkels <adam@sics.se>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    60   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    61   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    62  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    63  #include "lwip/opt.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    64  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    65  #if LWIP_TCP /* don't build if not configured for use in lwipopts.h */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    66  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    67  #include "lwip/priv/tcp_priv.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    68  #include "lwip/def.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    69  #include "lwip/mem.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    70  #include "lwip/memp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    71  #include "lwip/ip_addr.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    72  #include "lwip/netif.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    73  #include "lwip/inet_chksum.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    74  #include "lwip/stats.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    75  #include "lwip/ip6.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    76  #include "lwip/ip6_addr.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    77  #if LWIP_TCP_TIMESTAMPS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    78  #include "lwip/sys.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    79  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    80  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    81  #include <string.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    82  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    83  #ifdef LWIP_HOOK_FILENAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    84  #include LWIP_HOOK_FILENAME
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    85  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    86  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    87  /* Allow to add custom TCP header options by defining this hook */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    88  #ifdef LWIP_HOOK_TCP_OUT_TCPOPT_LENGTH
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    89  #define LWIP_TCP_OPT_LENGTH_SEGMENT(flags, pcb) LWIP_HOOK_TCP_OUT_TCPOPT_LENGTH(pcb, LWIP_TCP_OPT_LENGTH(flags))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    90  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    91  #define LWIP_TCP_OPT_LENGTH_SEGMENT(flags, pcb) LWIP_TCP_OPT_LENGTH(flags)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    92  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    93  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    94  /* Define some copy-macros for checksum-on-copy so that the code looks
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    95     nicer by preventing too many ifdef's. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    96  #if TCP_CHECKSUM_ON_COPY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    97  #define TCP_DATA_COPY(dst, src, len, seg) do { \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    98    tcp_seg_add_chksum(LWIP_CHKSUM_COPY(dst, src, len), \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	    99                       len, &seg->chksum, &seg->chksum_swapped); \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   100    seg->flags |= TF_SEG_DATA_CHECKSUMMED; } while(0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   101  #define TCP_DATA_COPY2(dst, src, len, chksum, chksum_swapped)  \ 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   102    tcp_seg_add_chksum(LWIP_CHKSUM_COPY(dst, src, len), len, chksum, chksum_swapped);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   103  #else /* TCP_CHECKSUM_ON_COPY*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   104  #define TCP_DATA_COPY(dst, src, len, seg)                     MEMCPY(dst, src, len)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   105  #define TCP_DATA_COPY2(dst, src, len, chksum, chksum_swapped) MEMCPY(dst, src, len)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   106  #endif /* TCP_CHECKSUM_ON_COPY*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   107  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   108  /** Define this to 1 for an extra check that the output checksum is valid
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   109   * (usefule when the checksum is generated by the application, not the stack) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   110  #ifndef TCP_CHECKSUM_ON_COPY_SANITY_CHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   111  #define TCP_CHECKSUM_ON_COPY_SANITY_CHECK   0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   112  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   113  /* Allow to override the failure of sanity check from warning to e.g. hard failure */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   114  #if TCP_CHECKSUM_ON_COPY_SANITY_CHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   115  #ifndef TCP_CHECKSUM_ON_COPY_SANITY_CHECK_FAIL
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   116  #define TCP_CHECKSUM_ON_COPY_SANITY_CHECK_FAIL(msg) LWIP_DEBUGF(TCP_DEBUG | LWIP_DBG_LEVEL_WARNING, msg)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   117  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   118  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   119  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   120  #if TCP_OVERSIZE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   121  /** The size of segment pbufs created when TCP_OVERSIZE is enabled */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   122  #ifndef TCP_OVERSIZE_CALC_LENGTH
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   123  #define TCP_OVERSIZE_CALC_LENGTH(length) ((length) + TCP_OVERSIZE)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   124  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   125  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   126  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   127  /* Forward declarations.*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   128  static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   129  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   130  /* tcp_route: common code that returns a fixed bound netif or calls ip_route */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   131  static struct netif *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   132  tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
; Function tcp_route
.L279:
tcp_route:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   133  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   134    LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   135  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   136    if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
	jz.a	a4,.L2
.L1618:
	ld.bu	d4,[a4]8
.L1619:
	jeq	d4,#0,.L3
.L1620:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   137      return netif_get_by_index(pcb->netif_idx);
	j	netif_get_by_index
.L3:
.L2:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   138    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   139      return ip_route(src, dst);
	mov.aa	a4,a6
.L722:
	j	ip4_route
.L656:
	
__tcp_route_function_end:
	.size	tcp_route,__tcp_route_function_end-tcp_route
.L429:
	; End of function
	
	.sdecl	'.text.tcp_out.tcp_create_segment',code,cluster('tcp_create_segment')
	.sect	'.text.tcp_out.tcp_create_segment'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   140    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   141  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   142  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   143  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   144   * Create a TCP segment with prefilled header.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   145   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   146   * Called by @ref tcp_write, @ref tcp_enqueue_flags and @ref tcp_split_unsent_seg
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   147   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   148   * @param pcb Protocol control block for the TCP connection.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   149   * @param p pbuf that is used to hold the TCP header.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   150   * @param hdrflags TCP flags for header.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   151   * @param seqno TCP sequence number of this packet
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   152   * @param optflags options to include in TCP header
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   153   * @return a new tcp_seg pointing to p, or NULL.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   154   * The TCP header is filled in except ackno and wnd.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   155   * p is freed on failure.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   156   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   157  static struct tcp_seg *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   158  tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
; Function tcp_create_segment
.L281:
tcp_create_segment:	.type	func
	mov	d15,d6
	sub.a	a10,#16
.L723:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   159  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   160    struct tcp_seg *seg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   161    u8_t optlen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   162  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   163    LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   164    LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   165  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   166    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
	and	d0,d15,#1
	mov.aa	a12,a4
.L726:
	ne	d8,d0,#0
	mov.aa	a13,a5
.L728:
	mov	d9,d4
.L729:
	mov	d10,d5
.L730:
	sha	d8,#2
.L1625:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   167  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   168    if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
	mov	d4,#3
	call	memp_malloc
.L724:
	mov.aa	a15,a2
.L732:
	jnz.a	a15,.L6
.L1626:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   169      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   170      pbuf_free(p);
	mov.aa	a4,a13
.L733:
	call	pbuf_free
.L731:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   171      return NULL;
	j	.L7
.L6:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   172    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   173    seg->flags = optflags;
	st.b	[a15]12,d15
.L1627:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   174    seg->next = NULL;
	mov.a	a2,#0
.L734:
	st.a	[a15],a2
.L1628:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   175    seg->p = p;
	st.a	[a15]4,a13
.L1629:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   176    LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
	ld.hu	d15,[a13]8
.L725:
	jge.u	d15,d8,.L8
	movh.a	a2,#@his(.6.str)
	lea	a2,[a2]@los(.6.str)
	st.a	[a10],a2
	mov	d15,#176
	st.w	[a10]4,d15
.L727:
	fcall	.cocofun_110
.L735:
	st.a	[a10]8,a2
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L8:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   177    seg->len = p->tot_len - optlen;
	ld.hu	d15,[a13]8
.L1630:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   178  #if TCP_OVERSIZE_DBGCHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   179    seg->oversize_left = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   180  #endif /* TCP_OVERSIZE_DBGCHECK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   181  #if TCP_CHECKSUM_ON_COPY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   182    seg->chksum = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   183    seg->chksum_swapped = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   184    /* check optflags */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   185    LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   186                (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   187  #endif /* TCP_CHECKSUM_ON_COPY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   188  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   189    /* build TCP header */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   190    if (pbuf_add_header(p, TCP_HLEN)) {
	mov	d4,#20
	mov.aa	a4,a13
.L739:
	sub	d15,d8
	st.h	[a15]8,d15
.L1631:
	mov	d15,#0
	st.h	[a15]10,d15
.L1632:
	call	pbuf_add_header
.L740:
	jeq	d2,#0,.L9
.L1633:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   191      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   192      TCP_STATS_INC(tcp.err);
	movh.a	a2,#@his(lwip_stats+164)
	ld.hu	d15,[a2]@los(lwip_stats+164)
.L1634:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   193      tcp_seg_free(seg);
	mov.aa	a4,a15
.L741:
	add	d15,#1
	st.h	[a2]@los(lwip_stats+164),d15
.L1635:
	call	tcp_seg_free

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   194      return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   195    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   196    seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   197    seg->tcphdr->src = lwip_htons(pcb->local_port);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   198    seg->tcphdr->dest = lwip_htons(pcb->remote_port);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   199    seg->tcphdr->seqno = lwip_htonl(seqno);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   200    /* ackno is set in tcp_output */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   201    TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   202    /* wnd and chksum are set in tcp_output */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   203    seg->tcphdr->urgp = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   204    return seg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   205  }
.L7:
	mov.a	a2,#0
.L1636:
	ret
.L9:
	ld.a	a2,[a15]4
.L1637:
	ld.a	a13,[a2]4
.L737:
	st.a	[a15]16,a13
.L1638:
	ld.hu	d4,[a12]22
	call	lwip_htons
.L1639:
	st.h	[a13],d2
.L1640:
	ld.a	a13,[a15]16
.L1641:
	ld.hu	d4,[a12]24
	call	lwip_htons
.L1642:
	st.h	[a13]2,d2
.L1643:
	mov	d4,d10
.L742:
	ld.a	a12,[a15]16
.L738:
	call	lwip_htonl
.L743:
	sha	d8,#-2
	st.w	[a12]4,d2
.L736:
	sha	d15,d8,#12
	ld.a	a12,[a15]16
	addi	d4,d15,#20480
	or	d4,d9
	call	lwip_htons
	st.h	[a12]12,d2
.L1644:
	ld.a	a2,[a15]16
.L1645:
	mov	d15,#0
.L1646:
	st.h	[a2]18,d15
.L1647:
	mov.aa	a2,a15
.L744:
	ret
.L660:
	
__tcp_create_segment_function_end:
	.size	tcp_create_segment,__tcp_create_segment_function_end-tcp_create_segment
.L434:
	; End of function
	
	.sdecl	'.text.tcp_out..cocofun_110',code,cluster('.cocofun_110')
	.sect	'.text.tcp_out..cocofun_110'
	.align	2
; Function .cocofun_110
.L283:
.cocofun_110:	.type	func
; Function body .cocofun_110, coco_iter:0
	movh.a	a2,#@his(.3.str)
	lea	a2,[a2]@los(.3.str)
.L1746:
	fret
.L489:
	; End of function
	.sdecl	'.text.tcp_out.tcp_pbuf_prealloc',code,cluster('tcp_pbuf_prealloc')
	.sect	'.text.tcp_out.tcp_pbuf_prealloc'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   206  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   207  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   208   * Allocate a PBUF_RAM pbuf, perhaps with extra space at the end.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   209   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   210   * This function is like pbuf_alloc(layer, length, PBUF_RAM) except
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   211   * there may be extra bytes available at the end.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   212   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   213   * Called by @ref tcp_write
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   214   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   215   * @param layer flag to define header size.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   216   * @param length size of the pbuf's payload.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   217   * @param max_length maximum usable size of payload+oversize.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   218   * @param oversize pointer to a u16_t that will receive the number of usable tail bytes.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   219   * @param pcb The TCP connection that will enqueue the pbuf.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   220   * @param apiflags API flags given to tcp_write.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   221   * @param first_seg true when this pbuf will be used in the first enqueued segment.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   222   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   223  #if TCP_OVERSIZE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   224  static struct pbuf *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   225  tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
; Function tcp_pbuf_prealloc
.L285:
tcp_pbuf_prealloc:	.type	func
	sub.a	a10,#16
.L745:
	mov	d8,d5
	mov.aa	a12,a4
.L748:
	ld.bu	d15,[a10]16
.L749:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   226                    u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   227                    u8_t first_seg)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   228  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   229    struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   230    u16_t alloc = length;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   231  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   232    LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   233    LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   234  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   235  #if LWIP_NETIF_TX_SINGLE_PBUF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   236    LWIP_UNUSED_ARG(max_length);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   237    LWIP_UNUSED_ARG(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   238    LWIP_UNUSED_ARG(apiflags);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   239    LWIP_UNUSED_ARG(first_seg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   240    alloc = max_length;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   241  #else /* LWIP_NETIF_TX_SINGLE_PBUF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   242    if (length < max_length) {
	jge.u	d8,d6,.L12
.L1652:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   243      /* Should we allocate an oversized pbuf, or just the minimum
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   244       * length required? If tcp_write is going to be called again
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   245       * before this segment is transmitted, we want the oversized
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   246       * buffer. If the segment will be transmitted immediately, we can
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   247       * save memory by allocating only length. We use a simple
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   248       * heuristic based on the following information:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   249       *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   250       * Did the user set TCP_WRITE_FLAG_MORE?
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   251       *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   252       * Will the Nagle algorithm defer transmission of this segment?
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   253       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   254      if ((apiflags & TCP_WRITE_FLAG_MORE) ||
	jnz.t	d7:1,.L13
.L1653:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   255          (!(pcb->flags & TF_NODELAY) &&
	ld.hu	d0,[a5]26
.L1654:
	jnz.t	d0:6,.L14
.L1655:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   256           (!first_seg ||
	jeq	d15,#0,.L15
.L1656:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   257            pcb->unsent != NULL ||
	ld.w	d15,[a5]108
.L750:
	jne	d15,#0,.L16
.L1657:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   258            pcb->unacked != NULL))) {
	ld.w	d15,[a5]112
.L1658:
	jeq	d15,#0,.L17
.L16:
.L15:
.L13:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   259        alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
	addi	d0,d8,#1464
	add	d0,#-1
	insert	d0,d0,#0,#0,#2
	min.u	d5,d6,d0
.L17:
.L14:
.L12:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   260      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   261    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   262  #endif /* LWIP_NETIF_TX_SINGLE_PBUF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   263    p = pbuf_alloc(layer, alloc, PBUF_RAM);
	mov	d6,#640
	call	pbuf_alloc
.L746:
	mov.aa	a15,a2
.L752:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   264    if (p == NULL) {
	jnz.a	a15,.L18
.L1659:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   265      return NULL;
	mov.a	a2,#0
.L751:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   266    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   267    LWIP_ASSERT("need unchained pbuf", p->next == NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   268    *oversize = p->len - length;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   269    /* trim p->len to the currently used size */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   270    p->len = p->tot_len = length;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   271    return p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   272  }
	ret
.L18:
	ld.w	d15,[a15]
	jeq	d15,#0,.L20
	movh.a	a2,#@his(.10.str)
.L753:
	lea	a2,[a2]@los(.10.str)
	st.a	[a10],a2
	mov	d15,#267
	st.w	[a10]4,d15
.L747:
	fcall	.cocofun_110
.L754:
	st.a	[a10]8,a2
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L20:
	ld.hu	d15,[a15]10
.L1660:
	mov.aa	a2,a15
.L755:
	sub	d15,d8
	st.h	[a12],d15
.L1661:
	st.h	[a15]8,d8
.L1662:
	st.h	[a15]10,d8
.L1663:
	ret
.L669:
	
__tcp_pbuf_prealloc_function_end:
	.size	tcp_pbuf_prealloc,__tcp_pbuf_prealloc_function_end-tcp_pbuf_prealloc
.L439:
	; End of function
	
	.sdecl	'.text.tcp_out.tcp_write_checks',code,cluster('tcp_write_checks')
	.sect	'.text.tcp_out.tcp_write_checks'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   273  #else /* TCP_OVERSIZE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   274  #define tcp_pbuf_prealloc(layer, length, mx, os, pcb, api, fst) pbuf_alloc((layer), (length), PBUF_RAM)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   275  #endif /* TCP_OVERSIZE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   276  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   277  #if TCP_CHECKSUM_ON_COPY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   278  /** Add a checksum of newly added data to the segment.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   279   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   280   * Called by tcp_write and tcp_split_unsent_seg.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   281   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   282  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   283  tcp_seg_add_chksum(u16_t chksum, u16_t len, u16_t *seg_chksum,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   284                     u8_t *seg_chksum_swapped)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   285  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   286    u32_t helper;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   287    /* add chksum to old chksum and fold to u16_t */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   288    helper = chksum + *seg_chksum;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   289    chksum = FOLD_U32T(helper);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   290    if ((len & 1) != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   291      *seg_chksum_swapped = 1 - *seg_chksum_swapped;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   292      chksum = SWAP_BYTES_IN_WORD(chksum);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   293    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   294    *seg_chksum = chksum;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   295  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   296  #endif /* TCP_CHECKSUM_ON_COPY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   297  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   298  /** Checks if tcp_write is allowed or not (checks state, snd_buf and snd_queuelen).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   299   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   300   * @param pcb the tcp pcb to check for
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   301   * @param len length of data to send (checked agains snd_buf)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   302   * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   303   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   304  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   305  tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
; Function tcp_write_checks
.L287:
tcp_write_checks:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   306  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   307    LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   308  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   309    /* connection is in invalid state for data transmission? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   310    if ((pcb->state != ESTABLISHED) &&
	ld.bu	d15,[a4]20
.L1668:
	sub.a	a10,#16
.L756:
	jeq	d15,#4,.L22
.L1669:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   311        (pcb->state != CLOSE_WAIT) &&
	jeq	d15,#7,.L23
.L1670:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   312        (pcb->state != SYN_SENT) &&
	jeq	d15,#2,.L24
.L1671:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   313        (pcb->state != SYN_RCVD)) {
	jeq	d15,#3,.L25
.L1672:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   314      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
	movh.a	a4,#@his(.12.str)
.L758:
	lea	a4,[a4]@los(.12.str)
	call	Ifx_Lwip_printf
.L757:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   315      return ERR_CONN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   316    } else if (len == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   317      return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   318    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   319  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   320    /* fail on too much data */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   321    if (len > pcb->snd_buf) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   322      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   323                  len, pcb->snd_buf));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   324      tcp_set_flags(pcb, TF_NAGLEMEMERR);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   325      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   326    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   327  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   328    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   329  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   330    /* If total number of pbufs on the unsent/unacked queues exceeds the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   331     * configured maximum, return an error */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   332    /* check for configured max queuelen and possible overflow */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   333    if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   334      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   335                  pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   336      TCP_STATS_INC(tcp.memerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   337      tcp_set_flags(pcb, TF_NAGLEMEMERR);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   338      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   339    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   340    if (pcb->snd_queuelen != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   341      LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   342                  pcb->unacked != NULL || pcb->unsent != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   343    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   344      LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   345                  pcb->unacked == NULL && pcb->unsent == NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   346    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   347    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   348  }
	mov	d2,#-11
	ret
.L25:
.L24:
.L23:
.L22:
	jeq	d4,#0,.L27
.L1673:
	ld.hu	d15,[a4]100
.L1674:
	jlt.u	d15,d4,.L28
.L1675:
	ld.hu	d15,[a4]102
.L1676:
	jlt.u	d15,#8,.L29
.L1677:
	fcall	.cocofun_109
.L28:
	ld.hu	d15,[a4]26
.L1678:
	mov	d2,#-1
.L1679:
	or	d15,#128
	st.h	[a4]26,d15
.L1680:
	ret
.L29:
	ld.a	a15,[a4]112
.L1681:
	jeq	d15,#0,.L31
.L1682:
	jnz.a	a15,.L32
.L1683:
	ld.w	d15,[a4]108
	jne	d15,#0,.L33
	movh.a	a15,#@his(.16.str)
	lea	a15,[a15]@los(.16.str)
.L1684:
	mov	d15,#341
	j	.L34
.L31:
	jnz.a	a15,.L35
.L1685:
	ld.w	d15,[a4]108
	jeq	d15,#0,.L36
.L35:
	mov	d15,#344
	movh.a	a15,#@his(.17.str)
	lea	a15,[a15]@los(.17.str)
.L34:
	st.a	[a10],a15
	st.w	[a10]4,d15
	fcall	.cocofun_108
	st.a	[a10]8,a15
	fcall	.cocofun_107
.L760:
	call	Ifx_Lwip_printf
.L36:
.L33:
.L32:
.L27:
	mov	d2,#0
	ret
.L681:
	
__tcp_write_checks_function_end:
	.size	tcp_write_checks,__tcp_write_checks_function_end-tcp_write_checks
.L444:
	; End of function
	
	.sdecl	'.text.tcp_out..cocofun_109',code,cluster('.cocofun_109')
	.sect	'.text.tcp_out..cocofun_109'
	.align	2
; Function .cocofun_109
.L289:
.cocofun_109:	.type	func
; Function body .cocofun_109, coco_iter:0
	movh.a	a15,#@his(lwip_stats+156)
.L954:
	ld.hu	d15,[a15]@los(lwip_stats+156)
	add	d15,#1
	st.h	[a15]@los(lwip_stats+156),d15
.L759:
	fret
.L484:
	; End of function
	.sdecl	'.text.tcp_out.tcp_write',code,cluster('tcp_write')
	.sect	'.text.tcp_out.tcp_write'
	.align	2
	
	.global	tcp_write

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   349  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   350  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   351   * @ingroup tcp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   352   * Write data for sending (but does not send it immediately).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   353   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   354   * It waits in the expectation of more data being sent soon (as
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   355   * it can send them more efficiently by combining them together).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   356   * To prompt the system to send data now, call tcp_output() after
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   357   * calling tcp_write().
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   358   * 
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   359   * This function enqueues the data pointed to by the argument dataptr. The length of
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   360   * the data is passed as the len parameter. The apiflags can be one or more of:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   361   * - TCP_WRITE_FLAG_COPY: indicates whether the new memory should be allocated
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   362   *   for the data to be copied into. If this flag is not given, no new memory
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   363   *   should be allocated and the data should only be referenced by pointer. This
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   364   *   also means that the memory behind dataptr must not change until the data is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   365   *   ACKed by the remote host
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   366   * - TCP_WRITE_FLAG_MORE: indicates that more data follows. If this is omitted,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   367   *   the PSH flag is set in the last segment created by this call to tcp_write.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   368   *   If this flag is given, the PSH flag is not set.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   369   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   370   * The tcp_write() function will fail and return ERR_MEM if the length
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   371   * of the data exceeds the current send buffer size or if the length of
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   372   * the queue of outgoing segment is larger than the upper limit defined
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   373   * in lwipopts.h. The number of bytes available in the output queue can
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   374   * be retrieved with the tcp_sndbuf() function.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   375   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   376   * The proper way to use this function is to call the function with at
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   377   * most tcp_sndbuf() bytes of data. If the function returns ERR_MEM,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   378   * the application should wait until some of the currently enqueued
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   379   * data has been successfully received by the other host and try again.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   380   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   381   * @param pcb Protocol control block for the TCP connection to enqueue data for.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   382   * @param arg Pointer to the data to be enqueued for sending.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   383   * @param len Data length in bytes
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   384   * @param apiflags combination of following flags :
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   385   * - TCP_WRITE_FLAG_COPY (0x01) data will be copied into memory belonging to the stack
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   386   * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   387   * @return ERR_OK if enqueued, another err_t on error
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   388   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   389  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   390  tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
; Function tcp_write
.L291:
tcp_write:	.type	func
	sub.a	a10,#56
.L762:
	st.a	[a10]16,a5
.L772:
	st.w	[a10]36,d5
.L770:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   391  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   392    struct pbuf *concat_p = NULL;
	mov.a	a14,#0
.L774:
	st.a	[a10]28,a14
.L773:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   393    struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
	st.a	[a10]20,a14
.L780:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   394    u16_t pos = 0; /* position in 'arg' data */
	mov	d11,#0
	st.a	[a10]24,a14
.L779:
	mov	d9,d4
	mov.aa	a12,a4
.L776:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   395    u16_t queuelen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   396    u8_t optlen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   397    u8_t optflags = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   398  #if TCP_OVERSIZE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   399    u16_t oversize = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   400    u16_t oversize_used = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   401  #if TCP_OVERSIZE_DBGCHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   402    u16_t oversize_add = 0;
	mov	d10,d11
	st.w	[a10]44,d11
.L777:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   403  #endif /* TCP_OVERSIZE_DBGCHECK*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   404  #endif /* TCP_OVERSIZE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   405    u16_t extendlen = 0;
	mov	d8,d11
	st.w	[a10]40,d11
.L775:
	mov.aa	a13,a14
.L782:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   406  #if TCP_CHECKSUM_ON_COPY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   407    u16_t concat_chksum = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   408    u8_t concat_chksum_swapped = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   409    u16_t concat_chksummed = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   410  #endif /* TCP_CHECKSUM_ON_COPY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   411    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   412    u16_t mss_local;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   413  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   414    LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
	jnz.a	a12,.L38
.L1201:
	movh.a	a15,#@his(.18.str)
	lea	a15,[a15]@los(.18.str)
	mov	d15,#414
	j	.L39
.L38:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   415  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   416    /* don't allocate segments bigger than half the maximum window we ever received */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   417    mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
	ld.hu	d0,[a12]98
	ld.hu	d1,[a12]50
.L1202:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   418    mss_local = mss_local ? mss_local : pcb->mss;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   419  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   420    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   421  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   422  #if LWIP_NETIF_TX_SINGLE_PBUF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   423    /* Always copy to try to create single pbufs for TX */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   424    apiflags |= TCP_WRITE_FLAG_COPY;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   425  #endif /* LWIP_NETIF_TX_SINGLE_PBUF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   426  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   427    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   428                                   (void *)pcb, arg, len, (u16_t)apiflags));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   429    LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
	sha	d0,#-1
	ld.a	a15,[a10]16
.L763:
	min	d12,d1,d0
.L765:
	sel	d12,d12,d12,d1
.L1203:
	jnz.a	a15,.L42
.L1204:
	mov	d15,#429
	movh.a	a15,#@his(.20.str)
.L764:
	lea	a15,[a15]@los(.20.str)

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   430               arg != NULL, return ERR_ARG;);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   431  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   432    err = tcp_write_checks(pcb, len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   433    if (err != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   434      return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   435    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   436    queuelen = pcb->snd_queuelen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   437  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   438  #if LWIP_TCP_TIMESTAMPS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   439    if ((pcb->flags & TF_TIMESTAMP)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   440      /* Make sure the timestamp option is only included in data segments if we
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   441         agreed about it with the remote host. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   442      optflags = TF_SEG_OPTS_TS;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   443      optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(TF_SEG_OPTS_TS, pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   444      /* ensure that segments can hold at least one data byte... */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   445      mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   446    } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   447  #endif /* LWIP_TCP_TIMESTAMPS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   448    {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   449      optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   450    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   451  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   452  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   453    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   454     * TCP segmentation is done in three phases with increasing complexity:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   455     *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   456     * 1. Copy data directly into an oversized pbuf.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   457     * 2. Chain a new pbuf to the end of pcb->unsent.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   458     * 3. Create new segments.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   459     *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   460     * We may run out of memory at any point. In that case we must
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   461     * return ERR_MEM and not change anything in pcb. Therefore, all
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   462     * changes are recorded in local variables and committed at the end
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   463     * of the function. Some pcb fields are maintained in local copies:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   464     *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   465     * queuelen = pcb->snd_queuelen
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   466     * oversize = pcb->unsent_oversize
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   467     *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   468     * These variables are set consistently by the phases:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   469     *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   470     * seg points to the last segment tampered with.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   471     *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   472     * pos records progress as data is segmented.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   473     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   474  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   475    /* Find the tail of the unsent queue. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   476    if (pcb->unsent != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   477      u16_t space;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   478      u16_t unsent_optlen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   479  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   480      /* @todo: this could be sped up by keeping last_unsent in the pcb */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   481      for (last_unsent = pcb->unsent; last_unsent->next != NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   482           last_unsent = last_unsent->next);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   483  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   484      /* Usable space at the end of the last unsent segment */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   485      unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   486      LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   487      space = mss_local - (last_unsent->len + unsent_optlen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   488  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   489      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   490       * Phase 1: Copy data directly into an oversized pbuf.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   491       *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   492       * The number of bytes copied is recorded in the oversize_used
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   493       * variable. The actual copying is done at the bottom of the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   494       * function.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   495       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   496  #if TCP_OVERSIZE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   497  #if TCP_OVERSIZE_DBGCHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   498      /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   499      LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   500                  pcb->unsent_oversize == last_unsent->oversize_left);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   501  #endif /* TCP_OVERSIZE_DBGCHECK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   502      oversize = pcb->unsent_oversize;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   503      if (oversize > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   504        LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   505        seg = last_unsent;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   506        oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   507        pos += oversize_used;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   508        oversize -= oversize_used;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   509        space -= oversize_used;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   510      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   511      /* now we are either finished or oversize is zero */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   512      LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   513  #endif /* TCP_OVERSIZE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   514  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   515  #if !LWIP_NETIF_TX_SINGLE_PBUF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   516      /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   517       * Phase 2: Chain a new pbuf to the end of pcb->unsent.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   518       *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   519       * As an exception when NOT copying the data, if the given data buffer
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   520       * directly follows the last unsent data buffer in memory, extend the last
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   521       * ROM pbuf reference to the buffer, thus saving a ROM pbuf allocation.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   522       *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   523       * We don't extend segments containing SYN/FIN flags or options
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   524       * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   525       * the end.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   526       *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   527       * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   528       * it after rexmit puts a segment from unacked to unsent and at this point,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   529       * oversize info is lost.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   530       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   531      if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   532        u16_t seglen = LWIP_MIN(space, len - pos);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   533        seg = last_unsent;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   534  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   535        /* Create a pbuf with a copy or reference to seglen bytes. We
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   536         * can use PBUF_RAW here since the data appears in the middle of
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   537         * a segment. A header will never be prepended. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   538        if (apiflags & TCP_WRITE_FLAG_COPY) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   539          /* Data is copied */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   540          if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   541            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   542                        ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   543                         seglen));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   544            goto memerr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   545          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   546  #if TCP_OVERSIZE_DBGCHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   547          oversize_add = oversize;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   548  #endif /* TCP_OVERSIZE_DBGCHECK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   549          TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   550  #if TCP_CHECKSUM_ON_COPY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   551          concat_chksummed += seglen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   552  #endif /* TCP_CHECKSUM_ON_COPY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   553          queuelen += pbuf_clen(concat_p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   554        } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   555          /* Data is not copied */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   556          /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   557          struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   558          for (p = last_unsent->p; p->next != NULL; p = p->next);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   559          if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   560              (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   561            LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   562            extendlen = seglen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   563          } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   564            if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   565              LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   566                          ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   567              goto memerr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   568            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   569            /* reference the non-volatile payload data */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   570            ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   571            queuelen += pbuf_clen(concat_p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   572          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   573  #if TCP_CHECKSUM_ON_COPY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   574          /* calculate the checksum of nocopy-data */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   575          tcp_seg_add_chksum(~inet_chksum((const u8_t *)arg + pos, seglen), seglen,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   576                             &concat_chksum, &concat_chksum_swapped);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   577          concat_chksummed += seglen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   578  #endif /* TCP_CHECKSUM_ON_COPY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   579        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   580  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   581        pos += seglen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   582      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   583  #endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   584    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   585  #if TCP_OVERSIZE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   586      LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   587                  pcb->unsent_oversize == 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   588  #endif /* TCP_OVERSIZE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   589    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   590  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   591    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   592     * Phase 3: Create new segments.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   593     *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   594     * The new segments are chained together in the local 'queue'
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   595     * variable, ready to be appended to pcb->unsent.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   596     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   597    while (pos < len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   598      struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   599      u16_t left = len - pos;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   600      u16_t max_len = mss_local - optlen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   601      u16_t seglen = LWIP_MIN(left, max_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   602  #if TCP_CHECKSUM_ON_COPY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   603      u16_t chksum = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   604      u8_t chksum_swapped = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   605  #endif /* TCP_CHECKSUM_ON_COPY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   606  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   607      if (apiflags & TCP_WRITE_FLAG_COPY) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   608        /* If copy is set, memory should be allocated and data copied
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   609         * into pbuf */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   610        if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   611          LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   612          goto memerr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   613        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   614        LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   615                    (p->len >= seglen));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   616        TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   617      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   618        /* Copy is not set: First allocate a pbuf for holding the data.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   619         * Since the referenced data is available at least until it is
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   620         * sent out on the link (as it has to be ACKed by the remote
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   621         * party) we can safely use PBUF_ROM instead of PBUF_REF here.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   622         */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   623        struct pbuf *p2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   624  #if TCP_OVERSIZE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   625        LWIP_ASSERT("oversize == 0", oversize == 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   626  #endif /* TCP_OVERSIZE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   627        if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   628          LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   629          goto memerr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   630        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   631  #if TCP_CHECKSUM_ON_COPY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   632        /* calculate the checksum of nocopy-data */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   633        chksum = ~inet_chksum((const u8_t *)arg + pos, seglen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   634        if (seglen & 1) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   635          chksum_swapped = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   636          chksum = SWAP_BYTES_IN_WORD(chksum);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   637        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   638  #endif /* TCP_CHECKSUM_ON_COPY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   639        /* reference the non-volatile payload data */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   640        ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   641  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   642        /* Second, allocate a pbuf for the headers. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   643        if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   644          /* If allocation fails, we have to deallocate the data pbuf as
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   645           * well. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   646          pbuf_free(p2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   647          LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   648          goto memerr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   649        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   650        /* Concatenate the headers and data pbufs together. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   651        pbuf_cat(p/*header*/, p2/*data*/);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   652      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   653  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   654      queuelen += pbuf_clen(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   655  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   656      /* Now that there are more segments queued, we check again if the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   657       * length of the queue exceeds the configured maximum or
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   658       * overflows. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   659      if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   660        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   661                    queuelen, (int)TCP_SND_QUEUELEN));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   662        pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   663        goto memerr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   664      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   665  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   666      if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   667        goto memerr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   668      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   669  #if TCP_OVERSIZE_DBGCHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   670      seg->oversize_left = oversize;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   671  #endif /* TCP_OVERSIZE_DBGCHECK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   672  #if TCP_CHECKSUM_ON_COPY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   673      seg->chksum = chksum;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   674      seg->chksum_swapped = chksum_swapped;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   675      seg->flags |= TF_SEG_DATA_CHECKSUMMED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   676  #endif /* TCP_CHECKSUM_ON_COPY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   677  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   678      /* first segment of to-be-queued data? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   679      if (queue == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   680        queue = seg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   681      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   682        /* Attach the segment to the end of the queued segments */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   683        LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   684        prev_seg->next = seg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   685      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   686      /* remember last segment of to-be-queued data for next iteration */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   687      prev_seg = seg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   688  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   689      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   690                  lwip_ntohl(seg->tcphdr->seqno),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   691                  lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   692  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   693      pos += seglen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   694    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   695  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   696    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   697     * All three segmentation phases were successful. We can commit the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   698     * transaction.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   699     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   700  #if TCP_OVERSIZE_DBGCHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   701    if ((last_unsent != NULL) && (oversize_add != 0)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   702      last_unsent->oversize_left += oversize_add;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   703    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   704  #endif /* TCP_OVERSIZE_DBGCHECK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   705  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   706    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   707     * Phase 1: If data has been added to the preallocated tail of
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   708     * last_unsent, we update the length fields of the pbuf chain.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   709     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   710  #if TCP_OVERSIZE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   711    if (oversize_used > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   712      struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   713      /* Bump tot_len of whole chain, len of tail */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   714      for (p = last_unsent->p; p; p = p->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   715        p->tot_len += oversize_used;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   716        if (p->next == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   717          TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   718          p->len += oversize_used;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   719        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   720      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   721      last_unsent->len += oversize_used;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   722  #if TCP_OVERSIZE_DBGCHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   723      LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   724                  last_unsent->oversize_left >= oversize_used);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   725      last_unsent->oversize_left -= oversize_used;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   726  #endif /* TCP_OVERSIZE_DBGCHECK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   727    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   728    pcb->unsent_oversize = oversize;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   729  #endif /* TCP_OVERSIZE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   730  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   731    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   732     * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   733     * determined that the last ROM pbuf can be extended to include the new data.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   734     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   735    if (concat_p != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   736      LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   737                  (last_unsent != NULL));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   738      pbuf_cat(last_unsent->p, concat_p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   739      last_unsent->len += concat_p->tot_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   740    } else if (extendlen > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   741      struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   742      LWIP_ASSERT("tcp_write: extension of reference requires reference",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   743                  last_unsent != NULL && last_unsent->p != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   744      for (p = last_unsent->p; p->next != NULL; p = p->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   745        p->tot_len += extendlen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   746      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   747      p->tot_len += extendlen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   748      p->len += extendlen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   749      last_unsent->len += extendlen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   750    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   751  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   752  #if TCP_CHECKSUM_ON_COPY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   753    if (concat_chksummed) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   754      LWIP_ASSERT("tcp_write: concat checksum needs concatenated data",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   755                  concat_p != NULL || extendlen > 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   756      /*if concat checksumm swapped - swap it back */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   757      if (concat_chksum_swapped) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   758        concat_chksum = SWAP_BYTES_IN_WORD(concat_chksum);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   759      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   760      tcp_seg_add_chksum(concat_chksum, concat_chksummed, &last_unsent->chksum,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   761                         &last_unsent->chksum_swapped);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   762      last_unsent->flags |= TF_SEG_DATA_CHECKSUMMED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   763    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   764  #endif /* TCP_CHECKSUM_ON_COPY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   765  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   766    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   767     * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   768     * is harmless
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   769     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   770    if (last_unsent == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   771      pcb->unsent = queue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   772    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   773      last_unsent->next = queue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   774    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   775  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   776    /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   777     * Finally update the pcb state.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   778     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   779    pcb->snd_lbb += len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   780    pcb->snd_buf -= len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   781    pcb->snd_queuelen = queuelen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   782  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   783    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   784                                 pcb->snd_queuelen));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   785    if (pcb->snd_queuelen != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   786      LWIP_ASSERT("tcp_write: valid queue length",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   787                  pcb->unacked != NULL || pcb->unsent != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   788    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   789  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   790    /* Set the PSH flag in the last segment that we enqueued. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   791    if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   792      TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   793    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   794  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   795    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   796  memerr:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   797    tcp_set_flags(pcb, TF_NAGLEMEMERR);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   798    TCP_STATS_INC(tcp.memerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   799  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   800    if (concat_p != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   801      pbuf_free(concat_p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   802    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   803    if (queue != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   804      tcp_segs_free(queue);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   805    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   806    if (pcb->snd_queuelen != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   807      LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   808                  pcb->unsent != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   809    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   810    LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   811    return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   812  }
.L39:
	st.a	[a10],a15
	st.w	[a10]4,d15
	fcall	.cocofun_108
	st.a	[a10]8,a15
	fcall	.cocofun_107
.L766:
	call	Ifx_Lwip_printf
.L767:
	mov	d2,#-16
	ret
.L42:
	call	tcp_write_checks
.L768:
	jne	d2,#0,.L45
.L1205:
	ld.a	a15,[a12]108
.L769:
	ld.hu	d13,[a12]102
.L781:
	jz.a	a15,.L46
.L547:
	mov.aa	a14,a15
.L1206:
	fcall	.cocofun_114
.L1207:
	ld.bu	d15,[a14]12
.L1208:
	ld.hu	d0,[a14]8
.L1209:
	and	d15,#1
	ne	d10,d15,#0
.L778:
	cadd	d0,d15,#4
.L783:
	sha	d10,#2
.L1210:
	jge	d12,d0,.L49
.L1211:
	movh.a	a15,#@his(.21.str)
	lea	a15,[a15]@los(.21.str)
	st.a	[a10],a15
	mov	d15,#486
	st.w	[a10]4,d15
.L771:
	fcall	.cocofun_108
.L784:
	st.a	[a10]8,a15
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L49:
	ld.hu	d15,[a14]8
.L1212:
	ld.hu	d0,[a12]104
.L1213:
	add	d15,d10
.L1214:
	sub	d15,d12,d15
.L1215:
	extr.u	d14,d15,#0,#16
	ld.hu	d15,[a14]10
.L786:
	jeq	d15,d0,.L50
	movh.a	a15,#@his(.22.str)
	lea	a15,[a15]@los(.22.str)
	st.a	[a10],a15
	mov	d15,#499
	st.w	[a10]4,d15
.L785:
	fcall	.cocofun_108
.L787:
	st.a	[a10]8,a15
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L50:
	ld.hu	d10,[a12]104
.L789:
	jeq	d10,#0,.L51
.L1216:
	jge.u	d14,d10,.L52
.L1217:
	movh.a	a15,#@his(.23.str)
	lea	a15,[a15]@los(.23.str)
	st.a	[a10],a15
	mov	d15,#504
	st.w	[a10]4,d15
.L788:
	fcall	.cocofun_108
.L790:
	st.a	[a10]8,a15
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L52:
	min.u	d15,d10,d9
	mov.aa	a13,a14
.L1218:
	min	d8,d14,d15
.L1219:
	sub	d10,d8
.L792:
	sub	d14,d8
.L793:
	mov	d11,d8
.L1220:
	extr.u	d10,d10,#0,#16
.L794:
	extr.u	d14,d14,#0,#16
.L51:
	jeq	d10,#0,.L53
.L1221:
	jeq	d11,d9,.L54
.L1222:
	movh.a	a15,#@his(.24.str)
	lea	a15,[a15]@los(.24.str)
	st.a	[a10],a15
	mov	d15,#512
	st.w	[a10]4,d15
.L791:
	fcall	.cocofun_108
.L795:
	st.a	[a10]8,a15
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L54:
.L53:
	jge.u	d11,d9,.L70
.L1223:
	jeq	d14,#0,.L70
.L1224:
	ld.hu	d15,[a14]8
.L1225:
	jeq	d15,#0,.L70
.L550:
	sub	d15,d9,d11
	min	d15,d14,d15
	extr.u	d15,d15,#0,#16
	st.w	[a10]32,d15
.L797:
	mov.aa	a13,a14
.L1226:
	ld.w	d15,[a10]36
.L798:
	jz.t	d15:0,.L58
.L1227:
	st.h	[a10]12,d10
.L1228:
	mov	d15,#1
	st.b	[a10],d15
.L799:
	mov	d4,#0
	lea	a4,[a10]12
.L1229:
	ld.w	d5,[a10]32
.L800:
	mov	d6,d14
	mov.aa	a5,a12
.L801:
	ld.w	d7,[a10]36
.L802:
	call	tcp_pbuf_prealloc
.L796:
	st.a	[a10]28,a2
.L1230:
	ld.hu	d10,[a10]12
.L1231:
	jz.a	a2,.L59
.L1232:
	st.w	[a10]44,d10
.L1233:
	mov.aa	a15,a2
.L804:
	ld.a	a4,[a15]4
	ld.a	a15,[a10]16
.L805:
	ld.w	d4,[a10]32
.L806:
	addsc.a	a5,a15,d11,#0
	call	memcpy
.L803:
	j	.L60
.L58:
	ld.a	a15,[a14]4
.L809:
	fcall	.cocofun_115
.L807:
	ld.bu	d15,[a15]12
.L1234:
	and	d15,#192
.L1235:
	jne	d15,#0,.L63
.L1236:
	ld.a	a2,[a15]4
.L1237:
	ld.hu	d15,[a15]10
.L1238:
	ld.a	a15,[a10]16
.L810:
	addsc.a	a2,a2,d15,#0
.L1239:
	jne.a	a2,a15,.L64
.L1240:
	jeq	d11,#0,.L65
.L1241:
	movh.a	a15,#@his(.26.str)
.L811:
	lea	a15,[a15]@los(.26.str)
	st.a	[a10],a15
	mov	d15,#561
	st.w	[a10]4,d15
.L808:
	fcall	.cocofun_108
.L812:
	st.a	[a10]8,a15
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L65:
	ld.w	d15,[a10]32
.L817:
	st.w	[a10]40,d15
.L1242:
	j	.L66
.L64:
.L63:
	mov	d4,#0
	ld.w	d5,[a10]32
.L818:
	mov	d6,#1
	call	pbuf_alloc
.L814:
	st.a	[a10]28,a2
.L1243:
	jz.a	a2,.L67
.L1244:
	ld.a	a15,[a10]16
.L820:
	addsc.a	a2,a15,d11,#0
.L819:
	ld.a	a15,[a10]28
.L821:
	st.a	[a15]4,a2
.L60:
	ld.a	a4,[a10]28
.L822:
	call	pbuf_clen
.L823:
	add	d13,d2
.L816:
	extr.u	d13,d13,#0,#16
.L66:
	ld.w	d15,[a10]32
.L824:
	add	d11,d15
.L815:
	extr.u	d11,d11,#0,#16
	j	.L70
.L46:
	ld.hu	d15,[a12]104
	jeq	d15,#0,.L70
	movh.a	a15,#@his(.28.str)
	lea	a15,[a15]@los(.28.str)
	st.a	[a10],a15
	mov	d15,#586
	st.w	[a10]4,d15
.L813:
	fcall	.cocofun_108
.L825:
	st.a	[a10]8,a15
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L827:
	j	.L70
.L71:
	sub	d15,d9,d11
	extr.u	d15,d15,#0,#16
.L829:
	min.u	d14,d15,d12
	ld.w	d15,[a10]36
.L830:
	jz.t	d15:0,.L72
.L1245:
	st.h	[a10]12,d10
.L1246:
	mov.a	a2,#0
.L1247:
	ld.a	a15,[a10]24
.L832:
	mov	d5,d14
	mov.aa	a5,a12
.L833:
	mov	d6,d12
	lea	a4,[a10]12
.L1248:
	eq.a	d15,a15,a2
.L831:
	st.b	[a10],d15
.L1249:
	mov	d4,#56
.L1250:
	ld.w	d7,[a10]36
.L835:
	call	tcp_pbuf_prealloc
.L834:
	mov.aa	a13,a2
.L828:
	ld.hu	d10,[a10]12
.L1251:
	jz.a	a13,.L73
.L1252:
	ld.hu	d15,[a13]10
	jge.u	d15,d14,.L74
	movh.a	a2,#@his(.29.str)
.L836:
	lea	a2,[a2]@los(.29.str)
	st.a	[a10],a2
	mov	d15,#614
	st.w	[a10]4,d15
.L826:
	fcall	.cocofun_108
.L838:
	st.a	[a10]8,a15
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L74:
	ld.a	a15,[a10]16
.L840:
	mov	d4,d14
	ld.a	a4,[a13]4
	addsc.a	a5,a15,d11,#0
	call	memcpy
.L1253:
	j	.L75
.L72:
	jeq	d10,#0,.L76
.L1254:
	movh.a	a15,#@his(.30.str)
	lea	a15,[a15]@los(.30.str)
	st.a	[a10],a15
	mov	d15,#625
	st.w	[a10]4,d15
.L839:
	fcall	.cocofun_108
.L841:
	st.a	[a10]8,a15
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L76:
	mov	d4,#56
.L1255:
	mov	d6,#1
	mov	d5,d14
	call	pbuf_alloc
.L845:
	st.a	[a10]48,a2
.L847:
	jz.a	a2,.L77
.L1256:
	ld.a	a15,[a10]16
.L848:
	mov	d4,#56
.L1257:
	mov	d5,#0
.L1258:
	addsc.a	a2,a15,d11,#0
.L846:
	ld.a	a15,[a10]48
.L849:
	mov	d6,#640
.L1259:
	st.a	[a15]4,a2
.L1260:
	call	pbuf_alloc
.L851:
	mov.aa	a13,a2
.L844:
	jnz.a	a13,.L78
.L1261:
	ld.a	a4,[a10]48
.L850:
	j	.L79
.L78:
	mov.aa	a4,a13
.L852:
	ld.a	a5,[a10]48
.L854:
	call	pbuf_cat
.L75:
	mov.aa	a4,a13
.L855:
	call	pbuf_clen
.L856:
	add	d13,d2
.L843:
	extr.u	d13,d13,#0,#16
.L857:
	jlt.u	d13,#9,.L80
.L1262:
	mov.aa	a4,a13
.L79:
	call	pbuf_free
.L858:
	j	.L81
.L80:
	mov	d4,#0
	ld.w	d5,[a12]92
.L1263:
	mov	d6,d4
	mov.aa	a4,a12
.L859:
	add	d5,d11
	mov.aa	a5,a13
.L861:
	call	tcp_create_segment
.L860:
	mov.aa	a13,a2
.L853:
	jz.a	a13,.L82
.L1264:
	st.h	[a13]10,d10
.L1265:
	ld.a	a15,[a10]24
.L862:
	jnz.a	a15,.L83
.L1266:
	st.a	[a10]24,a13
.L863:
	j	.L84
.L83:
	ld.a	a15,[a10]20
.L864:
	jnz.a	a15,.L85
	movh.a	a15,#@his(.33.str)
.L865:
	lea	a15,[a15]@los(.33.str)
	st.a	[a10],a15
	mov	d15,#683
	st.w	[a10]4,d15
.L842:
	fcall	.cocofun_108
.L866:
	st.a	[a10]8,a15
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L85:
	ld.a	a15,[a10]20
.L869:
	st.a	[a15],a13
.L84:
	add	d11,d14
	st.a	[a10]20,a13
.L868:
	extr.u	d11,d11,#0,#16
.L70:
	jlt.u	d11,d9,.L71
.L870:
	jz.a	a14,.L86
.L871:
	ld.w	d15,[a10]44
.L872:
	jeq	d15,#0,.L87
.L873:
	ld.hu	d0,[a14]10
.L1267:
	add	d0,d15
	st.h	[a14]10,d0
.L87:
.L86:
	jeq	d8,#0,.L88
.L559:
	ld.a	a15,[a14]4
.L874:
	j	.L89
.L90:
	ld.hu	d15,[a15]8
.L1268:
	add	d15,d8
	st.h	[a15]8,d15
.L1269:
	ld.w	d15,[a15]
.L1270:
	jne	d15,#0,.L91
.L1271:
	ld.a	a2,[a15]4
	ld.hu	d15,[a15]10
	mov	d4,d8
	ld.a	a5,[a10]16
.L876:
	addsc.a	a4,a2,d15,#0
	call	memcpy
.L877:
	ld.hu	d15,[a15]10
.L1272:
	add	d15,d8
	st.h	[a15]10,d15
.L91:
	ld.a	a15,[a15]
.L89:
	jnz.a	a15,.L90
.L878:
	ld.hu	d15,[a14]8
.L1273:
	add	d15,d8
	st.h	[a14]8,d15
.L1274:
	ld.hu	d15,[a14]10
.L879:
	jge.u	d15,d8,.L92
	movh.a	a15,#@his(.35.str)
.L875:
	lea	a15,[a15]@los(.35.str)
	st.a	[a10],a15
	mov	d15,#723
	st.w	[a10]4,d15
.L867:
	fcall	.cocofun_108
.L880:
	st.a	[a10]8,a15
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L92:
	ld.hu	d15,[a14]10
.L1275:
	sub	d15,d8
	st.h	[a14]10,d15
.L88:
	ld.a	a15,[a10]28
.L882:
	st.h	[a12]104,d10
.L1276:
	jz.a	a15,.L93
.L884:
	jnz.a	a14,.L94
.L885:
	movh.a	a15,#@his(.36.str)
.L883:
	lea	a15,[a15]@los(.36.str)
	st.a	[a10],a15
	mov	d15,#736
	st.w	[a10]4,d15
.L881:
	fcall	.cocofun_108
.L886:
	st.a	[a10]8,a15
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L94:
	ld.a	a4,[a14]4
.L888:
	ld.a	a5,[a10]28
.L889:
	call	pbuf_cat
.L890:
	ld.a	a15,[a10]28
.L891:
	ld.hu	d15,[a14]8
.L892:
	ld.hu	d0,[a15]8
.L894:
	add	d15,d0
	st.h	[a14]8,d15
.L895:
	j	.L95
.L93:
	ld.w	d15,[a10]40
.L896:
	jeq	d15,#0,.L96
.L561:
	jz.a	a14,.L97
.L1277:
	ld.w	d15,[a14]4
.L897:
	jne	d15,#0,.L98
.L97:
	movh.a	a15,#@his(.37.str)
.L893:
	lea	a15,[a15]@los(.37.str)
	st.a	[a10],a15
	mov	d15,#742
	st.w	[a10]4,d15
.L887:
	fcall	.cocofun_108
.L898:
	st.a	[a10]8,a15
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L98:
	ld.a	a15,[a14]4
.L900:
	j	.L99
.L100:
	ld.hu	d0,[a15]8
.L1278:
	ld.w	d15,[a10]40
.L901:
	add	d0,d15
	st.h	[a15]8,d0
.L1279:
	ld.a	a15,[a15]
.L99:
	ld.w	d15,[a15]
.L1280:
	jne	d15,#0,.L100
.L1281:
	ld.hu	d0,[a15]8
.L1282:
	ld.w	d15,[a10]40
.L902:
	add	d0,d15
	st.h	[a15]8,d0
.L1283:
	ld.hu	d0,[a15]10
.L1284:
	add	d0,d15
	st.h	[a15]10,d0
.L903:
	ld.hu	d0,[a14]8
.L1285:
	add	d0,d15
	st.h	[a14]8,d0
.L96:
.L95:
	jnz.a	a14,.L101
.L904:
	ld.a	a15,[a10]24
.L905:
	st.a	[a12]108,a15
.L1286:
	j	.L102
.L101:
	ld.a	a15,[a10]24
.L906:
	st.a	[a14],a15
.L102:
	ld.w	d15,[a12]92
.L1287:
	add	d15,d9
	st.w	[a12]92,d15
.L1288:
	ld.hu	d15,[a12]100
.L1289:
	sub	d15,d9
	st.h	[a12]100,d15
.L1290:
	st.h	[a12]102,d13
.L1291:
	jeq	d13,#0,.L103
.L1292:
	ld.w	d15,[a12]112
	jne	d15,#0,.L104
	ld.w	d15,[a12]108
	jne	d15,#0,.L105
	movh.a	a15,#@his(.39.str)
	lea	a15,[a15]@los(.39.str)
	st.a	[a10],a15
	mov	d15,#786
	st.w	[a10]4,d15
.L899:
	fcall	.cocofun_108
.L907:
	st.a	[a10]8,a15
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L105:
.L104:
.L103:
	jz.a	a13,.L106
.L1293:
	ld.a	a15,[a13]16
.L1294:
	jz.a	a15,.L107
.L1295:
	ld.w	d15,[a10]36
.L909:
	jnz.t	d15:1,.L108
.L1296:
	ld.hu	d15,[a15]12
.L910:
	mov	d4,#8
	call	lwip_htons
	or	d15,d2
	st.h	[a15]12,d15
.L108:
.L107:
.L106:
	mov	d2,#0
.L45:
	ret
.L82:
.L81:
.L77:
.L73:
.L67:
.L59:
	fcall	.cocofun_116
.L908:
	fcall	.cocofun_109
.L912:
	ld.a	a15,[a10]28
.L914:
	jz.a	a15,.L110
.L1297:
	mov.aa	a4,a15
.L916:
	call	pbuf_free
.L110:
	ld.a	a15,[a10]24
.L915:
	jz.a	a15,.L111
.L1298:
	mov.aa	a4,a15
.L918:
	call	tcp_segs_free
.L111:
	ld.hu	d15,[a12]102
.L1299:
	jeq	d15,#0,.L112
.L1300:
	ld.w	d15,[a12]112
	jne	d15,#0,.L113
	ld.w	d15,[a12]108
	jne	d15,#0,.L114
	movh.a	a15,#@his(.39.str)
.L917:
	lea	a15,[a15]@los(.39.str)
	st.a	[a10],a15
	mov	d15,#807
	st.w	[a10]4,d15
.L913:
	fcall	.cocofun_108
.L919:
	st.a	[a10]8,a15
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L114:
.L113:
.L112:
	mov	d2,#-1
	ret
.L521:
	
__tcp_write_function_end:
	.size	tcp_write,__tcp_write_function_end-tcp_write
.L354:
	; End of function
	
	.sdecl	'.text.tcp_out..cocofun_116',code,cluster('.cocofun_116')
	.sect	'.text.tcp_out..cocofun_116'
	.align	2
; Function .cocofun_116
.L293:
.cocofun_116:	.type	func
; Function body .cocofun_116, coco_iter:1
	ld.hu	d15,[a12]26
	or	d15,#128
	st.h	[a12]26,d15
.L911:
	fret
.L519:
	; End of function
	.sdecl	'.text.tcp_out..cocofun_115',code,cluster('.cocofun_115')
	.sect	'.text.tcp_out..cocofun_115'
	.align	2
; Function .cocofun_115
.L295:
.cocofun_115:	.type	func
; Function body .cocofun_115, coco_iter:0
	j	.L61
.L62:
	ld.a	a15,[a15]
.L61:
	ld.w	d15,[a15]
.L1775:
	jne	d15,#0,.L62
.L1776:
	fret
.L514:
	; End of function
	.sdecl	'.text.tcp_out..cocofun_114',code,cluster('.cocofun_114')
	.sect	'.text.tcp_out..cocofun_114'
	.align	2
; Function .cocofun_114
.L297:
.cocofun_114:	.type	func
; Function body .cocofun_114, coco_iter:0
	j	.L47
.L48:
	ld.a	a14,[a14]
.L47:
	ld.w	d15,[a14]
.L1769:
	jne	d15,#0,.L48
.L1770:
	fret
.L509:
	; End of function
	.sdecl	'.text.tcp_out..cocofun_108',code,cluster('.cocofun_108')
	.sect	'.text.tcp_out..cocofun_108'
	.align	2
; Function .cocofun_108
.L299:
.cocofun_108:	.type	func
; Function body .cocofun_108, coco_iter:0
	movh.a	a15,#@his(.3.str)
.L837:
	lea	a15,[a15]@los(.3.str)
.L1737:
	fret
.L479:
	; End of function
	.sdecl	'.text.tcp_out..cocofun_107',code,cluster('.cocofun_107')
	.sect	'.text.tcp_out..cocofun_107'
	.align	2
; Function .cocofun_107
.L301:
.cocofun_107:	.type	func
; Function body .cocofun_107, coco_iter:0
	movh.a	a4,#@his(.1.str)
.L761:
	lea	a4,[a4]@los(.1.str)
.L1732:
	fret
.L474:
	; End of function
	.sdecl	'.text.tcp_out.tcp_split_unsent_seg',code,cluster('tcp_split_unsent_seg')
	.sect	'.text.tcp_out.tcp_split_unsent_seg'
	.align	2
	
	.global	tcp_split_unsent_seg

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   813  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   814  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   815   * Split segment on the head of the unsent queue.  If return is not
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   816   * ERR_OK, existing head remains intact
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   817   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   818   * The split is accomplished by creating a new TCP segment and pbuf
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   819   * which holds the remainder payload after the split.  The original
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   820   * pbuf is trimmed to new length.  This allows splitting of read-only
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   821   * pbufs
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   822   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   823   * @param pcb the tcp_pcb for which to split the unsent head
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   824   * @param split the amount of payload to remain in the head
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   825   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   826  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   827  tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
; Function tcp_split_unsent_seg
.L303:
tcp_split_unsent_seg:	.type	func
	sub.a	a10,#16
.L920:
	mov.aa	a12,a4
.L922:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   828  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   829    struct tcp_seg *seg = NULL, *useg = NULL;
	mov	d8,d4
	mov.a	a13,#0
.L923:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   830    struct pbuf *p = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   831    u8_t optlen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   832    u8_t optflags;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   833    u8_t split_flags;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   834    u8_t remainder_flags;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   835    u16_t remainder;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   836    u16_t offset;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   837  #if TCP_CHECKSUM_ON_COPY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   838    u16_t chksum = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   839    u8_t chksum_swapped = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   840    struct pbuf *q;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   841  #endif /* TCP_CHECKSUM_ON_COPY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   842  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   843    LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
	jnz.a	a12,.L116
.L1504:
	movh.a	a2,#@his(.41.str)
	lea	a2,[a2]@los(.41.str)
	st.a	[a10],a2
	mov	d15,#843
	st.w	[a10]4,d15
.L921:
	fcall	.cocofun_108
.L924:
	st.a	[a10]8,a15
	fcall	.cocofun_107
.L925:
	call	Ifx_Lwip_printf
.L116:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   844  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   845    useg = pcb->unsent;
	ld.a	a15,[a12]108
.L927:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   846    if (useg == NULL) {
	jz.a	a15,.L117
.L1505:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   847      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   848    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   849  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   850    if (split == 0) {
	jne	d8,#0,.L118
.L1506:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   851      LWIP_ASSERT("Can't split segment into length 0", 0);
	movh.a	a15,#@his(.42.str)
.L928:
	lea	a15,[a15]@los(.42.str)
	st.a	[a10],a15
	mov	d15,#851
	st.w	[a10]4,d15
.L926:
	fcall	.cocofun_108
.L929:
	st.a	[a10]8,a15
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L1507:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   852      return ERR_VAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   853    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   854  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   855    if (useg->len <= split) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   856      return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   857    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   858  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   859    LWIP_ASSERT("split <= mss", split <= pcb->mss);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   860    LWIP_ASSERT("useg->len > 0", useg->len > 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   861  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   862    /* We should check that we don't exceed TCP_SND_QUEUELEN but we need
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   863     * to split this packet so we may actually exceed the max value by
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   864     * one!
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   865     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   866    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   867  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   868    optflags = useg->flags;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   869  #if TCP_CHECKSUM_ON_COPY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   870    /* Remove since checksum is not stored until after tcp_create_segment() */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   871    optflags &= ~TF_SEG_DATA_CHECKSUMMED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   872  #endif /* TCP_CHECKSUM_ON_COPY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   873    optlen = LWIP_TCP_OPT_LENGTH(optflags);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   874    remainder = useg->len - split;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   875  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   876    /* Create new pbuf for the remainder of the split */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   877    p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   878    if (p == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   879      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   880                  ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   881      goto memerr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   882    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   883  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   884    /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   885    offset = useg->p->tot_len - useg->len + split;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   886    /* Copy remainder into new pbuf, headers and options will not be filled out */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   887    if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   888      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   889                  ("tcp_split_unsent_seg: could not copy pbuf remainder %u\n", remainder));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   890      goto memerr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   891    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   892  #if TCP_CHECKSUM_ON_COPY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   893    /* calculate the checksum on remainder data */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   894    tcp_seg_add_chksum(~inet_chksum((const u8_t *)p->payload + optlen, remainder), remainder,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   895                       &chksum, &chksum_swapped);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   896  #endif /* TCP_CHECKSUM_ON_COPY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   897  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   898    /* Options are created when calling tcp_output() */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   899  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   900    /* Migrate flags from original segment */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   901    split_flags = TCPH_FLAGS(useg->tcphdr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   902    remainder_flags = 0; /* ACK added in tcp_output() */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   903  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   904    if (split_flags & TCP_PSH) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   905      split_flags &= ~TCP_PSH;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   906      remainder_flags |= TCP_PSH;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   907    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   908    if (split_flags & TCP_FIN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   909      split_flags &= ~TCP_FIN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   910      remainder_flags |= TCP_FIN;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   911    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   912    /* SYN should be left on split, RST should not be present with data */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   913  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   914    seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   915    if (seg == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   916      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   917                  ("tcp_split_unsent_seg: could not create new TCP segment\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   918      goto memerr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   919    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   920  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   921  #if TCP_CHECKSUM_ON_COPY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   922    seg->chksum = chksum;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   923    seg->chksum_swapped = chksum_swapped;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   924    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   925  #endif /* TCP_CHECKSUM_ON_COPY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   926  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   927    /* Remove this segment from the queue since trimming it may free pbufs */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   928    pcb->snd_queuelen -= pbuf_clen(useg->p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   929  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   930    /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   931    successfully because we are modifying the original segment */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   932    pbuf_realloc(useg->p, useg->p->tot_len - remainder);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   933    useg->len -= remainder;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   934    TCPH_SET_FLAG(useg->tcphdr, split_flags);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   935  #if TCP_OVERSIZE_DBGCHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   936    /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   937    useg->oversize_left = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   938  #endif /* TCP_OVERSIZE_DBGCHECK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   939  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   940    /* Add back to the queue with new trimmed pbuf */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   941    pcb->snd_queuelen += pbuf_clen(useg->p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   942  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   943  #if TCP_CHECKSUM_ON_COPY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   944    /* The checksum on the split segment is now incorrect. We need to re-run it over the split */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   945    useg->chksum = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   946    useg->chksum_swapped = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   947    q = useg->p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   948    offset = q->tot_len - useg->len; /* Offset due to exposed headers */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   949  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   950    /* Advance to the pbuf where the offset ends */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   951    while (q != NULL && offset > q->len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   952      offset -= q->len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   953      q = q->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   954    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   955    LWIP_ASSERT("Found start of payload pbuf", q != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   956    /* Checksum the first payload pbuf accounting for offset, then other pbufs are all payload */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   957    for (; q != NULL; offset = 0, q = q->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   958      tcp_seg_add_chksum(~inet_chksum((const u8_t *)q->payload + offset, q->len - offset), q->len - offset,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   959                         &useg->chksum, &useg->chksum_swapped);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   960    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   961  #endif /* TCP_CHECKSUM_ON_COPY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   962  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   963    /* Update number of segments on the queues. Note that length now may
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   964     * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   965     * because the total amount of data is constant when packet is split */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   966    pcb->snd_queuelen += pbuf_clen(seg->p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   967  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   968    /* Finally insert remainder into queue after split (which stays head) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   969    seg->next = useg->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   970    useg->next = seg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   971  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   972  #if TCP_OVERSIZE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   973    /* If remainder is last segment on the unsent, ensure we clear the oversize amount
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   974     * because the remainder is always sized to the exact remaining amount */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   975    if (seg->next == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   976      pcb->unsent_oversize = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   977    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   978  #endif /* TCP_OVERSIZE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   979  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   980    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   981  memerr:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   982    TCP_STATS_INC(tcp.memerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   983  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   984    LWIP_ASSERT("seg == NULL", seg == NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   985    if (p != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   986      pbuf_free(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   987    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   988  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   989    return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   990  }
	mov	d2,#-6
	ret
.L118:
	ld.hu	d0,[a15]8
.L1508:
	jge.u	d8,d0,.L120
.L1509:
	ld.hu	d0,[a12]50
	jge.u	d0,d8,.L121
	movh.a	a2,#@his(.43.str)
	lea	a2,[a2]@los(.43.str)
	st.a	[a10],a2
	mov	d15,#859
	st.w	[a10]4,d15
.L930:
	fcall	.cocofun_110
.L931:
	st.a	[a10]8,a2
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L121:
	ld.hu	d15,[a15]8
	jne	d15,#0,.L122
	movh.a	a2,#@his(.44.str)
	lea	a2,[a2]@los(.44.str)
	st.a	[a10],a2
	mov	d15,#860
	st.w	[a10]4,d15
.L932:
	fcall	.cocofun_110
.L933:
	st.a	[a10]8,a2
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L122:
	ld.hu	d0,[a15]8
.L1510:
	ld.bu	d10,[a15]12
.L936:
	sub	d0,d8
	extr.u	d11,d0,#0,#16
.L937:
	and	d15,d10,#1
	ne	d9,d15,#0
.L1511:
	cadd	d0,d15,d11,#4
.L938:
	sha	d9,#2
.L1512:
	mov	d4,#56
.L1513:
	extr.u	d5,d0,#0,#16
.L1514:
	mov	d6,#640
	call	pbuf_alloc
.L940:
	mov.aa	a14,a2
.L942:
	jz.a	a14,.L123
.L1515:
	ld.a	a4,[a15]4
.L1516:
	ld.hu	d0,[a15]8
.L1517:
	ld.a	a2,[a14]4
.L941:
	ld.hu	d15,[a4]8
.L1518:
	mov	d4,d11
.L944:
	addsc.a	a5,a2,d9,#0
.L1519:
	sub	d15,d0
.L1520:
	add	d15,d8
	extr.u	d5,d15,#0,#16
	call	pbuf_copy_partial
.L945:
	jne	d2,d11,.L124
.L1521:
	ld.a	a2,[a15]16
	ld.hu	d4,[a2]12
	call	lwip_htons
	and	d9,d2,#63
.L939:
	mov	d15,#0
.L946:
	jz.t	d9:3,.L125
.L1522:
	and	d9,d9,#247
.L1523:
	mov	d15,#8
.L125:
	jz.t	d9:0,.L126
.L1524:
	and	d9,d9,#254
.L1525:
	or	d15,#1
.L126:
	ld.a	a2,[a15]16
	ld.w	d4,[a2]4
	call	lwip_htonl
.L1526:
	mov	d4,d15
	mov.aa	a4,a12
.L948:
	mov	d6,d10
	mov.aa	a5,a14
.L949:
	add	d5,d2,d8
	call	tcp_create_segment
.L934:
	mov.aa	a13,a2
.L953:
	jz.a	a13,.L127
.L1527:
	ld.hu	d8,[a12]102
.L935:
	ld.a	a4,[a15]4
	call	pbuf_clen
.L950:
	sub	d8,d2
	st.h	[a12]102,d8
.L1528:
	ld.a	a4,[a15]4
.L1529:
	ld.hu	d0,[a4]8
.L1530:
	sub	d0,d11
	extr.u	d4,d0,#0,#16
	call	pbuf_realloc
.L1531:
	ld.hu	d15,[a15]8
.L947:
	mov	d4,d9
.L951:
	sub	d15,d11
	st.h	[a15]8,d15
.L1532:
	ld.a	a14,[a15]16
.L943:
	ld.hu	d15,[a14]12
	call	lwip_htons
.L952:
	or	d15,d2
	st.h	[a14]12,d15
.L1533:
	mov	d15,#0
	st.h	[a15]10,d15
.L1534:
	ld.hu	d15,[a12]102
.L1535:
	ld.a	a4,[a15]4
	call	pbuf_clen
.L1536:
	add	d15,d2
	st.h	[a12]102,d15
.L1537:
	ld.hu	d15,[a12]102
.L1538:
	ld.a	a4,[a13]4
	call	pbuf_clen
.L1539:
	add	d15,d2
	st.h	[a12]102,d15
.L1540:
	ld.a	a2,[a15]
.L1541:
	st.a	[a13],a2
.L1542:
	st.a	[a15],a13
.L1543:
	ld.w	d15,[a13]
.L1544:
	fcall	.cocofun_111
.L120:
	mov	d2,#0
	ret
.L127:
.L124:
.L123:
	fcall	.cocofun_109
.L955:
	jz.a	a13,.L130
.L1545:
	movh.a	a15,#@his(.49.str)
	lea	a15,[a15]@los(.49.str)
	st.a	[a10],a15
	mov	d15,#984
	st.w	[a10]4,d15
.L956:
	fcall	.cocofun_108
.L957:
	st.a	[a10]8,a15
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L130:
	jz.a	a14,.L131
.L1546:
	mov.aa	a4,a14
.L958:
	call	pbuf_free
.L131:
.L117:
	mov	d2,#-1
	ret
.L624:
	
__tcp_split_unsent_seg_function_end:
	.size	tcp_split_unsent_seg,__tcp_split_unsent_seg_function_end-tcp_split_unsent_seg
.L414:
	; End of function
	
	.sdecl	'.text.tcp_out..cocofun_111',code,cluster('.cocofun_111')
	.sect	'.text.tcp_out..cocofun_111'
	.align	2
; Function .cocofun_111
.L305:
.cocofun_111:	.type	func
; Function body .cocofun_111, coco_iter:0
	jne	d15,#0,.L128
.L1751:
	mov	d15,#0
	st.h	[a12]104,d15
.L128:
	fret
.L494:
	; End of function
	.sdecl	'.text.tcp_out.tcp_send_fin',code,cluster('tcp_send_fin')
	.sect	'.text.tcp_out.tcp_send_fin'
	.align	2
	
	.global	tcp_send_fin

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   991  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   992  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   993   * Called by tcp_close() to send a segment including FIN flag but not data.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   994   * This FIN may be added to an existing segment or a new, otherwise empty
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   995   * segment is enqueued.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   996   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   997   * @param pcb the tcp_pcb over which to send a segment
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   998   * @return ERR_OK if sent, another err_t otherwise
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	   999   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1000  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1001  tcp_send_fin(struct tcp_pcb *pcb)
; Function tcp_send_fin
.L307:
tcp_send_fin:	.type	func
	sub.a	a10,#16
.L959:
	mov.aa	a12,a4
.L961:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1002  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1003    LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
	jnz.a	a12,.L133
.L1453:
	movh.a	a2,#@his(.50.str)
	lea	a2,[a2]@los(.50.str)
	st.a	[a10],a2
	mov	d15,#1003
	st.w	[a10]4,d15
.L960:
	fcall	.cocofun_108
.L962:
	st.a	[a10]8,a15
	fcall	.cocofun_107
.L963:
	call	Ifx_Lwip_printf
.L133:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1004  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1005    /* first, try to add the fin to the last unsent segment */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1006    if (pcb->unsent != NULL) {
	ld.a	a15,[a12]108
.L964:
	jz.a	a15,.L134
.L598:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1007      struct tcp_seg *last_unsent;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1008      for (last_unsent = pcb->unsent; last_unsent->next != NULL;
	fcall	.cocofun_115
.L1454:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1009           last_unsent = last_unsent->next);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1010  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1011      if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
	ld.a	a2,[a15]16
	ld.hu	d4,[a2]12
	call	lwip_htons
	and	d15,d2,#7
.L1455:
	jne	d15,#0,.L137
.L1456:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1012        /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1013        TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
	ld.a	a15,[a15]16
.L965:
	mov	d4,#1
	ld.hu	d15,[a15]12
	call	lwip_htons
	or	d15,d2
	st.h	[a15]12,d15
.L1457:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1014        tcp_set_flags(pcb, TF_FIN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1015        return ERR_OK;
	mov	d2,#0
.L1458:
	ld.hu	d15,[a12]26
	or	d15,#32
	st.h	[a12]26,d15
.L599:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1016      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1017    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1018    /* no data, no length, flags, copy=1, no optdata */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1019    return tcp_enqueue_flags(pcb, TCP_FIN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1020  }
	ret
.L137:
.L134:
	mov	d4,#1
	mov.aa	a4,a12
.L966:
	j	tcp_enqueue_flags
.L596:
	
__tcp_send_fin_function_end:
	.size	tcp_send_fin,__tcp_send_fin_function_end-tcp_send_fin
.L394:
	; End of function
	
	.sdecl	'.text.tcp_out.tcp_enqueue_flags',code,cluster('tcp_enqueue_flags')
	.sect	'.text.tcp_out.tcp_enqueue_flags'
	.align	2
	
	.global	tcp_enqueue_flags

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1021  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1022  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1023   * Enqueue SYN or FIN for transmission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1024   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1025   * Called by @ref tcp_connect, tcp_listen_input, and @ref tcp_close
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1026   * (via @ref tcp_send_fin)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1027   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1028   * @param pcb Protocol control block for the TCP connection.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1029   * @param flags TCP header flags to set in the outgoing segment.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1030   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1031  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1032  tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
; Function tcp_enqueue_flags
.L309:
tcp_enqueue_flags:	.type	func
	mov	d9,d4
	mov.aa	a12,a4
.L969:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1033  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1034    struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1035    struct tcp_seg *seg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1036    u8_t optflags = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1037    u8_t optlen = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1038  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1039    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1040  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1041    LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
	and	d15,d9,#3
	sub.a	a10,#16
.L967:
	mov	d10,#0
.L970:
	jne	d15,#0,.L140
.L1463:
	movh.a	a2,#@his(.52.str)
	lea	a2,[a2]@los(.52.str)
	st.a	[a10],a2
	mov	d15,#1041
	st.w	[a10]4,d15
.L968:
	fcall	.cocofun_108
.L971:
	st.a	[a10]8,a15
	fcall	.cocofun_107
.L972:
	call	Ifx_Lwip_printf
.L140:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1042                (flags & (TCP_SYN | TCP_FIN)) != 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1043    LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
	jnz.a	a12,.L141
.L1464:
	movh.a	a2,#@his(.53.str)
	lea	a2,[a2]@los(.53.str)
	st.a	[a10],a2
	mov	d15,#1043
	st.w	[a10]4,d15
.L973:
	fcall	.cocofun_108
.L974:
	st.a	[a10]8,a15
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L141:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1044  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1045    /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1046  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1047    /* Get options for this segment. This is a special case since this is the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1048       only place where a SYN can be sent. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1049    if (flags & TCP_SYN) {
	and	d15,d9,#2
.L1465:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1050      optflags = TF_SEG_OPTS_MSS;
	cmov	d10,d15,#1
.L1466:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1051  #if LWIP_WND_SCALE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1052      if ((pcb->state != SYN_RCVD) || (pcb->flags & TF_WND_SCALE)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1053        /* In a <SYN,ACK> (sent in state SYN_RCVD), the window scale option may only
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1054           be sent if we received a window scale option from the remote host. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1055        optflags |= TF_SEG_OPTS_WND_SCALE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1056      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1057  #endif /* LWIP_WND_SCALE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1058  #if LWIP_TCP_SACK_OUT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1059      if ((pcb->state != SYN_RCVD) || (pcb->flags & TF_SACK)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1060        /* In a <SYN,ACK> (sent in state SYN_RCVD), the SACK_PERM option may only
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1061           be sent if we received a SACK_PERM option from the remote host. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1062        optflags |= TF_SEG_OPTS_SACK_PERM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1063      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1064  #endif /* LWIP_TCP_SACK_OUT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1065    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1066  #if LWIP_TCP_TIMESTAMPS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1067    if ((pcb->flags & TF_TIMESTAMP) || ((flags & TCP_SYN) && (pcb->state != SYN_RCVD))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1068      /* Make sure the timestamp option is only included in data segments if we
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1069         agreed about it with the remote host (and in active open SYN segments). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1070      optflags |= TF_SEG_OPTS_TS;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1071    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1072  #endif /* LWIP_TCP_TIMESTAMPS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1073    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
	ne	d0,d10,#0
	sha	d8,d0,#2
.L976:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1074  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1075    /* Allocate pbuf with room for TCP header + options */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1076    if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
	mov	d4,#56
.L1467:
	mov	d6,#640
	mov	d5,d8
	call	pbuf_alloc
.L977:
	mov.aa	a13,a2
.L978:
	jz.a	a13,.L143
.L1468:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1077      tcp_set_flags(pcb, TF_NAGLEMEMERR);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1078      TCP_STATS_INC(tcp.memerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1079      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1080    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1081    LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
	ld.hu	d15,[a13]10
	jge.u	d15,d8,.L144
	movh.a	a15,#@his(.54.str)
	lea	a15,[a15]@los(.54.str)
	st.a	[a10],a15
	mov	d15,#1081
	st.w	[a10]4,d15
.L975:
	fcall	.cocofun_108
.L979:
	st.a	[a10]8,a15
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L144:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1082                (p->len >= optlen));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1083  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1084    /* Allocate memory for tcp_seg, and fill in fields. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1085    if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
	mov	d4,d9
	mov.aa	a5,a13
.L982:
	mov	d6,d10
	ld.w	d5,[a12]92
.L984:
	mov.aa	a4,a12
.L985:
	call	tcp_create_segment
.L983:
	mov.aa	a13,a2
.L981:
	jnz.a	a13,.L145

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1086      tcp_set_flags(pcb, TF_NAGLEMEMERR);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1087      TCP_STATS_INC(tcp.memerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1088      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1089    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1090    LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1091    LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1092  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1093    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1094                ("tcp_enqueue_flags: queueing %"U32_F":%"U32_F" (0x%"X16_F")\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1095                 lwip_ntohl(seg->tcphdr->seqno),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1096                 lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1097                 (u16_t)flags));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1098  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1099    /* Now append seg to pcb->unsent queue */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1100    if (pcb->unsent == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1101      pcb->unsent = seg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1102    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1103      struct tcp_seg *useg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1104      for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1105      useg->next = seg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1106    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1107  #if TCP_OVERSIZE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1108    /* The new unsent tail has no space */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1109    pcb->unsent_oversize = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1110  #endif /* TCP_OVERSIZE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1111  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1112    /* SYN and FIN bump the sequence number */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1113    if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1114      pcb->snd_lbb++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1115      /* optlen does not influence snd_buf */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1116    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1117    if (flags & TCP_FIN) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1118      tcp_set_flags(pcb, TF_FIN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1119    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1120  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1121    /* update number of segments on the queues */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1122    pcb->snd_queuelen += pbuf_clen(seg->p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1123    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1124    if (pcb->snd_queuelen != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1125      LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1126                  pcb->unacked != NULL || pcb->unsent != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1127    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1128  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1129    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1130  }
.L143:
	fcall	.cocofun_116
.L980:
	fcall	.cocofun_109
.L986:
	mov	d2,#-1
	ret
.L145:
	ld.w	d15,[a13]16
	and	d15,#3
	jeq	d15,#0,.L147
	movh.a	a2,#@his(.55.str)
.L988:
	lea	a2,[a2]@los(.55.str)
	st.a	[a10],a2
	mov	d15,#1090
	st.w	[a10]4,d15
.L987:
	fcall	.cocofun_108
.L989:
	st.a	[a10]8,a15
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L147:
	ld.hu	d15,[a13]8
	jeq	d15,#0,.L148
	movh.a	a15,#@his(.56.str)
	lea	a15,[a15]@los(.56.str)
	st.a	[a10],a15
	mov	d15,#1091
	st.w	[a10]4,d15
.L990:
	fcall	.cocofun_108
.L991:
	st.a	[a10]8,a15
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L148:
	ld.a	a15,[a12]108
.L993:
	jnz.a	a15,.L151
.L1469:
	st.a	[a12]108,a13
.L1470:
	j	.L150
.L152:
	ld.a	a15,[a15]
.L151:
	ld.w	d15,[a15]
.L1471:
	jne	d15,#0,.L152
.L1472:
	st.a	[a15],a13
.L150:
	mov	d15,#0
	st.h	[a12]104,d15
.L1473:
	jnz.t	d9:1,.L153
.L1474:
	jz.t	d9:0,.L154
.L153:
	ld.w	d15,[a12]92
.L1475:
	add	d15,#1
	st.w	[a12]92,d15
.L154:
	jz.t	d9:0,.L155
.L1476:
	ld.hu	d15,[a12]26
	or	d15,#32
	st.h	[a12]26,d15
.L155:
	ld.hu	d15,[a12]102
.L1477:
	ld.a	a4,[a13]4
	call	pbuf_clen
.L1478:
	add	d15,d2
	st.h	[a12]102,d15
.L1479:
	ld.hu	d15,[a12]102
.L1480:
	jeq	d15,#0,.L156
.L1481:
	ld.w	d15,[a12]112
	jne	d15,#0,.L157
	ld.w	d15,[a12]108
	jne	d15,#0,.L158
	movh.a	a15,#@his(.59.str)
.L994:
	lea	a15,[a15]@los(.59.str)
	st.a	[a10],a15
	mov	d15,#1125
	st.w	[a10]4,d15
.L992:
	fcall	.cocofun_108
.L995:
	st.a	[a10]8,a15
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L158:
.L157:
.L156:
	mov	d2,#0
	ret
.L601:
	
__tcp_enqueue_flags_function_end:
	.size	tcp_enqueue_flags,__tcp_enqueue_flags_function_end-tcp_enqueue_flags
.L399:
	; End of function
	
	.sdecl	'.text.tcp_out.tcp_output',code,cluster('tcp_output')
	.sect	'.text.tcp_out.tcp_output'
	.align	2
	
	.global	tcp_output

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1131  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1132  #if LWIP_TCP_TIMESTAMPS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1133  /* Build a timestamp option (12 bytes long) at the specified options pointer)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1134   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1135   * @param pcb tcp_pcb
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1136   * @param opts option pointer where to store the timestamp option
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1137   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1138  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1139  tcp_build_timestamp_option(const struct tcp_pcb *pcb, u32_t *opts)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1140  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1141    LWIP_ASSERT("tcp_build_timestamp_option: invalid pcb", pcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1142  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1143    /* Pad with two NOP options to make everything nicely aligned */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1144    opts[0] = PP_HTONL(0x0101080A);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1145    opts[1] = lwip_htonl(sys_now());
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1146    opts[2] = lwip_htonl(pcb->ts_recent);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1147  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1148  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1149  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1150  #if LWIP_TCP_SACK_OUT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1151  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1152   * Calculates the number of SACK entries that should be generated.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1153   * It takes into account whether TF_SACK flag is set,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1154   * the number of SACK entries in tcp_pcb that are valid,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1155   * as well as the available options size.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1156   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1157   * @param pcb tcp_pcb
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1158   * @param optlen the length of other TCP options (in bytes)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1159   * @return the number of SACK ranges that can be used
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1160   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1161  static u8_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1162  tcp_get_num_sacks(const struct tcp_pcb *pcb, u8_t optlen)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1163  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1164    u8_t num_sacks = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1165  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1166    LWIP_ASSERT("tcp_get_num_sacks: invalid pcb", pcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1167  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1168    if (pcb->flags & TF_SACK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1169      u8_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1170  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1171      /* The first SACK takes up 12 bytes (it includes SACK header and two NOP options),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1172         each additional one - 8 bytes. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1173      optlen += 12;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1174  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1175      /* Max options size = 40, number of SACK array entries = LWIP_TCP_MAX_SACK_NUM */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1176      for (i = 0; (i < LWIP_TCP_MAX_SACK_NUM) && (optlen <= TCP_MAX_OPTION_BYTES) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1177           LWIP_TCP_SACK_VALID(pcb, i); ++i) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1178        ++num_sacks;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1179        optlen += 8;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1180      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1181    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1182  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1183    return num_sacks;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1184  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1185  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1186  /** Build a SACK option (12 or more bytes long) at the specified options pointer)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1187   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1188   * @param pcb tcp_pcb
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1189   * @param opts option pointer where to store the SACK option
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1190   * @param num_sacks the number of SACKs to store
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1191   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1192  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1193  tcp_build_sack_option(const struct tcp_pcb *pcb, u32_t *opts, u8_t num_sacks)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1194  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1195    u8_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1196  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1197    LWIP_ASSERT("tcp_build_sack_option: invalid pcb", pcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1198    LWIP_ASSERT("tcp_build_sack_option: invalid opts", opts != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1199  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1200    /* Pad with two NOP options to make everything nicely aligned.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1201       We add the length (of just the SACK option, not the NOPs in front of it),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1202       which is 2B of header, plus 8B for each SACK. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1203    *(opts++) = PP_HTONL(0x01010500 + 2 + num_sacks * 8);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1204  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1205    for (i = 0; i < num_sacks; ++i) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1206      *(opts++) = lwip_htonl(pcb->rcv_sacks[i].left);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1207      *(opts++) = lwip_htonl(pcb->rcv_sacks[i].right);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1208    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1209  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1210  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1211  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1212  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1213  #if LWIP_WND_SCALE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1214  /** Build a window scale option (3 bytes long) at the specified options pointer)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1215   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1216   * @param opts option pointer where to store the window scale option
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1217   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1218  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1219  tcp_build_wnd_scale_option(u32_t *opts)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1220  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1221    LWIP_ASSERT("tcp_build_wnd_scale_option: invalid opts", opts != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1222  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1223    /* Pad with one NOP option to make everything nicely aligned */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1224    opts[0] = PP_HTONL(0x01030300 | TCP_RCV_SCALE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1225  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1226  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1227  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1228  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1229   * @ingroup tcp_raw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1230   * Find out what we can send and send it
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1231   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1232   * @param pcb Protocol control block for the TCP connection to send data
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1233   * @return ERR_OK if data has been sent or nothing to send
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1234   *         another err_t on error
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1235   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1236  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1237  tcp_output(struct tcp_pcb *pcb)
; Function tcp_output
.L311:
tcp_output:	.type	func
	sub.a	a10,#16
.L996:
	mov.aa	a12,a4
.L998:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1238  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1239    struct tcp_seg *seg, *useg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1240    u32_t wnd, snd_nxt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1241    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1242    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1243  #if TCP_CWND_DEBUG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1244    s16_t i = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1245  #endif /* TCP_CWND_DEBUG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1246  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1247    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1248  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1249    LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
	jnz.a	a12,.L160
.L1305:
	movh.a	a2,#@his(.60.str)
	lea	a2,[a2]@los(.60.str)
	st.a	[a10],a2
	mov	d15,#1249
	st.w	[a10]4,d15
.L997:
	fcall	.cocofun_108
.L999:
	st.a	[a10]8,a15
	fcall	.cocofun_107
.L1000:
	call	Ifx_Lwip_printf
.L160:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1250    /* pcb->state LISTEN not allowed here */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1251    LWIP_ASSERT("don't call tcp_output for listen-pcbs",
	ld.bu	d15,[a12]20
	jne	d15,#1,.L161
	movh.a	a2,#@his(.61.str)
	lea	a2,[a2]@los(.61.str)
	st.a	[a10],a2
	mov	d15,#1251
	st.w	[a10]4,d15
.L1001:
	fcall	.cocofun_108
.L1010:
	st.a	[a10]8,a15
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L161:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1252                pcb->state != LISTEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1253  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1254    /* First, check if we are invoked by the TCP input processing
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1255       code. If so, we do not output anything. Instead, we rely on the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1256       input processing code to call us when input processing is done
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1257       with. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1258    if (tcp_input_pcb == pcb) {
	ld.a	a15,tcp_input_pcb
.L1306:
	jeq.a	a15,a12,.L162
.L1307:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1259      return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1260    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1261  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1262    wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1263  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1264    seg = pcb->unsent;
	ld.a	a13,[a12]108
.L1011:
	ld.hu	d15,[a12]96
	ld.hu	d0,[a12]72
.L1308:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1265  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1266    if (seg == NULL) {
	min.u	d8,d15,d0
	jz.a	a13,.L163
.L1309:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1267      LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: nothing to send (%p)\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1268                                     (void *)pcb->unsent));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1269      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_output: snd_wnd %"TCPWNDSIZE_F
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1270                                   ", cwnd %"TCPWNDSIZE_F", wnd %"U32_F
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1271                                   ", seg == NULL, ack %"U32_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1272                                   pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1273  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1274      /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1275       * an empty ACK segment and send it. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1276      if (pcb->flags & TF_ACK_NOW) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1277        return tcp_send_empty_ack(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1278      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1279      /* nothing to send: shortcut out of here */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1280      goto output_done;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1281    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1282      LWIP_DEBUGF(TCP_CWND_DEBUG,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1283                  ("tcp_output: snd_wnd %"TCPWNDSIZE_F", cwnd %"TCPWNDSIZE_F", wnd %"U32_F
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1284                   ", effwnd %"U32_F", seq %"U32_F", ack %"U32_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1285                   pcb->snd_wnd, pcb->cwnd, wnd,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1286                   lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1287                   lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1288    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1289  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1290    netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
	lea	a6,[a12]4
	mov.aa	a4,a12
.L1002:
	mov.aa	a5,a12
.L1004:
	call	tcp_route
.L1003:
	st.a	[a10]12,a2
.L1006:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1291    if (netif == NULL) {
	jz.a	a2,.L164
.L1310:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1292      return ERR_RTE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1293    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1294  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1295    /* If we don't have a local IP address, we get one from netif */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1296    if (ip_addr_isany(&pcb->local_ip)) {
	ld.w	d15,[a12]
	jne	d15,#0,.L165
.L574:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1297      const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1298      if (local_ip == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1299        return ERR_RTE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1300      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1301      ip_addr_copy(pcb->local_ip, *local_ip);
	mov.aa	a15,a2
.L1007:
	ld.w	d15,[a15]4
	st.w	[a12],d15
.L1311:
	j	.L166

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1302    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1303  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1304    /* Handle the current segment not fitting within the window */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1305    if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1306      /* We need to start the persistent timer when the next unsent segment does not fit
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1307       * within the remaining (could be 0) send window and RTO timer is not running (we
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1308       * have no in-flight data). If window is still too small after persist timer fires,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1309       * then we split the segment. We don't consider the congestion window since a cwnd
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1310       * smaller than 1 SMSS implies in-flight data
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1311       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1312      if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1313        pcb->persist_cnt = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1314        pcb->persist_backoff = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1315        pcb->persist_probe = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1316      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1317      /* We need an ACK, but can't send data now, so send an empty ACK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1318      if (pcb->flags & TF_ACK_NOW) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1319        return tcp_send_empty_ack(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1320      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1321      goto output_done;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1322    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1323    /* Stop persist timer, above conditions are not active */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1324    pcb->persist_backoff = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1325  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1326    /* useg should point to last segment on unacked queue */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1327    useg = pcb->unacked;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1328    if (useg != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1329      for (; useg->next != NULL; useg = useg->next);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1330    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1331    /* data available and window allows it to be sent? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1332    while (seg != NULL &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1333           lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1334      LWIP_ASSERT("RST not expected here!",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1335                  (TCPH_FLAGS(seg->tcphdr) & TCP_RST) == 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1336      /* Stop sending if the nagle algorithm would prevent it
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1337       * Don't stop:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1338       * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1339       * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1340       *   either seg->next != NULL or pcb->unacked == NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1341       *   RST is no sent using tcp_write/tcp_output.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1342       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1343      if ((tcp_do_output_nagle(pcb) == 0) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1344          ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1345        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1346      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1347  #if TCP_CWND_DEBUG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1348      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_output: snd_wnd %"TCPWNDSIZE_F", cwnd %"TCPWNDSIZE_F", wnd %"U32_F", effwnd %"U32_F", seq %"U32_F", ack %"U32_F", i %"S16_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1349                                   pcb->snd_wnd, pcb->cwnd, wnd,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1350                                   lwip_ntohl(seg->tcphdr->seqno) + seg->len -
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1351                                   pcb->lastack,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1352                                   lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1353      ++i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1354  #endif /* TCP_CWND_DEBUG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1355  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1356      if (pcb->state != SYN_SENT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1357        TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1358      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1359  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1360      err = tcp_output_segment(seg, pcb, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1361      if (err != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1362        /* segment could not be sent, for whatever reason */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1363        tcp_set_flags(pcb, TF_NAGLEMEMERR);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1364        return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1365      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1366  #if TCP_OVERSIZE_DBGCHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1367      seg->oversize_left = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1368  #endif /* TCP_OVERSIZE_DBGCHECK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1369      pcb->unsent = seg->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1370      if (pcb->state != SYN_SENT) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1371        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1372      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1373      snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1374      if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1375        pcb->snd_nxt = snd_nxt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1376      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1377      /* put segment on unacknowledged list if length > 0 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1378      if (TCP_TCPLEN(seg) > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1379        seg->next = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1380        /* unacked list is empty? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1381        if (pcb->unacked == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1382          pcb->unacked = seg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1383          useg = seg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1384          /* unacked list is not empty? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1385        } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1386          /* In the case of fast retransmit, the packet should not go to the tail
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1387           * of the unacked queue, but rather somewhere before it. We need to check for
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1388           * this case. -STJ Jul 27, 2004 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1389          if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1390            /* add segment to before tail of unacked list, keeping the list sorted */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1391            struct tcp_seg **cur_seg = &(pcb->unacked);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1392            while (*cur_seg &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1393                   TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1394              cur_seg = &((*cur_seg)->next );
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1395            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1396            seg->next = (*cur_seg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1397            (*cur_seg) = seg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1398          } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1399            /* add segment to tail of unacked list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1400            useg->next = seg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1401            useg = useg->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1402          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1403        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1404        /* do not queue empty segments on the unacked list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1405      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1406        tcp_seg_free(seg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1407      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1408      seg = pcb->unsent;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1409    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1410  #if TCP_OVERSIZE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1411    if (pcb->unsent == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1412      /* last unsent has been removed, reset unsent_oversize */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1413      pcb->unsent_oversize = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1414    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1415  #endif /* TCP_OVERSIZE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1416  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1417  output_done:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1418    tcp_clear_flags(pcb, TF_NAGLEMEMERR);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1419    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1420  }
.L164:
	mov	d2,#-4
	ret
.L166:
.L165:
	ld.a	a15,[a13]16
	ld.w	d4,[a15]4
	call	lwip_htonl
.L1005:
	ld.w	d0,[a12]68
.L1312:
	sub	d2,d0
	ld.hu	d0,[a13]8
.L1313:
	add	d2,d0
.L1314:
	jge.u	d8,d2,.L168
.L1315:
	ld.hu	d15,[a12]96
.L1316:
	jne	d15,d8,.L169
.L1317:
	ld.w	d15,[a12]112
.L1318:
	jne	d15,#0,.L170
.L1319:
	ld.bu	d15,[a12]153
.L1320:
	jne	d15,#0,.L171
.L1321:
	st.b	[a12]152,d15
.L1322:
	mov	d0,#1
	st.b	[a12]153,d0
.L1323:
	st.b	[a12]154,d15
.L171:
.L170:
.L169:
.L163:
	ld.hu	d15,[a12]26
.L1324:
	jz.t	d15:1,.L172
.L1325:
	mov.aa	a4,a12
.L1008:
	j	tcp_send_empty_ack
.L168:
	mov	d15,#0
	st.b	[a12]153,d15
.L1326:
	ld.a	a14,[a12]112
.L1012:
	jz.a	a14,.L177
.L1327:
	fcall	.cocofun_114
.L1328:
	j	.L177
.L178:
	ld.a	a2,[a13]16
	ld.hu	d4,[a2]12
	call	lwip_htons
	jz.t	d2:2,.L179
	movh.a	a15,#@his(.65.str)
	lea	a15,[a15]@los(.65.str)
	st.a	[a10],a15
	mov	d15,#1334
	st.w	[a10]4,d15
.L1009:
	fcall	.cocofun_108
.L1018:
	st.a	[a10]8,a15
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L179:
	ld.w	d15,[a12]112
	jeq	d15,#0,.L180
	ld.hu	d15,[a12]26
	and	d15,#68
	jne	d15,#0,.L181
	ld.a	a15,[a12]108
	jz.a	a15,.L182
	ld.w	d15,[a15]
	jne	d15,#0,.L183
	ld.hu	d15,[a15]8
	ld.hu	d0,[a12]50
	jge.u	d15,d0,.L184
.L182:
	ld.hu	d15,[a12]100
	jeq	d15,#0,.L185
	ld.hu	d15,[a12]102
	jlt.u	d15,#8,.L186
.L185:
.L184:
.L183:
.L181:
.L180:
	mov	d15,#1
	j	.L187
.L186:
	mov	d15,#0
.L187:
	jne	d15,#0,.L188
.L1329:
	ld.hu	d15,[a12]26
.L1330:
	and	d15,#160
.L1331:
	jeq	d15,#0,.L189
.L188:
	ld.bu	d15,[a12]20
.L1332:
	jeq	d15,#2,.L190
.L1333:
	ld.a	a15,[a13]16
	mov	d4,#16
	ld.hu	d15,[a15]12
	call	lwip_htons
	or	d15,d2
	st.h	[a15]12,d15
.L190:
	mov.aa	a4,a13
.L1013:
	mov.aa	a5,a12
.L1015:
	ld.a	a6,[a10]12
.L1016:
	call	tcp_output_segment
.L1014:
	jeq	d2,#0,.L191
.L1334:
	fcall	.cocofun_116
.L1335:
	ret
.L191:
	mov	d15,#0
	st.h	[a13]10,d15
.L1336:
	ld.a	a15,[a13]
.L1337:
	st.a	[a12]108,a15
.L1338:
	ld.bu	d15,[a12]20
.L1339:
	jeq	d15,#2,.L193
.L1340:
	ld.hu	d15,[a12]26
	mov.u	d0,#65532
	and	d15,d0
	st.h	[a12]26,d15
.L193:
	ld.a	a15,[a13]16
	ld.hu	d4,[a15]12
	call	lwip_htons
.L1017:
	ld.a	a15,[a13]16
.L1341:
	and	d15,d2,#3
.L1342:
	ld.w	d4,[a15]4
	call	lwip_htonl
.L1343:
	ld.hu	d0,[a13]8
	cadd	d0,d15,#1
.L1019:
	add	d2,d0
.L1344:
	fcall	.cocofun_113
.L1345:
	ld.a	a15,[a13]16
	ld.hu	d4,[a15]12
	call	lwip_htons
.L1020:
	and	d15,d2,#3
	ld.hu	d0,[a13]8
	cadd	d0,d15,#1
.L1346:
	jeq	d0,#0,.L195
.L1347:
	mov.a	a15,#0
.L1348:
	st.a	[a13],a15
.L1349:
	ld.w	d15,[a12]112
.L1350:
	jne	d15,#0,.L196
.L1351:
	st.a	[a12]112,a13
.L1352:
	j	.L197
.L196:
	ld.a	a15,[a13]16
	ld.w	d4,[a15]4
	call	lwip_htonl
	ld.a	a15,[a14]16
	mov	d15,d2
	ld.w	d4,[a15]4
	call	lwip_htonl
	sub	d15,d2
.L1353:
	jge	d15,#0,.L198
.L575:
	lea	a15,[a12]112
.L1021:
	j	.L199
.L200:
	ld.a	a15,[a15]
.L199:
	ld.a	a2,[a15]
	jz.a	a2,.L201
.L1354:
	ld.a	a2,[a2]16
	ld.w	d4,[a2]4
	call	lwip_htonl
	ld.a	a2,[a13]16
	mov	d15,d2
	ld.w	d4,[a2]4
	call	lwip_htonl
	sub	d15,d2
	jlt	d15,#0,.L200
.L201:
	ld.a	a2,[a15]
.L1355:
	st.a	[a13],a2
.L1356:
	st.a	[a15],a13
.L576:
	j	.L202
.L198:
	st.a	[a14],a13
.L197:
	mov.aa	a14,a13
.L1357:
	j	.L203
.L195:
	mov.aa	a4,a13
.L1022:
	call	tcp_seg_free
.L203:
.L202:
	ld.a	a13,[a12]108
.L177:
	jz.a	a13,.L204
.L1358:
	ld.a	a15,[a13]16
	ld.w	d4,[a15]4
	call	lwip_htonl
.L1359:
	ld.w	d15,[a12]68
.L1360:
	sub	d2,d15
	ld.hu	d15,[a13]8
.L1361:
	add	d2,d15
.L1362:
	jge.u	d8,d2,.L178
.L204:
.L189:
	ld.w	d15,[a12]108
.L1363:
	fcall	.cocofun_111
.L172:
	ld.hu	d15,[a12]26
	mov.u	d0,#65407
	and	d15,d0
	st.h	[a12]26,d15
.L162:
	mov	d2,#0
	ret
.L563:
	
__tcp_output_function_end:
	.size	tcp_output,__tcp_output_function_end-tcp_output
.L359:
	; End of function
	
	.sdecl	'.text.tcp_out..cocofun_113',code,cluster('.cocofun_113')
	.sect	'.text.tcp_out..cocofun_113'
	.align	2
; Function .cocofun_113
.L313:
.cocofun_113:	.type	func
; Function body .cocofun_113, coco_iter:0
	ld.w	d15,[a12]80
	sub	d15,d2
.L1763:
	jge	d15,#0,.L194
.L1764:
	st.w	[a12]80,d2
.L194:
	fret
.L504:
	; End of function
	.sdecl	'.text.tcp_out.tcp_output_segment_busy',code,cluster('tcp_output_segment_busy')
	.sect	'.text.tcp_out.tcp_output_segment_busy'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1421  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1422  /** Check if a segment's pbufs are used by someone else than TCP.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1423   * This can happen on retransmission if the pbuf of this segment is still
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1424   * referenced by the netif driver due to deferred transmission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1425   * This is the case (only!) if someone down the TX call path called
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1426   * pbuf_ref() on one of the pbufs!
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1427   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1428   * @arg seg the tcp segment to check
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1429   * @return 1 if ref != 1, 0 if ref == 1
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1430   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1431  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1432  tcp_output_segment_busy(const struct tcp_seg *seg)
; Function tcp_output_segment_busy
.L315:
tcp_output_segment_busy:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1433  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1434    LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1435  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1436    /* We only need to check the first pbuf here:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1437       If a pbuf is queued for transmission, a driver calls pbuf_ref(),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1438       which only changes the ref count of the first pbuf */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1439    if (seg->p->ref != 1) {
	ld.a	a15,[a4]4
.L1690:
	ld.bu	d15,[a15]14
.L1691:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1440      /* other reference found */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1441      return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1442    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1443    /* no other references found */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1444    return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1445  }
	ne	d2,d15,#1
	ret
.L686:
	
__tcp_output_segment_busy_function_end:
	.size	tcp_output_segment_busy,__tcp_output_segment_busy_function_end-tcp_output_segment_busy
.L449:
	; End of function
	
	.sdecl	'.text.tcp_out.tcp_output_segment',code,cluster('tcp_output_segment')
	.sect	'.text.tcp_out.tcp_output_segment'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1446  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1447  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1448   * Called by tcp_output() to actually send a TCP segment over IP.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1449   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1450   * @param seg the tcp_seg to send
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1451   * @param pcb the tcp_pcb for the TCP connection used to send the segment
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1452   * @param netif the netif used to send the segment
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1453   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1454  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1455  tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
; Function tcp_output_segment
.L317:
tcp_output_segment:	.type	func
	sub.a	a10,#16
.L1023:
	mov.aa	a15,a4
.L1025:
	mov.aa	a13,a5
.L1027:
	mov.aa	a14,a6
.L1028:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1456  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1457    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1458    u16_t len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1459    u32_t *opts;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1460  #if TCP_CHECKSUM_ON_COPY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1461    int seg_chksum_was_swapped = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1462  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1463  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1464    LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1465    LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1466    LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1467  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1468    if (tcp_output_segment_busy(seg)) {
	call	tcp_output_segment_busy
.L1024:
	jeq	d2,#0,.L208
.L1576:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1469      /* This should not happen: rexmit functions should have checked this.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1470         However, since this function modifies p->len, we must not continue in this case. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1471      LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1472      return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1473    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1474  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1475    /* The TCP header has already been constructed, but the ackno and
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1476     wnd fields remain. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1477    seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1478  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1479    /* advertise our receive window size in this TCP segment */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1480  #if LWIP_WND_SCALE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1481    if (seg->flags & TF_SEG_OPTS_WND_SCALE) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1482      /* The Window field in a SYN segment itself (the only type where we send
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1483         the window scale option) is never scaled. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1484      seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1485    } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1486  #endif /* LWIP_WND_SCALE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1487    {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1488      seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1489    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1490  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1491    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1492  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1493    /* Add any requested options.  NB MSS option is only set on SYN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1494       packets, so ignore it here */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1495    /* cast through void* to get rid of alignment warnings */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1496    opts = (u32_t *)(void *)(seg->tcphdr + 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1497    if (seg->flags & TF_SEG_OPTS_MSS) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1498      u16_t mss;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1499  #if TCP_CALCULATE_EFF_SEND_MSS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1500      mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1501  #else /* TCP_CALCULATE_EFF_SEND_MSS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1502      mss = TCP_MSS;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1503  #endif /* TCP_CALCULATE_EFF_SEND_MSS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1504      *opts = TCP_BUILD_MSS_OPTION(mss);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1505      opts += 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1506    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1507  #if LWIP_TCP_TIMESTAMPS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1508    pcb->ts_lastacksent = pcb->rcv_nxt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1509  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1510    if (seg->flags & TF_SEG_OPTS_TS) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1511      tcp_build_timestamp_option(pcb, opts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1512      opts += 3;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1513    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1514  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1515  #if LWIP_WND_SCALE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1516    if (seg->flags & TF_SEG_OPTS_WND_SCALE) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1517      tcp_build_wnd_scale_option(opts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1518      opts += 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1519    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1520  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1521  #if LWIP_TCP_SACK_OUT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1522    if (seg->flags & TF_SEG_OPTS_SACK_PERM) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1523      /* Pad with two NOP options to make everything nicely aligned
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1524       * NOTE: When we send both timestamp and SACK_PERM options,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1525       * we could use the first two NOPs before the timestamp to store SACK_PERM option,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1526       * but that would complicate the code.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1527       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1528      *(opts++) = PP_HTONL(0x01010402);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1529    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1530  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1531  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1532    /* Set retransmission timer running if it is not currently enabled
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1533       This must be set before checking the route. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1534    if (pcb->rtime < 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1535      pcb->rtime = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1536    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1537  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1538    if (pcb->rttest == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1539      pcb->rttest = tcp_ticks;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1540      pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1541  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1542      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_output_segment: rtseq %"U32_F"\n", pcb->rtseq));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1543    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1544    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1545                                   lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1546                                   seg->len));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1547  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1548    len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1549    if (len == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1550      /** Exclude retransmitted segments from this count. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1551      MIB2_STATS_INC(mib2.tcpoutsegs);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1552    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1553  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1554    seg->p->len -= len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1555    seg->p->tot_len -= len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1556  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1557    seg->p->payload = seg->tcphdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1558  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1559    seg->tcphdr->chksum = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1560  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1561  #ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1562    opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1563  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1564    LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1565  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1566  #if CHECKSUM_GEN_TCP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1567    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1568  #if TCP_CHECKSUM_ON_COPY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1569      u32_t acc;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1570  #if TCP_CHECKSUM_ON_COPY_SANITY_CHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1571      u16_t chksum_slow = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1572                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1573  #endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1574      if ((seg->flags & TF_SEG_DATA_CHECKSUMMED) == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1575        LWIP_ASSERT("data included but not checksummed",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1576                    seg->p->tot_len == TCPH_HDRLEN_BYTES(seg->tcphdr));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1577      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1578  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1579      /* rebuild TCP header checksum (TCP header changes for retransmissions!) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1580      acc = ip_chksum_pseudo_partial(seg->p, IP_PROTO_TCP,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1581                                     seg->p->tot_len, TCPH_HDRLEN_BYTES(seg->tcphdr), &pcb->local_ip, &pcb->remote_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1582      /* add payload checksum */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1583      if (seg->chksum_swapped) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1584        seg_chksum_was_swapped = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1585        seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1586        seg->chksum_swapped = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1587      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1588      acc = (u16_t)~acc + seg->chksum;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1589      seg->tcphdr->chksum = (u16_t)~FOLD_U32T(acc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1590  #if TCP_CHECKSUM_ON_COPY_SANITY_CHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1591      if (chksum_slow != seg->tcphdr->chksum) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1592        TCP_CHECKSUM_ON_COPY_SANITY_CHECK_FAIL(
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1593          ("tcp_output_segment: calculated checksum is %"X16_F" instead of %"X16_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1594           seg->tcphdr->chksum, chksum_slow));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1595        seg->tcphdr->chksum = chksum_slow;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1596      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1597  #endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1598  #else /* TCP_CHECKSUM_ON_COPY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1599      seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1600                                             seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1601  #endif /* TCP_CHECKSUM_ON_COPY */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1602    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1603  #endif /* CHECKSUM_GEN_TCP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1604    TCP_STATS_INC(tcp.xmit);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1605  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1606    NETIF_SET_HINTS(netif, &(pcb->netif_hints));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1607    err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1608                       pcb->tos, IP_PROTO_TCP, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1609    NETIF_RESET_HINTS(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1610  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1611  #if TCP_CHECKSUM_ON_COPY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1612    if (seg_chksum_was_swapped) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1613      /* if data is added to this segment later, chksum needs to be swapped,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1614         so restore this now */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1615      seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1616      seg->chksum_swapped = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1617    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1618  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1619  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1620    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1621  }
	mov	d2,#0
	ret
.L208:
	ld.a	a12,[a15]16
.L1577:
	ld.w	d4,[a13]36
	call	lwip_htonl
.L1578:
	st.w	[a12]8,d2
.L1579:
	ld.a	a12,[a15]16
.L1580:
	ld.hu	d4,[a13]42
	call	lwip_htons
.L1581:
	st.h	[a12]14,d2
.L1582:
	ld.w	d15,[a13]36
.L1583:
	ld.hu	d0,[a13]42
.L1584:
	add	d15,d0
	st.w	[a13]44,d15
.L1585:
	ld.a	a2,[a15]16
.L1586:
	ld.bu	d15,[a15]12
.L1587:
	lea	a12,[a2]20
.L1029:
	jz.t	d15:0,.L210
.L654:
	mov	d4,#1460
	lea	a5,[a13]4
	mov.aa	a4,a14
.L1030:
	call	tcp_eff_send_mss_netif
.L1031:
	movh	d4,#516
	or	d4,d2
	call	lwip_htonl
.L1032:
	st.w	[a12+],d2
.L210:
	ld.h	d15,[a13]48
.L1588:
	jge	d15,#0,.L211
.L1589:
	mov	d15,#0
	st.h	[a13]48,d15
.L211:
	ld.w	d15,[a13]52
.L1590:
	jne	d15,#0,.L212
.L1591:
	ld.w	d15,tcp_ticks
.L1592:
	st.w	[a13]52,d15
.L1593:
	ld.a	a2,[a15]16
	ld.w	d4,[a2]4
	call	lwip_htonl
.L1594:
	st.w	[a13]56,d2
.L212:
	ld.a	a2,[a15]4
.L1595:
	ld.w	d15,[a15]16
.L1596:
	ld.w	d0,[a2]4
.L1597:
	sub	d15,d0
.L1598:
	extr.u	d0,d15,#0,#16
	ld.hu	d15,[a2]10
.L1033:
	sub	d15,d0
	st.h	[a2]10,d15
.L1599:
	ld.a	a2,[a15]4
.L1600:
	ld.hu	d15,[a2]8
.L1601:
	sub	d15,d0
	st.h	[a2]8,d15
.L1602:
	mov	d15,#0
.L1603:
	ld.a	a2,[a15]4
.L1604:
	ld.a	a4,[a15]16
.L1605:
	st.a	[a2]4,a4
.L1606:
	ld.a	a2,[a15]16
.L1607:
	st.h	[a2]16,d15
.L1608:
	ld.bu	d15,[a15]12
	ld.a	a2,[a15]16
	and	d15,#1
	ne	d15,d15,#0
	addsc.a	a2,a2,d15,#2
	lea	a2,[a2]20
	jeq.a	a12,a2,.L213
	movh.a	a2,#@his(.74.str)
	lea	a2,[a2]@los(.74.str)
	st.a	[a10],a2
	mov	d15,#1564
	st.w	[a10]4,d15
.L1026:
	fcall	.cocofun_110
.L1034:
	st.a	[a10]8,a2
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L213:
	ld.a	a4,[a15]4
.L1609:
	mov	d4,#6
	ld.a	a12,[a15]16
.L1035:
	lea	a6,[a13]4
	mov.aa	a5,a13
.L1036:
	ld.hu	d5,[a4]8
.L1610:
	call	ip_chksum_pseudo
.L1037:
	st.h	[a12]16,d2
.L1611:
	movh.a	a2,#@his(lwip_stats+144)
	ld.hu	d15,[a2]@los(lwip_stats+144)
.L1612:
	mov	d6,#6
	mov.aa	a7,a14
.L1038:
	add	d15,#1
	st.h	[a2]@los(lwip_stats+144),d15
.L1613:
	lea	a6,[a13]4
	ld.a	a4,[a15]4
	ld.bu	d4,[a13]11
	ld.bu	d5,[a13]10
	mov.aa	a5,a13
.L1039:
	j	ip4_output_if
.L646:
	
__tcp_output_segment_function_end:
	.size	tcp_output_segment,__tcp_output_segment_function_end-tcp_output_segment
.L424:
	; End of function
	
	.sdecl	'.text.tcp_out.tcp_rexmit_rto_prepare',code,cluster('tcp_rexmit_rto_prepare')
	.sect	'.text.tcp_out.tcp_rexmit_rto_prepare'
	.align	2
	
	.global	tcp_rexmit_rto_prepare

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1622  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1623  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1624   * Requeue all unacked segments for retransmission
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1625   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1626   * Called by tcp_slowtmr() for slow retransmission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1627   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1628   * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1629   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1630  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1631  tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
; Function tcp_rexmit_rto_prepare
.L319:
tcp_rexmit_rto_prepare:	.type	func
	sub.a	a10,#16
.L1040:
	mov.aa	a12,a4
.L1042:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1632  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1633    struct tcp_seg *seg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1634  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1635    LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
	jnz.a	a12,.L215
.L1395:
	movh.a	a2,#@his(.75.str)
	lea	a2,[a2]@los(.75.str)
	st.a	[a10],a2
	mov	d15,#1635
	st.w	[a10]4,d15
.L1041:
	fcall	.cocofun_108
.L1043:
	st.a	[a10]8,a15
	fcall	.cocofun_107
.L1044:
	call	Ifx_Lwip_printf
.L215:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1636  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1637    if (pcb->unacked == NULL) {
	ld.a	a13,[a12]112
.L1045:
	jz.a	a13,.L216
.L1396:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1638      return ERR_VAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1639    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1640  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1641    /* Move all unacked segments to the head of the unsent queue.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1642       However, give up if any of the unsent pbufs are still referenced by the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1643       netif driver due to deferred transmission. No point loading the link further
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1644       if it is struggling to flush its buffered writes. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1645    for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
	j	.L217
.L218:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1646      if (tcp_output_segment_busy(seg)) {
	mov.aa	a4,a13
	call	tcp_output_segment_busy
.L1397:
	jne	d2,#0,.L219
.L1398:
	ld.a	a13,[a13]
.L217:
	ld.w	d15,[a13]
.L1399:
	jne	d15,#0,.L218
.L1400:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1647        LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1648        return ERR_VAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1649      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1650    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1651    if (tcp_output_segment_busy(seg)) {
	mov.aa	a4,a13
	call	tcp_output_segment_busy
.L1401:
	jeq	d2,#0,.L220
.L219:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1652      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1653      return ERR_VAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1654    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1655    /* concatenate unsent queue after unacked queue */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1656    seg->next = pcb->unsent;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1657  #if TCP_OVERSIZE_DBGCHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1658    /* if last unsent changed, we need to update unsent_oversize */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1659    if (pcb->unsent == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1660      pcb->unsent_oversize = seg->oversize_left;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1661    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1662  #endif /* TCP_OVERSIZE_DBGCHECK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1663    /* unsent queue is the concatenated queue (of unacked, unsent) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1664    pcb->unsent = pcb->unacked;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1665    /* unacked queue is now empty */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1666    pcb->unacked = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1667  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1668    /* Mark RTO in-progress */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1669    tcp_set_flags(pcb, TF_RTO);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1670    /* Record the next byte following retransmit */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1671    pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1672    /* Don't take any RTT measurements after retransmitting. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1673    pcb->rttest = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1674  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1675    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1676  }
.L216:
	mov	d2,#-6
	ret
.L220:
	ld.a	a2,[a12]108
.L1402:
	st.a	[a13],a2
.L1403:
	ld.w	d15,[a12]108
.L1404:
	jne	d15,#0,.L222
.L1405:
	ld.hu	d15,[a13]10
.L1406:
	st.h	[a12]104,d15
.L222:
	ld.a	a2,[a12]112
.L1407:
	st.a	[a12]108,a2
.L1408:
	mov.a	a15,#0
.L1409:
	st.a	[a12]112,a15
.L1410:
	ld.hu	d15,[a12]26
	insert	d15,d15,#1,#11,#1
	st.h	[a12]26,d15
.L1411:
	ld.a	a15,[a13]16
	ld.hu	d4,[a15]12
	call	lwip_htons
.L1412:
	ld.a	a15,[a13]16
.L1413:
	and	d15,d2,#3
.L1414:
	ld.w	d4,[a15]4
	call	lwip_htonl
.L1415:
	ld.hu	d0,[a13]8
	cadd	d0,d15,#1
.L1416:
	add	d2,d0
	st.w	[a12]76,d2
.L1417:
	mov	d2,#0
	st.w	[a12]52,d2
.L1418:
	ret
.L586:
	
__tcp_rexmit_rto_prepare_function_end:
	.size	tcp_rexmit_rto_prepare,__tcp_rexmit_rto_prepare_function_end-tcp_rexmit_rto_prepare
.L374:
	; End of function
	
	.sdecl	'.text.tcp_out.tcp_rexmit_rto_commit',code,cluster('tcp_rexmit_rto_commit')
	.sect	'.text.tcp_out.tcp_rexmit_rto_commit'
	.align	2
	
	.global	tcp_rexmit_rto_commit

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1677  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1678  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1679   * Requeue all unacked segments for retransmission
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1680   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1681   * Called by tcp_slowtmr() for slow retransmission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1682   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1683   * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1684   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1685  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1686  tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
; Function tcp_rexmit_rto_commit
.L321:
tcp_rexmit_rto_commit:	.type	func
	sub.a	a10,#16
.L1046:
	mov.aa	a12,a4
.L1048:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1687  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1688    LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
	jnz.a	a12,.L224
.L1423:
	movh.a	a15,#@his(.77.str)
	lea	a15,[a15]@los(.77.str)
	st.a	[a10],a15
	mov	d15,#1688
	st.w	[a10]4,d15
.L1047:
	fcall	.cocofun_108
.L1049:
	st.a	[a10]8,a15
	fcall	.cocofun_107
.L1050:
	call	Ifx_Lwip_printf
.L224:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1689  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1690    /* increment number of retransmissions */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1691    if (pcb->nrtx < 0xFF) {
	fcall	.cocofun_112
.L1424:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1692      ++pcb->nrtx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1693    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1694    /* Do the actual retransmission */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1695    tcp_output(pcb);
	mov.aa	a4,a12
.L1051:
	j	tcp_output
.L589:
	
__tcp_rexmit_rto_commit_function_end:
	.size	tcp_rexmit_rto_commit,__tcp_rexmit_rto_commit_function_end-tcp_rexmit_rto_commit
.L379:
	; End of function
	
	.sdecl	'.text.tcp_out..cocofun_112',code,cluster('.cocofun_112')
	.sect	'.text.tcp_out..cocofun_112'
	.align	2
; Function .cocofun_112
.L323:
.cocofun_112:	.type	func
; Function body .cocofun_112, coco_iter:0
	ld.bu	d0,[a12]66
.L1756:
	mov	d15,#255
.L1757:
	jge.u	d0,d15,.L225
.L1758:
	add	d0,#1
	st.b	[a12]66,d0
.L225:
	fret
.L499:
	; End of function
	.sdecl	'.text.tcp_out.tcp_rexmit_rto',code,cluster('tcp_rexmit_rto')
	.sect	'.text.tcp_out.tcp_rexmit_rto'
	.align	2
	
	.global	tcp_rexmit_rto

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1696  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1697  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1698  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1699   * Requeue all unacked segments for retransmission
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1700   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1701   * Called by tcp_process() only, tcp_slowtmr() needs to do some things between
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1702   * "prepare" and "commit".
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1703   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1704   * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1705   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1706  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1707  tcp_rexmit_rto(struct tcp_pcb *pcb)
; Function tcp_rexmit_rto
.L325:
tcp_rexmit_rto:	.type	func
	sub.a	a10,#16
.L1052:
	mov.aa	a12,a4
.L1054:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1708  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1709    LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
	jnz.a	a12,.L226
.L1429:
	movh.a	a15,#@his(.78.str)
	lea	a15,[a15]@los(.78.str)
	st.a	[a10],a15
	mov	d15,#1709
	st.w	[a10]4,d15
.L1053:
	fcall	.cocofun_108
.L1055:
	st.a	[a10]8,a15
	fcall	.cocofun_107
.L1056:
	call	Ifx_Lwip_printf
.L226:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1710  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1711    if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
	mov.aa	a4,a12
.L1057:
	call	tcp_rexmit_rto_prepare
.L1058:
	jne	d2,#0,.L227
.L1430:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1712      tcp_rexmit_rto_commit(pcb);
	mov.aa	a4,a12
.L1059:
	j	tcp_rexmit_rto_commit
.L227:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1713    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1714  }
	ret
.L592:
	
__tcp_rexmit_rto_function_end:
	.size	tcp_rexmit_rto,__tcp_rexmit_rto_function_end-tcp_rexmit_rto
.L384:
	; End of function
	
	.sdecl	'.text.tcp_out.tcp_rexmit',code,cluster('tcp_rexmit')
	.sect	'.text.tcp_out.tcp_rexmit'
	.align	2
	
	.global	tcp_rexmit

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1715  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1716  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1717   * Requeue the first unacked segment for retransmission
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1718   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1719   * Called by tcp_receive() for fast retransmit.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1720   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1721   * @param pcb the tcp_pcb for which to retransmit the first unacked segment
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1722   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1723  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1724  tcp_rexmit(struct tcp_pcb *pcb)
; Function tcp_rexmit
.L327:
tcp_rexmit:	.type	func
	sub.a	a10,#16
.L1060:
	mov.aa	a12,a4
.L1062:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1725  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1726    struct tcp_seg *seg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1727    struct tcp_seg **cur_seg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1728  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1729    LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
	jnz.a	a12,.L228
.L1379:
	movh.a	a2,#@his(.79.str)
	lea	a2,[a2]@los(.79.str)
	st.a	[a10],a2
	mov	d15,#1729
	st.w	[a10]4,d15
.L1061:
	fcall	.cocofun_108
.L1063:
	st.a	[a10]8,a15
	fcall	.cocofun_107
.L1064:
	call	Ifx_Lwip_printf
.L228:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1730  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1731    if (pcb->unacked == NULL) {
	ld.a	a13,[a12]112
.L1380:
	jz.a	a13,.L229
.L1381:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1732      return ERR_VAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1733    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1734  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1735    seg = pcb->unacked;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1736  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1737    /* Give up if the segment is still referenced by the netif driver
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1738       due to deferred transmission. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1739    if (tcp_output_segment_busy(seg)) {
	mov.aa	a4,a13
	call	tcp_output_segment_busy
.L1382:
	jeq	d2,#0,.L230

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1740      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1741      return ERR_VAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1742    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1743  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1744    /* Move the first unacked segment to the unsent queue */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1745    /* Keep the unsent queue sorted. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1746    pcb->unacked = seg->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1747  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1748    cur_seg = &(pcb->unsent);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1749    while (*cur_seg &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1750           TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1751      cur_seg = &((*cur_seg)->next );
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1752    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1753    seg->next = *cur_seg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1754    *cur_seg = seg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1755  #if TCP_OVERSIZE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1756    if (seg->next == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1757      /* the retransmitted segment is last in unsent, so reset unsent_oversize */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1758      pcb->unsent_oversize = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1759    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1760  #endif /* TCP_OVERSIZE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1761  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1762    if (pcb->nrtx < 0xFF) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1763      ++pcb->nrtx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1764    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1765  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1766    /* Don't take any rtt measurements after retransmitting. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1767    pcb->rttest = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1768  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1769    /* Do the actual retransmission. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1770    MIB2_STATS_INC(mib2.tcpretranssegs);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1771    /* No need to call tcp_output: we are always called from tcp_input()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1772       and thus tcp_output directly returns. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1773    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1774  }
.L229:
	mov	d2,#-6
	ret
.L230:
	ld.a	a2,[a13]
.L1383:
	st.a	[a12]112,a2
.L1384:
	lea	a14,[a12]108
.L1066:
	j	.L232
.L233:
	ld.a	a14,[a14]
.L232:
	ld.a	a15,[a14]
	jz.a	a15,.L234
.L1385:
	ld.a	a15,[a15]16
	ld.w	d4,[a15]4
	call	lwip_htonl
	ld.a	a15,[a13]16
	mov	d15,d2
	ld.w	d4,[a15]4
	call	lwip_htonl
	sub	d15,d2
	jlt	d15,#0,.L233
.L234:
	ld.a	a15,[a14]
.L1386:
	st.a	[a13],a15
.L1387:
	st.a	[a14],a13
.L1388:
	ld.w	d15,[a13]
.L1389:
	fcall	.cocofun_111
.L1065:
	fcall	.cocofun_112
.L1067:
	mov	d2,#0
	st.w	[a12]52,d2
.L1390:
	ret
.L583:
	
__tcp_rexmit_function_end:
	.size	tcp_rexmit,__tcp_rexmit_function_end-tcp_rexmit
.L369:
	; End of function
	
	.sdecl	'.text.tcp_out.tcp_rexmit_fast',code,cluster('tcp_rexmit_fast')
	.sect	'.text.tcp_out.tcp_rexmit_fast'
	.align	2
	
	.global	tcp_rexmit_fast

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1775  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1776  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1777  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1778   * Handle retransmission after three dupacks received
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1779   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1780   * @param pcb the tcp_pcb for which to retransmit the first unacked segment
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1781   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1782  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1783  tcp_rexmit_fast(struct tcp_pcb *pcb)
; Function tcp_rexmit_fast
.L329:
tcp_rexmit_fast:	.type	func
	sub.a	a10,#16
.L1068:
	mov.aa	a12,a4
.L1070:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1784  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1785    LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
	jnz.a	a12,.L238
.L1435:
	movh.a	a15,#@his(.81.str)
	lea	a15,[a15]@los(.81.str)
	st.a	[a10],a15
	mov	d15,#1785
	st.w	[a10]4,d15
.L1069:
	fcall	.cocofun_108
.L1071:
	st.a	[a10]8,a15
	fcall	.cocofun_107
.L1072:
	call	Ifx_Lwip_printf
.L238:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1786  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1787    if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
	ld.w	d15,[a12]112
.L1436:
	jeq	d15,#0,.L239
.L1437:
	ld.hu	d15,[a12]26
.L1438:
	jnz.t	d15:2,.L240
.L1439:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1788      /* This is fast retransmit. Retransmit the first unacked segment. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1789      LWIP_DEBUGF(TCP_FR_DEBUG,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1790                  ("tcp_receive: dupacks %"U16_F" (%"U32_F
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1791                   "), fast retransmit %"U32_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1792                   (u16_t)pcb->dupacks, pcb->lastack,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1793                   lwip_ntohl(pcb->unacked->tcphdr->seqno)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1794      if (tcp_rexmit(pcb) == ERR_OK) {
	mov.aa	a4,a12
.L1073:
	call	tcp_rexmit
.L1074:
	jne	d2,#0,.L241
.L1440:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1795        /* Set ssthresh to half of the minimum of the current
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1796         * cwnd and the advertised window */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1797        pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
	ld.hu	d15,[a12]72
	ld.hu	d0,[a12]96
	min.u	d15,d15,d0
.L1441:
	sha	d15,#-1
	st.h	[a12]74,d15
.L1442:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1798  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1799        /* The minimum value for ssthresh should be 2 MSS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1800        if (pcb->ssthresh < (2U * pcb->mss)) {
	ld.hu	d0,[a12]50
	sh	d1,d0,#1
.L1443:
	jge.u	d15,d1,.L242
.L1444:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1801          LWIP_DEBUGF(TCP_FR_DEBUG,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1802                      ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1803                       " should be min 2 mss %"U16_F"...\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1804                       pcb->ssthresh, (u16_t)(2 * pcb->mss)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1805          pcb->ssthresh = 2 * pcb->mss;
	sha	d0,#1
	st.h	[a12]74,d0
.L242:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1806        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1807  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1808        pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
	ld.hu	d15,[a12]50
.L1445:
	ld.hu	d1,[a12]74
.L1446:
	madd	d15,d1,d15,#3
	st.h	[a12]72,d15
.L1447:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1809        tcp_set_flags(pcb, TF_INFR);
	ld.hu	d15,[a12]26
	or	d15,#4
	st.h	[a12]26,d15
.L1448:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1810  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1811        /* Reset the retransmission timer to prevent immediate rto retransmissions */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1812        pcb->rtime = 0;
	mov	d15,#0
	st.h	[a12]48,d15
.L241:
.L240:
.L239:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1813      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1814    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1815  }
	ret
.L594:
	
__tcp_rexmit_fast_function_end:
	.size	tcp_rexmit_fast,__tcp_rexmit_fast_function_end-tcp_rexmit_fast
.L389:
	; End of function
	
	.sdecl	'.text.tcp_out.tcp_output_alloc_header_common',code,cluster('tcp_output_alloc_header_common')
	.sect	'.text.tcp_out.tcp_output_alloc_header_common'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1816  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1817  static struct pbuf *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1818  tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
; Function tcp_output_alloc_header_common
.L331:
tcp_output_alloc_header_common:	.type	func
	mov	e8,d7,d4
	sub.a	a10,#16
.L1075:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1819                          u32_t seqno_be /* already in network byte order */,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1820                          u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1821  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1822    struct tcp_hdr *tcphdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1823    struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1824  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1825    p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
	mov	d4,#36
	ld.hu	d10,[a10]16
.L1076:
	add	d5,d6,#20
	ld.hu	d11,[a10]20
.L1079:
	mov	d6,#640
	ld.bu	d12,[a10]24
.L1077:
	ld.hu	d13,[a10]28
.L1081:
	call	pbuf_alloc
.L1080:
	mov.aa	a12,a2
.L1082:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1826    if (p != NULL) {
	jz.a	a12,.L243
.L1696:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1827      LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
	ld.hu	d0,[a12]10
	mov	d15,#20
	jge.u	d0,d15,.L244
	movh.a	a15,#@his(.84.str)
	lea	a15,[a15]@los(.84.str)
	st.a	[a10],a15
	mov	d15,#1827
	st.w	[a10]4,d15
.L1078:
	fcall	.cocofun_108
.L1083:
	st.a	[a10]8,a15
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L244:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1828                  (p->len >= TCP_HLEN + optlen));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1829      tcphdr = (struct tcp_hdr *)p->payload;
	ld.a	a15,[a12]4
.L1084:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1830      tcphdr->src = lwip_htons(src_port);
	mov	d4,d10
	call	lwip_htons
.L1697:
	st.h	[a15],d2
.L1698:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1831      tcphdr->dest = lwip_htons(dst_port);
	mov	d4,d11
	call	lwip_htons
.L1699:
	st.h	[a15]2,d2
.L1085:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1832      tcphdr->seqno = seqno_be;
	st.w	[a15]4,d9
.L1086:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1833      tcphdr->ackno = lwip_htonl(ackno);
	mov	d4,d8
	call	lwip_htonl
.L1087:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1834      TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
	mov	d4,#20480
	st.w	[a15]8,d2
.L1700:
	or	d4,d12
	call	lwip_htons
	st.h	[a15]12,d2
.L1701:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1835      tcphdr->wnd = lwip_htons(wnd);
	mov	d4,d13
	call	lwip_htons
.L1702:
	st.h	[a15]14,d2
.L1703:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1836      tcphdr->chksum = 0;
	mov	d15,#0
	st.h	[a15]16,d15
.L1704:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1837      tcphdr->urgp = 0;
	st.h	[a15]18,d15
.L243:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1838    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1839    return p;
	mov.aa	a2,a12
.L1088:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1840  }
	ret
.L689:
	
__tcp_output_alloc_header_common_function_end:
	.size	tcp_output_alloc_header_common,__tcp_output_alloc_header_common_function_end-tcp_output_alloc_header_common
.L454:
	; End of function
	
	.sdecl	'.text.tcp_out.tcp_output_alloc_header',code,cluster('tcp_output_alloc_header')
	.sect	'.text.tcp_out.tcp_output_alloc_header'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1841  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1842  /** Allocate a pbuf and create a tcphdr at p->payload, used for output
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1843   * functions other than the default tcp_output -> tcp_output_segment
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1844   * (e.g. tcp_send_empty_ack, etc.)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1845   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1846   * @param pcb tcp pcb for which to send a packet (used to initialize tcp_hdr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1847   * @param optlen length of header-options
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1848   * @param datalen length of tcp data to reserve in pbuf
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1849   * @param seqno_be seqno in network byte order (big-endian)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1850   * @return pbuf with p->payload being the tcp_hdr
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1851   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1852  static struct pbuf *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1853  tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
; Function tcp_output_alloc_header
.L333:
tcp_output_alloc_header:	.type	func
	mov.aa	a15,a4
.L1093:
	sub.a	a10,#16
.L1089:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1854                          u32_t seqno_be /* already in network byte order */)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1855  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1856    struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1857  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1858    LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1859  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1860    p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1861      seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
	ld.hu	d15,[a15]22
	st.h	[a10],d15
.L1709:
	ld.hu	d15,[a15]24
.L1710:
	mov	d0,d5
	st.h	[a10]4,d15
.L1094:
	mov	d15,#16
	st.b	[a10]8,d15
.L1711:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1862      TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
	mov	d7,d6
	ld.hu	d15,[a15]42
.L1095:
	mov	d5,#0
	st.h	[a10]12,d15
.L1090:
	mov	d6,d0
	ld.w	d4,[a15]36
.L1091:
	call	tcp_output_alloc_header_common
.L1092:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1863    if (p != NULL) {
	jz.a	a2,.L246
.L1712:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1864      /* If we're sending a packet, update the announced right window edge */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1865      pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
	ld.w	d15,[a15]36
.L1713:
	ld.hu	d0,[a15]42
.L1714:
	add	d15,d0
	st.w	[a15]44,d15
.L246:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1866    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1867    return p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1868  }
	ret
.L700:
	
__tcp_output_alloc_header_function_end:
	.size	tcp_output_alloc_header,__tcp_output_alloc_header_function_end-tcp_output_alloc_header
.L459:
	; End of function
	
	.sdecl	'.text.tcp_out.tcp_output_fill_options',code,cluster('tcp_output_fill_options')
	.sect	'.text.tcp_out.tcp_output_fill_options'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1869  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1870  /* Fill in options for control segments */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1871  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1872  tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
; Function tcp_output_fill_options
.L335:
tcp_output_fill_options:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1873  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1874    struct tcp_hdr *tcphdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1875    u32_t *opts;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1876    u16_t sacks_len = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1877  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1878    LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1879  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1880    tcphdr = (struct tcp_hdr *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1881    opts = (u32_t *)(void *)(tcphdr + 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1882  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1883    /* NB. MSS and window scale options are only sent on SYNs, so ignore them here */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1884  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1885  #if LWIP_TCP_TIMESTAMPS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1886    if (optflags & TF_SEG_OPTS_TS) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1887      tcp_build_timestamp_option(pcb, opts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1888      opts += 3;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1889    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1890  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1891  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1892  #if LWIP_TCP_SACK_OUT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1893    if (pcb && (num_sacks > 0)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1894      tcp_build_sack_option(pcb, opts, num_sacks);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1895      /* 1 word for SACKs header (including 2xNOP), and 2 words for each SACK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1896      sacks_len = 1 + num_sacks * 2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1897      opts += sacks_len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1898    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1899  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1900    LWIP_UNUSED_ARG(num_sacks);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1901  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1902  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1903  #ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1904    opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1905  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1906  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1907    LWIP_UNUSED_ARG(pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1908    LWIP_UNUSED_ARG(sacks_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1909    LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1910    LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1911    LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1912  }
	ret
.L706:
	
__tcp_output_fill_options_function_end:
	.size	tcp_output_fill_options,__tcp_output_fill_options_function_end-tcp_output_fill_options
.L464:
	; End of function
	
	.sdecl	'.text.tcp_out.tcp_output_control_segment',code,cluster('tcp_output_control_segment')
	.sect	'.text.tcp_out.tcp_output_control_segment'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1913  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1914  /** Output a control segment pbuf to IP.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1915   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1916   * Called from tcp_rst, tcp_send_empty_ack, tcp_keepalive and tcp_zero_window_probe,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1917   * this function combines selecting a netif for transmission, generating the tcp
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1918   * header checksum and calling ip_output_if while handling netif hints and stats.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1919   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1920  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1921  tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
; Function tcp_output_control_segment
.L337:
tcp_output_control_segment:	.type	func
	sub.a	a10,#8
.L1096:
	mov.aa	a15,a4
.L1100:
	mov.aa	a13,a5
.L1102:
	st.a	[a10],a6
.L1103:
	mov.aa	a14,a7
.L1104:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1922                             const ip_addr_t *src, const ip_addr_t *dst)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1923  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1924    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1925    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1926  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1927    LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1928  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1929    netif = tcp_route(pcb, src, dst);
	mov.aa	a5,a6
.L1098:
	mov.aa	a6,a14
.L1097:
	call	tcp_route
.L1099:
	st.a	[a10]4,a2
.L1106:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1930    if (netif == NULL) {
	jnz.a	a2,.L248
.L1723:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1931      err = ERR_RTE;
	mov	d15,#-4
	j	.L249
.L248:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1932    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1933      u8_t ttl, tos;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1934  #if CHECKSUM_GEN_TCP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1935      IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1936        struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
	ld.a	a12,[a13]4
.L1107:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1937        tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
	mov	d4,#6
	ld.hu	d5,[a13]8
.L1724:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1938                                          src, dst);
	mov.aa	a4,a13
.L1108:
	ld.a	a5,[a10]
.L1109:
	mov.aa	a6,a14
.L1110:
	call	ip_chksum_pseudo
.L1105:
	st.h	[a12]16,d2
.L720:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1939      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1940  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1941      if (pcb != NULL) {
	jz.a	a15,.L250
.L1725:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1942        NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1943        ttl = pcb->ttl;
	ld.bu	d4,[a15]11
.L1111:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1944        tos = pcb->tos;
	ld.bu	d5,[a15]10
.L1112:
	j	.L251
.L250:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1945      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1946        /* Send output with hardcoded TTL/HL since we have no access to the pcb */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1947        ttl = TCP_TTL;
	mov	d4,#255
.L1113:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1948        tos = 0;
	mov	d5,#0
.L251:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1949      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1950      TCP_STATS_INC(tcp.xmit);
	movh.a	a15,#@his(lwip_stats+144)
.L1101:
	ld.hu	d15,[a15]@los(lwip_stats+144)
.L1726:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1951      err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
	mov	d6,#6
	mov.aa	a4,a13
.L1115:
	add	d15,#1
	st.h	[a15]@los(lwip_stats+144),d15
.L1727:
	mov.aa	a6,a14
.L1116:
	ld.a	a5,[a10]
.L1117:
	ld.a	a7,[a10]4
.L1118:
	call	ip4_output_if
.L1114:
	mov	d15,d2
.L249:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1952      NETIF_RESET_HINTS(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1953    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1954    pbuf_free(p);
	mov.aa	a4,a13
.L1119:
	call	pbuf_free
.L1120:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1955    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1956  }
	mov	d2,d15
	ret
.L711:
	
__tcp_output_control_segment_function_end:
	.size	tcp_output_control_segment,__tcp_output_control_segment_function_end-tcp_output_control_segment
.L469:
	; End of function
	
	.sdecl	'.text.tcp_out.tcp_rst',code,cluster('tcp_rst')
	.sect	'.text.tcp_out.tcp_rst'
	.align	2
	
	.global	tcp_rst

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1957  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1958  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1959   * Send a TCP RESET packet (empty segment with RST flag set) either to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1960   * abort a connection or to show that there is no matching local connection
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1961   * for a received segment.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1962   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1963   * Called by tcp_abort() (to abort a local connection), tcp_input() (if no
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1964   * matching local pcb was found), tcp_listen_input() (if incoming segment
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1965   * has ACK flag set) and tcp_process() (received segment in the wrong state)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1966   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1967   * Since a RST segment is in most cases not sent for an active connection,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1968   * tcp_rst() has a number of arguments that are taken from a tcp_pcb for
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1969   * most other segment output functions.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1970   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1971   * @param pcb TCP pcb (may be NULL if no pcb is available)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1972   * @param seqno the sequence number to use for the outgoing segment
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1973   * @param ackno the acknowledge number to use for the outgoing segment
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1974   * @param local_ip the local IP address to send the segment from
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1975   * @param remote_ip the remote IP address to send the segment to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1976   * @param local_port the local TCP port to send the segment from
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1977   * @param remote_port the remote TCP port to send the segment to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1978   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1979  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1980  tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
; Function tcp_rst
.L339:
tcp_rst:	.type	func
	sub.a	a10,#16
.L1121:
	mov.aa	a12,a4
.L1123:
	mov	e8,d5,d4
	mov.aa	a13,a5
.L1124:
	mov.aa	a14,a6
.L1125:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1981          const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1982          u16_t local_port, u16_t remote_port)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1983  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1984    struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1985    u16_t wnd;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1986    u8_t optlen;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1987  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1988    LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
	mov	e10,d7,d6
	jnz.a	a13,.L253
.L1486:
	movh.a	a15,#@his(.88.str)
	lea	a15,[a15]@los(.88.str)
	st.a	[a10],a15
	mov	d15,#1988
	st.w	[a10]4,d15
.L1122:
	fcall	.cocofun_108
.L1126:
	st.a	[a10]8,a15
	fcall	.cocofun_107
.L1127:
	call	Ifx_Lwip_printf
.L253:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1989    LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
	jnz.a	a14,.L254
.L1487:
	movh.a	a15,#@his(.89.str)
	lea	a15,[a15]@los(.89.str)
	st.a	[a10],a15
	mov	d15,#1989
	st.w	[a10]4,d15
.L1128:
	fcall	.cocofun_108
.L1129:
	st.a	[a10]8,a15
	fcall	.cocofun_107
	call	Ifx_Lwip_printf
.L254:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1990  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1991    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1992  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1993  #if LWIP_WND_SCALE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1994    wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1995  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1996    wnd = PP_HTONS(TCP_WND);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1997  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1998  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  1999    p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
	mov	d4,d8
	call	lwip_htonl
.L1130:
	st.h	[a10],d10
.L1131:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2000      remote_port, TCP_RST | TCP_ACK, wnd);
	mov	d15,#20
	st.h	[a10]4,d11
.L1132:
	mov	d5,#0
	st.b	[a10]8,d15
.L1488:
	mov.u	d15,#53270
	st.h	[a10]12,d15
.L1133:
	mov	d4,d9
.L1134:
	mov	d6,d5
.L1489:
	mov	d7,d2
	call	tcp_output_alloc_header_common
.L1135:
	mov.aa	a15,a2
.L1137:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2001    if (p == NULL) {
	jz.a	a15,.L255
.L1490:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2002      LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2003      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2004    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2005    tcp_output_fill_options(pcb, p, 0, optlen);
	mov	d4,#0
	mov.aa	a4,a12
.L1138:
	mov	d5,d4
	mov.aa	a5,a15
.L1136:
	call	tcp_output_fill_options
.L1139:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2006  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2007    MIB2_STATS_INC(mib2.tcpoutrsts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2008  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2009    tcp_output_control_segment(pcb, p, local_ip, remote_ip);
	mov.aa	a4,a12
.L1140:
	mov.aa	a5,a15
.L1141:
	mov.aa	a6,a13
.L1142:
	mov.aa	a7,a14
.L1143:
	j	tcp_output_control_segment
.L255:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2010    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2011  }
	ret
.L609:
	
__tcp_rst_function_end:
	.size	tcp_rst,__tcp_rst_function_end-tcp_rst
.L404:
	; End of function
	
	.sdecl	'.text.tcp_out.tcp_send_empty_ack',code,cluster('tcp_send_empty_ack')
	.sect	'.text.tcp_out.tcp_send_empty_ack'
	.align	2
	
	.global	tcp_send_empty_ack

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2012  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2013  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2014   * Send an ACK without data.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2015   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2016   * @param pcb Protocol control block for the TCP connection to send the ACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2017   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2018  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2019  tcp_send_empty_ack(struct tcp_pcb *pcb)
; Function tcp_send_empty_ack
.L341:
tcp_send_empty_ack:	.type	func
	sub.a	a10,#16
.L1144:
	mov.aa	a15,a4
.L1146:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2020  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2021    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2022    struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2023    u8_t optlen, optflags = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2024    u8_t num_sacks = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2025  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2026    LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
	jnz.a	a15,.L256
.L1368:
	movh.a	a2,#@his(.92.str)
	lea	a2,[a2]@los(.92.str)
	st.a	[a10],a2
	mov	d15,#2026
	st.w	[a10]4,d15
.L1145:
	fcall	.cocofun_110
.L1147:
	st.a	[a10]8,a2
	fcall	.cocofun_107
.L1148:
	call	Ifx_Lwip_printf
.L256:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2027  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2028  #if LWIP_TCP_TIMESTAMPS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2029    if (pcb->flags & TF_TIMESTAMP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2030      optflags = TF_SEG_OPTS_TS;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2031    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2032  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2033    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2034  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2035  #if LWIP_TCP_SACK_OUT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2036    /* For now, SACKs are only sent with empty ACKs */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2037    if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2038      optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2039    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2040  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2041  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2042    p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
	ld.w	d4,[a15]80
	call	lwip_htonl
.L1369:
	mov	d4,#0
.L1370:
	mov	d5,d4
	mov.aa	a4,a15
.L1149:
	mov	d6,d2
	call	tcp_output_alloc_header
.L1150:
	mov.aa	a12,a2
.L1151:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2043    if (p == NULL) {
	jnz.a	a12,.L257
.L1371:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2044      /* let tcp_fasttmr retry sending this ACK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2045      tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2046      LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2047      return ERR_BUF;
	mov	d2,#-2
	ld.hu	d15,[a15]26

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2048    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2049    tcp_output_fill_options(pcb, p, optflags, num_sacks);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2050  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2051  #if LWIP_TCP_TIMESTAMPS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2052    pcb->ts_lastacksent = pcb->rcv_nxt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2053  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2054  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2055    LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2056                ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2057    err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2058    if (err != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2059      /* let tcp_fasttmr retry sending this ACK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2060      tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2061    } else {
.L260:
	or	d15,#3
	j	.L258
.L257:
	mov	d4,#0
	mov.aa	a4,a15
.L1153:
	mov	d5,d4
	mov.aa	a5,a12
.L1152:
	call	tcp_output_fill_options
.L1154:
	lea	a7,[a15]4
	mov.aa	a4,a15
.L1155:
	mov.aa	a5,a12
.L1157:
	mov.aa	a6,a15
.L1158:
	call	tcp_output_control_segment
.L1156:
	ld.hu	d15,[a15]26
.L1372:
	jne	d2,#0,.L260
.L1373:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2062      /* remove ACK flags from the PCB, as we sent an empty ACK now */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2063      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
	mov.u	d0,#65532
	and	d15,d0

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2064    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2065  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2066    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2067  }
.L258:
	st.h	[a15]26,d15
.L1374:
	ret
.L579:
	
__tcp_send_empty_ack_function_end:
	.size	tcp_send_empty_ack,__tcp_send_empty_ack_function_end-tcp_send_empty_ack
.L364:
	; End of function
	
	.sdecl	'.text.tcp_out.tcp_keepalive',code,cluster('tcp_keepalive')
	.sect	'.text.tcp_out.tcp_keepalive'
	.align	2
	
	.global	tcp_keepalive

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2068  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2069  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2070   * Send keepalive packets to keep a connection active although
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2071   * no data is sent over it.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2072   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2073   * Called by tcp_slowtmr()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2074   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2075   * @param pcb the tcp_pcb for which to send a keepalive packet
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2076   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2077  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2078  tcp_keepalive(struct tcp_pcb *pcb)
; Function tcp_keepalive
.L343:
tcp_keepalive:	.type	func
	sub.a	a10,#16
.L1159:
	mov.aa	a12,a4
.L1161:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2079  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2080    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2081    struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2082    u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2083  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2084    LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
	jnz.a	a12,.L262
.L1495:
	movh.a	a15,#@his(.95.str)
	lea	a15,[a15]@los(.95.str)
	st.a	[a10],a15
	mov	d15,#2084
	st.w	[a10]4,d15
.L1160:
	fcall	.cocofun_108
.L1162:
	st.a	[a10]8,a15
	fcall	.cocofun_107
.L1163:
	call	Ifx_Lwip_printf
.L262:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2085  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2086    LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: sending KEEPALIVE probe to "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2087    ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2088    LWIP_DEBUGF(TCP_DEBUG, ("\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2089  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2090    LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2091                            tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2092  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2093    p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
	ld.w	d4,[a12]80
.L1496:
	add	d4,#-1
	call	lwip_htonl
.L1497:
	mov	d4,#0
.L1498:
	mov	d5,d4
	mov.aa	a4,a12
.L1164:
	mov	d6,d2
	call	tcp_output_alloc_header
.L1165:
	mov.aa	a15,a2
.L1167:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2094    if (p == NULL) {
	jnz.a	a15,.L263
.L1499:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2095      LWIP_DEBUGF(TCP_DEBUG,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2096                  ("tcp_keepalive: could not allocate memory for pbuf\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2097      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2098    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2099    tcp_output_fill_options(pcb, p, 0, optlen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2100    err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2101  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2102    LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2103                            pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2104    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2105  }
	mov	d2,#-1
	ret
.L263:
	mov	d4,#0
	mov.aa	a4,a12
.L1168:
	mov	d5,d4
	mov.aa	a5,a15
.L1166:
	call	tcp_output_fill_options
.L1169:
	lea	a7,[a12]4
	mov.aa	a4,a12
.L1170:
	mov.aa	a5,a15
.L1171:
	mov.aa	a6,a12
.L1172:
	j	tcp_output_control_segment
.L620:
	
__tcp_keepalive_function_end:
	.size	tcp_keepalive,__tcp_keepalive_function_end-tcp_keepalive
.L409:
	; End of function
	
	.sdecl	'.text.tcp_out.tcp_zero_window_probe',code,cluster('tcp_zero_window_probe')
	.sect	'.text.tcp_out.tcp_zero_window_probe'
	.align	2
	
	.global	tcp_zero_window_probe

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2106  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2107  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2108   * Send persist timer zero-window probes to keep a connection active
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2109   * when a window update is lost.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2110   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2111   * Called by tcp_slowtmr()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2112   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2113   * @param pcb the tcp_pcb for which to send a zero-window probe packet
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2114   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2115  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2116  tcp_zero_window_probe(struct tcp_pcb *pcb)
; Function tcp_zero_window_probe
.L345:
tcp_zero_window_probe:	.type	func
	sub.a	a10,#16
.L1173:
	mov.aa	a12,a4
.L1175:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2117  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2118    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2119    struct pbuf *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2120    struct tcp_hdr *tcphdr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2121    struct tcp_seg *seg;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2122    u16_t len;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2123    u8_t is_fin;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2124    u32_t snd_nxt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2125    u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2126  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2127    LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
	jnz.a	a12,.L266
.L1551:
	movh.a	a15,#@his(.102.str)
	lea	a15,[a15]@los(.102.str)
	st.a	[a10],a15
	mov	d15,#2127
	st.w	[a10]4,d15
.L1174:
	fcall	.cocofun_108
.L1176:
	st.a	[a10]8,a15
	fcall	.cocofun_107
.L1177:
	call	Ifx_Lwip_printf
.L266:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2128  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2129    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: sending ZERO WINDOW probe to "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2130    ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2131    LWIP_DEBUGF(TCP_DEBUG, ("\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2132  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2133    LWIP_DEBUGF(TCP_DEBUG,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2134                ("tcp_zero_window_probe: tcp_ticks %"U32_F
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2135                 "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2136                 tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2137  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2138    /* Only consider unsent, persist timer should be off when there is data in-flight */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2139    seg = pcb->unsent;
	ld.a	a15,[a12]108
.L1178:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2140    if (seg == NULL) {
	jnz.a	a15,.L267
.L1552:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2141      /* Not expected, persist timer should be off when the send buffer is empty */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2142      return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2143    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2144  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2145    /* increment probe count. NOTE: we record probe even if it fails
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2146       to actually transmit due to an error. This ensures memory exhaustion/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2147       routing problem doesn't leave a zero-window pcb as an indefinite zombie.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2148       RTO mechanism has similar behavior, see pcb->nrtx */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2149    if (pcb->persist_probe < 0xFF) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2150      ++pcb->persist_probe;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2151    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2152  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2153    is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2154    /* we want to send one seqno: either FIN or data (no options) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2155    len = is_fin ? 0 : 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2156  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2157    p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2158    if (p == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2159      LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2160      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2161    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2162    tcphdr = (struct tcp_hdr *)p->payload;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2163  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2164    if (is_fin) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2165      /* FIN segment, no data */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2166      TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2167    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2168      /* Data segment, copy in one byte from the head of the unacked queue */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2169      char *d = ((char *)p->payload + TCP_HLEN);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2170      /* Depending on whether the segment has already been sent (unacked) or not
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2171         (unsent), seg->p->payload points to the IP header or TCP header.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2172         Ensure we copy the first TCP data byte: */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2173      pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2174    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2175  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2176    /* The byte may be acknowledged without the window being opened. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2177    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2178    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2179      pcb->snd_nxt = snd_nxt;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2180    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2181    tcp_output_fill_options(pcb, p, 0, optlen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2182  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2183    err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2184  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2185    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2186                            " ackno %"U32_F" err %d.\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2187                            pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2188    return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2189  }
	mov	d2,#0
	ret
.L267:
	ld.bu	d0,[a12]154
.L1553:
	mov	d15,#255
.L1554:
	jge.u	d0,d15,.L269
.L1555:
	add	d0,#1
	st.b	[a12]154,d0
.L269:
	ld.a	a2,[a15]16
.L1556:
	mov	d8,#0
.L1183:
	ld.hu	d4,[a2]12
	call	lwip_htons
.L1557:
	jz.t	d2:0,.L270
.L1558:
	ld.hu	d15,[a15]8
.L1559:
	cmovn	d8,d15,#1
.L270:
	ld.a	a2,[a15]16
.L1560:
	eq	d5,d8,#0
	mov.aa	a4,a12
.L1180:
	mov	d4,#0
.L1561:
	ld.w	d6,[a2]4
	call	tcp_output_alloc_header
.L1181:
	mov.aa	a14,a2
.L1184:
	jnz.a	a14,.L272
.L1562:
	mov	d2,#-1
	ret
.L272:
	ld.a	a13,[a14]4
.L1563:
	jeq	d8,#0,.L274
.L1564:
	mov.u	d0,#49407
	ld.hu	d15,[a13]12
	mov	d4,#17
	and	d15,d0
	call	lwip_htons
.L1182:
	or	d15,d2
	st.h	[a13]12,d15
.L1565:
	j	.L275
.L274:
	ld.a	a4,[a15]4
.L1566:
	ld.hu	d0,[a15]8
.L1567:
	mov	d4,#1
	lea	a5,[a13]20
.L1568:
	ld.hu	d15,[a4]8
.L1569:
	sub	d15,d0
	extr.u	d5,d15,#0,#16
	call	pbuf_copy_partial
.L275:
	ld.a	a15,[a15]16
.L1179:
	ld.w	d4,[a15]4
	call	lwip_htonl
.L1185:
	add	d2,#1
.L1570:
	fcall	.cocofun_113
.L1571:
	mov	d4,#0
	mov.aa	a4,a12
.L1187:
	mov	d5,d4
	mov.aa	a5,a14
.L1188:
	call	tcp_output_fill_options
.L1186:
	lea	a7,[a12]4
	mov.aa	a4,a12
.L1189:
	mov.aa	a5,a14
.L1190:
	mov.aa	a6,a12
.L1191:
	j	tcp_output_control_segment
.L636:
	
__tcp_zero_window_probe_function_end:
	.size	tcp_zero_window_probe,__tcp_zero_window_probe_function_end-tcp_zero_window_probe
.L419:
	; End of function
	
	.sdecl	'.rodata.tcp_out..1.str',data,rom
	.sect	'.rodata.tcp_out..1.str'
.1.str:	.type	object
	.size	.1.str,40
	.byte	65,115,115,101
	.byte	114,116,105,111
	.byte	110,32,34,37
	.byte	115,34,32,102
	.byte	97,105,108,101
	.byte	100,32,97,116
	.byte	32,108,105,110
	.byte	101,32,37,100
	.byte	32,105,110,32
	.byte	37,115,10
	.space	1
	.sdecl	'.rodata.tcp_out..3.str',data,rom
	.sect	'.rodata.tcp_out..3.str'
.3.str:	.type	object
	.size	.3.str,50
	.byte	46,46,92,48
	.byte	95,83,114,99
	.byte	92,48,95,65
	.byte	112,112,83,119
	.byte	92,69,116,104
	.byte	101,114,110,101
	.byte	116,92,108,119
	.byte	105,112,92,115
	.byte	114,99,92,99
	.byte	111,114,101,92
	.byte	116,99,112,95
	.byte	111,117,116,46
	.byte	99
	.space	1
	.sdecl	'.rodata.tcp_out..6.str',data,rom
	.sect	'.rodata.tcp_out..6.str'
.6.str:	.type	object
	.size	.6.str,21
	.byte	112,45,62,116
	.byte	111,116,95,108
	.byte	101,110,32,62
	.byte	61,32,111,112
	.byte	116,108,101,110
	.space	1
	.sdecl	'.rodata.tcp_out..10.str',data,rom
	.sect	'.rodata.tcp_out..10.str'
.10.str:	.type	object
	.size	.10.str,20
	.byte	110,101,101,100
	.byte	32,117,110,99
	.byte	104,97,105,110
	.byte	101,100,32,112
	.byte	98,117,102
	.space	1
	.sdecl	'.rodata.tcp_out..12.str',data,rom
	.sect	'.rodata.tcp_out..12.str'
.12.str:	.type	object
	.size	.12.str,37
	.byte	116,99,112,95
	.byte	119,114,105,116
	.byte	101,40,41,32
	.byte	99,97,108,108
	.byte	101,100,32,105
	.byte	110,32,105,110
	.byte	118,97,108,105
	.byte	100,32,115,116
	.byte	97,116,101,10
	.space	1
	.sdecl	'.rodata.tcp_out..16.str',data,rom
	.sect	'.rodata.tcp_out..16.str'
.16.str:	.type	object
	.size	.16.str,58
	.byte	116,99,112,95
	.byte	119,114,105,116
	.byte	101,58,32,112
	.byte	98,117,102,115
	.byte	32,111,110,32
	.byte	113,117,101,117
	.byte	101,32,61,62
	.byte	32,97,116,32
	.byte	108,101,97,115
	.byte	116,32,111,110
	.byte	101,32,113,117
	.byte	101,117,101,32
	.byte	110,111,110,45
	.byte	101,109,112,116
	.byte	121
	.space	1
	.sdecl	'.rodata.tcp_out..17.str',data,rom
	.sect	'.rodata.tcp_out..17.str'
.17.str:	.type	object
	.size	.17.str,50
	.byte	116,99,112,95
	.byte	119,114,105,116
	.byte	101,58,32,110
	.byte	111,32,112,98
	.byte	117,102,115,32
	.byte	111,110,32,113
	.byte	117,101,117,101
	.byte	32,61,62,32
	.byte	98,111,116,104
	.byte	32,113,117,101
	.byte	117,101,115,32
	.byte	101,109,112,116
	.byte	121
	.space	1
	.sdecl	'.rodata.tcp_out..18.str',data,rom
	.sect	'.rodata.tcp_out..18.str'
.18.str:	.type	object
	.size	.18.str,23
	.byte	116,99,112,95
	.byte	119,114,105,116
	.byte	101,58,32,105
	.byte	110,118,97,108
	.byte	105,100,32,112
	.byte	99,98
	.space	1
	.sdecl	'.rodata.tcp_out..20.str',data,rom
	.sect	'.rodata.tcp_out..20.str'
.20.str:	.type	object
	.size	.20.str,49
	.byte	116,99,112,95
	.byte	119,114,105,116
	.byte	101,58,32,97
	.byte	114,103,32,61
	.byte	61,32,78,85
	.byte	76,76,32,40
	.byte	112,114,111,103
	.byte	114,97,109,109
	.byte	101,114,32,118
	.byte	105,111,108,97
	.byte	116,101,115,32
	.byte	65,80,73,41
	.space	1
	.sdecl	'.rodata.tcp_out..21.str',data,rom
	.sect	'.rodata.tcp_out..21.str'
.21.str:	.type	object
	.size	.21.str,23
	.byte	109,115,115,95
	.byte	108,111,99,97
	.byte	108,32,105,115
	.byte	32,116,111,111
	.byte	32,115,109,97
	.byte	108,108
	.space	1
	.sdecl	'.rodata.tcp_out..22.str',data,rom
	.sect	'.rodata.tcp_out..22.str'
.22.str:	.type	object
	.size	.22.str,47
	.byte	117,110,115,101
	.byte	110,116,95,111
	.byte	118,101,114,115
	.byte	105,122,101,32
	.byte	109,105,115,109
	.byte	97,116,99,104
	.byte	32,40,112,99
	.byte	98,32,118,115
	.byte	46,32,108,97
	.byte	115,116,95,117
	.byte	110,115,101,110
	.byte	116,41
	.space	1
	.sdecl	'.rodata.tcp_out..23.str',data,rom
	.sect	'.rodata.tcp_out..23.str'
.23.str:	.type	object
	.size	.23.str,32
	.byte	105,110,99,111
	.byte	110,115,105,115
	.byte	116,101,110,116
	.byte	32,111,118,101
	.byte	114,115,105,122
	.byte	101,32,118,115
	.byte	46,32,115,112
	.byte	97,99,101
	.space	1
	.sdecl	'.rodata.tcp_out..24.str',data,rom
	.sect	'.rodata.tcp_out..24.str'
.24.str:	.type	object
	.size	.24.str,30
	.byte	105,110,99,111
	.byte	110,115,105,115
	.byte	116,101,110,116
	.byte	32,111,118,101
	.byte	114,115,105,122
	.byte	101,32,118,115
	.byte	46,32,108,101
	.byte	110
	.space	1
	.sdecl	'.rodata.tcp_out..26.str',data,rom
	.sect	'.rodata.tcp_out..26.str'
.26.str:	.type	object
	.size	.26.str,41
	.byte	116,99,112,95
	.byte	119,114,105,116
	.byte	101,58,32,82
	.byte	79,77,32,112
	.byte	98,117,102,115
	.byte	32,99,97,110
	.byte	110,111,116,32
	.byte	98,101,32,111
	.byte	118,101,114,115
	.byte	105,122,101,100
	.space	1
	.sdecl	'.rodata.tcp_out..28.str',data,rom
	.sect	'.rodata.tcp_out..28.str'
.28.str:	.type	object
	.size	.28.str,47
	.byte	117,110,115,101
	.byte	110,116,95,111
	.byte	118,101,114,115
	.byte	105,122,101,32
	.byte	109,105,115,109
	.byte	97,116,99,104
	.byte	32,40,112,99
	.byte	98,45,62,117
	.byte	110,115,101,110
	.byte	116,32,105,115
	.byte	32,78,85,76
	.byte	76,41
	.space	1
	.sdecl	'.rodata.tcp_out..29.str',data,rom
	.sect	'.rodata.tcp_out..29.str'
.29.str:	.type	object
	.size	.29.str,62
	.byte	116,99,112,95
	.byte	119,114,105,116
	.byte	101,58,32,99
	.byte	104,101,99,107
	.byte	32,116,104,97
	.byte	116,32,102,105
	.byte	114,115,116,32
	.byte	112,98,117,102
	.byte	32,99,97,110
	.byte	32,104,111,108
	.byte	100,32,116,104
	.byte	101,32,99,111
	.byte	109,112,108,101
	.byte	116,101,32,115
	.byte	101,103,108,101
	.byte	110
	.space	1
	.sdecl	'.rodata.tcp_out..30.str',data,rom
	.sect	'.rodata.tcp_out..30.str'
.30.str:	.type	object
	.size	.30.str,14
	.byte	111,118,101,114
	.byte	115,105,122,101
	.byte	32,61,61,32
	.byte	48
	.space	1
	.sdecl	'.rodata.tcp_out..33.str',data,rom
	.sect	'.rodata.tcp_out..33.str'
.33.str:	.type	object
	.size	.33.str,17
	.byte	112,114,101,118
	.byte	95,115,101,103
	.byte	32,33,61,32
	.byte	78,85,76,76
	.space	1
	.sdecl	'.rodata.tcp_out..35.str',data,rom
	.sect	'.rodata.tcp_out..35.str'
.35.str:	.type	object
	.size	.35.str,44
	.byte	108,97,115,116
	.byte	95,117,110,115
	.byte	101,110,116,45
	.byte	62,111,118,101
	.byte	114,115,105,122
	.byte	101,95,108,101
	.byte	102,116,32,62
	.byte	61,32,111,118
	.byte	101,114,115,105
	.byte	122,101,95,117
	.byte	115,101,100
	.space	1
	.sdecl	'.rodata.tcp_out..36.str',data,rom
	.sect	'.rodata.tcp_out..36.str'
.36.str:	.type	object
	.size	.36.str,56
	.byte	116,99,112,95
	.byte	119,114,105,116
	.byte	101,58,32,99
	.byte	97,110,110,111
	.byte	116,32,99,111
	.byte	110,99,97,116
	.byte	101,110,97,116
	.byte	101,32,119,104
	.byte	101,110,32,112
	.byte	99,98,45,62
	.byte	117,110,115,101
	.byte	110,116,32,105
	.byte	115,32,101,109
	.byte	112,116,121
	.space	1
	.sdecl	'.rodata.tcp_out..37.str',data,rom
	.sect	'.rodata.tcp_out..37.str'
.37.str:	.type	object
	.size	.37.str,53
	.byte	116,99,112,95
	.byte	119,114,105,116
	.byte	101,58,32,101
	.byte	120,116,101,110
	.byte	115,105,111,110
	.byte	32,111,102,32
	.byte	114,101,102,101
	.byte	114,101,110,99
	.byte	101,32,114,101
	.byte	113,117,105,114
	.byte	101,115,32,114
	.byte	101,102,101,114
	.byte	101,110,99,101
	.space	1
	.sdecl	'.rodata.tcp_out..39.str',data,rom
	.sect	'.rodata.tcp_out..39.str'
.39.str:	.type	object
	.size	.39.str,30
	.byte	116,99,112,95
	.byte	119,114,105,116
	.byte	101,58,32,118
	.byte	97,108,105,100
	.byte	32,113,117,101
	.byte	117,101,32,108
	.byte	101,110,103,116
	.byte	104
	.space	1
	.sdecl	'.rodata.tcp_out..41.str',data,rom
	.sect	'.rodata.tcp_out..41.str'
.41.str:	.type	object
	.size	.41.str,34
	.byte	116,99,112,95
	.byte	115,112,108,105
	.byte	116,95,117,110
	.byte	115,101,110,116
	.byte	95,115,101,103
	.byte	58,32,105,110
	.byte	118,97,108,105
	.byte	100,32,112,99
	.byte	98
	.space	1
	.sdecl	'.rodata.tcp_out..42.str',data,rom
	.sect	'.rodata.tcp_out..42.str'
.42.str:	.type	object
	.size	.42.str,34
	.byte	67,97,110,39
	.byte	116,32,115,112
	.byte	108,105,116,32
	.byte	115,101,103,109
	.byte	101,110,116,32
	.byte	105,110,116,111
	.byte	32,108,101,110
	.byte	103,116,104,32
	.byte	48
	.space	1
	.sdecl	'.rodata.tcp_out..43.str',data,rom
	.sect	'.rodata.tcp_out..43.str'
.43.str:	.type	object
	.size	.43.str,13
	.byte	115,112,108,105
	.byte	116,32,60,61
	.byte	32,109,115,115
	.space	1
	.sdecl	'.rodata.tcp_out..44.str',data,rom
	.sect	'.rodata.tcp_out..44.str'
.44.str:	.type	object
	.size	.44.str,14
	.byte	117,115,101,103
	.byte	45,62,108,101
	.byte	110,32,62,32
	.byte	48
	.space	1
	.sdecl	'.rodata.tcp_out..49.str',data,rom
	.sect	'.rodata.tcp_out..49.str'
.49.str:	.type	object
	.size	.49.str,12
	.byte	115,101,103,32
	.byte	61,61,32,78
	.byte	85,76,76
	.space	1
	.sdecl	'.rodata.tcp_out..50.str',data,rom
	.sect	'.rodata.tcp_out..50.str'
.50.str:	.type	object
	.size	.50.str,26
	.byte	116,99,112,95
	.byte	115,101,110,100
	.byte	95,102,105,110
	.byte	58,32,105,110
	.byte	118,97,108,105
	.byte	100,32,112,99
	.byte	98
	.space	1
	.sdecl	'.rodata.tcp_out..52.str',data,rom
	.sect	'.rodata.tcp_out..52.str'
.52.str:	.type	object
	.size	.52.str,85
	.byte	116,99,112,95
	.byte	101,110,113,117
	.byte	101,117,101,95
	.byte	102,108,97,103
	.byte	115,58,32,110
	.byte	101,101,100,32
	.byte	101,105,116,104
	.byte	101,114,32,84
	.byte	67,80,95,83
	.byte	89,78,32,111
	.byte	114,32,84,67
	.byte	80,95,70,73
	.byte	78,32,105,110
	.byte	32,102,108,97
	.byte	103,115,32,40
	.byte	112,114,111,103
	.byte	114,97,109,109
	.byte	101,114,32,118
	.byte	105,111,108,97
	.byte	116,101,115,32
	.byte	65,80,73,41
	.space	1
	.sdecl	'.rodata.tcp_out..53.str',data,rom
	.sect	'.rodata.tcp_out..53.str'
.53.str:	.type	object
	.size	.53.str,31
	.byte	116,99,112,95
	.byte	101,110,113,117
	.byte	101,117,101,95
	.byte	102,108,97,103
	.byte	115,58,32,105
	.byte	110,118,97,108
	.byte	105,100,32,112
	.byte	99,98
	.space	1
	.sdecl	'.rodata.tcp_out..54.str',data,rom
	.sect	'.rodata.tcp_out..54.str'
.54.str:	.type	object
	.size	.54.str,57
	.byte	116,99,112,95
	.byte	101,110,113,117
	.byte	101,117,101,95
	.byte	102,108,97,103
	.byte	115,58,32,99
	.byte	104,101,99,107
	.byte	32,116,104,97
	.byte	116,32,102,105
	.byte	114,115,116,32
	.byte	112,98,117,102
	.byte	32,99,97,110
	.byte	32,104,111,108
	.byte	100,32,111,112
	.byte	116,108,101,110
	.space	1
	.sdecl	'.rodata.tcp_out..55.str',data,rom
	.sect	'.rodata.tcp_out..55.str'
.55.str:	.type	object
	.size	.55.str,24
	.byte	115,101,103,45
	.byte	62,116,99,112
	.byte	104,100,114,32
	.byte	110,111,116,32
	.byte	97,108,105,103
	.byte	110,101,100
	.space	1
	.sdecl	'.rodata.tcp_out..56.str',data,rom
	.sect	'.rodata.tcp_out..56.str'
.56.str:	.type	object
	.size	.56.str,42
	.byte	116,99,112,95
	.byte	101,110,113,117
	.byte	101,117,101,95
	.byte	102,108,97,103
	.byte	115,58,32,105
	.byte	110,118,97,108
	.byte	105,100,32,115
	.byte	101,103,109,101
	.byte	110,116,32,108
	.byte	101,110,103,116
	.byte	104
	.space	1
	.sdecl	'.rodata.tcp_out..59.str',data,rom
	.sect	'.rodata.tcp_out..59.str'
.59.str:	.type	object
	.size	.59.str,40
	.byte	116,99,112,95
	.byte	101,110,113,117
	.byte	101,117,101,95
	.byte	102,108,97,103
	.byte	115,58,32,105
	.byte	110,118,97,108
	.byte	105,100,32,113
	.byte	117,101,117,101
	.byte	32,108,101,110
	.byte	103,116,104
	.space	1
	.sdecl	'.rodata.tcp_out..60.str',data,rom
	.sect	'.rodata.tcp_out..60.str'
.60.str:	.type	object
	.size	.60.str,24
	.byte	116,99,112,95
	.byte	111,117,116,112
	.byte	117,116,58,32
	.byte	105,110,118,97
	.byte	108,105,100,32
	.byte	112,99,98
	.space	1
	.sdecl	'.rodata.tcp_out..61.str',data,rom
	.sect	'.rodata.tcp_out..61.str'
.61.str:	.type	object
	.size	.61.str,38
	.byte	100,111,110,39
	.byte	116,32,99,97
	.byte	108,108,32,116
	.byte	99,112,95,111
	.byte	117,116,112,117
	.byte	116,32,102,111
	.byte	114,32,108,105
	.byte	115,116,101,110
	.byte	45,112,99,98
	.byte	115
	.space	1
	.sdecl	'.rodata.tcp_out..65.str',data,rom
	.sect	'.rodata.tcp_out..65.str'
.65.str:	.type	object
	.size	.65.str,23
	.byte	82,83,84,32
	.byte	110,111,116,32
	.byte	101,120,112,101
	.byte	99,116,101,100
	.byte	32,104,101,114
	.byte	101,33
	.space	1
	.sdecl	'.rodata.tcp_out..74.str',data,rom
	.sect	'.rodata.tcp_out..74.str'
.74.str:	.type	object
	.size	.74.str,19
	.byte	111,112,116,105
	.byte	111,110,115,32
	.byte	110,111,116,32
	.byte	102,105,108,108
	.byte	101,100
	.space	1
	.sdecl	'.rodata.tcp_out..75.str',data,rom
	.sect	'.rodata.tcp_out..75.str'
.75.str:	.type	object
	.size	.75.str,36
	.byte	116,99,112,95
	.byte	114,101,120,109
	.byte	105,116,95,114
	.byte	116,111,95,112
	.byte	114,101,112,97
	.byte	114,101,58,32
	.byte	105,110,118,97
	.byte	108,105,100,32
	.byte	112,99,98
	.space	1
	.sdecl	'.rodata.tcp_out..77.str',data,rom
	.sect	'.rodata.tcp_out..77.str'
.77.str:	.type	object
	.size	.77.str,35
	.byte	116,99,112,95
	.byte	114,101,120,109
	.byte	105,116,95,114
	.byte	116,111,95,99
	.byte	111,109,109,105
	.byte	116,58,32,105
	.byte	110,118,97,108
	.byte	105,100,32,112
	.byte	99,98
	.space	1
	.sdecl	'.rodata.tcp_out..78.str',data,rom
	.sect	'.rodata.tcp_out..78.str'
.78.str:	.type	object
	.size	.78.str,28
	.byte	116,99,112,95
	.byte	114,101,120,109
	.byte	105,116,95,114
	.byte	116,111,58,32
	.byte	105,110,118,97
	.byte	108,105,100,32
	.byte	112,99,98
	.space	1
	.sdecl	'.rodata.tcp_out..79.str',data,rom
	.sect	'.rodata.tcp_out..79.str'
.79.str:	.type	object
	.size	.79.str,24
	.byte	116,99,112,95
	.byte	114,101,120,109
	.byte	105,116,58,32
	.byte	105,110,118,97
	.byte	108,105,100,32
	.byte	112,99,98
	.space	1
	.sdecl	'.rodata.tcp_out..81.str',data,rom
	.sect	'.rodata.tcp_out..81.str'
.81.str:	.type	object
	.size	.81.str,29
	.byte	116,99,112,95
	.byte	114,101,120,109
	.byte	105,116,95,102
	.byte	97,115,116,58
	.byte	32,105,110,118
	.byte	97,108,105,100
	.byte	32,112,99,98
	.space	1
	.sdecl	'.rodata.tcp_out..84.str',data,rom
	.sect	'.rodata.tcp_out..84.str'
.84.str:	.type	object
	.size	.84.str,46
	.byte	99,104,101,99
	.byte	107,32,116,104
	.byte	97,116,32,102
	.byte	105,114,115,116
	.byte	32,112,98,117
	.byte	102,32,99,97
	.byte	110,32,104,111
	.byte	108,100,32,115
	.byte	116,114,117,99
	.byte	116,32,116,99
	.byte	112,95,104,100
	.byte	114
	.space	1
	.sdecl	'.rodata.tcp_out..88.str',data,rom
	.sect	'.rodata.tcp_out..88.str'
.88.str:	.type	object
	.size	.88.str,26
	.byte	116,99,112,95
	.byte	114,115,116,58
	.byte	32,105,110,118
	.byte	97,108,105,100
	.byte	32,108,111,99
	.byte	97,108,95,105
	.byte	112
	.space	1
	.sdecl	'.rodata.tcp_out..89.str',data,rom
	.sect	'.rodata.tcp_out..89.str'
.89.str:	.type	object
	.size	.89.str,27
	.byte	116,99,112,95
	.byte	114,115,116,58
	.byte	32,105,110,118
	.byte	97,108,105,100
	.byte	32,114,101,109
	.byte	111,116,101,95
	.byte	105,112
	.space	1
	.sdecl	'.rodata.tcp_out..92.str',data,rom
	.sect	'.rodata.tcp_out..92.str'
.92.str:	.type	object
	.size	.92.str,32
	.byte	116,99,112,95
	.byte	115,101,110,100
	.byte	95,101,109,112
	.byte	116,121,95,97
	.byte	99,107,58,32
	.byte	105,110,118,97
	.byte	108,105,100,32
	.byte	112,99,98
	.space	1
	.sdecl	'.rodata.tcp_out..95.str',data,rom
	.sect	'.rodata.tcp_out..95.str'
.95.str:	.type	object
	.size	.95.str,27
	.byte	116,99,112,95
	.byte	107,101,101,112
	.byte	97,108,105,118
	.byte	101,58,32,105
	.byte	110,118,97,108
	.byte	105,100,32,112
	.byte	99,98
	.space	1
	.sdecl	'.rodata.tcp_out..102.str',data,rom
	.sect	'.rodata.tcp_out..102.str'
.102.str:	.type	object
	.size	.102.str,35
	.byte	116,99,112,95
	.byte	122,101,114,111
	.byte	95,119,105,110
	.byte	100,111,119,95
	.byte	112,114,111,98
	.byte	101,58,32,105
	.byte	110,118,97,108
	.byte	105,100,32,112
	.byte	99,98
	.space	1
	.calls	'tcp_route','netif_get_by_index'
	.calls	'tcp_route','ip4_route'
	.calls	'tcp_create_segment','memp_malloc'
	.calls	'tcp_create_segment','pbuf_free'
	.calls	'tcp_create_segment','Ifx_Lwip_printf'
	.calls	'tcp_create_segment','pbuf_add_header'
	.calls	'tcp_create_segment','tcp_seg_free'
	.calls	'tcp_create_segment','lwip_htons'
	.calls	'tcp_create_segment','lwip_htonl'
	.calls	'tcp_pbuf_prealloc','pbuf_alloc'
	.calls	'tcp_pbuf_prealloc','Ifx_Lwip_printf'
	.calls	'tcp_write_checks','Ifx_Lwip_printf'
	.calls	'tcp_write','Ifx_Lwip_printf'
	.calls	'tcp_write','tcp_write_checks'
	.calls	'tcp_write','tcp_pbuf_prealloc'
	.calls	'tcp_write','memcpy'
	.calls	'tcp_write','pbuf_alloc'
	.calls	'tcp_write','pbuf_clen'
	.calls	'tcp_write','pbuf_free'
	.calls	'tcp_write','pbuf_cat'
	.calls	'tcp_write','tcp_create_segment'
	.calls	'tcp_write','lwip_htons'
	.calls	'tcp_write','tcp_segs_free'
	.calls	'tcp_split_unsent_seg','Ifx_Lwip_printf'
	.calls	'tcp_split_unsent_seg','pbuf_alloc'
	.calls	'tcp_split_unsent_seg','pbuf_copy_partial'
	.calls	'tcp_split_unsent_seg','lwip_htons'
	.calls	'tcp_split_unsent_seg','lwip_htonl'
	.calls	'tcp_split_unsent_seg','tcp_create_segment'
	.calls	'tcp_split_unsent_seg','pbuf_clen'
	.calls	'tcp_split_unsent_seg','pbuf_realloc'
	.calls	'tcp_split_unsent_seg','pbuf_free'
	.calls	'tcp_send_fin','Ifx_Lwip_printf'
	.calls	'tcp_send_fin','lwip_htons'
	.calls	'tcp_send_fin','tcp_enqueue_flags'
	.calls	'tcp_enqueue_flags','Ifx_Lwip_printf'
	.calls	'tcp_enqueue_flags','pbuf_alloc'
	.calls	'tcp_enqueue_flags','tcp_create_segment'
	.calls	'tcp_enqueue_flags','pbuf_clen'
	.calls	'tcp_output','Ifx_Lwip_printf'
	.calls	'tcp_output','tcp_route'
	.calls	'tcp_output','lwip_htonl'
	.calls	'tcp_output','tcp_send_empty_ack'
	.calls	'tcp_output','lwip_htons'
	.calls	'tcp_output','tcp_output_segment'
	.calls	'tcp_output','tcp_seg_free'
	.calls	'tcp_output_segment','tcp_output_segment_busy'
	.calls	'tcp_output_segment','lwip_htonl'
	.calls	'tcp_output_segment','lwip_htons'
	.calls	'tcp_output_segment','tcp_eff_send_mss_netif'
	.calls	'tcp_output_segment','Ifx_Lwip_printf'
	.calls	'tcp_output_segment','ip_chksum_pseudo'
	.calls	'tcp_output_segment','ip4_output_if'
	.calls	'tcp_rexmit_rto_prepare','Ifx_Lwip_printf'
	.calls	'tcp_rexmit_rto_prepare','tcp_output_segment_busy'
	.calls	'tcp_rexmit_rto_prepare','lwip_htons'
	.calls	'tcp_rexmit_rto_prepare','lwip_htonl'
	.calls	'tcp_rexmit_rto_commit','Ifx_Lwip_printf'
	.calls	'tcp_rexmit_rto_commit','tcp_output'
	.calls	'tcp_rexmit_rto','Ifx_Lwip_printf'
	.calls	'tcp_rexmit_rto','tcp_rexmit_rto_prepare'
	.calls	'tcp_rexmit_rto','tcp_rexmit_rto_commit'
	.calls	'tcp_rexmit','Ifx_Lwip_printf'
	.calls	'tcp_rexmit','tcp_output_segment_busy'
	.calls	'tcp_rexmit','lwip_htonl'
	.calls	'tcp_rexmit_fast','Ifx_Lwip_printf'
	.calls	'tcp_rexmit_fast','tcp_rexmit'
	.calls	'tcp_output_alloc_header_common','pbuf_alloc'
	.calls	'tcp_output_alloc_header_common','Ifx_Lwip_printf'
	.calls	'tcp_output_alloc_header_common','lwip_htons'
	.calls	'tcp_output_alloc_header_common','lwip_htonl'
	.calls	'tcp_output_alloc_header','tcp_output_alloc_header_common'
	.calls	'tcp_output_control_segment','tcp_route'
	.calls	'tcp_output_control_segment','ip_chksum_pseudo'
	.calls	'tcp_output_control_segment','ip4_output_if'
	.calls	'tcp_output_control_segment','pbuf_free'
	.calls	'tcp_rst','Ifx_Lwip_printf'
	.calls	'tcp_rst','lwip_htonl'
	.calls	'tcp_rst','tcp_output_alloc_header_common'
	.calls	'tcp_rst','tcp_output_fill_options'
	.calls	'tcp_rst','tcp_output_control_segment'
	.calls	'tcp_send_empty_ack','Ifx_Lwip_printf'
	.calls	'tcp_send_empty_ack','lwip_htonl'
	.calls	'tcp_send_empty_ack','tcp_output_alloc_header'
	.calls	'tcp_send_empty_ack','tcp_output_fill_options'
	.calls	'tcp_send_empty_ack','tcp_output_control_segment'
	.calls	'tcp_keepalive','Ifx_Lwip_printf'
	.calls	'tcp_keepalive','lwip_htonl'
	.calls	'tcp_keepalive','tcp_output_alloc_header'
	.calls	'tcp_keepalive','tcp_output_fill_options'
	.calls	'tcp_keepalive','tcp_output_control_segment'
	.calls	'tcp_zero_window_probe','Ifx_Lwip_printf'
	.calls	'tcp_zero_window_probe','lwip_htons'
	.calls	'tcp_zero_window_probe','tcp_output_alloc_header'
	.calls	'tcp_zero_window_probe','pbuf_copy_partial'
	.calls	'tcp_zero_window_probe','lwip_htonl'
	.calls	'tcp_zero_window_probe','tcp_output_fill_options'
	.calls	'tcp_zero_window_probe','tcp_output_control_segment'
	.calls	'tcp_create_segment','.cocofun_110'
	.calls	'tcp_create_segment','.cocofun_107'
	.calls	'tcp_pbuf_prealloc','.cocofun_110'
	.calls	'tcp_pbuf_prealloc','.cocofun_107'
	.calls	'tcp_write_checks','.cocofun_109'
	.calls	'tcp_write_checks','.cocofun_108'
	.calls	'tcp_write_checks','.cocofun_107'
	.calls	'tcp_write','.cocofun_108'
	.calls	'tcp_write','.cocofun_107'
	.calls	'tcp_write','.cocofun_114'
	.calls	'tcp_write','.cocofun_115'
	.calls	'tcp_write','.cocofun_116'
	.calls	'tcp_write','.cocofun_109'
	.calls	'tcp_split_unsent_seg','.cocofun_108'
	.calls	'tcp_split_unsent_seg','.cocofun_107'
	.calls	'tcp_split_unsent_seg','.cocofun_110'
	.calls	'tcp_split_unsent_seg','.cocofun_111'
	.calls	'tcp_split_unsent_seg','.cocofun_109'
	.calls	'tcp_send_fin','.cocofun_108'
	.calls	'tcp_send_fin','.cocofun_107'
	.calls	'tcp_send_fin','.cocofun_115'
	.calls	'tcp_enqueue_flags','.cocofun_108'
	.calls	'tcp_enqueue_flags','.cocofun_107'
	.calls	'tcp_enqueue_flags','.cocofun_116'
	.calls	'tcp_enqueue_flags','.cocofun_109'
	.calls	'tcp_output','.cocofun_108'
	.calls	'tcp_output','.cocofun_107'
	.calls	'tcp_output','.cocofun_114'
	.calls	'tcp_output','.cocofun_116'
	.calls	'tcp_output','.cocofun_113'
	.calls	'tcp_output','.cocofun_111'
	.calls	'tcp_output_segment','.cocofun_110'
	.calls	'tcp_output_segment','.cocofun_107'
	.calls	'tcp_rexmit_rto_prepare','.cocofun_108'
	.calls	'tcp_rexmit_rto_prepare','.cocofun_107'
	.calls	'tcp_rexmit_rto_commit','.cocofun_108'
	.calls	'tcp_rexmit_rto_commit','.cocofun_107'
	.calls	'tcp_rexmit_rto_commit','.cocofun_112'
	.calls	'tcp_rexmit_rto','.cocofun_108'
	.calls	'tcp_rexmit_rto','.cocofun_107'
	.calls	'tcp_rexmit','.cocofun_108'
	.calls	'tcp_rexmit','.cocofun_107'
	.calls	'tcp_rexmit','.cocofun_111'
	.calls	'tcp_rexmit','.cocofun_112'
	.calls	'tcp_rexmit_fast','.cocofun_108'
	.calls	'tcp_rexmit_fast','.cocofun_107'
	.calls	'tcp_output_alloc_header_common','.cocofun_108'
	.calls	'tcp_output_alloc_header_common','.cocofun_107'
	.calls	'tcp_rst','.cocofun_108'
	.calls	'tcp_rst','.cocofun_107'
	.calls	'tcp_send_empty_ack','.cocofun_110'
	.calls	'tcp_send_empty_ack','.cocofun_107'
	.calls	'tcp_keepalive','.cocofun_108'
	.calls	'tcp_keepalive','.cocofun_107'
	.calls	'tcp_zero_window_probe','.cocofun_108'
	.calls	'tcp_zero_window_probe','.cocofun_107'
	.calls	'tcp_zero_window_probe','.cocofun_113'
	.calls	'tcp_route','',0
	.calls	'tcp_create_segment','',16
	.calls	'.cocofun_110','',0
	.calls	'tcp_pbuf_prealloc','',16
	.calls	'tcp_write_checks','',16
	.calls	'.cocofun_109','',0
	.calls	'tcp_write','',56
	.calls	'.cocofun_116','',0
	.calls	'.cocofun_115','',0
	.calls	'.cocofun_114','',0
	.calls	'.cocofun_108','',0
	.calls	'.cocofun_107','',0
	.calls	'tcp_split_unsent_seg','',16
	.calls	'.cocofun_111','',0
	.calls	'tcp_send_fin','',16
	.calls	'tcp_enqueue_flags','',16
	.calls	'tcp_output','',16
	.calls	'.cocofun_113','',0
	.calls	'tcp_output_segment_busy','',0
	.calls	'tcp_output_segment','',16
	.calls	'tcp_rexmit_rto_prepare','',16
	.calls	'tcp_rexmit_rto_commit','',16
	.calls	'.cocofun_112','',0
	.calls	'tcp_rexmit_rto','',16
	.calls	'tcp_rexmit','',16
	.calls	'tcp_rexmit_fast','',16
	.calls	'tcp_output_alloc_header_common','',16
	.calls	'tcp_output_alloc_header','',16
	.calls	'tcp_output_fill_options','',0
	.calls	'tcp_output_control_segment','',8
	.calls	'tcp_rst','',16
	.calls	'tcp_send_empty_ack','',16
	.calls	'tcp_keepalive','',16
	.extern	Ifx_Lwip_printf
	.extern	pbuf_alloc
	.extern	pbuf_realloc
	.extern	pbuf_add_header
	.extern	pbuf_free
	.extern	pbuf_clen
	.extern	pbuf_cat
	.extern	pbuf_copy_partial
	.extern	lwip_htons
	.extern	lwip_htonl
	.extern	memp_malloc
	.extern	lwip_stats
	.extern	netif_get_by_index
	.extern	ip4_route
	.extern	ip4_output_if
	.extern	tcp_input_pcb
	.extern	tcp_ticks
	.extern	tcp_segs_free
	.extern	tcp_seg_free
	.extern	tcp_eff_send_mss_netif
	.extern	ip_chksum_pseudo
	.extern	memcpy
	.calls	'tcp_zero_window_probe','',16
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L347:
	.word	6265
	.half	3
	.word	.L348
	.byte	4
.L346:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L349
.L685:
	.byte	2
	.byte	'int',0,4,5,3
	.word	169
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	176
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	218
	.byte	7
	.word	218
	.byte	8
	.byte	'__cmpswapw',0
	.word	234
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	239
	.byte	9
	.byte	'value',0
	.word	218
	.byte	9
	.byte	'compare',0
	.word	218
	.byte	0
.L520:
	.byte	2
	.byte	'char',0,1,6,2
	.byte	'char',0,1,6,3
	.word	304
	.byte	7
	.word	312
	.byte	10
	.byte	'Ifx_Lwip_printf',0,1,123,6
	.word	296
	.byte	1,1,1,1,11
	.byte	's',0,1,123,34
	.word	317
	.byte	12,1,123,37,0,13
	.byte	'void',0,7
	.word	365
.L526:
	.byte	2
	.byte	'unsigned short int',0,2,7
.L528:
	.byte	2
	.byte	'unsigned char',0,1,8,14
	.byte	'pbuf',0,2,186,1,8,16,15
	.byte	'next',0
	.word	.L531-.L347
	.byte	4,2,35,0,15
	.byte	'payload',0
	.word	371
	.byte	4,2,35,4,15
	.byte	'tot_len',0
	.word	376
	.byte	2,2,35,8,15
	.byte	'len',0
	.word	376
	.byte	2,2,35,10,15
	.byte	'type_internal',0
	.word	398
	.byte	1,2,35,12,15
	.byte	'flags',0
	.word	398
	.byte	1,2,35,13,15
	.byte	'ref',0
	.word	398
	.byte	1,2,35,14,15
	.byte	'if_idx',0
	.word	398
	.byte	1,2,35,15,0
.L531:
	.byte	7
	.word	415
.L670:
	.byte	16,2,89,9,1,17
	.byte	'PBUF_RAW',0,0,17
	.byte	'PBUF_RAW_TX',0,0,17
	.byte	'PBUF_LINK',0,16,17
	.byte	'PBUF_IP',0,36,17
	.byte	'PBUF_TRANSPORT',0,56,0,16,2,145,1,9,2,17
	.byte	'PBUF_ROM',0,1,17
	.byte	'PBUF_REF',0,193,0,17
	.byte	'PBUF_POOL',0,130,3,17
	.byte	'PBUF_RAM',0,128,5,0,10
	.byte	'pbuf_alloc',0,2,147,2,14
	.word	555
	.byte	1,1,1,1,11
	.byte	'l',0,2,147,2,36
	.word	560
	.byte	11
	.byte	'length',0,2,147,2,45
	.word	376
	.byte	11
	.byte	'type',0,2,147,2,63
	.word	630
	.byte	0,18
	.byte	'pbuf_realloc',0,2,154,2,6,1,1,1,1,11
	.byte	'p',0,2,154,2,32
	.word	555
	.byte	11
	.byte	'size',0,2,154,2,41
	.word	376
	.byte	0,10
	.byte	'pbuf_add_header',0,2,160,2,6
	.word	398
	.byte	1,1,1,1,11
	.byte	'p',0,2,160,2,35
	.word	555
	.byte	11
	.byte	'header_size_increment',0,2,160,2,45
	.word	218
	.byte	0,10
	.byte	'pbuf_free',0,2,165,2,6
	.word	398
	.byte	1,1,1,1,11
	.byte	'p',0,2,165,2,29
	.word	555
	.byte	0,3
	.word	415
	.byte	7
	.word	906
	.byte	10
	.byte	'pbuf_clen',0,2,166,2,7
	.word	376
	.byte	1,1,1,1,11
	.byte	'p',0,2,166,2,36
	.word	911
	.byte	0,18
	.byte	'pbuf_cat',0,2,167,2,6,1,1,1,1,11
	.byte	'head',0,2,167,2,28
	.word	555
	.byte	11
	.byte	'tail',0,2,167,2,47
	.word	555
	.byte	0,10
	.byte	'pbuf_copy_partial',0,2,171,2,7
	.word	376
	.byte	1,1,1,1,11
	.byte	'p',0,2,171,2,44
	.word	911
	.byte	11
	.byte	'dataptr',0,2,171,2,53
	.word	371
	.byte	11
	.byte	'len',0,2,171,2,68
	.word	376
	.byte	11
	.byte	'offset',0,2,171,2,79
	.word	376
	.byte	0,10
	.byte	'lwip_htons',0,3,96,7
	.word	376
	.byte	1,1,1,1,11
	.byte	'x',0,3,96,24
	.word	376
	.byte	0
.L568:
	.byte	2
	.byte	'unsigned long int',0,4,7,10
	.byte	'lwip_htonl',0,3,101,7
	.word	1121
	.byte	1,1,1,1,11
	.byte	'x',0,3,101,24
	.word	1121
	.byte	0,16,4,52,9,1,17
	.byte	'MEMP_UDP_PCB',0,0,17
	.byte	'MEMP_TCP_PCB',0,1,17
	.byte	'MEMP_TCP_PCB_LISTEN',0,2,17
	.byte	'MEMP_TCP_SEG',0,3,17
	.byte	'MEMP_REASSDATA',0,4,17
	.byte	'MEMP_FRAG_PBUF',0,5,17
	.byte	'MEMP_SYS_TIMEOUT',0,6,17
	.byte	'MEMP_PBUF',0,7,17
	.byte	'MEMP_PBUF_POOL',0,8,17
	.byte	'MEMP_MAX',0,9,0,10
	.byte	'memp_malloc',0,4,147,1,7
	.word	371
	.byte	1,1,1,1,11
	.byte	'type',0,4,147,1,26
	.word	1176
	.byte	0,14
	.byte	'ip4_addr',0,6,51,8,4,15
	.byte	'addr',0
	.word	1121
	.byte	4,2,35,0,0,19
	.word	296
	.byte	1,1,5
	.word	555
	.byte	5
	.word	.L572-.L347
	.byte	0,7
	.word	1411
	.byte	20
	.byte	'netif_input_fn',0,5,178,1,17
	.word	1429
	.byte	3
	.word	1382
	.byte	7
	.word	1458
	.byte	19
	.word	296
	.byte	1,1,5
	.word	.L572-.L347
	.byte	5
	.word	555
	.byte	5
	.word	1463
	.byte	0,7
	.word	1468
	.byte	20
	.byte	'netif_output_fn',0,5,189,1,17
	.word	1491
	.byte	19
	.word	296
	.byte	1,1,5
	.word	.L572-.L347
	.byte	5
	.word	555
	.byte	0,7
	.word	1521
	.byte	20
	.byte	'netif_linkoutput_fn',0,5,212,1,17
	.word	1539
	.byte	21,6
	.word	398
	.byte	22,5,0,21,2
	.word	304
	.byte	22,1,0,14
	.byte	'netif',0,5,132,2,8,48,15
	.byte	'next',0
	.word	.L572-.L347
	.byte	4,2,35,0,15
	.byte	'ip_addr',0
	.word	1382
	.byte	4,2,35,4,15
	.byte	'netmask',0
	.word	1382
	.byte	4,2,35,8,15
	.byte	'gw',0
	.word	1382
	.byte	4,2,35,12,15
	.byte	'input',0
	.word	1434
	.byte	4,2,35,16,15
	.byte	'output',0
	.word	1496
	.byte	4,2,35,20,15
	.byte	'linkoutput',0
	.word	1544
	.byte	4,2,35,24,15
	.byte	'state',0
	.word	371
	.byte	4,2,35,28,15
	.byte	'mtu',0
	.word	376
	.byte	2,2,35,32,15
	.byte	'hwaddr',0
	.word	1573
	.byte	6,2,35,34,15
	.byte	'hwaddr_len',0
	.word	398
	.byte	1,2,35,40,15
	.byte	'flags',0
	.word	398
	.byte	1,2,35,41,15
	.byte	'name',0
	.word	1582
	.byte	2,2,35,42,15
	.byte	'num',0
	.word	398
	.byte	1,2,35,44,15
	.byte	'rs_count',0
	.word	398
	.byte	1,2,35,45,0
.L572:
	.byte	7
	.word	1591
	.byte	10
	.byte	'netif_get_by_index',0,5,169,4,15
	.word	1839
	.byte	1,1,1,1,11
	.byte	'idx',0,5,169,4,39
	.word	398
	.byte	0,7
	.word	1411
	.byte	7
	.word	1468
	.byte	7
	.word	1521
	.byte	3
	.word	1382
	.byte	7
	.word	1905
	.byte	10
	.byte	'ip4_route',0,7,65,15
	.word	1839
	.byte	1,1,1,1,11
	.byte	'dest',0,7,65,43
	.word	1910
	.byte	0,10
	.byte	'ip4_output_if',0,7,74,7
	.word	296
	.byte	1,1,1,1,11
	.byte	'p',0,7,74,34
	.word	555
	.byte	11
	.byte	'src',0,7,74,55
	.word	1910
	.byte	11
	.byte	'dest',0,7,74,78
	.word	1910
	.byte	11
	.byte	'ttl',0,7,75,13
	.word	398
	.byte	11
	.byte	'tos',0,7,75,23
	.word	398
	.byte	11
	.byte	'proto',0,7,75,33
	.word	398
	.byte	11
	.byte	'netif',0,7,75,54
	.word	1839
	.byte	0,23
	.byte	'tcp_state',0,9,56,6,1,17
	.byte	'CLOSED',0,0,17
	.byte	'LISTEN',0,1,17
	.byte	'SYN_SENT',0,2,17
	.byte	'SYN_RCVD',0,3,17
	.byte	'ESTABLISHED',0,4,17
	.byte	'FIN_WAIT_1',0,5,17
	.byte	'FIN_WAIT_2',0,6,17
	.byte	'CLOSE_WAIT',0,7,17
	.byte	'CLOSING',0,8,17
	.byte	'LAST_ACK',0,9,17
	.byte	'TIME_WAIT',0,10,0,2
	.byte	'short int',0,2,5,14
	.byte	'tcp_hdr',0,11,56,8,20,15
	.byte	'src',0
	.word	376
	.byte	2,2,35,0,15
	.byte	'dest',0
	.word	376
	.byte	2,2,35,2,15
	.byte	'seqno',0
	.word	1121
	.byte	4,2,35,4,15
	.byte	'ackno',0
	.word	1121
	.byte	4,2,35,8,15
	.byte	'_hdrlen_rsvd_flags',0
	.word	376
	.byte	2,2,35,12,15
	.byte	'wnd',0
	.word	376
	.byte	2,2,35,14,15
	.byte	'chksum',0
	.word	376
	.byte	2,2,35,16,15
	.byte	'urgp',0
	.word	376
	.byte	2,2,35,18,0
.L640:
	.byte	7
	.word	2220
	.byte	14
	.byte	'tcp_seg',0,10,253,1,8,20,15
	.byte	'next',0
	.word	.L533-.L347
	.byte	4,2,35,0,15
	.byte	'p',0
	.word	555
	.byte	4,2,35,4,15
	.byte	'len',0
	.word	376
	.byte	2,2,35,8,15
	.byte	'oversize_left',0
	.word	376
	.byte	2,2,35,10,15
	.byte	'flags',0
	.word	398
	.byte	1,2,35,12,15
	.byte	'tcphdr',0
	.word	2362
	.byte	4,2,35,16,0
.L533:
	.byte	7
	.word	2367
	.byte	19
	.word	296
	.byte	1,1,5
	.word	371
	.byte	5
	.word	.L522-.L347
	.byte	5
	.word	296
	.byte	0,7
	.word	2479
	.byte	20
	.byte	'tcp_accept_fn',0,8,70,17
	.word	2502
	.byte	14
	.byte	'tcp_pcb_listen',0,8,223,1,8,28,15
	.byte	'local_ip',0
	.word	1382
	.byte	4,2,35,0,15
	.byte	'remote_ip',0
	.word	1382
	.byte	4,2,35,4,15
	.byte	'netif_idx',0
	.word	398
	.byte	1,2,35,8,15
	.byte	'so_options',0
	.word	398
	.byte	1,2,35,9,15
	.byte	'tos',0
	.word	398
	.byte	1,2,35,10,15
	.byte	'ttl',0
	.word	398
	.byte	1,2,35,11,15
	.byte	'next',0
	.word	.L1192-.L347
	.byte	4,2,35,12,15
	.byte	'callback_arg',0
	.word	371
	.byte	4,2,35,16,15
	.byte	'state',0
	.word	2065
	.byte	1,2,35,20,15
	.byte	'prio',0
	.word	398
	.byte	1,2,35,21,15
	.byte	'local_port',0
	.word	376
	.byte	2,2,35,22,15
	.byte	'accept',0
	.word	2507
	.byte	4,2,35,24,0
.L1192:
	.byte	7
	.word	2529
	.byte	19
	.word	296
	.byte	1,1,5
	.word	371
	.byte	5
	.word	.L522-.L347
	.byte	5
	.word	376
	.byte	0,7
	.word	2759
	.byte	20
	.byte	'tcp_sent_fn',0,8,96,17
	.word	2782
	.byte	19
	.word	296
	.byte	1,1,5
	.word	371
	.byte	5
	.word	.L522-.L347
	.byte	5
	.word	555
	.byte	5
	.word	296
	.byte	0,7
	.word	2807
	.byte	20
	.byte	'tcp_recv_fn',0,8,82,17
	.word	2835
	.byte	20
	.byte	'tcp_connected_fn',0,8,134,1,17
	.word	2502
	.byte	19
	.word	296
	.byte	1,1,5
	.word	371
	.byte	5
	.word	.L522-.L347
	.byte	0,7
	.word	2886
	.byte	20
	.byte	'tcp_poll_fn',0,8,108,17
	.word	2904
	.byte	24,1,1,5
	.word	371
	.byte	5
	.word	296
	.byte	0,7
	.word	2929
	.byte	20
	.byte	'tcp_err_fn',0,8,120,17
	.word	2943
	.byte	14
	.byte	'tcp_pcb',0,8,242,1,8,156,1,15
	.byte	'local_ip',0
	.word	1382
	.byte	4,2,35,0,15
	.byte	'remote_ip',0
	.word	1382
	.byte	4,2,35,4,15
	.byte	'netif_idx',0
	.word	398
	.byte	1,2,35,8,15
	.byte	'so_options',0
	.word	398
	.byte	1,2,35,9,15
	.byte	'tos',0
	.word	398
	.byte	1,2,35,10,15
	.byte	'ttl',0
	.word	398
	.byte	1,2,35,11,15
	.byte	'next',0
	.word	.L522-.L347
	.byte	4,2,35,12,15
	.byte	'callback_arg',0
	.word	371
	.byte	4,2,35,16,15
	.byte	'state',0
	.word	2065
	.byte	1,2,35,20,15
	.byte	'prio',0
	.word	398
	.byte	1,2,35,21,15
	.byte	'local_port',0
	.word	376
	.byte	2,2,35,22,15
	.byte	'remote_port',0
	.word	376
	.byte	2,2,35,24,15
	.byte	'flags',0
	.word	376
	.byte	2,2,35,26,15
	.byte	'polltmr',0
	.word	398
	.byte	1,2,35,28,15
	.byte	'pollinterval',0
	.word	398
	.byte	1,2,35,29,15
	.byte	'last_timer',0
	.word	398
	.byte	1,2,35,30,15
	.byte	'tmr',0
	.word	1121
	.byte	4,2,35,32,15
	.byte	'rcv_nxt',0
	.word	1121
	.byte	4,2,35,36,15
	.byte	'rcv_wnd',0
	.word	376
	.byte	2,2,35,40,15
	.byte	'rcv_ann_wnd',0
	.word	376
	.byte	2,2,35,42,15
	.byte	'rcv_ann_right_edge',0
	.word	1121
	.byte	4,2,35,44,15
	.byte	'rtime',0
	.word	2207
	.byte	2,2,35,48,15
	.byte	'mss',0
	.word	376
	.byte	2,2,35,50,15
	.byte	'rttest',0
	.word	1121
	.byte	4,2,35,52,15
	.byte	'rtseq',0
	.word	1121
	.byte	4,2,35,56,15
	.byte	'sa',0
	.word	2207
	.byte	2,2,35,60,15
	.byte	'sv',0
	.word	2207
	.byte	2,2,35,62,15
	.byte	'rto',0
	.word	2207
	.byte	2,2,35,64,15
	.byte	'nrtx',0
	.word	398
	.byte	1,2,35,66,15
	.byte	'dupacks',0
	.word	398
	.byte	1,2,35,67,15
	.byte	'lastack',0
	.word	1121
	.byte	4,2,35,68,15
	.byte	'cwnd',0
	.word	376
	.byte	2,2,35,72,15
	.byte	'ssthresh',0
	.word	376
	.byte	2,2,35,74,15
	.byte	'rto_end',0
	.word	1121
	.byte	4,2,35,76,15
	.byte	'snd_nxt',0
	.word	1121
	.byte	4,2,35,80,15
	.byte	'snd_wl1',0
	.word	1121
	.byte	4,2,35,84,15
	.byte	'snd_wl2',0
	.word	1121
	.byte	4,2,35,88,15
	.byte	'snd_lbb',0
	.word	1121
	.byte	4,2,35,92,15
	.byte	'snd_wnd',0
	.word	376
	.byte	2,2,35,96,15
	.byte	'snd_wnd_max',0
	.word	376
	.byte	2,2,35,98,15
	.byte	'snd_buf',0
	.word	376
	.byte	2,2,35,100,15
	.byte	'snd_queuelen',0
	.word	376
	.byte	2,2,35,102,15
	.byte	'unsent_oversize',0
	.word	376
	.byte	2,2,35,104,15
	.byte	'bytes_acked',0
	.word	376
	.byte	2,2,35,106,15
	.byte	'unsent',0
	.word	2474
	.byte	4,2,35,108,15
	.byte	'unacked',0
	.word	2474
	.byte	4,2,35,112,15
	.byte	'ooseq',0
	.word	2474
	.byte	4,2,35,116,15
	.byte	'refused_data',0
	.word	555
	.byte	4,2,35,120,15
	.byte	'listener',0
	.word	2754
	.byte	4,2,35,124,15
	.byte	'sent',0
	.word	2787
	.byte	4,3,35,128,1,15
	.byte	'recv',0
	.word	2840
	.byte	4,3,35,132,1,15
	.byte	'connected',0
	.word	2860
	.byte	4,3,35,136,1,15
	.byte	'poll',0
	.word	2909
	.byte	4,3,35,140,1,15
	.byte	'errf',0
	.word	2948
	.byte	4,3,35,144,1,15
	.byte	'keep_idle',0
	.word	1121
	.byte	4,3,35,148,1,15
	.byte	'persist_cnt',0
	.word	398
	.byte	1,3,35,152,1,15
	.byte	'persist_backoff',0
	.word	398
	.byte	1,3,35,153,1,15
	.byte	'persist_probe',0
	.word	398
	.byte	1,3,35,154,1,15
	.byte	'keep_cnt_sent',0
	.word	398
	.byte	1,3,35,155,1,0
.L522:
	.byte	7
	.word	2967
	.byte	7
	.word	2479
	.byte	7
	.word	2759
	.byte	7
	.word	2807
	.byte	7
	.word	2479
	.byte	7
	.word	2886
	.byte	7
	.word	2929
	.byte	3
	.word	365
.L524:
	.byte	7
	.word	4064
.L577:
	.byte	7
	.word	2474
	.byte	18
	.byte	'tcp_segs_free',0,10,188,3,6,1,1,1,1,11
	.byte	'seg',0,10,188,3,36
	.word	2474
	.byte	0,18
	.byte	'tcp_seg_free',0,10,189,3,6,1,1,1,1,11
	.byte	'seg',0,10,189,3,35
	.word	2474
	.byte	0,3
	.word	2967
.L610:
	.byte	7
	.word	4152
	.byte	3
	.word	1382
.L614:
	.byte	7
	.word	4162
	.byte	10
	.byte	'tcp_eff_send_mss_netif',0,10,223,3,7
	.word	376
	.byte	1,1,1,1,11
	.byte	'sendmss',0,10,223,3,36
	.word	376
	.byte	11
	.byte	'outif',0,10,223,3,59
	.word	1839
	.byte	11
	.byte	'dest',0,10,224,3,47
	.word	4167
	.byte	0,10
	.byte	'ip_chksum_pseudo',0,12,95,7
	.word	376
	.byte	1,1,1,1,11
	.byte	'p',0,12,95,37
	.word	555
	.byte	11
	.byte	'proto',0,12,95,45
	.word	398
	.byte	11
	.byte	'proto_len',0,12,95,58
	.word	376
	.byte	11
	.byte	'src',0,12,96,25
	.word	4167
	.byte	11
	.byte	'dest',0,12,96,47
	.word	4167
	.byte	0,25
	.word	371
	.byte	25
	.word	4069
	.byte	10
	.byte	'memcpy',0,13,53,17
	.word	371
	.byte	1,1,1,1,26,13,53,33
	.word	4352
	.byte	26,13,53,56
	.word	4357
	.byte	26,13,53,68
	.word	218
	.byte	0
.L652:
	.byte	7
	.word	1121
.L674:
	.byte	7
	.word	376
	.byte	3
	.word	2367
.L687:
	.byte	7
	.word	4416
	.byte	20
	.byte	'__wchar_t',0,14,1,1
	.word	2207
	.byte	20
	.byte	'__size_t',0,14,1,1
	.word	218
	.byte	20
	.byte	'__ptrdiff_t',0,14,1,1
	.word	169
	.byte	27,1,7
	.word	4481
	.byte	20
	.byte	'__codeptr',0,14,1,1
	.word	4483
	.byte	20
	.byte	'__intptr_t',0,14,1,1
	.word	169
	.byte	20
	.byte	'__uintptr_t',0,14,1,1
	.word	218
	.byte	20
	.byte	'size_t',0,15,24,25
	.word	218
	.byte	20
	.byte	'uint8',0,16,108,29
	.word	398
	.byte	20
	.byte	'uint16',0,16,112,29
	.word	376
	.byte	20
	.byte	'uint32',0,16,116,29
	.word	1121
	.byte	20
	.byte	'sint8',0,16,125,29
	.word	296
	.byte	20
	.byte	'sint16',0,16,129,1,29
	.word	2207
	.byte	2
	.byte	'long int',0,4,5,20
	.byte	'sint32',0,16,134,1,29
	.word	4634
	.byte	2
	.byte	'long long int',0,8,5,20
	.byte	'sint64',0,16,141,1,29
	.word	4662
	.byte	2
	.byte	'float',0,4,4,20
	.byte	'float32',0,16,170,1,29
	.word	4695
	.byte	20
	.byte	'pvoid',0,17,54,28
	.word	371
	.byte	20
	.byte	'Ifx_TickTime',0,17,76,28
	.word	4662
	.byte	20
	.byte	'u8_t',0,1,85,16
	.word	398
	.byte	20
	.byte	'u16_t',0,1,86,16
	.word	376
	.byte	20
	.byte	'u32_t',0,1,87,16
	.word	1121
	.byte	20
	.byte	's8_t',0,1,88,16
	.word	296
	.byte	20
	.byte	's16_t',0,1,89,16
	.word	2207
	.byte	20
	.byte	'intmax_t',0,18,198,2,41
	.word	4662
	.byte	20
	.byte	'tcpwnd_size_t',0,9,53,15
	.word	376
	.byte	20
	.byte	'mem_size_t',0,19,67,15
	.word	376
	.byte	20
	.byte	'err_t',0,20,96,14
	.word	296
	.byte	20
	.byte	'pbuf_layer',0,2,112,3
	.word	560
	.byte	20
	.byte	'pbuf_type',0,2,168,1,3
	.word	630
	.byte	24,1,1,5
	.word	555
	.byte	0,7
	.word	4935
	.byte	20
	.byte	'pbuf_free_custom_fn',0,2,242,1,16
	.word	4944
	.byte	20
	.byte	'ip4_addr_t',0,6,57,25
	.word	1382
	.byte	20
	.byte	'ip_addr_t',0,21,142,2,20
	.word	1382
	.byte	20
	.byte	'memp_t',0,4,56,3
	.word	1176
	.byte	14
	.byte	'stats_proto',0,22,64,8,24,15
	.byte	'xmit',0
	.word	376
	.byte	2,2,35,0,15
	.byte	'recv',0
	.word	376
	.byte	2,2,35,2,15
	.byte	'fw',0
	.word	376
	.byte	2,2,35,4,15
	.byte	'drop',0
	.word	376
	.byte	2,2,35,6,15
	.byte	'chkerr',0
	.word	376
	.byte	2,2,35,8,15
	.byte	'lenerr',0
	.word	376
	.byte	2,2,35,10,15
	.byte	'memerr',0
	.word	376
	.byte	2,2,35,12,15
	.byte	'rterr',0
	.word	376
	.byte	2,2,35,14,15
	.byte	'proterr',0
	.word	376
	.byte	2,2,35,16,15
	.byte	'opterr',0
	.word	376
	.byte	2,2,35,18,15
	.byte	'err',0
	.word	376
	.byte	2,2,35,20,15
	.byte	'cachehit',0
	.word	376
	.byte	2,2,35,22,0,14
	.byte	'stats_mem',0,22,98,8,16,15
	.byte	'name',0
	.word	317
	.byte	4,2,35,0,15
	.byte	'err',0
	.word	376
	.byte	2,2,35,4,15
	.byte	'avail',0
	.word	376
	.byte	2,2,35,6,15
	.byte	'used',0
	.word	376
	.byte	2,2,35,8,15
	.byte	'max',0
	.word	376
	.byte	2,2,35,10,15
	.byte	'illegal',0
	.word	376
	.byte	2,2,35,12,0,7
	.word	5230
	.byte	21,36
	.word	5332
	.byte	22,8,0,14
	.byte	'stats_',0,22,232,1,8,220,1,15
	.byte	'link',0
	.word	5031
	.byte	24,2,35,0,15
	.byte	'etharp',0
	.word	5031
	.byte	24,2,35,24,15
	.byte	'ip_frag',0
	.word	5031
	.byte	24,2,35,48,15
	.byte	'ip',0
	.word	5031
	.byte	24,2,35,72,15
	.byte	'icmp',0
	.word	5031
	.byte	24,2,35,96,15
	.byte	'udp',0
	.word	5031
	.byte	24,2,35,120,15
	.byte	'tcp',0
	.word	5031
	.byte	24,3,35,144,1,15
	.byte	'mem',0
	.word	5230
	.byte	16,3,35,168,1,15
	.byte	'memp',0
	.word	5337
	.byte	36,3,35,184,1,0,28
	.byte	'lwip_stats',0,22,176,2,22
	.word	5346
	.byte	1,1,14
	.byte	'link_changed_s',0,5,213,4,10,1,15
	.byte	'state',0
	.word	398
	.byte	1,2,35,0,0,14
	.byte	'status_changed_s',0,5,219,4,10,1,15
	.byte	'state',0
	.word	398
	.byte	1,2,35,0,0,14
	.byte	'ipv4_changed_s',0,5,225,4,10,12,15
	.byte	'old_address',0
	.word	4167
	.byte	4,2,35,0,15
	.byte	'old_netmask',0
	.word	4167
	.byte	4,2,35,4,15
	.byte	'old_gw',0
	.word	4167
	.byte	4,2,35,8,0,14
	.byte	'ipv6_set_s',0,5,233,4,10,8,15
	.byte	'addr_index',0
	.word	296
	.byte	1,2,35,0,15
	.byte	'old_address',0
	.word	4167
	.byte	4,2,35,4,0,14
	.byte	'ipv6_addr_state_changed_s',0,5,241,4,10,8,15
	.byte	'addr_index',0
	.word	296
	.byte	1,2,35,0,15
	.byte	'old_state',0
	.word	398
	.byte	1,2,35,1,15
	.byte	'address',0
	.word	4167
	.byte	4,2,35,4,0,29,5,210,4,9,12,15
	.byte	'link_changed',0
	.word	5512
	.byte	1,2,35,0,15
	.byte	'status_changed',0
	.word	5549
	.byte	1,2,35,0,15
	.byte	'ipv4_changed',0
	.word	5588
	.byte	12,2,35,0,15
	.byte	'ipv6_set',0
	.word	5668
	.byte	8,2,35,0,15
	.byte	'ipv6_addr_state_changed',0
	.word	5727
	.byte	8,2,35,0,0,3
	.word	5816
	.byte	7
	.word	5942
	.byte	24,1,1,5
	.word	1839
	.byte	5
	.word	376
	.byte	5
	.word	5947
	.byte	0,7
	.word	5952
	.byte	20
	.byte	'netif_ext_callback_fn',0,5,132,5,16
	.word	5971
	.byte	14
	.byte	'ip4_addr_packed',0,23,53,8,4,15
	.byte	'addr',0
	.word	1121
	.byte	4,2,35,0,0,20
	.byte	'ip4_addr_p_t',0,23,61,32
	.word	6007
	.byte	24,1,1,5
	.word	398
	.byte	5
	.word	371
	.byte	0,7
	.word	6064
	.byte	20
	.byte	'tcp_extarg_callback_pcb_destroyed_fn',0,8,173,1,16
	.word	6078
	.byte	19
	.word	296
	.byte	1,1,5
	.word	398
	.byte	5
	.word	2754
	.byte	5
	.word	4029
	.byte	0,7
	.word	6129
	.byte	20
	.byte	'tcp_extarg_callback_passive_open_fn',0,8,182,1,17
	.word	6152
	.byte	20
	.byte	'tcpflags_t',0,8,206,1,15
	.word	376
	.byte	28
	.byte	'tcp_input_pcb',0,10,198,2,24
	.word	4029
	.byte	1,1,28
	.byte	'tcp_ticks',0,10,199,2,14
	.word	1121
	.byte	1,1,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L348:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,11
	.byte	5,0,3,8,58,15,59,15,57,15,73,19,0,0,12,24,0,58,15,59,15,57,15,0,0,13,59,0,3,8,0,0,14,19,1,3,8,58,15,59
	.byte	15,57,15,11,15,0,0,15,13,0,3,8,73,19,11,15,56,9,0,0,16,4,1,58,15,59,15,57,15,11,15,0,0,17,40,0,3,8,28
	.byte	13,0,0,18,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,19,21,1,73,19,54,15,39,12,0,0,20,22,0
	.byte	3,8,58,15,59,15,57,15,73,19,0,0,21,1,1,11,15,73,19,0,0,22,33,0,47,15,0,0,23,4,1,3,8,58,15,59,15,57,15
	.byte	11,15,0,0,24,21,1,54,15,39,12,0,0,25,55,0,73,19,0,0,26,5,0,58,15,59,15,57,15,73,19,0,0,27,21,0,54,15,0
	.byte	0,28,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,29,23,1,58,15,59,15,57,15,11,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L349:
	.word	.L1194-.L1193
.L1193:
	.half	3
	.word	.L1196-.L1195
.L1195:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'cc.h',0,1,0,0
	.byte	'pbuf.h',0,2,0,0
	.byte	'def.h',0,2,0,0
	.byte	'memp.h',0,2,0,0
	.byte	'netif.h',0,2,0,0
	.byte	'ip4_addr.h',0,2,0,0
	.byte	'ip4.h',0,2,0,0
	.byte	'tcp.h',0,2,0,0
	.byte	'tcpbase.h',0,2,0,0
	.byte	'tcp_priv.h',0,3,0,0
	.byte	'tcp.h',0,4,0,0
	.byte	'inet_chksum.h',0,2,0,0
	.byte	'string.h',0,5,0,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0
	.byte	'stddef.h',0,5,0,0
	.byte	'Platform_Types.h',0,6,0,0
	.byte	'Ifx_Types.h',0,6,0,0
	.byte	'stdint.h',0,5,0,0
	.byte	'mem.h',0,2,0,0
	.byte	'err.h',0,2,0,0
	.byte	'ip_addr.h',0,2,0,0
	.byte	'stats.h',0,2,0,0
	.byte	'ip4.h',0,4,0,0,0
.L1196:
.L1194:
	.sdecl	'.debug_info',debug,cluster('tcp_write')
	.sect	'.debug_info'
.L350:
	.word	809
	.half	3
	.word	.L351
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L353,.L352
	.byte	2
	.word	.L346
	.byte	3
	.byte	'tcp_write',0,1,134,3,1
	.word	.L520
	.byte	1,1,1
	.word	.L291,.L521,.L290
	.byte	4
	.byte	'pcb',0,1,134,3,27
	.word	.L522,.L523
	.byte	4
	.byte	'arg',0,1,134,3,44
	.word	.L524,.L525
	.byte	4
	.byte	'len',0,1,134,3,55
	.word	.L526,.L527
	.byte	4
	.byte	'apiflags',0,1,134,3,65
	.word	.L528,.L529
	.byte	5
	.word	.L530
	.byte	6
	.byte	'concat_p',0,1,136,3,16
	.word	.L531,.L532
	.byte	6
	.byte	'last_unsent',0,1,137,3,19
	.word	.L533,.L534
	.byte	6
	.byte	'seg',0,1,137,3,40
	.word	.L533,.L535
	.byte	6
	.byte	'prev_seg',0,1,137,3,53
	.word	.L533,.L536
	.byte	6
	.byte	'queue',0,1,137,3,71
	.word	.L533,.L537
	.byte	6
	.byte	'pos',0,1,138,3,9
	.word	.L526,.L538
	.byte	6
	.byte	'queuelen',0,1,139,3,9
	.word	.L526,.L539
	.byte	6
	.byte	'oversize',0,1,143,3,9
	.word	.L526,.L540
	.byte	6
	.byte	'oversize_used',0,1,144,3,9
	.word	.L526,.L541
	.byte	6
	.byte	'oversize_add',0,1,146,3,9
	.word	.L526,.L542
	.byte	6
	.byte	'extendlen',0,1,149,3,9
	.word	.L526,.L543
	.byte	6
	.byte	'err',0,1,155,3,9
	.word	.L520,.L544
	.byte	6
	.byte	'mss_local',0,1,156,3,9
	.word	.L526,.L545
	.byte	5
	.word	.L546
	.byte	6
	.byte	'space',0,1,221,3,11
	.word	.L526,.L548
	.byte	6
	.byte	'unsent_optlen',0,1,222,3,11
	.word	.L526,.L549
	.byte	7
	.word	.L550,.L46
	.byte	6
	.byte	'seglen',0,1,148,4,13
	.word	.L526,.L551
	.byte	5
	.word	.L552
	.byte	6
	.byte	'p',0,1,173,4,22
	.word	.L531,.L553
	.byte	0,0,0,5
	.word	.L554
	.byte	6
	.byte	'p',0,1,214,4,18
	.word	.L531,.L555
	.byte	6
	.byte	'left',0,1,215,4,11
	.word	.L526,.L556
	.byte	6
	.byte	'seglen',0,1,217,4,11
	.word	.L526,.L557
	.byte	7
	.word	.L72,.L75
	.byte	6
	.byte	'p2',0,1,239,4,20
	.word	.L531,.L558
	.byte	0,0,7
	.word	.L559,.L88
	.byte	6
	.byte	'p',0,1,200,5,18
	.word	.L531,.L560
	.byte	0,7
	.word	.L561,.L95
	.byte	6
	.byte	'p',0,1,229,5,18
	.word	.L531,.L562
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_write')
	.sect	'.debug_abbrev'
.L351:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,1,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_write')
	.sect	'.debug_line'
.L352:
	.word	.L1198-.L1197
.L1197:
	.half	3
	.word	.L1200-.L1199
.L1199:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1200:
	.byte	5,1,7,0,5,2
	.word	.L291
	.byte	3,133,3,1,5,25,9
	.half	.L770-.L291
	.byte	3,2,1,5,62,9
	.half	.L773-.L770
	.byte	3,1,1,5,13,9
	.half	.L780-.L773
	.byte	3,1,1,5,77,3,127,1,5,1,9
	.half	.L779-.L780
	.byte	3,125,1,5,18,9
	.half	.L776-.L779
	.byte	3,9,1,5,22,3,3,1,5,23,9
	.half	.L777-.L776
	.byte	3,126,1,5,19,3,5,1,5,44,9
	.half	.L775-.L777
	.byte	3,116,1,5,3,9
	.half	.L782-.L775
	.byte	3,21,1,7,9
	.half	.L1201-.L782
	.byte	1,5,15,9
	.half	.L38-.L1201
	.byte	3,3,1,5,3,9
	.half	.L1202-.L38
	.byte	3,12,1,5,15,9
	.half	.L763-.L1202
	.byte	3,116,1,5,25,9
	.half	.L765-.L763
	.byte	3,1,1,5,3,9
	.half	.L1203-.L765
	.byte	3,11,1,7,9
	.half	.L1204-.L1203
	.byte	1,5,1,9
	.half	.L767-.L1204
	.byte	3,255,2,1,5,31,7,9
	.half	.L42-.L767
	.byte	3,132,125,1,5,3,9
	.half	.L768-.L42
	.byte	3,1,1,5,10,7,9
	.half	.L1205-.L768
	.byte	3,43,1,5,17,9
	.half	.L769-.L1205
	.byte	3,88,1,5,3,9
	.half	.L781-.L769
	.byte	3,40,1,5,22,7,9
	.half	.L547-.L781
	.byte	3,5,1,5,62,9
	.half	.L1206-.L547
	.byte	1,5,21,9
	.half	.L1207-.L1206
	.byte	3,4,1,5,5,9
	.half	.L1208-.L1207
	.byte	3,1,1,5,21,9
	.half	.L1209-.L1208
	.byte	3,127,1,5,5,9
	.half	.L778-.L1209
	.byte	3,1,1,5,21,9
	.half	.L783-.L778
	.byte	3,127,1,5,5,9
	.half	.L1210-.L783
	.byte	3,1,1,7,9
	.half	.L1211-.L1210
	.byte	1,5,37,9
	.half	.L49-.L1211
	.byte	3,1,1,5,5,9
	.half	.L1212-.L49
	.byte	3,12,1,5,43,9
	.half	.L1213-.L1212
	.byte	3,116,1,5,23,9
	.half	.L1214-.L1213
	.byte	1,5,5,9
	.half	.L1215-.L1214
	.byte	3,12,1,5,19,9
	.half	.L50-.L1215
	.byte	3,3,1,5,5,9
	.half	.L789-.L50
	.byte	3,1,1,5,7,7,9
	.half	.L1216-.L789
	.byte	3,1,1,7,9
	.half	.L1217-.L1216
	.byte	1,5,23,9
	.half	.L52-.L1217
	.byte	3,2,1,5,11,3,127,1,5,23,9
	.half	.L1218-.L52
	.byte	3,1,1,5,16,9
	.half	.L1219-.L1218
	.byte	3,2,1,5,13,9
	.half	.L792-.L1219
	.byte	3,1,1,5,11,9
	.half	.L793-.L792
	.byte	3,126,1,5,16,9
	.half	.L1220-.L793
	.byte	3,1,1,5,13,9
	.half	.L794-.L1220
	.byte	3,1,1,5,5,9
	.half	.L51-.L794
	.byte	3,3,1,7,9
	.half	.L1221-.L51
	.byte	1,7,9
	.half	.L1222-.L1221
	.byte	1,5,9,9
	.half	.L53-.L1222
	.byte	3,19,1,5,31,7,9
	.half	.L1223-.L53
	.byte	1,5,51,7,9
	.half	.L1224-.L1223
	.byte	1,5,57,9
	.half	.L1225-.L1224
	.byte	1,5,22,7,9
	.half	.L550-.L1225
	.byte	3,1,1,5,11,9
	.half	.L797-.L550
	.byte	3,1,1,5,7,9
	.half	.L1226-.L797
	.byte	3,5,1,5,69,9
	.half	.L1227-.L1226
	.byte	3,2,1,5,94,9
	.half	.L1228-.L1227
	.byte	1,5,43,9
	.half	.L799-.L1228
	.byte	1,5,69,1,5,84,9
	.half	.L1229-.L799
	.byte	1,5,23,9
	.half	.L796-.L1229
	.byte	1,5,69,9
	.half	.L1230-.L796
	.byte	1,5,9,9
	.half	.L1231-.L1230
	.byte	1,5,22,7,9
	.half	.L1232-.L1231
	.byte	3,7,1,5,9,9
	.half	.L1233-.L1232
	.byte	3,2,1,5,32,9
	.half	.L803-.L1233
	.byte	3,126,1,5,29,9
	.half	.L58-.L803
	.byte	3,11,1,5,49,9
	.half	.L809-.L58
	.byte	1,5,16,9
	.half	.L807-.L809
	.byte	3,1,1,5,32,9
	.half	.L1234-.L807
	.byte	1,5,13,9
	.half	.L1235-.L1234
	.byte	1,5,28,7,9
	.half	.L1236-.L1235
	.byte	3,1,1,5,41,9
	.half	.L1237-.L1236
	.byte	1,5,47,9
	.half	.L1238-.L1237
	.byte	1,5,38,9
	.half	.L810-.L1238
	.byte	1,5,47,9
	.half	.L1239-.L810
	.byte	1,5,11,7,9
	.half	.L1240-.L1239
	.byte	3,1,1,7,9
	.half	.L1241-.L1240
	.byte	1,5,21,9
	.half	.L65-.L1241
	.byte	3,1,1,5,29,9
	.half	.L1242-.L65
	.byte	1,5,38,9
	.half	.L63-.L1242
	.byte	3,2,1,5,56,1,5,25,9
	.half	.L814-.L63
	.byte	1,5,11,9
	.half	.L1243-.L814
	.byte	1,5,70,7,9
	.half	.L1244-.L1243
	.byte	3,6,1,5,50,9
	.half	.L819-.L1244
	.byte	1,5,33,9
	.half	.L60-.L819
	.byte	3,1,1,5,20,9
	.half	.L823-.L60
	.byte	1,5,11,9
	.half	.L66-.L823
	.byte	3,10,1,5,61,9
	.half	.L815-.L66
	.byte	3,78,1,5,5,9
	.half	.L46-.L815
	.byte	3,55,1,5,19,9
	.half	.L827-.L46
	.byte	3,11,1,5,22,9
	.half	.L71-.L827
	.byte	3,2,1,5,20,9
	.half	.L829-.L71
	.byte	3,2,1,5,5,3,6,1,5,79,9
	.half	.L1245-.L829
	.byte	3,3,1,5,113,9
	.half	.L1246-.L1245
	.byte	1,5,110,9
	.half	.L1247-.L1246
	.byte	1,5,94,9
	.half	.L832-.L1247
	.byte	1,5,79,9
	.half	.L833-.L832
	.byte	1,5,110,9
	.half	.L1248-.L833
	.byte	1,5,34,9
	.half	.L1249-.L1248
	.byte	1,5,94,9
	.half	.L1250-.L1249
	.byte	1,5,14,9
	.half	.L834-.L1250
	.byte	1,5,79,9
	.half	.L828-.L834
	.byte	1,5,7,9
	.half	.L1251-.L828
	.byte	1,7,9
	.half	.L1252-.L1251
	.byte	3,4,1,9
	.half	.L74-.L1252
	.byte	3,2,1,5,109,9
	.half	.L1253-.L74
	.byte	1,5,7,9
	.half	.L72-.L1253
	.byte	3,9,1,7,9
	.half	.L1254-.L72
	.byte	1,5,28,9
	.half	.L76-.L1254
	.byte	3,2,1,5,52,9
	.half	.L1255-.L76
	.byte	1,5,15,9
	.half	.L845-.L1255
	.byte	1,5,7,9
	.half	.L847-.L845
	.byte	1,5,60,7,9
	.half	.L1256-.L847
	.byte	3,13,1,5,27,9
	.half	.L848-.L1256
	.byte	3,3,1,5,43,9
	.half	.L1257-.L848
	.byte	1,5,60,9
	.half	.L1258-.L1257
	.byte	3,125,1,5,40,9
	.half	.L846-.L1258
	.byte	1,5,51,9
	.half	.L849-.L846
	.byte	3,3,1,5,40,9
	.half	.L1259-.L849
	.byte	3,125,1,5,51,9
	.half	.L1260-.L1259
	.byte	3,3,1,5,14,9
	.half	.L851-.L1260
	.byte	1,5,7,9
	.half	.L844-.L851
	.byte	1,5,19,7,9
	.half	.L1261-.L844
	.byte	3,3,1,5,9,9
	.half	.L850-.L1261
	.byte	3,1,1,5,29,9
	.half	.L78-.L850
	.byte	3,4,1,5,27,9
	.half	.L75-.L78
	.byte	3,3,1,5,14,9
	.half	.L856-.L75
	.byte	1,5,5,9
	.half	.L857-.L856
	.byte	3,5,1,5,17,7,9
	.half	.L1262-.L857
	.byte	3,3,1,5,7,9
	.half	.L858-.L1262
	.byte	3,1,1,5,43,9
	.half	.L80-.L858
	.byte	3,3,1,5,49,1,5,66,9
	.half	.L1263-.L80
	.byte	1,5,59,9
	.half	.L859-.L1263
	.byte	1,5,66,1,5,14,9
	.half	.L860-.L859
	.byte	1,5,5,9
	.half	.L853-.L860
	.byte	1,5,24,7,9
	.half	.L1264-.L853
	.byte	3,4,1,5,5,9
	.half	.L1265-.L1264
	.byte	3,9,1,5,13,9
	.half	.L1266-.L1265
	.byte	3,1,1,5,18,9
	.half	.L863-.L1266
	.byte	1,5,7,9
	.half	.L83-.L863
	.byte	3,3,1,5,22,9
	.half	.L85-.L83
	.byte	3,1,1,5,9,9
	.half	.L84-.L85
	.byte	3,9,1,5,14,3,122,1,5,9,9
	.half	.L868-.L84
	.byte	3,6,1,5,19,9
	.half	.L70-.L868
	.byte	3,160,127,1,5,7,7,9
	.half	.L870-.L70
	.byte	3,232,0,1,5,46,7,9
	.half	.L871-.L870
	.byte	1,5,16,9
	.half	.L873-.L871
	.byte	3,1,1,5,32,9
	.half	.L1267-.L873
	.byte	1,5,3,9
	.half	.L86-.L1267
	.byte	3,9,1,5,25,7,9
	.half	.L559-.L86
	.byte	3,3,1,5,31,9
	.half	.L874-.L559
	.byte	1,5,8,9
	.half	.L90-.L874
	.byte	3,1,1,5,18,9
	.half	.L1268-.L90
	.byte	1,5,12,9
	.half	.L1269-.L1268
	.byte	3,1,1,5,7,9
	.half	.L1270-.L1269
	.byte	1,5,9,7,9
	.half	.L1271-.L1270
	.byte	3,1,1,5,10,9
	.half	.L877-.L1271
	.byte	3,1,1,5,16,9
	.half	.L1272-.L877
	.byte	1,5,38,9
	.half	.L91-.L1272
	.byte	3,124,1,5,31,9
	.half	.L89-.L91
	.byte	1,5,16,7,9
	.half	.L878-.L89
	.byte	3,7,1,5,22,9
	.half	.L1273-.L878
	.byte	1,5,5,9
	.half	.L1274-.L1273
	.byte	3,2,1,5,16,9
	.half	.L92-.L1274
	.byte	3,2,1,5,32,9
	.half	.L1275-.L92
	.byte	1,5,3,9
	.half	.L88-.L1275
	.byte	3,10,1,5,24,9
	.half	.L882-.L88
	.byte	3,121,1,5,3,9
	.half	.L1276-.L882
	.byte	3,7,1,5,5,7,9
	.half	.L884-.L1276
	.byte	3,1,1,7,9
	.half	.L885-.L884
	.byte	1,5,25,9
	.half	.L94-.L885
	.byte	3,2,1,5,30,9
	.half	.L888-.L94
	.byte	1,5,33,9
	.half	.L890-.L888
	.byte	3,1,1,5,16,9
	.half	.L891-.L890
	.byte	1,5,33,9
	.half	.L892-.L891
	.byte	1,5,22,9
	.half	.L894-.L892
	.byte	1,5,39,9
	.half	.L895-.L894
	.byte	3,127,1,5,10,9
	.half	.L93-.L895
	.byte	3,2,1,5,5,9
	.half	.L561-.L93
	.byte	3,2,1,7,9
	.half	.L1277-.L561
	.byte	1,5,25,9
	.half	.L98-.L1277
	.byte	3,2,1,5,45,9
	.half	.L900-.L98
	.byte	1,5,8,9
	.half	.L100-.L900
	.byte	3,1,1,5,18,9
	.half	.L1278-.L100
	.byte	1,5,52,9
	.half	.L1279-.L1278
	.byte	3,127,1,5,31,9
	.half	.L99-.L1279
	.byte	1,5,45,9
	.half	.L1280-.L99
	.byte	1,5,6,7,9
	.half	.L1281-.L1280
	.byte	3,3,1,5,16,9
	.half	.L1282-.L1281
	.byte	1,5,6,9
	.half	.L1283-.L1282
	.byte	3,1,1,5,12,9
	.half	.L1284-.L1283
	.byte	1,5,16,9
	.half	.L903-.L1284
	.byte	3,1,1,5,22,9
	.half	.L1285-.L903
	.byte	1,5,3,9
	.half	.L95-.L1285
	.byte	3,21,1,5,17,7,9
	.half	.L904-.L95
	.byte	3,1,1,5,24,9
	.half	.L1286-.L904
	.byte	1,5,23,9
	.half	.L101-.L1286
	.byte	3,2,1,5,6,9
	.half	.L102-.L101
	.byte	3,6,1,5,16,9
	.half	.L1287-.L102
	.byte	1,5,6,9
	.half	.L1288-.L1287
	.byte	3,1,1,5,16,9
	.half	.L1289-.L1288
	.byte	1,5,21,9
	.half	.L1290-.L1289
	.byte	3,1,1,5,3,9
	.half	.L1291-.L1290
	.byte	3,4,1,5,5,7,9
	.half	.L1292-.L1291
	.byte	3,1,1,5,7,9
	.half	.L103-.L1292
	.byte	3,5,1,5,25,7,9
	.half	.L1293-.L103
	.byte	1,5,34,9
	.half	.L1294-.L1293
	.byte	1,5,79,7,9
	.half	.L1295-.L1294
	.byte	1,5,5,9
	.half	.L1296-.L1295
	.byte	3,1,1,5,10,9
	.half	.L106-.L1296
	.byte	3,3,1,5,1,9
	.half	.L45-.L106
	.byte	3,17,1,5,3,7,9
	.half	.L59-.L45
	.byte	3,113,1,9
	.half	.L908-.L59
	.byte	3,1,1,9
	.half	.L912-.L908
	.byte	3,2,1,5,15,9
	.half	.L1297-.L912
	.byte	3,1,1,5,3,9
	.half	.L110-.L1297
	.byte	3,2,1,5,19,9
	.half	.L1298-.L110
	.byte	3,1,1,5,10,9
	.half	.L111-.L1298
	.byte	3,2,1,5,3,9
	.half	.L1299-.L111
	.byte	1,5,5,7,9
	.half	.L1300-.L1299
	.byte	3,1,1,5,10,9
	.half	.L112-.L1300
	.byte	3,4,1,5,1,3,1,1,7,9
	.half	.L354-.L112
	.byte	0,1,1
.L1198:
	.sdecl	'.debug_ranges',debug,cluster('tcp_write')
	.sect	'.debug_ranges'
.L353:
	.word	-1,.L291,0,.L354-.L291,0,0
.L530:
	.word	-1,.L291,0,.L521-.L291,-1,.L293,0,.L519-.L293,0,0
.L546:
	.word	-1,.L291,.L547-.L291,.L46-.L291,-1,.L297,0,.L509-.L297,0,0
.L552:
	.word	-1,.L291,.L58-.L291,.L66-.L291,-1,.L295,0,.L514-.L295,0,0
.L554:
	.word	-1,.L291,.L71-.L291,.L70-.L291,-1,.L299,0,.L479-.L299,-1,.L301,0,.L474-.L301,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_output')
	.sect	'.debug_info'
.L355:
	.word	383
	.half	3
	.word	.L356
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L358,.L357
	.byte	2
	.word	.L346
	.byte	3
	.byte	'tcp_output',0,1,213,9,1
	.word	.L520
	.byte	1,1,1
	.word	.L311,.L563,.L310
	.byte	4
	.byte	'pcb',0,1,213,9,28
	.word	.L522,.L564
	.byte	5
	.word	.L565
	.byte	6
	.byte	'seg',0,1,215,9,19
	.word	.L533,.L566
	.byte	6
	.byte	'useg',0,1,215,9,25
	.word	.L533,.L567
	.byte	6
	.byte	'wnd',0,1,216,9,9
	.word	.L568,.L569
	.byte	6
	.byte	'snd_nxt',0,1,216,9,14
	.word	.L568,.L570
	.byte	6
	.byte	'err',0,1,217,9,9
	.word	.L520,.L571
	.byte	6
	.byte	'netif',0,1,218,9,17
	.word	.L572,.L573
	.byte	7
	.word	.L574,.L165
	.byte	8
	.word	.L575,.L576
	.byte	6
	.byte	'cur_seg',0,1,239,10,28
	.word	.L577,.L578
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_output')
	.sect	'.debug_abbrev'
.L356:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,0,17,1,18,1,0,0,8,11,1,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_output')
	.sect	'.debug_line'
.L357:
	.word	.L1302-.L1301
.L1301:
	.half	3
	.word	.L1304-.L1303
.L1303:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1304:
	.byte	5,1,7,0,5,2
	.word	.L311
	.byte	3,212,9,1,5,3,9
	.half	.L998-.L311
	.byte	3,12,1,7,9
	.half	.L1305-.L998
	.byte	1,9
	.half	.L160-.L1305
	.byte	3,2,1,5,7,9
	.half	.L161-.L160
	.byte	3,7,1,5,3,9
	.half	.L1306-.L161
	.byte	1,5,12,7,9
	.half	.L1307-.L1306
	.byte	3,6,1,5,9,9
	.half	.L1011-.L1307
	.byte	3,126,1,5,3,9
	.half	.L1308-.L1011
	.byte	3,4,1,5,46,7,9
	.half	.L1309-.L1308
	.byte	3,24,1,5,9,9
	.half	.L1003-.L1309
	.byte	1,5,3,9
	.half	.L1006-.L1003
	.byte	3,1,1,5,7,7,9
	.half	.L1310-.L1006
	.byte	3,5,1,5,5,9
	.half	.L574-.L1310
	.byte	3,5,1,9
	.half	.L1311-.L574
	.byte	3,125,1,5,14,9
	.half	.L164-.L1311
	.byte	3,1,1,5,1,3,249,0,1,5,7,7,9
	.half	.L165-.L164
	.byte	3,141,127,1,5,43,9
	.half	.L1005-.L165
	.byte	1,5,38,9
	.half	.L1312-.L1005
	.byte	1,5,58,1,5,53,9
	.half	.L1313-.L1312
	.byte	1,5,3,9
	.half	.L1314-.L1313
	.byte	1,5,19,7,9
	.half	.L1315-.L1314
	.byte	3,7,1,5,9,9
	.half	.L1316-.L1315
	.byte	1,5,35,7,9
	.half	.L1317-.L1316
	.byte	1,5,45,9
	.half	.L1318-.L1317
	.byte	1,5,59,7,9
	.half	.L1319-.L1318
	.byte	1,5,77,9
	.half	.L1320-.L1319
	.byte	1,5,24,7,9
	.half	.L1321-.L1320
	.byte	3,1,1,5,30,9
	.half	.L1322-.L1321
	.byte	3,1,1,5,28,1,5,26,9
	.half	.L1323-.L1322
	.byte	3,1,1,5,12,9
	.half	.L163-.L1323
	.byte	3,3,1,5,5,9
	.half	.L1324-.L163
	.byte	1,5,33,7,9
	.half	.L1325-.L1324
	.byte	3,1,1,5,26,9
	.half	.L168-.L1325
	.byte	3,5,1,5,24,1,5,13,9
	.half	.L1326-.L168
	.byte	3,3,1,5,3,9
	.half	.L1012-.L1326
	.byte	3,1,1,5,30,7,9
	.half	.L1327-.L1012
	.byte	3,1,1,5,73,9
	.half	.L1328-.L1327
	.byte	3,4,1,5,5,9
	.half	.L178-.L1328
	.byte	3,1,1,5,10,9
	.half	.L179-.L178
	.byte	3,9,1,5,9,9
	.half	.L187-.L179
	.byte	1,5,14,7,9
	.half	.L1329-.L187
	.byte	3,1,1,5,22,9
	.half	.L1330-.L1329
	.byte	1,5,51,9
	.half	.L1331-.L1330
	.byte	1,5,12,7,9
	.half	.L188-.L1331
	.byte	3,12,1,5,5,9
	.half	.L1332-.L188
	.byte	1,5,7,7,9
	.half	.L1333-.L1332
	.byte	3,1,1,5,40,9
	.half	.L190-.L1333
	.byte	3,3,1,5,5,9
	.half	.L1014-.L190
	.byte	3,1,1,5,7,7,9
	.half	.L1334-.L1014
	.byte	3,2,1,5,1,9
	.half	.L1335-.L1334
	.byte	3,57,1,5,26,7,9
	.half	.L191-.L1335
	.byte	3,75,1,5,24,1,5,22,9
	.half	.L1336-.L191
	.byte	3,2,1,5,17,9
	.half	.L1337-.L1336
	.byte	1,5,12,9
	.half	.L1338-.L1337
	.byte	3,1,1,5,5,9
	.half	.L1339-.L1338
	.byte	1,5,7,7,9
	.half	.L1340-.L1339
	.byte	3,1,1,5,48,9
	.half	.L193-.L1340
	.byte	3,2,1,5,15,9
	.half	.L1017-.L193
	.byte	1,5,48,9
	.half	.L1341-.L1017
	.byte	1,5,15,9
	.half	.L1342-.L1341
	.byte	1,5,48,9
	.half	.L1343-.L1342
	.byte	1,5,46,9
	.half	.L1019-.L1343
	.byte	1,5,9,9
	.half	.L1344-.L1019
	.byte	3,1,1,9
	.half	.L1345-.L1344
	.byte	3,4,1,5,5,9
	.half	.L1346-.L1345
	.byte	1,5,14,7,9
	.half	.L1347-.L1346
	.byte	3,144,127,1,5,17,9
	.half	.L1348-.L1347
	.byte	3,241,0,1,5,14,9
	.half	.L1349-.L1348
	.byte	3,2,1,5,7,9
	.half	.L1350-.L1349
	.byte	1,5,22,7,9
	.half	.L1351-.L1350
	.byte	3,1,1,5,27,9
	.half	.L1352-.L1351
	.byte	1,5,13,9
	.half	.L196-.L1352
	.byte	3,7,1,5,9,9
	.half	.L1353-.L196
	.byte	1,5,43,7,9
	.half	.L575-.L1353
	.byte	3,2,1,5,99,9
	.half	.L1021-.L575
	.byte	3,2,1,5,26,9
	.half	.L200-.L1021
	.byte	3,1,1,5,18,9
	.half	.L199-.L200
	.byte	3,126,1,9
	.half	.L1354-.L199
	.byte	3,1,1,5,24,9
	.half	.L201-.L1354
	.byte	3,3,1,5,21,9
	.half	.L1355-.L201
	.byte	1,5,22,9
	.half	.L1356-.L1355
	.byte	3,1,1,5,33,9
	.half	.L576-.L1356
	.byte	3,127,1,5,22,9
	.half	.L198-.L576
	.byte	3,4,1,5,16,9
	.half	.L197-.L198
	.byte	3,1,1,5,9,9
	.half	.L1357-.L197
	.byte	3,112,1,5,20,9
	.half	.L195-.L1357
	.byte	3,21,1,5,14,9
	.half	.L202-.L195
	.byte	3,2,1,5,10,9
	.half	.L177-.L202
	.byte	3,180,127,1,7,9
	.half	.L1358-.L177
	.byte	3,1,1,5,46,9
	.half	.L1359-.L1358
	.byte	1,5,41,9
	.half	.L1360-.L1359
	.byte	1,5,61,1,5,56,9
	.half	.L1361-.L1360
	.byte	1,5,67,9
	.half	.L1362-.L1361
	.byte	1,5,10,7,9
	.half	.L189-.L1362
	.byte	3,206,0,1,5,3,9
	.half	.L1363-.L189
	.byte	1,9
	.half	.L172-.L1363
	.byte	3,7,1,5,10,9
	.half	.L162-.L172
	.byte	3,1,1,5,1,3,1,1,7,9
	.half	.L359-.L162
	.byte	0,1,1
.L1302:
	.sdecl	'.debug_ranges',debug,cluster('tcp_output')
	.sect	'.debug_ranges'
.L358:
	.word	-1,.L311,0,.L359-.L311,0,0
.L565:
	.word	-1,.L311,0,.L563-.L311,-1,.L313,0,.L504-.L313,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_send_empty_ack')
	.sect	'.debug_info'
.L360:
	.word	278
	.half	3
	.word	.L361
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L363,.L362
	.byte	2
	.word	.L346
	.byte	3
	.byte	'tcp_send_empty_ack',0,1,227,15,1
	.word	.L520
	.byte	1,1,1
	.word	.L341,.L579,.L340
	.byte	4
	.byte	'pcb',0,1,227,15,36
	.word	.L522,.L580
	.byte	5
	.word	.L341,.L579
	.byte	6
	.byte	'err',0,1,229,15,9
	.word	.L520,.L581
	.byte	6
	.byte	'p',0,1,230,15,16
	.word	.L531,.L582
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_send_empty_ack')
	.sect	'.debug_abbrev'
.L361:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_send_empty_ack')
	.sect	'.debug_line'
.L362:
	.word	.L1365-.L1364
.L1364:
	.half	3
	.word	.L1367-.L1366
.L1366:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1367:
	.byte	5,1,7,0,5,2
	.word	.L341
	.byte	3,226,15,1,5,3,9
	.half	.L1146-.L341
	.byte	3,7,1,7,9
	.half	.L1368-.L1146
	.byte	1,5,61,9
	.half	.L256-.L1368
	.byte	3,16,1,5,36,9
	.half	.L1369-.L256
	.byte	1,5,44,9
	.half	.L1370-.L1369
	.byte	1,5,57,1,5,5,9
	.half	.L1150-.L1370
	.byte	1,5,3,9
	.half	.L1151-.L1150
	.byte	3,1,1,5,12,7,9
	.half	.L1371-.L1151
	.byte	3,4,1,5,5,3,126,1,9
	.half	.L260-.L1371
	.byte	3,2,1,5,35,9
	.half	.L257-.L260
	.byte	3,2,1,5,45,1,5,64,9
	.half	.L1154-.L257
	.byte	3,8,1,5,5,9
	.half	.L1156-.L1154
	.byte	3,3,1,5,3,9
	.half	.L1372-.L1156
	.byte	3,126,1,5,5,7,9
	.half	.L1373-.L1372
	.byte	3,5,1,5,1,9
	.half	.L1374-.L1373
	.byte	3,4,1,7,9
	.half	.L364-.L1374
	.byte	0,1,1
.L1365:
	.sdecl	'.debug_ranges',debug,cluster('tcp_send_empty_ack')
	.sect	'.debug_ranges'
.L363:
	.word	-1,.L341,0,.L364-.L341,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_rexmit')
	.sect	'.debug_info'
.L365:
	.word	259
	.half	3
	.word	.L366
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L368,.L367
	.byte	2
	.word	.L346
	.byte	3
	.byte	'tcp_rexmit',0,1,188,13,1
	.word	.L520
	.byte	1,1,1
	.word	.L327,.L583,.L326
	.byte	4
	.byte	'pcb',0,1,188,13,28
	.word	.L522,.L584
	.byte	5
	.word	.L327,.L583
	.byte	6
	.byte	'cur_seg',0,1,191,13,20
	.word	.L577,.L585
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_rexmit')
	.sect	'.debug_abbrev'
.L366:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_rexmit')
	.sect	'.debug_line'
.L367:
	.word	.L1376-.L1375
.L1375:
	.half	3
	.word	.L1378-.L1377
.L1377:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1378:
	.byte	5,1,7,0,5,2
	.word	.L327
	.byte	3,187,13,1,5,3,9
	.half	.L1062-.L327
	.byte	3,5,1,7,9
	.half	.L1379-.L1062
	.byte	1,5,10,9
	.half	.L228-.L1379
	.byte	3,2,1,5,3,9
	.half	.L1380-.L228
	.byte	1,5,31,7,9
	.half	.L1381-.L1380
	.byte	3,8,1,5,3,9
	.half	.L1382-.L1381
	.byte	1,5,12,7,9
	.half	.L229-.L1382
	.byte	3,2,1,5,1,3,33,1,5,21,7,9
	.half	.L230-.L229
	.byte	3,100,1,5,16,9
	.half	.L1383-.L230
	.byte	1,5,18,9
	.half	.L1384-.L1383
	.byte	3,2,1,5,91,9
	.half	.L1066-.L1384
	.byte	3,2,1,5,18,9
	.half	.L233-.L1066
	.byte	3,1,1,5,10,9
	.half	.L232-.L233
	.byte	3,126,1,9
	.half	.L1385-.L232
	.byte	3,1,1,5,15,9
	.half	.L234-.L1385
	.byte	3,3,1,5,13,9
	.half	.L1386-.L234
	.byte	1,5,12,9
	.half	.L1387-.L1386
	.byte	3,1,1,5,10,9
	.half	.L1388-.L1387
	.byte	3,2,1,5,3,9
	.half	.L1389-.L1388
	.byte	1,5,10,9
	.half	.L1065-.L1389
	.byte	3,6,1,5,17,9
	.half	.L1067-.L1065
	.byte	3,5,1,5,15,1,5,1,9
	.half	.L1390-.L1067
	.byte	3,7,1,7,9
	.half	.L369-.L1390
	.byte	0,1,1
.L1376:
	.sdecl	'.debug_ranges',debug,cluster('tcp_rexmit')
	.sect	'.debug_ranges'
.L368:
	.word	-1,.L327,0,.L369-.L327,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_rexmit_rto_prepare')
	.sect	'.debug_info'
.L370:
	.word	267
	.half	3
	.word	.L371
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L373,.L372
	.byte	2
	.word	.L346
	.byte	3
	.byte	'tcp_rexmit_rto_prepare',0,1,223,12,1
	.word	.L520
	.byte	1,1,1
	.word	.L319,.L586,.L318
	.byte	4
	.byte	'pcb',0,1,223,12,40
	.word	.L522,.L587
	.byte	5
	.word	.L319,.L586
	.byte	6
	.byte	'seg',0,1,225,12,19
	.word	.L533,.L588
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_rexmit_rto_prepare')
	.sect	'.debug_abbrev'
.L371:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_rexmit_rto_prepare')
	.sect	'.debug_line'
.L372:
	.word	.L1392-.L1391
.L1391:
	.half	3
	.word	.L1394-.L1393
.L1393:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1394:
	.byte	5,1,7,0,5,2
	.word	.L319
	.byte	3,222,12,1,5,3,9
	.half	.L1042-.L319
	.byte	3,4,1,7,9
	.half	.L1395-.L1042
	.byte	1,5,10,9
	.half	.L215-.L1395
	.byte	3,2,1,5,3,9
	.half	.L1045-.L215
	.byte	1,5,45,7,9
	.half	.L1396-.L1045
	.byte	3,8,1,5,33,9
	.half	.L218-.L1396
	.byte	3,1,1,5,5,9
	.half	.L1397-.L218
	.byte	1,5,56,7,9
	.half	.L1398-.L1397
	.byte	3,127,1,5,31,9
	.half	.L217-.L1398
	.byte	1,5,45,9
	.half	.L1399-.L217
	.byte	1,5,31,7,9
	.half	.L1400-.L1399
	.byte	3,6,1,5,3,9
	.half	.L1401-.L1400
	.byte	1,5,12,7,9
	.half	.L216-.L1401
	.byte	3,2,1,5,1,3,23,1,5,18,7,9
	.half	.L220-.L216
	.byte	3,108,1,5,13,9
	.half	.L1402-.L220
	.byte	1,5,10,9
	.half	.L1403-.L1402
	.byte	3,3,1,5,3,9
	.half	.L1404-.L1403
	.byte	1,5,31,7,9
	.half	.L1405-.L1404
	.byte	3,1,1,5,26,9
	.half	.L1406-.L1405
	.byte	1,5,20,9
	.half	.L222-.L1406
	.byte	3,4,1,5,15,9
	.half	.L1407-.L222
	.byte	1,5,18,9
	.half	.L1408-.L1407
	.byte	3,2,1,5,16,9
	.half	.L1409-.L1408
	.byte	1,5,3,9
	.half	.L1410-.L1409
	.byte	3,3,1,5,51,9
	.half	.L1411-.L1410
	.byte	3,2,1,5,18,9
	.half	.L1412-.L1411
	.byte	1,5,51,9
	.half	.L1413-.L1412
	.byte	1,5,18,9
	.half	.L1414-.L1413
	.byte	1,5,51,9
	.half	.L1415-.L1414
	.byte	1,5,49,9
	.half	.L1416-.L1415
	.byte	1,5,16,1,5,17,9
	.half	.L1417-.L1416
	.byte	3,2,1,5,15,1,5,1,9
	.half	.L1418-.L1417
	.byte	3,3,1,7,9
	.half	.L374-.L1418
	.byte	0,1,1
.L1392:
	.sdecl	'.debug_ranges',debug,cluster('tcp_rexmit_rto_prepare')
	.sect	'.debug_ranges'
.L373:
	.word	-1,.L319,0,.L374-.L319,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_rexmit_rto_commit')
	.sect	'.debug_info'
.L375:
	.word	240
	.half	3
	.word	.L376
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L378,.L377
	.byte	2
	.word	.L346
	.byte	3
	.byte	'tcp_rexmit_rto_commit',0,1,150,13,1,1,1,1
	.word	.L321,.L589,.L320
	.byte	4
	.byte	'pcb',0,1,150,13,39
	.word	.L522,.L590
	.byte	5
	.word	.L591
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_rexmit_rto_commit')
	.sect	'.debug_abbrev'
.L376:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_rexmit_rto_commit')
	.sect	'.debug_line'
.L377:
	.word	.L1420-.L1419
.L1419:
	.half	3
	.word	.L1422-.L1421
.L1421:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1422:
	.byte	5,1,7,0,5,2
	.word	.L321
	.byte	3,149,13,1,5,3,9
	.half	.L1048-.L321
	.byte	3,2,1,7,9
	.half	.L1423-.L1048
	.byte	1,5,10,9
	.half	.L224-.L1423
	.byte	3,3,1,5,14,9
	.half	.L1424-.L224
	.byte	3,4,1,5,1,9
	.half	.L379-.L1424
	.byte	3,1,0,1,1
.L1420:
	.sdecl	'.debug_ranges',debug,cluster('tcp_rexmit_rto_commit')
	.sect	'.debug_ranges'
.L378:
	.word	-1,.L321,0,.L379-.L321,0,0
.L591:
	.word	-1,.L321,0,.L589-.L321,-1,.L323,0,.L499-.L323,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_rexmit_rto')
	.sect	'.debug_info'
.L380:
	.word	237
	.half	3
	.word	.L381
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L383,.L382
	.byte	2
	.word	.L346
	.byte	3
	.byte	'tcp_rexmit_rto',0,1,171,13,1,1,1,1
	.word	.L325,.L592,.L324
	.byte	4
	.byte	'pcb',0,1,171,13,32
	.word	.L522,.L593
	.byte	5
	.word	.L325,.L592
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_rexmit_rto')
	.sect	'.debug_abbrev'
.L381:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_rexmit_rto')
	.sect	'.debug_line'
.L382:
	.word	.L1426-.L1425
.L1425:
	.half	3
	.word	.L1428-.L1427
.L1427:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1428:
	.byte	5,1,7,0,5,2
	.word	.L325
	.byte	3,170,13,1,5,3,9
	.half	.L1054-.L325
	.byte	3,2,1,7,9
	.half	.L1429-.L1054
	.byte	1,5,30,9
	.half	.L226-.L1429
	.byte	3,2,1,5,3,9
	.half	.L1058-.L226
	.byte	1,5,27,7,9
	.half	.L1430-.L1058
	.byte	3,1,1,5,1,9
	.half	.L227-.L1430
	.byte	3,2,1,7,9
	.half	.L384-.L227
	.byte	0,1,1
.L1426:
	.sdecl	'.debug_ranges',debug,cluster('tcp_rexmit_rto')
	.sect	'.debug_ranges'
.L383:
	.word	-1,.L325,0,.L384-.L325,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_rexmit_fast')
	.sect	'.debug_info'
.L385:
	.word	238
	.half	3
	.word	.L386
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L388,.L387
	.byte	2
	.word	.L346
	.byte	3
	.byte	'tcp_rexmit_fast',0,1,247,13,1,1,1,1
	.word	.L329,.L594,.L328
	.byte	4
	.byte	'pcb',0,1,247,13,33
	.word	.L522,.L595
	.byte	5
	.word	.L329,.L594
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_rexmit_fast')
	.sect	'.debug_abbrev'
.L386:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_rexmit_fast')
	.sect	'.debug_line'
.L387:
	.word	.L1432-.L1431
.L1431:
	.half	3
	.word	.L1434-.L1433
.L1433:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1434:
	.byte	5,1,7,0,5,2
	.word	.L329
	.byte	3,246,13,1,5,3,9
	.half	.L1070-.L329
	.byte	3,2,1,7,9
	.half	.L1435-.L1070
	.byte	1,5,10,9
	.half	.L238-.L1435
	.byte	3,2,1,5,7,9
	.half	.L1436-.L238
	.byte	1,5,36,7,9
	.half	.L1437-.L1436
	.byte	1,5,32,9
	.half	.L1438-.L1437
	.byte	1,5,20,7,9
	.half	.L1439-.L1438
	.byte	3,7,1,5,5,9
	.half	.L1074-.L1439
	.byte	1,5,23,7,9
	.half	.L1440-.L1074
	.byte	3,3,1,5,21,9
	.half	.L1441-.L1440
	.byte	1,5,36,9
	.half	.L1442-.L1441
	.byte	3,3,1,5,7,9
	.half	.L1443-.L1442
	.byte	1,5,32,7,9
	.half	.L1444-.L1443
	.byte	3,5,1,5,23,1,5,42,9
	.half	.L242-.L1444
	.byte	3,3,1,5,22,9
	.half	.L1445-.L242
	.byte	1,5,33,9
	.half	.L1446-.L1445
	.byte	1,5,17,1,5,7,9
	.half	.L1447-.L1446
	.byte	3,1,1,5,20,9
	.half	.L1448-.L1447
	.byte	3,3,1,5,18,1,5,1,9
	.half	.L239-.L1448
	.byte	3,3,1,7,9
	.half	.L389-.L239
	.byte	0,1,1
.L1432:
	.sdecl	'.debug_ranges',debug,cluster('tcp_rexmit_fast')
	.sect	'.debug_ranges'
.L388:
	.word	-1,.L329,0,.L389-.L329,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_send_fin')
	.sect	'.debug_info'
.L390:
	.word	275
	.half	3
	.word	.L391
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L393,.L392
	.byte	2
	.word	.L346
	.byte	3
	.byte	'tcp_send_fin',0,1,233,7,1
	.word	.L520
	.byte	1,1,1
	.word	.L307,.L596,.L306
	.byte	4
	.byte	'pcb',0,1,233,7,30
	.word	.L522,.L597
	.byte	5
	.word	.L307,.L596
	.byte	5
	.word	.L598,.L599
	.byte	6
	.byte	'last_unsent',0,1,239,7,21
	.word	.L533,.L600
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_send_fin')
	.sect	'.debug_abbrev'
.L391:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_send_fin')
	.sect	'.debug_line'
.L392:
	.word	.L1450-.L1449
.L1449:
	.half	3
	.word	.L1452-.L1451
.L1451:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1452:
	.byte	5,1,7,0,5,2
	.word	.L307
	.byte	3,232,7,1,5,3,9
	.half	.L961-.L307
	.byte	3,2,1,7,9
	.half	.L1453-.L961
	.byte	1,5,10,9
	.half	.L133-.L1453
	.byte	3,3,1,5,3,9
	.half	.L964-.L133
	.byte	1,5,62,7,9
	.half	.L598-.L964
	.byte	3,2,1,5,10,9
	.half	.L1454-.L598
	.byte	3,3,1,5,5,9
	.half	.L1455-.L1454
	.byte	1,5,7,7,9
	.half	.L1456-.L1455
	.byte	3,2,1,5,14,9
	.half	.L1457-.L1456
	.byte	3,2,1,5,7,9
	.half	.L1458-.L1457
	.byte	3,127,1,5,1,9
	.half	.L599-.L1458
	.byte	3,6,1,5,33,7,9
	.half	.L134-.L599
	.byte	3,127,1,5,1,9
	.half	.L394-.L134
	.byte	3,1,0,1,1
.L1450:
	.sdecl	'.debug_ranges',debug,cluster('tcp_send_fin')
	.sect	'.debug_ranges'
.L393:
	.word	-1,.L307,0,.L394-.L307,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_enqueue_flags')
	.sect	'.debug_info'
.L395:
	.word	366
	.half	3
	.word	.L396
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L398,.L397
	.byte	2
	.word	.L346
	.byte	3
	.byte	'tcp_enqueue_flags',0,1,136,8,1
	.word	.L520
	.byte	1,1,1
	.word	.L309,.L601,.L308
	.byte	4
	.byte	'pcb',0,1,136,8,35
	.word	.L522,.L602
	.byte	4
	.byte	'flags',0,1,136,8,45
	.word	.L528,.L603
	.byte	5
	.word	.L309,.L601
	.byte	6
	.byte	'p',0,1,138,8,16
	.word	.L531,.L604
	.byte	6
	.byte	'seg',0,1,139,8,19
	.word	.L533,.L605
	.byte	6
	.byte	'optflags',0,1,140,8,8
	.word	.L528,.L606
	.byte	6
	.byte	'optlen',0,1,141,8,8
	.word	.L528,.L607
	.byte	5
	.word	.L152,.L150
	.byte	6
	.byte	'useg',0,1,207,8,21
	.word	.L533,.L608
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_enqueue_flags')
	.sect	'.debug_abbrev'
.L396:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_enqueue_flags')
	.sect	'.debug_line'
.L397:
	.word	.L1460-.L1459
.L1459:
	.half	3
	.word	.L1462-.L1461
.L1461:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1462:
	.byte	5,1,7,0,5,2
	.word	.L309
	.byte	3,135,8,1,5,3,9
	.half	.L969-.L309
	.byte	3,9,1,5,1,3,119,1,5,17,9
	.half	.L967-.L969
	.byte	3,4,1,5,3,9
	.half	.L970-.L967
	.byte	3,5,1,7,9
	.half	.L1463-.L970
	.byte	1,9
	.half	.L140-.L1463
	.byte	3,2,1,7,9
	.half	.L1464-.L140
	.byte	1,9
	.half	.L141-.L1464
	.byte	3,6,1,5,14,9
	.half	.L1465-.L141
	.byte	3,1,1,5,12,9
	.half	.L1466-.L1465
	.byte	3,23,1,5,23,9
	.half	.L976-.L1466
	.byte	3,3,1,5,47,9
	.half	.L1467-.L976
	.byte	1,5,10,9
	.half	.L977-.L1467
	.byte	1,5,3,9
	.half	.L978-.L977
	.byte	1,7,9
	.half	.L1468-.L978
	.byte	3,5,1,5,62,9
	.half	.L144-.L1468
	.byte	3,4,1,5,51,9
	.half	.L982-.L144
	.byte	1,5,62,9
	.half	.L984-.L982
	.byte	1,5,12,9
	.half	.L983-.L984
	.byte	1,5,3,9
	.half	.L981-.L983
	.byte	1,5,5,7,9
	.half	.L143-.L981
	.byte	3,1,1,9
	.half	.L980-.L143
	.byte	3,1,1,5,12,9
	.half	.L986-.L980
	.byte	3,1,1,5,1,3,42,1,5,3,7,9
	.half	.L145-.L986
	.byte	3,88,1,9
	.half	.L147-.L145
	.byte	3,1,1,5,10,9
	.half	.L148-.L147
	.byte	3,9,1,5,3,9
	.half	.L993-.L148
	.byte	1,5,17,7,9
	.half	.L1469-.L993
	.byte	3,1,1,5,22,9
	.half	.L1470-.L1469
	.byte	1,5,61,9
	.half	.L152-.L1470
	.byte	3,3,1,5,34,9
	.half	.L151-.L152
	.byte	1,5,48,9
	.half	.L1471-.L151
	.byte	1,5,16,7,9
	.half	.L1472-.L1471
	.byte	3,1,1,5,26,9
	.half	.L150-.L1472
	.byte	3,4,1,5,24,1,5,7,9
	.half	.L1473-.L150
	.byte	3,4,1,5,35,7,9
	.half	.L1474-.L1473
	.byte	1,5,8,7,9
	.half	.L153-.L1474
	.byte	3,1,1,5,17,9
	.half	.L1475-.L153
	.byte	1,5,3,9
	.half	.L154-.L1475
	.byte	3,3,1,5,5,7,9
	.half	.L1476-.L154
	.byte	3,1,1,5,6,9
	.half	.L155-.L1476
	.byte	3,4,1,5,37,9
	.half	.L1477-.L155
	.byte	1,5,21,9
	.half	.L1478-.L1477
	.byte	1,5,10,9
	.half	.L1479-.L1478
	.byte	3,2,1,5,3,9
	.half	.L1480-.L1479
	.byte	1,5,5,7,9
	.half	.L1481-.L1480
	.byte	3,1,1,5,10,9
	.half	.L156-.L1481
	.byte	3,4,1,5,1,3,1,1,7,9
	.half	.L399-.L156
	.byte	0,1,1
.L1460:
	.sdecl	'.debug_ranges',debug,cluster('tcp_enqueue_flags')
	.sect	'.debug_ranges'
.L398:
	.word	-1,.L309,0,.L399-.L309,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_rst')
	.sect	'.debug_info'
.L400:
	.word	378
	.half	3
	.word	.L401
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L403,.L402
	.byte	2
	.word	.L346
	.byte	3
	.byte	'tcp_rst',0,1,188,15,1,1,1,1
	.word	.L339,.L609,.L338
	.byte	4
	.byte	'pcb',0,1,188,15,31
	.word	.L610,.L611
	.byte	4
	.byte	'seqno',0,1,188,15,42
	.word	.L568,.L612
	.byte	4
	.byte	'ackno',0,1,188,15,55
	.word	.L568,.L613
	.byte	4
	.byte	'local_ip',0,1,189,15,26
	.word	.L614,.L615
	.byte	4
	.byte	'remote_ip',0,1,189,15,53
	.word	.L614,.L616
	.byte	4
	.byte	'local_port',0,1,190,15,15
	.word	.L526,.L617
	.byte	4
	.byte	'remote_port',0,1,190,15,33
	.word	.L526,.L618
	.byte	5
	.word	.L339,.L609
	.byte	6
	.byte	'p',0,1,192,15,16
	.word	.L531,.L619
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_rst')
	.sect	'.debug_abbrev'
.L401:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_rst')
	.sect	'.debug_line'
.L402:
	.word	.L1483-.L1482
.L1482:
	.half	3
	.word	.L1485-.L1484
.L1484:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1485:
	.byte	5,1,7,0,5,2
	.word	.L339
	.byte	3,187,15,1,5,3,9
	.half	.L1125-.L339
	.byte	3,8,1,7,9
	.half	.L1486-.L1125
	.byte	1,9
	.half	.L253-.L1486
	.byte	3,1,1,7,9
	.half	.L1487-.L253
	.byte	1,5,67,9
	.half	.L254-.L1487
	.byte	3,10,1,5,75,9
	.half	.L1130-.L254
	.byte	1,5,26,9
	.half	.L1131-.L1130
	.byte	3,1,1,5,5,1,5,45,9
	.half	.L1132-.L1131
	.byte	3,127,1,5,26,3,1,1,5,37,9
	.half	.L1488-.L1132
	.byte	1,5,66,9
	.half	.L1133-.L1488
	.byte	3,127,1,5,53,9
	.half	.L1134-.L1133
	.byte	1,5,66,9
	.half	.L1489-.L1134
	.byte	1,5,5,9
	.half	.L1135-.L1489
	.byte	1,5,3,9
	.half	.L1137-.L1135
	.byte	3,2,1,5,35,7,9
	.half	.L1490-.L1137
	.byte	3,4,1,5,38,1,5,48,9
	.half	.L1139-.L1490
	.byte	3,4,1,5,1,9
	.half	.L255-.L1139
	.byte	3,2,1,7,9
	.half	.L404-.L255
	.byte	0,1,1
.L1483:
	.sdecl	'.debug_ranges',debug,cluster('tcp_rst')
	.sect	'.debug_ranges'
.L403:
	.word	-1,.L339,0,.L404-.L339,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_keepalive')
	.sect	'.debug_info'
.L405:
	.word	273
	.half	3
	.word	.L406
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L408,.L407
	.byte	2
	.word	.L346
	.byte	3
	.byte	'tcp_keepalive',0,1,158,16,1
	.word	.L520
	.byte	1,1,1
	.word	.L343,.L620,.L342
	.byte	4
	.byte	'pcb',0,1,158,16,31
	.word	.L522,.L621
	.byte	5
	.word	.L343,.L620
	.byte	6
	.byte	'err',0,1,160,16,9
	.word	.L520,.L622
	.byte	6
	.byte	'p',0,1,161,16,16
	.word	.L531,.L623
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_keepalive')
	.sect	'.debug_abbrev'
.L406:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_keepalive')
	.sect	'.debug_line'
.L407:
	.word	.L1492-.L1491
.L1491:
	.half	3
	.word	.L1494-.L1493
.L1493:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1494:
	.byte	5,1,7,0,5,2
	.word	.L343
	.byte	3,157,16,1,5,3,9
	.half	.L1161-.L343
	.byte	3,6,1,7,9
	.half	.L1495-.L1161
	.byte	1,5,61,9
	.half	.L262-.L1495
	.byte	3,9,1,5,71,9
	.half	.L1496-.L262
	.byte	1,5,36,9
	.half	.L1497-.L1496
	.byte	1,5,44,9
	.half	.L1498-.L1497
	.byte	1,5,57,1,5,5,9
	.half	.L1165-.L1498
	.byte	1,5,3,9
	.half	.L1167-.L1165
	.byte	3,1,1,5,12,7,9
	.half	.L1499-.L1167
	.byte	3,3,1,5,1,3,8,1,5,35,7,9
	.half	.L263-.L1499
	.byte	3,122,1,5,38,1,5,64,9
	.half	.L1169-.L263
	.byte	3,1,1,5,1,9
	.half	.L409-.L1169
	.byte	3,5,0,1,1
.L1492:
	.sdecl	'.debug_ranges',debug,cluster('tcp_keepalive')
	.sect	'.debug_ranges'
.L408:
	.word	-1,.L343,0,.L409-.L343,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_split_unsent_seg')
	.sect	'.debug_info'
.L410:
	.word	432
	.half	3
	.word	.L411
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L413,.L412
	.byte	2
	.word	.L346
	.byte	3
	.byte	'tcp_split_unsent_seg',0,1,187,6,1
	.word	.L520
	.byte	1,1,1
	.word	.L303,.L624,.L302
	.byte	4
	.byte	'pcb',0,1,187,6,38
	.word	.L522,.L625
	.byte	4
	.byte	'split',0,1,187,6,49
	.word	.L526,.L626
	.byte	5
	.word	.L627
	.byte	6
	.byte	'seg',0,1,189,6,19
	.word	.L533,.L628
	.byte	6
	.byte	'useg',0,1,189,6,32
	.word	.L533,.L629
	.byte	6
	.byte	'p',0,1,190,6,16
	.word	.L531,.L630
	.byte	6
	.byte	'optlen',0,1,191,6,8
	.word	.L528,.L631
	.byte	6
	.byte	'optflags',0,1,192,6,8
	.word	.L528,.L632
	.byte	6
	.byte	'split_flags',0,1,193,6,8
	.word	.L528,.L633
	.byte	6
	.byte	'remainder_flags',0,1,194,6,8
	.word	.L528,.L634
	.byte	6
	.byte	'remainder',0,1,195,6,9
	.word	.L526,.L635
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_split_unsent_seg')
	.sect	'.debug_abbrev'
.L411:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_split_unsent_seg')
	.sect	'.debug_line'
.L412:
	.word	.L1501-.L1500
.L1500:
	.half	3
	.word	.L1503-.L1502
.L1502:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1503:
	.byte	5,1,7,0,5,2
	.word	.L303
	.byte	3,186,6,1,5,23,9
	.half	.L922-.L303
	.byte	3,2,1,5,3,9
	.half	.L923-.L922
	.byte	3,14,1,7,9
	.half	.L1504-.L923
	.byte	1,5,13,9
	.half	.L116-.L1504
	.byte	3,2,1,5,3,9
	.half	.L927-.L116
	.byte	3,1,1,7,9
	.half	.L1505-.L927
	.byte	3,4,1,5,5,7,9
	.half	.L1506-.L1505
	.byte	3,1,1,5,12,9
	.half	.L1507-.L1506
	.byte	3,1,1,5,1,3,138,1,1,5,11,7,9
	.half	.L118-.L1507
	.byte	3,249,126,1,5,3,9
	.half	.L1508-.L118
	.byte	1,7,9
	.half	.L1509-.L1508
	.byte	3,4,1,9
	.half	.L121-.L1509
	.byte	3,1,1,5,19,9
	.half	.L122-.L121
	.byte	3,14,1,5,18,9
	.half	.L1510-.L122
	.byte	3,122,1,5,25,9
	.half	.L936-.L1510
	.byte	3,6,1,5,12,9
	.half	.L937-.L936
	.byte	3,127,1,5,44,9
	.half	.L1511-.L937
	.byte	3,4,1,5,12,9
	.half	.L938-.L1511
	.byte	3,124,1,5,18,9
	.half	.L1512-.L938
	.byte	3,4,1,5,44,9
	.half	.L1513-.L1512
	.byte	1,5,54,9
	.half	.L1514-.L1513
	.byte	1,5,5,9
	.half	.L940-.L1514
	.byte	1,5,3,9
	.half	.L942-.L940
	.byte	3,1,1,5,16,7,9
	.half	.L1515-.L942
	.byte	3,7,1,5,35,9
	.half	.L1516-.L1515
	.byte	1,5,43,9
	.half	.L1517-.L1516
	.byte	3,2,1,5,19,9
	.half	.L941-.L1517
	.byte	3,126,1,5,41,9
	.half	.L1518-.L941
	.byte	1,5,53,9
	.half	.L944-.L1518
	.byte	3,2,1,5,29,9
	.half	.L1519-.L944
	.byte	3,126,1,5,41,9
	.half	.L1520-.L1519
	.byte	1,5,3,9
	.half	.L945-.L1520
	.byte	3,2,1,5,17,7,9
	.half	.L1521-.L945
	.byte	3,14,1,5,19,9
	.half	.L939-.L1521
	.byte	3,1,1,5,3,9
	.half	.L946-.L939
	.byte	3,2,1,5,17,7,9
	.half	.L1522-.L946
	.byte	3,1,1,5,21,9
	.half	.L1523-.L1522
	.byte	3,1,1,5,3,9
	.half	.L125-.L1523
	.byte	3,2,1,5,17,7,9
	.half	.L1524-.L125
	.byte	3,1,1,5,21,9
	.half	.L1525-.L1524
	.byte	3,1,1,5,53,9
	.half	.L126-.L1525
	.byte	3,4,1,5,94,9
	.half	.L1526-.L126
	.byte	1,5,85,9
	.half	.L949-.L1526
	.byte	1,5,94,1,5,7,9
	.half	.L934-.L949
	.byte	1,5,3,9
	.half	.L953-.L934
	.byte	3,1,1,5,6,7,9
	.half	.L1527-.L953
	.byte	3,13,1,5,38,9
	.half	.L935-.L1527
	.byte	1,5,21,9
	.half	.L950-.L935
	.byte	1,5,29,9
	.half	.L1528-.L950
	.byte	3,4,1,5,32,9
	.half	.L1529-.L1528
	.byte	1,5,42,9
	.half	.L1530-.L1529
	.byte	1,5,7,9
	.half	.L1531-.L1530
	.byte	3,1,1,5,3,9
	.half	.L947-.L1531
	.byte	3,1,1,5,13,9
	.half	.L951-.L947
	.byte	3,127,1,5,3,9
	.half	.L1532-.L951
	.byte	3,1,1,5,25,9
	.half	.L1533-.L1532
	.byte	3,3,1,5,23,1,5,6,9
	.half	.L1534-.L1533
	.byte	3,4,1,5,38,9
	.half	.L1535-.L1534
	.byte	1,5,21,9
	.half	.L1536-.L1535
	.byte	1,5,6,9
	.half	.L1537-.L1536
	.byte	3,25,1,5,37,9
	.half	.L1538-.L1537
	.byte	1,5,21,9
	.half	.L1539-.L1538
	.byte	1,5,19,9
	.half	.L1540-.L1539
	.byte	3,3,1,5,13,9
	.half	.L1541-.L1540
	.byte	1,5,14,9
	.half	.L1542-.L1541
	.byte	3,1,1,5,10,9
	.half	.L1543-.L1542
	.byte	3,5,1,5,3,9
	.half	.L1544-.L1543
	.byte	1,5,10,9
	.half	.L120-.L1544
	.byte	3,5,1,5,1,3,10,1,5,3,7,9
	.half	.L123-.L120
	.byte	3,120,1,9
	.half	.L955-.L123
	.byte	3,2,1,7,9
	.half	.L1545-.L955
	.byte	1,9
	.half	.L130-.L1545
	.byte	3,1,1,5,15,7,9
	.half	.L1546-.L130
	.byte	3,1,1,5,10,9
	.half	.L117-.L1546
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L414-.L117
	.byte	0,1,1
.L1501:
	.sdecl	'.debug_ranges',debug,cluster('tcp_split_unsent_seg')
	.sect	'.debug_ranges'
.L413:
	.word	-1,.L303,0,.L414-.L303,0,0
.L627:
	.word	-1,.L303,0,.L624-.L303,-1,.L305,0,.L494-.L305,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_zero_window_probe')
	.sect	'.debug_info'
.L415:
	.word	385
	.half	3
	.word	.L416
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L418,.L417
	.byte	2
	.word	.L346
	.byte	3
	.byte	'tcp_zero_window_probe',0,1,196,16,1
	.word	.L520
	.byte	1,1,1
	.word	.L345,.L636,.L344
	.byte	4
	.byte	'pcb',0,1,196,16,39
	.word	.L522,.L637
	.byte	5
	.word	.L345,.L636
	.byte	6
	.byte	'err',0,1,198,16,9
	.word	.L520,.L638
	.byte	6
	.byte	'p',0,1,199,16,16
	.word	.L531,.L639
	.byte	6
	.byte	'tcphdr',0,1,200,16,19
	.word	.L640,.L641
	.byte	6
	.byte	'seg',0,1,201,16,19
	.word	.L533,.L642
	.byte	6
	.byte	'len',0,1,202,16,9
	.word	.L526,.L643
	.byte	6
	.byte	'is_fin',0,1,203,16,8
	.word	.L528,.L644
	.byte	6
	.byte	'snd_nxt',0,1,204,16,9
	.word	.L568,.L645
	.byte	7
	.word	.L274,.L275
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_zero_window_probe')
	.sect	'.debug_abbrev'
.L416:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_zero_window_probe')
	.sect	'.debug_line'
.L417:
	.word	.L1548-.L1547
.L1547:
	.half	3
	.word	.L1550-.L1549
.L1549:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1550:
	.byte	5,1,7,0,5,2
	.word	.L345
	.byte	3,195,16,1,5,3,9
	.half	.L1175-.L345
	.byte	3,11,1,7,9
	.half	.L1551-.L1175
	.byte	1,5,12,9
	.half	.L266-.L1551
	.byte	3,12,1,5,3,9
	.half	.L1178-.L266
	.byte	3,1,1,5,12,7,9
	.half	.L1552-.L1178
	.byte	3,2,1,5,1,3,47,1,5,10,7,9
	.half	.L267-.L1552
	.byte	3,88,1,5,28,9
	.half	.L1553-.L267
	.byte	1,5,3,9
	.half	.L1554-.L1553
	.byte	1,5,5,7,9
	.half	.L1555-.L1554
	.byte	3,1,1,5,14,9
	.half	.L269-.L1555
	.byte	3,3,1,5,55,9
	.half	.L1556-.L269
	.byte	1,5,14,9
	.half	.L1183-.L1556
	.byte	1,5,12,9
	.half	.L1557-.L1183
	.byte	1,5,62,7,9
	.half	.L1558-.L1557
	.byte	1,5,55,9
	.half	.L1559-.L1558
	.byte	1,5,52,9
	.half	.L270-.L1559
	.byte	3,4,1,5,9,9
	.half	.L1560-.L270
	.byte	3,126,1,5,60,3,2,1,5,36,9
	.half	.L1180-.L1560
	.byte	1,5,60,9
	.half	.L1561-.L1180
	.byte	1,5,5,9
	.half	.L1181-.L1561
	.byte	1,5,3,9
	.half	.L1184-.L1181
	.byte	3,1,1,5,12,7,9
	.half	.L1562-.L1184
	.byte	3,2,1,5,1,3,29,1,5,31,7,9
	.half	.L272-.L1562
	.byte	3,101,1,5,3,9
	.half	.L1563-.L272
	.byte	3,2,1,5,5,7,9
	.half	.L1564-.L1563
	.byte	3,2,1,5,46,9
	.half	.L1565-.L1564
	.byte	1,5,40,9
	.half	.L274-.L1565
	.byte	3,7,1,5,58,9
	.half	.L1566-.L274
	.byte	1,5,34,9
	.half	.L1567-.L1566
	.byte	1,5,35,3,124,1,5,43,9
	.half	.L1568-.L1567
	.byte	3,4,1,5,53,9
	.half	.L1569-.L1568
	.byte	1,5,13,9
	.half	.L275-.L1569
	.byte	3,4,1,5,44,9
	.half	.L1185-.L275
	.byte	1,5,7,9
	.half	.L1570-.L1185
	.byte	3,1,1,5,35,9
	.half	.L1571-.L1570
	.byte	3,3,1,5,38,1,5,64,9
	.half	.L1186-.L1571
	.byte	3,2,1,5,1,9
	.half	.L419-.L1186
	.byte	3,6,0,1,1
.L1548:
	.sdecl	'.debug_ranges',debug,cluster('tcp_zero_window_probe')
	.sect	'.debug_ranges'
.L418:
	.word	-1,.L345,0,.L419-.L345,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_output_segment')
	.sect	'.debug_info'
.L420:
	.word	360
	.half	3
	.word	.L421
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L423,.L422
	.byte	2
	.word	.L346
	.byte	3
	.byte	'tcp_output_segment',0,1,175,11,1
	.word	.L520
	.byte	1,1
	.word	.L317,.L646,.L316
	.byte	4
	.byte	'seg',0,1,175,11,36
	.word	.L533,.L647
	.byte	4
	.byte	'pcb',0,1,175,11,57
	.word	.L522,.L648
	.byte	4
	.byte	'netif',0,1,175,11,76
	.word	.L572,.L649
	.byte	5
	.word	.L317,.L646
	.byte	6
	.byte	'err',0,1,177,11,9
	.word	.L520,.L650
	.byte	6
	.byte	'len',0,1,178,11,9
	.word	.L526,.L651
	.byte	6
	.byte	'opts',0,1,179,11,10
	.word	.L652,.L653
	.byte	5
	.word	.L654,.L210
	.byte	6
	.byte	'mss',0,1,218,11,11
	.word	.L526,.L655
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_output_segment')
	.sect	'.debug_abbrev'
.L421:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_output_segment')
	.sect	'.debug_line'
.L422:
	.word	.L1573-.L1572
.L1572:
	.half	3
	.word	.L1575-.L1574
.L1574:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1575:
	.byte	5,1,7,0,5,2
	.word	.L317
	.byte	3,174,11,1,5,31,9
	.half	.L1028-.L317
	.byte	3,13,1,5,3,9
	.half	.L1024-.L1028
	.byte	1,5,12,7,9
	.half	.L1576-.L1024
	.byte	3,4,1,5,1,3,149,1,1,5,6,7,9
	.half	.L208-.L1576
	.byte	3,240,126,1,5,38,9
	.half	.L1577-.L208
	.byte	1,5,22,9
	.half	.L1578-.L1577
	.byte	1,5,8,9
	.half	.L1579-.L1578
	.byte	3,11,1,5,35,9
	.half	.L1580-.L1579
	.byte	1,5,22,9
	.half	.L1581-.L1580
	.byte	1,5,32,9
	.half	.L1582-.L1581
	.byte	3,3,1,5,47,9
	.half	.L1583-.L1582
	.byte	1,5,42,9
	.half	.L1584-.L1583
	.byte	1,5,27,1,5,31,9
	.half	.L1585-.L1584
	.byte	3,5,1,5,10,9
	.half	.L1586-.L1585
	.byte	3,1,1,5,40,9
	.half	.L1587-.L1586
	.byte	3,127,1,5,3,9
	.half	.L1029-.L1587
	.byte	3,1,1,5,34,7,9
	.half	.L654-.L1029
	.byte	3,3,1,5,54,1,5,13,9
	.half	.L1031-.L654
	.byte	3,4,1,5,11,9
	.half	.L1032-.L1031
	.byte	1,5,10,9
	.half	.L210-.L1032
	.byte	3,30,1,5,3,9
	.half	.L1588-.L210
	.byte	1,5,18,7,9
	.half	.L1589-.L1588
	.byte	3,1,1,5,16,1,5,10,9
	.half	.L211-.L1589
	.byte	3,3,1,5,3,9
	.half	.L1590-.L211
	.byte	1,5,19,7,9
	.half	.L1591-.L1590
	.byte	3,1,1,5,17,9
	.half	.L1592-.L1591
	.byte	1,5,18,9
	.half	.L1593-.L1592
	.byte	3,1,1,5,16,9
	.half	.L1594-.L1593
	.byte	1,5,50,9
	.half	.L212-.L1594
	.byte	3,8,1,5,28,9
	.half	.L1595-.L212
	.byte	1,5,53,9
	.half	.L1596-.L1595
	.byte	1,5,37,9
	.half	.L1597-.L1596
	.byte	1,5,9,9
	.half	.L1598-.L1597
	.byte	1,3,6,1,5,15,9
	.half	.L1033-.L1598
	.byte	1,5,6,9
	.half	.L1599-.L1033
	.byte	3,1,1,5,9,9
	.half	.L1600-.L1599
	.byte	1,5,19,9
	.half	.L1601-.L1600
	.byte	1,5,25,9
	.half	.L1602-.L1601
	.byte	3,4,1,5,6,9
	.half	.L1603-.L1602
	.byte	3,126,1,5,24,9
	.half	.L1604-.L1603
	.byte	1,5,19,9
	.half	.L1605-.L1604
	.byte	1,5,6,9
	.half	.L1606-.L1605
	.byte	3,2,1,5,23,9
	.half	.L1607-.L1606
	.byte	1,5,3,9
	.half	.L1608-.L1607
	.byte	3,5,1,5,47,9
	.half	.L213-.L1608
	.byte	3,36,1,5,52,9
	.half	.L1609-.L213
	.byte	3,127,1,5,8,1,5,81,9
	.half	.L1035-.L1609
	.byte	3,1,1,5,50,9
	.half	.L1036-.L1035
	.byte	1,5,81,9
	.half	.L1610-.L1036
	.byte	1,5,25,9
	.half	.L1037-.L1610
	.byte	3,127,1,5,3,9
	.half	.L1611-.L1037
	.byte	3,5,1,5,9,9
	.half	.L1612-.L1611
	.byte	3,3,1,5,3,9
	.half	.L1038-.L1612
	.byte	3,125,1,5,9,9
	.half	.L1613-.L1038
	.byte	3,3,1,5,1,9
	.half	.L424-.L1613
	.byte	3,14,0,1,1
.L1573:
	.sdecl	'.debug_ranges',debug,cluster('tcp_output_segment')
	.sect	'.debug_ranges'
.L423:
	.word	-1,.L317,0,.L424-.L317,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_route')
	.sect	'.debug_info'
.L425:
	.word	269
	.half	3
	.word	.L426
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L428,.L427
	.byte	2
	.word	.L346
	.byte	3
	.byte	'tcp_route',0,1,132,1,1
	.word	.L572
	.byte	1,1
	.word	.L279,.L656,.L278
	.byte	4
	.byte	'pcb',0,1,132,1,33
	.word	.L610,.L657
	.byte	4
	.byte	'src',0,1,132,1,55
	.word	.L614,.L658
	.byte	4
	.byte	'dst',0,1,132,1,77
	.word	.L614,.L659
	.byte	5
	.word	.L279,.L656
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_route')
	.sect	'.debug_abbrev'
.L426:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_route')
	.sect	'.debug_line'
.L427:
	.word	.L1615-.L1614
.L1614:
	.half	3
	.word	.L1617-.L1616
.L1616:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1617:
	.byte	5,7,7,0,5,2
	.word	.L279
	.byte	3,135,1,1,5,28,7,9
	.half	.L1618-.L279
	.byte	1,5,40,9
	.half	.L1619-.L1618
	.byte	1,5,34,7,9
	.half	.L1620-.L1619
	.byte	3,1,1,5,12,7,9
	.half	.L2-.L1620
	.byte	3,2,1,5,1,9
	.half	.L429-.L2
	.byte	3,2,0,1,1
.L1615:
	.sdecl	'.debug_ranges',debug,cluster('tcp_route')
	.sect	'.debug_ranges'
.L428:
	.word	-1,.L279,0,.L429-.L279,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_create_segment')
	.sect	'.debug_info'
.L430:
	.word	356
	.half	3
	.word	.L431
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L433,.L432
	.byte	2
	.word	.L346
	.byte	3
	.byte	'tcp_create_segment',0,1,158,1,1
	.word	.L533
	.byte	1,1
	.word	.L281,.L660,.L280
	.byte	4
	.byte	'pcb',0,1,158,1,42
	.word	.L610,.L661
	.byte	4
	.byte	'p',0,1,158,1,60
	.word	.L531,.L662
	.byte	4
	.byte	'hdrflags',0,1,158,1,68
	.word	.L528,.L663
	.byte	4
	.byte	'seqno',0,1,158,1,84
	.word	.L568,.L664
	.byte	4
	.byte	'optflags',0,1,158,1,96
	.word	.L528,.L665
	.byte	5
	.word	.L666
	.byte	6
	.byte	'seg',0,1,160,1,19
	.word	.L533,.L667
	.byte	6
	.byte	'optlen',0,1,161,1,8
	.word	.L528,.L668
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_create_segment')
	.sect	'.debug_abbrev'
.L431:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_create_segment')
	.sect	'.debug_line'
.L432:
	.word	.L1622-.L1621
.L1621:
	.half	3
	.word	.L1624-.L1623
.L1623:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1624:
	.byte	5,1,7,0,5,2
	.word	.L281
	.byte	3,157,1,1,5,12,9
	.half	.L723-.L281
	.byte	3,8,1,5,1,3,120,1,5,12,9
	.half	.L726-.L723
	.byte	3,8,1,5,1,3,120,1,5,12,9
	.half	.L730-.L726
	.byte	3,8,1,5,44,9
	.half	.L1625-.L730
	.byte	3,2,1,5,12,9
	.half	.L724-.L1625
	.byte	1,5,3,9
	.half	.L732-.L724
	.byte	1,5,15,7,9
	.half	.L1626-.L732
	.byte	3,2,1,5,5,9
	.half	.L731-.L1626
	.byte	3,1,1,5,14,9
	.half	.L6-.L731
	.byte	3,2,1,5,15,9
	.half	.L1627-.L6
	.byte	3,1,1,5,13,9
	.half	.L734-.L1627
	.byte	1,5,10,9
	.half	.L1628-.L734
	.byte	3,1,1,5,3,9
	.half	.L1629-.L1628
	.byte	3,1,1,5,15,9
	.half	.L8-.L1629
	.byte	3,1,1,5,26,9
	.half	.L1630-.L8
	.byte	3,13,1,5,25,9
	.half	.L739-.L1630
	.byte	3,115,1,5,12,1,5,24,9
	.half	.L1631-.L739
	.byte	3,2,1,5,22,1,5,26,9
	.half	.L1632-.L1631
	.byte	3,11,1,5,3,9
	.half	.L740-.L1632
	.byte	1,5,5,7,9
	.half	.L1633-.L740
	.byte	3,2,1,5,18,9
	.half	.L1634-.L1633
	.byte	3,1,1,5,5,9
	.half	.L741-.L1634
	.byte	3,127,1,5,18,9
	.half	.L1635-.L741
	.byte	3,1,1,5,12,9
	.half	.L7-.L1635
	.byte	3,1,1,5,1,9
	.half	.L1636-.L7
	.byte	3,11,1,5,38,7,9
	.half	.L9-.L1636
	.byte	3,119,1,5,41,9
	.half	.L1637-.L9
	.byte	1,5,15,9
	.half	.L737-.L1637
	.byte	1,5,36,9
	.half	.L1638-.L737
	.byte	3,1,1,5,20,9
	.half	.L1639-.L1638
	.byte	1,5,6,9
	.half	.L1640-.L1639
	.byte	3,1,1,5,37,9
	.half	.L1641-.L1640
	.byte	1,5,21,9
	.half	.L1642-.L1641
	.byte	1,5,35,9
	.half	.L1643-.L1642
	.byte	3,1,1,5,6,9
	.half	.L742-.L1643
	.byte	1,5,35,9
	.half	.L738-.L742
	.byte	1,5,3,9
	.half	.L743-.L738
	.byte	3,2,1,5,22,3,126,1,5,3,9
	.half	.L736-.L743
	.byte	3,2,1,5,6,9
	.half	.L1644-.L736
	.byte	3,2,1,5,23,9
	.half	.L1645-.L1644
	.byte	1,5,21,9
	.half	.L1646-.L1645
	.byte	1,5,3,9
	.half	.L1647-.L1646
	.byte	3,1,1,5,1,9
	.half	.L744-.L1647
	.byte	3,1,1,7,9
	.half	.L434-.L744
	.byte	0,1,1
.L1622:
	.sdecl	'.debug_ranges',debug,cluster('tcp_create_segment')
	.sect	'.debug_ranges'
.L433:
	.word	-1,.L281,0,.L434-.L281,0,0
.L666:
	.word	-1,.L281,0,.L660-.L281,-1,.L283,0,.L489-.L283,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_pbuf_prealloc')
	.sect	'.debug_info'
.L435:
	.word	408
	.half	3
	.word	.L436
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L438,.L437
	.byte	2
	.word	.L346
	.byte	3
	.byte	'tcp_pbuf_prealloc',0,1,225,1,1
	.word	.L531
	.byte	1,1
	.word	.L285,.L669,.L284
	.byte	4
	.byte	'layer',0,1,225,1,30
	.word	.L670,.L671
	.byte	4
	.byte	'length',0,1,225,1,43
	.word	.L526,.L672
	.byte	4
	.byte	'max_length',0,1,225,1,57
	.word	.L526,.L673
	.byte	4
	.byte	'oversize',0,1,226,1,26
	.word	.L674,.L675
	.byte	4
	.byte	'pcb',0,1,226,1,58
	.word	.L610,.L676
	.byte	4
	.byte	'apiflags',0,1,226,1,68
	.word	.L528,.L677
	.byte	4
	.byte	'first_seg',0,1,227,1,24
	.word	.L528,.L678
	.byte	5
	.word	.L285,.L669
	.byte	6
	.byte	'p',0,1,229,1,16
	.word	.L531,.L679
	.byte	6
	.byte	'alloc',0,1,230,1,9
	.word	.L526,.L680
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_pbuf_prealloc')
	.sect	'.debug_abbrev'
.L436:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_pbuf_prealloc')
	.sect	'.debug_line'
.L437:
	.word	.L1649-.L1648
.L1648:
	.half	3
	.word	.L1651-.L1650
.L1650:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1651:
	.byte	5,1,7,0,5,2
	.word	.L285
	.byte	3,224,1,1,5,3,9
	.half	.L749-.L285
	.byte	3,17,1,5,9,7,9
	.half	.L1652-.L749
	.byte	3,12,1,5,15,7,9
	.half	.L1653-.L1652
	.byte	3,1,1,5,11,9
	.half	.L1654-.L1653
	.byte	1,5,12,7,9
	.half	.L1655-.L1654
	.byte	3,1,1,5,14,7,9
	.half	.L1656-.L1655
	.byte	3,1,1,5,23,9
	.half	.L750-.L1656
	.byte	1,5,14,7,9
	.half	.L1657-.L750
	.byte	3,1,1,5,24,9
	.half	.L1658-.L1657
	.byte	1,5,15,7,9
	.half	.L13-.L1658
	.byte	3,1,1,5,32,9
	.half	.L12-.L13
	.byte	3,4,1,5,5,9
	.half	.L746-.L12
	.byte	1,5,3,9
	.half	.L752-.L746
	.byte	3,1,1,5,12,7,9
	.half	.L1659-.L752
	.byte	3,1,1,5,1,9
	.half	.L751-.L1659
	.byte	3,7,1,5,3,7,9
	.half	.L18-.L751
	.byte	3,123,1,5,16,9
	.half	.L20-.L18
	.byte	3,1,1,5,3,9
	.half	.L1660-.L20
	.byte	3,3,1,5,22,9
	.half	.L755-.L1660
	.byte	3,125,1,5,13,1,5,23,9
	.half	.L1661-.L755
	.byte	3,2,1,5,10,9
	.half	.L1662-.L1661
	.byte	1,5,1,9
	.half	.L1663-.L1662
	.byte	3,2,1,7,9
	.half	.L439-.L1663
	.byte	0,1,1
.L1649:
	.sdecl	'.debug_ranges',debug,cluster('tcp_pbuf_prealloc')
	.sect	'.debug_ranges'
.L438:
	.word	-1,.L285,0,.L439-.L285,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_write_checks')
	.sect	'.debug_info'
.L440:
	.word	255
	.half	3
	.word	.L441
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L443,.L442
	.byte	2
	.word	.L346
	.byte	3
	.byte	'tcp_write_checks',0,1,177,2,1
	.word	.L520
	.byte	1,1
	.word	.L287,.L681,.L286
	.byte	4
	.byte	'pcb',0,1,177,2,34
	.word	.L522,.L682
	.byte	4
	.byte	'len',0,1,177,2,45
	.word	.L526,.L683
	.byte	5
	.word	.L684
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_write_checks')
	.sect	'.debug_abbrev'
.L441:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_write_checks')
	.sect	'.debug_line'
.L442:
	.word	.L1665-.L1664
.L1664:
	.half	3
	.word	.L1667-.L1666
.L1666:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1667:
	.byte	5,11,7,0,5,2
	.word	.L287
	.byte	3,181,2,1,5,1,9
	.half	.L1668-.L287
	.byte	3,123,1,5,7,9
	.half	.L756-.L1668
	.byte	3,5,1,5,19,7,9
	.half	.L1669-.L756
	.byte	3,1,1,7,9
	.half	.L1670-.L1669
	.byte	3,1,1,7,9
	.half	.L1671-.L1670
	.byte	3,1,1,5,5,7,9
	.half	.L1672-.L1671
	.byte	3,1,1,5,12,9
	.half	.L757-.L1672
	.byte	3,1,1,5,1,3,33,1,5,10,7,9
	.half	.L22-.L757
	.byte	3,96,1,5,16,7,9
	.half	.L1673-.L22
	.byte	3,5,1,5,3,9
	.half	.L1674-.L1673
	.byte	1,5,10,7,9
	.half	.L1675-.L1674
	.byte	3,12,1,5,3,9
	.half	.L1676-.L1675
	.byte	1,5,5,7,9
	.half	.L1677-.L1676
	.byte	3,3,1,9
	.half	.L28-.L1677
	.byte	3,1,1,5,12,9
	.half	.L1678-.L28
	.byte	3,1,1,5,5,9
	.half	.L1679-.L1678
	.byte	3,127,1,5,1,9
	.half	.L1680-.L1679
	.byte	3,11,1,5,5,7,9
	.half	.L29-.L1680
	.byte	3,121,1,5,3,9
	.half	.L1681-.L29
	.byte	3,127,1,5,5,7,9
	.half	.L1682-.L1681
	.byte	3,1,1,7,9
	.half	.L1683-.L1682
	.byte	1,5,61,9
	.half	.L1684-.L1683
	.byte	3,1,1,5,5,9
	.half	.L31-.L1684
	.byte	3,2,1,7,9
	.half	.L1685-.L31
	.byte	1,5,10,9
	.half	.L27-.L1685
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L444-.L27
	.byte	0,1,1
.L1665:
	.sdecl	'.debug_ranges',debug,cluster('tcp_write_checks')
	.sect	'.debug_ranges'
.L443:
	.word	-1,.L287,0,.L444-.L287,0,0
.L684:
	.word	-1,.L287,0,.L681-.L287,-1,.L289,0,.L484-.L289,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_output_segment_busy')
	.sect	'.debug_info'
.L445:
	.word	249
	.half	3
	.word	.L446
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L448,.L447
	.byte	2
	.word	.L346
	.byte	3
	.byte	'tcp_output_segment_busy',0,1,152,11,1
	.word	.L685
	.byte	1,1
	.word	.L315,.L686,.L314
	.byte	4
	.byte	'seg',0,1,152,11,47
	.word	.L687,.L688
	.byte	5
	.word	.L315,.L686
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_output_segment_busy')
	.sect	'.debug_abbrev'
.L446:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_output_segment_busy')
	.sect	'.debug_line'
.L447:
	.word	.L1687-.L1686
.L1686:
	.half	3
	.word	.L1689-.L1688
.L1688:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1689:
	.byte	5,10,7,0,5,2
	.word	.L315
	.byte	3,158,11,1,5,13,9
	.half	.L1690-.L315
	.byte	1,5,19,9
	.half	.L1691-.L1690
	.byte	1,5,1,3,6,1,7,9
	.half	.L449-.L1691
	.byte	0,1,1
.L1687:
	.sdecl	'.debug_ranges',debug,cluster('tcp_output_segment_busy')
	.sect	'.debug_ranges'
.L448:
	.word	-1,.L315,0,.L449-.L315,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_output_alloc_header_common')
	.sect	'.debug_info'
.L450:
	.word	437
	.half	3
	.word	.L451
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L453,.L452
	.byte	2
	.word	.L346
	.byte	3
	.byte	'tcp_output_alloc_header_common',0,1,154,14,1
	.word	.L531
	.byte	1,1
	.word	.L331,.L689,.L330
	.byte	4
	.byte	'ackno',0,1,154,14,38
	.word	.L568,.L690
	.byte	4
	.byte	'optlen',0,1,154,14,51
	.word	.L526,.L691
	.byte	4
	.byte	'datalen',0,1,154,14,65
	.word	.L526,.L692
	.byte	4
	.byte	'seqno_be',0,1,155,14,31
	.word	.L568,.L693
	.byte	4
	.byte	'src_port',0,1,156,14,31
	.word	.L526,.L694
	.byte	4
	.byte	'dst_port',0,1,156,14,47
	.word	.L526,.L695
	.byte	4
	.byte	'flags',0,1,156,14,62
	.word	.L528,.L696
	.byte	4
	.byte	'wnd',0,1,156,14,75
	.word	.L526,.L697
	.byte	5
	.word	.L331,.L689
	.byte	6
	.byte	'tcphdr',0,1,158,14,19
	.word	.L640,.L698
	.byte	6
	.byte	'p',0,1,159,14,16
	.word	.L531,.L699
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_output_alloc_header_common')
	.sect	'.debug_abbrev'
.L451:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_output_alloc_header_common')
	.sect	'.debug_line'
.L452:
	.word	.L1693-.L1692
.L1692:
	.half	3
	.word	.L1695-.L1694
.L1694:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1695:
	.byte	5,1,7,0,5,2
	.word	.L331
	.byte	3,153,14,1,5,18,9
	.half	.L1075-.L331
	.byte	3,7,1,5,1,3,121,1,5,36,9
	.half	.L1076-.L1075
	.byte	3,7,1,5,1,3,121,1,5,56,9
	.half	.L1079-.L1076
	.byte	3,7,1,5,1,3,121,1,5,56,9
	.half	.L1081-.L1079
	.byte	3,7,1,5,5,9
	.half	.L1080-.L1081
	.byte	1,5,3,9
	.half	.L1082-.L1080
	.byte	3,1,1,5,5,7,9
	.half	.L1696-.L1082
	.byte	3,1,1,5,33,9
	.half	.L244-.L1696
	.byte	3,2,1,5,30,9
	.half	.L1084-.L244
	.byte	3,1,1,5,17,9
	.half	.L1697-.L1084
	.byte	1,5,31,9
	.half	.L1698-.L1697
	.byte	3,1,1,5,18,9
	.half	.L1699-.L1698
	.byte	1,5,19,9
	.half	.L1085-.L1699
	.byte	3,1,1,5,32,9
	.half	.L1086-.L1085
	.byte	3,1,1,5,5,9
	.half	.L1087-.L1086
	.byte	3,1,1,5,19,3,127,1,5,5,9
	.half	.L1700-.L1087
	.byte	3,1,1,5,30,9
	.half	.L1701-.L1700
	.byte	3,1,1,5,17,9
	.half	.L1702-.L1701
	.byte	1,5,22,9
	.half	.L1703-.L1702
	.byte	3,1,1,5,20,1,5,18,9
	.half	.L1704-.L1703
	.byte	3,1,1,5,3,9
	.half	.L243-.L1704
	.byte	3,2,1,5,1,9
	.half	.L1088-.L243
	.byte	3,1,1,7,9
	.half	.L454-.L1088
	.byte	0,1,1
.L1693:
	.sdecl	'.debug_ranges',debug,cluster('tcp_output_alloc_header_common')
	.sect	'.debug_ranges'
.L453:
	.word	-1,.L331,0,.L454-.L331,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_output_alloc_header')
	.sect	'.debug_info'
.L455:
	.word	328
	.half	3
	.word	.L456
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L458,.L457
	.byte	2
	.word	.L346
	.byte	3
	.byte	'tcp_output_alloc_header',0,1,189,14,1
	.word	.L531
	.byte	1,1
	.word	.L333,.L700,.L332
	.byte	4
	.byte	'pcb',0,1,189,14,41
	.word	.L522,.L701
	.byte	4
	.byte	'optlen',0,1,189,14,52
	.word	.L526,.L702
	.byte	4
	.byte	'datalen',0,1,189,14,66
	.word	.L526,.L703
	.byte	4
	.byte	'seqno_be',0,1,190,14,31
	.word	.L568,.L704
	.byte	5
	.word	.L333,.L700
	.byte	6
	.byte	'p',0,1,192,14,16
	.word	.L531,.L705
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_output_alloc_header')
	.sect	'.debug_abbrev'
.L456:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_output_alloc_header')
	.sect	'.debug_line'
.L457:
	.word	.L1706-.L1705
.L1705:
	.half	3
	.word	.L1708-.L1707
.L1707:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1708:
	.byte	5,1,7,0,5,2
	.word	.L333
	.byte	3,188,14,1,5,18,9
	.half	.L1089-.L333
	.byte	3,8,1,5,35,9
	.half	.L1709-.L1089
	.byte	1,5,1,9
	.half	.L1710-.L1709
	.byte	3,120,1,5,35,3,8,1,5,50,9
	.half	.L1094-.L1710
	.byte	1,5,1,9
	.half	.L1711-.L1094
	.byte	3,120,1,5,5,3,9,1,5,52,9
	.half	.L1095-.L1711
	.byte	3,126,1,5,5,3,2,1,9
	.half	.L1090-.L1095
	.byte	3,127,1,5,41,3,127,1,5,5,9
	.half	.L1091-.L1090
	.byte	3,1,1,5,3,9
	.half	.L1092-.L1091
	.byte	3,2,1,5,34,7,9
	.half	.L1712-.L1092
	.byte	3,2,1,5,49,9
	.half	.L1713-.L1712
	.byte	1,5,44,9
	.half	.L1714-.L1713
	.byte	1,5,29,1,5,1,9
	.half	.L246-.L1714
	.byte	3,3,1,7,9
	.half	.L459-.L246
	.byte	0,1,1
.L1706:
	.sdecl	'.debug_ranges',debug,cluster('tcp_output_alloc_header')
	.sect	'.debug_ranges'
.L458:
	.word	-1,.L333,0,.L459-.L333,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_output_fill_options')
	.sect	'.debug_info'
.L460:
	.word	305
	.half	3
	.word	.L461
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L463,.L462
	.byte	2
	.word	.L346
	.byte	3
	.byte	'tcp_output_fill_options',0,1,208,14,1,1,1
	.word	.L335,.L706,.L334
	.byte	4
	.byte	'pcb',0,1,208,14,47
	.word	.L610,.L707
	.byte	4
	.byte	'p',0,1,208,14,65
	.word	.L531,.L708
	.byte	4
	.byte	'optflags',0,1,208,14,73
	.word	.L528,.L709
	.byte	4
	.byte	'num_sacks',0,1,208,14,88
	.word	.L528,.L710
	.byte	5
	.word	.L335,.L706
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_output_fill_options')
	.sect	'.debug_abbrev'
.L461:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_output_fill_options')
	.sect	'.debug_line'
.L462:
	.word	.L1716-.L1715
.L1715:
	.half	3
	.word	.L1718-.L1717
.L1717:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1718:
	.byte	5,1,7,0,5,2
	.word	.L335
	.byte	3,247,14,1,7,9
	.half	.L464-.L335
	.byte	0,1,1
.L1716:
	.sdecl	'.debug_ranges',debug,cluster('tcp_output_fill_options')
	.sect	'.debug_ranges'
.L463:
	.word	-1,.L335,0,.L464-.L335,0,0
	.sdecl	'.debug_info',debug,cluster('tcp_output_control_segment')
	.sect	'.debug_info'
.L465:
	.word	412
	.half	3
	.word	.L466
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L468,.L467
	.byte	2
	.word	.L346
	.byte	3
	.byte	'tcp_output_control_segment',0,1,129,15,1
	.word	.L520
	.byte	1,1
	.word	.L337,.L711,.L336
	.byte	4
	.byte	'pcb',0,1,129,15,50
	.word	.L610,.L712
	.byte	4
	.byte	'p',0,1,129,15,68
	.word	.L531,.L713
	.byte	4
	.byte	'src',0,1,130,15,45
	.word	.L614,.L714
	.byte	4
	.byte	'dst',0,1,130,15,67
	.word	.L614,.L715
	.byte	5
	.word	.L337,.L711
	.byte	6
	.byte	'err',0,1,132,15,9
	.word	.L520,.L716
	.byte	6
	.byte	'netif',0,1,133,15,17
	.word	.L572,.L717
	.byte	5
	.word	.L248,.L249
	.byte	6
	.byte	'ttl',0,1,141,15,10
	.word	.L528,.L718
	.byte	6
	.byte	'tos',0,1,141,15,15
	.word	.L528,.L719
	.byte	5
	.word	.L248,.L720
	.byte	6
	.byte	'tcphdr',0,1,144,15,23
	.word	.L640,.L721
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('tcp_output_control_segment')
	.sect	'.debug_abbrev'
.L466:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('tcp_output_control_segment')
	.sect	'.debug_line'
.L467:
	.word	.L1720-.L1719
.L1719:
	.half	3
	.word	.L1722-.L1721
.L1721:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1722:
	.byte	5,1,7,0,5,2
	.word	.L337
	.byte	3,128,15,1,5,31,9
	.half	.L1104-.L337
	.byte	3,8,1,5,9,9
	.half	.L1099-.L1104
	.byte	1,5,3,9
	.half	.L1106-.L1099
	.byte	3,1,1,5,9,7,9
	.half	.L1723-.L1106
	.byte	3,1,1,5,18,1,5,51,9
	.half	.L248-.L1723
	.byte	3,5,1,5,44,9
	.half	.L1107-.L248
	.byte	3,1,1,5,59,1,5,46,9
	.half	.L1724-.L1107
	.byte	3,1,1,5,22,9
	.half	.L1105-.L1724
	.byte	3,127,1,5,5,9
	.half	.L720-.L1105
	.byte	3,4,1,5,16,7,9
	.half	.L1725-.L720
	.byte	3,2,1,9
	.half	.L1111-.L1725
	.byte	3,1,1,5,21,9
	.half	.L1112-.L1111
	.byte	3,127,1,5,11,9
	.half	.L250-.L1112
	.byte	3,4,1,9
	.half	.L1113-.L250
	.byte	3,1,1,5,5,9
	.half	.L251-.L1113
	.byte	3,2,1,5,11,9
	.half	.L1726-.L251
	.byte	3,1,1,5,5,9
	.half	.L1115-.L1726
	.byte	3,127,1,5,11,9
	.half	.L1727-.L1115
	.byte	3,1,1,5,9,9
	.half	.L1114-.L1727
	.byte	1,5,13,9
	.half	.L249-.L1114
	.byte	3,3,1,5,3,9
	.half	.L1120-.L249
	.byte	3,1,1,5,1,3,1,1,7,9
	.half	.L469-.L1120
	.byte	0,1,1
.L1720:
	.sdecl	'.debug_ranges',debug,cluster('tcp_output_control_segment')
	.sect	'.debug_ranges'
.L468:
	.word	-1,.L337,0,.L469-.L337,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_107')
	.sect	'.debug_info'
.L470:
	.word	206
	.half	3
	.word	.L471
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L473,.L472
	.byte	2
	.word	.L346
	.byte	3
	.byte	'.cocofun_107',0,1,134,3,1,1
	.word	.L301,.L474,.L300
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_107')
	.sect	'.debug_abbrev'
.L471:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_107')
	.sect	'.debug_line'
.L472:
	.word	.L1729-.L1728
.L1728:
	.half	3
	.word	.L1731-.L1730
.L1730:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1731:
	.byte	5,7,7,0,5,2
	.word	.L301
	.byte	3,229,4,1,9
	.half	.L474-.L301
	.byte	0,1,1,5,3,0,5,2
	.word	.L301
	.byte	3,175,1,1,5,7,9
	.half	.L1732-.L301
	.byte	3,182,3,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,3,0,5,2
	.word	.L301
	.byte	3,138,2,1,5,7,9
	.half	.L1732-.L301
	.byte	3,219,2,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,5,0,5,2
	.word	.L301
	.byte	3,215,2,1,5,7,9
	.half	.L1732-.L301
	.byte	3,142,2,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,3,0,5,2
	.word	.L301
	.byte	3,172,3,1,5,7,9
	.half	.L1732-.L301
	.byte	3,185,1,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,5,0,5,2
	.word	.L301
	.byte	3,229,3,1,5,7,9
	.half	.L1732-.L301
	.byte	3,128,1,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,5,0,5,2
	.word	.L301
	.byte	3,242,3,1,5,7,9
	.half	.L1732-.L301
	.byte	3,243,0,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,7,0,5,2
	.word	.L301
	.byte	3,247,3,1,9
	.half	.L1732-.L301
	.byte	3,238,0,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,5,0,5,2
	.word	.L301
	.byte	3,255,3,1,5,7,9
	.half	.L1732-.L301
	.byte	3,230,0,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,11,0,5,2
	.word	.L301
	.byte	3,176,4,1,5,7,9
	.half	.L1732-.L301
	.byte	3,53,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,5,0,5,2
	.word	.L301
	.byte	3,201,4,1,5,7,9
	.half	.L1732-.L301
	.byte	3,28,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,7,0,5,2
	.word	.L301
	.byte	3,240,4,1,9
	.half	.L1732-.L301
	.byte	3,117,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,7,0,5,2
	.word	.L301
	.byte	3,170,5,1,9
	.half	.L1732-.L301
	.byte	3,187,127,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,5,0,5,2
	.word	.L301
	.byte	3,210,5,1,5,7,9
	.half	.L1732-.L301
	.byte	3,147,127,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,5,0,5,2
	.word	.L301
	.byte	3,223,5,1,5,7,9
	.half	.L1732-.L301
	.byte	3,134,127,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,5,0,5,2
	.word	.L301
	.byte	3,229,5,1,5,7,9
	.half	.L1732-.L301
	.byte	3,128,127,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,5,0,5,2
	.word	.L301
	.byte	3,145,6,1,5,7,9
	.half	.L1732-.L301
	.byte	3,212,126,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,5,0,5,2
	.word	.L301
	.byte	3,166,6,1,5,7,9
	.half	.L1732-.L301
	.byte	3,191,126,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,3,0,5,2
	.word	.L301
	.byte	3,202,6,1,5,7,9
	.half	.L1732-.L301
	.byte	3,155,126,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,5,0,5,2
	.word	.L301
	.byte	3,210,6,1,5,7,9
	.half	.L1732-.L301
	.byte	3,147,126,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,3,0,5,2
	.word	.L301
	.byte	3,218,6,1,5,7,9
	.half	.L1732-.L301
	.byte	3,139,126,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,3,0,5,2
	.word	.L301
	.byte	3,219,6,1,5,7,9
	.half	.L1732-.L301
	.byte	3,138,126,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,3,0,5,2
	.word	.L301
	.byte	3,215,7,1,5,7,9
	.half	.L1732-.L301
	.byte	3,142,125,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,3,0,5,2
	.word	.L301
	.byte	3,234,7,1,5,7,9
	.half	.L1732-.L301
	.byte	3,251,124,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,3,0,5,2
	.word	.L301
	.byte	3,144,8,1,5,7,9
	.half	.L1732-.L301
	.byte	3,213,124,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,3,0,5,2
	.word	.L301
	.byte	3,146,8,1,5,7,9
	.half	.L1732-.L301
	.byte	3,211,124,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,3,0,5,2
	.word	.L301
	.byte	3,184,8,1,5,7,9
	.half	.L1732-.L301
	.byte	3,173,124,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,3,0,5,2
	.word	.L301
	.byte	3,193,8,1,5,7,9
	.half	.L1732-.L301
	.byte	3,164,124,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,3,0,5,2
	.word	.L301
	.byte	3,194,8,1,5,7,9
	.half	.L1732-.L301
	.byte	3,163,124,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,5,0,5,2
	.word	.L301
	.byte	3,228,8,1,5,7,9
	.half	.L1732-.L301
	.byte	3,129,124,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,3,0,5,2
	.word	.L301
	.byte	3,224,9,1,5,7,9
	.half	.L1732-.L301
	.byte	3,133,123,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,3,0,5,2
	.word	.L301
	.byte	3,226,9,1,5,7,9
	.half	.L1732-.L301
	.byte	3,131,123,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,5,0,5,2
	.word	.L301
	.byte	3,181,10,1,5,7,9
	.half	.L1732-.L301
	.byte	3,176,122,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,3,0,5,2
	.word	.L301
	.byte	3,155,12,1,5,7,9
	.half	.L1732-.L301
	.byte	3,202,120,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,3,0,5,2
	.word	.L301
	.byte	3,226,12,1,5,7,9
	.half	.L1732-.L301
	.byte	3,131,120,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,3,0,5,2
	.word	.L301
	.byte	3,151,13,1,5,7,9
	.half	.L1732-.L301
	.byte	3,206,119,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,3,0,5,2
	.word	.L301
	.byte	3,172,13,1,5,7,9
	.half	.L1732-.L301
	.byte	3,185,119,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,3,0,5,2
	.word	.L301
	.byte	3,192,13,1,5,7,9
	.half	.L1732-.L301
	.byte	3,165,119,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,3,0,5,2
	.word	.L301
	.byte	3,248,13,1,5,7,9
	.half	.L1732-.L301
	.byte	3,237,118,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,5,0,5,2
	.word	.L301
	.byte	3,162,14,1,5,7,9
	.half	.L1732-.L301
	.byte	3,195,118,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,3,0,5,2
	.word	.L301
	.byte	3,195,15,1,5,7,9
	.half	.L1732-.L301
	.byte	3,162,117,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,3,0,5,2
	.word	.L301
	.byte	3,196,15,1,5,7,9
	.half	.L1732-.L301
	.byte	3,161,117,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,3,0,5,2
	.word	.L301
	.byte	3,233,15,1,5,7,9
	.half	.L1732-.L301
	.byte	3,252,116,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,3,0,5,2
	.word	.L301
	.byte	3,163,16,1,5,7,9
	.half	.L1732-.L301
	.byte	3,194,116,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1,5,3,0,5,2
	.word	.L301
	.byte	3,206,16,1,5,7,9
	.half	.L1732-.L301
	.byte	3,151,116,1,7,9
	.half	.L474-.L1732
	.byte	0,1,1
.L1729:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_107')
	.sect	'.debug_ranges'
.L473:
	.word	-1,.L301,0,.L474-.L301,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_108')
	.sect	'.debug_info'
.L475:
	.word	206
	.half	3
	.word	.L476
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L478,.L477
	.byte	2
	.word	.L346
	.byte	3
	.byte	'.cocofun_108',0,1,134,3,1,1
	.word	.L299,.L479,.L298
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_108')
	.sect	'.debug_abbrev'
.L476:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_108')
	.sect	'.debug_line'
.L477:
	.word	.L1734-.L1733
.L1733:
	.half	3
	.word	.L1736-.L1735
.L1735:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1736:
	.byte	5,7,7,0,5,2
	.word	.L299
	.byte	3,229,4,1,9
	.half	.L479-.L299
	.byte	0,1,1,5,5,0,5,2
	.word	.L299
	.byte	3,215,2,1,5,7,9
	.half	.L1737-.L299
	.byte	3,142,2,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,3,0,5,2
	.word	.L299
	.byte	3,172,3,1,5,7,9
	.half	.L1737-.L299
	.byte	3,185,1,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,5,0,5,2
	.word	.L299
	.byte	3,229,3,1,5,7,9
	.half	.L1737-.L299
	.byte	3,128,1,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,5,0,5,2
	.word	.L299
	.byte	3,242,3,1,5,7,9
	.half	.L1737-.L299
	.byte	3,243,0,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,7,0,5,2
	.word	.L299
	.byte	3,247,3,1,9
	.half	.L1737-.L299
	.byte	3,238,0,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,5,0,5,2
	.word	.L299
	.byte	3,255,3,1,5,7,9
	.half	.L1737-.L299
	.byte	3,230,0,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,11,0,5,2
	.word	.L299
	.byte	3,176,4,1,5,7,9
	.half	.L1737-.L299
	.byte	3,53,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,5,0,5,2
	.word	.L299
	.byte	3,201,4,1,5,7,9
	.half	.L1737-.L299
	.byte	3,28,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,7,0,5,2
	.word	.L299
	.byte	3,240,4,1,9
	.half	.L1737-.L299
	.byte	3,117,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,7,0,5,2
	.word	.L299
	.byte	3,170,5,1,9
	.half	.L1737-.L299
	.byte	3,187,127,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,5,0,5,2
	.word	.L299
	.byte	3,210,5,1,5,7,9
	.half	.L1737-.L299
	.byte	3,147,127,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,5,0,5,2
	.word	.L299
	.byte	3,223,5,1,5,7,9
	.half	.L1737-.L299
	.byte	3,134,127,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,5,0,5,2
	.word	.L299
	.byte	3,229,5,1,5,7,9
	.half	.L1737-.L299
	.byte	3,128,127,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,5,0,5,2
	.word	.L299
	.byte	3,145,6,1,5,7,9
	.half	.L1737-.L299
	.byte	3,212,126,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,5,0,5,2
	.word	.L299
	.byte	3,166,6,1,5,7,9
	.half	.L1737-.L299
	.byte	3,191,126,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,3,0,5,2
	.word	.L299
	.byte	3,202,6,1,5,7,9
	.half	.L1737-.L299
	.byte	3,155,126,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,5,0,5,2
	.word	.L299
	.byte	3,210,6,1,5,7,9
	.half	.L1737-.L299
	.byte	3,147,126,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,3,0,5,2
	.word	.L299
	.byte	3,215,7,1,5,7,9
	.half	.L1737-.L299
	.byte	3,142,125,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,3,0,5,2
	.word	.L299
	.byte	3,234,7,1,5,7,9
	.half	.L1737-.L299
	.byte	3,251,124,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,3,0,5,2
	.word	.L299
	.byte	3,144,8,1,5,7,9
	.half	.L1737-.L299
	.byte	3,213,124,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,3,0,5,2
	.word	.L299
	.byte	3,146,8,1,5,7,9
	.half	.L1737-.L299
	.byte	3,211,124,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,3,0,5,2
	.word	.L299
	.byte	3,184,8,1,5,7,9
	.half	.L1737-.L299
	.byte	3,173,124,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,3,0,5,2
	.word	.L299
	.byte	3,193,8,1,5,7,9
	.half	.L1737-.L299
	.byte	3,164,124,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,3,0,5,2
	.word	.L299
	.byte	3,194,8,1,5,7,9
	.half	.L1737-.L299
	.byte	3,163,124,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,5,0,5,2
	.word	.L299
	.byte	3,228,8,1,5,7,9
	.half	.L1737-.L299
	.byte	3,129,124,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,3,0,5,2
	.word	.L299
	.byte	3,224,9,1,5,7,9
	.half	.L1737-.L299
	.byte	3,133,123,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,3,0,5,2
	.word	.L299
	.byte	3,226,9,1,5,7,9
	.half	.L1737-.L299
	.byte	3,131,123,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,5,0,5,2
	.word	.L299
	.byte	3,181,10,1,5,7,9
	.half	.L1737-.L299
	.byte	3,176,122,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,3,0,5,2
	.word	.L299
	.byte	3,226,12,1,5,7,9
	.half	.L1737-.L299
	.byte	3,131,120,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,3,0,5,2
	.word	.L299
	.byte	3,151,13,1,5,7,9
	.half	.L1737-.L299
	.byte	3,206,119,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,3,0,5,2
	.word	.L299
	.byte	3,172,13,1,5,7,9
	.half	.L1737-.L299
	.byte	3,185,119,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,3,0,5,2
	.word	.L299
	.byte	3,192,13,1,5,7,9
	.half	.L1737-.L299
	.byte	3,165,119,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,3,0,5,2
	.word	.L299
	.byte	3,248,13,1,5,7,9
	.half	.L1737-.L299
	.byte	3,237,118,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,5,0,5,2
	.word	.L299
	.byte	3,162,14,1,5,7,9
	.half	.L1737-.L299
	.byte	3,195,118,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,3,0,5,2
	.word	.L299
	.byte	3,195,15,1,5,7,9
	.half	.L1737-.L299
	.byte	3,162,117,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,3,0,5,2
	.word	.L299
	.byte	3,196,15,1,5,7,9
	.half	.L1737-.L299
	.byte	3,161,117,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,3,0,5,2
	.word	.L299
	.byte	3,163,16,1,5,7,9
	.half	.L1737-.L299
	.byte	3,194,116,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1,5,3,0,5,2
	.word	.L299
	.byte	3,206,16,1,5,7,9
	.half	.L1737-.L299
	.byte	3,151,116,1,7,9
	.half	.L479-.L1737
	.byte	0,1,1
.L1734:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_108')
	.sect	'.debug_ranges'
.L478:
	.word	-1,.L299,0,.L479-.L299,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_109')
	.sect	'.debug_info'
.L480:
	.word	206
	.half	3
	.word	.L481
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L483,.L482
	.byte	2
	.word	.L346
	.byte	3
	.byte	'.cocofun_109',0,1,177,2,1,1
	.word	.L289,.L484,.L288
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_109')
	.sect	'.debug_abbrev'
.L481:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_109')
	.sect	'.debug_line'
.L482:
	.word	.L1739-.L1738
.L1738:
	.half	3
	.word	.L1741-.L1740
.L1740:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1741:
	.byte	5,5,7,0,5,2
	.word	.L289
	.byte	3,207,2,1,9
	.half	.L484-.L289
	.byte	0,1,1,5,3,0,5,2
	.word	.L289
	.byte	3,157,6,1,5,5,9
	.half	.L759-.L289
	.byte	3,178,124,1,7,9
	.half	.L484-.L759
	.byte	0,1,1,5,3,0,5,2
	.word	.L289
	.byte	3,213,7,1,5,5,9
	.half	.L759-.L289
	.byte	3,250,122,1,7,9
	.half	.L484-.L759
	.byte	0,1,1,5,5,0,5,2
	.word	.L289
	.byte	3,190,8,1,9
	.half	.L759-.L289
	.byte	3,145,122,1,7,9
	.half	.L484-.L759
	.byte	0,1,1
.L1739:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_109')
	.sect	'.debug_ranges'
.L483:
	.word	-1,.L289,0,.L484-.L289,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_110')
	.sect	'.debug_info'
.L485:
	.word	206
	.half	3
	.word	.L486
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L488,.L487
	.byte	2
	.word	.L346
	.byte	3
	.byte	'.cocofun_110',0,1,158,1,1,1
	.word	.L283,.L489,.L282
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_110')
	.sect	'.debug_abbrev'
.L486:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_110')
	.sect	'.debug_line'
.L487:
	.word	.L1743-.L1742
.L1742:
	.half	3
	.word	.L1745-.L1744
.L1744:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1745:
	.byte	5,3,7,0,5,2
	.word	.L283
	.byte	3,175,1,1,9
	.half	.L489-.L283
	.byte	0,1,1,5,3,0,5,2
	.word	.L283
	.byte	3,138,2,1,9
	.half	.L1746-.L283
	.byte	3,165,127,1,7,9
	.half	.L489-.L1746
	.byte	0,1,1,5,3,0,5,2
	.word	.L283
	.byte	3,218,6,1,9
	.half	.L1746-.L283
	.byte	3,213,122,1,7,9
	.half	.L489-.L1746
	.byte	0,1,1,5,3,0,5,2
	.word	.L283
	.byte	3,219,6,1,9
	.half	.L1746-.L283
	.byte	3,212,122,1,7,9
	.half	.L489-.L1746
	.byte	0,1,1,5,3,0,5,2
	.word	.L283
	.byte	3,155,12,1,9
	.half	.L1746-.L283
	.byte	3,148,117,1,7,9
	.half	.L489-.L1746
	.byte	0,1,1,5,3,0,5,2
	.word	.L283
	.byte	3,233,15,1,9
	.half	.L1746-.L283
	.byte	3,198,113,1,7,9
	.half	.L489-.L1746
	.byte	0,1,1
.L1743:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_110')
	.sect	'.debug_ranges'
.L488:
	.word	-1,.L283,0,.L489-.L283,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_111')
	.sect	'.debug_info'
.L490:
	.word	206
	.half	3
	.word	.L491
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L493,.L492
	.byte	2
	.word	.L346
	.byte	3
	.byte	'.cocofun_111',0,1,187,6,1,1
	.word	.L305,.L494,.L304
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_111')
	.sect	'.debug_abbrev'
.L491:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_111')
	.sect	'.debug_line'
.L492:
	.word	.L1748-.L1747
.L1747:
	.half	3
	.word	.L1750-.L1749
.L1749:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1750:
	.byte	5,3,7,0,5,2
	.word	.L305
	.byte	3,206,7,1,5,28,7,9
	.half	.L1751-.L305
	.byte	3,1,1,5,26,1,5,3,9
	.half	.L128-.L1751
	.byte	3,127,1,7,9
	.half	.L494-.L128
	.byte	0,1,1,5,3,0,5,2
	.word	.L305
	.byte	3,130,11,1,5,28,7,9
	.half	.L1751-.L305
	.byte	3,2,1,5,26,1,5,3,9
	.half	.L128-.L1751
	.byte	3,202,124,1,7,9
	.half	.L494-.L128
	.byte	0,1,1,5,3,0,5,2
	.word	.L305
	.byte	3,219,13,1,5,28,7,9
	.half	.L1751-.L305
	.byte	3,2,1,5,26,1,5,3,9
	.half	.L128-.L1751
	.byte	3,241,121,1,7,9
	.half	.L494-.L128
	.byte	0,1,1
.L1748:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_111')
	.sect	'.debug_ranges'
.L493:
	.word	-1,.L305,0,.L494-.L305,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_112')
	.sect	'.debug_info'
.L495:
	.word	206
	.half	3
	.word	.L496
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L498,.L497
	.byte	2
	.word	.L346
	.byte	3
	.byte	'.cocofun_112',0,1,150,13,1,1
	.word	.L323,.L499,.L322
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_112')
	.sect	'.debug_abbrev'
.L496:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_112')
	.sect	'.debug_line'
.L497:
	.word	.L1753-.L1752
.L1752:
	.half	3
	.word	.L1755-.L1754
.L1754:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1755:
	.byte	5,10,7,0,5,2
	.word	.L323
	.byte	3,154,13,1,5,19,9
	.half	.L1756-.L323
	.byte	1,5,3,9
	.half	.L1757-.L1756
	.byte	1,5,5,7,9
	.half	.L1758-.L1757
	.byte	3,1,1,5,3,9
	.half	.L225-.L1758
	.byte	3,127,1,7,9
	.half	.L499-.L225
	.byte	0,1,1,5,10,0,5,2
	.word	.L323
	.byte	3,225,13,1,5,19,9
	.half	.L1756-.L323
	.byte	1,5,3,9
	.half	.L1757-.L1756
	.byte	1,5,5,7,9
	.half	.L1758-.L1757
	.byte	3,1,1,5,3,9
	.half	.L225-.L1758
	.byte	3,184,127,1,7,9
	.half	.L499-.L225
	.byte	0,1,1
.L1753:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_112')
	.sect	'.debug_ranges'
.L498:
	.word	-1,.L323,0,.L499-.L323,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_113')
	.sect	'.debug_info'
.L500:
	.word	206
	.half	3
	.word	.L501
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L503,.L502
	.byte	2
	.word	.L346
	.byte	3
	.byte	'.cocofun_113',0,1,213,9,1,1
	.word	.L313,.L504,.L312
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_113')
	.sect	'.debug_abbrev'
.L501:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_113')
	.sect	'.debug_line'
.L502:
	.word	.L1760-.L1759
.L1759:
	.half	3
	.word	.L1762-.L1761
.L1761:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1762:
	.byte	5,9,7,0,5,2
	.word	.L313
	.byte	3,221,10,1,5,5,9
	.half	.L1763-.L313
	.byte	1,5,20,7,9
	.half	.L1764-.L1763
	.byte	3,1,1,5,5,9
	.half	.L194-.L1764
	.byte	3,127,1,7,9
	.half	.L504-.L194
	.byte	0,1,1,5,7,0,5,2
	.word	.L313
	.byte	3,129,17,1,5,3,9
	.half	.L1763-.L313
	.byte	1,5,18,7,9
	.half	.L1764-.L1763
	.byte	3,1,1,5,5,9
	.half	.L194-.L1764
	.byte	3,219,121,1,7,9
	.half	.L504-.L194
	.byte	0,1,1
.L1760:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_113')
	.sect	'.debug_ranges'
.L503:
	.word	-1,.L313,0,.L504-.L313,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_114')
	.sect	'.debug_info'
.L505:
	.word	206
	.half	3
	.word	.L506
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L508,.L507
	.byte	2
	.word	.L346
	.byte	3
	.byte	'.cocofun_114',0,1,134,3,1,1
	.word	.L297,.L509,.L296
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_114')
	.sect	'.debug_abbrev'
.L506:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_114')
	.sect	'.debug_line'
.L507:
	.word	.L1766-.L1765
.L1765:
	.half	3
	.word	.L1768-.L1767
.L1767:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1768:
	.byte	5,62,7,0,5,2
	.word	.L297
	.byte	3,224,3,1,5,35,9
	.half	.L48-.L297
	.byte	3,1,1,5,48,9
	.half	.L47-.L48
	.byte	3,127,1,5,62,9
	.half	.L1769-.L47
	.byte	1,7,9
	.half	.L1770-.L1769
	.byte	1,7,9
	.half	.L509-.L1770
	.byte	0,1,1,5,30,0,5,2
	.word	.L297
	.byte	3,176,10,1,5,43,9
	.half	.L48-.L297
	.byte	1,5,16,9
	.half	.L47-.L48
	.byte	1,5,30,9
	.half	.L1769-.L47
	.byte	1,5,62,7,9
	.half	.L1770-.L1769
	.byte	3,176,121,1,7,9
	.half	.L509-.L1770
	.byte	0,1,1
.L1766:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_114')
	.sect	'.debug_ranges'
.L508:
	.word	-1,.L297,0,.L509-.L297,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_115')
	.sect	'.debug_info'
.L510:
	.word	206
	.half	3
	.word	.L511
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L513,.L512
	.byte	2
	.word	.L346
	.byte	3
	.byte	'.cocofun_115',0,1,134,3,1,1
	.word	.L295,.L514,.L294
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_115')
	.sect	'.debug_abbrev'
.L511:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_115')
	.sect	'.debug_line'
.L512:
	.word	.L1772-.L1771
.L1771:
	.half	3
	.word	.L1774-.L1773
.L1773:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1774:
	.byte	5,49,7,0,5,2
	.word	.L295
	.byte	3,173,4,1,5,56,9
	.half	.L62-.L295
	.byte	1,5,35,9
	.half	.L61-.L62
	.byte	1,5,49,9
	.half	.L1775-.L61
	.byte	1,7,9
	.half	.L1776-.L1775
	.byte	1,7,9
	.half	.L514-.L1776
	.byte	0,1,1,5,62,0,5,2
	.word	.L295
	.byte	3,239,7,1,5,35,9
	.half	.L62-.L295
	.byte	3,1,1,5,48,9
	.half	.L61-.L62
	.byte	3,127,1,5,62,9
	.half	.L1775-.L61
	.byte	1,5,49,7,9
	.half	.L1776-.L1775
	.byte	3,190,124,1,7,9
	.half	.L514-.L1776
	.byte	0,1,1
.L1772:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_115')
	.sect	'.debug_ranges'
.L513:
	.word	-1,.L295,0,.L514-.L295,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_116')
	.sect	'.debug_info'
.L515:
	.word	206
	.half	3
	.word	.L516
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L518,.L517
	.byte	2
	.word	.L346
	.byte	3
	.byte	'.cocofun_116',0,1,134,3,1,1
	.word	.L293,.L519,.L292
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_116')
	.sect	'.debug_abbrev'
.L516:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_116')
	.sect	'.debug_line'
.L517:
	.word	.L1778-.L1777
.L1777:
	.half	3
	.word	.L1780-.L1779
.L1779:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\tcp_out.c',0,0,0,0,0
.L1780:
	.byte	5,3,7,0,5,2
	.word	.L293
	.byte	3,156,6,1,9
	.half	.L519-.L293
	.byte	0,1,1,5,5,0,5,2
	.word	.L293
	.byte	3,189,8,1,5,3,9
	.half	.L911-.L293
	.byte	3,223,125,1,7,9
	.half	.L519-.L911
	.byte	0,1,1,5,7,0,5,2
	.word	.L293
	.byte	3,210,10,1,5,3,9
	.half	.L911-.L293
	.byte	3,202,123,1,7,9
	.half	.L519-.L911
	.byte	0,1,1
.L1778:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_116')
	.sect	'.debug_ranges'
.L518:
	.word	-1,.L293,0,.L519-.L293,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_107')
	.sect	'.debug_loc'
.L300:
	.word	-1,.L301,0,.L474-.L301
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_108')
	.sect	'.debug_loc'
.L298:
	.word	-1,.L299,0,.L479-.L299
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_109')
	.sect	'.debug_loc'
.L288:
	.word	-1,.L289,0,.L484-.L289
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_110')
	.sect	'.debug_loc'
.L282:
	.word	-1,.L283,0,.L489-.L283
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_111')
	.sect	'.debug_loc'
.L304:
	.word	-1,.L305,0,.L494-.L305
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_112')
	.sect	'.debug_loc'
.L322:
	.word	-1,.L323,0,.L499-.L323
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_113')
	.sect	'.debug_loc'
.L312:
	.word	-1,.L313,0,.L504-.L313
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_114')
	.sect	'.debug_loc'
.L296:
	.word	-1,.L297,0,.L509-.L297
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_115')
	.sect	'.debug_loc'
.L294:
	.word	-1,.L295,0,.L514-.L295
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_116')
	.sect	'.debug_loc'
.L292:
	.word	-1,.L293,0,.L519-.L293
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_create_segment')
	.sect	'.debug_loc'
.L663:
	.word	-1,.L281,0,.L724-.L281
	.half	1
	.byte	84
	.word	.L729-.L281,.L727-.L281
	.half	1
	.byte	89
	.word	.L283-.L281,.L489-.L281
	.half	1
	.byte	89
	.word	.L301-.L281,.L474-.L281
	.half	1
	.byte	89
	.word	.L735-.L281,.L660-.L281
	.half	1
	.byte	89
	.word	0,0
.L665:
	.word	-1,.L281,0,.L724-.L281
	.half	1
	.byte	86
	.word	.L723-.L281,.L725-.L281
	.half	1
	.byte	95
	.word	0,0
.L668:
	.word	-1,.L281,.L730-.L281,.L727-.L281
	.half	1
	.byte	88
	.word	.L283-.L281,.L489-.L281
	.half	1
	.byte	88
	.word	.L301-.L281,.L474-.L281
	.half	1
	.byte	88
	.word	.L735-.L281,.L736-.L281
	.half	1
	.byte	88
	.word	0,0
.L662:
	.word	-1,.L281,0,.L724-.L281
	.half	1
	.byte	101
	.word	.L728-.L281,.L727-.L281
	.half	1
	.byte	109
	.word	.L733-.L281,.L731-.L281
	.half	1
	.byte	100
	.word	.L283-.L281,.L489-.L281
	.half	1
	.byte	109
	.word	.L301-.L281,.L474-.L281
	.half	1
	.byte	109
	.word	.L735-.L281,.L737-.L281
	.half	1
	.byte	109
	.word	.L739-.L281,.L740-.L281
	.half	1
	.byte	100
	.word	0,0
.L661:
	.word	-1,.L281,0,.L724-.L281
	.half	1
	.byte	100
	.word	.L726-.L281,.L727-.L281
	.half	1
	.byte	108
	.word	.L283-.L281,.L489-.L281
	.half	1
	.byte	108
	.word	.L301-.L281,.L474-.L281
	.half	1
	.byte	108
	.word	.L735-.L281,.L738-.L281
	.half	1
	.byte	108
	.word	0,0
.L667:
	.word	-1,.L281,.L724-.L281,.L731-.L281
	.half	1
	.byte	98
	.word	.L732-.L281,.L727-.L281
	.half	1
	.byte	111
	.word	.L6-.L281,.L734-.L281
	.half	1
	.byte	98
	.word	.L283-.L281,.L489-.L281
	.half	1
	.byte	111
	.word	.L301-.L281,.L474-.L281
	.half	1
	.byte	111
	.word	.L735-.L281,.L660-.L281
	.half	1
	.byte	111
	.word	.L741-.L281,.L7-.L281
	.half	1
	.byte	100
	.word	.L744-.L281,.L660-.L281
	.half	1
	.byte	98
	.word	0,0
.L664:
	.word	-1,.L281,0,.L724-.L281
	.half	1
	.byte	85
	.word	.L730-.L281,.L727-.L281
	.half	1
	.byte	90
	.word	.L283-.L281,.L489-.L281
	.half	1
	.byte	90
	.word	.L301-.L281,.L474-.L281
	.half	1
	.byte	90
	.word	.L735-.L281,.L660-.L281
	.half	1
	.byte	90
	.word	.L742-.L281,.L743-.L281
	.half	1
	.byte	84
	.word	0,0
.L280:
	.word	-1,.L281,0,.L723-.L281
	.half	2
	.byte	138,0
	.word	.L723-.L281,.L9-.L281
	.half	2
	.byte	138,16
	.word	.L9-.L281,.L9-.L281
	.half	2
	.byte	138,0
	.word	.L9-.L281,.L660-.L281
	.half	2
	.byte	138,16
	.word	.L660-.L281,.L660-.L281
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_enqueue_flags')
	.sect	'.debug_loc'
.L603:
	.word	-1,.L309,0,.L968-.L309
	.half	1
	.byte	84
	.word	.L969-.L309,.L968-.L309
	.half	1
	.byte	89
	.word	.L299-.L309,.L479-.L309
	.half	1
	.byte	89
	.word	.L299-.L309,.L479-.L309
	.half	1
	.byte	84
	.word	.L301-.L309,.L474-.L309
	.half	1
	.byte	89
	.word	.L301-.L309,.L474-.L309
	.half	1
	.byte	84
	.word	.L971-.L309,.L973-.L309
	.half	1
	.byte	89
	.word	.L971-.L309,.L140-.L309
	.half	1
	.byte	84
	.word	.L974-.L309,.L975-.L309
	.half	1
	.byte	89
	.word	.L979-.L309,.L980-.L309
	.half	1
	.byte	89
	.word	.L982-.L309,.L983-.L309
	.half	1
	.byte	84
	.word	.L293-.L309,.L519-.L309
	.half	1
	.byte	89
	.word	.L289-.L309,.L484-.L309
	.half	1
	.byte	89
	.word	.L986-.L309,.L987-.L309
	.half	1
	.byte	89
	.word	.L989-.L309,.L990-.L309
	.half	1
	.byte	89
	.word	.L991-.L309,.L992-.L309
	.half	1
	.byte	89
	.word	.L995-.L309,.L601-.L309
	.half	1
	.byte	89
	.word	0,0
.L606:
	.word	-1,.L309,.L970-.L309,.L968-.L309
	.half	1
	.byte	90
	.word	.L299-.L309,.L479-.L309
	.half	1
	.byte	90
	.word	.L301-.L309,.L474-.L309
	.half	1
	.byte	90
	.word	.L971-.L309,.L973-.L309
	.half	1
	.byte	90
	.word	.L974-.L309,.L975-.L309
	.half	1
	.byte	90
	.word	.L979-.L309,.L980-.L309
	.half	1
	.byte	90
	.word	.L984-.L309,.L983-.L309
	.half	1
	.byte	86
	.word	.L293-.L309,.L519-.L309
	.half	1
	.byte	90
	.word	.L289-.L309,.L484-.L309
	.half	1
	.byte	90
	.word	.L986-.L309,.L987-.L309
	.half	1
	.byte	90
	.word	.L989-.L309,.L990-.L309
	.half	1
	.byte	90
	.word	.L991-.L309,.L992-.L309
	.half	1
	.byte	90
	.word	.L995-.L309,.L601-.L309
	.half	1
	.byte	90
	.word	0,0
.L607:
	.word	-1,.L309,.L976-.L309,.L975-.L309
	.half	1
	.byte	88
	.word	.L299-.L309,.L479-.L309
	.half	1
	.byte	88
	.word	.L301-.L309,.L474-.L309
	.half	1
	.byte	88
	.word	.L979-.L309,.L980-.L309
	.half	1
	.byte	88
	.word	.L293-.L309,.L519-.L309
	.half	1
	.byte	88
	.word	.L289-.L309,.L484-.L309
	.half	1
	.byte	88
	.word	.L986-.L309,.L987-.L309
	.half	1
	.byte	88
	.word	.L989-.L309,.L990-.L309
	.half	1
	.byte	88
	.word	.L991-.L309,.L992-.L309
	.half	1
	.byte	88
	.word	.L995-.L309,.L601-.L309
	.half	1
	.byte	88
	.word	0,0
.L604:
	.word	-1,.L309,.L977-.L309,.L975-.L309
	.half	1
	.byte	98
	.word	.L978-.L309,.L975-.L309
	.half	1
	.byte	109
	.word	.L299-.L309,.L479-.L309
	.half	1
	.byte	109
	.word	.L299-.L309,.L479-.L309
	.half	1
	.byte	98
	.word	.L301-.L309,.L474-.L309
	.half	1
	.byte	109
	.word	.L301-.L309,.L474-.L309
	.half	1
	.byte	98
	.word	.L979-.L309,.L981-.L309
	.half	1
	.byte	109
	.word	.L979-.L309,.L144-.L309
	.half	1
	.byte	98
	.word	.L982-.L309,.L983-.L309
	.half	1
	.byte	101
	.word	0,0
.L602:
	.word	-1,.L309,0,.L968-.L309
	.half	1
	.byte	100
	.word	.L969-.L309,.L968-.L309
	.half	1
	.byte	108
	.word	.L299-.L309,.L479-.L309
	.half	1
	.byte	100
	.word	.L299-.L309,.L479-.L309
	.half	1
	.byte	108
	.word	.L971-.L309,.L972-.L309
	.half	1
	.byte	100
	.word	.L301-.L309,.L761-.L309
	.half	1
	.byte	100
	.word	.L301-.L309,.L474-.L309
	.half	1
	.byte	108
	.word	.L971-.L309,.L973-.L309
	.half	1
	.byte	108
	.word	.L974-.L309,.L975-.L309
	.half	1
	.byte	108
	.word	.L979-.L309,.L980-.L309
	.half	1
	.byte	108
	.word	.L985-.L309,.L983-.L309
	.half	1
	.byte	100
	.word	.L293-.L309,.L519-.L309
	.half	1
	.byte	108
	.word	.L289-.L309,.L484-.L309
	.half	1
	.byte	108
	.word	.L986-.L309,.L987-.L309
	.half	1
	.byte	108
	.word	.L989-.L309,.L990-.L309
	.half	1
	.byte	108
	.word	.L991-.L309,.L992-.L309
	.half	1
	.byte	108
	.word	.L995-.L309,.L601-.L309
	.half	1
	.byte	108
	.word	0,0
.L605:
	.word	-1,.L309,.L983-.L309,.L980-.L309
	.half	1
	.byte	98
	.word	.L981-.L309,.L980-.L309
	.half	1
	.byte	109
	.word	.L145-.L309,.L987-.L309
	.half	1
	.byte	109
	.word	.L145-.L309,.L988-.L309
	.half	1
	.byte	98
	.word	.L299-.L309,.L479-.L309
	.half	1
	.byte	109
	.word	.L301-.L309,.L474-.L309
	.half	1
	.byte	109
	.word	.L989-.L309,.L990-.L309
	.half	1
	.byte	109
	.word	.L991-.L309,.L992-.L309
	.half	1
	.byte	109
	.word	.L995-.L309,.L601-.L309
	.half	1
	.byte	109
	.word	0,0
.L308:
	.word	-1,.L309,0,.L967-.L309
	.half	2
	.byte	138,0
	.word	.L967-.L309,.L145-.L309
	.half	2
	.byte	138,16
	.word	.L145-.L309,.L145-.L309
	.half	2
	.byte	138,0
	.word	.L145-.L309,.L601-.L309
	.half	2
	.byte	138,16
	.word	.L601-.L309,.L601-.L309
	.half	2
	.byte	138,0
	.word	0,0
.L608:
	.word	-1,.L309,.L993-.L309,.L994-.L309
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_keepalive')
	.sect	'.debug_loc'
.L622:
	.word	0,0
.L623:
	.word	-1,.L343,.L1165-.L343,.L1166-.L343
	.half	1
	.byte	98
	.word	.L1167-.L343,.L620-.L343
	.half	1
	.byte	111
	.word	.L1166-.L343,.L1169-.L343
	.half	1
	.byte	101
	.word	.L1171-.L343,.L620-.L343
	.half	1
	.byte	101
	.word	0,0
.L621:
	.word	-1,.L343,0,.L1160-.L343
	.half	1
	.byte	100
	.word	.L1161-.L343,.L1160-.L343
	.half	1
	.byte	108
	.word	.L299-.L343,.L479-.L343
	.half	1
	.byte	100
	.word	.L299-.L343,.L479-.L343
	.half	1
	.byte	108
	.word	.L1162-.L343,.L1163-.L343
	.half	1
	.byte	100
	.word	.L301-.L343,.L761-.L343
	.half	1
	.byte	100
	.word	.L301-.L343,.L474-.L343
	.half	1
	.byte	108
	.word	.L1162-.L343,.L620-.L343
	.half	1
	.byte	108
	.word	.L1164-.L343,.L1165-.L343
	.half	1
	.byte	100
	.word	.L1168-.L343,.L1169-.L343
	.half	1
	.byte	100
	.word	.L1170-.L343,.L620-.L343
	.half	1
	.byte	100
	.word	.L1172-.L343,.L620-.L343
	.half	1
	.byte	102
	.word	0,0
.L342:
	.word	-1,.L343,0,.L1159-.L343
	.half	2
	.byte	138,0
	.word	.L1159-.L343,.L263-.L343
	.half	2
	.byte	138,16
	.word	.L263-.L343,.L263-.L343
	.half	2
	.byte	138,0
	.word	.L263-.L343,.L620-.L343
	.half	2
	.byte	138,16
	.word	.L620-.L343,.L620-.L343
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_output')
	.sect	'.debug_loc'
.L578:
	.word	-1,.L311,.L1021-.L311,.L198-.L311
	.half	1
	.byte	111
	.word	0,0
.L571:
	.word	-1,.L311,.L293-.L311,.L519-.L311
	.half	1
	.byte	82
	.word	.L1014-.L311,.L1017-.L311
	.half	1
	.byte	82
	.word	0,0
.L573:
	.word	-1,.L311,.L1003-.L311,.L1005-.L311
	.half	1
	.byte	98
	.word	.L1006-.L311,.L163-.L311
	.half	2
	.byte	145,124
	.word	.L1007-.L311,.L164-.L311
	.half	1
	.byte	111
	.word	.L297-.L311,.L509-.L311
	.half	2
	.byte	145,124
	.word	.L168-.L311,.L1009-.L311
	.half	2
	.byte	145,124
	.word	.L299-.L311,.L479-.L311
	.half	2
	.byte	145,124
	.word	.L301-.L311,.L474-.L311
	.half	2
	.byte	145,124
	.word	.L1016-.L311,.L1014-.L311
	.half	1
	.byte	102
	.word	.L293-.L311,.L519-.L311
	.half	2
	.byte	145,124
	.word	.L313-.L311,.L504-.L311
	.half	2
	.byte	145,124
	.word	.L1018-.L311,.L172-.L311
	.half	2
	.byte	145,124
	.word	.L305-.L311,.L494-.L311
	.half	2
	.byte	145,124
	.word	0,0
.L564:
	.word	-1,.L311,0,.L997-.L311
	.half	1
	.byte	100
	.word	.L998-.L311,.L997-.L311
	.half	1
	.byte	108
	.word	.L299-.L311,.L479-.L311
	.half	1
	.byte	108
	.word	.L299-.L311,.L479-.L311
	.half	1
	.byte	100
	.word	.L999-.L311,.L1000-.L311
	.half	1
	.byte	100
	.word	.L301-.L311,.L474-.L311
	.half	1
	.byte	108
	.word	.L301-.L311,.L761-.L311
	.half	1
	.byte	100
	.word	.L999-.L311,.L1001-.L311
	.half	1
	.byte	108
	.word	.L1002-.L311,.L1003-.L311
	.half	1
	.byte	100
	.word	.L1004-.L311,.L1003-.L311
	.half	1
	.byte	101
	.word	.L1008-.L311,.L168-.L311
	.half	1
	.byte	100
	.word	.L297-.L311,.L509-.L311
	.half	1
	.byte	108
	.word	.L1010-.L311,.L1009-.L311
	.half	1
	.byte	108
	.word	.L1015-.L311,.L1014-.L311
	.half	1
	.byte	101
	.word	.L293-.L311,.L519-.L311
	.half	1
	.byte	108
	.word	.L313-.L311,.L504-.L311
	.half	1
	.byte	108
	.word	.L305-.L311,.L494-.L311
	.half	1
	.byte	108
	.word	.L1018-.L311,.L563-.L311
	.half	1
	.byte	108
	.word	0,0
.L566:
	.word	-1,.L311,.L297-.L311,.L509-.L311
	.half	1
	.byte	109
	.word	.L1011-.L311,.L1009-.L311
	.half	1
	.byte	109
	.word	.L299-.L311,.L479-.L311
	.half	1
	.byte	109
	.word	.L301-.L311,.L474-.L311
	.half	1
	.byte	109
	.word	.L1013-.L311,.L1014-.L311
	.half	1
	.byte	100
	.word	.L293-.L311,.L519-.L311
	.half	1
	.byte	109
	.word	.L313-.L311,.L504-.L311
	.half	1
	.byte	109
	.word	.L1022-.L311,.L202-.L311
	.half	1
	.byte	100
	.word	.L305-.L311,.L494-.L311
	.half	1
	.byte	109
	.word	.L1018-.L311,.L162-.L311
	.half	1
	.byte	109
	.word	0,0
.L570:
	.word	-1,.L311,.L313-.L311,.L504-.L311
	.half	1
	.byte	82
	.word	.L1019-.L311,.L1020-.L311
	.half	1
	.byte	82
	.word	0,0
.L310:
	.word	-1,.L311,0,.L996-.L311
	.half	2
	.byte	138,0
	.word	.L996-.L311,.L166-.L311
	.half	2
	.byte	138,16
	.word	.L166-.L311,.L166-.L311
	.half	2
	.byte	138,0
	.word	.L166-.L311,.L168-.L311
	.half	2
	.byte	138,16
	.word	.L168-.L311,.L168-.L311
	.half	2
	.byte	138,0
	.word	.L168-.L311,.L191-.L311
	.half	2
	.byte	138,16
	.word	.L191-.L311,.L191-.L311
	.half	2
	.byte	138,0
	.word	.L191-.L311,.L563-.L311
	.half	2
	.byte	138,16
	.word	.L563-.L311,.L563-.L311
	.half	2
	.byte	138,0
	.word	0,0
.L567:
	.word	-1,.L311,.L297-.L311,.L509-.L311
	.half	1
	.byte	110
	.word	.L1012-.L311,.L1009-.L311
	.half	1
	.byte	110
	.word	.L299-.L311,.L479-.L311
	.half	1
	.byte	110
	.word	.L301-.L311,.L474-.L311
	.half	1
	.byte	110
	.word	.L293-.L311,.L519-.L311
	.half	1
	.byte	110
	.word	.L313-.L311,.L504-.L311
	.half	1
	.byte	110
	.word	.L1018-.L311,.L172-.L311
	.half	1
	.byte	110
	.word	.L305-.L311,.L494-.L311
	.half	1
	.byte	110
	.word	0,0
.L569:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_output_alloc_header')
	.sect	'.debug_loc'
.L703:
	.word	-1,.L333,0,.L1090-.L333
	.half	1
	.byte	85
	.word	.L1094-.L333,.L1092-.L333
	.half	5
	.byte	144,32,157,32,0
	.word	.L1091-.L333,.L1092-.L333
	.half	1
	.byte	86
	.word	0,0
.L702:
	.word	-1,.L333,0,.L1091-.L333
	.half	1
	.byte	84
	.word	0,0
.L705:
	.word	-1,.L333,.L1092-.L333,.L700-.L333
	.half	1
	.byte	98
	.word	0,0
.L701:
	.word	-1,.L333,0,.L1092-.L333
	.half	1
	.byte	100
	.word	.L1093-.L333,.L700-.L333
	.half	1
	.byte	111
	.word	0,0
.L704:
	.word	-1,.L333,0,.L1091-.L333
	.half	1
	.byte	86
	.word	.L1095-.L333,.L1092-.L333
	.half	1
	.byte	87
	.word	0,0
.L332:
	.word	-1,.L333,0,.L1089-.L333
	.half	2
	.byte	138,0
	.word	.L1089-.L333,.L700-.L333
	.half	2
	.byte	138,16
	.word	.L700-.L333,.L700-.L333
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_output_alloc_header_common')
	.sect	'.debug_loc'
.L690:
	.word	-1,.L331,0,.L1076-.L331
	.half	1
	.byte	84
	.word	.L1086-.L331,.L1087-.L331
	.half	1
	.byte	88
	.word	0,0
.L692:
	.word	-1,.L331,0,.L1077-.L331
	.half	1
	.byte	86
	.word	0,0
.L695:
	.word	-1,.L331,0,.L1078-.L331
	.half	2
	.byte	145,4
	.word	.L1079-.L331,.L1078-.L331
	.half	1
	.byte	91
	.word	.L299-.L331,.L479-.L331
	.half	2
	.byte	145,4
	.word	.L299-.L331,.L479-.L331
	.half	1
	.byte	91
	.word	.L301-.L331,.L474-.L331
	.half	2
	.byte	145,4
	.word	.L301-.L331,.L474-.L331
	.half	1
	.byte	91
	.word	.L1083-.L331,.L689-.L331
	.half	2
	.byte	145,4
	.word	.L1083-.L331,.L689-.L331
	.half	1
	.byte	91
	.word	0,0
.L696:
	.word	-1,.L331,0,.L1078-.L331
	.half	2
	.byte	145,8
	.word	.L1077-.L331,.L1078-.L331
	.half	1
	.byte	92
	.word	.L299-.L331,.L479-.L331
	.half	2
	.byte	145,8
	.word	.L299-.L331,.L479-.L331
	.half	1
	.byte	92
	.word	.L301-.L331,.L474-.L331
	.half	2
	.byte	145,8
	.word	.L301-.L331,.L474-.L331
	.half	1
	.byte	92
	.word	.L1083-.L331,.L689-.L331
	.half	2
	.byte	145,8
	.word	.L1083-.L331,.L689-.L331
	.half	1
	.byte	92
	.word	0,0
.L691:
	.word	-1,.L331,0,.L1079-.L331
	.half	1
	.byte	85
	.word	0,0
.L699:
	.word	-1,.L331,.L1080-.L331,.L1078-.L331
	.half	1
	.byte	98
	.word	.L1082-.L331,.L1078-.L331
	.half	1
	.byte	108
	.word	.L299-.L331,.L479-.L331
	.half	1
	.byte	108
	.word	.L299-.L331,.L479-.L331
	.half	1
	.byte	98
	.word	.L301-.L331,.L474-.L331
	.half	1
	.byte	108
	.word	.L301-.L331,.L474-.L331
	.half	1
	.byte	98
	.word	.L1083-.L331,.L689-.L331
	.half	1
	.byte	108
	.word	.L1083-.L331,.L244-.L331
	.half	1
	.byte	98
	.word	.L1088-.L331,.L689-.L331
	.half	1
	.byte	98
	.word	0,0
.L693:
	.word	-1,.L331,0,.L1080-.L331
	.half	1
	.byte	87
	.word	.L1085-.L331,.L1086-.L331
	.half	1
	.byte	89
	.word	0,0
.L694:
	.word	-1,.L331,0,.L1078-.L331
	.half	2
	.byte	145,0
	.word	.L1076-.L331,.L1078-.L331
	.half	1
	.byte	90
	.word	.L299-.L331,.L479-.L331
	.half	1
	.byte	90
	.word	.L299-.L331,.L479-.L331
	.half	2
	.byte	145,0
	.word	.L301-.L331,.L474-.L331
	.half	1
	.byte	90
	.word	.L301-.L331,.L474-.L331
	.half	2
	.byte	145,0
	.word	.L1083-.L331,.L689-.L331
	.half	1
	.byte	90
	.word	.L1083-.L331,.L689-.L331
	.half	2
	.byte	145,0
	.word	0,0
.L330:
	.word	-1,.L331,0,.L1075-.L331
	.half	2
	.byte	138,0
	.word	.L1075-.L331,.L689-.L331
	.half	2
	.byte	138,16
	.word	.L689-.L331,.L689-.L331
	.half	2
	.byte	138,0
	.word	0,0
.L698:
	.word	-1,.L331,.L1084-.L331,.L243-.L331
	.half	1
	.byte	111
	.word	0,0
.L697:
	.word	-1,.L331,0,.L1078-.L331
	.half	2
	.byte	145,12
	.word	.L1081-.L331,.L1078-.L331
	.half	1
	.byte	93
	.word	.L299-.L331,.L479-.L331
	.half	1
	.byte	93
	.word	.L299-.L331,.L479-.L331
	.half	2
	.byte	145,12
	.word	.L301-.L331,.L474-.L331
	.half	1
	.byte	93
	.word	.L301-.L331,.L474-.L331
	.half	2
	.byte	145,12
	.word	.L1083-.L331,.L689-.L331
	.half	1
	.byte	93
	.word	.L1083-.L331,.L689-.L331
	.half	2
	.byte	145,12
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_output_control_segment')
	.sect	'.debug_loc'
.L715:
	.word	-1,.L337,0,.L1097-.L337
	.half	1
	.byte	103
	.word	.L1104-.L337,.L711-.L337
	.half	1
	.byte	110
	.word	.L1097-.L337,.L1099-.L337
	.half	1
	.byte	102
	.word	.L1110-.L337,.L1105-.L337
	.half	1
	.byte	102
	.word	.L1116-.L337,.L1114-.L337
	.half	1
	.byte	102
	.word	0,0
.L716:
	.word	-1,.L337,.L1114-.L337,.L249-.L337
	.half	1
	.byte	82
	.word	.L249-.L337,.L711-.L337
	.half	1
	.byte	95
	.word	0,0
.L717:
	.word	-1,.L337,.L1099-.L337,.L1105-.L337
	.half	1
	.byte	98
	.word	.L1106-.L337,.L711-.L337
	.half	2
	.byte	145,124
	.word	.L1118-.L337,.L1114-.L337
	.half	1
	.byte	103
	.word	0,0
.L713:
	.word	-1,.L337,0,.L1098-.L337
	.half	1
	.byte	101
	.word	.L1102-.L337,.L711-.L337
	.half	1
	.byte	109
	.word	.L1108-.L337,.L1105-.L337
	.half	1
	.byte	100
	.word	.L1115-.L337,.L1114-.L337
	.half	1
	.byte	100
	.word	.L1119-.L337,.L1120-.L337
	.half	1
	.byte	100
	.word	0,0
.L712:
	.word	-1,.L337,0,.L1099-.L337
	.half	1
	.byte	100
	.word	.L1100-.L337,.L1101-.L337
	.half	1
	.byte	111
	.word	0,0
.L714:
	.word	-1,.L337,0,.L1097-.L337
	.half	1
	.byte	102
	.word	.L1103-.L337,.L711-.L337
	.half	2
	.byte	145,120
	.word	.L1098-.L337,.L1099-.L337
	.half	1
	.byte	101
	.word	.L1109-.L337,.L1105-.L337
	.half	1
	.byte	101
	.word	.L1117-.L337,.L1114-.L337
	.half	1
	.byte	101
	.word	0,0
.L336:
	.word	-1,.L337,0,.L1096-.L337
	.half	2
	.byte	138,0
	.word	.L1096-.L337,.L711-.L337
	.half	2
	.byte	138,8
	.word	.L711-.L337,.L711-.L337
	.half	2
	.byte	138,0
	.word	0,0
.L721:
	.word	-1,.L337,.L1107-.L337,.L249-.L337
	.half	1
	.byte	108
	.word	0,0
.L719:
	.word	-1,.L337,.L1112-.L337,.L250-.L337
	.half	1
	.byte	85
	.word	.L251-.L337,.L1114-.L337
	.half	1
	.byte	85
	.word	0,0
.L718:
	.word	-1,.L337,.L1111-.L337,.L250-.L337
	.half	1
	.byte	84
	.word	.L1113-.L337,.L1114-.L337
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_output_fill_options')
	.sect	'.debug_loc'
.L710:
	.word	-1,.L335,0,.L706-.L335
	.half	1
	.byte	85
	.word	0,0
.L709:
	.word	-1,.L335,0,.L706-.L335
	.half	1
	.byte	84
	.word	0,0
.L708:
	.word	-1,.L335,0,.L706-.L335
	.half	1
	.byte	101
	.word	0,0
.L707:
	.word	-1,.L335,0,.L706-.L335
	.half	1
	.byte	100
	.word	0,0
.L334:
	.word	-1,.L335,0,.L706-.L335
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_output_segment')
	.sect	'.debug_loc'
.L650:
	.word	0,0
.L651:
	.word	-1,.L317,.L1033-.L317,.L1026-.L317
	.half	5
	.byte	144,32,157,32,0
	.word	.L283-.L317,.L489-.L317
	.half	5
	.byte	144,32,157,32,0
	.word	.L301-.L317,.L474-.L317
	.half	5
	.byte	144,32,157,32,0
	.word	.L1034-.L317,.L213-.L317
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L655:
	.word	-1,.L317,.L1031-.L317,.L1032-.L317
	.half	1
	.byte	82
	.word	0,0
.L649:
	.word	-1,.L317,0,.L1024-.L317
	.half	1
	.byte	102
	.word	.L1028-.L317,.L1026-.L317
	.half	1
	.byte	110
	.word	.L1030-.L317,.L1031-.L317
	.half	1
	.byte	100
	.word	.L283-.L317,.L489-.L317
	.half	1
	.byte	110
	.word	.L301-.L317,.L474-.L317
	.half	1
	.byte	110
	.word	.L1034-.L317,.L646-.L317
	.half	1
	.byte	110
	.word	.L1038-.L317,.L646-.L317
	.half	1
	.byte	103
	.word	0,0
.L653:
	.word	-1,.L317,.L1029-.L317,.L1026-.L317
	.half	1
	.byte	108
	.word	.L283-.L317,.L489-.L317
	.half	1
	.byte	108
	.word	.L301-.L317,.L474-.L317
	.half	1
	.byte	108
	.word	.L1034-.L317,.L1035-.L317
	.half	1
	.byte	108
	.word	0,0
.L648:
	.word	-1,.L317,0,.L1024-.L317
	.half	1
	.byte	101
	.word	.L1027-.L317,.L1026-.L317
	.half	1
	.byte	109
	.word	.L283-.L317,.L489-.L317
	.half	1
	.byte	109
	.word	.L301-.L317,.L474-.L317
	.half	1
	.byte	109
	.word	.L1034-.L317,.L646-.L317
	.half	1
	.byte	109
	.word	.L1036-.L317,.L1037-.L317
	.half	1
	.byte	101
	.word	.L1039-.L317,.L646-.L317
	.half	1
	.byte	101
	.word	0,0
.L647:
	.word	-1,.L317,0,.L1024-.L317
	.half	1
	.byte	100
	.word	.L1025-.L317,.L1026-.L317
	.half	1
	.byte	111
	.word	.L283-.L317,.L489-.L317
	.half	1
	.byte	111
	.word	.L301-.L317,.L474-.L317
	.half	1
	.byte	111
	.word	.L1034-.L317,.L646-.L317
	.half	1
	.byte	111
	.word	0,0
.L316:
	.word	-1,.L317,0,.L1023-.L317
	.half	2
	.byte	138,0
	.word	.L1023-.L317,.L208-.L317
	.half	2
	.byte	138,16
	.word	.L208-.L317,.L208-.L317
	.half	2
	.byte	138,0
	.word	.L208-.L317,.L646-.L317
	.half	2
	.byte	138,16
	.word	.L646-.L317,.L646-.L317
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_output_segment_busy')
	.sect	'.debug_loc'
.L688:
	.word	-1,.L315,0,.L686-.L315
	.half	1
	.byte	100
	.word	0,0
.L314:
	.word	-1,.L315,0,.L686-.L315
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_pbuf_prealloc')
	.sect	'.debug_loc'
.L680:
	.word	-1,.L285,.L12-.L285,.L746-.L285
	.half	1
	.byte	85
	.word	0,0
.L677:
	.word	-1,.L285,0,.L746-.L285
	.half	1
	.byte	87
	.word	0,0
.L678:
	.word	-1,.L285,0,.L747-.L285
	.half	2
	.byte	145,0
	.word	.L749-.L285,.L750-.L285
	.half	1
	.byte	95
	.word	.L283-.L285,.L489-.L285
	.half	2
	.byte	145,0
	.word	.L301-.L285,.L474-.L285
	.half	2
	.byte	145,0
	.word	.L754-.L285,.L669-.L285
	.half	2
	.byte	145,0
	.word	0,0
.L671:
	.word	-1,.L285,0,.L746-.L285
	.half	1
	.byte	84
	.word	0,0
.L672:
	.word	-1,.L285,0,.L12-.L285
	.half	1
	.byte	85
	.word	.L748-.L285,.L747-.L285
	.half	1
	.byte	88
	.word	.L283-.L285,.L489-.L285
	.half	1
	.byte	88
	.word	.L301-.L285,.L474-.L285
	.half	1
	.byte	88
	.word	.L754-.L285,.L669-.L285
	.half	1
	.byte	88
	.word	0,0
.L673:
	.word	-1,.L285,0,.L746-.L285
	.half	1
	.byte	86
	.word	0,0
.L675:
	.word	-1,.L285,0,.L746-.L285
	.half	1
	.byte	100
	.word	.L748-.L285,.L747-.L285
	.half	1
	.byte	108
	.word	.L283-.L285,.L489-.L285
	.half	1
	.byte	108
	.word	.L301-.L285,.L474-.L285
	.half	1
	.byte	108
	.word	.L754-.L285,.L669-.L285
	.half	1
	.byte	108
	.word	0,0
.L679:
	.word	-1,.L285,.L746-.L285,.L751-.L285
	.half	1
	.byte	98
	.word	.L752-.L285,.L747-.L285
	.half	1
	.byte	111
	.word	.L18-.L285,.L753-.L285
	.half	1
	.byte	98
	.word	.L283-.L285,.L489-.L285
	.half	1
	.byte	111
	.word	.L301-.L285,.L474-.L285
	.half	1
	.byte	111
	.word	.L754-.L285,.L669-.L285
	.half	1
	.byte	111
	.word	.L755-.L285,.L669-.L285
	.half	1
	.byte	98
	.word	0,0
.L676:
	.word	-1,.L285,0,.L746-.L285
	.half	1
	.byte	101
	.word	0,0
.L284:
	.word	-1,.L285,0,.L745-.L285
	.half	2
	.byte	138,0
	.word	.L745-.L285,.L18-.L285
	.half	2
	.byte	138,16
	.word	.L18-.L285,.L18-.L285
	.half	2
	.byte	138,0
	.word	.L18-.L285,.L669-.L285
	.half	2
	.byte	138,16
	.word	.L669-.L285,.L669-.L285
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_rexmit')
	.sect	'.debug_loc'
.L585:
	.word	-1,.L327,.L1066-.L327,.L1065-.L327
	.half	1
	.byte	110
	.word	.L305-.L327,.L494-.L327
	.half	1
	.byte	110
	.word	.L323-.L327,.L499-.L327
	.half	1
	.byte	110
	.word	.L1067-.L327,.L583-.L327
	.half	1
	.byte	110
	.word	0,0
.L584:
	.word	-1,.L327,0,.L1061-.L327
	.half	1
	.byte	100
	.word	.L1062-.L327,.L1061-.L327
	.half	1
	.byte	108
	.word	.L299-.L327,.L479-.L327
	.half	1
	.byte	108
	.word	.L299-.L327,.L479-.L327
	.half	1
	.byte	100
	.word	.L1063-.L327,.L1064-.L327
	.half	1
	.byte	100
	.word	.L301-.L327,.L474-.L327
	.half	1
	.byte	108
	.word	.L301-.L327,.L761-.L327
	.half	1
	.byte	100
	.word	.L1063-.L327,.L1065-.L327
	.half	1
	.byte	108
	.word	.L305-.L327,.L494-.L327
	.half	1
	.byte	108
	.word	.L323-.L327,.L499-.L327
	.half	1
	.byte	108
	.word	.L1067-.L327,.L583-.L327
	.half	1
	.byte	108
	.word	0,0
.L326:
	.word	-1,.L327,0,.L1060-.L327
	.half	2
	.byte	138,0
	.word	.L1060-.L327,.L230-.L327
	.half	2
	.byte	138,16
	.word	.L230-.L327,.L230-.L327
	.half	2
	.byte	138,0
	.word	.L230-.L327,.L583-.L327
	.half	2
	.byte	138,16
	.word	.L583-.L327,.L583-.L327
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_rexmit_fast')
	.sect	'.debug_loc'
.L595:
	.word	-1,.L329,0,.L1069-.L329
	.half	1
	.byte	100
	.word	.L1070-.L329,.L1069-.L329
	.half	1
	.byte	108
	.word	.L299-.L329,.L479-.L329
	.half	1
	.byte	108
	.word	.L299-.L329,.L479-.L329
	.half	1
	.byte	100
	.word	.L1071-.L329,.L1072-.L329
	.half	1
	.byte	100
	.word	.L301-.L329,.L474-.L329
	.half	1
	.byte	108
	.word	.L301-.L329,.L761-.L329
	.half	1
	.byte	100
	.word	.L1071-.L329,.L594-.L329
	.half	1
	.byte	108
	.word	.L1073-.L329,.L1074-.L329
	.half	1
	.byte	100
	.word	0,0
.L328:
	.word	-1,.L329,0,.L1068-.L329
	.half	2
	.byte	138,0
	.word	.L1068-.L329,.L594-.L329
	.half	2
	.byte	138,16
	.word	.L594-.L329,.L594-.L329
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_rexmit_rto')
	.sect	'.debug_loc'
.L593:
	.word	-1,.L325,0,.L1053-.L325
	.half	1
	.byte	100
	.word	.L1054-.L325,.L1053-.L325
	.half	1
	.byte	108
	.word	.L299-.L325,.L479-.L325
	.half	1
	.byte	108
	.word	.L299-.L325,.L479-.L325
	.half	1
	.byte	100
	.word	.L1055-.L325,.L1056-.L325
	.half	1
	.byte	100
	.word	.L301-.L325,.L474-.L325
	.half	1
	.byte	108
	.word	.L301-.L325,.L761-.L325
	.half	1
	.byte	100
	.word	.L1055-.L325,.L592-.L325
	.half	1
	.byte	108
	.word	.L1057-.L325,.L1058-.L325
	.half	1
	.byte	100
	.word	.L1059-.L325,.L227-.L325
	.half	1
	.byte	100
	.word	0,0
.L324:
	.word	-1,.L325,0,.L1052-.L325
	.half	2
	.byte	138,0
	.word	.L1052-.L325,.L227-.L325
	.half	2
	.byte	138,16
	.word	.L227-.L325,.L227-.L325
	.half	2
	.byte	138,0
	.word	.L227-.L325,.L592-.L325
	.half	2
	.byte	138,16
	.word	.L592-.L325,.L592-.L325
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_rexmit_rto_commit')
	.sect	'.debug_loc'
.L590:
	.word	-1,.L321,0,.L1047-.L321
	.half	1
	.byte	100
	.word	.L1048-.L321,.L1047-.L321
	.half	1
	.byte	108
	.word	.L299-.L321,.L479-.L321
	.half	1
	.byte	108
	.word	.L299-.L321,.L479-.L321
	.half	1
	.byte	100
	.word	.L1049-.L321,.L1050-.L321
	.half	1
	.byte	100
	.word	.L301-.L321,.L474-.L321
	.half	1
	.byte	108
	.word	.L301-.L321,.L761-.L321
	.half	1
	.byte	100
	.word	.L323-.L321,.L225-.L321
	.half	1
	.byte	108
	.word	.L1049-.L321,.L589-.L321
	.half	1
	.byte	108
	.word	.L1051-.L321,.L589-.L321
	.half	1
	.byte	100
	.word	0,0
.L320:
	.word	-1,.L321,0,.L1046-.L321
	.half	2
	.byte	138,0
	.word	.L1046-.L321,.L589-.L321
	.half	2
	.byte	138,16
	.word	.L589-.L321,.L589-.L321
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_rexmit_rto_prepare')
	.sect	'.debug_loc'
.L587:
	.word	-1,.L319,0,.L1041-.L319
	.half	1
	.byte	100
	.word	.L1042-.L319,.L1041-.L319
	.half	1
	.byte	108
	.word	.L299-.L319,.L479-.L319
	.half	1
	.byte	108
	.word	.L299-.L319,.L479-.L319
	.half	1
	.byte	100
	.word	.L1043-.L319,.L1044-.L319
	.half	1
	.byte	100
	.word	.L301-.L319,.L474-.L319
	.half	1
	.byte	108
	.word	.L301-.L319,.L761-.L319
	.half	1
	.byte	100
	.word	.L1043-.L319,.L586-.L319
	.half	1
	.byte	108
	.word	0,0
.L588:
	.word	-1,.L319,.L1045-.L319,.L586-.L319
	.half	1
	.byte	109
	.word	0,0
.L318:
	.word	-1,.L319,0,.L1040-.L319
	.half	2
	.byte	138,0
	.word	.L1040-.L319,.L220-.L319
	.half	2
	.byte	138,16
	.word	.L220-.L319,.L220-.L319
	.half	2
	.byte	138,0
	.word	.L220-.L319,.L586-.L319
	.half	2
	.byte	138,16
	.word	.L586-.L319,.L586-.L319
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_route')
	.sect	'.debug_loc'
.L659:
	.word	-1,.L279,0,.L656-.L279
	.half	1
	.byte	102
	.word	.L722-.L279,.L656-.L279
	.half	1
	.byte	100
	.word	0,0
.L657:
	.word	-1,.L279,0,.L722-.L279
	.half	1
	.byte	100
	.word	0,0
.L658:
	.word	-1,.L279,0,.L656-.L279
	.half	1
	.byte	101
	.word	0,0
.L278:
	.word	-1,.L279,0,.L656-.L279
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_rst')
	.sect	'.debug_loc'
.L613:
	.word	-1,.L339,0,.L1122-.L339
	.half	1
	.byte	85
	.word	.L299-.L339,.L479-.L339
	.half	1
	.byte	85
	.word	.L301-.L339,.L474-.L339
	.half	1
	.byte	85
	.word	.L1126-.L339,.L253-.L339
	.half	1
	.byte	85
	.word	.L1133-.L339,.L1134-.L339
	.half	1
	.byte	89
	.word	.L1134-.L339,.L1135-.L339
	.half	1
	.byte	84
	.word	0,0
.L615:
	.word	-1,.L339,0,.L1122-.L339
	.half	1
	.byte	101
	.word	.L1124-.L339,.L1122-.L339
	.half	1
	.byte	109
	.word	.L299-.L339,.L479-.L339
	.half	1
	.byte	109
	.word	.L299-.L339,.L479-.L339
	.half	1
	.byte	101
	.word	.L301-.L339,.L474-.L339
	.half	1
	.byte	109
	.word	.L301-.L339,.L474-.L339
	.half	1
	.byte	101
	.word	.L1126-.L339,.L1128-.L339
	.half	1
	.byte	109
	.word	.L1126-.L339,.L253-.L339
	.half	1
	.byte	101
	.word	.L1129-.L339,.L609-.L339
	.half	1
	.byte	109
	.word	.L1142-.L339,.L255-.L339
	.half	1
	.byte	102
	.word	0,0
.L617:
	.word	-1,.L339,0,.L1122-.L339
	.half	1
	.byte	86
	.word	.L299-.L339,.L479-.L339
	.half	1
	.byte	86
	.word	.L301-.L339,.L474-.L339
	.half	1
	.byte	86
	.word	.L1126-.L339,.L253-.L339
	.half	1
	.byte	86
	.word	.L1130-.L339,.L1131-.L339
	.half	1
	.byte	90
	.word	0,0
.L619:
	.word	-1,.L339,.L1135-.L339,.L1136-.L339
	.half	1
	.byte	98
	.word	.L1137-.L339,.L609-.L339
	.half	1
	.byte	111
	.word	.L1136-.L339,.L1139-.L339
	.half	1
	.byte	101
	.word	.L1141-.L339,.L255-.L339
	.half	1
	.byte	101
	.word	.L255-.L339,.L609-.L339
	.half	1
	.byte	98
	.word	0,0
.L611:
	.word	-1,.L339,0,.L1122-.L339
	.half	1
	.byte	100
	.word	.L1123-.L339,.L1122-.L339
	.half	1
	.byte	108
	.word	.L299-.L339,.L479-.L339
	.half	1
	.byte	108
	.word	.L299-.L339,.L479-.L339
	.half	1
	.byte	100
	.word	.L1126-.L339,.L1127-.L339
	.half	1
	.byte	100
	.word	.L301-.L339,.L474-.L339
	.half	1
	.byte	108
	.word	.L301-.L339,.L761-.L339
	.half	1
	.byte	100
	.word	.L1126-.L339,.L1128-.L339
	.half	1
	.byte	108
	.word	.L1129-.L339,.L609-.L339
	.half	1
	.byte	108
	.word	.L1138-.L339,.L1139-.L339
	.half	1
	.byte	100
	.word	.L1140-.L339,.L255-.L339
	.half	1
	.byte	100
	.word	0,0
.L616:
	.word	-1,.L339,0,.L1122-.L339
	.half	1
	.byte	102
	.word	.L1125-.L339,.L1122-.L339
	.half	1
	.byte	110
	.word	.L299-.L339,.L479-.L339
	.half	1
	.byte	110
	.word	.L299-.L339,.L479-.L339
	.half	1
	.byte	102
	.word	.L301-.L339,.L474-.L339
	.half	1
	.byte	110
	.word	.L301-.L339,.L474-.L339
	.half	1
	.byte	102
	.word	.L1126-.L339,.L1128-.L339
	.half	1
	.byte	110
	.word	.L1126-.L339,.L253-.L339
	.half	1
	.byte	102
	.word	.L1129-.L339,.L609-.L339
	.half	1
	.byte	110
	.word	.L1143-.L339,.L255-.L339
	.half	1
	.byte	103
	.word	0,0
.L618:
	.word	-1,.L339,0,.L1122-.L339
	.half	1
	.byte	87
	.word	.L299-.L339,.L479-.L339
	.half	1
	.byte	87
	.word	.L301-.L339,.L474-.L339
	.half	1
	.byte	87
	.word	.L1126-.L339,.L253-.L339
	.half	1
	.byte	87
	.word	.L1131-.L339,.L1132-.L339
	.half	1
	.byte	91
	.word	0,0
.L612:
	.word	-1,.L339,0,.L1122-.L339
	.half	1
	.byte	84
	.word	.L299-.L339,.L479-.L339
	.half	1
	.byte	84
	.word	.L301-.L339,.L474-.L339
	.half	1
	.byte	84
	.word	.L1126-.L339,.L253-.L339
	.half	1
	.byte	84
	.word	.L254-.L339,.L1130-.L339
	.half	1
	.byte	88
	.word	0,0
.L338:
	.word	-1,.L339,0,.L1121-.L339
	.half	2
	.byte	138,0
	.word	.L1121-.L339,.L255-.L339
	.half	2
	.byte	138,16
	.word	.L255-.L339,.L255-.L339
	.half	2
	.byte	138,0
	.word	.L255-.L339,.L609-.L339
	.half	2
	.byte	138,16
	.word	.L609-.L339,.L609-.L339
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_send_empty_ack')
	.sect	'.debug_loc'
.L581:
	.word	-1,.L341,.L1156-.L341,.L258-.L341
	.half	1
	.byte	82
	.word	0,0
.L582:
	.word	-1,.L341,.L1150-.L341,.L260-.L341
	.half	1
	.byte	98
	.word	.L1151-.L341,.L579-.L341
	.half	1
	.byte	108
	.word	.L257-.L341,.L1152-.L341
	.half	1
	.byte	98
	.word	.L1152-.L341,.L1154-.L341
	.half	1
	.byte	101
	.word	.L1157-.L341,.L1156-.L341
	.half	1
	.byte	101
	.word	0,0
.L580:
	.word	-1,.L341,0,.L1145-.L341
	.half	1
	.byte	100
	.word	.L1146-.L341,.L1145-.L341
	.half	1
	.byte	111
	.word	.L283-.L341,.L489-.L341
	.half	1
	.byte	100
	.word	.L283-.L341,.L489-.L341
	.half	1
	.byte	111
	.word	.L1147-.L341,.L1148-.L341
	.half	1
	.byte	100
	.word	.L301-.L341,.L761-.L341
	.half	1
	.byte	100
	.word	.L301-.L341,.L474-.L341
	.half	1
	.byte	111
	.word	.L1147-.L341,.L579-.L341
	.half	1
	.byte	111
	.word	.L1149-.L341,.L1150-.L341
	.half	1
	.byte	100
	.word	.L1153-.L341,.L1154-.L341
	.half	1
	.byte	100
	.word	.L1155-.L341,.L1156-.L341
	.half	1
	.byte	100
	.word	.L1158-.L341,.L1156-.L341
	.half	1
	.byte	102
	.word	0,0
.L340:
	.word	-1,.L341,0,.L1144-.L341
	.half	2
	.byte	138,0
	.word	.L1144-.L341,.L579-.L341
	.half	2
	.byte	138,16
	.word	.L579-.L341,.L579-.L341
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_send_fin')
	.sect	'.debug_loc'
.L600:
	.word	-1,.L307,.L295-.L307,.L514-.L307
	.half	1
	.byte	111
	.word	.L964-.L307,.L965-.L307
	.half	1
	.byte	111
	.word	.L134-.L307,.L596-.L307
	.half	1
	.byte	111
	.word	0,0
.L597:
	.word	-1,.L307,0,.L960-.L307
	.half	1
	.byte	100
	.word	.L961-.L307,.L960-.L307
	.half	1
	.byte	108
	.word	.L299-.L307,.L479-.L307
	.half	1
	.byte	108
	.word	.L299-.L307,.L479-.L307
	.half	1
	.byte	100
	.word	.L962-.L307,.L963-.L307
	.half	1
	.byte	100
	.word	.L301-.L307,.L474-.L307
	.half	1
	.byte	108
	.word	.L301-.L307,.L761-.L307
	.half	1
	.byte	100
	.word	.L295-.L307,.L514-.L307
	.half	1
	.byte	108
	.word	.L962-.L307,.L596-.L307
	.half	1
	.byte	108
	.word	.L966-.L307,.L596-.L307
	.half	1
	.byte	100
	.word	0,0
.L306:
	.word	-1,.L307,0,.L959-.L307
	.half	2
	.byte	138,0
	.word	.L959-.L307,.L137-.L307
	.half	2
	.byte	138,16
	.word	.L137-.L307,.L137-.L307
	.half	2
	.byte	138,0
	.word	.L137-.L307,.L596-.L307
	.half	2
	.byte	138,16
	.word	.L596-.L307,.L596-.L307
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_split_unsent_seg')
	.sect	'.debug_loc'
.L632:
	.word	-1,.L303,.L936-.L303,.L120-.L303
	.half	1
	.byte	90
	.word	.L949-.L303,.L934-.L303
	.half	1
	.byte	86
	.word	.L305-.L303,.L128-.L303
	.half	1
	.byte	90
	.word	.L120-.L303,.L123-.L303
	.half	1
	.byte	90
	.word	.L289-.L303,.L484-.L303
	.half	1
	.byte	90
	.word	.L955-.L303,.L956-.L303
	.half	1
	.byte	90
	.word	.L299-.L303,.L479-.L303
	.half	1
	.byte	90
	.word	.L301-.L303,.L474-.L303
	.half	1
	.byte	90
	.word	.L957-.L303,.L117-.L303
	.half	1
	.byte	90
	.word	0,0
.L631:
	.word	-1,.L303,.L938-.L303,.L939-.L303
	.half	1
	.byte	89
	.word	0,0
.L630:
	.word	-1,.L303,.L940-.L303,.L941-.L303
	.half	1
	.byte	98
	.word	.L942-.L303,.L943-.L303
	.half	1
	.byte	110
	.word	.L949-.L303,.L934-.L303
	.half	1
	.byte	101
	.word	.L120-.L303,.L123-.L303
	.half	1
	.byte	110
	.word	.L289-.L303,.L484-.L303
	.half	1
	.byte	110
	.word	.L955-.L303,.L956-.L303
	.half	1
	.byte	110
	.word	.L299-.L303,.L479-.L303
	.half	1
	.byte	110
	.word	.L301-.L303,.L474-.L303
	.half	1
	.byte	110
	.word	.L957-.L303,.L117-.L303
	.half	1
	.byte	110
	.word	.L958-.L303,.L117-.L303
	.half	1
	.byte	100
	.word	0,0
.L625:
	.word	-1,.L303,0,.L921-.L303
	.half	1
	.byte	100
	.word	.L922-.L303,.L921-.L303
	.half	1
	.byte	108
	.word	.L299-.L303,.L479-.L303
	.half	1
	.byte	108
	.word	.L299-.L303,.L479-.L303
	.half	1
	.byte	100
	.word	.L924-.L303,.L925-.L303
	.half	1
	.byte	100
	.word	.L301-.L303,.L474-.L303
	.half	1
	.byte	108
	.word	.L301-.L303,.L761-.L303
	.half	1
	.byte	100
	.word	.L924-.L303,.L926-.L303
	.half	1
	.byte	108
	.word	.L929-.L303,.L930-.L303
	.half	1
	.byte	108
	.word	.L283-.L303,.L489-.L303
	.half	1
	.byte	108
	.word	.L931-.L303,.L932-.L303
	.half	1
	.byte	108
	.word	.L948-.L303,.L934-.L303
	.half	1
	.byte	100
	.word	.L305-.L303,.L128-.L303
	.half	1
	.byte	108
	.word	.L933-.L303,.L123-.L303
	.half	1
	.byte	108
	.word	.L289-.L303,.L484-.L303
	.half	1
	.byte	108
	.word	.L955-.L303,.L956-.L303
	.half	1
	.byte	108
	.word	.L957-.L303,.L624-.L303
	.half	1
	.byte	108
	.word	0,0
.L635:
	.word	-1,.L303,.L937-.L303,.L120-.L303
	.half	1
	.byte	91
	.word	.L944-.L303,.L945-.L303
	.half	1
	.byte	84
	.word	.L305-.L303,.L128-.L303
	.half	1
	.byte	91
	.word	.L120-.L303,.L123-.L303
	.half	1
	.byte	91
	.word	.L289-.L303,.L484-.L303
	.half	1
	.byte	91
	.word	.L955-.L303,.L956-.L303
	.half	1
	.byte	91
	.word	.L299-.L303,.L479-.L303
	.half	1
	.byte	91
	.word	.L301-.L303,.L474-.L303
	.half	1
	.byte	91
	.word	.L957-.L303,.L117-.L303
	.half	1
	.byte	91
	.word	0,0
.L634:
	.word	-1,.L303,.L946-.L303,.L947-.L303
	.half	1
	.byte	95
	.word	.L948-.L303,.L934-.L303
	.half	1
	.byte	84
	.word	0,0
.L628:
	.word	-1,.L303,.L923-.L303,.L921-.L303
	.half	1
	.byte	109
	.word	.L299-.L303,.L479-.L303
	.half	1
	.byte	109
	.word	.L301-.L303,.L474-.L303
	.half	1
	.byte	109
	.word	.L924-.L303,.L926-.L303
	.half	1
	.byte	109
	.word	.L929-.L303,.L930-.L303
	.half	1
	.byte	109
	.word	.L283-.L303,.L489-.L303
	.half	1
	.byte	109
	.word	.L931-.L303,.L932-.L303
	.half	1
	.byte	109
	.word	.L933-.L303,.L934-.L303
	.half	1
	.byte	109
	.word	.L934-.L303,.L950-.L303
	.half	1
	.byte	98
	.word	.L305-.L303,.L128-.L303
	.half	1
	.byte	109
	.word	.L953-.L303,.L123-.L303
	.half	1
	.byte	109
	.word	.L289-.L303,.L484-.L303
	.half	1
	.byte	109
	.word	.L955-.L303,.L956-.L303
	.half	1
	.byte	109
	.word	.L957-.L303,.L624-.L303
	.half	1
	.byte	109
	.word	0,0
.L626:
	.word	-1,.L303,0,.L921-.L303
	.half	1
	.byte	84
	.word	.L923-.L303,.L921-.L303
	.half	1
	.byte	88
	.word	.L299-.L303,.L479-.L303
	.half	1
	.byte	88
	.word	.L299-.L303,.L479-.L303
	.half	1
	.byte	84
	.word	.L301-.L303,.L474-.L303
	.half	1
	.byte	88
	.word	.L301-.L303,.L474-.L303
	.half	1
	.byte	84
	.word	.L924-.L303,.L926-.L303
	.half	1
	.byte	88
	.word	.L924-.L303,.L116-.L303
	.half	1
	.byte	84
	.word	.L929-.L303,.L930-.L303
	.half	1
	.byte	88
	.word	.L283-.L303,.L489-.L303
	.half	1
	.byte	88
	.word	.L931-.L303,.L932-.L303
	.half	1
	.byte	88
	.word	.L933-.L303,.L935-.L303
	.half	1
	.byte	88
	.word	.L120-.L303,.L123-.L303
	.half	1
	.byte	88
	.word	.L289-.L303,.L484-.L303
	.half	1
	.byte	88
	.word	.L955-.L303,.L956-.L303
	.half	1
	.byte	88
	.word	.L957-.L303,.L624-.L303
	.half	1
	.byte	88
	.word	0,0
.L633:
	.word	-1,.L303,.L939-.L303,.L120-.L303
	.half	1
	.byte	89
	.word	.L951-.L303,.L952-.L303
	.half	1
	.byte	84
	.word	.L305-.L303,.L128-.L303
	.half	1
	.byte	89
	.word	0,0
.L302:
	.word	-1,.L303,0,.L920-.L303
	.half	2
	.byte	138,0
	.word	.L920-.L303,.L118-.L303
	.half	2
	.byte	138,16
	.word	.L118-.L303,.L118-.L303
	.half	2
	.byte	138,0
	.word	.L118-.L303,.L127-.L303
	.half	2
	.byte	138,16
	.word	.L127-.L303,.L127-.L303
	.half	2
	.byte	138,0
	.word	.L127-.L303,.L624-.L303
	.half	2
	.byte	138,16
	.word	.L624-.L303,.L624-.L303
	.half	2
	.byte	138,0
	.word	0,0
.L629:
	.word	-1,.L303,.L927-.L303,.L928-.L303
	.half	1
	.byte	111
	.word	.L118-.L303,.L930-.L303
	.half	1
	.byte	111
	.word	.L283-.L303,.L489-.L303
	.half	1
	.byte	111
	.word	.L301-.L303,.L474-.L303
	.half	1
	.byte	111
	.word	.L931-.L303,.L932-.L303
	.half	1
	.byte	111
	.word	.L305-.L303,.L128-.L303
	.half	1
	.byte	111
	.word	.L933-.L303,.L123-.L303
	.half	1
	.byte	111
	.word	.L289-.L303,.L954-.L303
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_write')
	.sect	'.debug_loc'
.L529:
	.word	-1,.L291,.L299-.L291,.L479-.L291
	.half	1
	.byte	85
	.word	.L299-.L291,.L479-.L291
	.half	2
	.byte	145,108
	.word	.L301-.L291,.L474-.L291
	.half	1
	.byte	85
	.word	.L301-.L291,.L474-.L291
	.half	2
	.byte	145,108
	.word	0,.L767-.L291
	.half	1
	.byte	85
	.word	.L42-.L291,.L768-.L291
	.half	1
	.byte	85
	.word	.L297-.L291,.L509-.L291
	.half	2
	.byte	145,108
	.word	.L770-.L291,.L771-.L291
	.half	2
	.byte	145,108
	.word	.L784-.L291,.L785-.L291
	.half	2
	.byte	145,108
	.word	.L787-.L291,.L788-.L291
	.half	2
	.byte	145,108
	.word	.L790-.L291,.L791-.L291
	.half	2
	.byte	145,108
	.word	.L798-.L291,.L799-.L291
	.half	1
	.byte	95
	.word	.L802-.L291,.L796-.L291
	.half	1
	.byte	87
	.word	.L58-.L291,.L807-.L291
	.half	1
	.byte	95
	.word	.L295-.L291,.L62-.L291
	.half	1
	.byte	95
	.word	.L295-.L291,.L514-.L291
	.half	2
	.byte	145,108
	.word	.L795-.L291,.L808-.L291
	.half	2
	.byte	145,108
	.word	.L812-.L291,.L813-.L291
	.half	2
	.byte	145,108
	.word	.L825-.L291,.L826-.L291
	.half	2
	.byte	145,108
	.word	.L830-.L291,.L831-.L291
	.half	1
	.byte	95
	.word	.L835-.L291,.L834-.L291
	.half	1
	.byte	87
	.word	.L838-.L291,.L839-.L291
	.half	2
	.byte	145,108
	.word	.L72-.L291,.L839-.L291
	.half	1
	.byte	95
	.word	.L841-.L291,.L842-.L291
	.half	2
	.byte	145,108
	.word	.L866-.L291,.L867-.L291
	.half	2
	.byte	145,108
	.word	.L880-.L291,.L881-.L291
	.half	2
	.byte	145,108
	.word	.L886-.L291,.L887-.L291
	.half	2
	.byte	145,108
	.word	.L898-.L291,.L899-.L291
	.half	2
	.byte	145,108
	.word	.L907-.L291,.L908-.L291
	.half	2
	.byte	145,108
	.word	.L909-.L291,.L910-.L291
	.half	1
	.byte	95
	.word	.L293-.L291,.L911-.L291
	.half	2
	.byte	145,108
	.word	.L289-.L291,.L484-.L291
	.half	2
	.byte	145,108
	.word	.L912-.L291,.L913-.L291
	.half	2
	.byte	145,108
	.word	.L919-.L291,.L521-.L291
	.half	2
	.byte	145,108
	.word	0,0
.L525:
	.word	-1,.L291,0,.L763-.L291
	.half	1
	.byte	101
	.word	.L763-.L291,.L764-.L291
	.half	1
	.byte	111
	.word	.L299-.L291,.L479-.L291
	.half	2
	.byte	145,88
	.word	.L301-.L291,.L474-.L291
	.half	2
	.byte	145,88
	.word	.L42-.L291,.L769-.L291
	.half	1
	.byte	111
	.word	.L297-.L291,.L509-.L291
	.half	2
	.byte	145,88
	.word	.L772-.L291,.L771-.L291
	.half	2
	.byte	145,88
	.word	.L784-.L291,.L785-.L291
	.half	2
	.byte	145,88
	.word	.L787-.L291,.L788-.L291
	.half	2
	.byte	145,88
	.word	.L790-.L291,.L791-.L291
	.half	2
	.byte	145,88
	.word	.L805-.L291,.L58-.L291
	.half	1
	.byte	111
	.word	.L295-.L291,.L514-.L291
	.half	2
	.byte	145,88
	.word	.L795-.L291,.L808-.L291
	.half	2
	.byte	145,88
	.word	.L810-.L291,.L811-.L291
	.half	1
	.byte	111
	.word	.L812-.L291,.L813-.L291
	.half	2
	.byte	145,88
	.word	.L820-.L291,.L821-.L291
	.half	1
	.byte	111
	.word	.L825-.L291,.L826-.L291
	.half	2
	.byte	145,88
	.word	.L838-.L291,.L839-.L291
	.half	2
	.byte	145,88
	.word	.L840-.L291,.L72-.L291
	.half	1
	.byte	111
	.word	.L841-.L291,.L842-.L291
	.half	2
	.byte	145,88
	.word	.L848-.L291,.L849-.L291
	.half	1
	.byte	111
	.word	.L866-.L291,.L867-.L291
	.half	2
	.byte	145,88
	.word	.L876-.L291,.L877-.L291
	.half	1
	.byte	101
	.word	.L880-.L291,.L881-.L291
	.half	2
	.byte	145,88
	.word	.L886-.L291,.L887-.L291
	.half	2
	.byte	145,88
	.word	.L898-.L291,.L899-.L291
	.half	2
	.byte	145,88
	.word	.L907-.L291,.L908-.L291
	.half	2
	.byte	145,88
	.word	.L293-.L291,.L911-.L291
	.half	2
	.byte	145,88
	.word	.L289-.L291,.L484-.L291
	.half	2
	.byte	145,88
	.word	.L912-.L291,.L913-.L291
	.half	2
	.byte	145,88
	.word	.L919-.L291,.L521-.L291
	.half	2
	.byte	145,88
	.word	0,0
.L532:
	.word	-1,.L291,.L299-.L291,.L479-.L291
	.half	2
	.byte	145,100
	.word	.L299-.L291,.L479-.L291
	.half	1
	.byte	110
	.word	.L301-.L291,.L474-.L291
	.half	2
	.byte	145,100
	.word	.L301-.L291,.L474-.L291
	.half	1
	.byte	110
	.word	.L297-.L291,.L509-.L291
	.half	2
	.byte	145,100
	.word	.L297-.L291,.L509-.L291
	.half	1
	.byte	110
	.word	.L773-.L291,.L771-.L291
	.half	2
	.byte	145,100
	.word	.L774-.L291,.L771-.L291
	.half	1
	.byte	110
	.word	.L784-.L291,.L785-.L291
	.half	2
	.byte	145,100
	.word	.L784-.L291,.L785-.L291
	.half	1
	.byte	110
	.word	.L787-.L291,.L788-.L291
	.half	2
	.byte	145,100
	.word	.L787-.L291,.L788-.L291
	.half	1
	.byte	110
	.word	.L790-.L291,.L791-.L291
	.half	2
	.byte	145,100
	.word	.L790-.L291,.L791-.L291
	.half	1
	.byte	110
	.word	.L795-.L291,.L796-.L291
	.half	1
	.byte	110
	.word	.L796-.L291,.L803-.L291
	.half	1
	.byte	98
	.word	.L804-.L291,.L805-.L291
	.half	1
	.byte	111
	.word	.L295-.L291,.L514-.L291
	.half	2
	.byte	145,100
	.word	.L295-.L291,.L514-.L291
	.half	1
	.byte	110
	.word	.L795-.L291,.L808-.L291
	.half	2
	.byte	145,100
	.word	.L58-.L291,.L808-.L291
	.half	1
	.byte	110
	.word	.L812-.L291,.L813-.L291
	.half	2
	.byte	145,100
	.word	.L812-.L291,.L814-.L291
	.half	1
	.byte	110
	.word	.L814-.L291,.L819-.L291
	.half	1
	.byte	98
	.word	.L821-.L291,.L60-.L291
	.half	1
	.byte	111
	.word	.L822-.L291,.L823-.L291
	.half	1
	.byte	100
	.word	.L46-.L291,.L813-.L291
	.half	1
	.byte	110
	.word	.L825-.L291,.L826-.L291
	.half	2
	.byte	145,100
	.word	.L825-.L291,.L71-.L291
	.half	1
	.byte	110
	.word	.L838-.L291,.L839-.L291
	.half	2
	.byte	145,100
	.word	.L841-.L291,.L842-.L291
	.half	2
	.byte	145,100
	.word	.L866-.L291,.L867-.L291
	.half	2
	.byte	145,100
	.word	.L870-.L291,.L871-.L291
	.half	1
	.byte	110
	.word	.L873-.L291,.L86-.L291
	.half	1
	.byte	110
	.word	.L559-.L291,.L874-.L291
	.half	1
	.byte	110
	.word	.L878-.L291,.L879-.L291
	.half	1
	.byte	110
	.word	.L880-.L291,.L881-.L291
	.half	2
	.byte	145,100
	.word	.L92-.L291,.L88-.L291
	.half	1
	.byte	110
	.word	.L882-.L291,.L883-.L291
	.half	1
	.byte	111
	.word	.L884-.L291,.L885-.L291
	.half	1
	.byte	110
	.word	.L886-.L291,.L887-.L291
	.half	2
	.byte	145,100
	.word	.L94-.L291,.L888-.L291
	.half	1
	.byte	110
	.word	.L889-.L291,.L890-.L291
	.half	1
	.byte	101
	.word	.L891-.L291,.L892-.L291
	.half	1
	.byte	110
	.word	.L891-.L291,.L893-.L291
	.half	1
	.byte	111
	.word	.L894-.L291,.L895-.L291
	.half	1
	.byte	110
	.word	.L561-.L291,.L897-.L291
	.half	1
	.byte	110
	.word	.L898-.L291,.L899-.L291
	.half	2
	.byte	145,100
	.word	.L98-.L291,.L900-.L291
	.half	1
	.byte	110
	.word	.L903-.L291,.L904-.L291
	.half	1
	.byte	110
	.word	.L906-.L291,.L102-.L291
	.half	1
	.byte	110
	.word	.L907-.L291,.L908-.L291
	.half	2
	.byte	145,100
	.word	.L293-.L291,.L911-.L291
	.half	2
	.byte	145,100
	.word	.L289-.L291,.L484-.L291
	.half	2
	.byte	145,100
	.word	.L912-.L291,.L913-.L291
	.half	2
	.byte	145,100
	.word	.L914-.L291,.L915-.L291
	.half	1
	.byte	111
	.word	.L916-.L291,.L110-.L291
	.half	1
	.byte	100
	.word	.L919-.L291,.L521-.L291
	.half	2
	.byte	145,100
	.word	0,0
.L544:
	.word	-1,.L291,.L297-.L291,.L509-.L291
	.half	1
	.byte	82
	.word	.L768-.L291,.L771-.L291
	.half	1
	.byte	82
	.word	.L299-.L291,.L479-.L291
	.half	1
	.byte	82
	.word	.L301-.L291,.L474-.L291
	.half	1
	.byte	82
	.word	.L784-.L291,.L49-.L291
	.half	1
	.byte	82
	.word	.L46-.L291,.L813-.L291
	.half	1
	.byte	82
	.word	.L825-.L291,.L827-.L291
	.half	1
	.byte	82
	.word	0,0
.L543:
	.word	-1,.L291,.L299-.L291,.L479-.L291
	.half	2
	.byte	145,112
	.word	.L301-.L291,.L474-.L291
	.half	2
	.byte	145,112
	.word	.L297-.L291,.L509-.L291
	.half	2
	.byte	145,112
	.word	.L775-.L291,.L771-.L291
	.half	2
	.byte	145,112
	.word	.L784-.L291,.L785-.L291
	.half	2
	.byte	145,112
	.word	.L787-.L291,.L788-.L291
	.half	2
	.byte	145,112
	.word	.L790-.L291,.L791-.L291
	.half	2
	.byte	145,112
	.word	.L295-.L291,.L514-.L291
	.half	2
	.byte	145,112
	.word	.L795-.L291,.L808-.L291
	.half	2
	.byte	145,112
	.word	.L812-.L291,.L813-.L291
	.half	2
	.byte	145,112
	.word	.L825-.L291,.L826-.L291
	.half	2
	.byte	145,112
	.word	.L838-.L291,.L839-.L291
	.half	2
	.byte	145,112
	.word	.L841-.L291,.L842-.L291
	.half	2
	.byte	145,112
	.word	.L866-.L291,.L867-.L291
	.half	2
	.byte	145,112
	.word	.L880-.L291,.L881-.L291
	.half	2
	.byte	145,112
	.word	.L886-.L291,.L887-.L291
	.half	2
	.byte	145,112
	.word	.L896-.L291,.L897-.L291
	.half	1
	.byte	95
	.word	.L898-.L291,.L899-.L291
	.half	2
	.byte	145,112
	.word	.L901-.L291,.L99-.L291
	.half	1
	.byte	95
	.word	.L902-.L291,.L95-.L291
	.half	1
	.byte	95
	.word	.L907-.L291,.L908-.L291
	.half	2
	.byte	145,112
	.word	.L293-.L291,.L911-.L291
	.half	2
	.byte	145,112
	.word	.L289-.L291,.L484-.L291
	.half	2
	.byte	145,112
	.word	.L912-.L291,.L913-.L291
	.half	2
	.byte	145,112
	.word	.L919-.L291,.L521-.L291
	.half	2
	.byte	145,112
	.word	0,0
.L534:
	.word	0,0
.L556:
	.word	-1,.L291,.L829-.L291,.L830-.L291
	.half	1
	.byte	95
	.word	0,0
.L527:
	.word	-1,.L291,.L299-.L291,.L479-.L291
	.half	1
	.byte	84
	.word	.L299-.L291,.L479-.L291
	.half	1
	.byte	89
	.word	.L301-.L291,.L474-.L291
	.half	1
	.byte	84
	.word	.L301-.L291,.L474-.L291
	.half	1
	.byte	89
	.word	0,.L767-.L291
	.half	1
	.byte	84
	.word	.L42-.L291,.L768-.L291
	.half	1
	.byte	84
	.word	.L297-.L291,.L509-.L291
	.half	1
	.byte	89
	.word	.L776-.L291,.L771-.L291
	.half	1
	.byte	89
	.word	.L784-.L291,.L785-.L291
	.half	1
	.byte	89
	.word	.L787-.L291,.L788-.L291
	.half	1
	.byte	89
	.word	.L790-.L291,.L791-.L291
	.half	1
	.byte	89
	.word	.L295-.L291,.L514-.L291
	.half	1
	.byte	89
	.word	.L795-.L291,.L808-.L291
	.half	1
	.byte	89
	.word	.L812-.L291,.L813-.L291
	.half	1
	.byte	89
	.word	.L825-.L291,.L826-.L291
	.half	1
	.byte	89
	.word	.L838-.L291,.L839-.L291
	.half	1
	.byte	89
	.word	.L841-.L291,.L842-.L291
	.half	1
	.byte	89
	.word	.L866-.L291,.L867-.L291
	.half	1
	.byte	89
	.word	.L880-.L291,.L881-.L291
	.half	1
	.byte	89
	.word	.L886-.L291,.L887-.L291
	.half	1
	.byte	89
	.word	.L898-.L291,.L899-.L291
	.half	1
	.byte	89
	.word	.L907-.L291,.L908-.L291
	.half	1
	.byte	89
	.word	.L293-.L291,.L911-.L291
	.half	1
	.byte	89
	.word	.L289-.L291,.L484-.L291
	.half	1
	.byte	89
	.word	.L912-.L291,.L913-.L291
	.half	1
	.byte	89
	.word	.L919-.L291,.L521-.L291
	.half	1
	.byte	89
	.word	0,0
.L545:
	.word	-1,.L291,.L765-.L291,.L39-.L291
	.half	1
	.byte	92
	.word	.L297-.L291,.L509-.L291
	.half	1
	.byte	92
	.word	.L42-.L291,.L771-.L291
	.half	1
	.byte	92
	.word	.L299-.L291,.L479-.L291
	.half	1
	.byte	92
	.word	.L301-.L291,.L474-.L291
	.half	1
	.byte	92
	.word	.L784-.L291,.L785-.L291
	.half	1
	.byte	92
	.word	.L787-.L291,.L788-.L291
	.half	1
	.byte	92
	.word	.L790-.L291,.L791-.L291
	.half	1
	.byte	92
	.word	.L295-.L291,.L514-.L291
	.half	1
	.byte	92
	.word	.L795-.L291,.L808-.L291
	.half	1
	.byte	92
	.word	.L812-.L291,.L813-.L291
	.half	1
	.byte	92
	.word	.L825-.L291,.L826-.L291
	.half	1
	.byte	92
	.word	.L838-.L291,.L839-.L291
	.half	1
	.byte	92
	.word	.L841-.L291,.L842-.L291
	.half	1
	.byte	92
	.word	.L866-.L291,.L867-.L291
	.half	1
	.byte	92
	.word	.L880-.L291,.L881-.L291
	.half	1
	.byte	92
	.word	.L886-.L291,.L887-.L291
	.half	1
	.byte	92
	.word	.L898-.L291,.L899-.L291
	.half	1
	.byte	92
	.word	.L907-.L291,.L908-.L291
	.half	1
	.byte	92
	.word	.L293-.L291,.L911-.L291
	.half	1
	.byte	92
	.word	.L289-.L291,.L484-.L291
	.half	1
	.byte	92
	.word	.L912-.L291,.L913-.L291
	.half	1
	.byte	92
	.word	.L919-.L291,.L521-.L291
	.half	1
	.byte	92
	.word	0,0
.L540:
	.word	-1,.L291,.L299-.L291,.L479-.L291
	.half	1
	.byte	90
	.word	.L301-.L291,.L474-.L291
	.half	1
	.byte	90
	.word	.L297-.L291,.L509-.L291
	.half	1
	.byte	90
	.word	.L777-.L291,.L778-.L291
	.half	1
	.byte	90
	.word	.L789-.L291,.L788-.L291
	.half	1
	.byte	90
	.word	.L790-.L291,.L792-.L291
	.half	1
	.byte	90
	.word	.L794-.L291,.L791-.L291
	.half	1
	.byte	90
	.word	.L295-.L291,.L514-.L291
	.half	1
	.byte	90
	.word	.L795-.L291,.L808-.L291
	.half	1
	.byte	90
	.word	.L812-.L291,.L813-.L291
	.half	1
	.byte	90
	.word	.L825-.L291,.L826-.L291
	.half	1
	.byte	90
	.word	.L838-.L291,.L839-.L291
	.half	1
	.byte	90
	.word	.L841-.L291,.L842-.L291
	.half	1
	.byte	90
	.word	.L866-.L291,.L867-.L291
	.half	1
	.byte	90
	.word	.L880-.L291,.L881-.L291
	.half	1
	.byte	90
	.word	.L886-.L291,.L887-.L291
	.half	1
	.byte	90
	.word	.L898-.L291,.L899-.L291
	.half	1
	.byte	90
	.word	.L907-.L291,.L908-.L291
	.half	1
	.byte	90
	.word	.L293-.L291,.L911-.L291
	.half	1
	.byte	90
	.word	.L289-.L291,.L484-.L291
	.half	1
	.byte	90
	.word	.L912-.L291,.L913-.L291
	.half	1
	.byte	90
	.word	.L919-.L291,.L521-.L291
	.half	1
	.byte	90
	.word	0,0
.L542:
	.word	-1,.L291,.L299-.L291,.L479-.L291
	.half	2
	.byte	145,116
	.word	.L301-.L291,.L474-.L291
	.half	2
	.byte	145,116
	.word	.L297-.L291,.L509-.L291
	.half	2
	.byte	145,116
	.word	.L777-.L291,.L771-.L291
	.half	2
	.byte	145,116
	.word	.L784-.L291,.L785-.L291
	.half	2
	.byte	145,116
	.word	.L787-.L291,.L788-.L291
	.half	2
	.byte	145,116
	.word	.L790-.L291,.L791-.L291
	.half	2
	.byte	145,116
	.word	.L295-.L291,.L514-.L291
	.half	2
	.byte	145,116
	.word	.L795-.L291,.L808-.L291
	.half	2
	.byte	145,116
	.word	.L812-.L291,.L813-.L291
	.half	2
	.byte	145,116
	.word	.L825-.L291,.L826-.L291
	.half	2
	.byte	145,116
	.word	.L838-.L291,.L839-.L291
	.half	2
	.byte	145,116
	.word	.L841-.L291,.L842-.L291
	.half	2
	.byte	145,116
	.word	.L866-.L291,.L867-.L291
	.half	2
	.byte	145,116
	.word	.L872-.L291,.L86-.L291
	.half	1
	.byte	95
	.word	.L880-.L291,.L881-.L291
	.half	2
	.byte	145,116
	.word	.L886-.L291,.L887-.L291
	.half	2
	.byte	145,116
	.word	.L898-.L291,.L899-.L291
	.half	2
	.byte	145,116
	.word	.L907-.L291,.L908-.L291
	.half	2
	.byte	145,116
	.word	.L293-.L291,.L911-.L291
	.half	2
	.byte	145,116
	.word	.L289-.L291,.L484-.L291
	.half	2
	.byte	145,116
	.word	.L912-.L291,.L913-.L291
	.half	2
	.byte	145,116
	.word	.L919-.L291,.L521-.L291
	.half	2
	.byte	145,116
	.word	0,0
.L541:
	.word	-1,.L291,.L299-.L291,.L479-.L291
	.half	1
	.byte	88
	.word	.L301-.L291,.L474-.L291
	.half	1
	.byte	88
	.word	.L297-.L291,.L509-.L291
	.half	1
	.byte	88
	.word	.L775-.L291,.L771-.L291
	.half	1
	.byte	88
	.word	.L784-.L291,.L785-.L291
	.half	1
	.byte	88
	.word	.L787-.L291,.L788-.L291
	.half	1
	.byte	88
	.word	.L790-.L291,.L791-.L291
	.half	1
	.byte	88
	.word	.L295-.L291,.L514-.L291
	.half	1
	.byte	88
	.word	.L795-.L291,.L808-.L291
	.half	1
	.byte	88
	.word	.L812-.L291,.L813-.L291
	.half	1
	.byte	88
	.word	.L825-.L291,.L826-.L291
	.half	1
	.byte	88
	.word	.L838-.L291,.L839-.L291
	.half	1
	.byte	88
	.word	.L841-.L291,.L842-.L291
	.half	1
	.byte	88
	.word	.L866-.L291,.L867-.L291
	.half	1
	.byte	88
	.word	.L880-.L291,.L881-.L291
	.half	1
	.byte	88
	.word	.L886-.L291,.L887-.L291
	.half	1
	.byte	88
	.word	.L898-.L291,.L899-.L291
	.half	1
	.byte	88
	.word	.L907-.L291,.L908-.L291
	.half	1
	.byte	88
	.word	.L293-.L291,.L911-.L291
	.half	1
	.byte	88
	.word	.L289-.L291,.L484-.L291
	.half	1
	.byte	88
	.word	.L912-.L291,.L913-.L291
	.half	1
	.byte	88
	.word	.L919-.L291,.L521-.L291
	.half	1
	.byte	88
	.word	0,0
.L553:
	.word	-1,.L291,.L295-.L291,.L514-.L291
	.half	1
	.byte	111
	.word	.L809-.L291,.L810-.L291
	.half	1
	.byte	111
	.word	0,0
.L555:
	.word	-1,.L291,.L834-.L291,.L836-.L291
	.half	1
	.byte	98
	.word	.L828-.L291,.L826-.L291
	.half	1
	.byte	109
	.word	.L299-.L291,.L479-.L291
	.half	1
	.byte	109
	.word	.L301-.L291,.L474-.L291
	.half	1
	.byte	109
	.word	.L838-.L291,.L72-.L291
	.half	1
	.byte	109
	.word	.L851-.L291,.L852-.L291
	.half	1
	.byte	98
	.word	.L844-.L291,.L853-.L291
	.half	1
	.byte	109
	.word	.L852-.L291,.L75-.L291
	.half	1
	.byte	100
	.word	.L855-.L291,.L856-.L291
	.half	1
	.byte	100
	.word	.L79-.L291,.L858-.L291
	.half	1
	.byte	100
	.word	.L861-.L291,.L860-.L291
	.half	1
	.byte	101
	.word	0,0
.L560:
	.word	-1,.L291,.L874-.L291,.L875-.L291
	.half	1
	.byte	111
	.word	0,0
.L562:
	.word	-1,.L291,.L900-.L291,.L95-.L291
	.half	1
	.byte	111
	.word	0,0
.L558:
	.word	-1,.L291,.L845-.L291,.L846-.L291
	.half	1
	.byte	98
	.word	.L847-.L291,.L75-.L291
	.half	2
	.byte	145,120
	.word	.L849-.L291,.L850-.L291
	.half	1
	.byte	111
	.word	.L850-.L291,.L78-.L291
	.half	1
	.byte	100
	.word	.L78-.L291,.L854-.L291
	.half	1
	.byte	111
	.word	.L854-.L291,.L75-.L291
	.half	1
	.byte	101
	.word	0,0
.L523:
	.word	-1,.L291,.L299-.L291,.L479-.L291
	.half	1
	.byte	100
	.word	.L299-.L291,.L479-.L291
	.half	1
	.byte	108
	.word	0,.L766-.L291
	.half	1
	.byte	100
	.word	.L301-.L291,.L761-.L291
	.half	1
	.byte	100
	.word	.L301-.L291,.L474-.L291
	.half	1
	.byte	108
	.word	.L42-.L291,.L768-.L291
	.half	1
	.byte	100
	.word	.L297-.L291,.L509-.L291
	.half	1
	.byte	108
	.word	.L776-.L291,.L771-.L291
	.half	1
	.byte	108
	.word	.L784-.L291,.L785-.L291
	.half	1
	.byte	108
	.word	.L787-.L291,.L788-.L291
	.half	1
	.byte	108
	.word	.L790-.L291,.L791-.L291
	.half	1
	.byte	108
	.word	.L801-.L291,.L796-.L291
	.half	1
	.byte	101
	.word	.L295-.L291,.L514-.L291
	.half	1
	.byte	108
	.word	.L795-.L291,.L808-.L291
	.half	1
	.byte	108
	.word	.L812-.L291,.L813-.L291
	.half	1
	.byte	108
	.word	.L825-.L291,.L826-.L291
	.half	1
	.byte	108
	.word	.L833-.L291,.L834-.L291
	.half	1
	.byte	101
	.word	.L838-.L291,.L839-.L291
	.half	1
	.byte	108
	.word	.L841-.L291,.L842-.L291
	.half	1
	.byte	108
	.word	.L859-.L291,.L860-.L291
	.half	1
	.byte	100
	.word	.L866-.L291,.L867-.L291
	.half	1
	.byte	108
	.word	.L880-.L291,.L881-.L291
	.half	1
	.byte	108
	.word	.L886-.L291,.L887-.L291
	.half	1
	.byte	108
	.word	.L898-.L291,.L899-.L291
	.half	1
	.byte	108
	.word	.L907-.L291,.L908-.L291
	.half	1
	.byte	108
	.word	.L293-.L291,.L911-.L291
	.half	1
	.byte	108
	.word	.L289-.L291,.L484-.L291
	.half	1
	.byte	108
	.word	.L912-.L291,.L913-.L291
	.half	1
	.byte	108
	.word	.L919-.L291,.L521-.L291
	.half	1
	.byte	108
	.word	0,0
.L538:
	.word	-1,.L291,.L299-.L291,.L479-.L291
	.half	1
	.byte	91
	.word	.L301-.L291,.L474-.L291
	.half	1
	.byte	91
	.word	.L297-.L291,.L509-.L291
	.half	1
	.byte	91
	.word	.L779-.L291,.L771-.L291
	.half	1
	.byte	91
	.word	.L784-.L291,.L785-.L291
	.half	1
	.byte	91
	.word	.L787-.L291,.L788-.L291
	.half	1
	.byte	91
	.word	.L790-.L291,.L791-.L291
	.half	1
	.byte	91
	.word	.L295-.L291,.L514-.L291
	.half	1
	.byte	91
	.word	.L795-.L291,.L808-.L291
	.half	1
	.byte	91
	.word	.L812-.L291,.L815-.L291
	.half	1
	.byte	91
	.word	.L46-.L291,.L813-.L291
	.half	1
	.byte	91
	.word	.L825-.L291,.L826-.L291
	.half	1
	.byte	91
	.word	.L838-.L291,.L839-.L291
	.half	1
	.byte	91
	.word	.L841-.L291,.L842-.L291
	.half	1
	.byte	91
	.word	.L866-.L291,.L868-.L291
	.half	1
	.byte	91
	.word	.L70-.L291,.L867-.L291
	.half	1
	.byte	91
	.word	.L880-.L291,.L881-.L291
	.half	1
	.byte	91
	.word	.L886-.L291,.L887-.L291
	.half	1
	.byte	91
	.word	.L898-.L291,.L899-.L291
	.half	1
	.byte	91
	.word	.L907-.L291,.L908-.L291
	.half	1
	.byte	91
	.word	.L293-.L291,.L911-.L291
	.half	1
	.byte	91
	.word	.L289-.L291,.L484-.L291
	.half	1
	.byte	91
	.word	.L912-.L291,.L913-.L291
	.half	1
	.byte	91
	.word	.L919-.L291,.L521-.L291
	.half	1
	.byte	91
	.word	0,0
.L536:
	.word	-1,.L291,.L299-.L291,.L479-.L291
	.half	2
	.byte	145,92
	.word	.L301-.L291,.L474-.L291
	.half	2
	.byte	145,92
	.word	.L297-.L291,.L509-.L291
	.half	2
	.byte	145,92
	.word	.L780-.L291,.L771-.L291
	.half	2
	.byte	145,92
	.word	.L784-.L291,.L785-.L291
	.half	2
	.byte	145,92
	.word	.L787-.L291,.L788-.L291
	.half	2
	.byte	145,92
	.word	.L790-.L291,.L791-.L291
	.half	2
	.byte	145,92
	.word	.L295-.L291,.L514-.L291
	.half	2
	.byte	145,92
	.word	.L795-.L291,.L808-.L291
	.half	2
	.byte	145,92
	.word	.L812-.L291,.L813-.L291
	.half	2
	.byte	145,92
	.word	.L825-.L291,.L826-.L291
	.half	2
	.byte	145,92
	.word	.L838-.L291,.L839-.L291
	.half	2
	.byte	145,92
	.word	.L841-.L291,.L842-.L291
	.half	2
	.byte	145,92
	.word	.L864-.L291,.L865-.L291
	.half	1
	.byte	111
	.word	.L866-.L291,.L867-.L291
	.half	2
	.byte	145,92
	.word	.L869-.L291,.L84-.L291
	.half	1
	.byte	111
	.word	.L880-.L291,.L881-.L291
	.half	2
	.byte	145,92
	.word	.L886-.L291,.L887-.L291
	.half	2
	.byte	145,92
	.word	.L898-.L291,.L899-.L291
	.half	2
	.byte	145,92
	.word	.L907-.L291,.L908-.L291
	.half	2
	.byte	145,92
	.word	.L293-.L291,.L911-.L291
	.half	2
	.byte	145,92
	.word	.L289-.L291,.L484-.L291
	.half	2
	.byte	145,92
	.word	.L912-.L291,.L913-.L291
	.half	2
	.byte	145,92
	.word	.L919-.L291,.L521-.L291
	.half	2
	.byte	145,92
	.word	0,0
.L537:
	.word	-1,.L291,.L299-.L291,.L479-.L291
	.half	2
	.byte	145,96
	.word	.L301-.L291,.L474-.L291
	.half	2
	.byte	145,96
	.word	.L297-.L291,.L509-.L291
	.half	2
	.byte	145,96
	.word	.L779-.L291,.L771-.L291
	.half	2
	.byte	145,96
	.word	.L784-.L291,.L785-.L291
	.half	2
	.byte	145,96
	.word	.L787-.L291,.L788-.L291
	.half	2
	.byte	145,96
	.word	.L790-.L291,.L791-.L291
	.half	2
	.byte	145,96
	.word	.L295-.L291,.L514-.L291
	.half	2
	.byte	145,96
	.word	.L795-.L291,.L808-.L291
	.half	2
	.byte	145,96
	.word	.L812-.L291,.L813-.L291
	.half	2
	.byte	145,96
	.word	.L825-.L291,.L826-.L291
	.half	2
	.byte	145,96
	.word	.L832-.L291,.L826-.L291
	.half	1
	.byte	111
	.word	.L299-.L291,.L837-.L291
	.half	1
	.byte	111
	.word	.L838-.L291,.L839-.L291
	.half	2
	.byte	145,96
	.word	.L841-.L291,.L842-.L291
	.half	2
	.byte	145,96
	.word	.L862-.L291,.L863-.L291
	.half	1
	.byte	111
	.word	.L83-.L291,.L864-.L291
	.half	1
	.byte	111
	.word	.L866-.L291,.L867-.L291
	.half	2
	.byte	145,96
	.word	.L880-.L291,.L881-.L291
	.half	2
	.byte	145,96
	.word	.L886-.L291,.L887-.L291
	.half	2
	.byte	145,96
	.word	.L898-.L291,.L899-.L291
	.half	2
	.byte	145,96
	.word	.L905-.L291,.L101-.L291
	.half	1
	.byte	111
	.word	.L906-.L291,.L102-.L291
	.half	1
	.byte	111
	.word	.L907-.L291,.L908-.L291
	.half	2
	.byte	145,96
	.word	.L293-.L291,.L911-.L291
	.half	2
	.byte	145,96
	.word	.L289-.L291,.L484-.L291
	.half	2
	.byte	145,96
	.word	.L912-.L291,.L913-.L291
	.half	2
	.byte	145,96
	.word	.L915-.L291,.L917-.L291
	.half	1
	.byte	111
	.word	.L918-.L291,.L111-.L291
	.half	1
	.byte	100
	.word	.L919-.L291,.L521-.L291
	.half	2
	.byte	145,96
	.word	0,0
.L539:
	.word	-1,.L291,.L297-.L291,.L509-.L291
	.half	1
	.byte	93
	.word	.L781-.L291,.L771-.L291
	.half	1
	.byte	93
	.word	.L299-.L291,.L479-.L291
	.half	1
	.byte	93
	.word	.L301-.L291,.L474-.L291
	.half	1
	.byte	93
	.word	.L784-.L291,.L785-.L291
	.half	1
	.byte	93
	.word	.L787-.L291,.L788-.L291
	.half	1
	.byte	93
	.word	.L790-.L291,.L791-.L291
	.half	1
	.byte	93
	.word	.L295-.L291,.L514-.L291
	.half	1
	.byte	93
	.word	.L795-.L291,.L808-.L291
	.half	1
	.byte	93
	.word	.L812-.L291,.L816-.L291
	.half	1
	.byte	93
	.word	.L66-.L291,.L813-.L291
	.half	1
	.byte	93
	.word	.L825-.L291,.L826-.L291
	.half	1
	.byte	93
	.word	.L838-.L291,.L839-.L291
	.half	1
	.byte	93
	.word	.L841-.L291,.L843-.L291
	.half	1
	.byte	93
	.word	.L857-.L291,.L842-.L291
	.half	1
	.byte	93
	.word	.L866-.L291,.L867-.L291
	.half	1
	.byte	93
	.word	.L880-.L291,.L881-.L291
	.half	1
	.byte	93
	.word	.L886-.L291,.L887-.L291
	.half	1
	.byte	93
	.word	.L898-.L291,.L899-.L291
	.half	1
	.byte	93
	.word	.L907-.L291,.L45-.L291
	.half	1
	.byte	93
	.word	.L82-.L291,.L908-.L291
	.half	1
	.byte	93
	.word	.L293-.L291,.L911-.L291
	.half	1
	.byte	93
	.word	.L289-.L291,.L484-.L291
	.half	1
	.byte	93
	.word	.L912-.L291,.L913-.L291
	.half	1
	.byte	93
	.word	.L919-.L291,.L521-.L291
	.half	1
	.byte	93
	.word	0,0
.L535:
	.word	-1,.L291,.L299-.L291,.L479-.L291
	.half	1
	.byte	109
	.word	.L301-.L291,.L474-.L291
	.half	1
	.byte	109
	.word	.L297-.L291,.L509-.L291
	.half	1
	.byte	109
	.word	.L782-.L291,.L771-.L291
	.half	1
	.byte	109
	.word	.L784-.L291,.L785-.L291
	.half	1
	.byte	109
	.word	.L787-.L291,.L788-.L291
	.half	1
	.byte	109
	.word	.L790-.L291,.L791-.L291
	.half	1
	.byte	109
	.word	.L295-.L291,.L514-.L291
	.half	1
	.byte	109
	.word	.L795-.L291,.L808-.L291
	.half	1
	.byte	109
	.word	.L812-.L291,.L813-.L291
	.half	1
	.byte	109
	.word	.L825-.L291,.L828-.L291
	.half	1
	.byte	109
	.word	.L72-.L291,.L839-.L291
	.half	1
	.byte	109
	.word	.L841-.L291,.L844-.L291
	.half	1
	.byte	109
	.word	.L860-.L291,.L842-.L291
	.half	1
	.byte	98
	.word	.L853-.L291,.L842-.L291
	.half	1
	.byte	109
	.word	.L299-.L291,.L479-.L291
	.half	1
	.byte	98
	.word	.L301-.L291,.L474-.L291
	.half	1
	.byte	98
	.word	.L866-.L291,.L85-.L291
	.half	1
	.byte	98
	.word	.L866-.L291,.L867-.L291
	.half	1
	.byte	109
	.word	.L880-.L291,.L881-.L291
	.half	1
	.byte	109
	.word	.L886-.L291,.L887-.L291
	.half	1
	.byte	109
	.word	.L898-.L291,.L899-.L291
	.half	1
	.byte	109
	.word	.L907-.L291,.L908-.L291
	.half	1
	.byte	109
	.word	0,0
.L551:
	.word	-1,.L291,.L797-.L291,.L798-.L291
	.half	1
	.byte	95
	.word	.L800-.L291,.L796-.L291
	.half	1
	.byte	85
	.word	.L806-.L291,.L803-.L291
	.half	1
	.byte	84
	.word	.L295-.L291,.L514-.L291
	.half	2
	.byte	145,104
	.word	.L797-.L291,.L808-.L291
	.half	2
	.byte	145,104
	.word	.L299-.L291,.L479-.L291
	.half	2
	.byte	145,104
	.word	.L301-.L291,.L474-.L291
	.half	2
	.byte	145,104
	.word	.L812-.L291,.L46-.L291
	.half	2
	.byte	145,104
	.word	.L817-.L291,.L63-.L291
	.half	1
	.byte	95
	.word	.L818-.L291,.L814-.L291
	.half	1
	.byte	85
	.word	.L824-.L291,.L46-.L291
	.half	1
	.byte	95
	.word	0,0
.L557:
	.word	-1,.L291,.L830-.L291,.L826-.L291
	.half	1
	.byte	94
	.word	.L299-.L291,.L479-.L291
	.half	1
	.byte	94
	.word	.L301-.L291,.L474-.L291
	.half	1
	.byte	94
	.word	.L838-.L291,.L839-.L291
	.half	1
	.byte	94
	.word	.L841-.L291,.L842-.L291
	.half	1
	.byte	94
	.word	.L866-.L291,.L70-.L291
	.half	1
	.byte	94
	.word	0,0
.L548:
	.word	-1,.L291,.L786-.L291,.L785-.L291
	.half	1
	.byte	94
	.word	.L299-.L291,.L479-.L291
	.half	1
	.byte	94
	.word	.L301-.L291,.L474-.L291
	.half	1
	.byte	94
	.word	.L787-.L291,.L788-.L291
	.half	1
	.byte	94
	.word	.L790-.L291,.L793-.L291
	.half	1
	.byte	94
	.word	.L51-.L291,.L791-.L291
	.half	1
	.byte	94
	.word	.L801-.L291,.L796-.L291
	.half	1
	.byte	86
	.word	.L295-.L291,.L514-.L291
	.half	1
	.byte	94
	.word	.L795-.L291,.L808-.L291
	.half	1
	.byte	94
	.word	.L812-.L291,.L46-.L291
	.half	1
	.byte	94
	.word	0,0
.L290:
	.word	-1,.L291,0,.L762-.L291
	.half	2
	.byte	138,0
	.word	.L762-.L291,.L42-.L291
	.half	2
	.byte	138,56
	.word	.L42-.L291,.L42-.L291
	.half	2
	.byte	138,0
	.word	.L42-.L291,.L82-.L291
	.half	2
	.byte	138,56
	.word	.L82-.L291,.L82-.L291
	.half	2
	.byte	138,0
	.word	.L82-.L291,.L521-.L291
	.half	2
	.byte	138,56
	.word	.L521-.L291,.L521-.L291
	.half	2
	.byte	138,0
	.word	0,0
.L549:
	.word	-1,.L291,.L783-.L291,.L771-.L291
	.half	1
	.byte	90
	.word	.L299-.L291,.L479-.L291
	.half	1
	.byte	90
	.word	.L301-.L291,.L474-.L291
	.half	1
	.byte	90
	.word	.L784-.L291,.L785-.L291
	.half	1
	.byte	90
	.word	.L787-.L291,.L789-.L291
	.half	1
	.byte	90
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_write_checks')
	.sect	'.debug_loc'
.L683:
	.word	-1,.L287,0,.L757-.L287
	.half	1
	.byte	84
	.word	.L289-.L287,.L759-.L287
	.half	1
	.byte	84
	.word	.L299-.L287,.L479-.L287
	.half	1
	.byte	84
	.word	.L301-.L287,.L474-.L287
	.half	1
	.byte	84
	.word	.L22-.L287,.L27-.L287
	.half	1
	.byte	84
	.word	0,0
.L682:
	.word	-1,.L287,0,.L758-.L287
	.half	1
	.byte	100
	.word	.L289-.L287,.L759-.L287
	.half	1
	.byte	100
	.word	.L299-.L287,.L479-.L287
	.half	1
	.byte	100
	.word	.L22-.L287,.L760-.L287
	.half	1
	.byte	100
	.word	.L301-.L287,.L761-.L287
	.half	1
	.byte	100
	.word	0,0
.L286:
	.word	-1,.L287,0,.L756-.L287
	.half	2
	.byte	138,0
	.word	.L756-.L287,.L25-.L287
	.half	2
	.byte	138,16
	.word	.L25-.L287,.L25-.L287
	.half	2
	.byte	138,0
	.word	.L25-.L287,.L29-.L287
	.half	2
	.byte	138,16
	.word	.L29-.L287,.L29-.L287
	.half	2
	.byte	138,0
	.word	.L29-.L287,.L681-.L287
	.half	2
	.byte	138,16
	.word	.L681-.L287,.L681-.L287
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tcp_zero_window_probe')
	.sect	'.debug_loc'
.L638:
	.word	0,0
.L644:
	.word	-1,.L345,.L313-.L345,.L504-.L345
	.half	1
	.byte	88
	.word	.L1183-.L345,.L636-.L345
	.half	1
	.byte	88
	.word	0,0
.L643:
	.word	-1,.L345,.L1180-.L345,.L1181-.L345
	.half	1
	.byte	85
	.word	0,0
.L639:
	.word	-1,.L345,.L1181-.L345,.L1182-.L345
	.half	1
	.byte	98
	.word	.L274-.L345,.L275-.L345
	.half	1
	.byte	98
	.word	.L313-.L345,.L504-.L345
	.half	1
	.byte	110
	.word	.L1184-.L345,.L636-.L345
	.half	1
	.byte	110
	.word	.L1188-.L345,.L1186-.L345
	.half	1
	.byte	101
	.word	.L1190-.L345,.L636-.L345
	.half	1
	.byte	101
	.word	0,0
.L637:
	.word	-1,.L345,0,.L1174-.L345
	.half	1
	.byte	100
	.word	.L1175-.L345,.L1174-.L345
	.half	1
	.byte	108
	.word	.L299-.L345,.L479-.L345
	.half	1
	.byte	100
	.word	.L299-.L345,.L479-.L345
	.half	1
	.byte	108
	.word	.L1176-.L345,.L1177-.L345
	.half	1
	.byte	100
	.word	.L301-.L345,.L761-.L345
	.half	1
	.byte	100
	.word	.L301-.L345,.L474-.L345
	.half	1
	.byte	108
	.word	.L1180-.L345,.L1181-.L345
	.half	1
	.byte	100
	.word	.L313-.L345,.L504-.L345
	.half	1
	.byte	108
	.word	.L1176-.L345,.L636-.L345
	.half	1
	.byte	108
	.word	.L1187-.L345,.L1186-.L345
	.half	1
	.byte	100
	.word	.L1189-.L345,.L636-.L345
	.half	1
	.byte	100
	.word	.L1191-.L345,.L636-.L345
	.half	1
	.byte	102
	.word	0,0
.L642:
	.word	-1,.L345,.L1178-.L345,.L1179-.L345
	.half	1
	.byte	111
	.word	0,0
.L645:
	.word	-1,.L345,.L313-.L345,.L504-.L345
	.half	1
	.byte	82
	.word	.L1185-.L345,.L1186-.L345
	.half	1
	.byte	82
	.word	0,0
.L344:
	.word	-1,.L345,0,.L1173-.L345
	.half	2
	.byte	138,0
	.word	.L1173-.L345,.L267-.L345
	.half	2
	.byte	138,16
	.word	.L267-.L345,.L267-.L345
	.half	2
	.byte	138,0
	.word	.L267-.L345,.L272-.L345
	.half	2
	.byte	138,16
	.word	.L272-.L345,.L272-.L345
	.half	2
	.byte	138,0
	.word	.L272-.L345,.L636-.L345
	.half	2
	.byte	138,16
	.word	.L636-.L345,.L636-.L345
	.half	2
	.byte	138,0
	.word	0,0
.L641:
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1781:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('tcp_route')
	.sect	'.debug_frame'
	.word	12
	.word	.L1781,.L279,.L656-.L279
	.sdecl	'.debug_frame',debug,cluster('tcp_create_segment')
	.sect	'.debug_frame'
	.word	52
	.word	.L1781,.L281,.L660-.L281
	.byte	4
	.word	(.L723-.L281)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L9-.L723)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L660-.L9)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('tcp_pbuf_prealloc')
	.sect	'.debug_frame'
	.word	52
	.word	.L1781,.L285,.L669-.L285
	.byte	4
	.word	(.L745-.L285)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L18-.L745)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L669-.L18)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('tcp_write_checks')
	.sect	'.debug_frame'
	.word	68
	.word	.L1781,.L287,.L681-.L287
	.byte	4
	.word	(.L756-.L287)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L25-.L756)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L29-.L25)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L681-.L29)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('tcp_write')
	.sect	'.debug_frame'
	.word	68
	.word	.L1781,.L291,.L521-.L291
	.byte	4
	.word	(.L762-.L291)/2
	.byte	19,56,22,26,3,19,138,56,4
	.word	(.L42-.L762)/2
	.byte	19,0,8,26,19,56,22,26,3,19,138,56,4
	.word	(.L82-.L42)/2
	.byte	19,0,8,26,19,56,22,26,3,19,138,56,4
	.word	(.L521-.L82)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('tcp_split_unsent_seg')
	.sect	'.debug_frame'
	.word	68
	.word	.L1781,.L303,.L624-.L303
	.byte	4
	.word	(.L920-.L303)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L118-.L920)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L127-.L118)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L624-.L127)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('tcp_send_fin')
	.sect	'.debug_frame'
	.word	52
	.word	.L1781,.L307,.L596-.L307
	.byte	4
	.word	(.L959-.L307)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L137-.L959)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L596-.L137)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('tcp_enqueue_flags')
	.sect	'.debug_frame'
	.word	52
	.word	.L1781,.L309,.L601-.L309
	.byte	4
	.word	(.L967-.L309)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L145-.L967)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L601-.L145)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('tcp_output')
	.sect	'.debug_frame'
	.word	88
	.word	.L1781,.L311,.L563-.L311
	.byte	4
	.word	(.L996-.L311)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L166-.L996)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L168-.L166)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L191-.L168)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L563-.L191)/2
	.byte	19,0,8,26,0,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_output_segment_busy')
	.sect	'.debug_frame'
	.word	24
	.word	.L1781,.L315,.L686-.L315
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_output_segment')
	.sect	'.debug_frame'
	.word	52
	.word	.L1781,.L317,.L646-.L317
	.byte	4
	.word	(.L1023-.L317)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L208-.L1023)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L646-.L208)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('tcp_rexmit_rto_prepare')
	.sect	'.debug_frame'
	.word	52
	.word	.L1781,.L319,.L586-.L319
	.byte	4
	.word	(.L1040-.L319)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L220-.L1040)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L586-.L220)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('tcp_rexmit_rto_commit')
	.sect	'.debug_frame'
	.word	36
	.word	.L1781,.L321,.L589-.L321
	.byte	4
	.word	(.L1046-.L321)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L589-.L1046)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_rexmit_rto')
	.sect	'.debug_frame'
	.word	52
	.word	.L1781,.L325,.L592-.L325
	.byte	4
	.word	(.L1052-.L325)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L227-.L1052)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L592-.L227)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('tcp_rexmit')
	.sect	'.debug_frame'
	.word	52
	.word	.L1781,.L327,.L583-.L327
	.byte	4
	.word	(.L1060-.L327)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L230-.L1060)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L583-.L230)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('tcp_rexmit_fast')
	.sect	'.debug_frame'
	.word	36
	.word	.L1781,.L329,.L594-.L329
	.byte	4
	.word	(.L1068-.L329)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L594-.L1068)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_output_alloc_header_common')
	.sect	'.debug_frame'
	.word	36
	.word	.L1781,.L331,.L689-.L331
	.byte	4
	.word	(.L1075-.L331)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L689-.L1075)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_output_alloc_header')
	.sect	'.debug_frame'
	.word	36
	.word	.L1781,.L333,.L700-.L333
	.byte	4
	.word	(.L1089-.L333)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L700-.L1089)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_output_fill_options')
	.sect	'.debug_frame'
	.word	24
	.word	.L1781,.L335,.L706-.L335
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('tcp_output_control_segment')
	.sect	'.debug_frame'
	.word	36
	.word	.L1781,.L337,.L711-.L337
	.byte	4
	.word	(.L1096-.L337)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L711-.L1096)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_rst')
	.sect	'.debug_frame'
	.word	52
	.word	.L1781,.L339,.L609-.L339
	.byte	4
	.word	(.L1121-.L339)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L255-.L1121)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L609-.L255)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('tcp_send_empty_ack')
	.sect	'.debug_frame'
	.word	36
	.word	.L1781,.L341,.L579-.L341
	.byte	4
	.word	(.L1144-.L341)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L579-.L1144)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('tcp_keepalive')
	.sect	'.debug_frame'
	.word	52
	.word	.L1781,.L343,.L620-.L343
	.byte	4
	.word	(.L1159-.L343)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L263-.L1159)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L620-.L263)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('tcp_zero_window_probe')
	.sect	'.debug_frame'
	.word	68
	.word	.L1781,.L345,.L636-.L345
	.byte	4
	.word	(.L1173-.L345)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L267-.L1173)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L272-.L267)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L636-.L272)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1782:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_110')
	.sect	'.debug_frame'
	.word	24
	.word	.L1782,.L283,.L489-.L283
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_109')
	.sect	'.debug_frame'
	.word	24
	.word	.L1782,.L289,.L484-.L289
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_116')
	.sect	'.debug_frame'
	.word	24
	.word	.L1782,.L293,.L519-.L293
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_115')
	.sect	'.debug_frame'
	.word	24
	.word	.L1782,.L295,.L514-.L295
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_114')
	.sect	'.debug_frame'
	.word	24
	.word	.L1782,.L297,.L509-.L297
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_108')
	.sect	'.debug_frame'
	.word	24
	.word	.L1782,.L299,.L479-.L299
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_107')
	.sect	'.debug_frame'
	.word	24
	.word	.L1782,.L301,.L474-.L301
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_111')
	.sect	'.debug_frame'
	.word	24
	.word	.L1782,.L305,.L494-.L305
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_113')
	.sect	'.debug_frame'
	.word	24
	.word	.L1782,.L313,.L504-.L313
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_112')
	.sect	'.debug_frame'
	.word	24
	.word	.L1782,.L323,.L499-.L323
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\tcp_out.c	  2190  #endif /* LWIP_TCP */

	; Module end
