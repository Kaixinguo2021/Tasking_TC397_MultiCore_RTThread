	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\.mem.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Rtl8211f -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.src ..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c'

	
$TC162
	
	.sdecl	'.text.mem.ptr_to_mem',code,cluster('ptr_to_mem')
	.sect	'.text.mem.ptr_to_mem'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	     1  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	     2   * @file
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	     3   * Dynamic memory manager
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	     4   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	     5   * This is a lightweight replacement for the standard C library malloc().
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	     6   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	     7   * If you want to use the standard C library malloc() instead, define
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	     8   * MEM_LIBC_MALLOC to 1 in your lwipopts.h
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	     9   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    10   * To let mem_malloc() use pools (prevents fragmentation and is much faster than
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    11   * a heap but might waste some memory), define MEM_USE_POOLS to 1, define
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    12   * MEMP_USE_CUSTOM_POOLS to 1 and create a file "lwippools.h" that includes a list
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    13   * of pools like this (more pools can be added between _START and _END):
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    14   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    15   * Define three pools with sizes 256, 512, and 1512 bytes
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    16   * LWIP_MALLOC_MEMPOOL_START
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    17   * LWIP_MALLOC_MEMPOOL(20, 256)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    18   * LWIP_MALLOC_MEMPOOL(10, 512)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    19   * LWIP_MALLOC_MEMPOOL(5, 1512)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    20   * LWIP_MALLOC_MEMPOOL_END
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    21   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    22  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    23  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    24   * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    25   * All rights reserved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    26   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    27   * Redistribution and use in source and binary forms, with or without modification,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    28   * are permitted provided that the following conditions are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    29   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    30   * 1. Redistributions of source code must retain the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    31   *    this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    32   * 2. Redistributions in binary form must reproduce the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    33   *    this list of conditions and the following disclaimer in the documentation
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    34   *    and/or other materials provided with the distribution.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    35   * 3. The name of the author may not be used to endorse or promote products
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    36   *    derived from this software without specific prior written permission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    37   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    38   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    39   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    40   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    41   * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    42   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    43   * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    44   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    45   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    46   * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    47   * OF SUCH DAMAGE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    48   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    49   * This file is part of the lwIP TCP/IP stack.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    50   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    51   * Author: Adam Dunkels <adam@sics.se>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    52   *         Simon Goldschmidt
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    53   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    54   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    55  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    56  #include "lwip/opt.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    57  #include "lwip/mem.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    58  #include "lwip/def.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    59  #include "lwip/sys.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    60  #include "lwip/stats.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    61  #include "lwip/err.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    62  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    63  #include <string.h>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    64  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    65  #if MEM_LIBC_MALLOC
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    66  #include <stdlib.h> /* for malloc()/free() */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    67  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    68  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    69  /* This is overridable for tests only... */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    70  #ifndef LWIP_MEM_ILLEGAL_FREE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    71  #define LWIP_MEM_ILLEGAL_FREE(msg)         LWIP_ASSERT(msg, 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    72  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    73  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    74  #define MEM_STATS_INC_LOCKED(x)         SYS_ARCH_LOCKED(MEM_STATS_INC(x))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    75  #define MEM_STATS_INC_USED_LOCKED(x, y) SYS_ARCH_LOCKED(MEM_STATS_INC_USED(x, y))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    76  #define MEM_STATS_DEC_USED_LOCKED(x, y) SYS_ARCH_LOCKED(MEM_STATS_DEC_USED(x, y))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    77  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    78  #if MEM_OVERFLOW_CHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    79  #define MEM_SANITY_OFFSET   MEM_SANITY_REGION_BEFORE_ALIGNED
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    80  #define MEM_SANITY_OVERHEAD (MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    81  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    82  #define MEM_SANITY_OFFSET   0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    83  #define MEM_SANITY_OVERHEAD 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    84  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    85  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    86  #if MEM_OVERFLOW_CHECK || MEMP_OVERFLOW_CHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    87  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    88   * Check if a mep element was victim of an overflow or underflow
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    89   * (e.g. the restricted area after/before it has been altered)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    90   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    91   * @param p the mem element to check
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    92   * @param size allocated size of the element
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    93   * @param descr1 description of the element source shown on error
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    94   * @param descr2 description of the element source shown on error
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    95   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    96  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    97  mem_overflow_check_raw(void *p, size_t size, const char *descr1, const char *descr2)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    98  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	    99  #if MEM_SANITY_REGION_AFTER_ALIGNED || MEM_SANITY_REGION_BEFORE_ALIGNED
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   100    u16_t k;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   101    u8_t *m;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   102  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   103  #if MEM_SANITY_REGION_AFTER_ALIGNED > 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   104    m = (u8_t *)p + size;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   105    for (k = 0; k < MEM_SANITY_REGION_AFTER_ALIGNED; k++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   106      if (m[k] != 0xcd) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   107        char errstr[128];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   108        snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   109        LWIP_ASSERT(errstr, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   110      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   111    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   112  #endif /* MEM_SANITY_REGION_AFTER_ALIGNED > 0 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   113  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   114  #if MEM_SANITY_REGION_BEFORE_ALIGNED > 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   115    m = (u8_t *)p - MEM_SANITY_REGION_BEFORE_ALIGNED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   116    for (k = 0; k < MEM_SANITY_REGION_BEFORE_ALIGNED; k++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   117      if (m[k] != 0xcd) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   118        char errstr[128];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   119        snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   120        LWIP_ASSERT(errstr, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   121      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   122    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   123  #endif /* MEM_SANITY_REGION_BEFORE_ALIGNED > 0 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   124  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   125    LWIP_UNUSED_ARG(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   126    LWIP_UNUSED_ARG(desc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   127    LWIP_UNUSED_ARG(descr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   128  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   129  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   130  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   131  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   132   * Initialize the restricted area of a mem element.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   133   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   134  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   135  mem_overflow_init_raw(void *p, size_t size)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   136  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   137  #if MEM_SANITY_REGION_BEFORE_ALIGNED > 0 || MEM_SANITY_REGION_AFTER_ALIGNED > 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   138    u8_t *m;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   139  #if MEM_SANITY_REGION_BEFORE_ALIGNED > 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   140    m = (u8_t *)p - MEM_SANITY_REGION_BEFORE_ALIGNED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   141    memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   142  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   143  #if MEM_SANITY_REGION_AFTER_ALIGNED > 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   144    m = (u8_t *)p + size;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   145    memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   146  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   147  #else /* MEM_SANITY_REGION_BEFORE_ALIGNED > 0 || MEM_SANITY_REGION_AFTER_ALIGNED > 0 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   148    LWIP_UNUSED_ARG(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   149    LWIP_UNUSED_ARG(desc);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   150  #endif /* MEM_SANITY_REGION_BEFORE_ALIGNED > 0 || MEM_SANITY_REGION_AFTER_ALIGNED > 0 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   151  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   152  #endif /* MEM_OVERFLOW_CHECK || MEMP_OVERFLOW_CHECK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   153  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   154  #if MEM_LIBC_MALLOC || MEM_USE_POOLS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   155  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   156  /** mem_init is not used when using pools instead of a heap or using
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   157   * C library malloc().
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   158   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   159  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   160  mem_init(void)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   161  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   162  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   163  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   164  /** mem_trim is not used when using pools instead of a heap or using
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   165   * C library malloc(): we can't free part of a pool element and the stack
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   166   * support mem_trim() to return a different pointer
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   167   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   168  void *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   169  mem_trim(void *mem, mem_size_t size)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   170  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   171    LWIP_UNUSED_ARG(size);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   172    return mem;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   173  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   174  #endif /* MEM_LIBC_MALLOC || MEM_USE_POOLS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   175  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   176  #if MEM_LIBC_MALLOC
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   177  /* lwIP heap implemented using C library malloc() */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   178  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   179  /* in case C library malloc() needs extra protection,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   180   * allow these defines to be overridden.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   181   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   182  #ifndef mem_clib_free
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   183  #define mem_clib_free free
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   184  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   185  #ifndef mem_clib_malloc
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   186  #define mem_clib_malloc malloc
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   187  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   188  #ifndef mem_clib_calloc
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   189  #define mem_clib_calloc calloc
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   190  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   191  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   192  #if LWIP_STATS && MEM_STATS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   193  #define MEM_LIBC_STATSHELPER_SIZE LWIP_MEM_ALIGN_SIZE(sizeof(mem_size_t))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   194  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   195  #define MEM_LIBC_STATSHELPER_SIZE 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   196  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   197  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   198  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   199   * Allocate a block of memory with a minimum of 'size' bytes.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   200   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   201   * @param size is the minimum size of the requested block in bytes.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   202   * @return pointer to allocated memory or NULL if no free memory was found.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   203   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   204   * Note that the returned value must always be aligned (as defined by MEM_ALIGNMENT).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   205   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   206  void *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   207  mem_malloc(mem_size_t size)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   208  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   209    void *ret = mem_clib_malloc(size + MEM_LIBC_STATSHELPER_SIZE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   210    if (ret == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   211      MEM_STATS_INC_LOCKED(err);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   212    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   213      LWIP_ASSERT("malloc() must return aligned memory", LWIP_MEM_ALIGN(ret) == ret);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   214  #if LWIP_STATS && MEM_STATS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   215      *(mem_size_t *)ret = size;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   216      ret = (u8_t *)ret + MEM_LIBC_STATSHELPER_SIZE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   217      MEM_STATS_INC_USED_LOCKED(used, size);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   218  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   219    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   220    return ret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   221  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   222  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   223  /** Put memory back on the heap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   224   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   225   * @param rmem is the pointer as returned by a previous call to mem_malloc()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   226   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   227  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   228  mem_free(void *rmem)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   229  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   230    LWIP_ASSERT("rmem != NULL", (rmem != NULL));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   231    LWIP_ASSERT("rmem == MEM_ALIGN(rmem)", (rmem == LWIP_MEM_ALIGN(rmem)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   232  #if LWIP_STATS && MEM_STATS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   233    rmem = (u8_t *)rmem - MEM_LIBC_STATSHELPER_SIZE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   234    MEM_STATS_DEC_USED_LOCKED(used, *(mem_size_t *)rmem);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   235  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   236    mem_clib_free(rmem);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   237  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   238  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   239  #elif MEM_USE_POOLS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   240  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   241  /* lwIP heap implemented with different sized pools */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   242  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   243  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   244   * Allocate memory: determine the smallest pool that is big enough
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   245   * to contain an element of 'size' and get an element from that pool.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   246   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   247   * @param size the size in bytes of the memory needed
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   248   * @return a pointer to the allocated memory or NULL if the pool is empty
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   249   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   250  void *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   251  mem_malloc(mem_size_t size)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   252  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   253    void *ret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   254    struct memp_malloc_helper *element = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   255    memp_t poolnr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   256    mem_size_t required_size = size + LWIP_MEM_ALIGN_SIZE(sizeof(struct memp_malloc_helper));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   257  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   258    for (poolnr = MEMP_POOL_FIRST; poolnr <= MEMP_POOL_LAST; poolnr = (memp_t)(poolnr + 1)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   259      /* is this pool big enough to hold an element of the required size
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   260         plus a struct memp_malloc_helper that saves the pool this element came from? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   261      if (required_size <= memp_pools[poolnr]->size) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   262        element = (struct memp_malloc_helper *)memp_malloc(poolnr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   263        if (element == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   264          /* No need to DEBUGF or ASSERT: This error is already taken care of in memp.c */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   265  #if MEM_USE_POOLS_TRY_BIGGER_POOL
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   266          /** Try a bigger pool if this one is empty! */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   267          if (poolnr < MEMP_POOL_LAST) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   268            continue;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   269          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   270  #endif /* MEM_USE_POOLS_TRY_BIGGER_POOL */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   271          MEM_STATS_INC_LOCKED(err);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   272          return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   273        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   274        break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   275      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   276    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   277    if (poolnr > MEMP_POOL_LAST) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   278      LWIP_ASSERT("mem_malloc(): no pool is that big!", 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   279      MEM_STATS_INC_LOCKED(err);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   280      return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   281    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   282  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   283    /* save the pool number this element came from */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   284    element->poolnr = poolnr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   285    /* and return a pointer to the memory directly after the struct memp_malloc_helper */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   286    ret = (u8_t *)element + LWIP_MEM_ALIGN_SIZE(sizeof(struct memp_malloc_helper));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   287  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   288  #if MEMP_OVERFLOW_CHECK || (LWIP_STATS && MEM_STATS)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   289    /* truncating to u16_t is safe because struct memp_desc::size is u16_t */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   290    element->size = (u16_t)size;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   291    MEM_STATS_INC_USED_LOCKED(used, element->size);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   292  #endif /* MEMP_OVERFLOW_CHECK || (LWIP_STATS && MEM_STATS) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   293  #if MEMP_OVERFLOW_CHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   294    /* initialize unused memory (diff between requested size and selected pool's size) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   295    memset((u8_t *)ret + size, 0xcd, memp_pools[poolnr]->size - size);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   296  #endif /* MEMP_OVERFLOW_CHECK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   297    return ret;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   298  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   299  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   300  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   301   * Free memory previously allocated by mem_malloc. Loads the pool number
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   302   * and calls memp_free with that pool number to put the element back into
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   303   * its pool
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   304   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   305   * @param rmem the memory element to free
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   306   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   307  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   308  mem_free(void *rmem)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   309  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   310    struct memp_malloc_helper *hmem;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   311  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   312    LWIP_ASSERT("rmem != NULL", (rmem != NULL));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   313    LWIP_ASSERT("rmem == MEM_ALIGN(rmem)", (rmem == LWIP_MEM_ALIGN(rmem)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   314  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   315    /* get the original struct memp_malloc_helper */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   316    /* cast through void* to get rid of alignment warnings */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   317    hmem = (struct memp_malloc_helper *)(void *)((u8_t *)rmem - LWIP_MEM_ALIGN_SIZE(sizeof(struct memp_malloc_helper)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   318  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   319    LWIP_ASSERT("hmem != NULL", (hmem != NULL));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   320    LWIP_ASSERT("hmem == MEM_ALIGN(hmem)", (hmem == LWIP_MEM_ALIGN(hmem)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   321    LWIP_ASSERT("hmem->poolnr < MEMP_MAX", (hmem->poolnr < MEMP_MAX));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   322  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   323    MEM_STATS_DEC_USED_LOCKED(used, hmem->size);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   324  #if MEMP_OVERFLOW_CHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   325    {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   326      u16_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   327      LWIP_ASSERT("MEM_USE_POOLS: invalid chunk size",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   328                  hmem->size <= memp_pools[hmem->poolnr]->size);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   329      /* check that unused memory remained untouched (diff between requested size and selected pool's size) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   330      for (i = hmem->size; i < memp_pools[hmem->poolnr]->size; i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   331        u8_t data = *((u8_t *)rmem + i);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   332        LWIP_ASSERT("MEM_USE_POOLS: mem overflow detected", data == 0xcd);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   333      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   334    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   335  #endif /* MEMP_OVERFLOW_CHECK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   336  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   337    /* and put it in the pool we saved earlier */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   338    memp_free(hmem->poolnr, hmem);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   339  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   340  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   341  #else /* MEM_USE_POOLS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   342  /* lwIP replacement for your libc malloc() */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   343  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   344  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   345   * The heap is made up as a list of structs of this type.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   346   * This does not have to be aligned since for getting its size,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   347   * we only use the macro SIZEOF_STRUCT_MEM, which automatically aligns.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   348   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   349  struct mem {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   350    /** index (-> ram[next]) of the next struct */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   351    mem_size_t next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   352    /** index (-> ram[prev]) of the previous struct */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   353    mem_size_t prev;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   354    /** 1: this area is used; 0: this area is unused */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   355    u8_t used;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   356  #if MEM_OVERFLOW_CHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   357    /** this keeps track of the user allocation size for guard checks */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   358    mem_size_t user_size;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   359  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   360  };
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   361  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   362  /** All allocated blocks will be MIN_SIZE bytes big, at least!
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   363   * MIN_SIZE can be overridden to suit your needs. Smaller values save space,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   364   * larger values could prevent too small blocks to fragment the RAM too much. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   365  #ifndef MIN_SIZE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   366  #define MIN_SIZE             12
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   367  #endif /* MIN_SIZE */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   368  /* some alignment macros: we define them here for better source code layout */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   369  #define MIN_SIZE_ALIGNED     LWIP_MEM_ALIGN_SIZE(MIN_SIZE)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   370  #define SIZEOF_STRUCT_MEM    LWIP_MEM_ALIGN_SIZE(sizeof(struct mem))
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   371  #define MEM_SIZE_ALIGNED     LWIP_MEM_ALIGN_SIZE(MEM_SIZE)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   372  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   373  /** If you want to relocate the heap to external memory, simply define
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   374   * LWIP_RAM_HEAP_POINTER as a void-pointer to that location.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   375   * If so, make sure the memory at that location is big enough (see below on
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   376   * how that space is calculated). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   377  #ifndef LWIP_RAM_HEAP_POINTER
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   378  /** the heap. we need one struct mem at the end and some room for alignment */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   379  LWIP_DECLARE_MEMORY_ALIGNED(ram_heap, MEM_SIZE_ALIGNED + (2U * SIZEOF_STRUCT_MEM));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   380  #define LWIP_RAM_HEAP_POINTER ram_heap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   381  #endif /* LWIP_RAM_HEAP_POINTER */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   382  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   383  /** pointer to the heap (ram_heap): for alignment, ram is now a pointer instead of an array */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   384  static u8_t *ram;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   385  /** the last entry, always unused! */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   386  static struct mem *ram_end;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   387  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   388  /** concurrent access protection */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   389  #if !NO_SYS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   390  static sys_mutex_t mem_mutex;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   391  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   392  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   393  #if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   394  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   395  static volatile u8_t mem_free_count;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   396  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   397  /* Allow mem_free from other (e.g. interrupt) context */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   398  #define LWIP_MEM_FREE_DECL_PROTECT()  SYS_ARCH_DECL_PROTECT(lev_free)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   399  #define LWIP_MEM_FREE_PROTECT()       SYS_ARCH_PROTECT(lev_free)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   400  #define LWIP_MEM_FREE_UNPROTECT()     SYS_ARCH_UNPROTECT(lev_free)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   401  #define LWIP_MEM_ALLOC_DECL_PROTECT() SYS_ARCH_DECL_PROTECT(lev_alloc)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   402  #define LWIP_MEM_ALLOC_PROTECT()      SYS_ARCH_PROTECT(lev_alloc)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   403  #define LWIP_MEM_ALLOC_UNPROTECT()    SYS_ARCH_UNPROTECT(lev_alloc)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   404  #define LWIP_MEM_LFREE_VOLATILE       volatile
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   405  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   406  #else /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   407  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   408  /* Protect the heap only by using a mutex */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   409  #define LWIP_MEM_FREE_DECL_PROTECT()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   410  #define LWIP_MEM_FREE_PROTECT()    sys_mutex_lock(&mem_mutex)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   411  #define LWIP_MEM_FREE_UNPROTECT()  sys_mutex_unlock(&mem_mutex)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   412  /* mem_malloc is protected using mutex AND LWIP_MEM_ALLOC_PROTECT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   413  #define LWIP_MEM_ALLOC_DECL_PROTECT()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   414  #define LWIP_MEM_ALLOC_PROTECT()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   415  #define LWIP_MEM_ALLOC_UNPROTECT()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   416  #define LWIP_MEM_LFREE_VOLATILE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   417  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   418  #endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   419  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   420  /** pointer to the lowest free block, this is used for faster search */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   421  static struct mem * LWIP_MEM_LFREE_VOLATILE lfree;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   422  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   423  #if MEM_SANITY_CHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   424  static void mem_sanity(void);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   425  #define MEM_SANITY() mem_sanity()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   426  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   427  #define MEM_SANITY()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   428  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   429  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   430  #if MEM_OVERFLOW_CHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   431  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   432  mem_overflow_init_element(struct mem *mem, mem_size_t user_size)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   433  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   434    void *p = (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   435    mem->user_size = user_size;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   436    mem_overflow_init_raw(p, user_size);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   437  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   438  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   439  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   440  mem_overflow_check_element(struct mem *mem)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   441  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   442    void *p = (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   443    mem_overflow_check_raw(p, mem->user_size, "heap", "");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   444  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   445  #else /* MEM_OVERFLOW_CHECK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   446  #define mem_overflow_init_element(mem, size)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   447  #define mem_overflow_check_element(mem)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   448  #endif /* MEM_OVERFLOW_CHECK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   449  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   450  static struct mem *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   451  ptr_to_mem(mem_size_t ptr)
; Function ptr_to_mem
.L83:
ptr_to_mem:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   452  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   453    return (struct mem *)(void *)&ram[ptr];
	ld.a	a15,ram
.L495:
	addsc.a	a2,a15,d4,#0
.L496:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   454  }
	ret
.L229:
	
__ptr_to_mem_function_end:
	.size	ptr_to_mem,__ptr_to_mem_function_end-ptr_to_mem
.L143:
	; End of function
	
	.sdecl	'.text.mem.mem_to_ptr',code,cluster('mem_to_ptr')
	.sect	'.text.mem.mem_to_ptr'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   455  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   456  static mem_size_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   457  mem_to_ptr(void *mem)
; Function mem_to_ptr
.L85:
mem_to_ptr:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   458  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   459    return (mem_size_t)((u8_t *)mem - ram);
	ld.a	a15,ram
.L501:
	sub.a	a15,a4,a15
	mov.d	d15,a15
.L502:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   460  }
	extr.u	d2,d15,#0,#16
	ret
.L231:
	
__mem_to_ptr_function_end:
	.size	mem_to_ptr,__mem_to_ptr_function_end-mem_to_ptr
.L148:
	; End of function
	
	.sdecl	'.text.mem.plug_holes',code,cluster('plug_holes')
	.sect	'.text.mem.plug_holes'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   461  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   462  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   463   * "Plug holes" by combining adjacent empty struct mems.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   464   * After this function is through, there should not exist
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   465   * one empty struct mem pointing to another empty struct mem.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   466   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   467   * @param mem this points to a struct mem which just has been freed
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   468   * @internal this function is only called by mem_free() and mem_trim()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   469   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   470   * This assumes access to the heap is protected by the calling function
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   471   * already.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   472   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   473  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   474  plug_holes(struct mem *mem)
; Function plug_holes
.L87:
plug_holes:	.type	func
	mov.aa	a12,a4
.L248:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   475  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   476    struct mem *nmem;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   477    struct mem *pmem;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   478  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   479    LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
	mov.d	d15,a12
.L247:
	ld.w	d0,ram
.L507:
	sub.a	a10,#16
.L246:
	jge.u	d15,d0,.L4
.L508:
	movh.a	a2,#@his(.2.str)
	lea	a2,[a2]@los(.2.str)
	st.a	[a10],a2
	mov	d15,#479
	st.w	[a10]4,d15
.L249:
	fcall	.cocofun_28
.L250:
	st.a	[a10]8,a15
	fcall	.cocofun_29
	call	Ifx_Lwip_printf
.L4:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   480    LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
	mov.d	d15,a12
.L252:
	ld.w	d0,ram_end
	jlt.u	d15,d0,.L5
	movh.a	a2,#@his(.4.str)
	lea	a2,[a2]@los(.4.str)
	st.a	[a10],a2
	mov	d15,#480
	st.w	[a10]4,d15
.L251:
	fcall	.cocofun_28
.L253:
	st.a	[a10]8,a15
	fcall	.cocofun_29
	call	Ifx_Lwip_printf
.L5:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   481    LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
	ld.bu	d15,[a12]4
	jeq	d15,#0,.L6
	movh.a	a15,#@his(.5.str)
	lea	a15,[a15]@los(.5.str)
	st.a	[a10],a15
	mov	d15,#481
	st.w	[a10]4,d15
.L254:
	fcall	.cocofun_28
.L255:
	st.a	[a10]8,a15
	fcall	.cocofun_29
	call	Ifx_Lwip_printf
.L6:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   482  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   483    /* plug hole forward */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   484    LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
	mov	d8,#25600
	ld.hu	d15,[a12]0
	jge.u	d8,d15,.L7
	movh.a	a15,#@his(.6.str)
	lea	a15,[a15]@los(.6.str)
	st.a	[a10],a15
	mov	d15,#484
	st.w	[a10]4,d15
.L256:
	fcall	.cocofun_28
.L257:
	st.a	[a10]8,a15
	fcall	.cocofun_29
	call	Ifx_Lwip_printf
.L7:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   485  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   486    nmem = ptr_to_mem(mem->next);
	ld.hu	d4,[a12]0
	call	ptr_to_mem
.L259:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   487    if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
	jeq.a	a12,a2,.L8
.L509:
	ld.bu	d15,[a2]4
.L510:
	jne	d15,#0,.L9
.L511:
	ld.a	a15,ram_end
.L512:
	jeq.a	a2,a15,.L10
.L513:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   488      /* if mem->next is unused and not end of ram, combine mem and mem->next */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   489      if (lfree == nmem) {
	ld.a	a15,lfree
.L514:
	jne.a	a15,a2,.L11
.L515:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   490        lfree = mem;
	st.a	lfree,a12
.L11:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   491      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   492      mem->next = nmem->next;
	ld.hu	d15,[a2]0
.L516:
	st.h	[a12],d15
.L517:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   493      if (nmem->next != MEM_SIZE_ALIGNED) {
	ld.hu	d4,[a2]0
.L518:
	jeq	d4,d8,.L12
.L519:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   494        ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
	call	ptr_to_mem
.L260:
	add.a	a2,#2
.L520:
	mov.aa	a15,a2
.L521:
	mov.aa	a4,a12
.L261:
	call	mem_to_ptr
.L262:
	st.h	[a15],d2
.L12:
.L10:
.L9:
.L8:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   495      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   496    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   497  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   498    /* plug hole backward */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   499    pmem = ptr_to_mem(mem->prev);
	ld.hu	d4,[a12]2
	call	ptr_to_mem
.L263:
	mov.aa	a15,a2
.L265:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   500    if (pmem != mem && pmem->used == 0) {
	jeq.a	a15,a12,.L13
.L522:
	ld.bu	d15,[a15]4
.L523:
	jne	d15,#0,.L14
.L524:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   501      /* if mem->prev is unused, combine mem and mem->prev */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   502      if (lfree == mem) {
	ld.a	a2,lfree
.L264:
	jne.a	a2,a12,.L15
.L525:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   503        lfree = pmem;
	st.a	lfree,a15
.L15:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   504      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   505      pmem->next = mem->next;
	ld.hu	d15,[a12]0
.L526:
	st.h	[a15],d15
.L527:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   506      if (mem->next != MEM_SIZE_ALIGNED) {
	ld.hu	d4,[a12]0
.L528:
	jeq	d4,d8,.L16
.L529:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   507        ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
	call	ptr_to_mem
.L530:
	add.a	a2,#2
.L531:
	mov.aa	a12,a2
.L258:
	mov.aa	a4,a15
.L266:
	call	mem_to_ptr
.L267:
	st.h	[a12],d2
.L16:
.L14:
.L13:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   508      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   509    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   510  }
	ret
.L233:
	
__plug_holes_function_end:
	.size	plug_holes,__plug_holes_function_end-plug_holes
.L153:
	; End of function
	
	.sdecl	'.text.mem..cocofun_29',code,cluster('.cocofun_29')
	.sect	'.text.mem..cocofun_29'
	.align	2
; Function .cocofun_29
.L89:
.cocofun_29:	.type	func
; Function body .cocofun_29, coco_iter:0
	movh.a	a4,#@his(.1.str)
	lea	a4,[a4]@los(.1.str)
.L554:
	fret
.L168:
	; End of function
	.sdecl	'.text.mem..cocofun_28',code,cluster('.cocofun_28')
	.sect	'.text.mem..cocofun_28'
	.align	2
; Function .cocofun_28
.L91:
.cocofun_28:	.type	func
; Function body .cocofun_28, coco_iter:0
	movh.a	a15,#@his(.3.str)
	lea	a15,[a15]@los(.3.str)
.L549:
	fret
.L163:
	; End of function
	.sdecl	'.text.mem.mem_init',code,cluster('mem_init')
	.sect	'.text.mem.mem_init'
	.align	2
	
	.global	mem_init

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   511  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   512  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   513   * Zero the heap and initialize start, end and lowest-free
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   514   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   515  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   516  mem_init(void)
; Function mem_init
.L93:
mem_init:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   517  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   518    struct mem *mem;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   519  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   520    LWIP_ASSERT("Sanity check alignment",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   521                (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   522  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   523    /* align the heap */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   524    ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
	movh.a	a15,#@his(ram_heap)
	lea	a15,[a15]@los(ram_heap)
	mov.d	d15,a15
	add	d15,#3
.L366:
	insert	d15,d15,#0,#0,#2
	st.w	ram,d15
.L367:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   525    /* initialize the start of the heap */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   526    mem = (struct mem *)(void *)ram;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   527    mem->next = MEM_SIZE_ALIGNED;
	mov	d8,#25600
.L368:
	ld.a	a15,ram
.L369:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   528    mem->prev = 0;
	mov	d15,#0
.L370:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   529    mem->used = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   530    /* initialize the end of the heap */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   531    ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
	mov	d4,d8
.L371:
	st.h	[a15],d8
.L372:
	st.h	[a15]2,d15
.L373:
	st.b	[a15]4,d15
.L374:
	call	ptr_to_mem
.L375:
	st.a	ram_end,a2
.L376:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   532    ram_end->used = 1;
	mov	d15,#1
	st.b	[a2]4,d15
.L377:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   533    ram_end->next = MEM_SIZE_ALIGNED;
	st.h	[a2],d8
.L378:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   534    ram_end->prev = MEM_SIZE_ALIGNED;
	st.h	[a2]2,d8
.L379:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   535    MEM_SANITY();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   536  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   537    /* initialize the lowest-free pointer to the start of the heap */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   538    lfree = (struct mem *)(void *)ram;
	st.a	lfree,a15
.L380:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   539  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   540    MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
	movh.a	a15,#@his(lwip_stats+174)
	st.h	[a15]@los(lwip_stats+174),d8
.L381:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   541  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   542    if (sys_mutex_new(&mem_mutex) != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   543      LWIP_ASSERT("failed to create mem_mutex", 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   544    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   545  }
	ret
.L192:
	
__mem_init_function_end:
	.size	mem_init,__mem_init_function_end-mem_init
.L118:
	; End of function
	
	.sdecl	'.text.mem.mem_link_valid',code,cluster('mem_link_valid')
	.sect	'.text.mem.mem_link_valid'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   546  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   547  /* Check if a struct mem is correctly linked.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   548   * If not, double-free is a possible reason.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   549   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   550  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   551  mem_link_valid(struct mem *mem)
; Function mem_link_valid
.L95:
mem_link_valid:	.type	func
	mov.aa	a15,a4
.L269:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   552  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   553    struct mem *nmem, *pmem;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   554    mem_size_t rmem_idx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   555    rmem_idx = mem_to_ptr(mem);
	call	mem_to_ptr
.L268:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   556    nmem = ptr_to_mem(mem->next);
	ld.hu	d8,[a15]0
.L536:
	mov	d15,d2
.L272:
	mov	d4,d8
	call	ptr_to_mem
.L271:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   557    pmem = ptr_to_mem(mem->prev);
	ld.hu	d9,[a15]2
.L537:
	mov.aa	a12,a2
.L274:
	mov	d4,d9
	call	ptr_to_mem
.L273:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   558    if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
	mov	d0,#25600
.L538:
	jlt.u	d0,d8,.L17
.L539:
	jlt.u	d0,d9,.L18
.L540:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   559        ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
	jeq	d15,d9,.L19
.L541:
	ld.hu	d0,[a2]0
.L542:
	jne	d15,d0,.L20
.L19:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   560        ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
	ld.a	a15,ram_end
.L270:
	jeq.a	a12,a15,.L21
.L543:
	ld.hu	d0,[a12]2
.L544:
	jeq	d15,d0,.L22
.L20:
.L18:
.L17:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   561      return 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   562    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   563    return 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   564  }
	mov	d2,#0
	ret
.L22:
.L21:
	mov	d2,#1
	ret
.L239:
	
__mem_link_valid_function_end:
	.size	mem_link_valid,__mem_link_valid_function_end-mem_link_valid
.L158:
	; End of function
	
	.sdecl	'.text.mem.mem_free',code,cluster('mem_free')
	.sect	'.text.mem.mem_free'
	.align	2
	
	.global	mem_free

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   565  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   566  #if MEM_SANITY_CHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   567  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   568  mem_sanity(void)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   569  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   570    struct mem *mem;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   571    u8_t last_used;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   572  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   573    /* begin with first element here */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   574    mem = (struct mem *)ram;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   575    LWIP_ASSERT("heap element used valid", (mem->used == 0) || (mem->used == 1));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   576    last_used = mem->used;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   577    LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   578    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   579    LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   580  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   581    /* check all elements before the end of the heap */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   582    for (mem = ptr_to_mem(mem->next);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   583         ((u8_t *)mem > ram) && (mem < ram_end);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   584         mem = ptr_to_mem(mem->next)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   585      LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   586      LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   587      LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   588      LWIP_ASSERT("heap element prev ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->prev) == ptr_to_mem(mem->prev)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   589      LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   590  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   591      if (last_used == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   592        /* 2 unused elements in a row? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   593        LWIP_ASSERT("heap element unused?", mem->used == 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   594      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   595        LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   596      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   597  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   598      LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   599  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   600      /* used/unused altering */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   601      last_used = mem->used;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   602    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   603    LWIP_ASSERT("heap end ptr sanity", mem == ptr_to_mem(MEM_SIZE_ALIGNED));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   604    LWIP_ASSERT("heap element used valid", mem->used == 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   605    LWIP_ASSERT("heap element prev ptr valid", mem->prev == MEM_SIZE_ALIGNED);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   606    LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   607  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   608  #endif /* MEM_SANITY_CHECK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   609  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   610  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   611   * Put a struct mem back on the heap
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   612   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   613   * @param rmem is the data portion of a struct mem as returned by a previous
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   614   *             call to mem_malloc()
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   615   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   616  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   617  mem_free(void *rmem)
; Function mem_free
.L97:
mem_free:	.type	func
	sub.a	a10,#16
.L275:
	mov.aa	a12,a4
.L285:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   618  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   619    struct mem *mem;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   620    LWIP_MEM_FREE_DECL_PROTECT();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   621  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   622    if (rmem == NULL) {
	jz.a	a12,.L25
.L473:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   623      LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   624      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   625    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   626    if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
	mov.d	d15,a12
.L276:
	and	d15,#3
.L277:
	jeq	d15,#0,.L26
.L474:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   627      LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
	movh.a	a15,#@his(.10.str)
	lea	a15,[a15]@los(.10.str)
.L475:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   628      LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   629      /* protect mem stats from concurrent access */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   630      MEM_STATS_INC_LOCKED(illegal);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   631      return;
	mov	d15,#627
	j	.L27
.L25:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   632    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   633  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   634    /* Get the corresponding struct mem: */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   635    /* cast through void* to get rid of alignment warnings */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   636    mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   637  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   638    if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   639      LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   640      LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   641      /* protect mem stats from concurrent access */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   642      MEM_STATS_INC_LOCKED(illegal);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   643      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   644    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   645  #if MEM_OVERFLOW_CHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   646    mem_overflow_check_element(mem);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   647  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   648    /* protect the heap from concurrent access */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   649    LWIP_MEM_FREE_PROTECT();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   650    /* mem has to be in a used state */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   651    if (!mem->used) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   652      LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   653      LWIP_MEM_FREE_UNPROTECT();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   654      LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   655      /* protect mem stats from concurrent access */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   656      MEM_STATS_INC_LOCKED(illegal);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   657      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   658    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   659  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   660    if (!mem_link_valid(mem)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   661      LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   662      LWIP_MEM_FREE_UNPROTECT();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   663      LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   664      /* protect mem stats from concurrent access */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   665      MEM_STATS_INC_LOCKED(illegal);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   666      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   667    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   668  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   669    /* mem is now unused. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   670    mem->used = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   671  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   672    if (mem < lfree) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   673      /* the newly freed struct is now the lowest */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   674      lfree = mem;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   675    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   676  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   677    MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   678  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   679    /* finally, see if prev or next are free also */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   680    plug_holes(mem);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   681    MEM_SANITY();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   682  #if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   683    mem_free_count = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   684  #endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   685    LWIP_MEM_FREE_UNPROTECT();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   686  }
	ret
.L26:
	ld.a	a14,ram
.L476:
	lea	a13,[a12]-8
.L278:
	lt.a	d15,a13,a14
.L477:
	jne	d15,#0,.L28
.L478:
	lea	a15,[a12]12
	mov.d	d15,a15
.L479:
	ld.w	d0,ram_end
.L480:
	jge.u	d0,d15,.L29
.L28:
	movh.a	a15,#@his(.12.str)
	lea	a15,[a15]@los(.12.str)
.L481:
	mov	d15,#639
	j	.L30
.L29:
	ld.bu	d15,[a12]-4
.L482:
	jne	d15,#0,.L31
.L483:
	movh.a	a15,#@his(.14.str)
	lea	a15,[a15]@los(.14.str)
.L484:
	mov	d15,#652
	j	.L32
.L31:
	mov.aa	a4,a13
.L279:
	call	mem_link_valid
.L280:
	jne	d2,#0,.L33
.L485:
	mov	d15,#661
	movh.a	a15,#@his(.16.str)
	lea	a15,[a15]@los(.16.str)
.L27:
.L30:
.L32:
	st.a	[a10],a15
	st.w	[a10]4,d15
	fcall	.cocofun_28
	st.a	[a10]8,a15
	fcall	.cocofun_29
	call	Ifx_Lwip_printf
.L486:
	fcall	.cocofun_30
.L487:
	ret
.L33:
	mov	d15,#0
	st.b	[a12]-4,d15
.L488:
	mov.d	d15,a13
.L283:
	fcall	.cocofun_31
.L284:
	sub.a	a2,a13,a14
	mov.d	d1,a2
	extr.u	d1,d1,#0,#16
	ld.hu	d0,[a12]-8
	movh.a	a15,#@his(lwip_stats+176)
	ld.hu	d15,[a15]@los(lwip_stats+176)
.L489:
	sub	d0,d1
	mov.aa	a4,a13
.L286:
	sub	d15,d0
	st.h	[a15]@los(lwip_stats+176),d15
.L490:
	j	plug_holes
.L225:
	
__mem_free_function_end:
	.size	mem_free,__mem_free_function_end-mem_free
.L138:
	; End of function
	
	.sdecl	'.text.mem..cocofun_31',code,cluster('.cocofun_31')
	.sect	'.text.mem..cocofun_31'
	.align	2
; Function .cocofun_31
.L99:
.cocofun_31:	.type	func
; Function body .cocofun_31, coco_iter:0
	ld.w	d0,lfree
.L318:
	min.u	d15,d15,d0
	st.w	lfree,d15
.L282:
	fret
.L178:
	; End of function
	.sdecl	'.text.mem..cocofun_30',code,cluster('.cocofun_30')
	.sect	'.text.mem..cocofun_30'
	.align	2
; Function .cocofun_30
.L101:
.cocofun_30:	.type	func
; Function body .cocofun_30, coco_iter:0
	movh.a	a15,#@his(lwip_stats+180)
	ld.hu	d15,[a15]@los(lwip_stats+180)
	add	d15,#1
	st.h	[a15]@los(lwip_stats+180),d15
.L281:
	fret
.L173:
	; End of function
	.sdecl	'.text.mem.mem_trim',code,cluster('mem_trim')
	.sect	'.text.mem.mem_trim'
	.align	2
	
	.global	mem_trim

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   687  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   688  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   689   * Shrink memory returned by mem_malloc().
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   690   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   691   * @param rmem pointer to memory allocated by mem_malloc the is to be shrinked
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   692   * @param new_size required size after shrinking (needs to be smaller than or
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   693   *                equal to the previous size)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   694   * @return for compatibility reasons: is always == rmem, at the moment
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   695   *         or NULL if newsize is > old size, in which case rmem is NOT touched
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   696   *         or freed!
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   697   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   698  void *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   699  mem_trim(void *rmem, mem_size_t new_size)
; Function mem_trim
.L103:
mem_trim:	.type	func
	sub.a	a10,#16
.L287:
	mov.aa	a12,a4
.L289:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   700  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   701    mem_size_t size, newsize;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   702    mem_size_t ptr, ptr2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   703    struct mem *mem, *mem2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   704    /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   705    LWIP_MEM_FREE_DECL_PROTECT();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   706  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   707    /* Expand the size of the allocated memory region so that we can
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   708       adjust for alignment. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   709    newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
	fcall	.cocofun_32
.L288:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   710    if (newsize < MIN_SIZE_ALIGNED) {
	max.u	d8,d15,#12
.L290:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   711      /* every data block must be at least MIN_SIZE_ALIGNED long */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   712      newsize = MIN_SIZE_ALIGNED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   713    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   714  #if MEM_OVERFLOW_CHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   715    newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   716  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   717    if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
	mov	d9,#25600
.L386:
	jlt.u	d9,d8,.L35
.L387:
	jlt.u	d8,d4,.L36
.L388:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   718      return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   719    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   720  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   721    LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
	mov.d	d0,a12
.L293:
	ld.w	d1,ram
	jlt.u	d0,d1,.L37
	ld.w	d1,ram_end
	jlt.u	d0,d1,.L38
.L37:
	movh.a	a15,#@his(.18.str)
	lea	a15,[a15]@los(.18.str)
	st.a	[a10],a15
	mov	d15,#721
	st.w	[a10]4,d15
.L291:
	fcall	.cocofun_28
.L294:
	st.a	[a10]8,a15
	fcall	.cocofun_29
	call	Ifx_Lwip_printf
.L38:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   722                (u8_t *)rmem < (u8_t *)ram_end);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   723  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   724    if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
	mov.d	d0,a12
.L296:
	ld.w	d1,ram
.L389:
	jlt.u	d0,d1,.L39
.L390:
	ld.w	d15,ram_end
.L391:
	jlt.u	d0,d15,.L40
.L39:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   725      LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   726      /* protect mem stats from concurrent access */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   727      MEM_STATS_INC_LOCKED(illegal);
	fcall	.cocofun_30
.L392:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   728      return rmem;
	j	.L41
.L40:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   729    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   730    /* Get the corresponding struct mem ... */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   731    /* cast through void* to get rid of alignment warnings */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   732    mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
	lea	a13,[a12]-8
.L298:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   733  #if MEM_OVERFLOW_CHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   734    mem_overflow_check_element(mem);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   735  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   736    /* ... and its offset pointer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   737    ptr = mem_to_ptr(mem);
	mov.aa	a4,a13
.L299:
	call	mem_to_ptr
.L297:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   738  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   739    size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
	mov	d10,d2
	ld.hu	d0,[a12]-8
.L300:
	sub	d0,d10
.L393:
	add	d0,#-8
.L394:
	extr.u	d11,d0,#0,#16
.L301:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   740    LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
	jge.u	d11,d8,.L42
.L395:
	movh.a	a15,#@his(.20.str)
	lea	a15,[a15]@los(.20.str)
	st.a	[a10],a15
	mov	d15,#740
	st.w	[a10]4,d15
.L295:
	fcall	.cocofun_28
.L302:
	st.a	[a10]8,a15
	fcall	.cocofun_29
	call	Ifx_Lwip_printf
.L42:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   741    if (newsize > size) {
	jge.u	d11,d8,.L43

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   742      /* not supported */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   743      return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   744    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   745    if (newsize == size) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   746      /* No change in size, simply return */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   747      return rmem;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   748    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   749  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   750    /* protect the heap from concurrent access */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   751    LWIP_MEM_FREE_PROTECT();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   752  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   753    mem2 = ptr_to_mem(mem->next);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   754    if (mem2->used == 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   755      /* The next struct is unused, we can simply move it at little */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   756      mem_size_t next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   757      LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   758      /* remember the old next pointer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   759      next = mem2->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   760      /* create new struct mem which is moved directly after the shrinked mem */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   761      ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   762      if (lfree == mem2) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   763        lfree = ptr_to_mem(ptr2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   764      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   765      mem2 = ptr_to_mem(ptr2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   766      mem2->used = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   767      /* restore the next pointer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   768      mem2->next = next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   769      /* link it back to mem */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   770      mem2->prev = ptr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   771      /* link mem to it */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   772      mem->next = ptr2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   773      /* last thing to restore linked list: as we have moved mem2,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   774       * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   775       * the end of the heap */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   776      if (mem2->next != MEM_SIZE_ALIGNED) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   777        ptr_to_mem(mem2->next)->prev = ptr2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   778      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   779      MEM_STATS_DEC_USED(used, (size - newsize));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   780      /* no need to plug holes, we've already done that */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   781    } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   782      /* Next struct is used but there's room for another struct mem with
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   783       * at least MIN_SIZE_ALIGNED of data.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   784       * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   785       * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   786       * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   787       *       region that couldn't hold data, but when mem->next gets freed,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   788       *       the 2 regions would be combined, resulting in more free memory */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   789      ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   790      LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   791      mem2 = ptr_to_mem(ptr2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   792      if (mem2 < lfree) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   793        lfree = mem2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   794      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   795      mem2->used = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   796      mem2->next = mem->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   797      mem2->prev = ptr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   798      mem->next = ptr2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   799      if (mem2->next != MEM_SIZE_ALIGNED) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   800        ptr_to_mem(mem2->next)->prev = ptr2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   801      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   802      MEM_STATS_DEC_USED(used, (size - newsize));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   803      /* the original mem->next is used, so no need to plug holes! */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   804    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   805    /* else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   806      next struct mem is used but size between mem and mem2 is not big enough
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   807      to create another struct mem
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   808      -> don't do anyhting.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   809      -> the remaining space stays unused since it is too small
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   810    } */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   811  #if MEM_OVERFLOW_CHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   812    mem_overflow_init_element(mem, new_size);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   813  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   814    MEM_SANITY();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   815  #if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   816    mem_free_count = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   817  #endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   818    LWIP_MEM_FREE_UNPROTECT();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   819    return rmem;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   820  }
.L36:
.L35:
	mov.a	a2,#0
.L396:
	ret
.L43:
	jeq	d8,d11,.L45
.L397:
	ld.hu	d12,[a12]-8
	mov	d4,d12
	call	ptr_to_mem
.L304:
	mov.aa	a14,a2
.L306:
	ld.bu	d15,[a14]4
.L398:
	jne	d15,#0,.L46
.L207:
	jne	d12,d9,.L47
.L399:
	movh.a	a2,#@his(.21.str)
.L305:
	lea	a2,[a2]@los(.21.str)
	st.a	[a10],a2
	mov	d15,#757
	st.w	[a10]4,d15
.L303:
	fcall	.cocofun_28
.L307:
	st.a	[a10]8,a15
	fcall	.cocofun_29
	call	Ifx_Lwip_printf
.L47:
	add	d15,d10,d8
	ld.a	a15,lfree
.L400:
	add	d15,d15,#8
	ld.hu	d13,[a14]0
.L310:
	extr.u	d12,d15,#0,#16
.L311:
	jne.a	a15,a14,.L48
.L401:
	mov	d4,d12
	call	ptr_to_mem
.L402:
	st.a	lfree,a2
.L48:
	mov	d4,d12
	call	ptr_to_mem
.L309:
	mov	d15,#0
	st.b	[a2]4,d15
.L403:
	st.h	[a2],d13
.L404:
	st.h	[a2]2,d10
.L405:
	st.h	[a13],d12
.L406:
	ld.hu	d4,[a2]0
.L407:
	jeq	d4,d9,.L49
.L408:
	call	ptr_to_mem
.L312:
	st.h	[+a2]2,d12
.L208:
	j	.L50
.L46:
	add	d0,d8,#20
.L409:
	jlt.u	d11,d0,.L51
.L410:
	add	d15,d10,d8
.L411:
	add	d15,d15,#8
.L412:
	extr.u	d13,d15,#0,#16
.L313:
	jne	d12,d9,.L52
.L413:
	movh.a	a15,#@his(.21.str)
	lea	a15,[a15]@los(.21.str)
	st.a	[a10],a15
	mov	d15,#790
	st.w	[a10]4,d15
.L308:
	fcall	.cocofun_28
.L314:
	st.a	[a10]8,a15
	fcall	.cocofun_29
	call	Ifx_Lwip_printf
.L52:
	mov	d4,d13
	call	ptr_to_mem
.L315:
	mov.d	d15,a2
.L316:
	fcall	.cocofun_31
.L317:
	mov	d15,#0
	st.b	[a2]4,d15
.L414:
	ld.hu	d15,[a12]-8
.L415:
	st.h	[a2],d15
.L416:
	st.h	[a2]2,d10
.L417:
	st.h	[a13],d13
.L418:
	ld.hu	d4,[a2]0
.L419:
	jeq	d4,d9,.L53
.L420:
	call	ptr_to_mem
.L319:
	st.h	[+a2]2,d13
.L53:
.L50:
.L49:
	movh.a	a15,#@his(lwip_stats+176)
	ld.hu	d15,[a15]@los(lwip_stats+176)
	sub	d11,d8
.L320:
	sub	d15,d11
	st.h	[a15]@los(lwip_stats+176),d15
.L51:
.L45:
.L41:
	mov.aa	a2,a12
.L321:
	ret
.L196:
	
__mem_trim_function_end:
	.size	mem_trim,__mem_trim_function_end-mem_trim
.L123:
	; End of function
	
	.sdecl	'.text.mem..cocofun_32',code,cluster('.cocofun_32')
	.sect	'.text.mem..cocofun_32'
	.align	2
; Function .cocofun_32
.L105:
.cocofun_32:	.type	func
; Function body .cocofun_32, coco_iter:0
	add	d15,d4,#3
	extr.u	d15,d15,#0,#16
	mov.u	d0,#65532
.L292:
	and	d15,d0
	fret
.L183:
	; End of function
	.sdecl	'.text.mem.mem_malloc',code,cluster('mem_malloc')
	.sect	'.text.mem.mem_malloc'
	.align	2
	
	.global	mem_malloc

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   821  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   822  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   823   * Allocate a block of memory with a minimum of 'size' bytes.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   824   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   825   * @param size_in is the minimum size of the requested block in bytes.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   826   * @return pointer to allocated memory or NULL if no free memory was found.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   827   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   828   * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   829   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   830  void *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   831  mem_malloc(mem_size_t size_in)
; Function mem_malloc
.L107:
mem_malloc:	.type	func
	sub.a	a10,#16
.L322:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   832  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   833    mem_size_t ptr, ptr2, size;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   834    struct mem *mem, *mem2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   835  #if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   836    u8_t local_mem_free_count = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   837  #endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   838    LWIP_MEM_ALLOC_DECL_PROTECT();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   839  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   840    if (size_in == 0) {
	jeq	d4,#0,.L55
.L425:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   841      return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   842    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   843  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   844    /* Expand the size of the allocated memory region so that we can
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   845       adjust for alignment. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   846    size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
	fcall	.cocofun_32
.L426:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   847    if (size < MIN_SIZE_ALIGNED) {
	max.u	d9,d15,#12
.L324:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   848      /* every data block must be at least MIN_SIZE_ALIGNED long */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   849      size = MIN_SIZE_ALIGNED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   850    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   851  #if MEM_OVERFLOW_CHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   852    size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   853  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   854    if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
	mov	d10,#25600
.L427:
	jlt.u	d10,d9,.L56
.L428:
	jlt.u	d9,d4,.L57
.L429:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   855      return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   856    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   857  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   858    /* protect the heap from concurrent access */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   859    sys_mutex_lock(&mem_mutex);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   860    LWIP_MEM_ALLOC_PROTECT();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   861  #if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   862    /* run as long as a mem_free disturbed mem_malloc or mem_trim */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   863    do {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   864      local_mem_free_count = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   865  #endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   866  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   867      /* Scan through the heap searching for a free block that is big enough,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   868       * beginning with the lowest free block.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   869       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   870      for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
	ld.a	a4,lfree
	call	mem_to_ptr
.L323:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   871           ptr = ptr_to_mem(ptr)->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   872        mem = ptr_to_mem(ptr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   873  #if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   874        mem_free_count = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   875        LWIP_MEM_ALLOC_UNPROTECT();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   876        /* allow mem_free or mem_trim to run */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   877        LWIP_MEM_ALLOC_PROTECT();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   878        if (mem_free_count != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   879          /* If mem_free or mem_trim have run, we have to restart since they
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   880             could have altered our current struct mem. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   881          local_mem_free_count = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   882          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   883        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   884  #endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   885  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   886        if ((!mem->used) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   887            (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   888          /* mem is not used and at least perfect fit is possible:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   889           * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   890  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   891          if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   892            /* (in addition to the above, we test if another struct mem (SIZEOF_STRUCT_MEM) containing
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   893             * at least MIN_SIZE_ALIGNED of data also fits in the 'user data space' of 'mem')
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   894             * -> split large block, create empty remainder,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   895             * remainder must be large enough to contain MIN_SIZE_ALIGNED data: if
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   896             * mem->next - (ptr + (2*SIZEOF_STRUCT_MEM)) == size,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   897             * struct mem would fit in but no data between mem2 and mem2->next
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   898             * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   899             *       region that couldn't hold data, but when mem->next gets freed,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   900             *       the 2 regions would be combined, resulting in more free memory
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   901             */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   902            ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   903            LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   904            /* create mem2 struct */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   905            mem2 = ptr_to_mem(ptr2);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   906            mem2->used = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   907            mem2->next = mem->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   908            mem2->prev = ptr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   909            /* and insert it between mem and mem->next */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   910            mem->next = ptr2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   911            mem->used = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   912  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   913            if (mem2->next != MEM_SIZE_ALIGNED) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   914              ptr_to_mem(mem2->next)->prev = ptr2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   915            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   916            MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
	mov	d8,#25600
	movh.a	a12,#@his(lwip_stats)
.L430:
	mov	d11,d2
	lea	a12,[a12]@los(lwip_stats)
.L326:
	sub	d8,d9
.L431:
	mov	d12,#0
	j	.L58
.L59:
	mov	d4,d11
	call	ptr_to_mem
.L327:
	mov.aa	a13,a2
.L329:
	ld.bu	d15,[a13]4
.L432:
	jne	d15,#0,.L60
.L433:
	ld.hu	d0,[a13]0
	sub	d0,d11
	add	d0,#-8
.L434:
	jlt.u	d0,d9,.L61
.L435:
	add	d1,d9,#20
	lea	a14,[a12]176
.L436:
	mov	d8,#1
.L437:
	jlt.u	d0,d1,.L62
.L438:
	add	d15,d11,d9
.L439:
	add	d15,d15,#8
.L440:
	extr.u	d13,d15,#0,#16
.L330:
	jne	d13,d10,.L63
.L441:
	movh.a	a2,#@his(.21.str)
.L328:
	lea	a2,[a2]@los(.21.str)
	st.a	[a10],a2
	mov	d15,#903
	st.w	[a10]4,d15
.L325:
	fcall	.cocofun_28
.L331:
	st.a	[a10]8,a15
	fcall	.cocofun_29
	call	Ifx_Lwip_printf
.L63:
	mov	d4,d13
	call	ptr_to_mem
.L333:
	st.b	[a2]4,d12
.L442:
	ld.hu	d15,[a13]0
.L443:
	st.h	[a2],d15
.L444:
	st.h	[a2]2,d11
.L445:
	st.h	[a13],d13
.L446:
	st.b	[a13]4,d8
.L447:
	ld.hu	d4,[a2]0
.L448:
	jeq	d4,d10,.L64
.L449:
	call	ptr_to_mem
.L334:
	st.h	[+a2]2,d13
.L64:
	ld.hu	d15,[a12]176
	add	d0,d9,#8
.L450:
	add	d15,d0
	j	.L65
.L62:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   917          } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   918            /* (a mem2 struct does no fit into the user data space of mem and mem->next will always
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   919             * be used at this point: if not we have 2 unused structs in a row, plug_holes should have
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   920             * take care of this).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   921             * -> near fit or exact fit: do not split, no mem2 creation
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   922             * also can't move mem->next directly behind mem, since mem->next
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   923             * will always be used at this point!
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   924             */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   925            mem->used = 1;
	st.b	[a13]4,d8
.L451:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   926            MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
	mov.aa	a4,a13
.L335:
	ld.hu	d15,[a12]176
	ld.hu	d0,[a13]0
	add	d15,d0
	call	mem_to_ptr
.L336:
	sub	d15,d2
.L65:
	st.h	[a14],d15
	lea	a15,[a12]178
	ld.hu	d15,[a12]176
	ld.hu	d0,[a12]178
	jge.u	d0,d15,.L66
	st.h	[a15],d15
.L66:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   927          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   928  #if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   929  mem_malloc_adjust_lfree:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   930  #endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   931          if (mem == lfree) {
	ld.a	a2,lfree
.L337:
	jne.a	a13,a2,.L67
.L217:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   932            struct mem *cur = lfree;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   933            /* Find next free block after mem and update lowest free pointer */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   934            while (cur->used && cur != ram_end) {
	ld.a	a15,ram_end
.L452:
	j	.L68
.L69:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   935  #if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   936              mem_free_count = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   937              LWIP_MEM_ALLOC_UNPROTECT();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   938              /* prevent high interrupt latency... */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   939              LWIP_MEM_ALLOC_PROTECT();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   940              if (mem_free_count != 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   941                /* If mem_free or mem_trim have run, we have to restart since they
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   942                   could have altered our current struct mem or lfree. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   943                goto mem_malloc_adjust_lfree;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   944              }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   945  #endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   946              cur = ptr_to_mem(cur->next);
	ld.hu	d4,[a2]0
	call	ptr_to_mem
.L68:
	ld.bu	d15,[a2]4
.L453:
	jeq	d15,#0,.L70
.L454:
	jne.a	a2,a15,.L69
.L70:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   947            }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   948            lfree = cur;
	st.a	lfree,a2
.L455:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   949            LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
	jeq.a	a2,a15,.L71
.L456:
	ld.bu	d15,[a2]4
	jeq	d15,#0,.L72
	movh.a	a15,#@his(.22.str)
	lea	a15,[a15]@los(.22.str)
	st.a	[a10],a15
	mov	d15,#949
	st.w	[a10]4,d15
.L332:
	fcall	.cocofun_28
.L338:
	st.a	[a10]8,a15
	fcall	.cocofun_29
	call	Ifx_Lwip_printf
.L72:
.L71:
.L67:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   950          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   951          LWIP_MEM_ALLOC_UNPROTECT();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   952          sys_mutex_unlock(&mem_mutex);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   953          LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
	mov.d	d15,a13
.L341:
	add	d9,d15
	ld.w	d0,ram_end
.L340:
	add	d15,d9,#8
.L342:
	jge.u	d0,d15,.L73
	movh.a	a15,#@his(.23.str)
	lea	a15,[a15]@los(.23.str)
	st.a	[a10],a15
	mov	d15,#953
	st.w	[a10]4,d15
.L339:
	fcall	.cocofun_28
.L343:
	st.a	[a10]8,a15
	fcall	.cocofun_29
	call	Ifx_Lwip_printf
.L73:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   954                      (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   955          LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
	mov.d	d15,a13
.L345:
	add	d15,d15,#8
.L346:
	and	d15,#3
	jeq	d15,#0,.L74
	movh.a	a15,#@his(.24.str)
	lea	a15,[a15]@los(.24.str)
	st.a	[a10],a15
	mov	d15,#955
	st.w	[a10]4,d15
.L344:
	fcall	.cocofun_28
.L347:
	st.a	[a10]8,a15
	fcall	.cocofun_29
	call	Ifx_Lwip_printf
.L74:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   956                      ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   957          LWIP_ASSERT("mem_malloc: sanity check alignment",
	mov.d	d15,a13
.L349:
	and	d15,#3
.L350:
	jeq	d15,#0,.L75
	movh.a	a15,#@his(.25.str)
	lea	a15,[a15]@los(.25.str)
	st.a	[a10],a15
	mov	d15,#957
	st.w	[a10]4,d15
.L348:
	fcall	.cocofun_28
.L351:
	st.a	[a10]8,a15
	fcall	.cocofun_29
	call	Ifx_Lwip_printf
.L75:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   958                      (((mem_ptr_t)mem) & (MEM_ALIGNMENT - 1)) == 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   959  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   960  #if MEM_OVERFLOW_CHECK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   961          mem_overflow_init_element(mem, size_in);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   962  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   963          MEM_SANITY();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   964          return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
	lea	a2,[a13]8
.L457:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   965        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   966      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   967  #if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   968      /* if we got interrupted by a mem_free, try again */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   969    } while (local_mem_free_count != 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   970  #endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   971    MEM_STATS_INC(err);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   972    LWIP_MEM_ALLOC_UNPROTECT();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   973    sys_mutex_unlock(&mem_mutex);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   974    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   975    return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   976  }
	ret
.L61:
.L60:
	mov	d4,d11
	call	ptr_to_mem
.L352:
	ld.hu	d11,[a2]0
.L58:
	jlt.u	d11,d8,.L59
.L458:
	movh.a	a15,#@his(lwip_stats+172)
.L459:
	ld.hu	d15,[a15]@los(lwip_stats+172)
	add	d15,#1
	st.h	[a15]@los(lwip_stats+172),d15
.L57:
.L56:
.L55:
	mov.a	a2,#0
.L460:
	ret
.L210:
	
__mem_malloc_function_end:
	.size	mem_malloc,__mem_malloc_function_end-mem_malloc
.L128:
	; End of function
	
	.sdecl	'.text.mem.mem_calloc',code,cluster('mem_calloc')
	.sect	'.text.mem.mem_calloc'
	.align	2
	
	.global	mem_calloc

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   977  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   978  #endif /* MEM_USE_POOLS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   979  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   980  #if MEM_LIBC_MALLOC && (!LWIP_STATS || !MEM_STATS)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   981  void *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   982  mem_calloc(mem_size_t count, mem_size_t size)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   983  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   984    return mem_clib_calloc(count, size);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   985  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   986  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   987  #else /* MEM_LIBC_MALLOC && (!LWIP_STATS || !MEM_STATS) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   988  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   989   * Contiguously allocates enough space for count objects that are size bytes
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   990   * of memory each and returns a pointer to the allocated memory.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   991   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   992   * The allocated memory is filled with bytes of value zero.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   993   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   994   * @param count number of objects to allocate
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   995   * @param size size of the objects to allocate
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   996   * @return pointer to allocated memory / NULL pointer if there is an error
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   997   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   998  void *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	   999  mem_calloc(mem_size_t count, mem_size_t size)
; Function mem_calloc
.L109:
mem_calloc:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	  1000  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	  1001    void *p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	  1002    size_t alloc_size = (size_t)count * (size_t)size;
	mul	d8,d4,d5
.L354:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	  1003  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	  1004    if ((size_t)(mem_size_t)alloc_size != alloc_size) {
	extr.u	d15,d8,#0,#16
.L465:
	jeq	d15,d8,.L78
.L466:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	  1005      LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	  1006      return NULL;
	mov.a	a2,#0
.L467:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	  1007    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	  1008  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	  1009    /* allocate 'count' objects of size 'size' */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	  1010    p = mem_malloc((mem_size_t)alloc_size);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	  1011    if (p) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	  1012      /* zero the memory */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	  1013      memset(p, 0, alloc_size);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	  1014    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	  1015    return p;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	  1016  }
	ret
.L78:
	mov	d4,d15
	call	mem_malloc
.L353:
	mov.aa	a15,a2
.L356:
	jz.a	a15,.L80
.L468:
	mov	d4,#0
	mov.aa	a4,a15
.L355:
	mov	d5,d8
	call	memset
.L80:
	mov.aa	a2,a15
.L357:
	ret
.L219:
	
__mem_calloc_function_end:
	.size	mem_calloc,__mem_calloc_function_end-mem_calloc
.L133:
	; End of function
	
	.sdecl	'.bss.mem.ram_heap',data,cluster('ram_heap')
	.sect	'.bss.mem.ram_heap'
	.global	ram_heap
ram_heap:	.type	object
	.size	ram_heap,25619
	.space	25619
	.sdecl	'.zbss.mem.ram',data,cluster('ram')
	.sect	'.zbss.mem.ram'
	.align	4
ram:	.type	object
	.size	ram,4
	.space	4
	.sdecl	'.zbss.mem.ram_end',data,cluster('ram_end')
	.sect	'.zbss.mem.ram_end'
	.align	4
ram_end:	.type	object
	.size	ram_end,4
	.space	4
	.sdecl	'.zbss.mem.lfree',data,cluster('lfree')
	.sect	'.zbss.mem.lfree'
	.align	4
lfree:	.type	object
	.size	lfree,4
	.space	4
	.sdecl	'.rodata.mem..1.str',data,rom
	.sect	'.rodata.mem..1.str'
.1.str:	.type	object
	.size	.1.str,40
	.byte	65,115,115,101
	.byte	114,116,105,111
	.byte	110,32,34,37
	.byte	115,34,32,102
	.byte	97,105,108,101
	.byte	100,32,97,116
	.byte	32,108,105,110
	.byte	101,32,37,100
	.byte	32,105,110,32
	.byte	37,115,10
	.space	1
	.sdecl	'.rodata.mem..2.str',data,rom
	.sect	'.rodata.mem..2.str'
.2.str:	.type	object
	.size	.2.str,23
	.byte	112,108,117,103
	.byte	95,104,111,108
	.byte	101,115,58,32
	.byte	109,101,109,32
	.byte	62,61,32,114
	.byte	97,109
	.space	1
	.sdecl	'.rodata.mem..3.str',data,rom
	.sect	'.rodata.mem..3.str'
.3.str:	.type	object
	.size	.3.str,46
	.byte	46,46,92,48
	.byte	95,83,114,99
	.byte	92,48,95,65
	.byte	112,112,83,119
	.byte	92,69,116,104
	.byte	101,114,110,101
	.byte	116,92,108,119
	.byte	105,112,92,115
	.byte	114,99,92,99
	.byte	111,114,101,92
	.byte	109,101,109,46
	.byte	99
	.space	1
	.sdecl	'.rodata.mem..4.str',data,rom
	.sect	'.rodata.mem..4.str'
.4.str:	.type	object
	.size	.4.str,26
	.byte	112,108,117,103
	.byte	95,104,111,108
	.byte	101,115,58,32
	.byte	109,101,109,32
	.byte	60,32,114,97
	.byte	109,95,101,110
	.byte	100
	.space	1
	.sdecl	'.rodata.mem..5.str',data,rom
	.sect	'.rodata.mem..5.str'
.5.str:	.type	object
	.size	.5.str,27
	.byte	112,108,117,103
	.byte	95,104,111,108
	.byte	101,115,58,32
	.byte	109,101,109,45
	.byte	62,117,115,101
	.byte	100,32,61,61
	.byte	32,48
	.space	1
	.sdecl	'.rodata.mem..6.str',data,rom
	.sect	'.rodata.mem..6.str'
.6.str:	.type	object
	.size	.6.str,42
	.byte	112,108,117,103
	.byte	95,104,111,108
	.byte	101,115,58,32
	.byte	109,101,109,45
	.byte	62,110,101,120
	.byte	116,32,60,61
	.byte	32,77,69,77
	.byte	95,83,73,90
	.byte	69,95,65,76
	.byte	73,71,78,69
	.byte	68
	.space	1
	.sdecl	'.rodata.mem..10.str',data,rom
	.sect	'.rodata.mem..10.str'
.10.str:	.type	object
	.size	.10.str,33
	.byte	109,101,109,95
	.byte	102,114,101,101
	.byte	58,32,115,97
	.byte	110,105,116,121
	.byte	32,99,104,101
	.byte	99,107,32,97
	.byte	108,105,103,110
	.byte	109,101,110,116
	.space	1
	.sdecl	'.rodata.mem..12.str',data,rom
	.sect	'.rodata.mem..12.str'
.12.str:	.type	object
	.size	.12.str,25
	.byte	109,101,109,95
	.byte	102,114,101,101
	.byte	58,32,105,108
	.byte	108,101,103,97
	.byte	108,32,109,101
	.byte	109,111,114,121
	.space	1
	.sdecl	'.rodata.mem..14.str',data,rom
	.sect	'.rodata.mem..14.str'
.14.str:	.type	object
	.size	.14.str,38
	.byte	109,101,109,95
	.byte	102,114,101,101
	.byte	58,32,105,108
	.byte	108,101,103,97
	.byte	108,32,109,101
	.byte	109,111,114,121
	.byte	58,32,100,111
	.byte	117,98,108,101
	.byte	32,102,114,101
	.byte	101
	.space	1
	.sdecl	'.rodata.mem..16.str',data,rom
	.sect	'.rodata.mem..16.str'
.16.str:	.type	object
	.size	.16.str,50
	.byte	109,101,109,95
	.byte	102,114,101,101
	.byte	58,32,105,108
	.byte	108,101,103,97
	.byte	108,32,109,101
	.byte	109,111,114,121
	.byte	58,32,110,111
	.byte	110,45,108,105
	.byte	110,107,101,100
	.byte	58,32,100,111
	.byte	117,98,108,101
	.byte	32,102,114,101
	.byte	101
	.space	1
	.sdecl	'.rodata.mem..18.str',data,rom
	.sect	'.rodata.mem..18.str'
.18.str:	.type	object
	.size	.18.str,23
	.byte	109,101,109,95
	.byte	116,114,105,109
	.byte	58,32,108,101
	.byte	103,97,108,32
	.byte	109,101,109,111
	.byte	114,121
	.space	1
	.sdecl	'.rodata.mem..20.str',data,rom
	.sect	'.rodata.mem..20.str'
.20.str:	.type	object
	.size	.20.str,32
	.byte	109,101,109,95
	.byte	116,114,105,109
	.byte	32,99,97,110
	.byte	32,111,110,108
	.byte	121,32,115,104
	.byte	114,105,110,107
	.byte	32,109,101,109
	.byte	111,114,121
	.space	1
	.sdecl	'.rodata.mem..21.str',data,rom
	.sect	'.rodata.mem..21.str'
.21.str:	.type	object
	.size	.21.str,17
	.byte	105,110,118,97
	.byte	108,105,100,32
	.byte	110,101,120,116
	.byte	32,112,116,114
	.space	1
	.sdecl	'.rodata.mem..22.str',data,rom
	.sect	'.rodata.mem..22.str'
.22.str:	.type	object
	.size	.22.str,25
	.byte	109,101,109,95
	.byte	109,97,108,108
	.byte	111,99,58,32
	.byte	33,108,102,114
	.byte	101,101,45,62
	.byte	117,115,101,100
	.space	1
	.sdecl	'.rodata.mem..23.str',data,rom
	.sect	'.rodata.mem..23.str'
.23.str:	.type	object
	.size	.23.str,48
	.byte	109,101,109,95
	.byte	109,97,108,108
	.byte	111,99,58,32
	.byte	97,108,108,111
	.byte	99,97,116,101
	.byte	100,32,109,101
	.byte	109,111,114,121
	.byte	32,110,111,116
	.byte	32,97,98,111
	.byte	118,101,32,114
	.byte	97,109,95,101
	.byte	110,100,46
	.space	1
	.sdecl	'.rodata.mem..24.str',data,rom
	.sect	'.rodata.mem..24.str'
.24.str:	.type	object
	.size	.24.str,47
	.byte	109,101,109,95
	.byte	109,97,108,108
	.byte	111,99,58,32
	.byte	97,108,108,111
	.byte	99,97,116,101
	.byte	100,32,109,101
	.byte	109,111,114,121
	.byte	32,112,114,111
	.byte	112,101,114,108
	.byte	121,32,97,108
	.byte	105,103,110,101
	.byte	100,46
	.space	1
	.sdecl	'.rodata.mem..25.str',data,rom
	.sect	'.rodata.mem..25.str'
.25.str:	.type	object
	.size	.25.str,35
	.byte	109,101,109,95
	.byte	109,97,108,108
	.byte	111,99,58,32
	.byte	115,97,110,105
	.byte	116,121,32,99
	.byte	104,101,99,107
	.byte	32,97,108,105
	.byte	103,110,109,101
	.byte	110,116
	.space	1
	.calls	'plug_holes','Ifx_Lwip_printf'
	.calls	'plug_holes','ptr_to_mem'
	.calls	'plug_holes','mem_to_ptr'
	.calls	'mem_init','ptr_to_mem'
	.calls	'mem_link_valid','mem_to_ptr'
	.calls	'mem_link_valid','ptr_to_mem'
	.calls	'mem_free','Ifx_Lwip_printf'
	.calls	'mem_free','mem_link_valid'
	.calls	'mem_free','plug_holes'
	.calls	'mem_trim','Ifx_Lwip_printf'
	.calls	'mem_trim','mem_to_ptr'
	.calls	'mem_trim','ptr_to_mem'
	.calls	'mem_malloc','mem_to_ptr'
	.calls	'mem_malloc','ptr_to_mem'
	.calls	'mem_malloc','Ifx_Lwip_printf'
	.calls	'mem_calloc','mem_malloc'
	.calls	'mem_calloc','memset'
	.calls	'plug_holes','.cocofun_28'
	.calls	'plug_holes','.cocofun_29'
	.calls	'mem_free','.cocofun_28'
	.calls	'mem_free','.cocofun_29'
	.calls	'mem_free','.cocofun_30'
	.calls	'mem_free','.cocofun_31'
	.calls	'mem_trim','.cocofun_32'
	.calls	'mem_trim','.cocofun_28'
	.calls	'mem_trim','.cocofun_29'
	.calls	'mem_trim','.cocofun_30'
	.calls	'mem_trim','.cocofun_31'
	.calls	'mem_malloc','.cocofun_32'
	.calls	'mem_malloc','.cocofun_28'
	.calls	'mem_malloc','.cocofun_29'
	.calls	'ptr_to_mem','',0
	.calls	'mem_to_ptr','',0
	.calls	'plug_holes','',16
	.calls	'.cocofun_29','',0
	.calls	'.cocofun_28','',0
	.calls	'mem_init','',0
	.calls	'mem_link_valid','',0
	.calls	'mem_free','',16
	.calls	'.cocofun_31','',0
	.calls	'.cocofun_30','',0
	.calls	'mem_trim','',16
	.calls	'.cocofun_32','',0
	.calls	'mem_malloc','',16
	.extern	Ifx_Lwip_printf
	.extern	lwip_stats
	.extern	memset
	.calls	'mem_calloc','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L111:
	.word	1464
	.half	3
	.word	.L112
	.byte	4
.L110:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L113
.L238:
	.byte	2
	.byte	'int',0,4,5,3
	.word	165
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	172
	.byte	0
.L223:
	.byte	2
	.byte	'unsigned int',0,4,7,6
	.word	214
	.byte	7
	.word	214
	.byte	8
	.byte	'__cmpswapw',0
	.word	230
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	235
	.byte	9
	.byte	'value',0
	.word	214
	.byte	9
	.byte	'compare',0
	.word	214
	.byte	0,2
	.byte	'char',0,1,6,2
	.byte	'char',0,1,6,3
	.word	300
	.byte	7
	.word	308
	.byte	10
	.byte	'Ifx_Lwip_printf',0,1,123,6
	.word	292
	.byte	1,1,1,1,11
	.byte	's',0,1,123,34
	.word	313
	.byte	12,1,123,37,0
.L198:
	.byte	2
	.byte	'unsigned short int',0,2,7,2
	.byte	'unsigned char',0,1,8,13
	.byte	'mem',0,2,221,2,8,6,14
	.byte	'next',0
	.word	361
	.byte	2,2,35,0,14
	.byte	'prev',0
	.word	361
	.byte	2,2,35,2,14
	.byte	'used',0
	.word	383
	.byte	1,2,35,4,0
.L193:
	.byte	7
	.word	400
	.byte	15
	.byte	'void',0
.L195:
	.byte	7
	.word	458
	.byte	10
	.byte	'memset',0,3,56,17
	.word	464
	.byte	1,1,1,1,16,3,56,33
	.word	464
	.byte	16,3,56,36
	.word	165
	.byte	16,3,56,41
	.word	214
	.byte	0,2
	.byte	'short int',0,2,5,17
	.byte	'__wchar_t',0,2,1,1
	.word	513
	.byte	17
	.byte	'__size_t',0,2,1,1
	.word	214
	.byte	17
	.byte	'__ptrdiff_t',0,2,1,1
	.word	165
	.byte	18,1,7
	.word	581
	.byte	17
	.byte	'__codeptr',0,2,1,1
	.word	583
	.byte	17
	.byte	'__intptr_t',0,2,1,1
	.word	165
	.byte	17
	.byte	'__uintptr_t',0,2,1,1
	.word	214
	.byte	17
	.byte	'size_t',0,4,24,25
	.word	214
	.byte	17
	.byte	'uint8',0,5,108,29
	.word	383
	.byte	17
	.byte	'uint16',0,5,112,29
	.word	361
	.byte	2
	.byte	'unsigned long int',0,4,7,17
	.byte	'uint32',0,5,116,29
	.word	689
	.byte	17
	.byte	'sint8',0,5,125,29
	.word	292
	.byte	17
	.byte	'sint16',0,5,129,1,29
	.word	513
	.byte	2
	.byte	'long int',0,4,5,17
	.byte	'sint32',0,5,134,1,29
	.word	755
	.byte	2
	.byte	'long long int',0,8,5,17
	.byte	'sint64',0,5,141,1,29
	.word	783
	.byte	2
	.byte	'float',0,4,4,17
	.byte	'float32',0,5,170,1,29
	.word	816
	.byte	17
	.byte	'pvoid',0,6,54,28
	.word	464
	.byte	17
	.byte	'Ifx_TickTime',0,6,76,28
	.word	783
	.byte	17
	.byte	'u8_t',0,1,85,16
	.word	383
	.byte	17
	.byte	'u16_t',0,1,86,16
	.word	361
	.byte	17
	.byte	'u32_t',0,1,87,16
	.word	689
	.byte	17
	.byte	's8_t',0,1,88,16
	.word	292
	.byte	17
	.byte	'intmax_t',0,7,198,2,41
	.word	783
	.byte	17
	.byte	'mem_size_t',0,8,67,15
	.word	361
	.byte	13
	.byte	'stats_proto',0,9,64,8,24,14
	.byte	'xmit',0
	.word	361
	.byte	2,2,35,0,14
	.byte	'recv',0
	.word	361
	.byte	2,2,35,2,14
	.byte	'fw',0
	.word	361
	.byte	2,2,35,4,14
	.byte	'drop',0
	.word	361
	.byte	2,2,35,6,14
	.byte	'chkerr',0
	.word	361
	.byte	2,2,35,8,14
	.byte	'lenerr',0
	.word	361
	.byte	2,2,35,10,14
	.byte	'memerr',0
	.word	361
	.byte	2,2,35,12,14
	.byte	'rterr',0
	.word	361
	.byte	2,2,35,14,14
	.byte	'proterr',0
	.word	361
	.byte	2,2,35,16,14
	.byte	'opterr',0
	.word	361
	.byte	2,2,35,18,14
	.byte	'err',0
	.word	361
	.byte	2,2,35,20,14
	.byte	'cachehit',0
	.word	361
	.byte	2,2,35,22,0,13
	.byte	'stats_mem',0,9,98,8,16,14
	.byte	'name',0
	.word	313
	.byte	4,2,35,0,14
	.byte	'err',0
	.word	361
	.byte	2,2,35,4,14
	.byte	'avail',0
	.word	361
	.byte	2,2,35,6,14
	.byte	'used',0
	.word	361
	.byte	2,2,35,8,14
	.byte	'max',0
	.word	361
	.byte	2,2,35,10,14
	.byte	'illegal',0
	.word	361
	.byte	2,2,35,12,0,7
	.word	1167
	.byte	19,36
	.word	1269
	.byte	20,8,0,13
	.byte	'stats_',0,9,232,1,8,220,1,14
	.byte	'link',0
	.word	968
	.byte	24,2,35,0,14
	.byte	'etharp',0
	.word	968
	.byte	24,2,35,24,14
	.byte	'ip_frag',0
	.word	968
	.byte	24,2,35,48,14
	.byte	'ip',0
	.word	968
	.byte	24,2,35,72,14
	.byte	'icmp',0
	.word	968
	.byte	24,2,35,96,14
	.byte	'udp',0
	.word	968
	.byte	24,2,35,120,14
	.byte	'tcp',0
	.word	968
	.byte	24,3,35,144,1,14
	.byte	'mem',0
	.word	1167
	.byte	16,3,35,168,1,14
	.byte	'memp',0
	.word	1274
	.byte	36,3,35,184,1,0,21
	.byte	'lwip_stats',0,9,176,2,22
	.word	1283
	.byte	1,1
.L244:
	.byte	19,147,200,1
	.word	383
	.byte	20,146,200,1,0
.L245:
	.byte	7
	.word	383
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L112:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,11
	.byte	5,0,3,8,58,15,59,15,57,15,73,19,0,0,12,24,0,58,15,59,15,57,15,0,0,13,19,1,3,8,58,15,59,15,57,15,11,15
	.byte	0,0,14,13,0,3,8,73,19,11,15,56,9,0,0,15,59,0,3,8,0,0,16,5,0,58,15,59,15,57,15,73,19,0,0,17,22,0,3,8,58
	.byte	15,59,15,57,15,73,19,0,0,18,21,0,54,15,0,0,19,1,1,11,15,73,19,0,0,20,33,0,47,15,0,0,21,52,0,3,8,58,15
	.byte	59,15,57,15,73,19,63,12,60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L113:
	.word	.L359-.L358
.L358:
	.half	3
	.word	.L361-.L360
.L360:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip',0
	.byte	0
	.byte	'cc.h',0,1,0,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0,0,0,0
	.byte	'string.h',0,2,0,0
	.byte	'stddef.h',0,2,0,0
	.byte	'Platform_Types.h',0,3,0,0
	.byte	'Ifx_Types.h',0,3,0,0
	.byte	'stdint.h',0,2,0,0
	.byte	'mem.h',0,4,0,0
	.byte	'stats.h',0,4,0,0,0
.L361:
.L359:
	.sdecl	'.debug_info',debug,cluster('mem_init')
	.sect	'.debug_info'
.L114:
	.word	228
	.half	3
	.word	.L115
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L117,.L116
	.byte	2
	.word	.L110
	.byte	3
	.byte	'mem_init',0,1,132,4,1,1,1,1
	.word	.L93,.L192,.L92
	.byte	4
	.word	.L93,.L192
	.byte	5
	.byte	'mem',0,1,134,4,15
	.word	.L193,.L194
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('mem_init')
	.sect	'.debug_abbrev'
.L115:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('mem_init')
	.sect	'.debug_line'
.L116:
	.word	.L363-.L362
.L362:
	.half	3
	.word	.L365-.L364
.L364:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0,0,0,0,0
.L365:
	.byte	5,17,7,0,5,2
	.word	.L93
	.byte	3,139,4,1,5,7,9
	.half	.L366-.L93
	.byte	1,5,15,9
	.half	.L367-.L366
	.byte	3,3,1,5,31,9
	.half	.L368-.L367
	.byte	3,127,1,5,15,9
	.half	.L369-.L368
	.byte	3,2,1,5,24,9
	.half	.L370-.L369
	.byte	3,3,1,5,13,9
	.half	.L371-.L370
	.byte	3,124,1,9
	.half	.L372-.L371
	.byte	3,1,1,9
	.half	.L373-.L372
	.byte	3,1,1,5,24,9
	.half	.L374-.L373
	.byte	3,2,1,5,11,9
	.half	.L375-.L374
	.byte	1,5,19,9
	.half	.L376-.L375
	.byte	3,1,1,5,17,1,9
	.half	.L377-.L376
	.byte	3,1,1,9
	.half	.L378-.L377
	.byte	3,1,1,5,9,9
	.half	.L379-.L378
	.byte	3,4,1,5,3,9
	.half	.L380-.L379
	.byte	3,2,1,5,1,9
	.half	.L381-.L380
	.byte	3,5,1,7,9
	.half	.L118-.L381
	.byte	0,1,1
.L363:
	.sdecl	'.debug_ranges',debug,cluster('mem_init')
	.sect	'.debug_ranges'
.L117:
	.word	-1,.L93,0,.L118-.L93,0,0
	.sdecl	'.debug_info',debug,cluster('mem_trim')
	.sect	'.debug_info'
.L119:
	.word	388
	.half	3
	.word	.L120
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L122,.L121
	.byte	2
	.word	.L110
	.byte	3
	.byte	'mem_trim',0,1,187,5,1
	.word	.L195
	.byte	1,1,1
	.word	.L103,.L196,.L102
	.byte	4
	.byte	'rmem',0,1,187,5,16
	.word	.L195,.L197
	.byte	4
	.byte	'new_size',0,1,187,5,33
	.word	.L198,.L199
	.byte	5
	.word	.L200
	.byte	6
	.byte	'size',0,1,189,5,14
	.word	.L198,.L201
	.byte	6
	.byte	'newsize',0,1,189,5,20
	.word	.L198,.L202
	.byte	6
	.byte	'ptr',0,1,190,5,14
	.word	.L198,.L203
	.byte	6
	.byte	'ptr2',0,1,190,5,19
	.word	.L198,.L204
	.byte	6
	.byte	'mem',0,1,191,5,15
	.word	.L193,.L205
	.byte	6
	.byte	'mem2',0,1,191,5,21
	.word	.L193,.L206
	.byte	7
	.word	.L207,.L208
	.byte	6
	.byte	'next',0,1,244,5,16
	.word	.L198,.L209
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('mem_trim')
	.sect	'.debug_abbrev'
.L120:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,1,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('mem_trim')
	.sect	'.debug_line'
.L121:
	.word	.L383-.L382
.L382:
	.half	3
	.word	.L385-.L384
.L384:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0,0,0,0,0
.L385:
	.byte	5,1,7,0,5,2
	.word	.L103
	.byte	3,186,5,1,5,25,9
	.half	.L289-.L103
	.byte	3,10,1,5,15,9
	.half	.L288-.L289
	.byte	3,1,1,5,18,9
	.half	.L290-.L288
	.byte	3,7,1,5,7,9
	.half	.L386-.L290
	.byte	1,5,48,7,9
	.half	.L387-.L386
	.byte	1,5,3,7,9
	.half	.L388-.L387
	.byte	3,4,1,5,15,9
	.half	.L38-.L388
	.byte	3,3,1,5,30,9
	.half	.L296-.L38
	.byte	1,5,7,9
	.half	.L389-.L296
	.byte	1,5,61,7,9
	.half	.L390-.L389
	.byte	1,5,50,9
	.half	.L391-.L390
	.byte	1,5,5,7,9
	.half	.L39-.L391
	.byte	3,3,1,9
	.half	.L392-.L39
	.byte	3,1,1,5,66,9
	.half	.L40-.L392
	.byte	3,4,1,5,20,9
	.half	.L298-.L40
	.byte	3,5,1,5,7,9
	.half	.L297-.L298
	.byte	1,5,39,3,2,1,5,46,9
	.half	.L300-.L297
	.byte	1,5,53,9
	.half	.L393-.L300
	.byte	1,5,10,9
	.half	.L394-.L393
	.byte	1,5,3,9
	.half	.L301-.L394
	.byte	3,1,1,7,9
	.half	.L395-.L301
	.byte	1,9
	.half	.L42-.L395
	.byte	3,1,1,5,12,7,9
	.half	.L35-.L42
	.byte	3,2,1,5,1,9
	.half	.L396-.L35
	.byte	3,205,0,1,5,3,7,9
	.half	.L43-.L396
	.byte	3,181,127,1,5,24,7,9
	.half	.L397-.L43
	.byte	3,8,1,5,8,9
	.half	.L304-.L397
	.byte	1,5,11,9
	.half	.L306-.L304
	.byte	3,1,1,5,3,9
	.half	.L398-.L306
	.byte	1,5,5,7,9
	.half	.L207-.L398
	.byte	3,3,1,7,9
	.half	.L399-.L207
	.byte	1,5,49,9
	.half	.L47-.L399
	.byte	3,4,1,5,9,3,1,1,5,29,9
	.half	.L400-.L47
	.byte	3,127,1,5,16,3,126,1,5,12,9
	.half	.L310-.L400
	.byte	3,2,1,5,5,9
	.half	.L311-.L310
	.byte	3,1,1,5,26,7,9
	.half	.L401-.L311
	.byte	3,1,1,5,13,9
	.half	.L402-.L401
	.byte	1,5,23,9
	.half	.L48-.L402
	.byte	3,2,1,5,18,9
	.half	.L309-.L48
	.byte	3,1,1,5,16,1,9
	.half	.L403-.L309
	.byte	3,2,1,9
	.half	.L404-.L403
	.byte	3,2,1,5,15,9
	.half	.L405-.L404
	.byte	3,2,1,5,13,9
	.half	.L406-.L405
	.byte	3,4,1,5,5,9
	.half	.L407-.L406
	.byte	1,5,22,7,9
	.half	.L408-.L407
	.byte	3,1,1,5,36,9
	.half	.L312-.L408
	.byte	1,5,47,9
	.half	.L208-.L312
	.byte	3,2,1,5,14,9
	.half	.L46-.L208
	.byte	3,2,1,5,10,9
	.half	.L409-.L46
	.byte	1,5,49,7,9
	.half	.L410-.L409
	.byte	3,8,1,5,29,9
	.half	.L411-.L410
	.byte	1,5,12,9
	.half	.L412-.L411
	.byte	1,5,5,9
	.half	.L313-.L412
	.byte	3,1,1,7,9
	.half	.L413-.L313
	.byte	1,5,23,9
	.half	.L52-.L413
	.byte	3,1,1,5,9,9
	.half	.L315-.L52
	.byte	3,1,1,5,16,9
	.half	.L316-.L315
	.byte	1,5,18,9
	.half	.L317-.L316
	.byte	3,3,1,5,16,1,5,21,9
	.half	.L414-.L317
	.byte	3,1,1,5,16,9
	.half	.L415-.L414
	.byte	1,9
	.half	.L416-.L415
	.byte	3,1,1,5,15,9
	.half	.L417-.L416
	.byte	3,1,1,5,13,9
	.half	.L418-.L417
	.byte	3,1,1,5,5,9
	.half	.L419-.L418
	.byte	1,5,22,7,9
	.half	.L420-.L419
	.byte	3,1,1,5,36,9
	.half	.L319-.L420
	.byte	1,5,5,9
	.half	.L49-.L319
	.byte	3,2,1,5,3,9
	.half	.L41-.L49
	.byte	3,17,1,5,1,9
	.half	.L321-.L41
	.byte	3,1,1,7,9
	.half	.L123-.L321
	.byte	0,1,1
.L383:
	.sdecl	'.debug_ranges',debug,cluster('mem_trim')
	.sect	'.debug_ranges'
.L122:
	.word	-1,.L103,0,.L123-.L103,0,0
.L200:
	.word	-1,.L103,0,.L196-.L103,-1,.L105,0,.L183-.L105,0,0
	.sdecl	'.debug_info',debug,cluster('mem_malloc')
	.sect	'.debug_info'
.L124:
	.word	353
	.half	3
	.word	.L125
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L127,.L126
	.byte	2
	.word	.L110
	.byte	3
	.byte	'mem_malloc',0,1,191,6,1
	.word	.L195
	.byte	1,1,1
	.word	.L107,.L210,.L106
	.byte	4
	.byte	'size_in',0,1,191,6,23
	.word	.L198,.L211
	.byte	5
	.word	.L107,.L210
	.byte	6
	.byte	'ptr',0,1,193,6,14
	.word	.L198,.L212
	.byte	6
	.byte	'ptr2',0,1,193,6,19
	.word	.L198,.L213
	.byte	6
	.byte	'size',0,1,193,6,25
	.word	.L198,.L214
	.byte	6
	.byte	'mem',0,1,194,6,15
	.word	.L193,.L215
	.byte	6
	.byte	'mem2',0,1,194,6,21
	.word	.L193,.L216
	.byte	5
	.word	.L217,.L67
	.byte	6
	.byte	'cur',0,1,164,7,23
	.word	.L193,.L218
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('mem_malloc')
	.sect	'.debug_abbrev'
.L125:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('mem_malloc')
	.sect	'.debug_line'
.L126:
	.word	.L422-.L421
.L421:
	.half	3
	.word	.L424-.L423
.L423:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0,0,0,0,0
.L424:
	.byte	5,1,7,0,5,2
	.word	.L107
	.byte	3,190,6,1,5,3,9
	.half	.L322-.L107
	.byte	3,9,1,5,22,7,9
	.half	.L425-.L322
	.byte	3,6,1,5,12,9
	.half	.L426-.L425
	.byte	3,1,1,5,15,9
	.half	.L324-.L426
	.byte	3,7,1,5,7,9
	.half	.L427-.L324
	.byte	1,5,42,7,9
	.half	.L428-.L427
	.byte	1,5,27,7,9
	.half	.L429-.L428
	.byte	3,16,1,5,41,9
	.half	.L323-.L429
	.byte	1,5,11,3,46,1,5,14,9
	.half	.L430-.L323
	.byte	3,82,1,5,11,3,46,1,5,58,9
	.half	.L326-.L430
	.byte	3,82,1,5,33,9
	.half	.L431-.L326
	.byte	1,5,64,1,5,24,9
	.half	.L59-.L431
	.byte	3,2,1,5,11,9
	.half	.L327-.L59
	.byte	1,5,16,9
	.half	.L329-.L327
	.byte	3,14,1,5,13,9
	.half	.L432-.L329
	.byte	1,5,15,7,9
	.half	.L433-.L432
	.byte	3,1,1,5,51,9
	.half	.L434-.L433
	.byte	1,5,55,7,9
	.half	.L435-.L434
	.byte	3,4,1,5,11,3,25,1,5,51,9
	.half	.L436-.L435
	.byte	3,99,1,5,9,9
	.half	.L437-.L436
	.byte	3,4,1,5,55,7,9
	.half	.L438-.L437
	.byte	3,11,1,5,35,9
	.half	.L439-.L438
	.byte	1,5,18,9
	.half	.L440-.L439
	.byte	1,5,11,9
	.half	.L330-.L440
	.byte	3,1,1,7,9
	.half	.L441-.L330
	.byte	1,5,29,9
	.half	.L63-.L441
	.byte	3,2,1,5,22,9
	.half	.L333-.L63
	.byte	3,1,1,5,27,9
	.half	.L442-.L333
	.byte	3,1,1,5,22,9
	.half	.L443-.L442
	.byte	1,9
	.half	.L444-.L443
	.byte	3,1,1,5,21,9
	.half	.L445-.L444
	.byte	3,2,1,9
	.half	.L446-.L445
	.byte	3,1,1,5,19,9
	.half	.L447-.L446
	.byte	3,2,1,5,11,9
	.half	.L448-.L447
	.byte	1,5,28,7,9
	.half	.L449-.L448
	.byte	3,1,1,5,42,9
	.half	.L334-.L449
	.byte	1,5,11,9
	.half	.L64-.L334
	.byte	3,2,1,5,63,9
	.half	.L450-.L64
	.byte	1,5,21,9
	.half	.L62-.L450
	.byte	3,9,1,5,11,9
	.half	.L451-.L62
	.byte	3,1,1,5,20,9
	.half	.L66-.L451
	.byte	3,5,1,5,9,9
	.half	.L337-.L66
	.byte	1,5,38,7,9
	.half	.L217-.L337
	.byte	3,3,1,5,45,9
	.half	.L452-.L217
	.byte	1,5,33,9
	.half	.L69-.L452
	.byte	3,12,1,5,21,9
	.half	.L68-.L69
	.byte	3,116,1,5,18,9
	.half	.L453-.L68
	.byte	1,5,35,7,9
	.half	.L454-.L453
	.byte	1,5,17,7,9
	.half	.L70-.L454
	.byte	3,14,1,5,11,9
	.half	.L455-.L70
	.byte	3,1,1,7,9
	.half	.L456-.L455
	.byte	1,5,9,9
	.half	.L67-.L456
	.byte	3,4,1,9
	.half	.L73-.L67
	.byte	3,2,1,9
	.half	.L74-.L73
	.byte	3,2,1,5,28,9
	.half	.L75-.L74
	.byte	3,7,1,5,1,9
	.half	.L457-.L75
	.byte	3,12,1,5,27,7,9
	.half	.L60-.L457
	.byte	3,151,127,1,5,31,9
	.half	.L352-.L60
	.byte	1,5,64,9
	.half	.L58-.L352
	.byte	3,127,1,5,11,7,9
	.half	.L458-.L58
	.byte	3,46,1,5,3,9
	.half	.L459-.L458
	.byte	3,55,1,5,10,9
	.half	.L55-.L459
	.byte	3,4,1,5,1,9
	.half	.L460-.L55
	.byte	3,1,1,7,9
	.half	.L128-.L460
	.byte	0,1,1
.L422:
	.sdecl	'.debug_ranges',debug,cluster('mem_malloc')
	.sect	'.debug_ranges'
.L127:
	.word	-1,.L107,0,.L128-.L107,0,0
	.sdecl	'.debug_info',debug,cluster('mem_calloc')
	.sect	'.debug_info'
.L129:
	.word	293
	.half	3
	.word	.L130
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L132,.L131
	.byte	2
	.word	.L110
	.byte	3
	.byte	'mem_calloc',0,1,231,7,1
	.word	.L195
	.byte	1,1,1
	.word	.L109,.L219,.L108
	.byte	4
	.byte	'count',0,1,231,7,23
	.word	.L198,.L220
	.byte	4
	.byte	'size',0,1,231,7,41
	.word	.L198,.L221
	.byte	5
	.word	.L109,.L219
	.byte	6
	.byte	'p',0,1,233,7,9
	.word	.L195,.L222
	.byte	6
	.byte	'alloc_size',0,1,234,7,10
	.word	.L223,.L224
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('mem_calloc')
	.sect	'.debug_abbrev'
.L130:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('mem_calloc')
	.sect	'.debug_line'
.L131:
	.word	.L462-.L461
.L461:
	.half	3
	.word	.L464-.L463
.L463:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0,0,0,0,0
.L464:
	.byte	5,37,7,0,5,2
	.word	.L109
	.byte	3,233,7,1,5,15,9
	.half	.L354-.L109
	.byte	3,2,1,5,3,9
	.half	.L465-.L354
	.byte	1,5,12,7,9
	.half	.L466-.L465
	.byte	3,2,1,5,1,9
	.half	.L467-.L466
	.byte	3,10,1,5,18,7,9
	.half	.L78-.L467
	.byte	3,122,1,5,5,9
	.half	.L353-.L78
	.byte	1,5,3,9
	.half	.L356-.L353
	.byte	3,1,1,5,15,7,9
	.half	.L468-.L356
	.byte	3,2,1,5,18,1,5,3,9
	.half	.L80-.L468
	.byte	3,2,1,5,1,9
	.half	.L357-.L80
	.byte	3,1,1,7,9
	.half	.L133-.L357
	.byte	0,1,1
.L462:
	.sdecl	'.debug_ranges',debug,cluster('mem_calloc')
	.sect	'.debug_ranges'
.L132:
	.word	-1,.L109,0,.L133-.L109,0,0
	.sdecl	'.debug_info',debug,cluster('mem_free')
	.sect	'.debug_info'
.L134:
	.word	242
	.half	3
	.word	.L135
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L137,.L136
	.byte	2
	.word	.L110
	.byte	3
	.byte	'mem_free',0,1,233,4,1,1,1,1
	.word	.L97,.L225,.L96
	.byte	4
	.byte	'rmem',0,1,233,4,16
	.word	.L195,.L226
	.byte	5
	.word	.L227
	.byte	6
	.byte	'mem',0,1,235,4,15
	.word	.L193,.L228
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('mem_free')
	.sect	'.debug_abbrev'
.L135:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('mem_free')
	.sect	'.debug_line'
.L136:
	.word	.L470-.L469
.L469:
	.half	3
	.word	.L472-.L471
.L471:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0,0,0,0,0
.L472:
	.byte	5,1,7,0,5,2
	.word	.L97
	.byte	3,232,4,1,5,3,9
	.half	.L285-.L97
	.byte	3,5,1,5,20,7,9
	.half	.L473-.L285
	.byte	3,4,1,5,26,9
	.half	.L276-.L473
	.byte	1,5,3,9
	.half	.L277-.L276
	.byte	1,5,5,7,9
	.half	.L474-.L277
	.byte	3,1,1,9
	.half	.L475-.L474
	.byte	3,4,1,5,1,9
	.half	.L25-.L475
	.byte	3,55,1,5,21,7,9
	.half	.L26-.L25
	.byte	3,80,1,5,66,9
	.half	.L476-.L26
	.byte	3,126,1,5,19,9
	.half	.L278-.L476
	.byte	3,2,1,5,7,9
	.half	.L477-.L278
	.byte	1,5,41,7,9
	.half	.L478-.L477
	.byte	1,5,70,9
	.half	.L479-.L478
	.byte	1,5,60,9
	.half	.L480-.L479
	.byte	1,5,5,7,9
	.half	.L28-.L480
	.byte	3,1,1,9
	.half	.L481-.L28
	.byte	3,4,1,5,11,9
	.half	.L29-.L481
	.byte	3,8,1,5,8,9
	.half	.L482-.L29
	.byte	1,5,5,7,9
	.half	.L483-.L482
	.byte	3,1,1,9
	.half	.L484-.L483
	.byte	3,5,1,5,23,9
	.half	.L31-.L484
	.byte	3,3,1,5,8,9
	.half	.L280-.L31
	.byte	1,5,5,7,9
	.half	.L485-.L280
	.byte	3,1,1,9
	.half	.L486-.L485
	.byte	3,4,1,5,1,9
	.half	.L487-.L486
	.byte	3,21,1,5,15,7,9
	.half	.L33-.L487
	.byte	3,112,1,5,13,1,5,7,9
	.half	.L488-.L33
	.byte	3,2,1,5,13,9
	.half	.L283-.L488
	.byte	1,5,3,9
	.half	.L284-.L283
	.byte	3,5,1,5,14,9
	.half	.L489-.L284
	.byte	3,3,1,5,3,9
	.half	.L286-.L489
	.byte	3,125,1,5,14,9
	.half	.L490-.L286
	.byte	3,3,1,5,1,7,9
	.half	.L138-.L490
	.byte	3,6,0,1,1
.L470:
	.sdecl	'.debug_ranges',debug,cluster('mem_free')
	.sect	'.debug_ranges'
.L137:
	.word	-1,.L97,0,.L138-.L97,0,0
.L227:
	.word	-1,.L97,0,.L225-.L97,-1,.L99,0,.L178-.L99,-1,.L101,0,.L173-.L101,0,0
	.sdecl	'.debug_info',debug,cluster('ptr_to_mem')
	.sect	'.debug_info'
.L139:
	.word	232
	.half	3
	.word	.L140
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L142,.L141
	.byte	2
	.word	.L110
	.byte	3
	.byte	'ptr_to_mem',0,1,195,3,1
	.word	.L193
	.byte	1,1
	.word	.L83,.L229,.L82
	.byte	4
	.byte	'ptr',0,1,195,3,23
	.word	.L198,.L230
	.byte	5
	.word	.L83,.L229
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('ptr_to_mem')
	.sect	'.debug_abbrev'
.L140:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('ptr_to_mem')
	.sect	'.debug_line'
.L141:
	.word	.L492-.L491
.L491:
	.half	3
	.word	.L494-.L493
.L493:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0,0,0,0,0
.L494:
	.byte	5,33,7,0,5,2
	.word	.L83
	.byte	3,196,3,1,5,36,9
	.half	.L495-.L83
	.byte	1,5,1,9
	.half	.L496-.L495
	.byte	3,1,1,7,9
	.half	.L143-.L496
	.byte	0,1,1
.L492:
	.sdecl	'.debug_ranges',debug,cluster('ptr_to_mem')
	.sect	'.debug_ranges'
.L142:
	.word	-1,.L83,0,.L143-.L83,0,0
	.sdecl	'.debug_info',debug,cluster('mem_to_ptr')
	.sect	'.debug_info'
.L144:
	.word	232
	.half	3
	.word	.L145
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L147,.L146
	.byte	2
	.word	.L110
	.byte	3
	.byte	'mem_to_ptr',0,1,201,3,1
	.word	.L198
	.byte	1,1
	.word	.L85,.L231,.L84
	.byte	4
	.byte	'mem',0,1,201,3,18
	.word	.L195,.L232
	.byte	5
	.word	.L85,.L231
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('mem_to_ptr')
	.sect	'.debug_abbrev'
.L145:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('mem_to_ptr')
	.sect	'.debug_line'
.L146:
	.word	.L498-.L497
.L497:
	.half	3
	.word	.L500-.L499
.L499:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0,0,0,0,0
.L500:
	.byte	5,37,7,0,5,2
	.word	.L85
	.byte	3,202,3,1,5,35,9
	.half	.L501-.L85
	.byte	1,5,10,9
	.half	.L502-.L501
	.byte	1,5,1,3,1,1,7,9
	.half	.L148-.L502
	.byte	0,1,1
.L498:
	.sdecl	'.debug_ranges',debug,cluster('mem_to_ptr')
	.sect	'.debug_ranges'
.L147:
	.word	-1,.L85,0,.L148-.L85,0,0
	.sdecl	'.debug_info',debug,cluster('plug_holes')
	.sect	'.debug_info'
.L149:
	.word	261
	.half	3
	.word	.L150
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L152,.L151
	.byte	2
	.word	.L110
	.byte	3
	.byte	'plug_holes',0,1,218,3,1,1,1
	.word	.L87,.L233,.L86
	.byte	4
	.byte	'mem',0,1,218,3,24
	.word	.L193,.L234
	.byte	5
	.word	.L235
	.byte	6
	.byte	'nmem',0,1,220,3,15
	.word	.L193,.L236
	.byte	6
	.byte	'pmem',0,1,221,3,15
	.word	.L193,.L237
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('plug_holes')
	.sect	'.debug_abbrev'
.L150:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58,15,59
	.byte	15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('plug_holes')
	.sect	'.debug_line'
.L151:
	.word	.L504-.L503
.L503:
	.half	3
	.word	.L506-.L505
.L505:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0,0,0,0,0
.L506:
	.byte	5,1,7,0,5,2
	.word	.L87
	.byte	3,217,3,1,5,3,9
	.half	.L248-.L87
	.byte	3,5,1,5,1,9
	.half	.L507-.L248
	.byte	3,123,1,5,3,9
	.half	.L246-.L507
	.byte	3,5,1,7,9
	.half	.L508-.L246
	.byte	1,9
	.half	.L4-.L508
	.byte	3,1,1,9
	.half	.L5-.L4
	.byte	3,1,1,9
	.half	.L6-.L5
	.byte	3,3,1,5,24,9
	.half	.L7-.L6
	.byte	3,2,1,5,7,9
	.half	.L259-.L7
	.byte	3,1,1,5,26,7,9
	.half	.L509-.L259
	.byte	1,5,33,9
	.half	.L510-.L509
	.byte	1,5,65,7,9
	.half	.L511-.L510
	.byte	1,5,54,9
	.half	.L512-.L511
	.byte	1,5,9,7,9
	.half	.L513-.L512
	.byte	3,2,1,5,5,9
	.half	.L514-.L513
	.byte	1,5,13,7,9
	.half	.L515-.L514
	.byte	3,1,1,5,21,9
	.half	.L11-.L515
	.byte	3,2,1,5,15,9
	.half	.L516-.L11
	.byte	1,5,13,9
	.half	.L517-.L516
	.byte	3,1,1,5,5,9
	.half	.L518-.L517
	.byte	1,5,22,7,9
	.half	.L519-.L518
	.byte	3,1,1,5,29,9
	.half	.L260-.L519
	.byte	1,5,36,9
	.half	.L520-.L260
	.byte	1,5,49,9
	.half	.L521-.L520
	.byte	1,5,36,9
	.half	.L262-.L521
	.byte	1,5,24,9
	.half	.L8-.L262
	.byte	3,5,1,5,8,9
	.half	.L263-.L8
	.byte	1,5,7,9
	.half	.L265-.L263
	.byte	3,1,1,5,26,7,9
	.half	.L522-.L265
	.byte	1,5,33,9
	.half	.L523-.L522
	.byte	1,5,9,7,9
	.half	.L524-.L523
	.byte	3,2,1,5,5,9
	.half	.L264-.L524
	.byte	1,5,13,7,9
	.half	.L525-.L264
	.byte	3,1,1,5,21,9
	.half	.L15-.L525
	.byte	3,2,1,5,16,9
	.half	.L526-.L15
	.byte	1,5,12,9
	.half	.L527-.L526
	.byte	3,1,1,5,5,9
	.half	.L528-.L527
	.byte	1,5,21,7,9
	.half	.L529-.L528
	.byte	3,1,1,5,28,9
	.half	.L530-.L529
	.byte	1,5,35,9
	.half	.L531-.L530
	.byte	1,5,48,9
	.half	.L258-.L531
	.byte	1,5,35,9
	.half	.L267-.L258
	.byte	1,5,1,9
	.half	.L13-.L267
	.byte	3,3,1,7,9
	.half	.L153-.L13
	.byte	0,1,1
.L504:
	.sdecl	'.debug_ranges',debug,cluster('plug_holes')
	.sect	'.debug_ranges'
.L152:
	.word	-1,.L87,0,.L153-.L87,0,0
.L235:
	.word	-1,.L87,0,.L233-.L87,-1,.L89,0,.L168-.L89,-1,.L91,0,.L163-.L91,0,0
	.sdecl	'.debug_info',debug,cluster('mem_link_valid')
	.sect	'.debug_info'
.L154:
	.word	295
	.half	3
	.word	.L155
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L157,.L156
	.byte	2
	.word	.L110
	.byte	3
	.byte	'mem_link_valid',0,1,167,4,1
	.word	.L238
	.byte	1,1
	.word	.L95,.L239,.L94
	.byte	4
	.byte	'mem',0,1,167,4,28
	.word	.L193,.L240
	.byte	5
	.word	.L95,.L239
	.byte	6
	.byte	'nmem',0,1,169,4,15
	.word	.L193,.L241
	.byte	6
	.byte	'pmem',0,1,169,4,22
	.word	.L193,.L242
	.byte	6
	.byte	'rmem_idx',0,1,170,4,14
	.word	.L198,.L243
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('mem_link_valid')
	.sect	'.debug_abbrev'
.L155:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('mem_link_valid')
	.sect	'.debug_line'
.L156:
	.word	.L533-.L532
.L532:
	.half	3
	.word	.L535-.L534
.L534:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0,0,0,0,0
.L535:
	.byte	5,1,7,0,5,2
	.word	.L95
	.byte	3,166,4,1,5,25,9
	.half	.L269-.L95
	.byte	3,4,1,5,24,9
	.half	.L268-.L269
	.byte	3,1,1,5,12,9
	.half	.L536-.L268
	.byte	3,127,1,5,24,9
	.half	.L272-.L536
	.byte	3,1,1,9
	.half	.L271-.L272
	.byte	3,1,1,5,8,9
	.half	.L537-.L271
	.byte	3,127,1,5,24,9
	.half	.L274-.L537
	.byte	3,1,1,5,20,9
	.half	.L273-.L274
	.byte	3,1,1,5,7,9
	.half	.L538-.L273
	.byte	1,5,52,7,9
	.half	.L539-.L538
	.byte	1,5,8,7,9
	.half	.L540-.L539
	.byte	3,1,1,5,40,7,9
	.half	.L541-.L540
	.byte	1,5,47,9
	.half	.L542-.L541
	.byte	1,5,17,7,9
	.half	.L19-.L542
	.byte	3,1,1,5,8,9
	.half	.L270-.L19
	.byte	1,5,34,7,9
	.half	.L543-.L270
	.byte	1,5,41,9
	.half	.L544-.L543
	.byte	1,5,12,7,9
	.half	.L17-.L544
	.byte	3,1,1,5,1,3,3,1,5,10,7,9
	.half	.L21-.L17
	.byte	3,127,1,5,1,3,1,1,7,9
	.half	.L158-.L21
	.byte	0,1,1
.L533:
	.sdecl	'.debug_ranges',debug,cluster('mem_link_valid')
	.sect	'.debug_ranges'
.L157:
	.word	-1,.L95,0,.L158-.L95,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_28')
	.sect	'.debug_info'
.L159:
	.word	201
	.half	3
	.word	.L160
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L162,.L161
	.byte	2
	.word	.L110
	.byte	3
	.byte	'.cocofun_28',0,1,218,3,1,1
	.word	.L91,.L163,.L90
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_28')
	.sect	'.debug_abbrev'
.L160:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_28')
	.sect	'.debug_line'
.L161:
	.word	.L546-.L545
.L545:
	.half	3
	.word	.L548-.L547
.L547:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0,0,0,0,0
.L548:
	.byte	5,3,7,0,5,2
	.word	.L91
	.byte	3,222,3,1,9
	.half	.L163-.L91
	.byte	0,1,1,5,3,0,5,2
	.word	.L91
	.byte	3,223,3,1,9
	.half	.L549-.L91
	.byte	3,127,1,7,9
	.half	.L163-.L549
	.byte	0,1,1,5,3,0,5,2
	.word	.L91
	.byte	3,224,3,1,9
	.half	.L549-.L91
	.byte	3,126,1,7,9
	.half	.L163-.L549
	.byte	0,1,1,5,3,0,5,2
	.word	.L91
	.byte	3,227,3,1,9
	.half	.L549-.L91
	.byte	3,123,1,7,9
	.half	.L163-.L549
	.byte	0,1,1,5,5,0,5,2
	.word	.L91
	.byte	3,148,5,1,5,3,9
	.half	.L549-.L91
	.byte	3,202,126,1,7,9
	.half	.L163-.L549
	.byte	0,1,1,5,3,0,5,2
	.word	.L91
	.byte	3,208,5,1,9
	.half	.L549-.L91
	.byte	3,142,126,1,7,9
	.half	.L163-.L549
	.byte	0,1,1,5,3,0,5,2
	.word	.L91
	.byte	3,227,5,1,9
	.half	.L549-.L91
	.byte	3,251,125,1,7,9
	.half	.L163-.L549
	.byte	0,1,1,5,5,0,5,2
	.word	.L91
	.byte	3,244,5,1,5,3,9
	.half	.L549-.L91
	.byte	3,234,125,1,7,9
	.half	.L163-.L549
	.byte	0,1,1,5,5,0,5,2
	.word	.L91
	.byte	3,149,6,1,5,3,9
	.half	.L549-.L91
	.byte	3,201,125,1,7,9
	.half	.L163-.L549
	.byte	0,1,1,5,11,0,5,2
	.word	.L91
	.byte	3,134,7,1,5,3,9
	.half	.L549-.L91
	.byte	3,216,124,1,7,9
	.half	.L163-.L549
	.byte	0,1,1,5,11,0,5,2
	.word	.L91
	.byte	3,180,7,1,5,3,9
	.half	.L549-.L91
	.byte	3,170,124,1,7,9
	.half	.L163-.L549
	.byte	0,1,1,5,9,0,5,2
	.word	.L91
	.byte	3,184,7,1,5,3,9
	.half	.L549-.L91
	.byte	3,166,124,1,7,9
	.half	.L163-.L549
	.byte	0,1,1,5,9,0,5,2
	.word	.L91
	.byte	3,186,7,1,5,3,9
	.half	.L549-.L91
	.byte	3,164,124,1,7,9
	.half	.L163-.L549
	.byte	0,1,1,5,9,0,5,2
	.word	.L91
	.byte	3,188,7,1,5,3,9
	.half	.L549-.L91
	.byte	3,162,124,1,7,9
	.half	.L163-.L549
	.byte	0,1,1
.L546:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_28')
	.sect	'.debug_ranges'
.L162:
	.word	-1,.L91,0,.L163-.L91,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_29')
	.sect	'.debug_info'
.L164:
	.word	201
	.half	3
	.word	.L165
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L167,.L166
	.byte	2
	.word	.L110
	.byte	3
	.byte	'.cocofun_29',0,1,218,3,1,1
	.word	.L89,.L168,.L88
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_29')
	.sect	'.debug_abbrev'
.L165:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_29')
	.sect	'.debug_line'
.L166:
	.word	.L551-.L550
.L550:
	.half	3
	.word	.L553-.L552
.L552:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0,0,0,0,0
.L553:
	.byte	5,3,7,0,5,2
	.word	.L89
	.byte	3,222,3,1,9
	.half	.L168-.L89
	.byte	0,1,1,5,3,0,5,2
	.word	.L89
	.byte	3,223,3,1,9
	.half	.L554-.L89
	.byte	3,127,1,7,9
	.half	.L168-.L554
	.byte	0,1,1,5,3,0,5,2
	.word	.L89
	.byte	3,224,3,1,9
	.half	.L554-.L89
	.byte	3,126,1,7,9
	.half	.L168-.L554
	.byte	0,1,1,5,3,0,5,2
	.word	.L89
	.byte	3,227,3,1,9
	.half	.L554-.L89
	.byte	3,123,1,7,9
	.half	.L168-.L554
	.byte	0,1,1,5,5,0,5,2
	.word	.L89
	.byte	3,148,5,1,5,3,9
	.half	.L554-.L89
	.byte	3,202,126,1,7,9
	.half	.L168-.L554
	.byte	0,1,1,5,3,0,5,2
	.word	.L89
	.byte	3,208,5,1,9
	.half	.L554-.L89
	.byte	3,142,126,1,7,9
	.half	.L168-.L554
	.byte	0,1,1,5,3,0,5,2
	.word	.L89
	.byte	3,227,5,1,9
	.half	.L554-.L89
	.byte	3,251,125,1,7,9
	.half	.L168-.L554
	.byte	0,1,1,5,5,0,5,2
	.word	.L89
	.byte	3,244,5,1,5,3,9
	.half	.L554-.L89
	.byte	3,234,125,1,7,9
	.half	.L168-.L554
	.byte	0,1,1,5,5,0,5,2
	.word	.L89
	.byte	3,149,6,1,5,3,9
	.half	.L554-.L89
	.byte	3,201,125,1,7,9
	.half	.L168-.L554
	.byte	0,1,1,5,11,0,5,2
	.word	.L89
	.byte	3,134,7,1,5,3,9
	.half	.L554-.L89
	.byte	3,216,124,1,7,9
	.half	.L168-.L554
	.byte	0,1,1,5,11,0,5,2
	.word	.L89
	.byte	3,180,7,1,5,3,9
	.half	.L554-.L89
	.byte	3,170,124,1,7,9
	.half	.L168-.L554
	.byte	0,1,1,5,9,0,5,2
	.word	.L89
	.byte	3,184,7,1,5,3,9
	.half	.L554-.L89
	.byte	3,166,124,1,7,9
	.half	.L168-.L554
	.byte	0,1,1,5,9,0,5,2
	.word	.L89
	.byte	3,186,7,1,5,3,9
	.half	.L554-.L89
	.byte	3,164,124,1,7,9
	.half	.L168-.L554
	.byte	0,1,1,5,9,0,5,2
	.word	.L89
	.byte	3,188,7,1,5,3,9
	.half	.L554-.L89
	.byte	3,162,124,1,7,9
	.half	.L168-.L554
	.byte	0,1,1
.L551:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_29')
	.sect	'.debug_ranges'
.L167:
	.word	-1,.L89,0,.L168-.L89,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_30')
	.sect	'.debug_info'
.L169:
	.word	201
	.half	3
	.word	.L170
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L172,.L171
	.byte	2
	.word	.L110
	.byte	3
	.byte	'.cocofun_30',0,1,233,4,1,1
	.word	.L101,.L173,.L100
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_30')
	.sect	'.debug_abbrev'
.L170:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_30')
	.sect	'.debug_line'
.L171:
	.word	.L556-.L555
.L555:
	.half	3
	.word	.L558-.L557
.L557:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0,0,0,0,0
.L558:
	.byte	5,5,7,0,5,2
	.word	.L101
	.byte	3,152,5,1,9
	.half	.L173-.L101
	.byte	0,1,1,5,5,0,5,2
	.word	.L101
	.byte	3,214,5,1,9
	.half	.L281-.L101
	.byte	3,66,1,7,9
	.half	.L173-.L281
	.byte	0,1,1
.L556:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_30')
	.sect	'.debug_ranges'
.L172:
	.word	-1,.L101,0,.L173-.L101,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_31')
	.sect	'.debug_info'
.L174:
	.word	201
	.half	3
	.word	.L175
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L177,.L176
	.byte	2
	.word	.L110
	.byte	3
	.byte	'.cocofun_31',0,1,233,4,1,1
	.word	.L99,.L178,.L98
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_31')
	.sect	'.debug_abbrev'
.L175:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_31')
	.sect	'.debug_line'
.L176:
	.word	.L560-.L559
.L559:
	.half	3
	.word	.L562-.L561
.L561:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0,0,0,0,0
.L562:
	.byte	5,13,7,0,5,2
	.word	.L99
	.byte	3,159,5,1,5,11,9
	.half	.L318-.L99
	.byte	1,3,2,1,9
	.half	.L178-.L318
	.byte	0,1,1,5,16,0,5,2
	.word	.L99
	.byte	3,151,6,1,5,14,9
	.half	.L318-.L99
	.byte	1,5,13,3,1,1,5,11,9
	.half	.L282-.L318
	.byte	3,137,127,1,7,9
	.half	.L178-.L282
	.byte	0,1,1
.L560:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_31')
	.sect	'.debug_ranges'
.L177:
	.word	-1,.L99,0,.L178-.L99,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_32')
	.sect	'.debug_info'
.L179:
	.word	201
	.half	3
	.word	.L180
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L182,.L181
	.byte	2
	.word	.L110
	.byte	3
	.byte	'.cocofun_32',0,1,187,5,1,1
	.word	.L105,.L183,.L104
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_32')
	.sect	'.debug_abbrev'
.L180:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_32')
	.sect	'.debug_line'
.L181:
	.word	.L564-.L563
.L563:
	.half	3
	.word	.L566-.L565
.L565:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0,0,0,0,0
.L566:
	.byte	5,25,7,0,5,2
	.word	.L105
	.byte	3,196,5,1,9
	.half	.L183-.L105
	.byte	0,1,1,5,22,0,5,2
	.word	.L105
	.byte	3,205,6,1,5,25,9
	.half	.L292-.L105
	.byte	3,247,126,1,7,9
	.half	.L183-.L292
	.byte	0,1,1
.L564:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_32')
	.sect	'.debug_ranges'
.L182:
	.word	-1,.L105,0,.L183-.L105,0,0
	.sdecl	'.debug_info',debug,cluster('ram_heap')
	.sect	'.debug_info'
.L184:
	.word	188
	.half	3
	.word	.L185
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1,2
	.word	.L110
	.byte	3
	.byte	'ram_heap',0,2,251,2,1
	.word	.L244
	.byte	1,5,3
	.word	ram_heap
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('ram_heap')
	.sect	'.debug_abbrev'
.L185:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('ram')
	.sect	'.debug_info'
.L186:
	.word	182
	.half	3
	.word	.L187
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1,2
	.word	.L110
	.byte	3
	.byte	'ram',0,2,128,3,14
	.word	.L245
	.byte	5,3
	.word	ram
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('ram')
	.sect	'.debug_abbrev'
.L187:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('ram_end')
	.sect	'.debug_info'
.L188:
	.word	186
	.half	3
	.word	.L189
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1,2
	.word	.L110
	.byte	3
	.byte	'ram_end',0,2,130,3,20
	.word	.L193
	.byte	5,3
	.word	ram_end
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('ram_end')
	.sect	'.debug_abbrev'
.L189:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('lfree')
	.sect	'.debug_info'
.L190:
	.word	184
	.half	3
	.word	.L191
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\mem.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1,2
	.word	.L110
	.byte	3
	.byte	'lfree',0,2,165,3,45
	.word	.L193
	.byte	5,3
	.word	lfree
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('lfree')
	.sect	'.debug_abbrev'
.L191:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_28')
	.sect	'.debug_loc'
.L90:
	.word	-1,.L91,0,.L163-.L91
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_29')
	.sect	'.debug_loc'
.L88:
	.word	-1,.L89,0,.L168-.L89
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_30')
	.sect	'.debug_loc'
.L100:
	.word	-1,.L101,0,.L173-.L101
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_31')
	.sect	'.debug_loc'
.L98:
	.word	-1,.L99,0,.L178-.L99
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_32')
	.sect	'.debug_loc'
.L104:
	.word	-1,.L105,0,.L183-.L105
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('mem_calloc')
	.sect	'.debug_loc'
.L224:
	.word	-1,.L109,.L354-.L109,.L219-.L109
	.half	1
	.byte	88
	.word	0,0
.L220:
	.word	-1,.L109,0,.L353-.L109
	.half	1
	.byte	84
	.word	0,0
.L108:
	.word	-1,.L109,0,.L219-.L109
	.half	2
	.byte	138,0
	.word	0,0
.L222:
	.word	-1,.L109,.L353-.L109,.L355-.L109
	.half	1
	.byte	98
	.word	.L356-.L109,.L219-.L109
	.half	1
	.byte	111
	.word	.L355-.L109,.L80-.L109
	.half	1
	.byte	100
	.word	.L357-.L109,.L219-.L109
	.half	1
	.byte	98
	.word	0,0
.L221:
	.word	-1,.L109,0,.L353-.L109
	.half	1
	.byte	85
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('mem_free')
	.sect	'.debug_loc'
.L228:
	.word	-1,.L97,.L278-.L97,.L32-.L97
	.half	1
	.byte	109
	.word	.L279-.L97,.L280-.L97
	.half	1
	.byte	100
	.word	.L99-.L97,.L282-.L97
	.half	1
	.byte	109
	.word	.L283-.L97,.L284-.L97
	.half	1
	.byte	95
	.word	.L99-.L97,.L282-.L97
	.half	1
	.byte	95
	.word	.L33-.L97,.L225-.L97
	.half	1
	.byte	109
	.word	.L286-.L97,.L225-.L97
	.half	1
	.byte	100
	.word	0,0
.L96:
	.word	-1,.L97,0,.L275-.L97
	.half	2
	.byte	138,0
	.word	.L275-.L97,.L26-.L97
	.half	2
	.byte	138,16
	.word	.L26-.L97,.L26-.L97
	.half	2
	.byte	138,0
	.word	.L26-.L97,.L33-.L97
	.half	2
	.byte	138,16
	.word	.L33-.L97,.L33-.L97
	.half	2
	.byte	138,0
	.word	.L33-.L97,.L225-.L97
	.half	2
	.byte	138,16
	.word	.L225-.L97,.L225-.L97
	.half	2
	.byte	138,0
	.word	0,0
.L226:
	.word	-1,.L97,0,.L276-.L97
	.half	1
	.byte	100
	.word	.L276-.L97,.L277-.L97
	.half	1
	.byte	95
	.word	.L25-.L97,.L26-.L97
	.half	1
	.byte	100
	.word	.L91-.L97,.L163-.L97
	.half	1
	.byte	108
	.word	.L89-.L97,.L168-.L97
	.half	1
	.byte	108
	.word	.L101-.L97,.L281-.L97
	.half	1
	.byte	108
	.word	.L99-.L97,.L282-.L97
	.half	1
	.byte	108
	.word	.L285-.L97,.L225-.L97
	.half	1
	.byte	108
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('mem_init')
	.sect	'.debug_loc'
.L194:
	.word	0,0
.L92:
	.word	-1,.L93,0,.L192-.L93
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('mem_link_valid')
	.sect	'.debug_loc'
.L240:
	.word	-1,.L95,0,.L268-.L95
	.half	1
	.byte	100
	.word	.L269-.L95,.L270-.L95
	.half	1
	.byte	111
	.word	0,0
.L94:
	.word	-1,.L95,0,.L239-.L95
	.half	2
	.byte	138,0
	.word	0,0
.L241:
	.word	-1,.L95,.L271-.L95,.L273-.L95
	.half	1
	.byte	98
	.word	.L274-.L95,.L239-.L95
	.half	1
	.byte	108
	.word	0,0
.L242:
	.word	-1,.L95,.L273-.L95,.L239-.L95
	.half	1
	.byte	98
	.word	0,0
.L243:
	.word	-1,.L95,.L268-.L95,.L271-.L95
	.half	1
	.byte	82
	.word	.L272-.L95,.L239-.L95
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('mem_malloc')
	.sect	'.debug_loc'
.L218:
	.word	-1,.L107,.L337-.L107,.L332-.L107
	.half	1
	.byte	98
	.word	.L91-.L107,.L163-.L107
	.half	1
	.byte	98
	.word	.L89-.L107,.L168-.L107
	.half	1
	.byte	98
	.word	.L338-.L107,.L67-.L107
	.half	1
	.byte	98
	.word	0,0
.L215:
	.word	-1,.L107,.L327-.L107,.L328-.L107
	.half	1
	.byte	98
	.word	.L329-.L107,.L325-.L107
	.half	1
	.byte	109
	.word	.L91-.L107,.L163-.L107
	.half	1
	.byte	109
	.word	.L89-.L107,.L168-.L107
	.half	1
	.byte	109
	.word	.L331-.L107,.L332-.L107
	.half	1
	.byte	109
	.word	.L62-.L107,.L335-.L107
	.half	1
	.byte	98
	.word	.L335-.L107,.L336-.L107
	.half	1
	.byte	100
	.word	.L338-.L107,.L339-.L107
	.half	1
	.byte	109
	.word	.L341-.L107,.L342-.L107
	.half	1
	.byte	95
	.word	.L343-.L107,.L344-.L107
	.half	1
	.byte	109
	.word	.L345-.L107,.L346-.L107
	.half	1
	.byte	95
	.word	.L347-.L107,.L348-.L107
	.half	1
	.byte	109
	.word	.L349-.L107,.L350-.L107
	.half	1
	.byte	95
	.word	.L351-.L107,.L58-.L107
	.half	1
	.byte	109
	.word	.L60-.L107,.L352-.L107
	.half	1
	.byte	98
	.word	0,0
.L216:
	.word	-1,.L107,.L333-.L107,.L334-.L107
	.half	1
	.byte	98
	.word	0,0
.L106:
	.word	-1,.L107,0,.L322-.L107
	.half	2
	.byte	138,0
	.word	.L322-.L107,.L61-.L107
	.half	2
	.byte	138,16
	.word	.L61-.L107,.L61-.L107
	.half	2
	.byte	138,0
	.word	.L61-.L107,.L210-.L107
	.half	2
	.byte	138,16
	.word	.L210-.L107,.L210-.L107
	.half	2
	.byte	138,0
	.word	0,0
.L212:
	.word	-1,.L107,.L323-.L107,.L59-.L107
	.half	1
	.byte	82
	.word	.L326-.L107,.L325-.L107
	.half	1
	.byte	91
	.word	.L91-.L107,.L163-.L107
	.half	1
	.byte	91
	.word	.L89-.L107,.L168-.L107
	.half	1
	.byte	91
	.word	.L331-.L107,.L332-.L107
	.half	1
	.byte	91
	.word	.L338-.L107,.L339-.L107
	.half	1
	.byte	91
	.word	.L343-.L107,.L344-.L107
	.half	1
	.byte	91
	.word	.L347-.L107,.L348-.L107
	.half	1
	.byte	91
	.word	.L351-.L107,.L55-.L107
	.half	1
	.byte	91
	.word	0,0
.L213:
	.word	-1,.L107,.L330-.L107,.L325-.L107
	.half	1
	.byte	93
	.word	.L91-.L107,.L163-.L107
	.half	1
	.byte	93
	.word	.L89-.L107,.L168-.L107
	.half	1
	.byte	93
	.word	.L331-.L107,.L62-.L107
	.half	1
	.byte	93
	.word	0,0
.L214:
	.word	-1,.L107,.L324-.L107,.L325-.L107
	.half	1
	.byte	89
	.word	.L91-.L107,.L163-.L107
	.half	1
	.byte	89
	.word	.L89-.L107,.L168-.L107
	.half	1
	.byte	89
	.word	.L331-.L107,.L332-.L107
	.half	1
	.byte	89
	.word	.L338-.L107,.L340-.L107
	.half	1
	.byte	89
	.word	.L60-.L107,.L55-.L107
	.half	1
	.byte	89
	.word	0,0
.L211:
	.word	-1,.L107,.L105-.L107,.L183-.L107
	.half	1
	.byte	84
	.word	0,.L323-.L107
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('mem_to_ptr')
	.sect	'.debug_loc'
.L232:
	.word	-1,.L85,0,.L231-.L85
	.half	1
	.byte	100
	.word	0,0
.L84:
	.word	-1,.L85,0,.L231-.L85
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('mem_trim')
	.sect	'.debug_loc'
.L205:
	.word	-1,.L103,.L298-.L103,.L295-.L103
	.half	1
	.byte	109
	.word	.L299-.L103,.L297-.L103
	.half	1
	.byte	100
	.word	.L91-.L103,.L163-.L103
	.half	1
	.byte	109
	.word	.L89-.L103,.L168-.L103
	.half	1
	.byte	109
	.word	.L302-.L103,.L35-.L103
	.half	1
	.byte	109
	.word	.L43-.L103,.L303-.L103
	.half	1
	.byte	109
	.word	.L307-.L103,.L308-.L103
	.half	1
	.byte	109
	.word	.L99-.L103,.L178-.L103
	.half	1
	.byte	109
	.word	.L314-.L103,.L41-.L103
	.half	1
	.byte	109
	.word	0,0
.L206:
	.word	-1,.L103,.L304-.L103,.L305-.L103
	.half	1
	.byte	98
	.word	.L306-.L103,.L303-.L103
	.half	1
	.byte	110
	.word	.L91-.L103,.L163-.L103
	.half	1
	.byte	110
	.word	.L89-.L103,.L168-.L103
	.half	1
	.byte	110
	.word	.L307-.L103,.L309-.L103
	.half	1
	.byte	110
	.word	.L309-.L103,.L312-.L103
	.half	1
	.byte	98
	.word	.L46-.L103,.L308-.L103
	.half	1
	.byte	98
	.word	.L46-.L103,.L308-.L103
	.half	1
	.byte	110
	.word	.L91-.L103,.L163-.L103
	.half	1
	.byte	98
	.word	.L89-.L103,.L168-.L103
	.half	1
	.byte	98
	.word	.L314-.L103,.L52-.L103
	.half	1
	.byte	98
	.word	.L314-.L103,.L315-.L103
	.half	1
	.byte	110
	.word	.L99-.L103,.L178-.L103
	.half	1
	.byte	98
	.word	.L316-.L103,.L317-.L103
	.half	1
	.byte	95
	.word	.L99-.L103,.L318-.L103
	.half	1
	.byte	95
	.word	.L315-.L103,.L319-.L103
	.half	1
	.byte	98
	.word	0,0
.L102:
	.word	-1,.L103,0,.L287-.L103
	.half	2
	.byte	138,0
	.word	.L287-.L103,.L43-.L103
	.half	2
	.byte	138,16
	.word	.L43-.L103,.L43-.L103
	.half	2
	.byte	138,0
	.word	.L43-.L103,.L196-.L103
	.half	2
	.byte	138,16
	.word	.L196-.L103,.L196-.L103
	.half	2
	.byte	138,0
	.word	0,0
.L199:
	.word	-1,.L103,0,.L288-.L103
	.half	1
	.byte	84
	.word	.L105-.L103,.L183-.L103
	.half	1
	.byte	84
	.word	.L290-.L103,.L291-.L103
	.half	1
	.byte	84
	.word	.L91-.L103,.L163-.L103
	.half	1
	.byte	84
	.word	.L89-.L103,.L168-.L103
	.half	1
	.byte	84
	.word	.L294-.L103,.L38-.L103
	.half	1
	.byte	84
	.word	0,0
.L202:
	.word	-1,.L103,.L292-.L103,.L183-.L103
	.half	1
	.byte	88
	.word	.L290-.L103,.L291-.L103
	.half	1
	.byte	88
	.word	.L91-.L103,.L163-.L103
	.half	1
	.byte	88
	.word	.L89-.L103,.L168-.L103
	.half	1
	.byte	88
	.word	.L101-.L103,.L173-.L103
	.half	1
	.byte	88
	.word	.L294-.L103,.L295-.L103
	.half	1
	.byte	88
	.word	.L302-.L103,.L303-.L103
	.half	1
	.byte	88
	.word	.L307-.L103,.L308-.L103
	.half	1
	.byte	88
	.word	.L99-.L103,.L178-.L103
	.half	1
	.byte	88
	.word	.L314-.L103,.L196-.L103
	.half	1
	.byte	88
	.word	0,0
.L209:
	.word	-1,.L103,.L310-.L103,.L46-.L103
	.half	1
	.byte	93
	.word	0,0
.L203:
	.word	-1,.L103,.L297-.L103,.L295-.L103
	.half	1
	.byte	82
	.word	.L300-.L103,.L295-.L103
	.half	1
	.byte	90
	.word	.L91-.L103,.L163-.L103
	.half	1
	.byte	90
	.word	.L91-.L103,.L163-.L103
	.half	1
	.byte	82
	.word	.L89-.L103,.L168-.L103
	.half	1
	.byte	90
	.word	.L89-.L103,.L168-.L103
	.half	1
	.byte	82
	.word	.L302-.L103,.L35-.L103
	.half	1
	.byte	90
	.word	.L302-.L103,.L42-.L103
	.half	1
	.byte	82
	.word	.L43-.L103,.L303-.L103
	.half	1
	.byte	90
	.word	.L307-.L103,.L308-.L103
	.half	1
	.byte	90
	.word	.L99-.L103,.L178-.L103
	.half	1
	.byte	90
	.word	.L314-.L103,.L41-.L103
	.half	1
	.byte	90
	.word	0,0
.L204:
	.word	-1,.L103,.L311-.L103,.L46-.L103
	.half	1
	.byte	92
	.word	.L313-.L103,.L308-.L103
	.half	1
	.byte	93
	.word	.L91-.L103,.L163-.L103
	.half	1
	.byte	93
	.word	.L89-.L103,.L168-.L103
	.half	1
	.byte	93
	.word	.L99-.L103,.L178-.L103
	.half	1
	.byte	93
	.word	.L314-.L103,.L49-.L103
	.half	1
	.byte	93
	.word	0,0
.L197:
	.word	-1,.L103,0,.L288-.L103
	.half	1
	.byte	100
	.word	.L289-.L103,.L288-.L103
	.half	1
	.byte	108
	.word	.L105-.L103,.L183-.L103
	.half	1
	.byte	108
	.word	.L105-.L103,.L183-.L103
	.half	1
	.byte	100
	.word	.L290-.L103,.L291-.L103
	.half	1
	.byte	108
	.word	.L290-.L103,.L293-.L103
	.half	1
	.byte	100
	.word	.L293-.L103,.L291-.L103
	.half	5
	.byte	144,32,157,32,0
	.word	.L91-.L103,.L163-.L103
	.half	5
	.byte	144,32,157,32,0
	.word	.L91-.L103,.L163-.L103
	.half	1
	.byte	108
	.word	.L89-.L103,.L168-.L103
	.half	5
	.byte	144,32,157,32,0
	.word	.L89-.L103,.L168-.L103
	.half	1
	.byte	108
	.word	.L294-.L103,.L38-.L103
	.half	5
	.byte	144,32,157,32,0
	.word	.L101-.L103,.L173-.L103
	.half	5
	.byte	144,32,157,32,0
	.word	.L101-.L103,.L173-.L103
	.half	1
	.byte	108
	.word	.L296-.L103,.L297-.L103
	.half	5
	.byte	144,32,157,32,0
	.word	.L294-.L103,.L295-.L103
	.half	1
	.byte	108
	.word	.L302-.L103,.L303-.L103
	.half	1
	.byte	108
	.word	.L307-.L103,.L308-.L103
	.half	1
	.byte	108
	.word	.L99-.L103,.L178-.L103
	.half	1
	.byte	108
	.word	.L314-.L103,.L196-.L103
	.half	1
	.byte	108
	.word	.L321-.L103,.L196-.L103
	.half	1
	.byte	98
	.word	0,0
.L201:
	.word	-1,.L103,.L301-.L103,.L295-.L103
	.half	1
	.byte	91
	.word	.L91-.L103,.L163-.L103
	.half	1
	.byte	91
	.word	.L89-.L103,.L168-.L103
	.half	1
	.byte	91
	.word	.L302-.L103,.L35-.L103
	.half	1
	.byte	91
	.word	.L43-.L103,.L303-.L103
	.half	1
	.byte	91
	.word	.L307-.L103,.L308-.L103
	.half	1
	.byte	91
	.word	.L99-.L103,.L178-.L103
	.half	1
	.byte	91
	.word	.L314-.L103,.L320-.L103
	.half	1
	.byte	91
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('plug_holes')
	.sect	'.debug_loc'
.L234:
	.word	-1,.L87,0,.L247-.L87
	.half	1
	.byte	100
	.word	.L248-.L87,.L249-.L87
	.half	1
	.byte	108
	.word	.L247-.L87,.L249-.L87
	.half	1
	.byte	95
	.word	.L91-.L87,.L163-.L87
	.half	1
	.byte	108
	.word	.L89-.L87,.L168-.L87
	.half	1
	.byte	108
	.word	.L250-.L87,.L251-.L87
	.half	1
	.byte	108
	.word	.L252-.L87,.L251-.L87
	.half	1
	.byte	95
	.word	.L253-.L87,.L254-.L87
	.half	1
	.byte	108
	.word	.L255-.L87,.L256-.L87
	.half	1
	.byte	108
	.word	.L257-.L87,.L258-.L87
	.half	1
	.byte	108
	.word	.L261-.L87,.L262-.L87
	.half	1
	.byte	100
	.word	0,0
.L236:
	.word	-1,.L87,.L259-.L87,.L260-.L87
	.half	1
	.byte	98
	.word	0,0
.L86:
	.word	-1,.L87,0,.L246-.L87
	.half	2
	.byte	138,0
	.word	.L246-.L87,.L233-.L87
	.half	2
	.byte	138,16
	.word	.L233-.L87,.L233-.L87
	.half	2
	.byte	138,0
	.word	0,0
.L237:
	.word	-1,.L87,.L263-.L87,.L264-.L87
	.half	1
	.byte	98
	.word	.L265-.L87,.L233-.L87
	.half	1
	.byte	111
	.word	.L266-.L87,.L267-.L87
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('ptr_to_mem')
	.sect	'.debug_loc'
.L230:
	.word	-1,.L83,0,.L229-.L83
	.half	1
	.byte	84
	.word	0,0
.L82:
	.word	-1,.L83,0,.L229-.L83
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L567:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('ptr_to_mem')
	.sect	'.debug_frame'
	.word	24
	.word	.L567,.L83,.L229-.L83
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('mem_to_ptr')
	.sect	'.debug_frame'
	.word	24
	.word	.L567,.L85,.L231-.L85
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('plug_holes')
	.sect	'.debug_frame'
	.word	36
	.word	.L567,.L87,.L233-.L87
	.byte	4
	.word	(.L246-.L87)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L233-.L246)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('mem_init')
	.sect	'.debug_frame'
	.word	12
	.word	.L567,.L93,.L192-.L93
	.sdecl	'.debug_frame',debug,cluster('mem_link_valid')
	.sect	'.debug_frame'
	.word	12
	.word	.L567,.L95,.L239-.L95
	.sdecl	'.debug_frame',debug,cluster('mem_free')
	.sect	'.debug_frame'
	.word	68
	.word	.L567,.L97,.L225-.L97
	.byte	4
	.word	(.L275-.L97)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L26-.L275)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L33-.L26)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L225-.L33)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('mem_trim')
	.sect	'.debug_frame'
	.word	52
	.word	.L567,.L103,.L196-.L103
	.byte	4
	.word	(.L287-.L103)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L43-.L287)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L196-.L43)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('mem_malloc')
	.sect	'.debug_frame'
	.word	52
	.word	.L567,.L107,.L210-.L107
	.byte	4
	.word	(.L322-.L107)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L61-.L322)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L210-.L61)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('mem_calloc')
	.sect	'.debug_frame'
	.word	12
	.word	.L567,.L109,.L219-.L109
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L568:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_29')
	.sect	'.debug_frame'
	.word	24
	.word	.L568,.L89,.L168-.L89
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_28')
	.sect	'.debug_frame'
	.word	24
	.word	.L568,.L91,.L163-.L91
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_31')
	.sect	'.debug_frame'
	.word	24
	.word	.L568,.L99,.L178-.L99
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_30')
	.sect	'.debug_frame'
	.word	24
	.word	.L568,.L101,.L173-.L101
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_32')
	.sect	'.debug_frame'
	.word	24
	.word	.L568,.L105,.L183-.L105
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\mem.c	  1017  #endif /* MEM_LIBC_MALLOC && (!LWIP_STATS || !MEM_STATS) */

	; Module end
