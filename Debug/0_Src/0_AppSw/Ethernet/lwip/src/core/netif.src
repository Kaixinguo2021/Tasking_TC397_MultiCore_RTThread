	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\.netif.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Rtl8211f -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\api -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv4 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\ipv6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\arpa -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\net -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\posix\\sys -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\compat\\stdc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\apps -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\netif\\ppp\\polarssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\Phy_Dp83825i -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.src ..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c'

	
$TC162
	
	.sdecl	'.text.netif.netif_init',code,cluster('netif_init')
	.sect	'.text.netif.netif_init'
	.align	2
	
	.global	netif_init

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	     1  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	     2   * @file
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	     3   * lwIP network interface abstraction
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	     4   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	     5   * @defgroup netif Network interface (NETIF)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	     6   * @ingroup callbackstyle_api
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	     7   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	     8   * @defgroup netif_ip4 IPv4 address handling
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	     9   * @ingroup netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    10   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    11   * @defgroup netif_ip6 IPv6 address handling
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    12   * @ingroup netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    13   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    14   * @defgroup netif_cd Client data handling
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    15   * Store data (void*) on a netif for application usage.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    16   * @see @ref LWIP_NUM_NETIF_CLIENT_DATA
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    17   * @ingroup netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    18   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    19  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    20  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    21   * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    22   * All rights reserved.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    23   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    24   * Redistribution and use in source and binary forms, with or without modification,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    25   * are permitted provided that the following conditions are met:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    26   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    27   * 1. Redistributions of source code must retain the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    28   *    this list of conditions and the following disclaimer.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    29   * 2. Redistributions in binary form must reproduce the above copyright notice,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    30   *    this list of conditions and the following disclaimer in the documentation
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    31   *    and/or other materials provided with the distribution.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    32   * 3. The name of the author may not be used to endorse or promote products
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    33   *    derived from this software without specific prior written permission.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    34   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    35   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    36   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    37   * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    38   * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    39   * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    40   * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    41   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    42   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    43   * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    44   * OF SUCH DAMAGE.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    45   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    46   * This file is part of the lwIP TCP/IP stack.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    47   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    48   * Author: Adam Dunkels <adam@sics.se>
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    49   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    50  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    51  #include "lwip/opt.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    52  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    53  #include <string.h> /* memset */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    54  #include <stdlib.h> /* atoi */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    55  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    56  #include "lwip/def.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    57  #include "lwip/ip_addr.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    58  #include "lwip/ip6_addr.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    59  #include "lwip/netif.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    60  #include "lwip/priv/tcp_priv.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    61  #include "lwip/udp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    62  #include "lwip/priv/raw_priv.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    63  #include "lwip/snmp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    64  #include "lwip/igmp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    65  #include "lwip/etharp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    66  #include "lwip/stats.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    67  #include "lwip/sys.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    68  #include "lwip/ip.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    69  #if ENABLE_LOOPBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    70  #if LWIP_NETIF_LOOPBACK_MULTITHREADING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    71  #include "lwip/tcpip.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    72  #endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    73  #endif /* ENABLE_LOOPBACK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    74  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    75  #include "netif/ethernet.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    76  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    77  #if LWIP_AUTOIP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    78  #include "lwip/autoip.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    79  #endif /* LWIP_AUTOIP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    80  #if LWIP_DHCP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    81  #include "lwip/dhcp.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    82  #endif /* LWIP_DHCP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    83  #if LWIP_IPV6_DHCP6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    84  #include "lwip/dhcp6.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    85  #endif /* LWIP_IPV6_DHCP6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    86  #if LWIP_IPV6_MLD
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    87  #include "lwip/mld6.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    88  #endif /* LWIP_IPV6_MLD */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    89  #if LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    90  #include "lwip/nd6.h"
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    91  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    92  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    93  #if LWIP_NETIF_STATUS_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    94  #define NETIF_STATUS_CALLBACK(n) do{ if (n->status_callback) { (n->status_callback)(n); }}while(0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    95  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    96  #define NETIF_STATUS_CALLBACK(n)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    97  #endif /* LWIP_NETIF_STATUS_CALLBACK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    98  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	    99  #if LWIP_NETIF_LINK_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   100  #define NETIF_LINK_CALLBACK(n) do{ if (n->link_callback) { (n->link_callback)(n); }}while(0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   101  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   102  #define NETIF_LINK_CALLBACK(n)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   103  #endif /* LWIP_NETIF_LINK_CALLBACK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   104  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   105  #if LWIP_NETIF_EXT_STATUS_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   106  static netif_ext_callback_t *ext_callback;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   107  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   108  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   109  #if !LWIP_SINGLE_NETIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   110  struct netif *netif_list;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   111  #endif /* !LWIP_SINGLE_NETIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   112  struct netif *netif_default;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   113  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   114  #define netif_index_to_num(index)   ((index) - 1)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   115  static u8_t netif_num;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   116  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   117  #if LWIP_NUM_NETIF_CLIENT_DATA > 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   118  static u8_t netif_client_id;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   119  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   120  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   121  #define NETIF_REPORT_TYPE_IPV4  0x01
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   122  #define NETIF_REPORT_TYPE_IPV6  0x02
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   123  static void netif_issue_reports(struct netif *netif, u8_t report_type);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   124  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   125  #if LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   126  static err_t netif_null_output_ip6(struct netif *netif, struct pbuf *p, const ip6_addr_t *ipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   127  #endif /* LWIP_IPV6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   128  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   129  static err_t netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   130  #endif /* LWIP_IPV4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   131  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   132  #if LWIP_HAVE_LOOPIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   133  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   134  static err_t netif_loop_output_ipv4(struct netif *netif, struct pbuf *p, const ip4_addr_t *addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   135  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   136  #if LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   137  static err_t netif_loop_output_ipv6(struct netif *netif, struct pbuf *p, const ip6_addr_t *addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   138  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   139  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   140  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   141  static struct netif loop_netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   142  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   143  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   144   * Initialize a lwip network interface structure for a loopback interface
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   145   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   146   * @param netif the lwip network interface structure for this loopif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   147   * @return ERR_OK if the loopif is initialized
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   148   *         ERR_MEM if private data couldn't be allocated
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   149   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   150  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   151  netif_loopif_init(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   152  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   153    LWIP_ASSERT("netif_loopif_init: invalid netif", netif != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   154  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   155    /* initialize the snmp variables and counters inside the struct netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   156     * ifSpeed: no assumption can be made!
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   157     */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   158    MIB2_INIT_NETIF(netif, snmp_ifType_softwareLoopback, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   159  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   160    netif->name[0] = 'l';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   161    netif->name[1] = 'o';
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   162  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   163    netif->output = netif_loop_output_ipv4;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   164  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   165  #if LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   166    netif->output_ip6 = netif_loop_output_ipv6;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   167  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   168  #if LWIP_LOOPIF_MULTICAST
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   169    netif_set_flags(netif, NETIF_FLAG_IGMP);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   170  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   171    NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_DISABLE_ALL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   172    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   173  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   174  #endif /* LWIP_HAVE_LOOPIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   175  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   176  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   177  netif_init(void)
; Function netif_init
.L122:
netif_init:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   178  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   179  #if LWIP_HAVE_LOOPIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   180  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   181  #define LOOPIF_ADDRINIT &loop_ipaddr, &loop_netmask, &loop_gw,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   182    ip4_addr_t loop_ipaddr, loop_netmask, loop_gw;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   183    IP4_ADDR(&loop_gw, 127, 0, 0, 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   184    IP4_ADDR(&loop_ipaddr, 127, 0, 0, 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   185    IP4_ADDR(&loop_netmask, 255, 0, 0, 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   186  #else /* LWIP_IPV4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   187  #define LOOPIF_ADDRINIT
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   188  #endif /* LWIP_IPV4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   189  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   190  #if NO_SYS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   191    netif_add(&loop_netif, LOOPIF_ADDRINIT NULL, netif_loopif_init, ip_input);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   192  #else  /* NO_SYS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   193    netif_add(&loop_netif, LOOPIF_ADDRINIT NULL, netif_loopif_init, tcpip_input);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   194  #endif /* NO_SYS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   195  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   196  #if LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   197    IP_ADDR6_HOST(loop_netif.ip6_addr, 0, 0, 0, 0x00000001UL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   198    loop_netif.ip6_addr_state[0] = IP6_ADDR_VALID;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   199  #endif /* LWIP_IPV6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   200  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   201    netif_set_link_up(&loop_netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   202    netif_set_up(&loop_netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   203  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   204  #endif /* LWIP_HAVE_LOOPIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   205  }
	ret
.L343:
	
__netif_init_function_end:
	.size	netif_init,__netif_init_function_end-netif_init
.L189:
	; End of function
	
	.sdecl	'.text.netif.netif_input',code,cluster('netif_input')
	.sect	'.text.netif.netif_input'
	.align	2
	
	.global	netif_input

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   206  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   207  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   208   * @ingroup lwip_nosys
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   209   * Forwards a received packet for input processing with
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   210   * ethernet_input() or ip_input() depending on netif flags.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   211   * Don't call directly, pass to netif_add() and call
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   212   * netif->input().
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   213   * Only works if the netif driver correctly sets
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   214   * NETIF_FLAG_ETHARP and/or NETIF_FLAG_ETHERNET flag!
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   215   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   216  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   217  netif_input(struct pbuf *p, struct netif *inp)
; Function netif_input
.L124:
netif_input:	.type	func
	sub.a	a10,#16
.L488:
	mov.aa	a12,a4
.L490:
	mov.aa	a13,a5
.L491:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   218  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   219    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   220  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   221    LWIP_ASSERT("netif_input: invalid pbuf", p != NULL);
	jnz.a	a12,.L2
.L825:
	movh.a	a15,#@his(.2.str)
	lea	a15,[a15]@los(.2.str)
	st.a	[a10],a15
	mov	d15,#221
	st.w	[a10]4,d15
.L489:
	fcall	.cocofun_35
.L492:
	st.a	[a10]8,a15
	fcall	.cocofun_36
.L493:
	call	Ifx_Lwip_printf
.L2:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   222    LWIP_ASSERT("netif_input: invalid netif", inp != NULL);
	jnz.a	a13,.L3
.L826:
	movh.a	a15,#@his(.4.str)
	lea	a15,[a15]@los(.4.str)
	st.a	[a10],a15
	mov	d15,#222
	st.w	[a10]4,d15
.L495:
	fcall	.cocofun_35
.L496:
	st.a	[a10]8,a15
	fcall	.cocofun_36
	call	Ifx_Lwip_printf
.L3:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   223  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   224  #if LWIP_ETHERNET
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   225    if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
	ld.bu	d15,[a13]41
.L827:
	and	d15,#24
.L828:
	jeq	d15,#0,.L4
.L829:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   226      return ethernet_input(p, inp);
	mov.aa	a4,a12
.L497:
	mov.aa	a5,a13
.L498:
	j	ethernet_input
.L4:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   227    } else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   228  #endif /* LWIP_ETHERNET */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   229      return ip_input(p, inp);
	mov.aa	a4,a12
.L499:
	mov.aa	a5,a13
.L500:
	j	ip4_input
.L432:
	
__netif_input_function_end:
	.size	netif_input,__netif_input_function_end-netif_input
.L259:
	; End of function
	
	.sdecl	'.text.netif.netif_add_noaddr',code,cluster('netif_add_noaddr')
	.sect	'.text.netif.netif_add_noaddr'
	.align	2
	
	.global	netif_add_noaddr

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   230  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   231  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   232  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   233   * @ingroup netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   234   * Add a network interface to the list of lwIP netifs.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   235   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   236   * Same as @ref netif_add but without IPv4 addresses
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   237   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   238  struct netif *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   239  netif_add_noaddr(struct netif *netif, void *state, netif_init_fn init, netif_input_fn input)
; Function netif_add_noaddr
.L126:
netif_add_noaddr:	.type	func
	sub.a	a10,#16
.L501:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   240  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   241    return netif_add(netif,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   242  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   243                     NULL, NULL, NULL,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   244  #endif /* LWIP_IPV4*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   245                     state, init, input);
	st.a	[a10],a5
.L674:
	st.a	[a10]4,a6
.L675:
	st.a	[a10]8,a7
.L676:
	mov.a	a5,#0
.L504:
	mov.aa	a6,a5
.L502:
	mov.aa	a7,a5
.L503:
	j	netif_add
.L345:
	
__netif_add_noaddr_function_end:
	.size	netif_add_noaddr,__netif_add_noaddr_function_end-netif_add_noaddr
.L194:
	; End of function
	
	.sdecl	'.text.netif.netif_add',code,cluster('netif_add')
	.sect	'.text.netif.netif_add'
	.align	2
	
	.global	netif_add

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   246  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   247  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   248  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   249   * @ingroup netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   250   * Add a network interface to the list of lwIP netifs.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   251   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   252   * @param netif a pre-allocated netif structure
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   253   * @param ipaddr IP address for the new netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   254   * @param netmask network mask for the new netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   255   * @param gw default gateway IP address for the new netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   256   * @param state opaque data passed to the new netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   257   * @param init callback function that initializes the interface
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   258   * @param input callback function that is called to pass
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   259   * ingress packets up in the protocol layer stack.\n
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   260   * It is recommended to use a function that passes the input directly
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   261   * to the stack (netif_input(), NO_SYS=1 mode) or via sending a
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   262   * message to TCPIP thread (tcpip_input(), NO_SYS=0 mode).\n
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   263   * These functions use netif flags NETIF_FLAG_ETHARP and NETIF_FLAG_ETHERNET
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   264   * to decide whether to forward to ethernet_input() or ip_input().
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   265   * In other words, the functions only work when the netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   266   * driver is implemented correctly!\n
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   267   * Most members of struct netif should be be initialized by the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   268   * netif init function = netif driver (init parameter of this function).\n
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   269   * IPv6: Don't forget to call netif_create_ip6_linklocal_address() after
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   270   * setting the MAC address in struct netif.hwaddr
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   271   * (IPv6 requires a link-local address).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   272   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   273   * @return netif, or NULL if failed.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   274   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   275  struct netif *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   276  netif_add(struct netif *netif,
; Function netif_add
.L128:
netif_add:	.type	func
	sub.a	a10,#16
.L505:
	mov.aa	a12,a4
.L514:
	ld.a	a2,[a10]16
.L509:
	ld.a	a13,[a10]20
.L512:
	ld.a	a4,[a10]24
.L506:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   277  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   278            const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   279  #endif /* LWIP_IPV4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   280            void *state, netif_init_fn init, netif_input_fn input)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   281  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   282  #if LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   283    s8_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   284  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   285  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   286    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   287  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   288  #if LWIP_SINGLE_NETIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   289    if (netif_default != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   290      LWIP_ASSERT("single netif already set", 0);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   291      return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   292    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   293  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   294  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   295    LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
	jnz.a	a12,.L8
.L681:
	movh.a	a15,#@his(.5.str)
	lea	a15,[a15]@los(.5.str)
	mov	d15,#295
	j	.L9
.L8:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   296    LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
	jnz.a	a13,.L10
.L682:
	mov	d15,#296
	movh.a	a15,#@his(.6.str)
	lea	a15,[a15]@los(.6.str)

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   297  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   298  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   299    if (ipaddr == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   300      ipaddr = ip_2_ip4(IP4_ADDR_ANY);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   301    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   302    if (netmask == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   303      netmask = ip_2_ip4(IP4_ADDR_ANY);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   304    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   305    if (gw == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   306      gw = ip_2_ip4(IP4_ADDR_ANY);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   307    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   308  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   309    /* reset new interface configuration state */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   310    ip_addr_set_zero_ip4(&netif->ip_addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   311    ip_addr_set_zero_ip4(&netif->netmask);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   312    ip_addr_set_zero_ip4(&netif->gw);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   313    netif->output = netif_null_output_ip4;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   314  #endif /* LWIP_IPV4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   315  #if LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   316    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   317      ip_addr_set_zero_ip6(&netif->ip6_addr[i]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   318      netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   319  #if LWIP_IPV6_ADDRESS_LIFETIMES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   320      netif->ip6_addr_valid_life[i] = IP6_ADDR_LIFE_STATIC;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   321      netif->ip6_addr_pref_life[i] = IP6_ADDR_LIFE_STATIC;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   322  #endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   323    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   324    netif->output_ip6 = netif_null_output_ip6;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   325  #endif /* LWIP_IPV6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   326    NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   327    netif->mtu = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   328    netif->flags = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   329  #ifdef netif_get_client_data
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   330    memset(netif->client_data, 0, sizeof(netif->client_data));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   331  #endif /* LWIP_NUM_NETIF_CLIENT_DATA */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   332  #if LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   333  #if LWIP_IPV6_AUTOCONFIG
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   334    /* IPv6 address autoconfiguration not enabled by default */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   335    netif->ip6_autoconfig_enabled = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   336  #endif /* LWIP_IPV6_AUTOCONFIG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   337    nd6_restart_netif(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   338  #endif /* LWIP_IPV6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   339  #if LWIP_NETIF_STATUS_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   340    netif->status_callback = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   341  #endif /* LWIP_NETIF_STATUS_CALLBACK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   342  #if LWIP_NETIF_LINK_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   343    netif->link_callback = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   344  #endif /* LWIP_NETIF_LINK_CALLBACK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   345  #if LWIP_IGMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   346    netif->igmp_mac_filter = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   347  #endif /* LWIP_IGMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   348  #if LWIP_IPV6 && LWIP_IPV6_MLD
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   349    netif->mld_mac_filter = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   350  #endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   351  #if ENABLE_LOOPBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   352    netif->loop_first = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   353    netif->loop_last = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   354  #endif /* ENABLE_LOOPBACK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   355  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   356    /* remember netif specific state information data */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   357    netif->state = state;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   358    netif->num = netif_num;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   359    netif->input = input;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   360  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   361    NETIF_RESET_HINTS(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   362  #if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   363    netif->loop_cnt_current = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   364  #endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   365  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   366  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   367    netif_set_addr(netif, ipaddr, netmask, gw);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   368  #endif /* LWIP_IPV4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   369  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   370    /* call user specified initialization function for netif */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   371    if (init(netif) != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   372      return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   373    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   374  #if LWIP_IPV6 && LWIP_ND6_ALLOW_RA_UPDATES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   375    /* Initialize the MTU for IPv6 to the one set by the netif driver.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   376       This can be updated later by RA. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   377    netif->mtu6 = netif->mtu;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   378  #endif /* LWIP_IPV6 && LWIP_ND6_ALLOW_RA_UPDATES */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   379  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   380  #if !LWIP_SINGLE_NETIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   381    /* Assign a unique netif number in the range [0..254], so that (num+1) can
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   382       serve as an interface index that fits in a u8_t.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   383       We assume that the new netif has not yet been added to the list here.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   384       This algorithm is O(n^2), but that should be OK for lwIP.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   385       */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   386    {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   387      struct netif *netif2;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   388      int num_netifs;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   389      do {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   390        if (netif->num == 255) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   391          netif->num = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   392        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   393        num_netifs = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   394        for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   395          LWIP_ASSERT("netif already added", netif2 != netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   396          num_netifs++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   397          LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   398          if (netif2->num == netif->num) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   399            netif->num++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   400            break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   401          }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   402        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   403      } while (netif2 != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   404    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   405    if (netif->num == 254) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   406      netif_num = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   407    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   408      netif_num = (u8_t)(netif->num + 1);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   409    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   410  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   411    /* add this netif to the list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   412    netif->next = netif_list;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   413    netif_list = netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   414  #endif /* "LWIP_SINGLE_NETIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   415    mib2_netif_added(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   416  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   417  #if LWIP_IGMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   418    /* start IGMP processing */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   419    if (netif->flags & NETIF_FLAG_IGMP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   420      igmp_start(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   421    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   422  #endif /* LWIP_IGMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   423  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   424    LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   425                              netif->name[0], netif->name[1]));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   426  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   427    LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   428    ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   429    LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   430    ip4_addr_debug_print(NETIF_DEBUG, netmask);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   431    LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   432    ip4_addr_debug_print(NETIF_DEBUG, gw);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   433  #endif /* LWIP_IPV4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   434    LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   435  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   436    netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   437  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   438    return netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   439  }
.L9:
	st.a	[a10],a15
	st.w	[a10]4,d15
	fcall	.cocofun_35
	st.a	[a10]8,a15
	fcall	.cocofun_36
.L507:
	call	Ifx_Lwip_printf
.L508:
	j	.L11
.L10:
	fcall	.cocofun_37
.L683:
	jnz.a	a6,.L13
.L684:
	lea	a6,ip_addr_any
.L13:
	jnz.a	a7,.L14
.L685:
	lea	a7,ip_addr_any
.L14:
	mov	d9,#0
	lea	a15,[a12]4
	st.w	[a15+],d9
.L686:
	st.w	[a15+],d9
.L687:
	st.w	[a15+],d9
.L688:
	movh.a	a15,#@his(netif_null_output_ip4)
	lea	a15,[a15]@los(netif_null_output_ip4)
.L689:
	st.a	[a12]20,a15
.L690:
	st.h	[a12]32,d9
.L691:
	st.b	[a12]41,d9
.L692:
	st.a	[a12]28,a2
.L693:
	ld.bu	d15,netif_num
.L694:
	st.b	[a12]44,d15
.L695:
	st.a	[a12]16,a4
.L696:
	mov.aa	a4,a12
.L513:
	call	netif_set_addr
.L510:
	mov.aa	a4,a12
.L515:
	calli	a13
.L516:
	jeq	d2,#0,.L15
.L11:
	mov.a	a2,#0
.L697:
	ret
.L15:
.L17:
	ld.bu	d0,[a12]44
.L698:
	mov	d15,#255
.L699:
	jne	d15,d0,.L18
.L700:
	st.b	[a12]44,d9
.L18:
	mov	d8,#0
	ld.a	a13,netif_list
.L517:
	j	.L19
.L20:
	jne.a	a13,a12,.L21
.L701:
	movh.a	a15,#@his(.7.str)
	lea	a15,[a15]@los(.7.str)
	st.a	[a10],a15
	mov	d15,#395
	st.w	[a10]4,d15
.L511:
	fcall	.cocofun_35
.L518:
	st.a	[a10]8,a15
	fcall	.cocofun_36
	call	Ifx_Lwip_printf
.L21:
	add	d8,#1
.L702:
	mov	d15,#255
	jge	d15,d8,.L22
	movh.a	a15,#@his(.8.str)
	lea	a15,[a15]@los(.8.str)
	st.a	[a10],a15
	mov	d15,#397
	st.w	[a10]4,d15
.L519:
	fcall	.cocofun_35
.L520:
	st.a	[a10]8,a15
	fcall	.cocofun_36
	call	Ifx_Lwip_printf
.L22:
	ld.bu	d15,[a12]44
.L703:
	ld.bu	d0,[a13]44
.L704:
	jne	d15,d0,.L23
.L705:
	add	d15,#1
	st.b	[a12]44,d15
.L706:
	j	.L24
.L23:
	ld.a	a13,[a13]
.L19:
	jnz.a	a13,.L20
.L24:
	jnz.a	a13,.L17
.L364:
	ld.bu	d15,[a12]44
.L707:
	mov	d0,#254
.L708:
	jne	d15,d0,.L25
.L709:
	mov	d15,#0
	j	.L26
.L25:
	add	d15,#1
.L26:
	st.b	netif_num,d15
.L710:
	ld.a	a15,netif_list
.L711:
	st.a	[a12],a15
.L712:
	st.a	netif_list,a12
.L713:
	mov	d4,#1
	mov.a	a5,#0
	mov.aa	a4,a12
.L521:
	call	netif_invoke_ext_callback
.L522:
	mov.aa	a2,a12
.L523:
	ret
.L353:
	
__netif_add_function_end:
	.size	netif_add,__netif_add_function_end-netif_add
.L199:
	; End of function
	
	.sdecl	'.text.netif..cocofun_37',code,cluster('.cocofun_37')
	.sect	'.text.netif..cocofun_37'
	.align	2
; Function .cocofun_37
.L130:
.cocofun_37:	.type	func
; Function body .cocofun_37, coco_iter:0
	jnz.a	a5,.L12
.L937:
	lea	a5,ip_addr_any
.L12:
	fret
.L334:
	; End of function
	.sdecl	'.text.netif..cocofun_36',code,cluster('.cocofun_36')
	.sect	'.text.netif..cocofun_36'
	.align	2
; Function .cocofun_36
.L132:
.cocofun_36:	.type	func
; Function body .cocofun_36, coco_iter:0
	movh.a	a4,#@his(.1.str)
.L494:
	lea	a4,[a4]@los(.1.str)
.L932:
	fret
.L329:
	; End of function
	.sdecl	'.text.netif..cocofun_35',code,cluster('.cocofun_35')
	.sect	'.text.netif..cocofun_35'
	.align	2
; Function .cocofun_35
.L134:
.cocofun_35:	.type	func
; Function body .cocofun_35, coco_iter:0
	movh.a	a15,#@his(.3.str)
	lea	a15,[a15]@los(.3.str)
.L927:
	fret
.L324:
	; End of function
	.sdecl	'.text.netif.netif_do_ip_addr_changed',code,cluster('netif_do_ip_addr_changed')
	.sect	'.text.netif.netif_do_ip_addr_changed'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   440  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   441  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   442  netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
; Function netif_do_ip_addr_changed
.L136:
netif_do_ip_addr_changed:	.type	func
	mov.aa	a15,a4
.L525:
	mov.aa	a12,a5
.L526:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   443  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   444  #if LWIP_TCP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   445    tcp_netif_ip_addr_changed(old_addr, new_addr);
	call	tcp_netif_ip_addr_changed
.L524:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   446  #endif /* LWIP_TCP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   447  #if LWIP_UDP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   448    udp_netif_ip_addr_changed(old_addr, new_addr);
	mov.aa	a4,a15
.L527:
	mov.aa	a5,a12
.L528:
	j	udp_netif_ip_addr_changed
.L469:
	
__netif_do_ip_addr_changed_function_end:
	.size	netif_do_ip_addr_changed,__netif_do_ip_addr_changed_function_end-netif_do_ip_addr_changed
.L304:
	; End of function
	
	.sdecl	'.text.netif.netif_do_set_ipaddr',code,cluster('netif_do_set_ipaddr')
	.sect	'.text.netif.netif_do_set_ipaddr'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   449  #endif /* LWIP_UDP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   450  #if LWIP_RAW
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   451    raw_netif_ip_addr_changed(old_addr, new_addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   452  #endif /* LWIP_RAW */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   453  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   454  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   455  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   456  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   457  netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
; Function netif_do_set_ipaddr
.L138:
netif_do_set_ipaddr:	.type	func
	mov.aa	a15,a4
.L532:
	mov.aa	a12,a5
.L533:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   458  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   459    LWIP_ASSERT("invalid pointer", ipaddr != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   460    LWIP_ASSERT("invalid pointer", old_addr != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   461  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   462    /* address is actually being changed? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   463    if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
	ld.w	d0,[a12]
	ld.w	d15,[a15]4
.L903:
	mov.aa	a13,a6
.L534:
	sub.a	a10,#8
.L529:
	jeq	d15,d0,.L28
.L478:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   464      ip_addr_t new_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   465      *ip_2_ip4(&new_addr) = *ipaddr;
	st.w	[a10],d0
.L904:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   466      IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   467  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   468      ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
	st.w	[a13],d15
.L905:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   469  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   470      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
	movh.a	a4,#@his(.16.str)
.L531:
	lea	a4,[a4]@los(.16.str)
	call	Ifx_Lwip_printf
.L530:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   471      netif_do_ip_addr_changed(old_addr, &new_addr);
	mov.aa	a5,a10
	mov.aa	a4,a13
.L535:
	call	netif_do_ip_addr_changed
.L536:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   472  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   473      mib2_remove_ip4(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   474      mib2_remove_route_ip4(0, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   475      /* set new IP address to netif */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   476      ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
	ld.w	d15,[a12]
	st.w	[a15]4,d15
.L906:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   477      IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   478      mib2_add_ip4(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   479      mib2_add_route_ip4(0, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   480  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   481      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
	mov	d4,#1
	mov.aa	a4,a15
.L537:
	call	netif_issue_reports
.L538:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   482  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   483      NETIF_STATUS_CALLBACK(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   484      return 1; /* address changed */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   485    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   486    return 0; /* address unchanged */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   487  }
	mov	d2,#1
	ret
.L28:
	mov	d2,#0
	ret
.L473:
	
__netif_do_set_ipaddr_function_end:
	.size	netif_do_set_ipaddr,__netif_do_set_ipaddr_function_end-netif_do_set_ipaddr
.L309:
	; End of function
	
	.sdecl	'.text.netif.netif_set_ipaddr',code,cluster('netif_set_ipaddr')
	.sect	'.text.netif.netif_set_ipaddr'
	.align	2
	
	.global	netif_set_ipaddr

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   488  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   489  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   490   * @ingroup netif_ip4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   491   * Change the IP address of a network interface
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   492   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   493   * @param netif the network interface to change
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   494   * @param ipaddr the new IP address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   495   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   496   * @note call netif_set_addr() if you also want to change netmask and
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   497   * default gateway
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   498   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   499  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   500  netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
; Function netif_set_ipaddr
.L140:
netif_set_ipaddr:	.type	func
	sub.a	a10,#32
.L539:
	mov.aa	a12,a4
.L541:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   501  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   502    ip_addr_t old_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   503  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   504    LWIP_ERROR("netif_set_ipaddr: invalid netif", netif != NULL, return);
	jnz.a	a12,.L31
.L767:
	movh.a	a15,#@his(.17.str)
	lea	a15,[a15]@los(.17.str)
	st.a	[a10],a15
	mov	d15,#504
	st.w	[a10]4,d15
.L540:
	fcall	.cocofun_35
.L542:
	st.a	[a10]8,a15
	fcall	.cocofun_36
.L543:
	j	Ifx_Lwip_printf
.L31:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   505  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   506    /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   507    if (ipaddr == NULL) {
	fcall	.cocofun_37
.L768:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   508      ipaddr = IP4_ADDR_ANY4;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   509    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   510  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   511    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   512  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   513    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
	lea	a6,[a10]12
	call	netif_do_set_ipaddr
.L544:
	jeq	d2,#0,.L34
.L399:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   514  #if LWIP_NETIF_EXT_STATUS_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   515      netif_ext_callback_args_t args;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   516      args.ipv4_changed.old_address = &old_addr;
	lea	a15,[a10]12
.L769:
	st.a	[a10]16,a15
.L770:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   517      netif_invoke_ext_callback(netif, LWIP_NSC_IPV4_ADDRESS_CHANGED, &args);
	mov	d4,#16
	lea	a5,[a10]16
	mov.aa	a4,a12
.L545:
	j	netif_invoke_ext_callback
.L34:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   518  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   519    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   520  }
	ret
.L395:
	
__netif_set_ipaddr_function_end:
	.size	netif_set_ipaddr,__netif_set_ipaddr_function_end-netif_set_ipaddr
.L224:
	; End of function
	
	.sdecl	'.text.netif.netif_do_set_netmask',code,cluster('netif_do_set_netmask')
	.sect	'.text.netif.netif_do_set_netmask'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   521  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   522  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   523  netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
; Function netif_do_set_netmask
.L142:
netif_do_set_netmask:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   524  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   525    /* address is actually being changed? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   526    if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
	ld.w	d15,[a4]8
	ld.w	d0,[a5]
.L911:
	sub.a	a10,#24
.L546:
	jeq	d15,d0,.L35
.L912:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   527  #if LWIP_NETIF_EXT_STATUS_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   528      LWIP_ASSERT("invalid pointer", old_nm != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   529      ip_addr_copy(*old_nm, *netif_ip_netmask4(netif));
	st.w	[a6],d15
.L913:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   530  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   531      LWIP_UNUSED_ARG(old_nm);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   532  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   533      mib2_remove_route_ip4(0, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   534      /* set new netmask to netif */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   535      ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
	ld.w	d15,[a5]
	st.w	[a4]8,d15
.L914:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   536      IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   537      mib2_add_route_ip4(0, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   538      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
	ld.b	d15,[a4]42
	st.w	[a10],d15
	ld.b	d15,[a4]43
	st.w	[a10]4,d15
	ld.bu	d15,[a4]8
	st.w	[a10]8,d15
	ld.bu	d15,[a4]9
	st.w	[a10]12,d15
	ld.bu	d15,[a4]10
	st.w	[a10]16,d15
	ld.bu	d15,[a4]11
	st.w	[a10]20,d15
	movh.a	a4,#@his(.18.str)
.L547:
	lea	a4,[a4]@los(.18.str)
	call	Ifx_Lwip_printf
.L548:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   539                  netif->name[0], netif->name[1],
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   540                  ip4_addr1_16(netif_ip4_netmask(netif)),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   541                  ip4_addr2_16(netif_ip4_netmask(netif)),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   542                  ip4_addr3_16(netif_ip4_netmask(netif)),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   543                  ip4_addr4_16(netif_ip4_netmask(netif))));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   544      return 1; /* netmask changed */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   545    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   546    return 0; /* netmask unchanged */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   547  }
	mov	d2,#1
	ret
.L35:
	mov	d2,#0
	ret
.L480:
	
__netif_do_set_netmask_function_end:
	.size	netif_do_set_netmask,__netif_do_set_netmask_function_end-netif_do_set_netmask
.L314:
	; End of function
	
	.sdecl	'.text.netif.netif_set_netmask',code,cluster('netif_set_netmask')
	.sect	'.text.netif.netif_set_netmask'
	.align	2
	
	.global	netif_set_netmask

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   548  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   549  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   550   * @ingroup netif_ip4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   551   * Change the netmask of a network interface
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   552   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   553   * @param netif the network interface to change
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   554   * @param netmask the new netmask
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   555   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   556   * @note call netif_set_addr() if you also want to change ip address and
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   557   * default gateway
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   558   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   559  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   560  netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
; Function netif_set_netmask
.L144:
netif_set_netmask:	.type	func
	sub.a	a10,#32
.L549:
	mov.aa	a12,a4
.L551:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   561  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   562  #if LWIP_NETIF_EXT_STATUS_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   563    ip_addr_t old_nm_val;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   564    ip_addr_t *old_nm = &old_nm_val;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   565  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   566    ip_addr_t *old_nm = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   567  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   568    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   569  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   570    LWIP_ERROR("netif_set_netmask: invalid netif", netif != NULL, return);
	jnz.a	a12,.L38
.L775:
	movh.a	a15,#@his(.19.str)
	lea	a15,[a15]@los(.19.str)
	st.a	[a10],a15
	mov	d15,#570
	st.w	[a10]4,d15
.L550:
	fcall	.cocofun_35
.L552:
	st.a	[a10]8,a15
	fcall	.cocofun_36
.L553:
	j	Ifx_Lwip_printf
.L38:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   571  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   572    /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   573    if (netmask == NULL) {
	fcall	.cocofun_37
.L776:
	lea	a6,[a10]12
	call	netif_do_set_netmask
.L554:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   574      netmask = IP4_ADDR_ANY4;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   575    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   576  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   577    if (netif_do_set_netmask(netif, netmask, old_nm)) {
	jeq	d2,#0,.L41
.L405:
	lea	a15,[a10]12
.L777:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   578  #if LWIP_NETIF_EXT_STATUS_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   579      netif_ext_callback_args_t args;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   580      args.ipv4_changed.old_netmask = old_nm;
	st.a	[a10]20,a15
.L778:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   581      netif_invoke_ext_callback(netif, LWIP_NSC_IPV4_NETMASK_CHANGED, &args);
	mov	d4,#64
	lea	a5,[a10]16
	mov.aa	a4,a12
.L555:
	j	netif_invoke_ext_callback
.L41:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   582  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   583    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   584  }
	ret
.L401:
	
__netif_set_netmask_function_end:
	.size	netif_set_netmask,__netif_set_netmask_function_end-netif_set_netmask
.L229:
	; End of function
	
	.sdecl	'.text.netif.netif_do_set_gw',code,cluster('netif_do_set_gw')
	.sect	'.text.netif.netif_do_set_gw'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   585  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   586  static int
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   587  netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
; Function netif_do_set_gw
.L146:
netif_do_set_gw:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   588  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   589    /* address is actually being changed? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   590    if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
	ld.w	d15,[a4]12
	ld.w	d0,[a5]
.L919:
	sub.a	a10,#24
.L556:
	jeq	d15,d0,.L42
.L920:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   591  #if LWIP_NETIF_EXT_STATUS_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   592      LWIP_ASSERT("invalid pointer", old_gw != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   593      ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
	st.w	[a6],d15
.L921:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   594  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   595      LWIP_UNUSED_ARG(old_gw);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   596  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   597  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   598      ip4_addr_set(ip_2_ip4(&netif->gw), gw);
	ld.w	d15,[a5]
	st.w	[a4]12,d15
.L922:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   599      IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   600      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
	ld.b	d15,[a4]42
	st.w	[a10],d15
	ld.b	d15,[a4]43
	st.w	[a10]4,d15
	ld.bu	d15,[a4]12
	st.w	[a10]8,d15
	ld.bu	d15,[a4]13
	st.w	[a10]12,d15
	ld.bu	d15,[a4]14
	st.w	[a10]16,d15
	ld.bu	d15,[a4]15
	st.w	[a10]20,d15
	movh.a	a4,#@his(.20.str)
.L558:
	lea	a4,[a4]@los(.20.str)
	call	Ifx_Lwip_printf
.L557:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   601                  netif->name[0], netif->name[1],
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   602                  ip4_addr1_16(netif_ip4_gw(netif)),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   603                  ip4_addr2_16(netif_ip4_gw(netif)),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   604                  ip4_addr3_16(netif_ip4_gw(netif)),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   605                  ip4_addr4_16(netif_ip4_gw(netif))));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   606      return 1; /* gateway changed */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   607    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   608    return 0; /* gateway unchanged */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   609  }
	mov	d2,#1
	ret
.L42:
	mov	d2,#0
	ret
.L484:
	
__netif_do_set_gw_function_end:
	.size	netif_do_set_gw,__netif_do_set_gw_function_end-netif_do_set_gw
.L319:
	; End of function
	
	.sdecl	'.text.netif.netif_set_gw',code,cluster('netif_set_gw')
	.sect	'.text.netif.netif_set_gw'
	.align	2
	
	.global	netif_set_gw

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   610  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   611  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   612   * @ingroup netif_ip4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   613   * Change the default gateway for a network interface
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   614   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   615   * @param netif the network interface to change
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   616   * @param gw the new default gateway
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   617   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   618   * @note call netif_set_addr() if you also want to change ip address and netmask
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   619   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   620  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   621  netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
; Function netif_set_gw
.L148:
netif_set_gw:	.type	func
	sub.a	a10,#32
.L559:
	mov.aa	a12,a4
.L561:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   622  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   623  #if LWIP_NETIF_EXT_STATUS_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   624    ip_addr_t old_gw_val;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   625    ip_addr_t *old_gw = &old_gw_val;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   626  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   627    ip_addr_t *old_gw = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   628  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   629    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   630  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   631    LWIP_ERROR("netif_set_gw: invalid netif", netif != NULL, return);
	jnz.a	a12,.L45
.L783:
	movh.a	a15,#@his(.21.str)
	lea	a15,[a15]@los(.21.str)
	st.a	[a10],a15
	mov	d15,#631
	st.w	[a10]4,d15
.L560:
	fcall	.cocofun_35
.L562:
	st.a	[a10]8,a15
	fcall	.cocofun_36
.L563:
	j	Ifx_Lwip_printf
.L45:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   632  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   633    /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   634    if (gw == NULL) {
	fcall	.cocofun_37
.L784:
	lea	a6,[a10]12
	call	netif_do_set_gw
.L564:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   635      gw = IP4_ADDR_ANY4;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   636    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   637  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   638    if (netif_do_set_gw(netif, gw, old_gw)) {
	jeq	d2,#0,.L48
.L411:
	lea	a15,[a10]12
.L785:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   639  #if LWIP_NETIF_EXT_STATUS_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   640      netif_ext_callback_args_t args;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   641      args.ipv4_changed.old_gw = old_gw;
	st.a	[a10]24,a15
.L786:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   642      netif_invoke_ext_callback(netif, LWIP_NSC_IPV4_GATEWAY_CHANGED, &args);
	mov	d4,#32
	lea	a5,[a10]16
	mov.aa	a4,a12
.L565:
	j	netif_invoke_ext_callback
.L48:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   643  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   644    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   645  }
	ret
.L407:
	
__netif_set_gw_function_end:
	.size	netif_set_gw,__netif_set_gw_function_end-netif_set_gw
.L234:
	; End of function
	
	.sdecl	'.text.netif.netif_set_addr',code,cluster('netif_set_addr')
	.sect	'.text.netif.netif_set_addr'
	.align	2
	
	.global	netif_set_addr

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   646  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   647  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   648   * @ingroup netif_ip4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   649   * Change IP address configuration for a network interface (including netmask
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   650   * and default gateway).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   651   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   652   * @param netif the network interface to change
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   653   * @param ipaddr the new IP address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   654   * @param netmask the new netmask
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   655   * @param gw the new default gateway
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   656   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   657  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   658  netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
; Function netif_set_addr
.L150:
netif_set_addr:	.type	func
	sub.a	a10,#24
.L566:
	mov.aa	a12,a4
.L568:
	mov.aa	a13,a5
.L569:
	mov.aa	a15,a6
.L570:
	mov.aa	a14,a7
.L572:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   659                 const ip4_addr_t *gw)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   660  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   661  #if LWIP_NETIF_EXT_STATUS_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   662    netif_nsc_reason_t change_reason = LWIP_NSC_NONE;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   663    netif_ext_callback_args_t cb_args;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   664    ip_addr_t old_nm_val;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   665    ip_addr_t old_gw_val;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   666    ip_addr_t *old_nm = &old_nm_val;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   667    ip_addr_t *old_gw = &old_gw_val;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   668  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   669    ip_addr_t *old_nm = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   670    ip_addr_t *old_gw = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   671  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   672    ip_addr_t old_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   673    int remove;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   674  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   675    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   676  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   677    /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   678    if (ipaddr == NULL) {
	mov	d15,#0
	jnz.a	a13,.L49
.L573:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   679      ipaddr = IP4_ADDR_ANY4;
	lea	a13,ip_addr_any
.L49:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   680    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   681    if (netmask == NULL) {
	jnz.a	a15,.L50
.L718:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   682      netmask = IP4_ADDR_ANY4;
	lea	a15,ip_addr_any
.L50:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   683    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   684    if (gw == NULL) {
	jnz.a	a14,.L51
.L719:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   685      gw = IP4_ADDR_ANY4;
	lea	a14,ip_addr_any
.L51:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   686    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   687  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   688    remove = ip4_addr_isany(ipaddr);
	ld.w	d0,[a13]
	eq	d8,d0,#0
.L720:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   689    if (remove) {
	jne	d0,#0,.L52
.L721:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   690      /* when removing an address, we have to remove it *before* changing netmask/gw
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   691         to ensure that tcp RST segment can be sent correctly */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   692      if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
	lea	a6,[a10]20
	mov.aa	a5,a13
.L575:
	call	netif_do_set_ipaddr
.L567:
	jeq	d2,#0,.L53
.L722:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   693  #if LWIP_NETIF_EXT_STATUS_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   694        change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   695        cb_args.ipv4_changed.old_address = &old_addr;
	mov	d15,#16
	lea	a2,[a10]20
.L723:
	st.a	[a10],a2
.L53:
.L52:
	lea	a6,[a10]12
	mov.aa	a4,a12
.L576:
	mov.aa	a5,a15
.L578:
	call	netif_do_set_netmask
.L577:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   696  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   697      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   698    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   699    if (netif_do_set_netmask(netif, netmask, old_nm)) {
	jeq	d2,#0,.L54
.L724:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   700  #if LWIP_NETIF_EXT_STATUS_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   701      change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
	or	d15,#64
	lea	a15,[a10]12
.L571:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   702      cb_args.ipv4_changed.old_netmask = old_nm;
	st.a	[a10]4,a15
.L54:
	lea	a6,[a10]16
	mov.aa	a4,a12
.L579:
	mov.aa	a5,a14
.L581:
	call	netif_do_set_gw
.L580:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   703  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   704    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   705    if (netif_do_set_gw(netif, gw, old_gw)) {
	jeq	d2,#0,.L55
.L725:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   706  #if LWIP_NETIF_EXT_STATUS_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   707      change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
	or	d15,#32
	lea	a15,[a10]16
.L726:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   708      cb_args.ipv4_changed.old_gw = old_gw;
	st.a	[a10]8,a15
.L55:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   709  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   710    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   711    if (!remove) {
	jne	d8,#0,.L56
.L727:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   712      /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   713      if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
	lea	a6,[a10]20
	mov.aa	a4,a12
.L582:
	mov.aa	a5,a13
.L584:
	call	netif_do_set_ipaddr
.L583:
	jeq	d2,#0,.L57
.L728:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   714  #if LWIP_NETIF_EXT_STATUS_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   715        change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   716        cb_args.ipv4_changed.old_address = &old_addr;
	or	d15,#16
	lea	a15,[a10]20
.L729:
	st.a	[a10],a15
.L57:
.L56:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   717  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   718      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   719    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   720  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   721  #if LWIP_NETIF_EXT_STATUS_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   722    if (change_reason != LWIP_NSC_NONE) {
	jeq	d15,#0,.L58
.L730:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   723      change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   724      netif_invoke_ext_callback(netif, change_reason, &cb_args);
	or	d4,d15,#128
	mov.aa	a5,a10
.L574:
	mov.aa	a4,a12
.L585:
	j	netif_invoke_ext_callback
.L58:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   725    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   726  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   727  }
	ret
.L368:
	
__netif_set_addr_function_end:
	.size	netif_set_addr,__netif_set_addr_function_end-netif_set_addr
.L204:
	; End of function
	
	.sdecl	'.text.netif.netif_remove',code,cluster('netif_remove')
	.sect	'.text.netif.netif_remove'
	.align	2
	
	.global	netif_remove

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   728  #endif /* LWIP_IPV4*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   729  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   730  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   731   * @ingroup netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   732   * Remove a network interface from the list of lwIP netifs.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   733   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   734   * @param netif the network interface to remove
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   735   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   736  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   737  netif_remove(struct netif *netif)
; Function netif_remove
.L152:
netif_remove:	.type	func
	mov.aa	a15,a4
.L587:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   738  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   739  #if LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   740    int i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   741  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   742  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   743    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   744  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   745    if (netif == NULL) {
	jz.a	a15,.L59
.L735:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   746      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   747    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   748  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   749    netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_REMOVED, NULL);
	mov	d4,#2
	mov.a	a5,#0
	call	netif_invoke_ext_callback
.L586:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   750  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   751  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   752    if (!ip4_addr_isany_val(*netif_ip4_addr(netif))) {
	ld.w	d15,[a15]4
	jeq	d15,#0,.L60
.L736:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   753      netif_do_ip_addr_changed(netif_ip_addr4(netif), NULL);
	lea	a4,[a15]4
.L737:
	mov.a	a5,#0
	call	netif_do_ip_addr_changed
.L60:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   754    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   755  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   756  #if LWIP_IGMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   757    /* stop IGMP processing */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   758    if (netif->flags & NETIF_FLAG_IGMP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   759      igmp_stop(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   760    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   761  #endif /* LWIP_IGMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   762  #endif /* LWIP_IPV4*/
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   763  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   764  #if LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   765    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   766      if (ip6_addr_isvalid(netif_ip6_addr_state(netif, i))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   767        netif_do_ip_addr_changed(netif_ip_addr6(netif, i), NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   768      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   769    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   770  #if LWIP_IPV6_MLD
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   771    /* stop MLD processing */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   772    mld6_stop(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   773  #endif /* LWIP_IPV6_MLD */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   774  #endif /* LWIP_IPV6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   775    if (netif_is_up(netif)) {
	ld.bu	d15,[a15]41
.L738:
	jz.t	d15:0,.L61
.L739:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   776      /* set netif down before removing (call callback function) */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   777      netif_set_down(netif);
	mov.aa	a4,a15
.L589:
	call	netif_set_down
.L61:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   778    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   779  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   780    mib2_remove_ip4(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   781  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   782    /* this netif is default? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   783    if (netif_default == netif) {
	ld.a	a2,netif_default
.L740:
	jne.a	a2,a15,.L62
.L741:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   784      /* reset default netif */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   785      netif_set_default(NULL);
	mov.a	a4,#0
	call	netif_set_default
.L62:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   786    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   787  #if !LWIP_SINGLE_NETIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   788    /*  is it the first netif? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   789    if (netif_list == netif) {
	ld.a	a2,netif_list
.L590:
	jne.a	a2,a15,.L65
.L742:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   790      netif_list = netif->next;
	ld.a	a15,[a15]
.L588:
	st.a	netif_list,a15

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   791    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   792      /*  look for netif further down the list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   793      struct netif *tmp_netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   794      NETIF_FOREACH(tmp_netif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   795        if (tmp_netif->next == netif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   796          tmp_netif->next = netif->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   797          break;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   798        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   799      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   800      if (tmp_netif == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   801        return; /* netif is not on the list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   802      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   803    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   804  #endif /* !LWIP_SINGLE_NETIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   805    mib2_netif_removed(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   806  #if LWIP_NETIF_REMOVE_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   807    if (netif->remove_callback) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   808      netif->remove_callback(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   809    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   810  #endif /* LWIP_NETIF_REMOVE_CALLBACK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   811    LWIP_DEBUGF( NETIF_DEBUG, ("netif_remove: removed netif\n") );
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   812  }
.L59:
	ret
.L66:
	ld.a	a4,[a2]
.L743:
	jne.a	a4,a15,.L67
.L744:
	ld.a	a15,[a15]
.L591:
	st.a	[a2],a15
.L384:
	ret
.L67:
	mov.aa	a2,a4
.L65:
	jnz.a	a2,.L66
.L385:
	ret
.L381:
	
__netif_remove_function_end:
	.size	netif_remove,__netif_remove_function_end-netif_remove
.L209:
	; End of function
	
	.sdecl	'.text.netif.netif_set_default',code,cluster('netif_set_default')
	.sect	'.text.netif.netif_set_default'
	.align	2
	
	.global	netif_set_default

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   813  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   814  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   815   * @ingroup netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   816   * Set a network interface as the default network interface
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   817   * (used to output all packets for which no specific route is found)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   818   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   819   * @param netif the default network interface
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   820   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   821  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   822  netif_set_default(struct netif *netif)
; Function netif_set_default
.L154:
netif_set_default:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   823  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   824    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   825  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   826    if (netif == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   827      /* remove default route */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   828      mib2_remove_route_ip4(1, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   829    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   830      /* install default route */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   831      mib2_add_route_ip4(1, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   832    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   833    netif_default = netif;
	st.a	netif_default,a4
.L762:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   834    LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   835                              netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   836  }
	ret
.L393:
	
__netif_set_default_function_end:
	.size	netif_set_default,__netif_set_default_function_end-netif_set_default
.L219:
	; End of function
	
	.sdecl	'.text.netif.netif_set_up',code,cluster('netif_set_up')
	.sect	'.text.netif.netif_set_up'
	.align	2
	
	.global	netif_set_up

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   837  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   838  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   839   * @ingroup netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   840   * Bring an interface up, available for processing
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   841   * traffic.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   842   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   843  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   844  netif_set_up(struct netif *netif)
; Function netif_set_up
.L156:
netif_set_up:	.type	func
	sub.a	a10,#24
.L592:
	mov.aa	a15,a4
.L594:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   845  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   846    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   847  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   848    LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
	jnz.a	a15,.L69
.L791:
	movh.a	a15,#@his(.24.str)
.L595:
	lea	a15,[a15]@los(.24.str)
	st.a	[a10],a15
	mov	d15,#848
	st.w	[a10]4,d15
.L593:
	fcall	.cocofun_35
.L596:
	st.a	[a10]8,a15
	fcall	.cocofun_36
.L597:
	j	Ifx_Lwip_printf
.L69:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   849  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   850    if (!(netif->flags & NETIF_FLAG_UP)) {
	ld.bu	d15,[a15]41
.L792:
	jnz.t	d15:0,.L71
.L793:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   851      netif_set_flags(netif, NETIF_FLAG_UP);
	or	d15,#1
	st.b	[a15]41,d15
.L415:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   852  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   853      MIB2_COPY_SYSUPTIME_TO(&netif->ts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   854  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   855      NETIF_STATUS_CALLBACK(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   856  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   857  #if LWIP_NETIF_EXT_STATUS_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   858      {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   859        netif_ext_callback_args_t args;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   860        args.status_changed.state = 1;
	mov	d15,#1
	st.b	[a10]12,d15
.L794:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   861        netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
	mov	d4,#8
	lea	a5,[a10]12
	call	netif_invoke_ext_callback
.L416:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   862      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   863  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   864  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   865      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
	mov	d4,#3
	mov.aa	a4,a15
.L598:
	j	netif_issue_reports
.L71:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   866  #if LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   867      nd6_restart_netif(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   868  #endif /* LWIP_IPV6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   869    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   870  }
	ret
.L413:
	
__netif_set_up_function_end:
	.size	netif_set_up,__netif_set_up_function_end-netif_set_up
.L239:
	; End of function
	
	.sdecl	'.text.netif.netif_issue_reports',code,cluster('netif_issue_reports')
	.sect	'.text.netif.netif_issue_reports'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   871  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   872  /** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   873   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   874  static void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   875  netif_issue_reports(struct netif *netif, u8_t report_type)
; Function netif_issue_reports
.L158:
netif_issue_reports:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   876  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   877    LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   878  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   879    /* Only send reports when both link and admin states are up */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   880    if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
	ld.bu	d15,[a4]41
.L885:
	jz.t	d15:2,.L72
.L886:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   881        !(netif->flags & NETIF_FLAG_UP)) {
	jz.t	d15:0,.L73
.L887:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   882      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   883    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   884  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   885  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   886    if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
	jz.t	d4:0,.L74
.L888:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   887        !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
	ld.w	d0,[a4]4
	jeq	d0,#0,.L75
.L889:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   888  #if LWIP_ARP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   889      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   890      if (netif->flags & (NETIF_FLAG_ETHARP)) {
	jz.t	d15:3,.L76
.L890:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   891        etharp_gratuitous(netif);
	lea	a5,[a4]4
	j	etharp_request
.L76:
.L75:
.L74:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   892      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   893  #endif /* LWIP_ARP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   894  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   895  #if LWIP_IGMP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   896      /* resend IGMP memberships */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   897      if (netif->flags & NETIF_FLAG_IGMP) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   898        igmp_report_groups(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   899      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   900  #endif /* LWIP_IGMP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   901    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   902  #endif /* LWIP_IPV4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   903  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   904  #if LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   905    if (report_type & NETIF_REPORT_TYPE_IPV6) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   906  #if LWIP_IPV6_MLD
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   907      /* send mld memberships */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   908      mld6_report_groups(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   909  #endif /* LWIP_IPV6_MLD */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   910    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   911  #endif /* LWIP_IPV6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   912  }
.L73:
.L72:
	ret
.L462:
	
__netif_issue_reports_function_end:
	.size	netif_issue_reports,__netif_issue_reports_function_end-netif_issue_reports
.L294:
	; End of function
	
	.sdecl	'.text.netif.netif_set_down',code,cluster('netif_set_down')
	.sect	'.text.netif.netif_set_down'
	.align	2
	
	.global	netif_set_down

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   913  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   914  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   915   * @ingroup netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   916   * Bring an interface down, disabling any traffic processing.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   917   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   918  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   919  netif_set_down(struct netif *netif)
; Function netif_set_down
.L160:
netif_set_down:	.type	func
	sub.a	a10,#24
.L599:
	mov.aa	a15,a4
.L601:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   920  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   921    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   922  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   923    LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
	jnz.a	a15,.L77
.L799:
	movh.a	a15,#@his(.26.str)
.L602:
	lea	a15,[a15]@los(.26.str)
	st.a	[a10],a15
	mov	d15,#923
	st.w	[a10]4,d15
.L600:
	fcall	.cocofun_35
.L603:
	st.a	[a10]8,a15
	fcall	.cocofun_36
.L604:
	j	Ifx_Lwip_printf
.L77:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   924  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   925    if (netif->flags & NETIF_FLAG_UP) {
	ld.bu	d15,[a15]41
.L800:
	jz.t	d15:0,.L79
.L420:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   926  #if LWIP_NETIF_EXT_STATUS_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   927      {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   928        netif_ext_callback_args_t args;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   929        args.status_changed.state = 0;
	mov	d15,#0
	st.b	[a10]12,d15
.L801:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   930        netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
	mov	d4,#8
	lea	a5,[a10]12
	call	netif_invoke_ext_callback
.L421:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   931      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   932  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   933  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   934      netif_clear_flags(netif, NETIF_FLAG_UP);
	ld.bu	d15,[a15]41
	and	d15,#254
	st.b	[a15]41,d15
.L802:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   935      MIB2_COPY_SYSUPTIME_TO(&netif->ts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   936  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   937  #if LWIP_IPV4 && LWIP_ARP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   938      if (netif->flags & NETIF_FLAG_ETHARP) {
	jz.t	d15:3,.L80
.L803:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   939        etharp_cleanup_netif(netif);
	mov.aa	a4,a15
.L605:
	j	etharp_cleanup_netif
.L80:
.L79:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   940      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   941  #endif /* LWIP_IPV4 && LWIP_ARP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   942  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   943  #if LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   944      nd6_cleanup_netif(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   945  #endif /* LWIP_IPV6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   946  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   947      NETIF_STATUS_CALLBACK(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   948    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   949  }
	ret
.L418:
	
__netif_set_down_function_end:
	.size	netif_set_down,__netif_set_down_function_end-netif_set_down
.L244:
	; End of function
	
	.sdecl	'.text.netif.netif_set_link_up',code,cluster('netif_set_link_up')
	.sect	'.text.netif.netif_set_link_up'
	.align	2
	
	.global	netif_set_link_up

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   950  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   951  #if LWIP_NETIF_STATUS_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   952  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   953   * @ingroup netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   954   * Set callback to be called when interface is brought up/down or address is changed while up
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   955   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   956  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   957  netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   958  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   959    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   960  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   961    if (netif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   962      netif->status_callback = status_callback;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   963    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   964  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   965  #endif /* LWIP_NETIF_STATUS_CALLBACK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   966  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   967  #if LWIP_NETIF_REMOVE_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   968  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   969   * @ingroup netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   970   * Set callback to be called when the interface has been removed
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   971   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   972  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   973  netif_set_remove_callback(struct netif *netif, netif_status_callback_fn remove_callback)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   974  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   975    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   976  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   977    if (netif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   978      netif->remove_callback = remove_callback;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   979    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   980  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   981  #endif /* LWIP_NETIF_REMOVE_CALLBACK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   982  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   983  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   984   * @ingroup netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   985   * Called by a driver when its link goes up
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   986   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   987  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   988  netif_set_link_up(struct netif *netif)
; Function netif_set_link_up
.L162:
netif_set_link_up:	.type	func
	sub.a	a10,#24
.L606:
	mov.aa	a15,a4
.L608:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   989  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   990    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   991  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   992    LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
	jnz.a	a15,.L81
.L808:
	movh.a	a15,#@his(.27.str)
.L609:
	lea	a15,[a15]@los(.27.str)
	st.a	[a10],a15
	mov	d15,#992
	st.w	[a10]4,d15
.L607:
	fcall	.cocofun_35
.L610:
	st.a	[a10]8,a15
	fcall	.cocofun_36
.L611:
	j	Ifx_Lwip_printf
.L81:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   993  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   994    if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
	ld.bu	d15,[a15]41
.L809:
	jnz.t	d15:2,.L83
.L810:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   995      netif_set_flags(netif, NETIF_FLAG_LINK_UP);
	or	d15,#4
	st.b	[a15]41,d15
.L811:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   996  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   997  #if LWIP_DHCP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   998      dhcp_network_changed(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	   999  #endif /* LWIP_DHCP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1000  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1001  #if LWIP_AUTOIP
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1002      autoip_network_changed(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1003  #endif /* LWIP_AUTOIP */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1004  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1005      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
	mov	d4,#3
	call	netif_issue_reports
.L425:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1006  #if LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1007      nd6_restart_netif(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1008  #endif /* LWIP_IPV6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1009  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1010      NETIF_LINK_CALLBACK(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1011  #if LWIP_NETIF_EXT_STATUS_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1012      {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1013        netif_ext_callback_args_t args;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1014        args.link_changed.state = 1;
	mov	d15,#1
	st.b	[a10]12,d15
.L812:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1015        netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
	mov	d4,#4
	lea	a5,[a10]12
	mov.aa	a4,a15
.L612:
	j	netif_invoke_ext_callback
.L83:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1016      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1017  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1018    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1019  }
	ret
.L423:
	
__netif_set_link_up_function_end:
	.size	netif_set_link_up,__netif_set_link_up_function_end-netif_set_link_up
.L249:
	; End of function
	
	.sdecl	'.text.netif.netif_set_link_down',code,cluster('netif_set_link_down')
	.sect	'.text.netif.netif_set_link_down'
	.align	2
	
	.global	netif_set_link_down

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1020  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1021  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1022   * @ingroup netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1023   * Called by a driver when its link goes down
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1024   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1025  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1026  netif_set_link_down(struct netif *netif)
; Function netif_set_link_down
.L164:
netif_set_link_down:	.type	func
	sub.a	a10,#24
.L613:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1027  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1028    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1029  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1030    LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
	jnz.a	a4,.L84
.L817:
	movh.a	a15,#@his(.28.str)
	lea	a15,[a15]@los(.28.str)
	st.a	[a10],a15
	mov	d15,#1030
	st.w	[a10]4,d15
.L614:
	fcall	.cocofun_35
.L615:
	st.a	[a10]8,a15
	fcall	.cocofun_36
.L616:
	j	Ifx_Lwip_printf
.L84:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1031  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1032    if (netif->flags & NETIF_FLAG_LINK_UP) {
	ld.bu	d15,[a4]41
.L818:
	jz.t	d15:2,.L86
.L819:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1033      netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
	and	d15,#251
	st.b	[a4]41,d15
.L429:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1034      NETIF_LINK_CALLBACK(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1035  #if LWIP_NETIF_EXT_STATUS_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1036      {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1037        netif_ext_callback_args_t args;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1038        args.link_changed.state = 0;
	mov	d15,#0
	st.b	[a10]12,d15
.L820:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1039        netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
	mov	d4,#4
	lea	a5,[a10]12
	j	netif_invoke_ext_callback
.L86:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1040      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1041  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1042    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1043  }
	ret
.L427:
	
__netif_set_link_down_function_end:
	.size	netif_set_link_down,__netif_set_link_down_function_end-netif_set_link_down
.L254:
	; End of function
	
	.sdecl	'.text.netif.netif_null_output_ip4',code,cluster('netif_null_output_ip4')
	.sect	'.text.netif.netif_null_output_ip4'
	.align	2
	

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1044  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1045  #if LWIP_NETIF_LINK_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1046  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1047   * @ingroup netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1048   * Set callback to be called when link is brought up/down
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1049   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1050  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1051  netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1052  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1053    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1054  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1055    if (netif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1056      netif->link_callback = link_callback;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1057    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1058  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1059  #endif /* LWIP_NETIF_LINK_CALLBACK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1060  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1061  #if ENABLE_LOOPBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1062  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1063   * @ingroup netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1064   * Send an IP packet to be received on the same netif (loopif-like).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1065   * The pbuf is simply copied and handed back to netif->input.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1066   * In multithreaded mode, this is done directly since netif->input must put
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1067   * the packet on a queue.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1068   * In callback mode, the packet is put on an internal queue and is fed to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1069   * netif->input by netif_poll().
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1070   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1071   * @param netif the lwip network interface structure
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1072   * @param p the (IP) packet to 'send'
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1073   * @return ERR_OK if the packet has been sent
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1074   *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1075   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1076  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1077  netif_loop_output(struct netif *netif, struct pbuf *p)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1078  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1079    struct pbuf *r;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1080    err_t err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1081    struct pbuf *last;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1082  #if LWIP_LOOPBACK_MAX_PBUFS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1083    u16_t clen = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1084  #endif /* LWIP_LOOPBACK_MAX_PBUFS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1085    /* If we have a loopif, SNMP counters are adjusted for it,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1086     * if not they are adjusted for 'netif'. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1087  #if MIB2_STATS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1088  #if LWIP_HAVE_LOOPIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1089    struct netif *stats_if = &loop_netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1090  #else /* LWIP_HAVE_LOOPIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1091    struct netif *stats_if = netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1092  #endif /* LWIP_HAVE_LOOPIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1093  #endif /* MIB2_STATS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1094  #if LWIP_NETIF_LOOPBACK_MULTITHREADING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1095    u8_t schedule_poll = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1096  #endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1097    SYS_ARCH_DECL_PROTECT(lev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1098  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1099    LWIP_ASSERT("netif_loop_output: invalid netif", netif != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1100    LWIP_ASSERT("netif_loop_output: invalid pbuf", p != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1101  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1102    /* Allocate a new pbuf */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1103    r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1104    if (r == NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1105      LINK_STATS_INC(link.memerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1106      LINK_STATS_INC(link.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1107      MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1108      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1109    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1110  #if LWIP_LOOPBACK_MAX_PBUFS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1111    clen = pbuf_clen(r);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1112    /* check for overflow or too many pbuf on queue */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1113    if (((netif->loop_cnt_current + clen) < netif->loop_cnt_current) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1114        ((netif->loop_cnt_current + clen) > LWIP_MIN(LWIP_LOOPBACK_MAX_PBUFS, 0xFFFF))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1115      pbuf_free(r);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1116      LINK_STATS_INC(link.memerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1117      LINK_STATS_INC(link.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1118      MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1119      return ERR_MEM;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1120    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1121    netif->loop_cnt_current = (u16_t)(netif->loop_cnt_current + clen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1122  #endif /* LWIP_LOOPBACK_MAX_PBUFS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1123  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1124    /* Copy the whole pbuf queue p into the single pbuf r */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1125    if ((err = pbuf_copy(r, p)) != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1126      pbuf_free(r);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1127      LINK_STATS_INC(link.memerr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1128      LINK_STATS_INC(link.drop);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1129      MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1130      return err;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1131    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1132  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1133    /* Put the packet on a linked list which gets emptied through calling
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1134       netif_poll(). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1135  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1136    /* let last point to the last pbuf in chain r */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1137    for (last = r; last->next != NULL; last = last->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1138      /* nothing to do here, just get to the last pbuf */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1139    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1140  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1141    SYS_ARCH_PROTECT(lev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1142    if (netif->loop_first != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1143      LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1144      netif->loop_last->next = r;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1145      netif->loop_last = last;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1146    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1147      netif->loop_first = r;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1148      netif->loop_last = last;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1149  #if LWIP_NETIF_LOOPBACK_MULTITHREADING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1150      /* No existing packets queued, schedule poll */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1151      schedule_poll = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1152  #endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1153    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1154    SYS_ARCH_UNPROTECT(lev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1155  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1156    LINK_STATS_INC(link.xmit);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1157    MIB2_STATS_NETIF_ADD(stats_if, ifoutoctets, p->tot_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1158    MIB2_STATS_NETIF_INC(stats_if, ifoutucastpkts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1159  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1160  #if LWIP_NETIF_LOOPBACK_MULTITHREADING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1161    /* For multithreading environment, schedule a call to netif_poll */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1162    if (schedule_poll) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1163      tcpip_try_callback((tcpip_callback_fn)netif_poll, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1164    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1165  #endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1166  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1167    return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1168  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1169  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1170  #if LWIP_HAVE_LOOPIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1171  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1172  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1173  netif_loop_output_ipv4(struct netif *netif, struct pbuf *p, const ip4_addr_t *addr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1174  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1175    LWIP_UNUSED_ARG(addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1176    return netif_loop_output(netif, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1177  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1178  #endif /* LWIP_IPV4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1179  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1180  #if LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1181  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1182  netif_loop_output_ipv6(struct netif *netif, struct pbuf *p, const ip6_addr_t *addr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1183  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1184    LWIP_UNUSED_ARG(addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1185    return netif_loop_output(netif, p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1186  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1187  #endif /* LWIP_IPV6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1188  #endif /* LWIP_HAVE_LOOPIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1189  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1190  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1191  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1192   * Call netif_poll() in the main loop of your application. This is to prevent
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1193   * reentering non-reentrant functions like tcp_input(). Packets passed to
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1194   * netif_loop_output() are put on a list that is passed to netif->input() by
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1195   * netif_poll().
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1196   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1197  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1198  netif_poll(struct netif *netif)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1199  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1200    /* If we have a loopif, SNMP counters are adjusted for it,
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1201     * if not they are adjusted for 'netif'. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1202  #if MIB2_STATS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1203  #if LWIP_HAVE_LOOPIF
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1204    struct netif *stats_if = &loop_netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1205  #else /* LWIP_HAVE_LOOPIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1206    struct netif *stats_if = netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1207  #endif /* LWIP_HAVE_LOOPIF */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1208  #endif /* MIB2_STATS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1209    SYS_ARCH_DECL_PROTECT(lev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1210  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1211    LWIP_ASSERT("netif_poll: invalid netif", netif != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1212  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1213    /* Get a packet from the list. With SYS_LIGHTWEIGHT_PROT=1, this is protected */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1214    SYS_ARCH_PROTECT(lev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1215    while (netif->loop_first != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1216      struct pbuf *in, *in_end;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1217  #if LWIP_LOOPBACK_MAX_PBUFS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1218      u8_t clen = 1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1219  #endif /* LWIP_LOOPBACK_MAX_PBUFS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1220  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1221      in = in_end = netif->loop_first;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1222      while (in_end->len != in_end->tot_len) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1223        LWIP_ASSERT("bogus pbuf: len != tot_len but next == NULL!", in_end->next != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1224        in_end = in_end->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1225  #if LWIP_LOOPBACK_MAX_PBUFS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1226        clen++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1227  #endif /* LWIP_LOOPBACK_MAX_PBUFS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1228      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1229  #if LWIP_LOOPBACK_MAX_PBUFS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1230      /* adjust the number of pbufs on queue */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1231      LWIP_ASSERT("netif->loop_cnt_current underflow",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1232                  ((netif->loop_cnt_current - clen) < netif->loop_cnt_current));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1233      netif->loop_cnt_current = (u16_t)(netif->loop_cnt_current - clen);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1234  #endif /* LWIP_LOOPBACK_MAX_PBUFS */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1235  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1236      /* 'in_end' now points to the last pbuf from 'in' */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1237      if (in_end == netif->loop_last) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1238        /* this was the last pbuf in the list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1239        netif->loop_first = netif->loop_last = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1240      } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1241        /* pop the pbuf off the list */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1242        netif->loop_first = in_end->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1243        LWIP_ASSERT("should not be null since first != last!", netif->loop_first != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1244      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1245      /* De-queue the pbuf from its successors on the 'loop_' list. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1246      in_end->next = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1247      SYS_ARCH_UNPROTECT(lev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1248  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1249      in->if_idx = netif_get_index(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1250  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1251      LINK_STATS_INC(link.recv);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1252      MIB2_STATS_NETIF_ADD(stats_if, ifinoctets, in->tot_len);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1253      MIB2_STATS_NETIF_INC(stats_if, ifinucastpkts);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1254      /* loopback packets are always IP packets! */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1255      if (ip_input(in, netif) != ERR_OK) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1256        pbuf_free(in);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1257      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1258      SYS_ARCH_PROTECT(lev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1259    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1260    SYS_ARCH_UNPROTECT(lev);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1261  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1262  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1263  #if !LWIP_NETIF_LOOPBACK_MULTITHREADING
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1264  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1265   * Calls netif_poll() for every netif on the netif_list.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1266   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1267  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1268  netif_poll_all(void)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1269  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1270    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1271    /* loop through netifs */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1272    NETIF_FOREACH(netif) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1273      netif_poll(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1274    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1275  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1276  #endif /* !LWIP_NETIF_LOOPBACK_MULTITHREADING */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1277  #endif /* ENABLE_LOOPBACK */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1278  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1279  #if LWIP_NUM_NETIF_CLIENT_DATA > 0
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1280  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1281   * @ingroup netif_cd
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1282   * Allocate an index to store data in client_data member of struct netif.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1283   * Returned value is an index in mentioned array.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1284   * @see LWIP_NUM_NETIF_CLIENT_DATA
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1285   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1286  u8_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1287  netif_alloc_client_data_id(void)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1288  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1289    u8_t result = netif_client_id;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1290    netif_client_id++;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1291  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1292    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1293  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1294  #if LWIP_NUM_NETIF_CLIENT_DATA > 256
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1295  #error LWIP_NUM_NETIF_CLIENT_DATA must be <= 256
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1296  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1297    LWIP_ASSERT("Increase LWIP_NUM_NETIF_CLIENT_DATA in lwipopts.h", result < LWIP_NUM_NETIF_CLIENT_DATA);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1298    return (u8_t)(result + LWIP_NETIF_CLIENT_DATA_INDEX_MAX);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1299  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1300  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1301  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1302  #if LWIP_IPV6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1303  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1304   * @ingroup netif_ip6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1305   * Change an IPv6 address of a network interface
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1306   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1307   * @param netif the network interface to change
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1308   * @param addr_idx index of the IPv6 address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1309   * @param addr6 the new IPv6 address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1310   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1311   * @note call netif_ip6_addr_set_state() to set the address valid/temptative
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1312   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1313  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1314  netif_ip6_addr_set(struct netif *netif, s8_t addr_idx, const ip6_addr_t *addr6)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1315  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1316    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1317  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1318    LWIP_ASSERT("netif_ip6_addr_set: invalid netif", netif != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1319    LWIP_ASSERT("netif_ip6_addr_set: invalid addr6", addr6 != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1320  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1321    netif_ip6_addr_set_parts(netif, addr_idx, addr6->addr[0], addr6->addr[1],
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1322                             addr6->addr[2], addr6->addr[3]);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1323  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1324  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1325  /*
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1326   * Change an IPv6 address of a network interface (internal version taking 4 * u32_t)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1327   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1328   * @param netif the network interface to change
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1329   * @param addr_idx index of the IPv6 address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1330   * @param i0 word0 of the new IPv6 address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1331   * @param i1 word1 of the new IPv6 address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1332   * @param i2 word2 of the new IPv6 address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1333   * @param i3 word3 of the new IPv6 address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1334   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1335  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1336  netif_ip6_addr_set_parts(struct netif *netif, s8_t addr_idx, u32_t i0, u32_t i1, u32_t i2, u32_t i3)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1337  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1338    ip_addr_t old_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1339    ip_addr_t new_ipaddr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1340    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1341    LWIP_ASSERT("netif != NULL", netif != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1342    LWIP_ASSERT("invalid index", addr_idx < LWIP_IPV6_NUM_ADDRESSES);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1343  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1344    ip6_addr_copy(*ip_2_ip6(&old_addr), *netif_ip6_addr(netif, addr_idx));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1345    IP_SET_TYPE_VAL(old_addr, IPADDR_TYPE_V6);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1346  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1347    /* address is actually being changed? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1348    if ((ip_2_ip6(&old_addr)->addr[0] != i0) || (ip_2_ip6(&old_addr)->addr[1] != i1) ||
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1349        (ip_2_ip6(&old_addr)->addr[2] != i2) || (ip_2_ip6(&old_addr)->addr[3] != i3)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1350      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_ip6_addr_set: netif address being changed\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1351  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1352      IP_ADDR6(&new_ipaddr, i0, i1, i2, i3);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1353      ip6_addr_assign_zone(ip_2_ip6(&new_ipaddr), IP6_UNICAST, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1354  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1355      if (ip6_addr_isvalid(netif_ip6_addr_state(netif, addr_idx))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1356        netif_do_ip_addr_changed(netif_ip_addr6(netif, addr_idx), &new_ipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1357      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1358      /* @todo: remove/readd mib2 ip6 entries? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1359  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1360      ip_addr_copy(netif->ip6_addr[addr_idx], new_ipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1361  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1362      if (ip6_addr_isvalid(netif_ip6_addr_state(netif, addr_idx))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1363        netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV6);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1364        NETIF_STATUS_CALLBACK(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1365      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1366  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1367  #if LWIP_NETIF_EXT_STATUS_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1368      {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1369        netif_ext_callback_args_t args;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1370        args.ipv6_set.addr_index  = addr_idx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1371        args.ipv6_set.old_address = &old_addr;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1372        netif_invoke_ext_callback(netif, LWIP_NSC_IPV6_SET, &args);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1373      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1374  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1375    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1376  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1377    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: IPv6 address %d of interface %c%c set to %s/0x%"X8_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1378                addr_idx, netif->name[0], netif->name[1], ip6addr_ntoa(netif_ip6_addr(netif, addr_idx)),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1379                netif_ip6_addr_state(netif, addr_idx)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1380  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1381  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1382  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1383   * @ingroup netif_ip6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1384   * Change the state of an IPv6 address of a network interface
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1385   * (INVALID, TEMPTATIVE, PREFERRED, DEPRECATED, where TEMPTATIVE
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1386   * includes the number of checks done, see ip6_addr.h)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1387   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1388   * @param netif the network interface to change
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1389   * @param addr_idx index of the IPv6 address
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1390   * @param state the new IPv6 address state
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1391   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1392  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1393  netif_ip6_addr_set_state(struct netif *netif, s8_t addr_idx, u8_t state)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1394  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1395    u8_t old_state;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1396    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1397    LWIP_ASSERT("netif != NULL", netif != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1398    LWIP_ASSERT("invalid index", addr_idx < LWIP_IPV6_NUM_ADDRESSES);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1399  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1400    old_state = netif_ip6_addr_state(netif, addr_idx);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1401    /* state is actually being changed? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1402    if (old_state != state) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1403      u8_t old_valid = old_state & IP6_ADDR_VALID;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1404      u8_t new_valid = state & IP6_ADDR_VALID;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1405      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_ip6_addr_set_state: netif address state being changed\n"));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1406  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1407  #if LWIP_IPV6_MLD
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1408      /* Reevaluate solicited-node multicast group membership. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1409      if (netif->flags & NETIF_FLAG_MLD6) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1410        nd6_adjust_mld_membership(netif, addr_idx, state);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1411      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1412  #endif /* LWIP_IPV6_MLD */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1413  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1414      if (old_valid && !new_valid) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1415        /* address about to be removed by setting invalid */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1416        netif_do_ip_addr_changed(netif_ip_addr6(netif, addr_idx), NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1417        /* @todo: remove mib2 ip6 entries? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1418      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1419      netif->ip6_addr_state[addr_idx] = state;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1420  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1421      if (!old_valid && new_valid) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1422        /* address added by setting valid */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1423        /* This is a good moment to check that the address is properly zoned. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1424        IP6_ADDR_ZONECHECK_NETIF(netif_ip6_addr(netif, addr_idx), netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1425        /* @todo: add mib2 ip6 entries? */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1426        netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV6);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1427      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1428      if ((old_state & ~IP6_ADDR_TENTATIVE_COUNT_MASK) !=
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1429          (state     & ~IP6_ADDR_TENTATIVE_COUNT_MASK)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1430        /* address state has changed -> call the callback function */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1431        NETIF_STATUS_CALLBACK(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1432      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1433  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1434  #if LWIP_NETIF_EXT_STATUS_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1435      {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1436        netif_ext_callback_args_t args;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1437        args.ipv6_addr_state_changed.addr_index = addr_idx;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1438        args.ipv6_addr_state_changed.old_state  = old_state;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1439        args.ipv6_addr_state_changed.address    = netif_ip_addr6(netif, addr_idx);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1440        netif_invoke_ext_callback(netif, LWIP_NSC_IPV6_ADDR_STATE_CHANGED, &args);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1441      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1442  #endif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1443    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1444    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: IPv6 address %d of interface %c%c set to %s/0x%"X8_F"\n",
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1445                addr_idx, netif->name[0], netif->name[1], ip6addr_ntoa(netif_ip6_addr(netif, addr_idx)),
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1446                netif_ip6_addr_state(netif, addr_idx)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1447  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1448  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1449  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1450   * Checks if a specific local address is present on the netif and returns its
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1451   * index. Depending on its state, it may or may not be assigned to the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1452   * interface (as per RFC terminology).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1453   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1454   * The given address may or may not be zoned (i.e., have a zone index other
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1455   * than IP6_NO_ZONE). If the address is zoned, it must have the correct zone
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1456   * for the given netif, or no match will be found.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1457   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1458   * @param netif the netif to check
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1459   * @param ip6addr the IPv6 address to find
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1460   * @return >= 0: address found, this is its index
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1461   *         -1: address not found on this netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1462   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1463  s8_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1464  netif_get_ip6_addr_match(struct netif *netif, const ip6_addr_t *ip6addr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1465  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1466    s8_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1467  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1468    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1469  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1470    LWIP_ASSERT("netif_get_ip6_addr_match: invalid netif", netif != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1471    LWIP_ASSERT("netif_get_ip6_addr_match: invalid ip6addr", ip6addr != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1472  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1473  #if LWIP_IPV6_SCOPES
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1474    if (ip6_addr_has_zone(ip6addr) && !ip6_addr_test_zone(ip6addr, netif)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1475      return -1; /* wrong zone, no match */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1476    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1477  #endif /* LWIP_IPV6_SCOPES */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1478  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1479    for (i = 0; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1480      if (!ip6_addr_isinvalid(netif_ip6_addr_state(netif, i)) &&
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1481          ip6_addr_cmp_zoneless(netif_ip6_addr(netif, i), ip6addr)) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1482        return i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1483      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1484    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1485    return -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1486  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1487  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1488  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1489   * @ingroup netif_ip6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1490   * Create a link-local IPv6 address on a netif (stored in slot 0)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1491   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1492   * @param netif the netif to create the address on
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1493   * @param from_mac_48bit if != 0, assume hwadr is a 48-bit MAC address (std conversion)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1494   *                       if == 0, use hwaddr directly as interface ID
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1495   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1496  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1497  netif_create_ip6_linklocal_address(struct netif *netif, u8_t from_mac_48bit)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1498  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1499    u8_t i, addr_index;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1500  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1501    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1502  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1503    LWIP_ASSERT("netif_create_ip6_linklocal_address: invalid netif", netif != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1504  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1505    /* Link-local prefix. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1506    ip_2_ip6(&netif->ip6_addr[0])->addr[0] = PP_HTONL(0xfe800000ul);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1507    ip_2_ip6(&netif->ip6_addr[0])->addr[1] = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1508  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1509    /* Generate interface ID. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1510    if (from_mac_48bit) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1511      /* Assume hwaddr is a 48-bit IEEE 802 MAC. Convert to EUI-64 address. Complement Group bit. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1512      ip_2_ip6(&netif->ip6_addr[0])->addr[2] = lwip_htonl((((u32_t)(netif->hwaddr[0] ^ 0x02)) << 24) |
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1513          ((u32_t)(netif->hwaddr[1]) << 16) |
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1514          ((u32_t)(netif->hwaddr[2]) << 8) |
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1515          (0xff));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1516      ip_2_ip6(&netif->ip6_addr[0])->addr[3] = lwip_htonl((u32_t)(0xfeul << 24) |
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1517          ((u32_t)(netif->hwaddr[3]) << 16) |
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1518          ((u32_t)(netif->hwaddr[4]) << 8) |
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1519          (netif->hwaddr[5]));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1520    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1521      /* Use hwaddr directly as interface ID. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1522      ip_2_ip6(&netif->ip6_addr[0])->addr[2] = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1523      ip_2_ip6(&netif->ip6_addr[0])->addr[3] = 0;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1524  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1525      addr_index = 3;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1526      for (i = 0; (i < 8) && (i < netif->hwaddr_len); i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1527        if (i == 4) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1528          addr_index--;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1529        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1530        ip_2_ip6(&netif->ip6_addr[0])->addr[addr_index] |= lwip_htonl(((u32_t)(netif->hwaddr[netif->hwaddr_len - i - 1])) << (8 * (i & 0x03)));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1531      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1532    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1533  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1534    /* Set a link-local zone. Even though the zone is implied by the owning
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1535     * netif, setting the zone anyway has two important conceptual advantages:
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1536     * 1) it avoids the need for a ton of exceptions in internal code, allowing
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1537     *    e.g. ip6_addr_cmp() to be used on local addresses;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1538     * 2) the properly zoned address is visible externally, e.g. when any outside
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1539     *    code enumerates available addresses or uses one to bind a socket.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1540     * Any external code unaware of address scoping is likely to just ignore the
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1541     * zone field, so this should not create any compatibility problems. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1542    ip6_addr_assign_zone(ip_2_ip6(&netif->ip6_addr[0]), IP6_UNICAST, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1543  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1544    /* Set address state. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1545  #if LWIP_IPV6_DUP_DETECT_ATTEMPTS
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1546    /* Will perform duplicate address detection (DAD). */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1547    netif_ip6_addr_set_state(netif, 0, IP6_ADDR_TENTATIVE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1548  #else
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1549    /* Consider address valid. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1550    netif_ip6_addr_set_state(netif, 0, IP6_ADDR_PREFERRED);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1551  #endif /* LWIP_IPV6_AUTOCONFIG */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1552  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1553  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1554  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1555   * @ingroup netif_ip6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1556   * This function allows for the easy addition of a new IPv6 address to an interface.
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1557   * It takes care of finding an empty slot and then sets the address tentative
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1558   * (to make sure that all the subsequent processing happens).
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1559   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1560   * @param netif netif to add the address on
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1561   * @param ip6addr address to add
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1562   * @param chosen_idx if != NULL, the chosen IPv6 address index will be stored here
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1563   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1564  err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1565  netif_add_ip6_address(struct netif *netif, const ip6_addr_t *ip6addr, s8_t *chosen_idx)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1566  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1567    s8_t i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1568  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1569    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1570  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1571    LWIP_ASSERT("netif_add_ip6_address: invalid netif", netif != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1572    LWIP_ASSERT("netif_add_ip6_address: invalid ip6addr", ip6addr != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1573  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1574    i = netif_get_ip6_addr_match(netif, ip6addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1575    if (i >= 0) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1576      /* Address already added */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1577      if (chosen_idx != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1578        *chosen_idx = i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1579      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1580      return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1581    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1582  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1583    /* Find a free slot. The first one is reserved for link-local addresses. */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1584    for (i = ip6_addr_islinklocal(ip6addr) ? 0 : 1; i < LWIP_IPV6_NUM_ADDRESSES; i++) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1585      if (ip6_addr_isinvalid(netif_ip6_addr_state(netif, i))) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1586        ip_addr_copy_from_ip6(netif->ip6_addr[i], *ip6addr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1587        ip6_addr_assign_zone(ip_2_ip6(&netif->ip6_addr[i]), IP6_UNICAST, netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1588        netif_ip6_addr_set_state(netif, i, IP6_ADDR_TENTATIVE);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1589        if (chosen_idx != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1590          *chosen_idx = i;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1591        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1592        return ERR_OK;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1593      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1594    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1595  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1596    if (chosen_idx != NULL) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1597      *chosen_idx = -1;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1598    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1599    return ERR_VAL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1600  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1601  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1602  /** Dummy IPv6 output function for netifs not supporting IPv6
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1603   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1604  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1605  netif_null_output_ip6(struct netif *netif, struct pbuf *p, const ip6_addr_t *ipaddr)
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1606  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1607    LWIP_UNUSED_ARG(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1608    LWIP_UNUSED_ARG(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1609    LWIP_UNUSED_ARG(ipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1610  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1611    return ERR_IF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1612  }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1613  #endif /* LWIP_IPV6 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1614  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1615  #if LWIP_IPV4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1616  /** Dummy IPv4 output function for netifs not supporting IPv4
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1617   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1618  static err_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1619  netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
; Function netif_null_output_ip4
.L166:
netif_null_output_ip4:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1620  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1621    LWIP_UNUSED_ARG(netif);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1622    LWIP_UNUSED_ARG(p);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1623    LWIP_UNUSED_ARG(ipaddr);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1624  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1625    return ERR_IF;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1626  }
	mov	d2,#-12
	ret
.L465:
	
__netif_null_output_ip4_function_end:
	.size	netif_null_output_ip4,__netif_null_output_ip4_function_end-netif_null_output_ip4
.L299:
	; End of function
	
	.sdecl	'.text.netif.netif_name_to_index',code,cluster('netif_name_to_index')
	.sect	'.text.netif.netif_name_to_index'
	.align	2
	
	.global	netif_name_to_index

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1627  #endif /* LWIP_IPV4 */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1628  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1629  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1630  * @ingroup netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1631  * Return the interface index for the netif with name
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1632  * or NETIF_NO_INDEX if not found/on error
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1633  *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1634  * @param name the name of the netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1635  */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1636  u8_t
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1637  netif_name_to_index(const char *name)
; Function netif_name_to_index
.L168:
netif_name_to_index:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1638  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1639    struct netif *netif = netif_find(name);
	call	netif_find
.L617:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1640    if (netif != NULL) {
	jz.a	a2,.L88
.L834:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1641      return netif_get_index(netif);
	ld.bu	d15,[a2]44
	add	d15,#1
.L835:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1642    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1643    /* No name found, return invalid index */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1644    return NETIF_NO_INDEX;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1645  }
	extr.u	d2,d15,#0,#8
	ret
.L88:
	mov	d2,#0
	ret
.L436:
	
__netif_name_to_index_function_end:
	.size	netif_name_to_index,__netif_name_to_index_function_end-netif_name_to_index
.L264:
	; End of function
	
	.sdecl	'.text.netif.netif_index_to_name',code,cluster('netif_index_to_name')
	.sect	'.text.netif.netif_index_to_name'
	.align	2
	
	.global	netif_index_to_name

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1646  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1647  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1648  * @ingroup netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1649  * Return the interface name for the netif matching index
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1650  * or NULL if not found/on error
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1651  *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1652  * @param idx the interface index of the netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1653  * @param name char buffer of at least NETIF_NAMESIZE bytes
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1654  */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1655  char *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1656  netif_index_to_name(u8_t idx, char *name)
; Function netif_index_to_name
.L170:
netif_index_to_name:	.type	func
	mov	d8,d4
	mov.aa	a15,a4
.L619:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1657  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1658    struct netif *netif = netif_get_by_index(idx);
	call	netif_get_by_index
.L618:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1659  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1660    if (netif != NULL) {
	jz.a	a2,.L91
.L840:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1661      name[0] = netif->name[0];
	ld.b	d15,[a2]42
.L841:
	st.b	[a15],d15
.L842:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1662      name[1] = netif->name[1];
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1663      lwip_itoa(&name[2], NETIF_NAMESIZE - 2, netif_index_to_num(idx));
	mov	d4,#4
	lea	a4,[a15]2
.L843:
	add	d5,d8,#-1
	ld.b	d15,[a2]43
.L844:
	st.b	[a15]1,d15
.L845:
	call	lwip_itoa
.L620:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1664      return name;
	mov.aa	a2,a15
.L621:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1665    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1666    return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1667  }
	ret
.L91:
	mov.a	a2,#0
.L622:
	ret
.L440:
	
__netif_index_to_name_function_end:
	.size	netif_index_to_name,__netif_index_to_name_function_end-netif_index_to_name
.L269:
	; End of function
	
	.sdecl	'.text.netif.netif_get_by_index',code,cluster('netif_get_by_index')
	.sect	'.text.netif.netif_get_by_index'
	.align	2
	
	.global	netif_get_by_index

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1668  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1669  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1670  * @ingroup netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1671  * Return the interface for the netif index
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1672  *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1673  * @param idx index of netif to find
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1674  */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1675  struct netif *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1676  netif_get_by_index(u8_t idx)
; Function netif_get_by_index
.L172:
netif_get_by_index:	.type	func

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1677  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1678    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1679  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1680    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1681  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1682    if (idx != NETIF_NO_INDEX) {
	jeq	d4,#0,.L94
.L850:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1683      NETIF_FOREACH(netif) {
	ld.a	a2,netif_list
.L623:
	j	.L95
.L96:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1684        if (idx == netif_get_index(netif)) {
	ld.bu	d15,[a2]44
	add	d15,#1
	extr.u	d15,d15,#0,#8
.L851:
	jeq	d15,d4,.L98
.L852:
	ld.a	a2,[a2]
.L95:
	jnz.a	a2,.L96
.L94:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1685          return netif; /* found! */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1686        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1687      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1688    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1689  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1690    return NULL;
	mov.a	a2,#0

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1691  }
.L98:
	ret
.L444:
	
__netif_get_by_index_function_end:
	.size	netif_get_by_index,__netif_get_by_index_function_end-netif_get_by_index
.L274:
	; End of function
	
	.sdecl	'.text.netif.netif_find',code,cluster('netif_find')
	.sect	'.text.netif.netif_find'
	.align	2
	
	.global	netif_find

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1692  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1693  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1694   * @ingroup netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1695   * Find a network interface by searching for its name
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1696   *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1697   * @param name the name of the netif (like netif->name) plus concatenated number
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1698   * in ascii representation (e.g. 'en0')
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1699   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1700  struct netif *
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1701  netif_find(const char *name)
; Function netif_find
.L174:
netif_find:	.type	func
	mov.aa	a15,a4
.L625:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1702  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1703    struct netif *netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1704    u8_t num;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1705  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1706    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1707  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1708    if (name == NULL) {
	jz.a	a15,.L100
.L749:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1709      return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1710    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1711  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1712    num = (u8_t)atoi(&name[2]);
	lea	a4,[a15]2
.L624:
	call	atoi
.L750:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1713  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1714    NETIF_FOREACH(netif) {
	extr.u	d0,d2,#0,#8
	ld.a	a2,netif_list
.L626:
	j	.L101
.L102:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1715      if (num == netif->num &&
	ld.bu	d15,[a2]44
.L751:
	jne	d15,d0,.L103
.L752:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1716          name[0] == netif->name[0] &&
	ld.b	d1,[a15]0
.L753:
	ld.b	d15,[a2]42
.L754:
	jne	d15,d1,.L104
.L755:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1717          name[1] == netif->name[1]) {
	ld.b	d1,[a15]1
.L756:
	ld.b	d15,[a2]43
.L757:
	jeq	d15,d1,.L106
.L104:
.L103:
	ld.a	a2,[a2]
.L101:
	jnz.a	a2,.L102

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1718        LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1719        return netif;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1720      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1721    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1722    LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1723    return NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1724  }
.L100:
	mov.a	a2,#0
.L106:
	ret
.L387:
	
__netif_find_function_end:
	.size	netif_find,__netif_find_function_end-netif_find
.L214:
	; End of function
	
	.sdecl	'.text.netif.netif_add_ext_callback',code,cluster('netif_add_ext_callback')
	.sect	'.text.netif.netif_add_ext_callback'
	.align	2
	
	.global	netif_add_ext_callback

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1725  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1726  #if LWIP_NETIF_EXT_STATUS_CALLBACK
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1727  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1728   * @ingroup netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1729   * Add extended netif events listener
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1730   * @param callback pointer to listener structure
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1731   * @param fn callback function
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1732   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1733  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1734  netif_add_ext_callback(netif_ext_callback_t *callback, netif_ext_callback_fn fn)
; Function netif_add_ext_callback
.L176:
netif_add_ext_callback:	.type	func
	sub.a	a10,#16
.L627:
	mov.aa	a12,a4
.L629:
	mov.aa	a13,a5
.L630:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1735  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1736    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1737    LWIP_ASSERT("callback must be != NULL", callback != NULL);
	jnz.a	a12,.L108
.L857:
	movh.a	a2,#@his(.31.str)
	lea	a2,[a2]@los(.31.str)
	st.a	[a10],a2
	mov	d15,#1737
	st.w	[a10]4,d15
.L628:
	fcall	.cocofun_35
.L631:
	st.a	[a10]8,a15
	fcall	.cocofun_36
.L632:
	call	Ifx_Lwip_printf
.L108:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1738    LWIP_ASSERT("fn must be != NULL", fn != NULL);
	jnz.a	a13,.L109
.L858:
	movh.a	a15,#@his(.32.str)
	lea	a15,[a15]@los(.32.str)
	st.a	[a10],a15
	mov	d15,#1738
	st.w	[a10]4,d15
.L633:
	fcall	.cocofun_35
.L634:
	st.a	[a10]8,a15
	fcall	.cocofun_36
	call	Ifx_Lwip_printf
.L109:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1739  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1740    callback->callback_fn = fn;
	st.a	[a12],a13
.L859:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1741    callback->next        = ext_callback;
	ld.a	a15,ext_callback
.L860:
	st.a	[a12]4,a15
.L861:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1742    ext_callback          = callback;
	st.a	ext_callback,a12
.L862:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1743  }
	ret
.L447:
	
__netif_add_ext_callback_function_end:
	.size	netif_add_ext_callback,__netif_add_ext_callback_function_end-netif_add_ext_callback
.L279:
	; End of function
	
	.sdecl	'.text.netif.netif_remove_ext_callback',code,cluster('netif_remove_ext_callback')
	.sect	'.text.netif.netif_remove_ext_callback'
	.align	2
	
	.global	netif_remove_ext_callback

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1744  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1745  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1746   * @ingroup netif
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1747   * Remove extended netif events listener
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1748   * @param callback pointer to listener structure
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1749   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1750  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1751  netif_remove_ext_callback(netif_ext_callback_t* callback)
; Function netif_remove_ext_callback
.L178:
netif_remove_ext_callback:	.type	func
	sub.a	a10,#16
.L635:
	mov.aa	a12,a4
.L637:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1752  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1753    netif_ext_callback_t *last, *iter;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1754  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1755    LWIP_ASSERT_CORE_LOCKED();
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1756    LWIP_ASSERT("callback must be != NULL", callback != NULL);
	mov.a	a13,#0
	jnz.a	a12,.L110
	movh.a	a2,#@his(.31.str)
	lea	a2,[a2]@los(.31.str)
	st.a	[a10],a2
	mov	d15,#1756
	st.w	[a10]4,d15
.L636:
	fcall	.cocofun_35
.L638:
	st.a	[a10]8,a15
	fcall	.cocofun_36
.L639:
	call	Ifx_Lwip_printf
.L110:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1757  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1758    if (ext_callback == NULL) {
	ld.a	a15,ext_callback
.L640:
	jz.a	a15,.L111
.L867:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1759      return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1760    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1761  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1762    if (callback == ext_callback) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1763      ext_callback = ext_callback->next;
	ld.a	a2,[a15]4
.L641:
	jne.a	a12,a15,.L114
.L868:
	st.a	ext_callback,a2

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1764    } else {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1765      last = ext_callback;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1766      for (iter = ext_callback->next; iter != NULL; last = iter, iter = iter->next) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1767        if (iter == callback) {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1768          LWIP_ASSERT("last != NULL", last != NULL);
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1769          last->next = callback->next;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1770          callback->next = NULL;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1771          return;
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1772        }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1773      }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1774    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1775  }
.L111:
	ret
.L115:
	jne.a	a2,a12,.L116
.L869:
	ld.a	a2,[a12]4
.L642:
	st.a	[a15]4,a2
.L870:
	st.a	[a12]4,a13
.L871:
	ret
.L116:
	mov.aa	a15,a2
.L872:
	ld.a	a2,[a2]4
.L114:
	jnz.a	a2,.L115
.L873:
	ret
.L452:
	
__netif_remove_ext_callback_function_end:
	.size	netif_remove_ext_callback,__netif_remove_ext_callback_function_end-netif_remove_ext_callback
.L284:
	; End of function
	
	.sdecl	'.text.netif.netif_invoke_ext_callback',code,cluster('netif_invoke_ext_callback')
	.sect	'.text.netif.netif_invoke_ext_callback'
	.align	2
	
	.global	netif_invoke_ext_callback

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1776  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1777  /**
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1778   * Invoke extended netif status event
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1779   * @param netif netif that is affected by change
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1780   * @param reason change reason
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1781   * @param args depends on reason, see reason description
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1782   */
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1783  void
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1784  netif_invoke_ext_callback(struct netif *netif, netif_nsc_reason_t reason, const netif_ext_callback_args_t *args)
; Function netif_invoke_ext_callback
.L180:
netif_invoke_ext_callback:	.type	func
	sub.a	a10,#16
.L643:
	mov.aa	a12,a4
.L645:
	mov	d8,d4
	mov.aa	a13,a5
.L646:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1785  {
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1786    netif_ext_callback_t *callback = ext_callback;
	ld.a	a14,ext_callback
.L647:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1787  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1788    LWIP_ASSERT("netif must be != NULL", netif != NULL);
	jnz.a	a12,.L119
.L878:
	movh.a	a2,#@his(.34.str)
	lea	a2,[a2]@los(.34.str)
	st.a	[a10],a2
	mov	d15,#1788
	st.w	[a10]4,d15
.L644:
	fcall	.cocofun_35
.L648:
	st.a	[a10]8,a15
	fcall	.cocofun_36
.L649:
	call	Ifx_Lwip_printf
.L650:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1789  
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1790    while (callback != NULL) {
	j	.L119
.L120:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1791      callback->callback_fn(netif, reason, args);
	ld.a	a15,[a14]
.L879:
	mov.aa	a4,a12
.L651:
	mov	d4,d8
	mov.aa	a5,a13
.L653:
	calli	a15
.L652:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1792      callback = callback->next;
	ld.a	a14,[a14]4
.L119:
	jnz.a	a14,.L120
.L880:

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1793    }
; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1794  }
	ret
.L456:
	
__netif_invoke_ext_callback_function_end:
	.size	netif_invoke_ext_callback,__netif_invoke_ext_callback_function_end-netif_invoke_ext_callback
.L289:
	; End of function
	
	.sdecl	'.zbss.netif.ext_callback',data,cluster('ext_callback')
	.sect	'.zbss.netif.ext_callback'
	.align	4
ext_callback:	.type	object
	.size	ext_callback,4
	.space	4
	.sdecl	'.zbss.netif.netif_list',data,cluster('netif_list')
	.sect	'.zbss.netif.netif_list'
	.global	netif_list
	.align	4
netif_list:	.type	object
	.size	netif_list,4
	.space	4
	.sdecl	'.zbss.netif.netif_default',data,cluster('netif_default')
	.sect	'.zbss.netif.netif_default'
	.global	netif_default
	.align	4
netif_default:	.type	object
	.size	netif_default,4
	.space	4
	.sdecl	'.zbss.netif.netif_num',data,cluster('netif_num')
	.sect	'.zbss.netif.netif_num'
netif_num:	.type	object
	.size	netif_num,1
	.space	1
	.sdecl	'.rodata.netif..1.str',data,rom
	.sect	'.rodata.netif..1.str'
.1.str:	.type	object
	.size	.1.str,40
	.byte	65,115,115,101
	.byte	114,116,105,111
	.byte	110,32,34,37
	.byte	115,34,32,102
	.byte	97,105,108,101
	.byte	100,32,97,116
	.byte	32,108,105,110
	.byte	101,32,37,100
	.byte	32,105,110,32
	.byte	37,115,10
	.space	1
	.sdecl	'.rodata.netif..2.str',data,rom
	.sect	'.rodata.netif..2.str'
.2.str:	.type	object
	.size	.2.str,26
	.byte	110,101,116,105
	.byte	102,95,105,110
	.byte	112,117,116,58
	.byte	32,105,110,118
	.byte	97,108,105,100
	.byte	32,112,98,117
	.byte	102
	.space	1
	.sdecl	'.rodata.netif..3.str',data,rom
	.sect	'.rodata.netif..3.str'
.3.str:	.type	object
	.size	.3.str,48
	.byte	46,46,92,48
	.byte	95,83,114,99
	.byte	92,48,95,65
	.byte	112,112,83,119
	.byte	92,69,116,104
	.byte	101,114,110,101
	.byte	116,92,108,119
	.byte	105,112,92,115
	.byte	114,99,92,99
	.byte	111,114,101,92
	.byte	110,101,116,105
	.byte	102,46,99
	.space	1
	.sdecl	'.rodata.netif..4.str',data,rom
	.sect	'.rodata.netif..4.str'
.4.str:	.type	object
	.size	.4.str,27
	.byte	110,101,116,105
	.byte	102,95,105,110
	.byte	112,117,116,58
	.byte	32,105,110,118
	.byte	97,108,105,100
	.byte	32,110,101,116
	.byte	105,102
	.space	1
	.sdecl	'.rodata.netif..5.str',data,rom
	.sect	'.rodata.netif..5.str'
.5.str:	.type	object
	.size	.5.str,25
	.byte	110,101,116,105
	.byte	102,95,97,100
	.byte	100,58,32,105
	.byte	110,118,97,108
	.byte	105,100,32,110
	.byte	101,116,105,102
	.space	1
	.sdecl	'.rodata.netif..6.str',data,rom
	.sect	'.rodata.netif..6.str'
.6.str:	.type	object
	.size	.6.str,34
	.byte	110,101,116,105
	.byte	102,95,97,100
	.byte	100,58,32,78
	.byte	111,32,105,110
	.byte	105,116,32,102
	.byte	117,110,99,116
	.byte	105,111,110,32
	.byte	103,105,118,101
	.byte	110
	.space	1
	.sdecl	'.rodata.netif..7.str',data,rom
	.sect	'.rodata.netif..7.str'
.7.str:	.type	object
	.size	.7.str,20
	.byte	110,101,116,105
	.byte	102,32,97,108
	.byte	114,101,97,100
	.byte	121,32,97,100
	.byte	100,101,100
	.space	1
	.sdecl	'.rodata.netif..8.str',data,rom
	.sect	'.rodata.netif..8.str'
.8.str:	.type	object
	.size	.8.str,46
	.byte	116,111,111,32
	.byte	109,97,110,121
	.byte	32,110,101,116
	.byte	105,102,115,44
	.byte	32,109,97,120
	.byte	46,32,115,117
	.byte	112,112,111,114
	.byte	116,101,100,32
	.byte	110,117,109,98
	.byte	101,114,32,105
	.byte	115,32,50,53
	.byte	53
	.space	1
	.sdecl	'.rodata.netif..16.str',data,rom
	.sect	'.rodata.netif..16.str'
.16.str:	.type	object
	.size	.16.str,47
	.byte	110,101,116,105
	.byte	102,95,115,101
	.byte	116,95,105,112
	.byte	97,100,100,114
	.byte	58,32,110,101
	.byte	116,105,102,32
	.byte	97,100,100,114
	.byte	101,115,115,32
	.byte	98,101,105,110
	.byte	103,32,99,104
	.byte	97,110,103,101
	.byte	100,10
	.space	1
	.sdecl	'.rodata.netif..17.str',data,rom
	.sect	'.rodata.netif..17.str'
.17.str:	.type	object
	.size	.17.str,32
	.byte	110,101,116,105
	.byte	102,95,115,101
	.byte	116,95,105,112
	.byte	97,100,100,114
	.byte	58,32,105,110
	.byte	118,97,108,105
	.byte	100,32,110,101
	.byte	116,105,102
	.space	1
	.sdecl	'.rodata.netif..18.str',data,rom
	.sect	'.rodata.netif..18.str'
.18.str:	.type	object
	.size	.18.str,53
	.byte	110,101,116,105
	.byte	102,58,32,110
	.byte	101,116,109,97
	.byte	115,107,32,111
	.byte	102,32,105,110
	.byte	116,101,114,102
	.byte	97,99,101,32
	.byte	37,99,37,99
	.byte	32,115,101,116
	.byte	32,116,111,32
	.byte	37,117,46,37
	.byte	117,46,37,117
	.byte	46,37,117,10
	.space	1
	.sdecl	'.rodata.netif..19.str',data,rom
	.sect	'.rodata.netif..19.str'
.19.str:	.type	object
	.size	.19.str,33
	.byte	110,101,116,105
	.byte	102,95,115,101
	.byte	116,95,110,101
	.byte	116,109,97,115
	.byte	107,58,32,105
	.byte	110,118,97,108
	.byte	105,100,32,110
	.byte	101,116,105,102
	.space	1
	.sdecl	'.rodata.netif..20.str',data,rom
	.sect	'.rodata.netif..20.str'
.20.str:	.type	object
	.size	.20.str,56
	.byte	110,101,116,105
	.byte	102,58,32,71
	.byte	87,32,97,100
	.byte	100,114,101,115
	.byte	115,32,111,102
	.byte	32,105,110,116
	.byte	101,114,102,97
	.byte	99,101,32,37
	.byte	99,37,99,32
	.byte	115,101,116,32
	.byte	116,111,32,37
	.byte	117,46,37,117
	.byte	46,37,117,46
	.byte	37,117,10
	.space	1
	.sdecl	'.rodata.netif..21.str',data,rom
	.sect	'.rodata.netif..21.str'
.21.str:	.type	object
	.size	.21.str,28
	.byte	110,101,116,105
	.byte	102,95,115,101
	.byte	116,95,103,119
	.byte	58,32,105,110
	.byte	118,97,108,105
	.byte	100,32,110,101
	.byte	116,105,102
	.space	1
	.sdecl	'.rodata.netif..24.str',data,rom
	.sect	'.rodata.netif..24.str'
.24.str:	.type	object
	.size	.24.str,28
	.byte	110,101,116,105
	.byte	102,95,115,101
	.byte	116,95,117,112
	.byte	58,32,105,110
	.byte	118,97,108,105
	.byte	100,32,110,101
	.byte	116,105,102
	.space	1
	.sdecl	'.rodata.netif..26.str',data,rom
	.sect	'.rodata.netif..26.str'
.26.str:	.type	object
	.size	.26.str,30
	.byte	110,101,116,105
	.byte	102,95,115,101
	.byte	116,95,100,111
	.byte	119,110,58,32
	.byte	105,110,118,97
	.byte	108,105,100,32
	.byte	110,101,116,105
	.byte	102
	.space	1
	.sdecl	'.rodata.netif..27.str',data,rom
	.sect	'.rodata.netif..27.str'
.27.str:	.type	object
	.size	.27.str,33
	.byte	110,101,116,105
	.byte	102,95,115,101
	.byte	116,95,108,105
	.byte	110,107,95,117
	.byte	112,58,32,105
	.byte	110,118,97,108
	.byte	105,100,32,110
	.byte	101,116,105,102
	.space	1
	.sdecl	'.rodata.netif..28.str',data,rom
	.sect	'.rodata.netif..28.str'
.28.str:	.type	object
	.size	.28.str,35
	.byte	110,101,116,105
	.byte	102,95,115,101
	.byte	116,95,108,105
	.byte	110,107,95,100
	.byte	111,119,110,58
	.byte	32,105,110,118
	.byte	97,108,105,100
	.byte	32,110,101,116
	.byte	105,102
	.space	1
	.sdecl	'.rodata.netif..31.str',data,rom
	.sect	'.rodata.netif..31.str'
.31.str:	.type	object
	.size	.31.str,25
	.byte	99,97,108,108
	.byte	98,97,99,107
	.byte	32,109,117,115
	.byte	116,32,98,101
	.byte	32,33,61,32
	.byte	78,85,76,76
	.space	1
	.sdecl	'.rodata.netif..32.str',data,rom
	.sect	'.rodata.netif..32.str'
.32.str:	.type	object
	.size	.32.str,19
	.byte	102,110,32,109
	.byte	117,115,116,32
	.byte	98,101,32,33
	.byte	61,32,78,85
	.byte	76,76
	.space	1
	.sdecl	'.rodata.netif..34.str',data,rom
	.sect	'.rodata.netif..34.str'
.34.str:	.type	object
	.size	.34.str,22
	.byte	110,101,116,105
	.byte	102,32,109,117
	.byte	115,116,32,98
	.byte	101,32,33,61
	.byte	32,78,85,76
	.byte	76
	.space	1
	.calls	'__INDIRECT__','netif_null_output_ip4'
	.calls	'netif_input','Ifx_Lwip_printf'
	.calls	'netif_input','ethernet_input'
	.calls	'netif_input','ip4_input'
	.calls	'netif_add_noaddr','netif_add'
	.calls	'netif_add','Ifx_Lwip_printf'
	.calls	'netif_add','netif_set_addr'
	.calls	'netif_add','__INDIRECT__'
	.calls	'netif_add','netif_invoke_ext_callback'
	.calls	'netif_do_ip_addr_changed','tcp_netif_ip_addr_changed'
	.calls	'netif_do_ip_addr_changed','udp_netif_ip_addr_changed'
	.calls	'netif_do_set_ipaddr','Ifx_Lwip_printf'
	.calls	'netif_do_set_ipaddr','netif_do_ip_addr_changed'
	.calls	'netif_do_set_ipaddr','netif_issue_reports'
	.calls	'netif_set_ipaddr','Ifx_Lwip_printf'
	.calls	'netif_set_ipaddr','netif_do_set_ipaddr'
	.calls	'netif_set_ipaddr','netif_invoke_ext_callback'
	.calls	'netif_do_set_netmask','Ifx_Lwip_printf'
	.calls	'netif_set_netmask','Ifx_Lwip_printf'
	.calls	'netif_set_netmask','netif_do_set_netmask'
	.calls	'netif_set_netmask','netif_invoke_ext_callback'
	.calls	'netif_do_set_gw','Ifx_Lwip_printf'
	.calls	'netif_set_gw','Ifx_Lwip_printf'
	.calls	'netif_set_gw','netif_do_set_gw'
	.calls	'netif_set_gw','netif_invoke_ext_callback'
	.calls	'netif_set_addr','netif_do_set_ipaddr'
	.calls	'netif_set_addr','netif_do_set_netmask'
	.calls	'netif_set_addr','netif_do_set_gw'
	.calls	'netif_set_addr','netif_invoke_ext_callback'
	.calls	'netif_remove','netif_invoke_ext_callback'
	.calls	'netif_remove','netif_do_ip_addr_changed'
	.calls	'netif_remove','netif_set_down'
	.calls	'netif_remove','netif_set_default'
	.calls	'netif_set_up','Ifx_Lwip_printf'
	.calls	'netif_set_up','netif_invoke_ext_callback'
	.calls	'netif_set_up','netif_issue_reports'
	.calls	'netif_issue_reports','etharp_request'
	.calls	'netif_set_down','Ifx_Lwip_printf'
	.calls	'netif_set_down','netif_invoke_ext_callback'
	.calls	'netif_set_down','etharp_cleanup_netif'
	.calls	'netif_set_link_up','Ifx_Lwip_printf'
	.calls	'netif_set_link_up','netif_issue_reports'
	.calls	'netif_set_link_up','netif_invoke_ext_callback'
	.calls	'netif_set_link_down','Ifx_Lwip_printf'
	.calls	'netif_set_link_down','netif_invoke_ext_callback'
	.calls	'netif_name_to_index','netif_find'
	.calls	'netif_index_to_name','netif_get_by_index'
	.calls	'netif_index_to_name','lwip_itoa'
	.calls	'netif_find','atoi'
	.calls	'netif_add_ext_callback','Ifx_Lwip_printf'
	.calls	'netif_remove_ext_callback','Ifx_Lwip_printf'
	.calls	'netif_invoke_ext_callback','Ifx_Lwip_printf'
	.calls	'netif_invoke_ext_callback','__INDIRECT__'
	.calls	'netif_input','.cocofun_35'
	.calls	'netif_input','.cocofun_36'
	.calls	'netif_add','.cocofun_35'
	.calls	'netif_add','.cocofun_36'
	.calls	'netif_add','.cocofun_37'
	.calls	'netif_set_ipaddr','.cocofun_35'
	.calls	'netif_set_ipaddr','.cocofun_36'
	.calls	'netif_set_ipaddr','.cocofun_37'
	.calls	'netif_set_netmask','.cocofun_35'
	.calls	'netif_set_netmask','.cocofun_36'
	.calls	'netif_set_netmask','.cocofun_37'
	.calls	'netif_set_gw','.cocofun_35'
	.calls	'netif_set_gw','.cocofun_36'
	.calls	'netif_set_gw','.cocofun_37'
	.calls	'netif_set_up','.cocofun_35'
	.calls	'netif_set_up','.cocofun_36'
	.calls	'netif_set_down','.cocofun_35'
	.calls	'netif_set_down','.cocofun_36'
	.calls	'netif_set_link_up','.cocofun_35'
	.calls	'netif_set_link_up','.cocofun_36'
	.calls	'netif_set_link_down','.cocofun_35'
	.calls	'netif_set_link_down','.cocofun_36'
	.calls	'netif_add_ext_callback','.cocofun_35'
	.calls	'netif_add_ext_callback','.cocofun_36'
	.calls	'netif_remove_ext_callback','.cocofun_35'
	.calls	'netif_remove_ext_callback','.cocofun_36'
	.calls	'netif_invoke_ext_callback','.cocofun_35'
	.calls	'netif_invoke_ext_callback','.cocofun_36'
	.calls	'netif_init','',0
	.calls	'netif_input','',16
	.calls	'netif_add_noaddr','',16
	.calls	'netif_add','',16
	.calls	'.cocofun_37','',0
	.calls	'.cocofun_36','',0
	.calls	'.cocofun_35','',0
	.calls	'netif_do_ip_addr_changed','',0
	.calls	'netif_do_set_ipaddr','',8
	.calls	'netif_set_ipaddr','',32
	.calls	'netif_do_set_netmask','',24
	.calls	'netif_set_netmask','',32
	.calls	'netif_do_set_gw','',24
	.calls	'netif_set_gw','',32
	.calls	'netif_set_addr','',24
	.calls	'netif_remove','',0
	.calls	'netif_set_default','',0
	.calls	'netif_set_up','',24
	.calls	'netif_issue_reports','',0
	.calls	'netif_set_down','',24
	.calls	'netif_set_link_up','',24
	.calls	'netif_set_link_down','',24
	.calls	'netif_null_output_ip4','',0
	.calls	'netif_name_to_index','',0
	.calls	'netif_index_to_name','',0
	.calls	'netif_get_by_index','',0
	.calls	'netif_find','',0
	.calls	'netif_add_ext_callback','',16
	.calls	'netif_remove_ext_callback','',16
	.extern	Ifx_Lwip_printf
	.extern	atoi
	.extern	lwip_itoa
	.extern	ip_addr_any
	.extern	ip4_input
	.extern	tcp_netif_ip_addr_changed
	.extern	udp_netif_ip_addr_changed
	.extern	etharp_request
	.extern	etharp_cleanup_netif
	.extern	ethernet_input
	.extern	__INDIRECT__
	.calls	'netif_invoke_ext_callback','',16
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L182:
	.word	5336
	.half	3
	.word	.L183
	.byte	4
.L181:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L184
.L366:
	.byte	2
	.byte	'int',0,4,5,3
	.word	167
	.byte	4
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,5
	.word	174
	.byte	0,2
	.byte	'unsigned int',0,4,7,6
	.word	216
	.byte	7
	.word	216
	.byte	8
	.byte	'__cmpswapw',0
	.word	232
	.byte	1,1,1,1,9
	.byte	'p',0
	.word	237
	.byte	9
	.byte	'value',0
	.word	216
	.byte	9
	.byte	'compare',0
	.word	216
	.byte	0
.L431:
	.byte	2
	.byte	'char',0,1,6,2
	.byte	'char',0,1,6,3
	.word	302
.L388:
	.byte	7
	.word	310
	.byte	10
	.byte	'Ifx_Lwip_printf',0,1,123,6
	.word	294
	.byte	1,1,1,1,11
	.byte	's',0,1,123,34
	.word	315
	.byte	12,1,123,37,0,10
	.byte	'atoi',0,2,60,33
	.word	167
	.byte	1,1,1,1,13,2,60,55
	.word	315
	.byte	0
.L439:
	.byte	7
	.word	302
	.byte	14
	.byte	'lwip_itoa',0,3,133,1,7,1,1,1,1,11
	.byte	'result',0,3,133,1,23
	.word	389
	.byte	11
	.byte	'bufsize',0,3,133,1,38
	.word	216
	.byte	11
	.byte	'number',0,3,133,1,51
	.word	167
	.byte	0,2
	.byte	'unsigned long int',0,4,7
.L377:
	.byte	15
	.byte	'ip4_addr',0,5,51,8,4,16
	.byte	'addr',0
	.word	463
	.byte	4,2,35,0,0,17
	.byte	'void',0
.L347:
	.byte	7
	.word	513
.L373:
	.byte	2
	.byte	'unsigned short int',0,2,7
.L391:
	.byte	2
	.byte	'unsigned char',0,1,8,15
	.byte	'pbuf',0,6,186,1,8,16,16
	.byte	'next',0
	.word	.L433-.L182
	.byte	4,2,35,0,16
	.byte	'payload',0
	.word	519
	.byte	4,2,35,4,16
	.byte	'tot_len',0
	.word	524
	.byte	2,2,35,8,16
	.byte	'len',0
	.word	524
	.byte	2,2,35,10,16
	.byte	'type_internal',0
	.word	546
	.byte	1,2,35,12,16
	.byte	'flags',0
	.word	546
	.byte	1,2,35,13,16
	.byte	'ref',0
	.word	546
	.byte	1,2,35,14,16
	.byte	'if_idx',0
	.word	546
	.byte	1,2,35,15,0
.L433:
	.byte	7
	.word	563
	.byte	18
	.word	294
	.byte	1,1,5
	.word	703
	.byte	5
	.word	.L344-.L182
	.byte	0,7
	.word	708
.L351:
	.byte	19
	.byte	'netif_input_fn',0,4,178,1,17
	.word	726
	.byte	3
	.word	484
	.byte	7
	.word	755
	.byte	18
	.word	294
	.byte	1,1,5
	.word	.L344-.L182
	.byte	5
	.word	703
	.byte	5
	.word	760
	.byte	0,7
	.word	765
	.byte	19
	.byte	'netif_output_fn',0,4,189,1,17
	.word	788
	.byte	18
	.word	294
	.byte	1,1,5
	.word	.L344-.L182
	.byte	5
	.word	703
	.byte	0,7
	.word	818
	.byte	19
	.byte	'netif_linkoutput_fn',0,4,212,1,17
	.word	836
	.byte	20,6
	.word	546
	.byte	21,5,0,20,2
	.word	302
	.byte	21,1,0,15
	.byte	'netif',0,4,132,2,8,48,16
	.byte	'next',0
	.word	.L344-.L182
	.byte	4,2,35,0,16
	.byte	'ip_addr',0
	.word	484
	.byte	4,2,35,4,16
	.byte	'netmask',0
	.word	484
	.byte	4,2,35,8,16
	.byte	'gw',0
	.word	484
	.byte	4,2,35,12,16
	.byte	'input',0
	.word	731
	.byte	4,2,35,16,16
	.byte	'output',0
	.word	793
	.byte	4,2,35,20,16
	.byte	'linkoutput',0
	.word	841
	.byte	4,2,35,24,16
	.byte	'state',0
	.word	519
	.byte	4,2,35,28,16
	.byte	'mtu',0
	.word	524
	.byte	2,2,35,32,16
	.byte	'hwaddr',0
	.word	870
	.byte	6,2,35,34,16
	.byte	'hwaddr_len',0
	.word	546
	.byte	1,2,35,40,16
	.byte	'flags',0
	.word	546
	.byte	1,2,35,41,16
	.byte	'name',0
	.word	879
	.byte	2,2,35,42,16
	.byte	'num',0
	.word	546
	.byte	1,2,35,44,16
	.byte	'rs_count',0
	.word	546
	.byte	1,2,35,45,0
.L344:
	.byte	7
	.word	888
	.byte	7
	.word	708
	.byte	7
	.word	765
	.byte	7
	.word	818
	.byte	18
	.word	294
	.byte	1,1,5
	.word	1136
	.byte	0,7
	.word	1156
	.byte	7
	.word	1156
.L349:
	.byte	19
	.byte	'netif_init_fn',0,4,168,1,17
	.word	1174
	.byte	3
	.word	484
.L355:
	.byte	7
	.word	1202
	.byte	15
	.byte	'link_changed_s',0,4,213,4,10,1,16
	.byte	'state',0
	.word	546
	.byte	1,2,35,0,0,15
	.byte	'status_changed_s',0,4,219,4,10,1,16
	.byte	'state',0
	.word	546
	.byte	1,2,35,0,0,3
	.word	484
.L470:
	.byte	7
	.word	1288
	.byte	15
	.byte	'ipv4_changed_s',0,4,225,4,10,12,16
	.byte	'old_address',0
	.word	1293
	.byte	4,2,35,0,16
	.byte	'old_netmask',0
	.word	1293
	.byte	4,2,35,4,16
	.byte	'old_gw',0
	.word	1293
	.byte	4,2,35,8,0,15
	.byte	'ipv6_set_s',0,4,233,4,10,8,16
	.byte	'addr_index',0
	.word	294
	.byte	1,2,35,0,16
	.byte	'old_address',0
	.word	1293
	.byte	4,2,35,4,0,15
	.byte	'ipv6_addr_state_changed_s',0,4,241,4,10,8,16
	.byte	'addr_index',0
	.word	294
	.byte	1,2,35,0,16
	.byte	'old_state',0
	.word	546
	.byte	1,2,35,1,16
	.byte	'address',0
	.word	1293
	.byte	4,2,35,4,0
.L375:
	.byte	22,4,210,4,9,12,16
	.byte	'link_changed',0
	.word	1212
	.byte	1,2,35,0,16
	.byte	'status_changed',0
	.word	1249
	.byte	1,2,35,0,16
	.byte	'ipv4_changed',0
	.word	1298
	.byte	12,2,35,0,16
	.byte	'ipv6_set',0
	.word	1378
	.byte	8,2,35,0,16
	.byte	'ipv6_addr_state_changed',0
	.word	1437
	.byte	8,2,35,0,0,3
	.word	1526
	.byte	7
	.word	1652
	.byte	23,1,1,5
	.word	1136
	.byte	5
	.word	524
	.byte	5
	.word	1657
	.byte	0,7
	.word	1662
.L450:
	.byte	19
	.byte	'netif_ext_callback_fn',0,4,132,5,16
	.word	1681
	.byte	7
	.word	.L654-.L182
.L654:
	.byte	15
	.byte	'netif_ext_callback',0,4,136,5,16,8,16
	.byte	'callback_fn',0
	.word	1686
	.byte	4,2,35,0,16
	.byte	'next',0
	.word	1717
	.byte	4,2,35,4,0
.L448:
	.byte	7
	.word	1722
	.byte	7
	.word	1662
	.byte	3
	.word	1526
.L459:
	.byte	7
	.word	1793
	.byte	10
	.byte	'ip4_input',0,7,71,7
	.word	294
	.byte	1,1,1,1,11
	.byte	'p',0,7,71,30
	.word	703
	.byte	11
	.byte	'inp',0,7,71,47
	.word	1136
	.byte	0,14
	.byte	'tcp_netif_ip_addr_changed',0,8,251,3,6,1,1,1,1,11
	.byte	'old_addr',0,8,251,3,49
	.word	1293
	.byte	11
	.byte	'new_addr',0,8,251,3,76
	.word	1293
	.byte	0,14
	.byte	'udp_netif_ip_addr_changed',0,9,187,1,6,1,1,1,1,11
	.byte	'old_addr',0,9,187,1,49
	.word	1293
	.byte	11
	.byte	'new_addr',0,9,187,1,76
	.word	1293
	.byte	0,10
	.byte	'etharp_request',0,10,83,7
	.word	294
	.byte	1,1,1,1,11
	.byte	'netif',0,10,83,36
	.word	1136
	.byte	11
	.byte	'ipaddr',0,10,83,61
	.word	1207
	.byte	0,14
	.byte	'etharp_cleanup_netif',0,10,89,6,1,1,1,1,11
	.byte	'netif',0,10,89,41
	.word	1136
	.byte	0,10
	.byte	'ethernet_input',0,11,66,7
	.word	294
	.byte	1,1,1,1,11
	.byte	'p',0,11,66,35
	.word	703
	.byte	11
	.byte	'netif',0,11,66,52
	.word	1136
	.byte	0
.L476:
	.byte	7
	.word	484
	.byte	24
	.byte	'__INDIRECT__',0,12,1,1,1,1,1,2
	.byte	'short int',0,2,5,19
	.byte	'__wchar_t',0,12,1,1
	.word	2170
	.byte	19
	.byte	'__size_t',0,12,1,1
	.word	216
	.byte	19
	.byte	'__ptrdiff_t',0,12,1,1
	.word	167
	.byte	25,1,7
	.word	2238
	.byte	19
	.byte	'__codeptr',0,12,1,1
	.word	2240
	.byte	19
	.byte	'__intptr_t',0,12,1,1
	.word	167
	.byte	19
	.byte	'__uintptr_t',0,12,1,1
	.word	216
	.byte	19
	.byte	'size_t',0,13,24,25
	.word	216
	.byte	19
	.byte	'uint8',0,14,108,29
	.word	546
	.byte	19
	.byte	'uint16',0,14,112,29
	.word	524
	.byte	19
	.byte	'uint32',0,14,116,29
	.word	463
	.byte	19
	.byte	'sint8',0,14,125,29
	.word	294
	.byte	19
	.byte	'sint16',0,14,129,1,29
	.word	2170
	.byte	2
	.byte	'long int',0,4,5,19
	.byte	'sint32',0,14,134,1,29
	.word	2391
	.byte	2
	.byte	'long long int',0,8,5,19
	.byte	'sint64',0,14,141,1,29
	.word	2419
	.byte	2
	.byte	'float',0,4,4,19
	.byte	'float32',0,14,170,1,29
	.word	2452
	.byte	19
	.byte	'pvoid',0,15,54,28
	.word	519
	.byte	19
	.byte	'Ifx_TickTime',0,15,76,28
	.word	2419
	.byte	19
	.byte	'u8_t',0,1,85,16
	.word	546
	.byte	19
	.byte	'u16_t',0,1,86,16
	.word	524
	.byte	19
	.byte	'u32_t',0,1,87,16
	.word	463
	.byte	19
	.byte	's8_t',0,1,88,16
	.word	294
	.byte	19
	.byte	's16_t',0,1,89,16
	.word	2170
	.byte	19
	.byte	'intmax_t',0,16,198,2,41
	.word	2419
	.byte	19
	.byte	'ip4_addr_t',0,5,57,25
	.word	484
	.byte	19
	.byte	'ip_addr_t',0,17,142,2,20
	.word	484
	.byte	3
	.word	484
	.byte	26
	.byte	'ip_addr_any',0,17,241,2,24
	.word	2637
	.byte	1,1,19
	.byte	'err_t',0,18,96,14
	.word	294
	.byte	23,1,1,5
	.word	703
	.byte	0,7
	.word	2679
	.byte	19
	.byte	'pbuf_free_custom_fn',0,6,242,1,16
	.word	2688
	.byte	19
	.byte	'mem_size_t',0,19,67,15
	.word	524
	.byte	19
	.byte	'netif_nsc_reason_t',0,4,180,4,15
	.word	524
	.byte	19
	.byte	'netif_ext_callback_args_t',0,4,250,4,3
	.word	1526
	.byte	19
	.byte	'netif_ext_callback_t',0,4,140,5,3
	.word	1722
	.byte	19
	.byte	'tcpwnd_size_t',0,20,53,15
	.word	524
	.byte	15
	.byte	'ip4_addr_packed',0,21,53,8,4,16
	.byte	'addr',0
	.word	463
	.byte	4,2,35,0,0,19
	.byte	'ip4_addr_p_t',0,21,61,32
	.word	2856
	.byte	27
	.byte	'tcp_state',0,20,56,6,1,28
	.byte	'CLOSED',0,0,28
	.byte	'LISTEN',0,1,28
	.byte	'SYN_SENT',0,2,28
	.byte	'SYN_RCVD',0,3,28
	.byte	'ESTABLISHED',0,4,28
	.byte	'FIN_WAIT_1',0,5,28
	.byte	'FIN_WAIT_2',0,6,28
	.byte	'CLOSE_WAIT',0,7,28
	.byte	'CLOSING',0,8,28
	.byte	'LAST_ACK',0,9,28
	.byte	'TIME_WAIT',0,10,0,15
	.byte	'tcp_hdr',0,23,56,8,20,16
	.byte	'src',0
	.word	524
	.byte	2,2,35,0,16
	.byte	'dest',0
	.word	524
	.byte	2,2,35,2,16
	.byte	'seqno',0
	.word	463
	.byte	4,2,35,4,16
	.byte	'ackno',0
	.word	463
	.byte	4,2,35,8,16
	.byte	'_hdrlen_rsvd_flags',0
	.word	524
	.byte	2,2,35,12,16
	.byte	'wnd',0
	.word	524
	.byte	2,2,35,14,16
	.byte	'chksum',0
	.word	524
	.byte	2,2,35,16,16
	.byte	'urgp',0
	.word	524
	.byte	2,2,35,18,0,7
	.word	3055
	.byte	15
	.byte	'tcp_seg',0,8,253,1,8,20,16
	.byte	'next',0
	.word	.L655-.L182
	.byte	4,2,35,0,16
	.byte	'p',0
	.word	703
	.byte	4,2,35,4,16
	.byte	'len',0
	.word	524
	.byte	2,2,35,8,16
	.byte	'oversize_left',0
	.word	524
	.byte	2,2,35,10,16
	.byte	'flags',0
	.word	546
	.byte	1,2,35,12,16
	.byte	'tcphdr',0
	.word	3197
	.byte	4,2,35,16,0
.L655:
	.byte	7
	.word	3202
	.byte	15
	.byte	'tcp_pcb_listen',0,22,223,1,8,28,16
	.byte	'local_ip',0
	.word	484
	.byte	4,2,35,0,16
	.byte	'remote_ip',0
	.word	484
	.byte	4,2,35,4,16
	.byte	'netif_idx',0
	.word	546
	.byte	1,2,35,8,16
	.byte	'so_options',0
	.word	546
	.byte	1,2,35,9,16
	.byte	'tos',0
	.word	546
	.byte	1,2,35,10,16
	.byte	'ttl',0
	.word	546
	.byte	1,2,35,11,16
	.byte	'next',0
	.word	.L656-.L182
	.byte	4,2,35,12,16
	.byte	'callback_arg',0
	.word	519
	.byte	4,2,35,16,16
	.byte	'state',0
	.word	2913
	.byte	1,2,35,20,16
	.byte	'prio',0
	.word	546
	.byte	1,2,35,21,16
	.byte	'local_port',0
	.word	524
	.byte	2,2,35,22,16
	.byte	'accept',0
	.word	.L657-.L182
	.byte	4,2,35,24,0
.L656:
	.byte	7
	.word	3314
	.byte	18
	.word	294
	.byte	1,1,5
	.word	519
	.byte	5
	.word	.L658-.L182
	.byte	5
	.word	524
	.byte	0,7
	.word	3544
	.byte	19
	.byte	'tcp_sent_fn',0,22,96,17
	.word	3567
	.byte	18
	.word	294
	.byte	1,1,5
	.word	519
	.byte	5
	.word	.L658-.L182
	.byte	5
	.word	703
	.byte	5
	.word	294
	.byte	0,7
	.word	3592
	.byte	19
	.byte	'tcp_recv_fn',0,22,82,17
	.word	3620
	.byte	19
	.byte	'tcp_connected_fn',0,22,134,1,17
	.word	.L659-.L182
	.byte	18
	.word	294
	.byte	1,1,5
	.word	519
	.byte	5
	.word	.L658-.L182
	.byte	0,7
	.word	3671
	.byte	19
	.byte	'tcp_poll_fn',0,22,108,17
	.word	3689
	.byte	23,1,1,5
	.word	519
	.byte	5
	.word	294
	.byte	0,7
	.word	3714
	.byte	19
	.byte	'tcp_err_fn',0,22,120,17
	.word	3728
	.byte	15
	.byte	'tcp_pcb',0,22,242,1,8,156,1,16
	.byte	'local_ip',0
	.word	484
	.byte	4,2,35,0,16
	.byte	'remote_ip',0
	.word	484
	.byte	4,2,35,4,16
	.byte	'netif_idx',0
	.word	546
	.byte	1,2,35,8,16
	.byte	'so_options',0
	.word	546
	.byte	1,2,35,9,16
	.byte	'tos',0
	.word	546
	.byte	1,2,35,10,16
	.byte	'ttl',0
	.word	546
	.byte	1,2,35,11,16
	.byte	'next',0
	.word	.L658-.L182
	.byte	4,2,35,12,16
	.byte	'callback_arg',0
	.word	519
	.byte	4,2,35,16,16
	.byte	'state',0
	.word	2913
	.byte	1,2,35,20,16
	.byte	'prio',0
	.word	546
	.byte	1,2,35,21,16
	.byte	'local_port',0
	.word	524
	.byte	2,2,35,22,16
	.byte	'remote_port',0
	.word	524
	.byte	2,2,35,24,16
	.byte	'flags',0
	.word	524
	.byte	2,2,35,26,16
	.byte	'polltmr',0
	.word	546
	.byte	1,2,35,28,16
	.byte	'pollinterval',0
	.word	546
	.byte	1,2,35,29,16
	.byte	'last_timer',0
	.word	546
	.byte	1,2,35,30,16
	.byte	'tmr',0
	.word	463
	.byte	4,2,35,32,16
	.byte	'rcv_nxt',0
	.word	463
	.byte	4,2,35,36,16
	.byte	'rcv_wnd',0
	.word	524
	.byte	2,2,35,40,16
	.byte	'rcv_ann_wnd',0
	.word	524
	.byte	2,2,35,42,16
	.byte	'rcv_ann_right_edge',0
	.word	463
	.byte	4,2,35,44,16
	.byte	'rtime',0
	.word	2170
	.byte	2,2,35,48,16
	.byte	'mss',0
	.word	524
	.byte	2,2,35,50,16
	.byte	'rttest',0
	.word	463
	.byte	4,2,35,52,16
	.byte	'rtseq',0
	.word	463
	.byte	4,2,35,56,16
	.byte	'sa',0
	.word	2170
	.byte	2,2,35,60,16
	.byte	'sv',0
	.word	2170
	.byte	2,2,35,62,16
	.byte	'rto',0
	.word	2170
	.byte	2,2,35,64,16
	.byte	'nrtx',0
	.word	546
	.byte	1,2,35,66,16
	.byte	'dupacks',0
	.word	546
	.byte	1,2,35,67,16
	.byte	'lastack',0
	.word	463
	.byte	4,2,35,68,16
	.byte	'cwnd',0
	.word	524
	.byte	2,2,35,72,16
	.byte	'ssthresh',0
	.word	524
	.byte	2,2,35,74,16
	.byte	'rto_end',0
	.word	463
	.byte	4,2,35,76,16
	.byte	'snd_nxt',0
	.word	463
	.byte	4,2,35,80,16
	.byte	'snd_wl1',0
	.word	463
	.byte	4,2,35,84,16
	.byte	'snd_wl2',0
	.word	463
	.byte	4,2,35,88,16
	.byte	'snd_lbb',0
	.word	463
	.byte	4,2,35,92,16
	.byte	'snd_wnd',0
	.word	524
	.byte	2,2,35,96,16
	.byte	'snd_wnd_max',0
	.word	524
	.byte	2,2,35,98,16
	.byte	'snd_buf',0
	.word	524
	.byte	2,2,35,100,16
	.byte	'snd_queuelen',0
	.word	524
	.byte	2,2,35,102,16
	.byte	'unsent_oversize',0
	.word	524
	.byte	2,2,35,104,16
	.byte	'bytes_acked',0
	.word	524
	.byte	2,2,35,106,16
	.byte	'unsent',0
	.word	3309
	.byte	4,2,35,108,16
	.byte	'unacked',0
	.word	3309
	.byte	4,2,35,112,16
	.byte	'ooseq',0
	.word	3309
	.byte	4,2,35,116,16
	.byte	'refused_data',0
	.word	703
	.byte	4,2,35,120,16
	.byte	'listener',0
	.word	3539
	.byte	4,2,35,124,16
	.byte	'sent',0
	.word	3572
	.byte	4,3,35,128,1,16
	.byte	'recv',0
	.word	3625
	.byte	4,3,35,132,1,16
	.byte	'connected',0
	.word	3645
	.byte	4,3,35,136,1,16
	.byte	'poll',0
	.word	3694
	.byte	4,3,35,140,1,16
	.byte	'errf',0
	.word	3733
	.byte	4,3,35,144,1,16
	.byte	'keep_idle',0
	.word	463
	.byte	4,3,35,148,1,16
	.byte	'persist_cnt',0
	.word	546
	.byte	1,3,35,152,1,16
	.byte	'persist_backoff',0
	.word	546
	.byte	1,3,35,153,1,16
	.byte	'persist_probe',0
	.word	546
	.byte	1,3,35,154,1,16
	.byte	'keep_cnt_sent',0
	.word	546
	.byte	1,3,35,155,1,0
.L658:
	.byte	7
	.word	3752
	.byte	18
	.word	294
	.byte	1,1,5
	.word	519
	.byte	5
	.word	4814
	.byte	5
	.word	294
	.byte	0
.L659:
	.byte	7
	.word	4819
.L657:
	.byte	19
	.byte	'tcp_accept_fn',0,22,70,17
	.word	4842
	.byte	7
	.word	4819
	.byte	7
	.word	3544
	.byte	7
	.word	3592
	.byte	7
	.word	4819
	.byte	7
	.word	3671
	.byte	7
	.word	3714
	.byte	23,1,1,5
	.word	546
	.byte	5
	.word	519
	.byte	0,7
	.word	4899
	.byte	19
	.byte	'tcp_extarg_callback_pcb_destroyed_fn',0,22,173,1,16
	.word	4913
	.byte	18
	.word	294
	.byte	1,1,5
	.word	546
	.byte	5
	.word	3539
	.byte	5
	.word	4814
	.byte	0,7
	.word	4964
	.byte	19
	.byte	'tcp_extarg_callback_passive_open_fn',0,22,182,1,17
	.word	4987
	.byte	19
	.byte	'tcpflags_t',0,22,206,1,15
	.word	524
	.byte	15
	.byte	'udp_pcb',0,9,81,8,32,16
	.byte	'local_ip',0
	.word	484
	.byte	4,2,35,0,16
	.byte	'remote_ip',0
	.word	484
	.byte	4,2,35,4,16
	.byte	'netif_idx',0
	.word	546
	.byte	1,2,35,8,16
	.byte	'so_options',0
	.word	546
	.byte	1,2,35,9,16
	.byte	'tos',0
	.word	546
	.byte	1,2,35,10,16
	.byte	'ttl',0
	.word	546
	.byte	1,2,35,11,16
	.byte	'next',0
	.word	.L660-.L182
	.byte	4,2,35,12,16
	.byte	'flags',0
	.word	546
	.byte	1,2,35,16,16
	.byte	'local_port',0
	.word	524
	.byte	2,2,35,18,16
	.byte	'remote_port',0
	.word	524
	.byte	2,2,35,20,16
	.byte	'recv',0
	.word	.L661-.L182
	.byte	4,2,35,24,16
	.byte	'recv_arg',0
	.word	519
	.byte	4,2,35,28,0
.L660:
	.byte	7
	.word	5057
	.byte	23,1,1,5
	.word	519
	.byte	5
	.word	5275
	.byte	5
	.word	703
	.byte	5
	.word	760
	.byte	5
	.word	524
	.byte	0,7
	.word	5280
.L661:
	.byte	19
	.byte	'udp_recv_fn',0,9,77,16
	.word	5309
	.byte	7
	.word	5280
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L183:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,38,0,73,19,0,0,4,46,1,3,8,54
	.byte	15,39,12,63,12,60,12,0,0,5,5,0,73,19,0,0,6,53,0,73,19,0,0,7,15,0,73,19,0,0,8,46,1,3,8,73,19,54,15,39,12
	.byte	63,12,60,12,0,0,9,5,0,3,8,73,19,0,0,10,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,11
	.byte	5,0,3,8,58,15,59,15,57,15,73,19,0,0,12,24,0,58,15,59,15,57,15,0,0,13,5,0,58,15,59,15,57,15,73,19,0,0,14
	.byte	46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,15,19,1,3,8,58,15,59,15,57,15,11,15,0,0,16,13,0
	.byte	3,8,73,19,11,15,56,9,0,0,17,59,0,3,8,0,0,18,21,1,73,19,54,15,39,12,0,0,19,22,0,3,8,58,15,59,15,57,15,73
	.byte	19,0,0,20,1,1,11,15,73,19,0,0,21,33,0,47,15,0,0,22,23,1,58,15,59,15,57,15,11,15,0,0,23,21,1,54,15,39,12
	.byte	0,0,24,46,0,3,8,58,15,59,15,57,15,54,15,63,12,60,12,0,0,25,21,0,54,15,0,0,26,52,0,3,8,58,15,59,15,57,15
	.byte	73,19,63,12,60,12,0,0,27,4,1,3,8,58,15,59,15,57,15,11,15,0,0,28,40,0,3,8,28,13,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L184:
	.word	.L663-.L662
.L662:
	.half	3
	.word	.L665-.L664
.L664:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\port\\include\\arch',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\priv',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\netif',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\include\\lwip\\prot',0
	.byte	0
	.byte	'cc.h',0,1,0,0
	.byte	'stdlib.h',0,2,0,0
	.byte	'def.h',0,3,0,0
	.byte	'netif.h',0,3,0,0
	.byte	'ip4_addr.h',0,3,0,0
	.byte	'pbuf.h',0,3,0,0
	.byte	'ip4.h',0,3,0,0
	.byte	'tcp_priv.h',0,4,0,0
	.byte	'udp.h',0,3,0,0
	.byte	'etharp.h',0,3,0,0
	.byte	'ethernet.h',0,5,0,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0
	.byte	'stddef.h',0,2,0,0
	.byte	'Platform_Types.h',0,6,0,0
	.byte	'Ifx_Types.h',0,6,0,0
	.byte	'stdint.h',0,2,0,0
	.byte	'ip_addr.h',0,3,0,0
	.byte	'err.h',0,3,0,0
	.byte	'mem.h',0,3,0,0
	.byte	'tcpbase.h',0,3,0,0
	.byte	'ip4.h',0,7,0,0
	.byte	'tcp.h',0,3,0,0
	.byte	'tcp.h',0,7,0,0,0
.L665:
.L663:
	.sdecl	'.debug_info',debug,cluster('netif_init')
	.sect	'.debug_info'
.L185:
	.word	214
	.half	3
	.word	.L186
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L188,.L187
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_init',0,1,177,1,1,1,1,1
	.word	.L122,.L343,.L121
	.byte	4
	.word	.L122,.L343
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_init')
	.sect	'.debug_abbrev'
.L186:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_init')
	.sect	'.debug_line'
.L187:
	.word	.L667-.L666
.L666:
	.half	3
	.word	.L669-.L668
.L668:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L669:
	.byte	5,1,7,0,5,2
	.word	.L122
	.byte	3,204,1,1,7,9
	.half	.L189-.L122
	.byte	0,1,1
.L667:
	.sdecl	'.debug_ranges',debug,cluster('netif_init')
	.sect	'.debug_ranges'
.L188:
	.word	-1,.L122,0,.L189-.L122,0,0
	.sdecl	'.debug_info',debug,cluster('netif_add_noaddr')
	.sect	'.debug_info'
.L190:
	.word	299
	.half	3
	.word	.L191
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L193,.L192
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_add_noaddr',0,1,239,1,1
	.word	.L344
	.byte	1,1,1
	.word	.L126,.L345,.L125
	.byte	4
	.byte	'netif',0,1,239,1,32
	.word	.L344,.L346
	.byte	4
	.byte	'state',0,1,239,1,45
	.word	.L347,.L348
	.byte	4
	.byte	'init',0,1,239,1,66
	.word	.L349,.L350
	.byte	4
	.byte	'input',0,1,239,1,87
	.word	.L351,.L352
	.byte	5
	.word	.L126,.L345
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_add_noaddr')
	.sect	'.debug_abbrev'
.L191:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_add_noaddr')
	.sect	'.debug_line'
.L192:
	.word	.L671-.L670
.L670:
	.half	3
	.word	.L673-.L672
.L672:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L673:
	.byte	5,1,7,0,5,2
	.word	.L126
	.byte	3,238,1,1,5,20,9
	.half	.L501-.L126
	.byte	3,6,1,5,27,9
	.half	.L674-.L501
	.byte	1,5,33,9
	.half	.L675-.L674
	.byte	1,5,20,9
	.half	.L676-.L675
	.byte	3,126,1,5,26,9
	.half	.L504-.L676
	.byte	1,5,32,9
	.half	.L502-.L504
	.byte	1,5,1,9
	.half	.L194-.L502
	.byte	3,3,0,1,1
.L671:
	.sdecl	'.debug_ranges',debug,cluster('netif_add_noaddr')
	.sect	'.debug_ranges'
.L193:
	.word	-1,.L126,0,.L194-.L126,0,0
	.sdecl	'.debug_info',debug,cluster('netif_add')
	.sect	'.debug_info'
.L195:
	.word	396
	.half	3
	.word	.L196
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L198,.L197
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_add',0,1,148,2,1
	.word	.L344
	.byte	1,1,1
	.word	.L128,.L353,.L127
	.byte	4
	.byte	'netif',0,1,148,2,25
	.word	.L344,.L354
	.byte	4
	.byte	'ipaddr',0,1,150,2,29
	.word	.L355,.L356
	.byte	4
	.byte	'netmask',0,1,150,2,55
	.word	.L355,.L357
	.byte	4
	.byte	'gw',0,1,150,2,82
	.word	.L355,.L358
	.byte	4
	.byte	'state',0,1,152,2,17
	.word	.L347,.L359
	.byte	4
	.byte	'init',0,1,152,2,38
	.word	.L349,.L360
	.byte	4
	.byte	'input',0,1,152,2,59
	.word	.L351,.L361
	.byte	5
	.word	.L362
	.byte	5
	.word	.L363
	.byte	6
	.byte	'netif2',0,1,131,3,19
	.word	.L344,.L365
	.byte	6
	.byte	'num_netifs',0,1,132,3,9
	.word	.L366,.L367
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_add')
	.sect	'.debug_abbrev'
.L196:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0
	.byte	3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_add')
	.sect	'.debug_line'
.L197:
	.word	.L678-.L677
.L677:
	.half	3
	.word	.L680-.L679
.L679:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L680:
	.byte	5,1,7,0,5,2
	.word	.L128
	.byte	3,147,2,1,5,3,9
	.half	.L506-.L128
	.byte	3,19,1,7,9
	.half	.L681-.L506
	.byte	1,9
	.half	.L8-.L681
	.byte	3,1,1,7,9
	.half	.L682-.L8
	.byte	1,9
	.half	.L10-.L682
	.byte	3,3,1,9
	.half	.L683-.L10
	.byte	3,3,1,5,15,7,9
	.half	.L684-.L683
	.byte	3,1,1,5,3,9
	.half	.L13-.L684
	.byte	3,2,1,5,10,7,9
	.half	.L685-.L13
	.byte	3,1,1,5,3,9
	.half	.L14-.L685
	.byte	3,4,1,9
	.half	.L686-.L14
	.byte	3,1,1,9
	.half	.L687-.L686
	.byte	3,1,1,5,19,9
	.half	.L688-.L687
	.byte	3,1,1,5,17,9
	.half	.L689-.L688
	.byte	1,5,14,9
	.half	.L690-.L689
	.byte	3,14,1,5,16,9
	.half	.L691-.L690
	.byte	3,1,1,9
	.half	.L692-.L691
	.byte	3,29,1,9
	.half	.L693-.L692
	.byte	3,1,1,5,14,9
	.half	.L694-.L693
	.byte	1,5,16,9
	.half	.L695-.L694
	.byte	3,1,1,5,42,9
	.half	.L696-.L695
	.byte	3,8,1,5,12,9
	.half	.L510-.L696
	.byte	3,4,1,5,3,9
	.half	.L516-.L510
	.byte	1,5,12,7,9
	.half	.L11-.L516
	.byte	3,1,1,5,1,9
	.half	.L697-.L11
	.byte	3,195,0,1,5,16,7,9
	.half	.L17-.L697
	.byte	3,79,1,5,25,9
	.half	.L698-.L17
	.byte	1,5,7,9
	.half	.L699-.L698
	.byte	1,5,20,7,9
	.half	.L700-.L699
	.byte	3,1,1,5,18,9
	.half	.L18-.L700
	.byte	3,2,1,5,21,3,1,1,5,47,9
	.half	.L517-.L18
	.byte	1,5,9,9
	.half	.L20-.L517
	.byte	3,1,1,7,9
	.half	.L701-.L20
	.byte	1,5,19,9
	.half	.L21-.L701
	.byte	3,1,1,5,9,9
	.half	.L702-.L21
	.byte	3,1,1,5,33,9
	.half	.L22-.L702
	.byte	3,1,1,5,19,9
	.half	.L703-.L22
	.byte	1,5,9,9
	.half	.L704-.L703
	.byte	1,5,21,7,9
	.half	.L705-.L704
	.byte	3,1,1,5,11,9
	.half	.L706-.L705
	.byte	3,1,1,5,64,9
	.half	.L23-.L706
	.byte	3,122,1,5,47,9
	.half	.L19-.L23
	.byte	1,5,29,7,9
	.half	.L24-.L19
	.byte	3,9,1,5,12,7,9
	.half	.L364-.L24
	.byte	3,2,1,5,21,9
	.half	.L707-.L364
	.byte	1,5,3,9
	.half	.L708-.L707
	.byte	1,5,15,7,9
	.half	.L709-.L708
	.byte	3,1,1,5,18,1,5,35,9
	.half	.L25-.L709
	.byte	3,2,1,5,27,9
	.half	.L26-.L25
	.byte	3,4,1,5,17,9
	.half	.L710-.L26
	.byte	1,5,15,9
	.half	.L711-.L710
	.byte	1,5,14,9
	.half	.L712-.L711
	.byte	3,1,1,5,36,9
	.half	.L713-.L712
	.byte	3,23,1,5,58,1,5,3,9
	.half	.L522-.L713
	.byte	3,2,1,5,1,9
	.half	.L523-.L522
	.byte	3,1,1,7,9
	.half	.L199-.L523
	.byte	0,1,1
.L678:
	.sdecl	'.debug_ranges',debug,cluster('netif_add')
	.sect	'.debug_ranges'
.L198:
	.word	-1,.L128,0,.L199-.L128,0,0
.L362:
	.word	-1,.L128,0,.L353-.L128,-1,.L130,0,.L334-.L130,0,0
.L363:
	.word	-1,.L128,.L17-.L128,.L364-.L128,-1,.L132,0,.L329-.L132,-1,.L134,0,.L324-.L134,0,0
	.sdecl	'.debug_info',debug,cluster('netif_set_addr')
	.sect	'.debug_info'
.L200:
	.word	413
	.half	3
	.word	.L201
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L203,.L202
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_set_addr',0,1,146,5,1,1,1,1
	.word	.L150,.L368,.L149
	.byte	4
	.byte	'netif',0,1,146,5,30
	.word	.L344,.L369
	.byte	4
	.byte	'ipaddr',0,1,146,5,55
	.word	.L355,.L370
	.byte	4
	.byte	'netmask',0,1,146,5,81
	.word	.L355,.L371
	.byte	4
	.byte	'gw',0,1,147,5,34
	.word	.L355,.L372
	.byte	5
	.word	.L150,.L368
	.byte	6
	.byte	'change_reason',0,1,150,5,22
	.word	.L373,.L374
	.byte	6
	.byte	'cb_args',0,1,151,5,29
	.word	.L375,.L376
	.byte	6
	.byte	'old_nm_val',0,1,152,5,13
	.word	.L377,.L378
	.byte	6
	.byte	'old_gw_val',0,1,153,5,13
	.word	.L377,.L379
	.byte	6
	.byte	'old_addr',0,1,160,5,13
	.word	.L377,.L380
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_set_addr')
	.sect	'.debug_abbrev'
.L201:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_set_addr')
	.sect	'.debug_line'
.L202:
	.word	.L715-.L714
.L714:
	.half	3
	.word	.L717-.L716
.L716:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L717:
	.byte	5,1,7,0,5,2
	.word	.L150
	.byte	3,145,5,1,5,36,9
	.half	.L572-.L150
	.byte	3,4,1,5,3,3,16,1,5,14,7,9
	.half	.L573-.L572
	.byte	3,1,1,5,3,9
	.half	.L49-.L573
	.byte	3,2,1,5,15,7,9
	.half	.L718-.L49
	.byte	3,1,1,5,3,9
	.half	.L50-.L718
	.byte	3,2,1,5,10,7,9
	.half	.L719-.L50
	.byte	3,1,1,5,12,9
	.half	.L51-.L719
	.byte	3,3,1,5,3,9
	.half	.L720-.L51
	.byte	3,1,1,5,45,7,9
	.half	.L721-.L720
	.byte	3,3,1,5,5,9
	.half	.L567-.L721
	.byte	1,5,21,7,9
	.half	.L722-.L567
	.byte	3,2,1,5,43,3,1,1,5,40,9
	.half	.L723-.L722
	.byte	1,5,24,9
	.half	.L52-.L723
	.byte	3,99,1,5,3,9
	.half	.L577-.L52
	.byte	3,33,1,5,19,7,9
	.half	.L724-.L577
	.byte	3,2,1,5,24,3,93,1,5,38,9
	.half	.L571-.L724
	.byte	3,36,1,5,24,9
	.half	.L54-.L571
	.byte	3,93,1,5,3,9
	.half	.L580-.L54
	.byte	3,38,1,5,19,7,9
	.half	.L725-.L580
	.byte	3,2,1,5,24,3,88,1,5,33,9
	.half	.L726-.L725
	.byte	3,41,1,5,8,9
	.half	.L55-.L726
	.byte	3,3,1,5,45,7,9
	.half	.L727-.L55
	.byte	3,2,1,5,5,9
	.half	.L583-.L727
	.byte	1,5,21,7,9
	.half	.L728-.L583
	.byte	3,2,1,5,43,3,1,1,5,40,9
	.half	.L729-.L728
	.byte	1,5,3,9
	.half	.L56-.L729
	.byte	3,6,1,5,19,7,9
	.half	.L730-.L56
	.byte	3,1,1,5,54,3,1,1,5,1,9
	.half	.L58-.L730
	.byte	3,3,1,7,9
	.half	.L204-.L58
	.byte	0,1,1
.L715:
	.sdecl	'.debug_ranges',debug,cluster('netif_set_addr')
	.sect	'.debug_ranges'
.L203:
	.word	-1,.L150,0,.L204-.L150,0,0
	.sdecl	'.debug_info',debug,cluster('netif_remove')
	.sect	'.debug_info'
.L205:
	.word	265
	.half	3
	.word	.L206
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L208,.L207
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_remove',0,1,225,5,1,1,1,1
	.word	.L152,.L381,.L151
	.byte	4
	.byte	'netif',0,1,225,5,28
	.word	.L344,.L382
	.byte	5
	.word	.L152,.L381
	.byte	6
	.word	.L383
	.byte	7
	.byte	'tmp_netif',0,1,153,6,19
	.word	.L344,.L386
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_remove')
	.sect	'.debug_abbrev'
.L206:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,11,1,85
	.byte	6,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_remove')
	.sect	'.debug_line'
.L207:
	.word	.L732-.L731
.L731:
	.half	3
	.word	.L734-.L733
.L733:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L734:
	.byte	5,1,7,0,5,2
	.word	.L152
	.byte	3,224,5,1,5,3,9
	.half	.L587-.L152
	.byte	3,8,1,5,36,7,9
	.half	.L735-.L587
	.byte	3,4,1,5,60,1,5,8,9
	.half	.L586-.L735
	.byte	3,3,1,5,30,9
	.half	.L736-.L586
	.byte	3,1,1,5,53,9
	.half	.L737-.L736
	.byte	1,5,7,9
	.half	.L60-.L737
	.byte	3,22,1,5,3,9
	.half	.L738-.L60
	.byte	1,5,20,7,9
	.half	.L739-.L738
	.byte	3,2,1,5,7,9
	.half	.L61-.L739
	.byte	3,6,1,5,3,9
	.half	.L740-.L61
	.byte	1,5,23,7,9
	.half	.L741-.L740
	.byte	3,2,1,5,7,9
	.half	.L62-.L741
	.byte	3,4,1,5,3,9
	.half	.L590-.L62
	.byte	1,5,23,7,9
	.half	.L742-.L590
	.byte	3,1,1,5,16,9
	.half	.L588-.L742
	.byte	1,5,1,9
	.half	.L59-.L588
	.byte	3,22,1,5,20,7,9
	.half	.L66-.L59
	.byte	3,111,1,5,7,9
	.half	.L743-.L66
	.byte	1,5,32,7,9
	.half	.L744-.L743
	.byte	3,1,1,5,25,9
	.half	.L591-.L744
	.byte	1,5,1,9
	.half	.L384-.L591
	.byte	3,16,1,5,5,7,9
	.half	.L67-.L384
	.byte	3,110,1,5,1,9
	.half	.L385-.L67
	.byte	3,18,1,7,9
	.half	.L209-.L385
	.byte	0,1,1
.L732:
	.sdecl	'.debug_ranges',debug,cluster('netif_remove')
	.sect	'.debug_ranges'
.L208:
	.word	-1,.L152,0,.L209-.L152,0,0
.L383:
	.word	-1,.L152,.L66-.L152,.L384-.L152,.L67-.L152,.L385-.L152,0,0
	.sdecl	'.debug_info',debug,cluster('netif_find')
	.sect	'.debug_info'
.L210:
	.word	273
	.half	3
	.word	.L211
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L213,.L212
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_find',0,1,165,13,1
	.word	.L344
	.byte	1,1,1
	.word	.L174,.L387,.L173
	.byte	4
	.byte	'name',0,1,165,13,24
	.word	.L388,.L389
	.byte	5
	.word	.L174,.L387
	.byte	6
	.byte	'netif',0,1,167,13,17
	.word	.L344,.L390
	.byte	6
	.byte	'num',0,1,168,13,8
	.word	.L391,.L392
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_find')
	.sect	'.debug_abbrev'
.L211:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_find')
	.sect	'.debug_line'
.L212:
	.word	.L746-.L745
.L745:
	.half	3
	.word	.L748-.L747
.L747:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L748:
	.byte	5,1,7,0,5,2
	.word	.L174
	.byte	3,164,13,1,5,3,9
	.half	.L625-.L174
	.byte	3,7,1,5,26,7,9
	.half	.L749-.L625
	.byte	3,4,1,5,25,9
	.half	.L624-.L749
	.byte	1,5,9,9
	.half	.L750-.L624
	.byte	1,5,3,3,2,1,5,21,9
	.half	.L102-.L750
	.byte	3,1,1,5,9,9
	.half	.L751-.L102
	.byte	1,5,13,7,9
	.half	.L752-.L751
	.byte	3,1,1,5,31,9
	.half	.L753-.L752
	.byte	1,5,17,9
	.half	.L754-.L753
	.byte	1,5,13,7,9
	.half	.L755-.L754
	.byte	3,1,1,5,31,9
	.half	.L756-.L755
	.byte	1,5,17,9
	.half	.L757-.L756
	.byte	1,5,3,7,9
	.half	.L103-.L757
	.byte	3,125,1,5,10,9
	.half	.L100-.L103
	.byte	3,9,1,5,1,9
	.half	.L106-.L100
	.byte	3,1,1,7,9
	.half	.L214-.L106
	.byte	0,1,1
.L746:
	.sdecl	'.debug_ranges',debug,cluster('netif_find')
	.sect	'.debug_ranges'
.L213:
	.word	-1,.L174,0,.L214-.L174,0,0
	.sdecl	'.debug_info',debug,cluster('netif_set_default')
	.sect	'.debug_info'
.L215:
	.word	240
	.half	3
	.word	.L216
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L218,.L217
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_set_default',0,1,182,6,1,1,1,1
	.word	.L154,.L393,.L153
	.byte	4
	.byte	'netif',0,1,182,6,33
	.word	.L344,.L394
	.byte	5
	.word	.L154,.L393
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_set_default')
	.sect	'.debug_abbrev'
.L216:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_set_default')
	.sect	'.debug_line'
.L217:
	.word	.L759-.L758
.L758:
	.half	3
	.word	.L761-.L760
.L760:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L761:
	.byte	5,17,7,0,5,2
	.word	.L154
	.byte	3,192,6,1,5,1,9
	.half	.L762-.L154
	.byte	3,3,1,7,9
	.half	.L219-.L762
	.byte	0,1,1
.L759:
	.sdecl	'.debug_ranges',debug,cluster('netif_set_default')
	.sect	'.debug_ranges'
.L218:
	.word	-1,.L154,0,.L219-.L154,0,0
	.sdecl	'.debug_info',debug,cluster('netif_set_ipaddr')
	.sect	'.debug_info'
.L220:
	.word	310
	.half	3
	.word	.L221
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L223,.L222
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_set_ipaddr',0,1,244,3,1,1,1,1
	.word	.L140,.L395,.L139
	.byte	4
	.byte	'netif',0,1,244,3,32
	.word	.L344,.L396
	.byte	4
	.byte	'ipaddr',0,1,244,3,57
	.word	.L355,.L397
	.byte	5
	.word	.L140,.L395
	.byte	6
	.byte	'old_addr',0,1,246,3,13
	.word	.L377,.L398
	.byte	5
	.word	.L399,.L34
	.byte	6
	.byte	'args',0,1,131,4,31
	.word	.L375,.L400
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_set_ipaddr')
	.sect	'.debug_abbrev'
.L221:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_set_ipaddr')
	.sect	'.debug_line'
.L222:
	.word	.L764-.L763
.L763:
	.half	3
	.word	.L766-.L765
.L765:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L766:
	.byte	5,1,7,0,5,2
	.word	.L140
	.byte	3,243,3,1,5,3,9
	.half	.L541-.L140
	.byte	3,4,1,7,9
	.half	.L767-.L541
	.byte	1,9
	.half	.L31-.L767
	.byte	3,3,1,5,43,9
	.half	.L768-.L31
	.byte	3,6,1,5,3,9
	.half	.L544-.L768
	.byte	1,5,38,7,9
	.half	.L399-.L544
	.byte	3,3,1,5,35,9
	.half	.L769-.L399
	.byte	1,5,38,9
	.half	.L770-.L769
	.byte	3,1,1,5,70,1,5,1,9
	.half	.L34-.L770
	.byte	3,3,1,7,9
	.half	.L224-.L34
	.byte	0,1,1
.L764:
	.sdecl	'.debug_ranges',debug,cluster('netif_set_ipaddr')
	.sect	'.debug_ranges'
.L223:
	.word	-1,.L140,0,.L224-.L140,0,0
	.sdecl	'.debug_info',debug,cluster('netif_set_netmask')
	.sect	'.debug_info'
.L225:
	.word	314
	.half	3
	.word	.L226
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L228,.L227
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_set_netmask',0,1,176,4,1,1,1,1
	.word	.L144,.L401,.L143
	.byte	4
	.byte	'netif',0,1,176,4,33
	.word	.L344,.L402
	.byte	4
	.byte	'netmask',0,1,176,4,58
	.word	.L355,.L403
	.byte	5
	.word	.L144,.L401
	.byte	6
	.byte	'old_nm_val',0,1,179,4,13
	.word	.L377,.L404
	.byte	5
	.word	.L405,.L41
	.byte	6
	.byte	'args',0,1,195,4,31
	.word	.L375,.L406
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_set_netmask')
	.sect	'.debug_abbrev'
.L226:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_set_netmask')
	.sect	'.debug_line'
.L227:
	.word	.L772-.L771
.L771:
	.half	3
	.word	.L774-.L773
.L773:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L774:
	.byte	5,1,7,0,5,2
	.word	.L144
	.byte	3,175,4,1,5,3,9
	.half	.L551-.L144
	.byte	3,10,1,7,9
	.half	.L775-.L551
	.byte	1,9
	.half	.L38-.L775
	.byte	3,3,1,5,24,9
	.half	.L776-.L38
	.byte	3,119,1,5,3,9
	.half	.L554-.L776
	.byte	3,13,1,5,24,7,9
	.half	.L405-.L554
	.byte	3,115,1,5,35,9
	.half	.L777-.L405
	.byte	3,16,1,5,38,9
	.half	.L778-.L777
	.byte	3,1,1,5,70,1,5,1,9
	.half	.L41-.L778
	.byte	3,3,1,7,9
	.half	.L229-.L41
	.byte	0,1,1
.L772:
	.sdecl	'.debug_ranges',debug,cluster('netif_set_netmask')
	.sect	'.debug_ranges'
.L228:
	.word	-1,.L144,0,.L229-.L144,0,0
	.sdecl	'.debug_info',debug,cluster('netif_set_gw')
	.sect	'.debug_info'
.L230:
	.word	304
	.half	3
	.word	.L231
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L233,.L232
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_set_gw',0,1,237,4,1,1,1,1
	.word	.L148,.L407,.L147
	.byte	4
	.byte	'netif',0,1,237,4,28
	.word	.L344,.L408
	.byte	4
	.byte	'gw',0,1,237,4,53
	.word	.L355,.L409
	.byte	5
	.word	.L148,.L407
	.byte	6
	.byte	'old_gw_val',0,1,240,4,13
	.word	.L377,.L410
	.byte	5
	.word	.L411,.L48
	.byte	6
	.byte	'args',0,1,128,5,31
	.word	.L375,.L412
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_set_gw')
	.sect	'.debug_abbrev'
.L231:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_set_gw')
	.sect	'.debug_line'
.L232:
	.word	.L780-.L779
.L779:
	.half	3
	.word	.L782-.L781
.L781:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L782:
	.byte	5,1,7,0,5,2
	.word	.L148
	.byte	3,236,4,1,5,3,9
	.half	.L561-.L148
	.byte	3,10,1,7,9
	.half	.L783-.L561
	.byte	1,9
	.half	.L45-.L783
	.byte	3,3,1,5,24,9
	.half	.L784-.L45
	.byte	3,119,1,5,3,9
	.half	.L564-.L784
	.byte	3,13,1,5,24,7,9
	.half	.L411-.L564
	.byte	3,115,1,5,30,9
	.half	.L785-.L411
	.byte	3,16,1,5,38,9
	.half	.L786-.L785
	.byte	3,1,1,5,70,1,5,1,9
	.half	.L48-.L786
	.byte	3,3,1,7,9
	.half	.L234-.L48
	.byte	0,1,1
.L780:
	.sdecl	'.debug_ranges',debug,cluster('netif_set_gw')
	.sect	'.debug_ranges'
.L233:
	.word	-1,.L148,0,.L234-.L148,0,0
	.sdecl	'.debug_info',debug,cluster('netif_set_up')
	.sect	'.debug_info'
.L235:
	.word	264
	.half	3
	.word	.L236
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L238,.L237
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_set_up',0,1,204,6,1,1,1,1
	.word	.L156,.L413,.L155
	.byte	4
	.byte	'netif',0,1,204,6,28
	.word	.L344,.L414
	.byte	5
	.word	.L156,.L413
	.byte	5
	.word	.L415,.L416
	.byte	6
	.byte	'args',0,1,219,6,33
	.word	.L375,.L417
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_set_up')
	.sect	'.debug_abbrev'
.L236:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_set_up')
	.sect	'.debug_line'
.L237:
	.word	.L788-.L787
.L787:
	.half	3
	.word	.L790-.L789
.L789:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L790:
	.byte	5,1,7,0,5,2
	.word	.L156
	.byte	3,203,6,1,5,3,9
	.half	.L594-.L156
	.byte	3,4,1,7,9
	.half	.L791-.L594
	.byte	1,5,14,9
	.half	.L69-.L791
	.byte	3,2,1,5,8,9
	.half	.L792-.L69
	.byte	1,5,5,7,9
	.half	.L793-.L792
	.byte	3,1,1,5,35,9
	.half	.L415-.L793
	.byte	3,9,1,5,33,1,5,40,9
	.half	.L794-.L415
	.byte	3,1,1,5,66,1,5,55,9
	.half	.L416-.L794
	.byte	3,4,1,5,1,9
	.half	.L71-.L416
	.byte	3,5,1,7,9
	.half	.L239-.L71
	.byte	0,1,1
.L788:
	.sdecl	'.debug_ranges',debug,cluster('netif_set_up')
	.sect	'.debug_ranges'
.L238:
	.word	-1,.L156,0,.L239-.L156,0,0
	.sdecl	'.debug_info',debug,cluster('netif_set_down')
	.sect	'.debug_info'
.L240:
	.word	266
	.half	3
	.word	.L241
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L243,.L242
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_set_down',0,1,151,7,1,1,1,1
	.word	.L160,.L418,.L159
	.byte	4
	.byte	'netif',0,1,151,7,30
	.word	.L344,.L419
	.byte	5
	.word	.L160,.L418
	.byte	5
	.word	.L420,.L421
	.byte	6
	.byte	'args',0,1,160,7,33
	.word	.L375,.L422
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_set_down')
	.sect	'.debug_abbrev'
.L241:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_set_down')
	.sect	'.debug_line'
.L242:
	.word	.L796-.L795
.L795:
	.half	3
	.word	.L798-.L797
.L797:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L798:
	.byte	5,1,7,0,5,2
	.word	.L160
	.byte	3,150,7,1,5,3,9
	.half	.L601-.L160
	.byte	3,4,1,7,9
	.half	.L799-.L601
	.byte	1,5,12,9
	.half	.L77-.L799
	.byte	3,2,1,5,3,9
	.half	.L800-.L77
	.byte	1,5,35,7,9
	.half	.L420-.L800
	.byte	3,4,1,5,33,1,5,40,9
	.half	.L801-.L420
	.byte	3,1,1,5,66,1,5,5,9
	.half	.L421-.L801
	.byte	3,4,1,9
	.half	.L802-.L421
	.byte	3,4,1,5,28,7,9
	.half	.L803-.L802
	.byte	3,1,1,5,1,9
	.half	.L79-.L803
	.byte	3,10,1,7,9
	.half	.L244-.L79
	.byte	0,1,1
.L796:
	.sdecl	'.debug_ranges',debug,cluster('netif_set_down')
	.sect	'.debug_ranges'
.L243:
	.word	-1,.L160,0,.L244-.L160,0,0
	.sdecl	'.debug_info',debug,cluster('netif_set_link_up')
	.sect	'.debug_info'
.L245:
	.word	269
	.half	3
	.word	.L246
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L248,.L247
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_set_link_up',0,1,220,7,1,1,1,1
	.word	.L162,.L423,.L161
	.byte	4
	.byte	'netif',0,1,220,7,33
	.word	.L344,.L424
	.byte	5
	.word	.L162,.L423
	.byte	5
	.word	.L425,.L83
	.byte	6
	.byte	'args',0,1,245,7,33
	.word	.L375,.L426
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_set_link_up')
	.sect	'.debug_abbrev'
.L246:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_set_link_up')
	.sect	'.debug_line'
.L247:
	.word	.L805-.L804
.L804:
	.half	3
	.word	.L807-.L806
.L806:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L807:
	.byte	5,1,7,0,5,2
	.word	.L162
	.byte	3,219,7,1,5,3,9
	.half	.L608-.L162
	.byte	3,4,1,7,9
	.half	.L808-.L608
	.byte	1,5,14,9
	.half	.L81-.L808
	.byte	3,2,1,5,8,9
	.half	.L809-.L81
	.byte	1,5,5,7,9
	.half	.L810-.L809
	.byte	3,1,1,5,55,9
	.half	.L811-.L810
	.byte	3,10,1,5,33,9
	.half	.L425-.L811
	.byte	3,9,1,5,31,1,5,40,9
	.half	.L812-.L425
	.byte	3,1,1,5,64,1,5,1,9
	.half	.L83-.L812
	.byte	3,4,1,7,9
	.half	.L249-.L83
	.byte	0,1,1
.L805:
	.sdecl	'.debug_ranges',debug,cluster('netif_set_link_up')
	.sect	'.debug_ranges'
.L248:
	.word	-1,.L162,0,.L249-.L162,0,0
	.sdecl	'.debug_info',debug,cluster('netif_set_link_down')
	.sect	'.debug_info'
.L250:
	.word	271
	.half	3
	.word	.L251
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L253,.L252
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_set_link_down',0,1,130,8,1,1,1,1
	.word	.L164,.L427,.L163
	.byte	4
	.byte	'netif',0,1,130,8,35
	.word	.L344,.L428
	.byte	5
	.word	.L164,.L427
	.byte	5
	.word	.L429,.L86
	.byte	6
	.byte	'args',0,1,141,8,33
	.word	.L375,.L430
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_set_link_down')
	.sect	'.debug_abbrev'
.L251:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_set_link_down')
	.sect	'.debug_line'
.L252:
	.word	.L814-.L813
.L813:
	.half	3
	.word	.L816-.L815
.L815:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L816:
	.byte	5,1,7,0,5,2
	.word	.L164
	.byte	3,129,8,1,5,3,9
	.half	.L613-.L164
	.byte	3,4,1,7,9
	.half	.L817-.L613
	.byte	1,5,12,9
	.half	.L84-.L817
	.byte	3,2,1,5,3,9
	.half	.L818-.L84
	.byte	1,5,5,7,9
	.half	.L819-.L818
	.byte	3,1,1,5,33,9
	.half	.L429-.L819
	.byte	3,5,1,5,31,1,5,40,9
	.half	.L820-.L429
	.byte	3,1,1,5,64,1,5,1,9
	.half	.L86-.L820
	.byte	3,4,1,7,9
	.half	.L254-.L86
	.byte	0,1,1
.L814:
	.sdecl	'.debug_ranges',debug,cluster('netif_set_link_down')
	.sect	'.debug_ranges'
.L253:
	.word	-1,.L164,0,.L254-.L164,0,0
	.sdecl	'.debug_info',debug,cluster('netif_input')
	.sect	'.debug_info'
.L255:
	.word	251
	.half	3
	.word	.L256
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L258,.L257
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_input',0,1,217,1,1
	.word	.L431
	.byte	1,1,1
	.word	.L124,.L432,.L123
	.byte	4
	.byte	'p',0,1,217,1,26
	.word	.L433,.L434
	.byte	4
	.byte	'inp',0,1,217,1,43
	.word	.L344,.L435
	.byte	5
	.word	.L124,.L432
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_input')
	.sect	'.debug_abbrev'
.L256:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_input')
	.sect	'.debug_line'
.L257:
	.word	.L822-.L821
.L821:
	.half	3
	.word	.L824-.L823
.L823:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L824:
	.byte	5,1,7,0,5,2
	.word	.L124
	.byte	3,216,1,1,5,3,9
	.half	.L491-.L124
	.byte	3,4,1,7,9
	.half	.L825-.L491
	.byte	1,9
	.half	.L2-.L825
	.byte	3,1,1,7,9
	.half	.L826-.L2
	.byte	1,5,10,9
	.half	.L3-.L826
	.byte	3,3,1,5,18,9
	.half	.L827-.L3
	.byte	1,5,3,9
	.half	.L828-.L827
	.byte	1,5,30,7,9
	.half	.L829-.L828
	.byte	3,1,1,5,24,9
	.half	.L4-.L829
	.byte	3,3,1,5,1,9
	.half	.L259-.L4
	.byte	3,1,0,1,1
.L822:
	.sdecl	'.debug_ranges',debug,cluster('netif_input')
	.sect	'.debug_ranges'
.L258:
	.word	-1,.L124,0,.L259-.L124,0,0
	.sdecl	'.debug_info',debug,cluster('netif_name_to_index')
	.sect	'.debug_info'
.L260:
	.word	265
	.half	3
	.word	.L261
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L263,.L262
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_name_to_index',0,1,229,12,1
	.word	.L391
	.byte	1,1,1
	.word	.L168,.L436,.L167
	.byte	4
	.byte	'name',0,1,229,12,33
	.word	.L388,.L437
	.byte	5
	.word	.L168,.L436
	.byte	6
	.byte	'netif',0,1,231,12,17
	.word	.L344,.L438
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_name_to_index')
	.sect	'.debug_abbrev'
.L261:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_name_to_index')
	.sect	'.debug_line'
.L262:
	.word	.L831-.L830
.L830:
	.half	3
	.word	.L833-.L832
.L832:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L833:
	.byte	5,36,7,0,5,2
	.word	.L168
	.byte	3,230,12,1,5,3,9
	.half	.L617-.L168
	.byte	3,1,1,5,12,7,9
	.half	.L834-.L617
	.byte	3,1,1,5,1,9
	.half	.L835-.L834
	.byte	3,4,1,5,10,7,9
	.half	.L88-.L835
	.byte	3,127,1,5,1,3,1,1,7,9
	.half	.L264-.L88
	.byte	0,1,1
.L831:
	.sdecl	'.debug_ranges',debug,cluster('netif_name_to_index')
	.sect	'.debug_ranges'
.L263:
	.word	-1,.L168,0,.L264-.L168,0,0
	.sdecl	'.debug_info',debug,cluster('netif_index_to_name')
	.sect	'.debug_info'
.L265:
	.word	282
	.half	3
	.word	.L266
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L268,.L267
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_index_to_name',0,1,248,12,1
	.word	.L439
	.byte	1,1,1
	.word	.L170,.L440,.L169
	.byte	4
	.byte	'idx',0,1,248,12,26
	.word	.L391,.L441
	.byte	4
	.byte	'name',0,1,248,12,37
	.word	.L439,.L442
	.byte	5
	.word	.L170,.L440
	.byte	6
	.byte	'netif',0,1,250,12,17
	.word	.L344,.L443
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_index_to_name')
	.sect	'.debug_abbrev'
.L266:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_index_to_name')
	.sect	'.debug_line'
.L267:
	.word	.L837-.L836
.L836:
	.half	3
	.word	.L839-.L838
.L838:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L839:
	.byte	5,1,7,0,5,2
	.word	.L170
	.byte	3,247,12,1,5,44,9
	.half	.L619-.L170
	.byte	3,2,1,5,3,9
	.half	.L618-.L619
	.byte	3,2,1,5,26,7,9
	.half	.L840-.L618
	.byte	3,1,1,5,13,9
	.half	.L841-.L840
	.byte	1,5,40,9
	.half	.L842-.L841
	.byte	3,2,1,5,21,1,5,45,9
	.half	.L843-.L842
	.byte	1,5,26,3,127,1,5,13,9
	.half	.L844-.L843
	.byte	1,5,45,9
	.half	.L845-.L844
	.byte	3,1,1,5,5,9
	.half	.L620-.L845
	.byte	3,1,1,5,1,9
	.half	.L621-.L620
	.byte	3,3,1,5,10,7,9
	.half	.L91-.L621
	.byte	3,127,1,5,1,9
	.half	.L622-.L91
	.byte	3,1,1,7,9
	.half	.L269-.L622
	.byte	0,1,1
.L837:
	.sdecl	'.debug_ranges',debug,cluster('netif_index_to_name')
	.sect	'.debug_ranges'
.L268:
	.word	-1,.L170,0,.L269-.L170,0,0
	.sdecl	'.debug_info',debug,cluster('netif_get_by_index')
	.sect	'.debug_info'
.L270:
	.word	263
	.half	3
	.word	.L271
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L273,.L272
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_get_by_index',0,1,140,13,1
	.word	.L344
	.byte	1,1,1
	.word	.L172,.L444,.L171
	.byte	4
	.byte	'idx',0,1,140,13,25
	.word	.L391,.L445
	.byte	5
	.word	.L172,.L444
	.byte	6
	.byte	'netif',0,1,142,13,17
	.word	.L344,.L446
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_get_by_index')
	.sect	'.debug_abbrev'
.L271:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_get_by_index')
	.sect	'.debug_line'
.L272:
	.word	.L847-.L846
.L846:
	.half	3
	.word	.L849-.L848
.L848:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L849:
	.byte	5,3,7,0,5,2
	.word	.L172
	.byte	3,145,13,1,5,5,7,9
	.half	.L850-.L172
	.byte	3,1,1,5,18,9
	.half	.L96-.L850
	.byte	3,1,1,5,7,9
	.half	.L851-.L96
	.byte	1,5,5,7,9
	.half	.L852-.L851
	.byte	3,127,1,5,10,9
	.half	.L94-.L852
	.byte	3,7,1,5,1,9
	.half	.L98-.L94
	.byte	3,1,1,7,9
	.half	.L274-.L98
	.byte	0,1,1
.L847:
	.sdecl	'.debug_ranges',debug,cluster('netif_get_by_index')
	.sect	'.debug_ranges'
.L273:
	.word	-1,.L172,0,.L274-.L172,0,0
	.sdecl	'.debug_info',debug,cluster('netif_add_ext_callback')
	.sect	'.debug_info'
.L275:
	.word	264
	.half	3
	.word	.L276
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L278,.L277
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_add_ext_callback',0,1,198,13,1,1,1,1
	.word	.L176,.L447,.L175
	.byte	4
	.byte	'callback',0,1,198,13,46
	.word	.L448,.L449
	.byte	4
	.byte	'fn',0,1,198,13,78
	.word	.L450,.L451
	.byte	5
	.word	.L176,.L447
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_add_ext_callback')
	.sect	'.debug_abbrev'
.L276:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_add_ext_callback')
	.sect	'.debug_line'
.L277:
	.word	.L854-.L853
.L853:
	.half	3
	.word	.L856-.L855
.L855:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L856:
	.byte	5,1,7,0,5,2
	.word	.L176
	.byte	3,197,13,1,5,3,9
	.half	.L630-.L176
	.byte	3,3,1,7,9
	.half	.L857-.L630
	.byte	1,9
	.half	.L108-.L857
	.byte	3,1,1,7,9
	.half	.L858-.L108
	.byte	1,5,25,9
	.half	.L109-.L858
	.byte	3,2,1,5,27,9
	.half	.L859-.L109
	.byte	3,1,1,5,25,9
	.half	.L860-.L859
	.byte	1,9
	.half	.L861-.L860
	.byte	3,1,1,5,1,9
	.half	.L862-.L861
	.byte	3,1,1,7,9
	.half	.L279-.L862
	.byte	0,1,1
.L854:
	.sdecl	'.debug_ranges',debug,cluster('netif_add_ext_callback')
	.sect	'.debug_ranges'
.L278:
	.word	-1,.L176,0,.L279-.L176,0,0
	.sdecl	'.debug_info',debug,cluster('netif_remove_ext_callback')
	.sect	'.debug_info'
.L280:
	.word	288
	.half	3
	.word	.L281
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L283,.L282
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_remove_ext_callback',0,1,215,13,1,1,1,1
	.word	.L178,.L452,.L177
	.byte	4
	.byte	'callback',0,1,215,13,49
	.word	.L448,.L453
	.byte	5
	.word	.L178,.L452
	.byte	6
	.byte	'last',0,1,217,13,25
	.word	.L448,.L454
	.byte	6
	.byte	'iter',0,1,217,13,32
	.word	.L448,.L455
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_remove_ext_callback')
	.sect	'.debug_abbrev'
.L281:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_remove_ext_callback')
	.sect	'.debug_line'
.L282:
	.word	.L864-.L863
.L863:
	.half	3
	.word	.L866-.L865
.L865:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L866:
	.byte	5,1,7,0,5,2
	.word	.L178
	.byte	3,214,13,1,5,3,9
	.half	.L637-.L178
	.byte	3,5,1,5,7,9
	.half	.L110-.L637
	.byte	3,2,1,5,3,9
	.half	.L640-.L110
	.byte	1,5,32,7,9
	.half	.L867-.L640
	.byte	3,5,1,5,3,9
	.half	.L641-.L867
	.byte	3,127,1,5,18,7,9
	.half	.L868-.L641
	.byte	3,1,1,5,1,9
	.half	.L111-.L868
	.byte	3,12,1,5,7,7,9
	.half	.L115-.L111
	.byte	3,120,1,5,30,7,9
	.half	.L869-.L115
	.byte	3,2,1,5,20,9
	.half	.L642-.L869
	.byte	1,5,24,9
	.half	.L870-.L642
	.byte	3,1,1,5,1,9
	.half	.L871-.L870
	.byte	3,5,1,5,56,7,9
	.half	.L116-.L871
	.byte	3,119,1,5,75,9
	.half	.L872-.L116
	.byte	1,5,49,9
	.half	.L114-.L872
	.byte	1,5,1,7,9
	.half	.L873-.L114
	.byte	3,9,1,7,9
	.half	.L284-.L873
	.byte	0,1,1
.L864:
	.sdecl	'.debug_ranges',debug,cluster('netif_remove_ext_callback')
	.sect	'.debug_ranges'
.L283:
	.word	-1,.L178,0,.L284-.L178,0,0
	.sdecl	'.debug_info',debug,cluster('netif_invoke_ext_callback')
	.sect	'.debug_info'
.L285:
	.word	309
	.half	3
	.word	.L286
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L288,.L287
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_invoke_ext_callback',0,1,248,13,1,1,1,1
	.word	.L180,.L456,.L179
	.byte	4
	.byte	'netif',0,1,248,13,41
	.word	.L344,.L457
	.byte	4
	.byte	'reason',0,1,248,13,67
	.word	.L373,.L458
	.byte	4
	.byte	'args',0,1,248,13,108
	.word	.L459,.L460
	.byte	5
	.word	.L180,.L456
	.byte	6
	.byte	'callback',0,1,250,13,25
	.word	.L448,.L461
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_invoke_ext_callback')
	.sect	'.debug_abbrev'
.L286:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_invoke_ext_callback')
	.sect	'.debug_line'
.L287:
	.word	.L875-.L874
.L874:
	.half	3
	.word	.L877-.L876
.L876:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L877:
	.byte	5,1,7,0,5,2
	.word	.L180
	.byte	3,247,13,1,5,36,9
	.half	.L646-.L180
	.byte	3,2,1,5,3,9
	.half	.L647-.L646
	.byte	3,2,1,7,9
	.half	.L878-.L647
	.byte	1,5,26,9
	.half	.L650-.L878
	.byte	3,2,1,5,13,9
	.half	.L120-.L650
	.byte	3,1,1,5,42,9
	.half	.L879-.L120
	.byte	1,5,24,9
	.half	.L652-.L879
	.byte	3,1,1,5,26,9
	.half	.L119-.L652
	.byte	3,126,1,5,1,7,9
	.half	.L880-.L119
	.byte	3,4,1,7,9
	.half	.L289-.L880
	.byte	0,1,1
.L875:
	.sdecl	'.debug_ranges',debug,cluster('netif_invoke_ext_callback')
	.sect	'.debug_ranges'
.L288:
	.word	-1,.L180,0,.L289-.L180,0,0
	.sdecl	'.debug_info',debug,cluster('netif_issue_reports')
	.sect	'.debug_info'
.L290:
	.word	266
	.half	3
	.word	.L291
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L293,.L292
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_issue_reports',0,1,235,6,1,1,1
	.word	.L158,.L462,.L157
	.byte	4
	.byte	'netif',0,1,235,6,35
	.word	.L344,.L463
	.byte	4
	.byte	'report_type',0,1,235,6,47
	.word	.L391,.L464
	.byte	5
	.word	.L158,.L462
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_issue_reports')
	.sect	'.debug_abbrev'
.L291:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_issue_reports')
	.sect	'.debug_line'
.L292:
	.word	.L882-.L881
.L881:
	.half	3
	.word	.L884-.L883
.L883:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L884:
	.byte	5,14,7,0,5,2
	.word	.L158
	.byte	3,239,6,1,5,8,9
	.half	.L885-.L158
	.byte	1,7,9
	.half	.L886-.L885
	.byte	3,1,1,5,7,7,9
	.half	.L887-.L886
	.byte	3,5,1,5,8,7,9
	.half	.L888-.L887
	.byte	3,1,1,5,5,9
	.half	.L889-.L888
	.byte	3,3,1,5,7,7,9
	.half	.L890-.L889
	.byte	3,1,1,5,1,9
	.half	.L72-.L890
	.byte	3,21,1,7,9
	.half	.L294-.L72
	.byte	0,1,1
.L882:
	.sdecl	'.debug_ranges',debug,cluster('netif_issue_reports')
	.sect	'.debug_ranges'
.L293:
	.word	-1,.L158,0,.L294-.L158,0,0
	.sdecl	'.debug_info',debug,cluster('netif_null_output_ip4')
	.sect	'.debug_info'
.L295:
	.word	282
	.half	3
	.word	.L296
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L298,.L297
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_null_output_ip4',0,1,211,12,1
	.word	.L431
	.byte	1,1
	.word	.L166,.L465,.L165
	.byte	4
	.byte	'netif',0,1,211,12,37
	.word	.L344,.L466
	.byte	4
	.byte	'p',0,1,211,12,57
	.word	.L433,.L467
	.byte	4
	.byte	'ipaddr',0,1,211,12,78
	.word	.L355,.L468
	.byte	5
	.word	.L166,.L465
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_null_output_ip4')
	.sect	'.debug_abbrev'
.L296:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_null_output_ip4')
	.sect	'.debug_line'
.L297:
	.word	.L892-.L891
.L891:
	.half	3
	.word	.L894-.L893
.L893:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L894:
	.byte	5,10,7,0,5,2
	.word	.L166
	.byte	3,216,12,1,5,1,3,1,1,7,9
	.half	.L299-.L166
	.byte	0,1,1
.L892:
	.sdecl	'.debug_ranges',debug,cluster('netif_null_output_ip4')
	.sect	'.debug_ranges'
.L298:
	.word	-1,.L166,0,.L299-.L166,0,0
	.sdecl	'.debug_info',debug,cluster('netif_do_ip_addr_changed')
	.sect	'.debug_info'
.L300:
	.word	271
	.half	3
	.word	.L301
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L303,.L302
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_do_ip_addr_changed',0,1,186,3,1,1,1
	.word	.L136,.L469,.L135
	.byte	4
	.byte	'old_addr',0,1,186,3,43
	.word	.L470,.L471
	.byte	4
	.byte	'new_addr',0,1,186,3,70
	.word	.L470,.L472
	.byte	5
	.word	.L136,.L469
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_do_ip_addr_changed')
	.sect	'.debug_abbrev'
.L301:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_do_ip_addr_changed')
	.sect	'.debug_line'
.L302:
	.word	.L896-.L895
.L895:
	.half	3
	.word	.L898-.L897
.L897:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L898:
	.byte	5,1,7,0,5,2
	.word	.L136
	.byte	3,185,3,1,5,39,9
	.half	.L526-.L136
	.byte	3,3,1,9
	.half	.L524-.L526
	.byte	3,3,1,5,1,9
	.half	.L304-.L524
	.byte	3,5,0,1,1
.L896:
	.sdecl	'.debug_ranges',debug,cluster('netif_do_ip_addr_changed')
	.sect	'.debug_ranges'
.L303:
	.word	-1,.L136,0,.L304-.L136,0,0
	.sdecl	'.debug_info',debug,cluster('netif_do_set_ipaddr')
	.sect	'.debug_info'
.L305:
	.word	320
	.half	3
	.word	.L306
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L308,.L307
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_do_set_ipaddr',0,1,201,3,1
	.word	.L366
	.byte	1,1
	.word	.L138,.L473,.L137
	.byte	4
	.byte	'netif',0,1,201,3,35
	.word	.L344,.L474
	.byte	4
	.byte	'ipaddr',0,1,201,3,60
	.word	.L355,.L475
	.byte	4
	.byte	'old_addr',0,1,201,3,79
	.word	.L476,.L477
	.byte	5
	.word	.L138,.L473
	.byte	5
	.word	.L478,.L28
	.byte	6
	.byte	'new_addr',0,1,208,3,15
	.word	.L377,.L479
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_do_set_ipaddr')
	.sect	'.debug_abbrev'
.L306:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_do_set_ipaddr')
	.sect	'.debug_line'
.L307:
	.word	.L900-.L899
.L899:
	.half	3
	.word	.L902-.L901
.L901:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L902:
	.byte	5,1,7,0,5,2
	.word	.L138
	.byte	3,200,3,1,5,7,9
	.half	.L533-.L138
	.byte	3,6,1,5,1,9
	.half	.L903-.L533
	.byte	3,122,1,5,3,9
	.half	.L529-.L903
	.byte	3,6,1,5,6,7,9
	.half	.L478-.L529
	.byte	3,2,1,5,5,9
	.half	.L904-.L478
	.byte	3,3,1,9
	.half	.L905-.L904
	.byte	3,2,1,5,41,9
	.half	.L530-.L905
	.byte	3,1,1,5,5,9
	.half	.L536-.L530
	.byte	3,5,1,5,32,9
	.half	.L906-.L536
	.byte	3,5,1,5,12,9
	.half	.L538-.L906
	.byte	3,3,1,5,1,3,3,1,5,10,7,9
	.half	.L28-.L538
	.byte	3,127,1,5,1,3,1,1,7,9
	.half	.L309-.L28
	.byte	0,1,1
.L900:
	.sdecl	'.debug_ranges',debug,cluster('netif_do_set_ipaddr')
	.sect	'.debug_ranges'
.L308:
	.word	-1,.L138,0,.L309-.L138,0,0
	.sdecl	'.debug_info',debug,cluster('netif_do_set_netmask')
	.sect	'.debug_info'
.L310:
	.word	287
	.half	3
	.word	.L311
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L313,.L312
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_do_set_netmask',0,1,139,4,1
	.word	.L366
	.byte	1,1
	.word	.L142,.L480,.L141
	.byte	4
	.byte	'netif',0,1,139,4,36
	.word	.L344,.L481
	.byte	4
	.byte	'netmask',0,1,139,4,61
	.word	.L355,.L482
	.byte	4
	.byte	'old_nm',0,1,139,4,81
	.word	.L476,.L483
	.byte	5
	.word	.L142,.L480
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_do_set_netmask')
	.sect	'.debug_abbrev'
.L311:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_do_set_netmask')
	.sect	'.debug_line'
.L312:
	.word	.L908-.L907
.L907:
	.half	3
	.word	.L910-.L909
.L909:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L910:
	.byte	5,7,7,0,5,2
	.word	.L142
	.byte	3,141,4,1,5,1,9
	.half	.L911-.L142
	.byte	3,125,1,5,3,9
	.half	.L546-.L911
	.byte	3,3,1,5,5,7,9
	.half	.L912-.L546
	.byte	3,3,1,9
	.half	.L913-.L912
	.byte	3,6,1,9
	.half	.L914-.L913
	.byte	3,3,1,5,12,9
	.half	.L548-.L914
	.byte	3,6,1,5,1,3,3,1,5,10,7,9
	.half	.L35-.L548
	.byte	3,127,1,5,1,3,1,1,7,9
	.half	.L314-.L35
	.byte	0,1,1
.L908:
	.sdecl	'.debug_ranges',debug,cluster('netif_do_set_netmask')
	.sect	'.debug_ranges'
.L313:
	.word	-1,.L142,0,.L314-.L142,0,0
	.sdecl	'.debug_info',debug,cluster('netif_do_set_gw')
	.sect	'.debug_info'
.L315:
	.word	277
	.half	3
	.word	.L316
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L318,.L317
	.byte	2
	.word	.L181
	.byte	3
	.byte	'netif_do_set_gw',0,1,203,4,1
	.word	.L366
	.byte	1,1
	.word	.L146,.L484,.L145
	.byte	4
	.byte	'netif',0,1,203,4,31
	.word	.L344,.L485
	.byte	4
	.byte	'gw',0,1,203,4,56
	.word	.L355,.L486
	.byte	4
	.byte	'old_gw',0,1,203,4,71
	.word	.L476,.L487
	.byte	5
	.word	.L146,.L484
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('netif_do_set_gw')
	.sect	'.debug_abbrev'
.L316:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('netif_do_set_gw')
	.sect	'.debug_line'
.L317:
	.word	.L916-.L915
.L915:
	.half	3
	.word	.L918-.L917
.L917:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L918:
	.byte	5,7,7,0,5,2
	.word	.L146
	.byte	3,205,4,1,5,1,9
	.half	.L919-.L146
	.byte	3,125,1,5,3,9
	.half	.L556-.L919
	.byte	3,3,1,5,5,7,9
	.half	.L920-.L556
	.byte	3,3,1,9
	.half	.L921-.L920
	.byte	3,5,1,9
	.half	.L922-.L921
	.byte	3,2,1,5,12,9
	.half	.L557-.L922
	.byte	3,6,1,5,1,3,3,1,5,10,7,9
	.half	.L42-.L557
	.byte	3,127,1,5,1,3,1,1,7,9
	.half	.L319-.L42
	.byte	0,1,1
.L916:
	.sdecl	'.debug_ranges',debug,cluster('netif_do_set_gw')
	.sect	'.debug_ranges'
.L318:
	.word	-1,.L146,0,.L319-.L146,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_35')
	.sect	'.debug_info'
.L320:
	.word	203
	.half	3
	.word	.L321
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L323,.L322
	.byte	2
	.word	.L181
	.byte	3
	.byte	'.cocofun_35',0,1,148,2,1,1
	.word	.L134,.L324,.L133
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_35')
	.sect	'.debug_abbrev'
.L321:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_35')
	.sect	'.debug_line'
.L322:
	.word	.L924-.L923
.L923:
	.half	3
	.word	.L926-.L925
.L925:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L926:
	.byte	5,9,7,0,5,2
	.word	.L134
	.byte	3,138,3,1,9
	.half	.L324-.L134
	.byte	0,1,1,5,3,0,5,2
	.word	.L134
	.byte	3,220,1,1,5,9,9
	.half	.L927-.L134
	.byte	3,174,1,1,7,9
	.half	.L324-.L927
	.byte	0,1,1,5,3,0,5,2
	.word	.L134
	.byte	3,221,1,1,5,9,9
	.half	.L927-.L134
	.byte	3,173,1,1,7,9
	.half	.L324-.L927
	.byte	0,1,1,5,3,0,5,2
	.word	.L134
	.byte	3,167,2,1,5,9,9
	.half	.L927-.L134
	.byte	3,227,0,1,7,9
	.half	.L324-.L927
	.byte	0,1,1,5,9,0,5,2
	.word	.L134
	.byte	3,140,3,1,9
	.half	.L927-.L134
	.byte	3,126,1,7,9
	.half	.L324-.L927
	.byte	0,1,1,5,3,0,5,2
	.word	.L134
	.byte	3,247,3,1,5,9,9
	.half	.L927-.L134
	.byte	3,147,127,1,7,9
	.half	.L324-.L927
	.byte	0,1,1,5,3,0,5,2
	.word	.L134
	.byte	3,185,4,1,5,9,9
	.half	.L927-.L134
	.byte	3,209,126,1,7,9
	.half	.L324-.L927
	.byte	0,1,1,5,3,0,5,2
	.word	.L134
	.byte	3,246,4,1,5,9,9
	.half	.L927-.L134
	.byte	3,148,126,1,7,9
	.half	.L324-.L927
	.byte	0,1,1,5,3,0,5,2
	.word	.L134
	.byte	3,207,6,1,5,9,9
	.half	.L927-.L134
	.byte	3,187,124,1,7,9
	.half	.L324-.L927
	.byte	0,1,1,5,3,0,5,2
	.word	.L134
	.byte	3,154,7,1,5,9,9
	.half	.L927-.L134
	.byte	3,240,123,1,7,9
	.half	.L324-.L927
	.byte	0,1,1,5,3,0,5,2
	.word	.L134
	.byte	3,223,7,1,5,9,9
	.half	.L927-.L134
	.byte	3,171,123,1,7,9
	.half	.L324-.L927
	.byte	0,1,1,5,3,0,5,2
	.word	.L134
	.byte	3,133,8,1,5,9,9
	.half	.L927-.L134
	.byte	3,133,123,1,7,9
	.half	.L324-.L927
	.byte	0,1,1,5,3,0,5,2
	.word	.L134
	.byte	3,200,13,1,5,9,9
	.half	.L927-.L134
	.byte	3,194,117,1,7,9
	.half	.L324-.L927
	.byte	0,1,1,5,3,0,5,2
	.word	.L134
	.byte	3,201,13,1,5,9,9
	.half	.L927-.L134
	.byte	3,193,117,1,7,9
	.half	.L324-.L927
	.byte	0,1,1,5,3,0,5,2
	.word	.L134
	.byte	3,219,13,1,5,9,9
	.half	.L927-.L134
	.byte	3,175,117,1,7,9
	.half	.L324-.L927
	.byte	0,1,1,5,3,0,5,2
	.word	.L134
	.byte	3,251,13,1,5,9,9
	.half	.L927-.L134
	.byte	3,143,117,1,7,9
	.half	.L324-.L927
	.byte	0,1,1
.L924:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_35')
	.sect	'.debug_ranges'
.L323:
	.word	-1,.L134,0,.L324-.L134,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_36')
	.sect	'.debug_info'
.L325:
	.word	203
	.half	3
	.word	.L326
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L328,.L327
	.byte	2
	.word	.L181
	.byte	3
	.byte	'.cocofun_36',0,1,148,2,1,1
	.word	.L132,.L329,.L131
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_36')
	.sect	'.debug_abbrev'
.L326:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_36')
	.sect	'.debug_line'
.L327:
	.word	.L929-.L928
.L928:
	.half	3
	.word	.L931-.L930
.L930:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L931:
	.byte	5,9,7,0,5,2
	.word	.L132
	.byte	3,138,3,1,9
	.half	.L329-.L132
	.byte	0,1,1,5,3,0,5,2
	.word	.L132
	.byte	3,220,1,1,5,9,9
	.half	.L932-.L132
	.byte	3,174,1,1,7,9
	.half	.L329-.L932
	.byte	0,1,1,5,3,0,5,2
	.word	.L132
	.byte	3,221,1,1,5,9,9
	.half	.L932-.L132
	.byte	3,173,1,1,7,9
	.half	.L329-.L932
	.byte	0,1,1,5,3,0,5,2
	.word	.L132
	.byte	3,167,2,1,5,9,9
	.half	.L932-.L132
	.byte	3,227,0,1,7,9
	.half	.L329-.L932
	.byte	0,1,1,5,9,0,5,2
	.word	.L132
	.byte	3,140,3,1,9
	.half	.L932-.L132
	.byte	3,126,1,7,9
	.half	.L329-.L932
	.byte	0,1,1,5,3,0,5,2
	.word	.L132
	.byte	3,247,3,1,5,9,9
	.half	.L932-.L132
	.byte	3,147,127,1,7,9
	.half	.L329-.L932
	.byte	0,1,1,5,3,0,5,2
	.word	.L132
	.byte	3,185,4,1,5,9,9
	.half	.L932-.L132
	.byte	3,209,126,1,7,9
	.half	.L329-.L932
	.byte	0,1,1,5,3,0,5,2
	.word	.L132
	.byte	3,246,4,1,5,9,9
	.half	.L932-.L132
	.byte	3,148,126,1,7,9
	.half	.L329-.L932
	.byte	0,1,1,5,3,0,5,2
	.word	.L132
	.byte	3,207,6,1,5,9,9
	.half	.L932-.L132
	.byte	3,187,124,1,7,9
	.half	.L329-.L932
	.byte	0,1,1,5,3,0,5,2
	.word	.L132
	.byte	3,154,7,1,5,9,9
	.half	.L932-.L132
	.byte	3,240,123,1,7,9
	.half	.L329-.L932
	.byte	0,1,1,5,3,0,5,2
	.word	.L132
	.byte	3,223,7,1,5,9,9
	.half	.L932-.L132
	.byte	3,171,123,1,7,9
	.half	.L329-.L932
	.byte	0,1,1,5,3,0,5,2
	.word	.L132
	.byte	3,133,8,1,5,9,9
	.half	.L932-.L132
	.byte	3,133,123,1,7,9
	.half	.L329-.L932
	.byte	0,1,1,5,3,0,5,2
	.word	.L132
	.byte	3,200,13,1,5,9,9
	.half	.L932-.L132
	.byte	3,194,117,1,7,9
	.half	.L329-.L932
	.byte	0,1,1,5,3,0,5,2
	.word	.L132
	.byte	3,201,13,1,5,9,9
	.half	.L932-.L132
	.byte	3,193,117,1,7,9
	.half	.L329-.L932
	.byte	0,1,1,5,3,0,5,2
	.word	.L132
	.byte	3,219,13,1,5,9,9
	.half	.L932-.L132
	.byte	3,175,117,1,7,9
	.half	.L329-.L932
	.byte	0,1,1,5,3,0,5,2
	.word	.L132
	.byte	3,251,13,1,5,9,9
	.half	.L932-.L132
	.byte	3,143,117,1,7,9
	.half	.L329-.L932
	.byte	0,1,1
.L929:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_36')
	.sect	'.debug_ranges'
.L328:
	.word	-1,.L132,0,.L329-.L132,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_37')
	.sect	'.debug_info'
.L330:
	.word	203
	.half	3
	.word	.L331
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1
	.word	.L333,.L332
	.byte	2
	.word	.L181
	.byte	3
	.byte	'.cocofun_37',0,1,148,2,1,1
	.word	.L130,.L334,.L129
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_37')
	.sect	'.debug_abbrev'
.L331:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_37')
	.sect	'.debug_line'
.L332:
	.word	.L934-.L933
.L933:
	.half	3
	.word	.L936-.L935
.L935:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0,0,0,0,0
.L936:
	.byte	5,3,7,0,5,2
	.word	.L130
	.byte	3,170,2,1,5,14,7,9
	.half	.L937-.L130
	.byte	3,1,1,5,3,9
	.half	.L12-.L937
	.byte	3,127,1,7,9
	.half	.L334-.L12
	.byte	0,1,1,5,3,0,5,2
	.word	.L130
	.byte	3,250,3,1,5,14,7,9
	.half	.L937-.L130
	.byte	3,1,1,5,3,9
	.half	.L12-.L937
	.byte	3,175,126,1,7,9
	.half	.L334-.L12
	.byte	0,1,1,5,3,0,5,2
	.word	.L130
	.byte	3,188,4,1,5,15,7,9
	.half	.L937-.L130
	.byte	3,1,1,5,3,9
	.half	.L12-.L937
	.byte	3,237,125,1,7,9
	.half	.L334-.L12
	.byte	0,1,1,5,3,0,5,2
	.word	.L130
	.byte	3,249,4,1,5,10,7,9
	.half	.L937-.L130
	.byte	3,1,1,5,3,9
	.half	.L12-.L937
	.byte	3,176,125,1,7,9
	.half	.L334-.L12
	.byte	0,1,1
.L934:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_37')
	.sect	'.debug_ranges'
.L333:
	.word	-1,.L130,0,.L334-.L130,0,0
	.sdecl	'.debug_info',debug,cluster('netif_list')
	.sect	'.debug_info'
.L335:
	.word	191
	.half	3
	.word	.L336
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1,2
	.word	.L181
	.byte	3
	.byte	'netif_list',0,12,110,15
	.word	.L344
	.byte	1,5,3
	.word	netif_list
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('netif_list')
	.sect	'.debug_abbrev'
.L336:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('netif_default')
	.sect	'.debug_info'
.L337:
	.word	194
	.half	3
	.word	.L338
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1,2
	.word	.L181
	.byte	3
	.byte	'netif_default',0,12,112,15
	.word	.L344
	.byte	1,5,3
	.word	netif_default
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('netif_default')
	.sect	'.debug_abbrev'
.L338:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('ext_callback')
	.sect	'.debug_info'
.L339:
	.word	192
	.half	3
	.word	.L340
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1,2
	.word	.L181
	.byte	3
	.byte	'ext_callback',0,12,106,30
	.word	.L448
	.byte	5,3
	.word	ext_callback
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('ext_callback')
	.sect	'.debug_abbrev'
.L340:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('netif_num')
	.sect	'.debug_info'
.L341:
	.word	189
	.half	3
	.word	.L342
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Ethernet\\lwip\\src\\core\\netif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_Client_Ethernet\\Debug\\',0,12,1,2
	.word	.L181
	.byte	3
	.byte	'netif_num',0,12,115,13
	.word	.L391
	.byte	5,3
	.word	netif_num
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('netif_num')
	.sect	'.debug_abbrev'
.L342:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_35')
	.sect	'.debug_loc'
.L133:
	.word	-1,.L134,0,.L324-.L134
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_36')
	.sect	'.debug_loc'
.L131:
	.word	-1,.L132,0,.L329-.L132
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_37')
	.sect	'.debug_loc'
.L129:
	.word	-1,.L130,0,.L334-.L130
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_add')
	.sect	'.debug_loc'
.L358:
	.word	-1,.L128,.L134-.L128,.L324-.L128
	.half	1
	.byte	103
	.word	.L132-.L128,.L329-.L128
	.half	1
	.byte	103
	.word	0,.L508-.L128
	.half	1
	.byte	103
	.word	.L130-.L128,.L334-.L128
	.half	1
	.byte	103
	.word	.L10-.L128,.L510-.L128
	.half	1
	.byte	103
	.word	0,0
.L360:
	.word	-1,.L128,.L134-.L128,.L324-.L128
	.half	2
	.byte	145,4
	.word	.L134-.L128,.L324-.L128
	.half	2
	.byte	145,4
	.word	.L134-.L128,.L324-.L128
	.half	1
	.byte	109
	.word	.L132-.L128,.L329-.L128
	.half	2
	.byte	145,4
	.word	.L132-.L128,.L329-.L128
	.half	2
	.byte	145,4
	.word	.L132-.L128,.L329-.L128
	.half	1
	.byte	109
	.word	.L130-.L128,.L334-.L128
	.half	2
	.byte	145,4
	.word	.L130-.L128,.L334-.L128
	.half	2
	.byte	145,4
	.word	.L130-.L128,.L334-.L128
	.half	1
	.byte	109
	.word	0,.L511-.L128
	.half	2
	.byte	145,4
	.word	0,.L511-.L128
	.half	2
	.byte	145,4
	.word	.L512-.L128,.L17-.L128
	.half	1
	.byte	109
	.word	.L518-.L128,.L519-.L128
	.half	2
	.byte	145,4
	.word	.L518-.L128,.L519-.L128
	.half	2
	.byte	145,4
	.word	.L520-.L128,.L353-.L128
	.half	2
	.byte	145,4
	.word	.L520-.L128,.L353-.L128
	.half	2
	.byte	145,4
	.word	0,0
.L361:
	.word	-1,.L128,.L134-.L128,.L324-.L128
	.half	2
	.byte	145,8
	.word	.L134-.L128,.L324-.L128
	.half	1
	.byte	100
	.word	.L134-.L128,.L324-.L128
	.half	2
	.byte	145,8
	.word	.L506-.L128,.L507-.L128
	.half	1
	.byte	100
	.word	.L132-.L128,.L329-.L128
	.half	2
	.byte	145,8
	.word	.L132-.L128,.L494-.L128
	.half	1
	.byte	100
	.word	.L132-.L128,.L329-.L128
	.half	2
	.byte	145,8
	.word	.L130-.L128,.L334-.L128
	.half	2
	.byte	145,8
	.word	.L130-.L128,.L334-.L128
	.half	1
	.byte	100
	.word	.L130-.L128,.L334-.L128
	.half	2
	.byte	145,8
	.word	0,.L511-.L128
	.half	2
	.byte	145,8
	.word	.L10-.L128,.L513-.L128
	.half	1
	.byte	100
	.word	0,.L511-.L128
	.half	2
	.byte	145,8
	.word	.L518-.L128,.L519-.L128
	.half	2
	.byte	145,8
	.word	.L518-.L128,.L519-.L128
	.half	2
	.byte	145,8
	.word	.L520-.L128,.L353-.L128
	.half	2
	.byte	145,8
	.word	.L520-.L128,.L353-.L128
	.half	2
	.byte	145,8
	.word	0,0
.L356:
	.word	-1,.L128,.L134-.L128,.L324-.L128
	.half	1
	.byte	101
	.word	.L132-.L128,.L329-.L128
	.half	1
	.byte	101
	.word	0,.L508-.L128
	.half	1
	.byte	101
	.word	.L130-.L128,.L334-.L128
	.half	1
	.byte	101
	.word	.L10-.L128,.L510-.L128
	.half	1
	.byte	101
	.word	0,0
.L354:
	.word	-1,.L128,0,.L506-.L128
	.half	1
	.byte	100
	.word	.L134-.L128,.L324-.L128
	.half	1
	.byte	108
	.word	.L132-.L128,.L329-.L128
	.half	1
	.byte	108
	.word	.L130-.L128,.L334-.L128
	.half	1
	.byte	108
	.word	.L514-.L128,.L511-.L128
	.half	1
	.byte	108
	.word	.L513-.L128,.L510-.L128
	.half	1
	.byte	100
	.word	.L515-.L128,.L516-.L128
	.half	1
	.byte	100
	.word	.L518-.L128,.L519-.L128
	.half	1
	.byte	108
	.word	.L520-.L128,.L353-.L128
	.half	1
	.byte	108
	.word	.L521-.L128,.L522-.L128
	.half	1
	.byte	100
	.word	.L523-.L128,.L353-.L128
	.half	1
	.byte	98
	.word	0,0
.L365:
	.word	-1,.L128,.L517-.L128,.L511-.L128
	.half	1
	.byte	109
	.word	.L134-.L128,.L324-.L128
	.half	1
	.byte	109
	.word	.L132-.L128,.L329-.L128
	.half	1
	.byte	109
	.word	.L518-.L128,.L519-.L128
	.half	1
	.byte	109
	.word	.L520-.L128,.L353-.L128
	.half	1
	.byte	109
	.word	0,0
.L127:
	.word	-1,.L128,0,.L505-.L128
	.half	2
	.byte	138,0
	.word	.L505-.L128,.L15-.L128
	.half	2
	.byte	138,16
	.word	.L15-.L128,.L15-.L128
	.half	2
	.byte	138,0
	.word	.L15-.L128,.L353-.L128
	.half	2
	.byte	138,16
	.word	.L353-.L128,.L353-.L128
	.half	2
	.byte	138,0
	.word	0,0
.L357:
	.word	-1,.L128,.L134-.L128,.L324-.L128
	.half	1
	.byte	102
	.word	.L132-.L128,.L329-.L128
	.half	1
	.byte	102
	.word	0,.L508-.L128
	.half	1
	.byte	102
	.word	.L130-.L128,.L334-.L128
	.half	1
	.byte	102
	.word	.L10-.L128,.L510-.L128
	.half	1
	.byte	102
	.word	0,0
.L367:
	.word	-1,.L128,.L517-.L128,.L511-.L128
	.half	1
	.byte	88
	.word	.L134-.L128,.L324-.L128
	.half	1
	.byte	88
	.word	.L132-.L128,.L329-.L128
	.half	1
	.byte	88
	.word	.L518-.L128,.L519-.L128
	.half	1
	.byte	88
	.word	.L520-.L128,.L353-.L128
	.half	1
	.byte	88
	.word	0,0
.L359:
	.word	-1,.L128,.L134-.L128,.L324-.L128
	.half	1
	.byte	98
	.word	.L134-.L128,.L324-.L128
	.half	2
	.byte	145,0
	.word	.L134-.L128,.L324-.L128
	.half	2
	.byte	145,0
	.word	.L132-.L128,.L329-.L128
	.half	1
	.byte	98
	.word	.L132-.L128,.L329-.L128
	.half	2
	.byte	145,0
	.word	.L132-.L128,.L329-.L128
	.half	2
	.byte	145,0
	.word	.L509-.L128,.L508-.L128
	.half	1
	.byte	98
	.word	.L130-.L128,.L334-.L128
	.half	1
	.byte	98
	.word	.L130-.L128,.L334-.L128
	.half	2
	.byte	145,0
	.word	.L130-.L128,.L334-.L128
	.half	2
	.byte	145,0
	.word	.L10-.L128,.L510-.L128
	.half	1
	.byte	98
	.word	0,.L511-.L128
	.half	2
	.byte	145,0
	.word	0,.L511-.L128
	.half	2
	.byte	145,0
	.word	.L518-.L128,.L519-.L128
	.half	2
	.byte	145,0
	.word	.L518-.L128,.L519-.L128
	.half	2
	.byte	145,0
	.word	.L520-.L128,.L353-.L128
	.half	2
	.byte	145,0
	.word	.L520-.L128,.L353-.L128
	.half	2
	.byte	145,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_add_ext_callback')
	.sect	'.debug_loc'
.L449:
	.word	-1,.L176,0,.L628-.L176
	.half	1
	.byte	100
	.word	.L629-.L176,.L628-.L176
	.half	1
	.byte	108
	.word	.L134-.L176,.L324-.L176
	.half	1
	.byte	108
	.word	.L134-.L176,.L324-.L176
	.half	1
	.byte	100
	.word	.L631-.L176,.L632-.L176
	.half	1
	.byte	100
	.word	.L132-.L176,.L329-.L176
	.half	1
	.byte	108
	.word	.L132-.L176,.L494-.L176
	.half	1
	.byte	100
	.word	.L631-.L176,.L633-.L176
	.half	1
	.byte	108
	.word	.L634-.L176,.L447-.L176
	.half	1
	.byte	108
	.word	0,0
.L451:
	.word	-1,.L176,0,.L628-.L176
	.half	1
	.byte	101
	.word	.L630-.L176,.L628-.L176
	.half	1
	.byte	109
	.word	.L134-.L176,.L324-.L176
	.half	1
	.byte	109
	.word	.L134-.L176,.L324-.L176
	.half	1
	.byte	101
	.word	.L132-.L176,.L329-.L176
	.half	1
	.byte	109
	.word	.L132-.L176,.L329-.L176
	.half	1
	.byte	101
	.word	.L631-.L176,.L633-.L176
	.half	1
	.byte	109
	.word	.L631-.L176,.L108-.L176
	.half	1
	.byte	101
	.word	.L634-.L176,.L447-.L176
	.half	1
	.byte	109
	.word	0,0
.L175:
	.word	-1,.L176,0,.L627-.L176
	.half	2
	.byte	138,0
	.word	.L627-.L176,.L447-.L176
	.half	2
	.byte	138,16
	.word	.L447-.L176,.L447-.L176
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_add_noaddr')
	.sect	'.debug_loc'
.L350:
	.word	-1,.L126,0,.L502-.L126
	.half	1
	.byte	102
	.word	0,0
.L352:
	.word	-1,.L126,0,.L503-.L126
	.half	1
	.byte	103
	.word	0,0
.L346:
	.word	-1,.L126,0,.L345-.L126
	.half	1
	.byte	100
	.word	0,0
.L125:
	.word	-1,.L126,0,.L501-.L126
	.half	2
	.byte	138,0
	.word	.L501-.L126,.L345-.L126
	.half	2
	.byte	138,16
	.word	.L345-.L126,.L345-.L126
	.half	2
	.byte	138,0
	.word	0,0
.L348:
	.word	-1,.L126,0,.L504-.L126
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_do_ip_addr_changed')
	.sect	'.debug_loc'
.L135:
	.word	-1,.L136,0,.L469-.L136
	.half	2
	.byte	138,0
	.word	0,0
.L472:
	.word	-1,.L136,0,.L524-.L136
	.half	1
	.byte	101
	.word	.L526-.L136,.L469-.L136
	.half	1
	.byte	108
	.word	.L528-.L136,.L469-.L136
	.half	1
	.byte	101
	.word	0,0
.L471:
	.word	-1,.L136,0,.L524-.L136
	.half	1
	.byte	100
	.word	.L525-.L136,.L469-.L136
	.half	1
	.byte	111
	.word	.L527-.L136,.L469-.L136
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_do_set_gw')
	.sect	'.debug_loc'
.L486:
	.word	-1,.L146,0,.L557-.L146
	.half	1
	.byte	101
	.word	.L42-.L146,.L484-.L146
	.half	1
	.byte	101
	.word	0,0
.L485:
	.word	-1,.L146,0,.L558-.L146
	.half	1
	.byte	100
	.word	.L42-.L146,.L484-.L146
	.half	1
	.byte	100
	.word	0,0
.L145:
	.word	-1,.L146,0,.L556-.L146
	.half	2
	.byte	138,0
	.word	.L556-.L146,.L42-.L146
	.half	2
	.byte	138,24
	.word	.L42-.L146,.L42-.L146
	.half	2
	.byte	138,0
	.word	.L42-.L146,.L484-.L146
	.half	2
	.byte	138,24
	.word	.L484-.L146,.L484-.L146
	.half	2
	.byte	138,0
	.word	0,0
.L487:
	.word	-1,.L146,0,.L557-.L146
	.half	1
	.byte	102
	.word	.L42-.L146,.L484-.L146
	.half	1
	.byte	102
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_do_set_ipaddr')
	.sect	'.debug_loc'
.L475:
	.word	-1,.L138,0,.L530-.L138
	.half	1
	.byte	101
	.word	.L533-.L138,.L473-.L138
	.half	1
	.byte	108
	.word	.L28-.L138,.L473-.L138
	.half	1
	.byte	101
	.word	0,0
.L474:
	.word	-1,.L138,0,.L531-.L138
	.half	1
	.byte	100
	.word	.L532-.L138,.L473-.L138
	.half	1
	.byte	111
	.word	.L537-.L138,.L538-.L138
	.half	1
	.byte	100
	.word	.L28-.L138,.L473-.L138
	.half	1
	.byte	100
	.word	0,0
.L137:
	.word	-1,.L138,0,.L529-.L138
	.half	2
	.byte	138,0
	.word	.L529-.L138,.L28-.L138
	.half	2
	.byte	138,8
	.word	.L28-.L138,.L28-.L138
	.half	2
	.byte	138,0
	.word	.L28-.L138,.L473-.L138
	.half	2
	.byte	138,8
	.word	.L473-.L138,.L473-.L138
	.half	2
	.byte	138,0
	.word	0,0
.L479:
	.word	-1,.L138,0,.L473-.L138
	.half	2
	.byte	145,120
	.word	0,0
.L477:
	.word	-1,.L138,0,.L530-.L138
	.half	1
	.byte	102
	.word	.L534-.L138,.L473-.L138
	.half	1
	.byte	109
	.word	.L535-.L138,.L536-.L138
	.half	1
	.byte	100
	.word	.L28-.L138,.L473-.L138
	.half	1
	.byte	102
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_do_set_netmask')
	.sect	'.debug_loc'
.L481:
	.word	-1,.L142,0,.L547-.L142
	.half	1
	.byte	100
	.word	.L35-.L142,.L480-.L142
	.half	1
	.byte	100
	.word	0,0
.L141:
	.word	-1,.L142,0,.L546-.L142
	.half	2
	.byte	138,0
	.word	.L546-.L142,.L35-.L142
	.half	2
	.byte	138,24
	.word	.L35-.L142,.L35-.L142
	.half	2
	.byte	138,0
	.word	.L35-.L142,.L480-.L142
	.half	2
	.byte	138,24
	.word	.L480-.L142,.L480-.L142
	.half	2
	.byte	138,0
	.word	0,0
.L482:
	.word	-1,.L142,0,.L548-.L142
	.half	1
	.byte	101
	.word	.L35-.L142,.L480-.L142
	.half	1
	.byte	101
	.word	0,0
.L483:
	.word	-1,.L142,0,.L548-.L142
	.half	1
	.byte	102
	.word	.L35-.L142,.L480-.L142
	.half	1
	.byte	102
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_find')
	.sect	'.debug_loc'
.L389:
	.word	-1,.L174,0,.L624-.L174
	.half	1
	.byte	100
	.word	.L625-.L174,.L387-.L174
	.half	1
	.byte	111
	.word	0,0
.L390:
	.word	-1,.L174,.L626-.L174,.L100-.L174
	.half	1
	.byte	98
	.word	0,0
.L173:
	.word	-1,.L174,0,.L387-.L174
	.half	2
	.byte	138,0
	.word	0,0
.L392:
	.word	-1,.L174,.L626-.L174,.L100-.L174
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_get_by_index')
	.sect	'.debug_loc'
.L445:
	.word	-1,.L172,0,.L444-.L172
	.half	1
	.byte	84
	.word	0,0
.L446:
	.word	-1,.L172,.L623-.L172,.L94-.L172
	.half	1
	.byte	98
	.word	0,0
.L171:
	.word	-1,.L172,0,.L444-.L172
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_index_to_name')
	.sect	'.debug_loc'
.L441:
	.word	-1,.L170,0,.L618-.L170
	.half	1
	.byte	84
	.word	.L619-.L170,.L440-.L170
	.half	1
	.byte	88
	.word	0,0
.L442:
	.word	-1,.L170,0,.L618-.L170
	.half	1
	.byte	100
	.word	.L619-.L170,.L440-.L170
	.half	1
	.byte	111
	.word	.L621-.L170,.L91-.L170
	.half	1
	.byte	98
	.word	0,0
.L443:
	.word	-1,.L170,.L618-.L170,.L620-.L170
	.half	1
	.byte	98
	.word	.L91-.L170,.L622-.L170
	.half	1
	.byte	98
	.word	0,0
.L169:
	.word	-1,.L170,0,.L440-.L170
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_init')
	.sect	'.debug_loc'
.L121:
	.word	-1,.L122,0,.L343-.L122
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_input')
	.sect	'.debug_loc'
.L435:
	.word	-1,.L124,0,.L489-.L124
	.half	1
	.byte	101
	.word	.L491-.L124,.L489-.L124
	.half	1
	.byte	109
	.word	.L134-.L124,.L324-.L124
	.half	1
	.byte	101
	.word	.L134-.L124,.L324-.L124
	.half	1
	.byte	109
	.word	.L132-.L124,.L329-.L124
	.half	1
	.byte	101
	.word	.L132-.L124,.L329-.L124
	.half	1
	.byte	109
	.word	.L492-.L124,.L2-.L124
	.half	1
	.byte	101
	.word	.L492-.L124,.L495-.L124
	.half	1
	.byte	109
	.word	.L496-.L124,.L432-.L124
	.half	1
	.byte	109
	.word	.L498-.L124,.L4-.L124
	.half	1
	.byte	101
	.word	.L500-.L124,.L432-.L124
	.half	1
	.byte	101
	.word	0,0
.L123:
	.word	-1,.L124,0,.L488-.L124
	.half	2
	.byte	138,0
	.word	.L488-.L124,.L4-.L124
	.half	2
	.byte	138,16
	.word	.L4-.L124,.L4-.L124
	.half	2
	.byte	138,0
	.word	.L4-.L124,.L432-.L124
	.half	2
	.byte	138,16
	.word	.L432-.L124,.L432-.L124
	.half	2
	.byte	138,0
	.word	0,0
.L434:
	.word	-1,.L124,0,.L489-.L124
	.half	1
	.byte	100
	.word	.L490-.L124,.L489-.L124
	.half	1
	.byte	108
	.word	.L134-.L124,.L324-.L124
	.half	1
	.byte	108
	.word	.L134-.L124,.L324-.L124
	.half	1
	.byte	100
	.word	.L492-.L124,.L493-.L124
	.half	1
	.byte	100
	.word	.L132-.L124,.L329-.L124
	.half	1
	.byte	108
	.word	.L132-.L124,.L494-.L124
	.half	1
	.byte	100
	.word	.L492-.L124,.L495-.L124
	.half	1
	.byte	108
	.word	.L496-.L124,.L432-.L124
	.half	1
	.byte	108
	.word	.L497-.L124,.L4-.L124
	.half	1
	.byte	100
	.word	.L499-.L124,.L432-.L124
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_invoke_ext_callback')
	.sect	'.debug_loc'
.L460:
	.word	-1,.L180,0,.L644-.L180
	.half	1
	.byte	101
	.word	.L646-.L180,.L644-.L180
	.half	1
	.byte	109
	.word	.L134-.L180,.L324-.L180
	.half	1
	.byte	101
	.word	.L134-.L180,.L324-.L180
	.half	1
	.byte	109
	.word	.L132-.L180,.L329-.L180
	.half	1
	.byte	101
	.word	.L132-.L180,.L329-.L180
	.half	1
	.byte	109
	.word	.L648-.L180,.L650-.L180
	.half	1
	.byte	101
	.word	.L648-.L180,.L456-.L180
	.half	1
	.byte	109
	.word	.L653-.L180,.L652-.L180
	.half	1
	.byte	101
	.word	0,0
.L461:
	.word	-1,.L180,.L647-.L180,.L644-.L180
	.half	1
	.byte	110
	.word	.L134-.L180,.L324-.L180
	.half	1
	.byte	110
	.word	.L132-.L180,.L329-.L180
	.half	1
	.byte	110
	.word	.L648-.L180,.L456-.L180
	.half	1
	.byte	110
	.word	0,0
.L457:
	.word	-1,.L180,0,.L644-.L180
	.half	1
	.byte	100
	.word	.L645-.L180,.L644-.L180
	.half	1
	.byte	108
	.word	.L134-.L180,.L324-.L180
	.half	1
	.byte	108
	.word	.L134-.L180,.L324-.L180
	.half	1
	.byte	100
	.word	.L648-.L180,.L649-.L180
	.half	1
	.byte	100
	.word	.L132-.L180,.L329-.L180
	.half	1
	.byte	108
	.word	.L132-.L180,.L494-.L180
	.half	1
	.byte	100
	.word	.L648-.L180,.L456-.L180
	.half	1
	.byte	108
	.word	.L651-.L180,.L652-.L180
	.half	1
	.byte	100
	.word	0,0
.L179:
	.word	-1,.L180,0,.L643-.L180
	.half	2
	.byte	138,0
	.word	.L643-.L180,.L456-.L180
	.half	2
	.byte	138,16
	.word	.L456-.L180,.L456-.L180
	.half	2
	.byte	138,0
	.word	0,0
.L458:
	.word	-1,.L180,0,.L644-.L180
	.half	1
	.byte	84
	.word	.L646-.L180,.L644-.L180
	.half	1
	.byte	88
	.word	.L134-.L180,.L324-.L180
	.half	1
	.byte	88
	.word	.L134-.L180,.L324-.L180
	.half	1
	.byte	84
	.word	.L132-.L180,.L329-.L180
	.half	1
	.byte	88
	.word	.L132-.L180,.L329-.L180
	.half	1
	.byte	84
	.word	.L648-.L180,.L456-.L180
	.half	1
	.byte	88
	.word	.L648-.L180,.L650-.L180
	.half	1
	.byte	84
	.word	.L653-.L180,.L652-.L180
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_issue_reports')
	.sect	'.debug_loc'
.L463:
	.word	-1,.L158,0,.L462-.L158
	.half	1
	.byte	100
	.word	0,0
.L157:
	.word	-1,.L158,0,.L462-.L158
	.half	2
	.byte	138,0
	.word	0,0
.L464:
	.word	-1,.L158,0,.L462-.L158
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_name_to_index')
	.sect	'.debug_loc'
.L437:
	.word	-1,.L168,0,.L617-.L168
	.half	1
	.byte	100
	.word	0,0
.L438:
	.word	-1,.L168,.L617-.L168,.L436-.L168
	.half	1
	.byte	98
	.word	0,0
.L167:
	.word	-1,.L168,0,.L436-.L168
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_null_output_ip4')
	.sect	'.debug_loc'
.L468:
	.word	-1,.L166,0,.L465-.L166
	.half	1
	.byte	102
	.word	0,0
.L466:
	.word	-1,.L166,0,.L465-.L166
	.half	1
	.byte	100
	.word	0,0
.L165:
	.word	-1,.L166,0,.L465-.L166
	.half	2
	.byte	138,0
	.word	0,0
.L467:
	.word	-1,.L166,0,.L465-.L166
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_remove')
	.sect	'.debug_loc'
.L382:
	.word	-1,.L152,0,.L586-.L152
	.half	1
	.byte	100
	.word	.L587-.L152,.L588-.L152
	.half	1
	.byte	111
	.word	.L589-.L152,.L61-.L152
	.half	1
	.byte	100
	.word	.L66-.L152,.L591-.L152
	.half	1
	.byte	111
	.word	.L67-.L152,.L381-.L152
	.half	1
	.byte	111
	.word	0,0
.L151:
	.word	-1,.L152,0,.L381-.L152
	.half	2
	.byte	138,0
	.word	0,0
.L386:
	.word	-1,.L152,.L590-.L152,.L59-.L152
	.half	1
	.byte	98
	.word	.L66-.L152,.L381-.L152
	.half	1
	.byte	98
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_remove_ext_callback')
	.sect	'.debug_loc'
.L453:
	.word	-1,.L178,0,.L636-.L178
	.half	1
	.byte	100
	.word	.L637-.L178,.L636-.L178
	.half	1
	.byte	108
	.word	.L134-.L178,.L324-.L178
	.half	1
	.byte	108
	.word	.L134-.L178,.L324-.L178
	.half	1
	.byte	100
	.word	.L638-.L178,.L639-.L178
	.half	1
	.byte	100
	.word	.L132-.L178,.L329-.L178
	.half	1
	.byte	108
	.word	.L132-.L178,.L494-.L178
	.half	1
	.byte	100
	.word	.L638-.L178,.L452-.L178
	.half	1
	.byte	108
	.word	0,0
.L455:
	.word	-1,.L178,.L641-.L178,.L111-.L178
	.half	1
	.byte	98
	.word	.L115-.L178,.L642-.L178
	.half	1
	.byte	98
	.word	.L116-.L178,.L452-.L178
	.half	1
	.byte	98
	.word	0,0
.L454:
	.word	-1,.L178,.L640-.L178,.L452-.L178
	.half	1
	.byte	111
	.word	0,0
.L177:
	.word	-1,.L178,0,.L635-.L178
	.half	2
	.byte	138,0
	.word	.L635-.L178,.L115-.L178
	.half	2
	.byte	138,16
	.word	.L115-.L178,.L115-.L178
	.half	2
	.byte	138,0
	.word	.L115-.L178,.L116-.L178
	.half	2
	.byte	138,16
	.word	.L116-.L178,.L116-.L178
	.half	2
	.byte	138,0
	.word	.L116-.L178,.L452-.L178
	.half	2
	.byte	138,16
	.word	.L452-.L178,.L452-.L178
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_set_addr')
	.sect	'.debug_loc'
.L376:
	.word	-1,.L150,0,.L368-.L150
	.half	2
	.byte	145,104
	.word	0,0
.L374:
	.word	-1,.L150,.L573-.L150,.L574-.L150
	.half	1
	.byte	95
	.word	.L574-.L150,.L58-.L150
	.half	1
	.byte	84
	.word	.L58-.L150,.L368-.L150
	.half	1
	.byte	95
	.word	0,0
.L372:
	.word	-1,.L150,0,.L51-.L150
	.half	1
	.byte	103
	.word	.L572-.L150,.L368-.L150
	.half	1
	.byte	110
	.word	.L581-.L150,.L580-.L150
	.half	1
	.byte	101
	.word	0,0
.L370:
	.word	-1,.L150,0,.L49-.L150
	.half	1
	.byte	101
	.word	.L569-.L150,.L368-.L150
	.half	1
	.byte	109
	.word	.L575-.L150,.L567-.L150
	.half	1
	.byte	101
	.word	.L584-.L150,.L583-.L150
	.half	1
	.byte	101
	.word	0,0
.L369:
	.word	-1,.L150,0,.L567-.L150
	.half	1
	.byte	100
	.word	.L568-.L150,.L368-.L150
	.half	1
	.byte	108
	.word	.L576-.L150,.L577-.L150
	.half	1
	.byte	100
	.word	.L579-.L150,.L580-.L150
	.half	1
	.byte	100
	.word	.L582-.L150,.L583-.L150
	.half	1
	.byte	100
	.word	.L585-.L150,.L58-.L150
	.half	1
	.byte	100
	.word	0,0
.L149:
	.word	-1,.L150,0,.L566-.L150
	.half	2
	.byte	138,0
	.word	.L566-.L150,.L58-.L150
	.half	2
	.byte	138,24
	.word	.L58-.L150,.L58-.L150
	.half	2
	.byte	138,0
	.word	.L58-.L150,.L368-.L150
	.half	2
	.byte	138,24
	.word	.L368-.L150,.L368-.L150
	.half	2
	.byte	138,0
	.word	0,0
.L371:
	.word	-1,.L150,0,.L50-.L150
	.half	1
	.byte	102
	.word	.L570-.L150,.L571-.L150
	.half	1
	.byte	111
	.word	.L578-.L150,.L577-.L150
	.half	1
	.byte	101
	.word	0,0
.L380:
	.word	-1,.L150,0,.L368-.L150
	.half	2
	.byte	145,124
	.word	0,0
.L379:
	.word	-1,.L150,0,.L368-.L150
	.half	2
	.byte	145,120
	.word	0,0
.L378:
	.word	-1,.L150,0,.L368-.L150
	.half	2
	.byte	145,116
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_set_default')
	.sect	'.debug_loc'
.L394:
	.word	-1,.L154,0,.L393-.L154
	.half	1
	.byte	100
	.word	0,0
.L153:
	.word	-1,.L154,0,.L393-.L154
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_set_down')
	.sect	'.debug_loc'
.L422:
	.word	-1,.L160,0,.L600-.L160
	.half	2
	.byte	145,116
	.word	.L134-.L160,.L324-.L160
	.half	2
	.byte	145,116
	.word	.L132-.L160,.L329-.L160
	.half	2
	.byte	145,116
	.word	.L603-.L160,.L418-.L160
	.half	2
	.byte	145,116
	.word	0,0
.L419:
	.word	-1,.L160,0,.L600-.L160
	.half	1
	.byte	100
	.word	.L601-.L160,.L602-.L160
	.half	1
	.byte	111
	.word	.L134-.L160,.L324-.L160
	.half	1
	.byte	100
	.word	.L603-.L160,.L604-.L160
	.half	1
	.byte	100
	.word	.L132-.L160,.L494-.L160
	.half	1
	.byte	100
	.word	.L77-.L160,.L418-.L160
	.half	1
	.byte	111
	.word	.L77-.L160,.L421-.L160
	.half	1
	.byte	100
	.word	.L605-.L160,.L79-.L160
	.half	1
	.byte	100
	.word	0,0
.L159:
	.word	-1,.L160,0,.L599-.L160
	.half	2
	.byte	138,0
	.word	.L599-.L160,.L77-.L160
	.half	2
	.byte	138,24
	.word	.L77-.L160,.L77-.L160
	.half	2
	.byte	138,0
	.word	.L77-.L160,.L80-.L160
	.half	2
	.byte	138,24
	.word	.L80-.L160,.L80-.L160
	.half	2
	.byte	138,0
	.word	.L80-.L160,.L418-.L160
	.half	2
	.byte	138,24
	.word	.L418-.L160,.L418-.L160
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_set_gw')
	.sect	'.debug_loc'
.L412:
	.word	-1,.L148,0,.L560-.L148
	.half	2
	.byte	145,112
	.word	.L134-.L148,.L324-.L148
	.half	2
	.byte	145,112
	.word	.L132-.L148,.L329-.L148
	.half	2
	.byte	145,112
	.word	.L130-.L148,.L334-.L148
	.half	2
	.byte	145,112
	.word	.L562-.L148,.L407-.L148
	.half	2
	.byte	145,112
	.word	0,0
.L409:
	.word	-1,.L148,0,.L560-.L148
	.half	1
	.byte	101
	.word	.L134-.L148,.L324-.L148
	.half	1
	.byte	101
	.word	.L132-.L148,.L329-.L148
	.half	1
	.byte	101
	.word	.L130-.L148,.L334-.L148
	.half	1
	.byte	101
	.word	.L562-.L148,.L564-.L148
	.half	1
	.byte	101
	.word	0,0
.L408:
	.word	-1,.L148,0,.L560-.L148
	.half	1
	.byte	100
	.word	.L561-.L148,.L560-.L148
	.half	1
	.byte	108
	.word	.L134-.L148,.L324-.L148
	.half	1
	.byte	108
	.word	.L134-.L148,.L324-.L148
	.half	1
	.byte	100
	.word	.L562-.L148,.L563-.L148
	.half	1
	.byte	100
	.word	.L132-.L148,.L329-.L148
	.half	1
	.byte	108
	.word	.L132-.L148,.L494-.L148
	.half	1
	.byte	100
	.word	.L130-.L148,.L334-.L148
	.half	1
	.byte	108
	.word	.L130-.L148,.L334-.L148
	.half	1
	.byte	100
	.word	.L562-.L148,.L407-.L148
	.half	1
	.byte	108
	.word	.L45-.L148,.L564-.L148
	.half	1
	.byte	100
	.word	.L565-.L148,.L48-.L148
	.half	1
	.byte	100
	.word	0,0
.L147:
	.word	-1,.L148,0,.L559-.L148
	.half	2
	.byte	138,0
	.word	.L559-.L148,.L45-.L148
	.half	2
	.byte	138,32
	.word	.L45-.L148,.L45-.L148
	.half	2
	.byte	138,0
	.word	.L45-.L148,.L48-.L148
	.half	2
	.byte	138,32
	.word	.L48-.L148,.L48-.L148
	.half	2
	.byte	138,0
	.word	.L48-.L148,.L407-.L148
	.half	2
	.byte	138,32
	.word	.L407-.L148,.L407-.L148
	.half	2
	.byte	138,0
	.word	0,0
.L410:
	.word	-1,.L148,0,.L560-.L148
	.half	2
	.byte	145,108
	.word	.L134-.L148,.L324-.L148
	.half	2
	.byte	145,108
	.word	.L132-.L148,.L329-.L148
	.half	2
	.byte	145,108
	.word	.L130-.L148,.L334-.L148
	.half	2
	.byte	145,108
	.word	.L562-.L148,.L407-.L148
	.half	2
	.byte	145,108
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_set_ipaddr')
	.sect	'.debug_loc'
.L400:
	.word	-1,.L140,0,.L540-.L140
	.half	2
	.byte	145,112
	.word	.L134-.L140,.L324-.L140
	.half	2
	.byte	145,112
	.word	.L132-.L140,.L329-.L140
	.half	2
	.byte	145,112
	.word	.L130-.L140,.L334-.L140
	.half	2
	.byte	145,112
	.word	.L542-.L140,.L395-.L140
	.half	2
	.byte	145,112
	.word	0,0
.L397:
	.word	-1,.L140,0,.L540-.L140
	.half	1
	.byte	101
	.word	.L134-.L140,.L324-.L140
	.half	1
	.byte	101
	.word	.L132-.L140,.L329-.L140
	.half	1
	.byte	101
	.word	.L130-.L140,.L334-.L140
	.half	1
	.byte	101
	.word	.L542-.L140,.L544-.L140
	.half	1
	.byte	101
	.word	0,0
.L396:
	.word	-1,.L140,0,.L540-.L140
	.half	1
	.byte	100
	.word	.L541-.L140,.L540-.L140
	.half	1
	.byte	108
	.word	.L134-.L140,.L324-.L140
	.half	1
	.byte	108
	.word	.L134-.L140,.L324-.L140
	.half	1
	.byte	100
	.word	.L542-.L140,.L543-.L140
	.half	1
	.byte	100
	.word	.L132-.L140,.L329-.L140
	.half	1
	.byte	108
	.word	.L132-.L140,.L494-.L140
	.half	1
	.byte	100
	.word	.L130-.L140,.L334-.L140
	.half	1
	.byte	108
	.word	.L130-.L140,.L334-.L140
	.half	1
	.byte	100
	.word	.L542-.L140,.L395-.L140
	.half	1
	.byte	108
	.word	.L31-.L140,.L544-.L140
	.half	1
	.byte	100
	.word	.L545-.L140,.L34-.L140
	.half	1
	.byte	100
	.word	0,0
.L139:
	.word	-1,.L140,0,.L539-.L140
	.half	2
	.byte	138,0
	.word	.L539-.L140,.L31-.L140
	.half	2
	.byte	138,32
	.word	.L31-.L140,.L31-.L140
	.half	2
	.byte	138,0
	.word	.L31-.L140,.L34-.L140
	.half	2
	.byte	138,32
	.word	.L34-.L140,.L34-.L140
	.half	2
	.byte	138,0
	.word	.L34-.L140,.L395-.L140
	.half	2
	.byte	138,32
	.word	.L395-.L140,.L395-.L140
	.half	2
	.byte	138,0
	.word	0,0
.L398:
	.word	-1,.L140,0,.L540-.L140
	.half	2
	.byte	145,108
	.word	.L134-.L140,.L324-.L140
	.half	2
	.byte	145,108
	.word	.L132-.L140,.L329-.L140
	.half	2
	.byte	145,108
	.word	.L130-.L140,.L334-.L140
	.half	2
	.byte	145,108
	.word	.L542-.L140,.L395-.L140
	.half	2
	.byte	145,108
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_set_link_down')
	.sect	'.debug_loc'
.L430:
	.word	-1,.L164,0,.L614-.L164
	.half	2
	.byte	145,116
	.word	.L134-.L164,.L324-.L164
	.half	2
	.byte	145,116
	.word	.L132-.L164,.L329-.L164
	.half	2
	.byte	145,116
	.word	.L615-.L164,.L427-.L164
	.half	2
	.byte	145,116
	.word	0,0
.L428:
	.word	-1,.L164,0,.L614-.L164
	.half	1
	.byte	100
	.word	.L134-.L164,.L324-.L164
	.half	1
	.byte	100
	.word	.L615-.L164,.L616-.L164
	.half	1
	.byte	100
	.word	.L132-.L164,.L494-.L164
	.half	1
	.byte	100
	.word	.L84-.L164,.L427-.L164
	.half	1
	.byte	100
	.word	0,0
.L163:
	.word	-1,.L164,0,.L613-.L164
	.half	2
	.byte	138,0
	.word	.L613-.L164,.L84-.L164
	.half	2
	.byte	138,24
	.word	.L84-.L164,.L84-.L164
	.half	2
	.byte	138,0
	.word	.L84-.L164,.L86-.L164
	.half	2
	.byte	138,24
	.word	.L86-.L164,.L86-.L164
	.half	2
	.byte	138,0
	.word	.L86-.L164,.L427-.L164
	.half	2
	.byte	138,24
	.word	.L427-.L164,.L427-.L164
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_set_link_up')
	.sect	'.debug_loc'
.L426:
	.word	-1,.L162,0,.L607-.L162
	.half	2
	.byte	145,116
	.word	.L134-.L162,.L324-.L162
	.half	2
	.byte	145,116
	.word	.L132-.L162,.L329-.L162
	.half	2
	.byte	145,116
	.word	.L610-.L162,.L423-.L162
	.half	2
	.byte	145,116
	.word	0,0
.L424:
	.word	-1,.L162,0,.L607-.L162
	.half	1
	.byte	100
	.word	.L608-.L162,.L609-.L162
	.half	1
	.byte	111
	.word	.L134-.L162,.L324-.L162
	.half	1
	.byte	100
	.word	.L610-.L162,.L611-.L162
	.half	1
	.byte	100
	.word	.L132-.L162,.L494-.L162
	.half	1
	.byte	100
	.word	.L81-.L162,.L423-.L162
	.half	1
	.byte	111
	.word	.L81-.L162,.L425-.L162
	.half	1
	.byte	100
	.word	.L612-.L162,.L423-.L162
	.half	1
	.byte	100
	.word	0,0
.L161:
	.word	-1,.L162,0,.L606-.L162
	.half	2
	.byte	138,0
	.word	.L606-.L162,.L81-.L162
	.half	2
	.byte	138,24
	.word	.L81-.L162,.L81-.L162
	.half	2
	.byte	138,0
	.word	.L81-.L162,.L83-.L162
	.half	2
	.byte	138,24
	.word	.L83-.L162,.L83-.L162
	.half	2
	.byte	138,0
	.word	.L83-.L162,.L423-.L162
	.half	2
	.byte	138,24
	.word	.L423-.L162,.L423-.L162
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_set_netmask')
	.sect	'.debug_loc'
.L406:
	.word	-1,.L144,0,.L550-.L144
	.half	2
	.byte	145,112
	.word	.L134-.L144,.L324-.L144
	.half	2
	.byte	145,112
	.word	.L132-.L144,.L329-.L144
	.half	2
	.byte	145,112
	.word	.L130-.L144,.L334-.L144
	.half	2
	.byte	145,112
	.word	.L552-.L144,.L401-.L144
	.half	2
	.byte	145,112
	.word	0,0
.L402:
	.word	-1,.L144,0,.L550-.L144
	.half	1
	.byte	100
	.word	.L551-.L144,.L550-.L144
	.half	1
	.byte	108
	.word	.L134-.L144,.L324-.L144
	.half	1
	.byte	108
	.word	.L134-.L144,.L324-.L144
	.half	1
	.byte	100
	.word	.L552-.L144,.L553-.L144
	.half	1
	.byte	100
	.word	.L132-.L144,.L329-.L144
	.half	1
	.byte	108
	.word	.L132-.L144,.L494-.L144
	.half	1
	.byte	100
	.word	.L130-.L144,.L334-.L144
	.half	1
	.byte	108
	.word	.L130-.L144,.L334-.L144
	.half	1
	.byte	100
	.word	.L552-.L144,.L401-.L144
	.half	1
	.byte	108
	.word	.L38-.L144,.L554-.L144
	.half	1
	.byte	100
	.word	.L555-.L144,.L41-.L144
	.half	1
	.byte	100
	.word	0,0
.L143:
	.word	-1,.L144,0,.L549-.L144
	.half	2
	.byte	138,0
	.word	.L549-.L144,.L38-.L144
	.half	2
	.byte	138,32
	.word	.L38-.L144,.L38-.L144
	.half	2
	.byte	138,0
	.word	.L38-.L144,.L41-.L144
	.half	2
	.byte	138,32
	.word	.L41-.L144,.L41-.L144
	.half	2
	.byte	138,0
	.word	.L41-.L144,.L401-.L144
	.half	2
	.byte	138,32
	.word	.L401-.L144,.L401-.L144
	.half	2
	.byte	138,0
	.word	0,0
.L403:
	.word	-1,.L144,0,.L550-.L144
	.half	1
	.byte	101
	.word	.L134-.L144,.L324-.L144
	.half	1
	.byte	101
	.word	.L132-.L144,.L329-.L144
	.half	1
	.byte	101
	.word	.L130-.L144,.L334-.L144
	.half	1
	.byte	101
	.word	.L552-.L144,.L554-.L144
	.half	1
	.byte	101
	.word	0,0
.L404:
	.word	-1,.L144,0,.L550-.L144
	.half	2
	.byte	145,108
	.word	.L134-.L144,.L324-.L144
	.half	2
	.byte	145,108
	.word	.L132-.L144,.L329-.L144
	.half	2
	.byte	145,108
	.word	.L130-.L144,.L334-.L144
	.half	2
	.byte	145,108
	.word	.L552-.L144,.L401-.L144
	.half	2
	.byte	145,108
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('netif_set_up')
	.sect	'.debug_loc'
.L417:
	.word	-1,.L156,0,.L593-.L156
	.half	2
	.byte	145,116
	.word	.L134-.L156,.L324-.L156
	.half	2
	.byte	145,116
	.word	.L132-.L156,.L329-.L156
	.half	2
	.byte	145,116
	.word	.L596-.L156,.L413-.L156
	.half	2
	.byte	145,116
	.word	0,0
.L414:
	.word	-1,.L156,0,.L593-.L156
	.half	1
	.byte	100
	.word	.L594-.L156,.L595-.L156
	.half	1
	.byte	111
	.word	.L134-.L156,.L324-.L156
	.half	1
	.byte	100
	.word	.L596-.L156,.L597-.L156
	.half	1
	.byte	100
	.word	.L132-.L156,.L494-.L156
	.half	1
	.byte	100
	.word	.L69-.L156,.L413-.L156
	.half	1
	.byte	111
	.word	.L69-.L156,.L416-.L156
	.half	1
	.byte	100
	.word	.L598-.L156,.L413-.L156
	.half	1
	.byte	100
	.word	0,0
.L155:
	.word	-1,.L156,0,.L592-.L156
	.half	2
	.byte	138,0
	.word	.L592-.L156,.L69-.L156
	.half	2
	.byte	138,24
	.word	.L69-.L156,.L69-.L156
	.half	2
	.byte	138,0
	.word	.L69-.L156,.L71-.L156
	.half	2
	.byte	138,24
	.word	.L71-.L156,.L71-.L156
	.half	2
	.byte	138,0
	.word	.L71-.L156,.L413-.L156
	.half	2
	.byte	138,24
	.word	.L413-.L156,.L413-.L156
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L938:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('netif_init')
	.sect	'.debug_frame'
	.word	24
	.word	.L938,.L122,.L343-.L122
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('netif_input')
	.sect	'.debug_frame'
	.word	52
	.word	.L938,.L124,.L432-.L124
	.byte	4
	.word	(.L488-.L124)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L4-.L488)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L432-.L4)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('netif_add_noaddr')
	.sect	'.debug_frame'
	.word	36
	.word	.L938,.L126,.L345-.L126
	.byte	4
	.word	(.L501-.L126)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L345-.L501)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('netif_add')
	.sect	'.debug_frame'
	.word	52
	.word	.L938,.L128,.L353-.L128
	.byte	4
	.word	(.L505-.L128)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L15-.L505)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L353-.L15)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('netif_do_ip_addr_changed')
	.sect	'.debug_frame'
	.word	12
	.word	.L938,.L136,.L469-.L136
	.sdecl	'.debug_frame',debug,cluster('netif_do_set_ipaddr')
	.sect	'.debug_frame'
	.word	52
	.word	.L938,.L138,.L473-.L138
	.byte	4
	.word	(.L529-.L138)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L28-.L529)/2
	.byte	19,0,8,26,19,8,22,26,3,19,138,8,4
	.word	(.L473-.L28)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('netif_set_ipaddr')
	.sect	'.debug_frame'
	.word	68
	.word	.L938,.L140,.L395-.L140
	.byte	4
	.word	(.L539-.L140)/2
	.byte	19,32,22,26,3,19,138,32,4
	.word	(.L31-.L539)/2
	.byte	19,0,8,26,19,32,22,26,3,19,138,32,4
	.word	(.L34-.L31)/2
	.byte	19,0,8,26,19,32,22,26,3,19,138,32,4
	.word	(.L395-.L34)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('netif_do_set_netmask')
	.sect	'.debug_frame'
	.word	52
	.word	.L938,.L142,.L480-.L142
	.byte	4
	.word	(.L546-.L142)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L35-.L546)/2
	.byte	19,0,8,26,19,24,22,26,3,19,138,24,4
	.word	(.L480-.L35)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('netif_set_netmask')
	.sect	'.debug_frame'
	.word	68
	.word	.L938,.L144,.L401-.L144
	.byte	4
	.word	(.L549-.L144)/2
	.byte	19,32,22,26,3,19,138,32,4
	.word	(.L38-.L549)/2
	.byte	19,0,8,26,19,32,22,26,3,19,138,32,4
	.word	(.L41-.L38)/2
	.byte	19,0,8,26,19,32,22,26,3,19,138,32,4
	.word	(.L401-.L41)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('netif_do_set_gw')
	.sect	'.debug_frame'
	.word	52
	.word	.L938,.L146,.L484-.L146
	.byte	4
	.word	(.L556-.L146)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L42-.L556)/2
	.byte	19,0,8,26,19,24,22,26,3,19,138,24,4
	.word	(.L484-.L42)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('netif_set_gw')
	.sect	'.debug_frame'
	.word	68
	.word	.L938,.L148,.L407-.L148
	.byte	4
	.word	(.L559-.L148)/2
	.byte	19,32,22,26,3,19,138,32,4
	.word	(.L45-.L559)/2
	.byte	19,0,8,26,19,32,22,26,3,19,138,32,4
	.word	(.L48-.L45)/2
	.byte	19,0,8,26,19,32,22,26,3,19,138,32,4
	.word	(.L407-.L48)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('netif_set_addr')
	.sect	'.debug_frame'
	.word	52
	.word	.L938,.L150,.L368-.L150
	.byte	4
	.word	(.L566-.L150)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L58-.L566)/2
	.byte	19,0,8,26,19,24,22,26,3,19,138,24,4
	.word	(.L368-.L58)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('netif_remove')
	.sect	'.debug_frame'
	.word	12
	.word	.L938,.L152,.L381-.L152
	.sdecl	'.debug_frame',debug,cluster('netif_set_default')
	.sect	'.debug_frame'
	.word	24
	.word	.L938,.L154,.L393-.L154
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('netif_set_up')
	.sect	'.debug_frame'
	.word	68
	.word	.L938,.L156,.L413-.L156
	.byte	4
	.word	(.L592-.L156)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L69-.L592)/2
	.byte	19,0,8,26,19,24,22,26,3,19,138,24,4
	.word	(.L71-.L69)/2
	.byte	19,0,8,26,19,24,22,26,3,19,138,24,4
	.word	(.L413-.L71)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('netif_issue_reports')
	.sect	'.debug_frame'
	.word	12
	.word	.L938,.L158,.L462-.L158
	.sdecl	'.debug_frame',debug,cluster('netif_set_down')
	.sect	'.debug_frame'
	.word	68
	.word	.L938,.L160,.L418-.L160
	.byte	4
	.word	(.L599-.L160)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L77-.L599)/2
	.byte	19,0,8,26,19,24,22,26,3,19,138,24,4
	.word	(.L80-.L77)/2
	.byte	19,0,8,26,19,24,22,26,3,19,138,24,4
	.word	(.L418-.L80)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('netif_set_link_up')
	.sect	'.debug_frame'
	.word	68
	.word	.L938,.L162,.L423-.L162
	.byte	4
	.word	(.L606-.L162)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L81-.L606)/2
	.byte	19,0,8,26,19,24,22,26,3,19,138,24,4
	.word	(.L83-.L81)/2
	.byte	19,0,8,26,19,24,22,26,3,19,138,24,4
	.word	(.L423-.L83)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('netif_set_link_down')
	.sect	'.debug_frame'
	.word	68
	.word	.L938,.L164,.L427-.L164
	.byte	4
	.word	(.L613-.L164)/2
	.byte	19,24,22,26,3,19,138,24,4
	.word	(.L84-.L613)/2
	.byte	19,0,8,26,19,24,22,26,3,19,138,24,4
	.word	(.L86-.L84)/2
	.byte	19,0,8,26,19,24,22,26,3,19,138,24,4
	.word	(.L427-.L86)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('netif_null_output_ip4')
	.sect	'.debug_frame'
	.word	24
	.word	.L938,.L166,.L465-.L166
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('netif_name_to_index')
	.sect	'.debug_frame'
	.word	12
	.word	.L938,.L168,.L436-.L168
	.sdecl	'.debug_frame',debug,cluster('netif_index_to_name')
	.sect	'.debug_frame'
	.word	12
	.word	.L938,.L170,.L440-.L170
	.sdecl	'.debug_frame',debug,cluster('netif_get_by_index')
	.sect	'.debug_frame'
	.word	24
	.word	.L938,.L172,.L444-.L172
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('netif_find')
	.sect	'.debug_frame'
	.word	12
	.word	.L938,.L174,.L387-.L174
	.sdecl	'.debug_frame',debug,cluster('netif_add_ext_callback')
	.sect	'.debug_frame'
	.word	36
	.word	.L938,.L176,.L447-.L176
	.byte	4
	.word	(.L627-.L176)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L447-.L627)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('netif_remove_ext_callback')
	.sect	'.debug_frame'
	.word	68
	.word	.L938,.L178,.L452-.L178
	.byte	4
	.word	(.L635-.L178)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L115-.L635)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L116-.L115)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L452-.L116)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('netif_invoke_ext_callback')
	.sect	'.debug_frame'
	.word	36
	.word	.L938,.L180,.L456-.L180
	.byte	4
	.word	(.L643-.L180)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L456-.L643)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L939:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_37')
	.sect	'.debug_frame'
	.word	24
	.word	.L939,.L130,.L334-.L130
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_36')
	.sect	'.debug_frame'
	.word	24
	.word	.L939,.L132,.L329-.L132
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_35')
	.sect	'.debug_frame'
	.word	24
	.word	.L939,.L134,.L324-.L134
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\0_Src\0_AppSw\Ethernet\lwip\src\core\netif.c	  1795  #endif /* LWIP_NETIF_EXT_STATUS_CALLBACK */

	; Module end
