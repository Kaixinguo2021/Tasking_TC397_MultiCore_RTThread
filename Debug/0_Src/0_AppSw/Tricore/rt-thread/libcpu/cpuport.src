	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\.cpuport.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include\\libc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.src ..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c'

	
$TC162
	.sdecl	'.zrodata.IfxSrc..2.cnt',data,rom
	.sect	'.zrodata.IfxSrc..2.cnt'
	.align	2
.2.cnt:	.type	object
	.size	.2.cnt,4
	.word	-268203599
	.sdecl	'.zrodata.IfxSrc..3.cnt',data,rom
	.sect	'.zrodata.IfxSrc..3.cnt'
	.align	2
.3.cnt:	.type	object
	.size	.3.cnt,4
	.word	-268203597
	
	.sdecl	'.text.cpuport.rt_hw_systick_init',code,cluster('rt_hw_systick_init')
	.sect	'.text.cpuport.rt_hw_systick_init'
	.align	2
	
	.global	rt_hw_systick_init

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	     1  /*
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	     2   * Copyright (c) 2006-2018, RT-Thread Development Team
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	     3   *rt_interrupt_from_thread_core0
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	     4   * SPDX-License-Identifier: GPL-2.0 License
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	     5   *
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	     6   * Change Logs:
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	     7   * Date           Author       Notes
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	     8   * 2021/02/01     BalanceTWK   The unify TriCore porting code.
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	     9   */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    10  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    11  #include <rthw.h>
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    12  #include <rtthread.h>
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    13  #include "cpuport.h"
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    14  #include "IfxCpu_Trap.h"
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    15  #include "UART_Logging.h"
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    16  #include "IfxSrc_cfg.h"
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    17  #include "rtdef.h"
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    18  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    19  static IfxStm_Timer tricore_timers[2];
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    20  static volatile Ifx_STM *const STMs[2] = {&MODULE_STM0, &MODULE_STM1};
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    21  static volatile Ifx_SRC_SRCR *const GPSR[2] = {&SRC_GPSR_GPSR0_SR0, &SRC_GPSR_GPSR1_SR0};
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    22  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    23  static volatile rt_ubase_t rt_interrupt_from_thread_core0 = RT_NULL;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    24  static volatile rt_ubase_t rt_interrupt_to_thread_core0 = RT_NULL;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    25  static volatile rt_ubase_t rt_interrupt_from_thread_core1 = RT_NULL;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    26  static volatile rt_ubase_t rt_interrupt_to_thread_core1 = RT_NULL;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    27  static volatile rt_ubase_t rt_thread_switch_interrupt_flag_core0 = RT_NULL;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    28  static volatile rt_ubase_t rt_thread_switch_interrupt_flag_core1 = RT_NULL;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    29  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    30  typedef struct UpperCtxInfo{
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    31      unsigned long  _PCXI;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    32      unsigned long  _PSW;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    33      unsigned long*  _A10;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    34      unsigned long*  _A11;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    35      unsigned long  _D8;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    36      unsigned long  _D9;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    37      unsigned long  _D10;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    38      unsigned long  _D11;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    39      unsigned long*  _A12;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    40      unsigned long*  _A13;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    41      unsigned long*  _A14;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    42      unsigned long*  _A15;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    43      unsigned long  _D12;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    44      unsigned long  _D13;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    45      unsigned long  _D14;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    46      unsigned long  _D15;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    47  }UpperCtx_T,*UpperCtx_Ptr;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    48  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    49  typedef struct LowCtxInfo{
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    50      unsigned long  _PCXI;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    51      unsigned long*  _PC;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    52      unsigned long*  _A2;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    53      unsigned long*  _A3;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    54      unsigned long  _D0;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    55      unsigned long  _D1;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    56      unsigned long  _D2;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    57      unsigned long  _D3;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    58      unsigned long*  _A4;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    59      unsigned long*  _A5;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    60      unsigned long*  _A6;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    61      unsigned long*  _A7;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    62      unsigned long  _D4;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    63      unsigned long  _D5;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    64      unsigned long  _D6;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    65      unsigned long  _D7;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    66  }LowCtx_T,*LowCtx_Ptr;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    67  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    68  App_Cpu g_AppCpu0; //频率信息变量
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    69  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    70  void rt_hw_systick_init( void )
; Function rt_hw_systick_init
.L40:
rt_hw_systick_init:	.type	func
	sub.a	a10,#48
.L469:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    71  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    72    IfxStm_Timer_Config timer_config;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    73    IfxStm_Timer_initConfig(&timer_config, STMs[TRICORE_CPU_ID]);
	mfcr	d15,#65052
.L706:
	and	d15,#15
	lea	a15,STMs
.L707:
	addsc.a	a15,a15,d15,#2
	ld.a	a5,[a15]
.L708:
	mov.aa	a4,a10
.L709:
	call	IfxStm_Timer_initConfig
.L710:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    74  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    75    timer_config.base.frequency = RT_TICK_PER_SECOND;
	movh	d15,#17530
	st.w	[a10],d15
.L711:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    76    timer_config.base.isrPriority = 2;
	mov	d15,#2
	st.h	[a10]4,d15
.L712:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    77    IfxStm_Timer_init(&tricore_timers[TRICORE_CPU_ID], &timer_config);
	movh.a	a15,#@his(tricore_timers)
	lea	a15,[a15]@los(tricore_timers)
.L713:
	mfcr	d15,#65052
	and	d15,#15
.L714:
	mul	d15,d15,#24
	addsc.a	a4,a15,d15,#0
.L715:
	mov.aa	a5,a10
	call	IfxStm_Timer_init
.L716:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    78    IfxStm_Timer_run(&tricore_timers[TRICORE_CPU_ID]);
	mfcr	d15,#65052
	and	d15,#15
.L717:
	mul	d15,d15,#24
	addsc.a	a4,a15,d15,#0
	j	IfxStm_Timer_run
.L411:
	
__rt_hw_systick_init_function_end:
	.size	rt_hw_systick_init,__rt_hw_systick_init_function_end-rt_hw_systick_init
.L186:
	; End of function
	
	.sdecl	'.text.cpuport.rt_hw_usart_init',code,cluster('rt_hw_usart_init')
	.sect	'.text.cpuport.rt_hw_usart_init'
	.align	2
	
	.global	rt_hw_usart_init

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    79  }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    80  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    81  void rt_hw_usart_init(void)
; Function rt_hw_usart_init
.L42:
rt_hw_usart_init:	.type	func

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    82  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    83      initUART();
	j	initUART
.L413:
	
__rt_hw_usart_init_function_end:
	.size	rt_hw_usart_init,__rt_hw_usart_init_function_end-rt_hw_usart_init
.L191:
	; End of function
	
	.sdecl	'.text.cpuport.core0_trigger_scheduling',code,cluster('core0_trigger_scheduling')
	.sect	'.text.cpuport.core0_trigger_scheduling'
	.align	2
	
	.global	core0_trigger_scheduling

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    84  }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    85  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    86  void core0_trigger_scheduling(void)
; Function core0_trigger_scheduling
.L44:
core0_trigger_scheduling:	.type	func

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    87  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    88      
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    89      UpperCtx_Ptr ptUpperCtx = NULL;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    90  #ifdef RT_USING_SMP
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    91      rt_base_t level;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    92      level = rt_hw_local_irq_disable();
	call	rt_hw_local_irq_disable
.L470:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    93  #endif
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    94  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    95      /* 判断是否需要切换到 to 线程 */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    96      if(rt_interrupt_to_thread_core0)
	ld.w	d15,rt_interrupt_to_thread_core0
.L726:
	jeq	d15,#0,.L2
.L727:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    97      {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    98          /* To ensure memory coherency, a DSYNC instruction must be executed prior to 
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    99             any access to an active CSA memory location. The DSYNC instruction forces 
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   100             all internally buffered CSA register state to be written to memory.     */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   101          __dsync();
	dsync
.L728:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   102          /* 获取当前线程的 CSA 上下文地址 */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   103          ptUpperCtx = LINKWORD_TO_ADDRESS( __mfcr( CPU_PCXI ) );
	mfcr	d15,#65024
	fcall	.cocofun_5
.L471:
	mfcr	d0,#65024
.L472:
	insert	d0,d0,#0,#16,#16
	sha	d0,#6
.L473:
	or	d15,d0
.L729:
	mov.a	a15,d15
.L475:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   104  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   105          if(rt_interrupt_from_thread_core0)
	ld.w	d15,rt_interrupt_from_thread_core0
.L474:
	jeq	d15,#0,.L3
.L730:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   106          {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   107              /* 保存当前线程的 CSA 上下文 */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   108              *( (unsigned long *)rt_interrupt_from_thread_core0 ) = ptUpperCtx->_PCXI;
	ld.w	d15,rt_interrupt_from_thread_core0
.L731:
	mov.a	a2,d15
.L732:
	ld.w	d15,[a15]
.L733:
	st.w	[a2],d15
.L3:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   109          }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   110          /* 将to线程的 CSA linkword赋给当前线程的上层 上下文的 LinkWord ，用于 TriCore 自动切换线程。*/
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   111          ptUpperCtx->_PCXI = *( (unsigned long *)rt_interrupt_to_thread_core0 );
	ld.w	d15,rt_interrupt_to_thread_core0
.L734:
	mov.a	a2,d15
.L735:
	ld.w	d15,[a2]
.L736:
	st.w	[a15],d15
.L737:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   112          __isync();
	isync
.L2:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   113      }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   114  #ifdef RT_USING_SMP
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   115      rt_hw_local_irq_enable(level);
	mov	d4,d2
.L476:
	j	rt_hw_local_irq_enable
.L414:
	
__core0_trigger_scheduling_function_end:
	.size	core0_trigger_scheduling,__core0_trigger_scheduling_function_end-core0_trigger_scheduling
.L196:
	; End of function
	
	.sdecl	'.text.cpuport..cocofun_5',code,cluster('.cocofun_5')
	.sect	'.text.cpuport..cocofun_5'
	.align	2
; Function .cocofun_5
.L46:
.cocofun_5:	.type	func
; Function body .cocofun_5, coco_iter:0
	movh	d0,#15
	and	d15,d0
.L838:
	sha	d15,d15,#12
	fret
.L246:
	; End of function
	.sdecl	'.text.cpuport.core1_trigger_scheduling',code,cluster('core1_trigger_scheduling')
	.sect	'.text.cpuport.core1_trigger_scheduling'
	.align	2
	
	.global	core1_trigger_scheduling

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   116  #endif
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   117  }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   118  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   119  void core1_trigger_scheduling(void)
; Function core1_trigger_scheduling
.L48:
core1_trigger_scheduling:	.type	func

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   120  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   121      
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   122      UpperCtx_Ptr ptUpperCtx = NULL;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   123  #ifdef RT_USING_SMP
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   124      rt_base_t level;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   125      level = rt_hw_local_irq_disable();
	call	rt_hw_local_irq_disable
.L477:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   126  #endif
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   127  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   128      /* 判断是否需要切换到 to 线程 */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   129      if(rt_interrupt_to_thread_core1)
	ld.w	d15,rt_interrupt_to_thread_core1
.L742:
	jeq	d15,#0,.L4
.L743:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   130      {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   131          /* To ensure memory coherency, a DSYNC instruction must be executed prior to 
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   132             any access to an active CSA memory location. The DSYNC instruction forces 
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   133             all internally buffered CSA register state to be written to memory.     */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   134          __dsync();
	dsync
.L744:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   135          /* 获取当前线程的 CSA 上下文地址 */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   136          ptUpperCtx = LINKWORD_TO_ADDRESS( __mfcr( CPU_PCXI ) );
	mfcr	d15,#65024
	fcall	.cocofun_5
	mfcr	d0,#65024
	insert	d0,d0,#0,#16,#16
	sha	d0,#6
.L478:
	or	d15,d0
.L745:
	mov.a	a15,d15
.L480:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   137  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   138          if(rt_interrupt_from_thread_core1)
	ld.w	d15,rt_interrupt_from_thread_core1
.L479:
	jeq	d15,#0,.L5
.L746:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   139          {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   140              /* 保存当前线程的 CSA 上下文 */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   141              *( (unsigned long *)rt_interrupt_from_thread_core1 ) = ptUpperCtx->_PCXI;
	ld.w	d15,rt_interrupt_from_thread_core1
.L747:
	mov.a	a2,d15
.L748:
	ld.w	d15,[a15]
.L749:
	st.w	[a2],d15
.L5:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   142          }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   143          /* 将to线程的 CSA linkword赋给当前线程的上层 上下文的 LinkWord ，用于 TriCore 自动切换线程。*/
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   144          ptUpperCtx->_PCXI = *( (unsigned long *)rt_interrupt_to_thread_core1 );
	ld.w	d15,rt_interrupt_to_thread_core1
.L750:
	mov.a	a2,d15
.L751:
	ld.w	d15,[a2]
.L752:
	st.w	[a15],d15
.L753:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   145          __isync();
	isync
.L4:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   146      }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   147  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   148  #ifdef RT_USING_SMP
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   149      rt_hw_local_irq_enable(level);
	mov	d4,d2
.L481:
	j	rt_hw_local_irq_enable
.L418:
	
__core1_trigger_scheduling_function_end:
	.size	core1_trigger_scheduling,__core1_trigger_scheduling_function_end-core1_trigger_scheduling
.L201:
	; End of function
	
	.sdecl	'.text.inttab0.intvec.002',code
	.sect	'.text.inttab0.intvec.002'

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   150  #endif
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   151  }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   152  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   153  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   154  IFX_INTERRUPT(Core0_INTERRUPT, 0, 2)
	movh.a	a14,#@his(Core0_INTERRUPT)
	lea	a14,[a14]@los(Core0_INTERRUPT)
	ji	a14
	.sdecl	'.text.cpuport.Core0_INTERRUPT',code,cluster('Core0_INTERRUPT')
	.sect	'.text.cpuport.Core0_INTERRUPT'
	.align	2
	
	.global	Core0_INTERRUPT
; Function Core0_INTERRUPT
.L50:
Core0_INTERRUPT:	.type	func
	svlcx
.L758:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   155  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   156  #ifdef RT_USING_SMP
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   157      struct rt_cpu    *pcpu;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   158  #endif
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   159      rt_thread_switch_interrupt_flag_core0 = 1;
	mov	d15,#1
	st.w	rt_thread_switch_interrupt_flag_core0,d15
.L759:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   160      rt_interrupt_enter();
	call	rt_interrupt_enter
.L760:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   161      IfxStm_Timer_acknowledgeTimerIrq(&tricore_timers[TRICORE_CPU_ID]);
	mfcr	d15,#65052
	fcall	.cocofun_6
.L761:
	call	IfxStm_Timer_acknowledgeTimerIrq
.L762:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   162      rt_tick_increase();
	call	rt_tick_increase
.L763:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   163      rt_interrupt_leave();
	call	rt_interrupt_leave
.L764:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   164      rt_thread_switch_interrupt_flag_core0 = 0;
	mov	d4,#0
	st.w	rt_thread_switch_interrupt_flag_core0,d4
.L765:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   165      
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   166  #ifdef RT_USING_SMP
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   167      pcpu   = rt_cpu_index(0);
	call	rt_cpu_index
.L482:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   168      /* whether do switch in interrupt */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   169      if (pcpu->irq_switch_flag)
	ld.bu	d15,[a2]6
.L766:
	jeq	d15,#0,.L6
.L425:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   170      {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   171          rt_scheduler_do_irq_switch();
	call	rt_scheduler_do_irq_switch
.L6:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   172      }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   173  #endif
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   174  }
	rslcx
	rfe
.L421:
	
__Core0_INTERRUPT_function_end:
	.size	Core0_INTERRUPT,__Core0_INTERRUPT_function_end-Core0_INTERRUPT
.L206:
	; End of function
	
	.sdecl	'.text.cpuport..cocofun_6',code,cluster('.cocofun_6')
	.sect	'.text.cpuport..cocofun_6'
	.align	2
; Function .cocofun_6
.L52:
.cocofun_6:	.type	func
; Function body .cocofun_6, coco_iter:0
	and	d15,#15
.L843:
	mul	d15,d15,#24
	movh.a	a15,#@his(tricore_timers)
	lea	a15,[a15]@los(tricore_timers)
.L844:
	addsc.a	a4,a15,d15,#0
.L845:
	fret
.L251:
	; End of function
	.sdecl	'.text.inttab1.intvec.002',code
	.sect	'.text.inttab1.intvec.002'

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   175  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   176  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   177  IFX_INTERRUPT(Core1_INTERRUPT, 1, 2)
	movh.a	a14,#@his(Core1_INTERRUPT)
	lea	a14,[a14]@los(Core1_INTERRUPT)
	ji	a14
	.sdecl	'.text.cpuport.Core1_INTERRUPT',code,cluster('Core1_INTERRUPT')
	.sect	'.text.cpuport.Core1_INTERRUPT'
	.align	2
	
	.global	Core1_INTERRUPT
; Function Core1_INTERRUPT
.L54:
Core1_INTERRUPT:	.type	func
	svlcx
.L771:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   178  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   179  #ifdef RT_USING_SMP
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   180      struct rt_cpu    *pcpu;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   181  #endif
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   182      rt_thread_switch_interrupt_flag_core1 = 1;
	mov	d15,#1
	st.w	rt_thread_switch_interrupt_flag_core1,d15
.L772:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   183      rt_interrupt_enter();
	call	rt_interrupt_enter
.L773:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   184      IfxStm_Timer_acknowledgeTimerIrq(&tricore_timers[TRICORE_CPU_ID]);
	mfcr	d15,#65052
	fcall	.cocofun_6
.L774:
	call	IfxStm_Timer_acknowledgeTimerIrq
.L775:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   185      rt_tick_increase();
	call	rt_tick_increase
.L776:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   186      rt_interrupt_leave();
	call	rt_interrupt_leave
.L777:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   187      rt_thread_switch_interrupt_flag_core1 = 0;
	mov	d15,#0
	st.w	rt_thread_switch_interrupt_flag_core1,d15
.L778:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   188  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   189  #ifdef RT_USING_SMP
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   190      pcpu   = rt_cpu_index(1);
	mov	d4,#1
	call	rt_cpu_index
.L483:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   191      /* whether do switch in interrupt */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   192      if (pcpu->irq_switch_flag)
	ld.bu	d15,[a2]6
.L779:
	jeq	d15,#0,.L7
.L428:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   193      {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   194          rt_scheduler_do_irq_switch();
	call	rt_scheduler_do_irq_switch
.L7:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   195      }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   196  #endif
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   197  }
	rslcx
	rfe
.L426:
	
__Core1_INTERRUPT_function_end:
	.size	Core1_INTERRUPT,__Core1_INTERRUPT_function_end-Core1_INTERRUPT
.L211:
	; End of function
	
	.sdecl	'.text.inttab0.intvec.001',code
	.sect	'.text.inttab0.intvec.001'

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   198  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   199  IFX_INTERRUPT(Core0_YIELD, 0, 1)
	movh.a	a14,#@his(Core0_YIELD)
	lea	a14,[a14]@los(Core0_YIELD)
	ji	a14
	.sdecl	'.text.cpuport.Core0_YIELD',code,cluster('Core0_YIELD')
	.sect	'.text.cpuport.Core0_YIELD'
	.align	2
	
	.global	Core0_YIELD
; Function Core0_YIELD
.L56:
Core0_YIELD:	.type	func
	svlcx
.L784:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   200  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   201      rt_interrupt_enter();
	call	rt_interrupt_enter
.L785:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   202      /* clear the SRR bit */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   203      GPSR[TRICORE_CPU_ID]->B.CLRR = 1;
	mfcr	d15,#65052
	fcall	.cocofun_4
.L786:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   204  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   205      core0_trigger_scheduling();
	call	core0_trigger_scheduling
.L787:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   206      rt_interrupt_leave();
	call	rt_interrupt_leave
.L788:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   207  }
	rslcx
	rfe
.L429:
	
__Core0_YIELD_function_end:
	.size	Core0_YIELD,__Core0_YIELD_function_end-Core0_YIELD
.L216:
	; End of function
	
	.sdecl	'.text.cpuport..cocofun_4',code,cluster('.cocofun_4')
	.sect	'.text.cpuport..cocofun_4'
	.align	2
; Function .cocofun_4
.L58:
.cocofun_4:	.type	func
; Function body .cocofun_4, coco_iter:0
	fcall	.cocofun_9
.L832:
	or	d15,#2
	st.b	[a15],d15
.L833:
	fret
.L241:
	; End of function
	.sdecl	'.text.cpuport..cocofun_9',code,cluster('.cocofun_9')
	.sect	'.text.cpuport..cocofun_9'
	.align	2
; Function .cocofun_9
.L60:
.cocofun_9:	.type	func
; Function body .cocofun_9, coco_iter:1
	and	d15,#15
	lea	a15,GPSR
.L864:
	addsc.a	a15,a15,d15,#2
	ld.a	a15,[a15]
.L865:
	ld.bu	d15,[+a15]3
.L866:
	fret
.L266:
	; End of function
	.sdecl	'.text.inttab1.intvec.001',code
	.sect	'.text.inttab1.intvec.001'

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   208  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   209  IFX_INTERRUPT(Core1_YIELD, 1, 1)
	movh.a	a14,#@his(Core1_YIELD)
	lea	a14,[a14]@los(Core1_YIELD)
	ji	a14
	.sdecl	'.text.cpuport.Core1_YIELD',code,cluster('Core1_YIELD')
	.sect	'.text.cpuport.Core1_YIELD'
	.align	2
	
	.global	Core1_YIELD
; Function Core1_YIELD
.L62:
Core1_YIELD:	.type	func
	svlcx
.L793:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   210  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   211      rt_interrupt_enter();
	call	rt_interrupt_enter
.L794:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   212      /* clear the SRR bit */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   213      GPSR[TRICORE_CPU_ID]->B.CLRR = 1;
	mfcr	d15,#65052
	fcall	.cocofun_4
.L795:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   214  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   215      core1_trigger_scheduling();
	call	core1_trigger_scheduling
.L796:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   216      rt_interrupt_leave();
	call	rt_interrupt_leave
.L797:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   217  }
	rslcx
	rfe
.L431:
	
__Core1_YIELD_function_end:
	.size	Core1_YIELD,__Core1_YIELD_function_end-Core1_YIELD
.L221:
	; End of function
	
	.sdecl	'.text.cpuport.rt_hw_board_init',code,cluster('rt_hw_board_init')
	.sect	'.text.cpuport.rt_hw_board_init'
	.align	2
	
	.global	rt_hw_board_init

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   218  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   219  /**
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   220   * This function will initial board.
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   221   */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   222  #ifdef RT_USING_HEAP
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   223  extern unsigned int __HEAP[];
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   224  extern unsigned int __HEAP_END[];
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   225  #endif
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   226  void rt_hw_board_init()
; Function rt_hw_board_init
.L64:
rt_hw_board_init:	.type	func

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   227  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   228      IfxStm_setSuspendMode(STMs[TRICORE_CPU_ID], IfxStm_SuspendMode_hard);
	mfcr	d15,#65052
.L802:
	lea	a15,STMs
.L803:
	and	d15,#15
.L804:
	addsc.a	a15,a15,d15,#2
.L434:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     2   * \file IfxStm.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     3   * \brief STM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     4   * \ingroup IfxLld_Stm
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    41   * \defgroup IfxLld_Stm_Usage How to use the Stm driver?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    42   * \ingroup IfxLld_Stm
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    44   * The Stm Standard driver provides APIs to initialize, configure and control the Stm.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    45   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    46   * In the following sections it will be described, how to integrate the driver into the application framework.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    48   * \section IfxLld_Stm_Preparation Preparation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    49   * \subsection IfxLld_Stm_Include Include Files
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    51   * Include following header file into your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    52   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    53   * #include <Stm/Std/IfxStm.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    54   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    55   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    56   * \subsection IfxLld_Stm_Variables Variables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    57   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    58   * Declare STM variables :
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    59   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    60   * Ifx_STM *stmSfr;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    61   * IfxStm_CompareConfig stmConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    62   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    63   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    64   * \subsection IfxLld_Stm_Interrupt Interrupt Handler Installation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    65   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    66   * See also \ref IfxLld_Cpu_Irq_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    68   * Define priorities for the Interrrupt handlers. This is normally done in the Ifx_IntPrioDef.h file:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    69   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    70   * // priorities are normally defined in Ifx_IntPrioDef.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    71   * #define IFX_INTPRIO_STM0_SR0  10
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    72   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    73   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    74   * Add the interrupt service routines to your C code. They have to call the Stm interrupt handlers:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    75   * please take care in choosing number of ticks, the below example code will raise an interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    76   * evry time the specified number of ticks have been elapsed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    77   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    78   * IFX_INTERRUPT(stm0Sr0ISR, 0, IFX_INTPRIO_STM0_SR0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    79   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    80   *     IfxStm_clearCompareFlag(stmSfr, stmConfig.comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    81   *     IfxStm_increaseCompare(stmSfr, stmConfig.comparator, stmConfig.ticks);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    82   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    83   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    84   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    85   * Finally install the interrupt handlers in your initialisation function:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    86   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    87   *     // install interrupt handlers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    88   *     IfxCpu_Irq_installInterruptHandler(&stm0Sr0ISR, IFX_INTPRIO_STM0_SR0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    89   *     IfxCpu_enableInterrupts();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    90   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    91   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    92   * \subsection IfxLld_Stm_Init Module Initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    93   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    94   * The STM module can be configured to generate an interrupt at every compare match of the selected comaparator with the desired compare value, the interrupt can further be routed to other comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    95   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    96   * The module initialisation can be done as followed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    97   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    98   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    99   *     stmSfr = &MODULE_STM0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   100   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   101   *     IfxStm_initCompareConfig(&stmConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   103   *     // configure to generate interrupt every 10 us
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   104   *     sint32 ticks = IfxStm_getTicksFromMicroseconds(10);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   105   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   106   *     stmConfig.ticks = ticks;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   107   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   108   *     stmConfig.triggerPriority = IFX_INTPRIO_STM0_SR0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   109   *     stmConfig.typeOfService = IfxSrc_Tos_cpu0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   110   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   111   *     IfxStm_initCompare(stmSfr, &stmConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   112   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   113   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   114   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   115   * Now the Stm shall generate interrupts regularly based on the configured time !
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   116   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   117   * \defgroup IfxLld_Stm_Std_Enumerations Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   118   * \ingroup IfxLld_Stm_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   119   * \defgroup IfxLld_Stm_Std_Structures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   120   * \ingroup IfxLld_Stm_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   121   * \defgroup IfxLld_Stm_Std_Module Module Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   122   * \ingroup IfxLld_Stm_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   123   * \defgroup IfxLld_Stm_Std_Timer Timer Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   124   * \ingroup IfxLld_Stm_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   125   * \defgroup IfxLld_Stm_Std_Comparator Comparator Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   126   * \ingroup IfxLld_Stm_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   127   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   129  #ifndef IFXSTM_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   130  #define IFXSTM_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   131  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   132  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   133  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   134  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   135  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   136  #include "_Impl/IfxStm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   137  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   138  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   139  #include "IfxCbs_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   140  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   141  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   142  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   143  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   145  #ifndef IFXSTM_DEFAULT_TIMER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   146  #define IFXSTM_DEFAULT_TIMER (&MODULE_STM0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   147  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   149  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   150  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   151  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   152  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   153  /** \addtogroup IfxLld_Stm_Std_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   154   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   155  /** \brief Comparator Id defined in   MODULE_STMx.ISCR.B.CMP0IRR(x = 0, 1, 2)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   156   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   157  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   158  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   159      IfxStm_Comparator_0 = 0,      /**< \brief Comparator Id 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   160      IfxStm_Comparator_1           /**< \brief Comparator Id 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   161  } IfxStm_Comparator;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   163  /** \brief Comparator Interrupt request source defined in MODULE_SRC.STM.STM[index].SRx (x =0, 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   164   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   165  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   166  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   167      IfxStm_ComparatorInterrupt_ir0 = 0,  /**< \brief Select STMIR0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   168      IfxStm_ComparatorInterrupt_ir1 = 1   /**< \brief Select STMIR1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   169  } IfxStm_ComparatorInterrupt;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   171  /** \brief Comparator start bit position  defined in MODULE_STMx.CMCON.B.MSTART0(x = 0,1,2)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   172   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   173  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   174  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   175      IfxStm_ComparatorOffset_0 = 0,      /**< \brief Comparator start bit position 0 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   176      IfxStm_ComparatorOffset_1,          /**< \brief Comparator start bit position 1 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   177      IfxStm_ComparatorOffset_2,          /**< \brief Comparator start bit position 2 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   178      IfxStm_ComparatorOffset_3,          /**< \brief Comparator start bit position 3 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   179      IfxStm_ComparatorOffset_4,          /**< \brief Comparator start bit position 4 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   180      IfxStm_ComparatorOffset_5,          /**< \brief Comparator start bit position 5 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   181      IfxStm_ComparatorOffset_6,          /**< \brief Comparator start bit position 6 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   182      IfxStm_ComparatorOffset_7,          /**< \brief Comparator start bit position 7 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   183      IfxStm_ComparatorOffset_8,          /**< \brief Comparator start bit position 8 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   184      IfxStm_ComparatorOffset_9,          /**< \brief Comparator start bit position 9 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   185      IfxStm_ComparatorOffset_10,         /**< \brief Comparator start bit position 10 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   186      IfxStm_ComparatorOffset_11,         /**< \brief Comparator start bit position 11 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   187      IfxStm_ComparatorOffset_12,         /**< \brief Comparator start bit position 12 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   188      IfxStm_ComparatorOffset_13,         /**< \brief Comparator start bit position 13 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   189      IfxStm_ComparatorOffset_14,         /**< \brief Comparator start bit position 14 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   190      IfxStm_ComparatorOffset_15,         /**< \brief Comparator start bit position 15 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   191      IfxStm_ComparatorOffset_16,         /**< \brief Comparator start bit position 16 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   192      IfxStm_ComparatorOffset_17,         /**< \brief Comparator start bit position 17 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   193      IfxStm_ComparatorOffset_18,         /**< \brief Comparator start bit position 18 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   194      IfxStm_ComparatorOffset_19,         /**< \brief Comparator start bit position 19 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   195      IfxStm_ComparatorOffset_20,         /**< \brief Comparator start bit position 20 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   196      IfxStm_ComparatorOffset_21,         /**< \brief Comparator start bit position 21 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   197      IfxStm_ComparatorOffset_22,         /**< \brief Comparator start bit position 22 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   198      IfxStm_ComparatorOffset_23,         /**< \brief Comparator start bit position 23 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   199      IfxStm_ComparatorOffset_24,         /**< \brief Comparator start bit position 24 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   200      IfxStm_ComparatorOffset_25,         /**< \brief Comparator start bit position 25 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   201      IfxStm_ComparatorOffset_26,         /**< \brief Comparator start bit position 26 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   202      IfxStm_ComparatorOffset_27,         /**< \brief Comparator start bit position 27 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   203      IfxStm_ComparatorOffset_28,         /**< \brief Comparator start bit position 28 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   204      IfxStm_ComparatorOffset_29,         /**< \brief Comparator start bit position 29 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   205      IfxStm_ComparatorOffset_30,         /**< \brief Comparator start bit position 30 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   206      IfxStm_ComparatorOffset_31          /**< \brief Comparator start bit position 31 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   207  } IfxStm_ComparatorOffset;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   209  /** \brief Size of compare value to compare with timer defined in  MODULE_STMx.CMCON.B.MSIZE0(x = 0,1,2)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   210   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   211  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   212  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   213      IfxStm_ComparatorSize_1Bit   = 0,   /**< \brief Size of compare value to compare with timer: 1 bit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   214      IfxStm_ComparatorSize_2Bits  = 1,   /**< \brief Size of compare value to compare with timer: 2 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   215      IfxStm_ComparatorSize_3Bits  = 2,   /**< \brief Size of compare value to compare with timer: 3 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   216      IfxStm_ComparatorSize_4Bits  = 3,   /**< \brief Size of compare value to compare with timer: 4 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   217      IfxStm_ComparatorSize_5Bits  = 4,   /**< \brief Size of compare value to compare with timer: 5 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   218      IfxStm_ComparatorSize_6Bits  = 5,   /**< \brief Size of compare value to compare with timer: 6 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   219      IfxStm_ComparatorSize_7Bits  = 6,   /**< \brief Size of compare value to compare with timer: 7 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   220      IfxStm_ComparatorSize_8Bits  = 7,   /**< \brief Size of compare value to compare with timer: 8 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   221      IfxStm_ComparatorSize_9Bits  = 8,   /**< \brief Size of compare value to compare with timer: 9 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   222      IfxStm_ComparatorSize_10Bits = 9,   /**< \brief Size of compare value to compare with timer: 10 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   223      IfxStm_ComparatorSize_11Bits = 10,  /**< \brief Size of compare value to compare with timer: 11 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   224      IfxStm_ComparatorSize_12Bits = 11,  /**< \brief Size of compare value to compare with timer: 12 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   225      IfxStm_ComparatorSize_13Bits = 12,  /**< \brief Size of compare value to compare with timer: 13 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   226      IfxStm_ComparatorSize_14Bits = 13,  /**< \brief Size of compare value to compare with timer: 14 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   227      IfxStm_ComparatorSize_15Bits = 14,  /**< \brief Size of compare value to compare with timer: 15 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   228      IfxStm_ComparatorSize_16Bits = 15,  /**< \brief Size of compare value to compare with timer: 16 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   229      IfxStm_ComparatorSize_17Bits = 16,  /**< \brief Size of compare value to compare with timer: 17 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   230      IfxStm_ComparatorSize_18Bits = 17,  /**< \brief Size of compare value to compare with timer: 18 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   231      IfxStm_ComparatorSize_19Bits = 18,  /**< \brief Size of compare value to compare with timer: 19 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   232      IfxStm_ComparatorSize_20Bits = 19,  /**< \brief Size of compare value to compare with timer: 20 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   233      IfxStm_ComparatorSize_21Bits = 20,  /**< \brief Size of compare value to compare with timer: 21 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   234      IfxStm_ComparatorSize_22Bits = 21,  /**< \brief Size of compare value to compare with timer: 22 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   235      IfxStm_ComparatorSize_23Bits = 22,  /**< \brief Size of compare value to compare with timer: 23 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   236      IfxStm_ComparatorSize_24Bits = 23,  /**< \brief Size of compare value to compare with timer: 24 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   237      IfxStm_ComparatorSize_25Bits = 24,  /**< \brief Size of compare value to compare with timer: 25 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   238      IfxStm_ComparatorSize_26Bits = 25,  /**< \brief Size of compare value to compare with timer: 26 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   239      IfxStm_ComparatorSize_27Bits = 26,  /**< \brief Size of compare value to compare with timer: 27 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   240      IfxStm_ComparatorSize_28Bits = 27,  /**< \brief Size of compare value to compare with timer: 28 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   241      IfxStm_ComparatorSize_29Bits = 28,  /**< \brief Size of compare value to compare with timer: 29 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   242      IfxStm_ComparatorSize_30Bits = 29,  /**< \brief Size of compare value to compare with timer: 30 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   243      IfxStm_ComparatorSize_31Bits = 30,  /**< \brief Size of compare value to compare with timer: 31 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   244      IfxStm_ComparatorSize_32Bits = 31   /**< \brief Size of compare value to compare with timer: 32 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   245  } IfxStm_ComparatorSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   247  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   248   * Definition in Ifx_STM.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   250  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   251  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   252      IfxStm_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   253      IfxStm_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   254  } IfxStm_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   255  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   256  /** \brief OCDS Suspend Control (OCDS.SUS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   257   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   258  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   259  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   260      IfxStm_SuspendMode_none = 0,  /**< \brief No suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   261      IfxStm_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   262      IfxStm_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   263  } IfxStm_SuspendMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   265  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   268  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   271  /** \addtogroup IfxLld_Stm_Std_Structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   272   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   273  /** \brief Comparator Configuration Structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   275  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   276  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   277      IfxStm_Comparator          comparator;                /**< \brief Comparator Id defined in   MODULE_STMx.ISCR.B.CMP0IRR(x = 0, 1, 2). */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   278      IfxStm_ComparatorInterrupt comparatorInterrupt;       /**< \brief Comparator Interrupt request source defined in MODULE_SRC.STM.STM[index].SRx (x =0, 1). */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   279      IfxStm_ComparatorOffset    compareOffset;             /**< \brief Comparator start bit position  defined in MODULE_STMx.CMCON.B.MSTART0(x = 0,1,2). */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   280      IfxStm_ComparatorSize      compareSize;               /**< \brief Size of compare value to compare with timer defined in  MODULE_STMx.CMCON.B.MSIZE0(x = 0,1,2). */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   281      uint32                     ticks;                     /**< \brief count for next comparison from current timer count. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   282      Ifx_Priority               triggerPriority;           /**< \brief Interrupt priority. Range = 0 .. 255. 0 = interrupt is disabled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   283      IfxSrc_Tos                 typeOfService;             /**< \brief Type of service. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   284  } IfxStm_CompareConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   286  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   288  /** \addtogroup IfxLld_Stm_Std_Module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   289   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   291  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   292  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   293  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   294  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   295  /** \brief Returns system timer value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   296   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   297   * \return system timer value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   299  IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   301  /** \brief Returns the system timer frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   302   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   303   * \return the system timer frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   305  IFX_INLINE float32 IfxStm_getFrequency(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   307  /** \brief Returns the module's suspend state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   308   * TRUE :if module is suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   309   * FALSE:if module is not yet suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   310   * \param stm Pointer to STM module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   311   * \return Suspend status (TRUE / FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   313  IFX_INLINE boolean IfxStm_isModuleSuspended(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   315  /** \brief Configure the Module to Hard/Soft suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   316   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   317   * \param stm Pointer to STM module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   318   * \param mode Module suspend mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   319   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   320   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   321  IFX_INLINE void IfxStm_setSuspendMode(Ifx_STM *stm, IfxStm_SuspendMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   322  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   323  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   324  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   325  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   326  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   327  /** \brief Disables the Stm module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   328   * \param stm pointer to STM registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   329   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   330   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   331  IFX_EXTERN void IfxStm_disableModule(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   332  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   333  /** \brief enable suspend by debugger.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   334   * Note: The API will write into the OCS register only if OCDS is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   335   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   336   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   338  IFX_EXTERN void IfxStm_enableOcdsSuspend(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   339  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   340  /** \brief Returns the module index of the selected STM module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   341   * \param stm Pointer to STM module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   342   * \return STM module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   344  IFX_EXTERN Ifx_STM *IfxStm_getAddress(IfxStm_Index stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   346  /** \brief API to get the resource index of the STM specified.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   347   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   348   * \return system timer module index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   350  IFX_EXTERN IfxStm_Index IfxStm_getIndex(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   352  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   353  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   354  /** \addtogroup IfxLld_Stm_Std_Timer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   355   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   357  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   358  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   359  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   360  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   361  /** \brief Returns the lower system timer value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   362   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   363   * \return the lower system timer value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   364   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   365  IFX_INLINE uint32 IfxStm_getLower(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   366  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   367  /** \brief Gets the TIM3 couter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   368   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   369   * \return TIM3 counter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   370   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   371  IFX_INLINE uint32 IfxStm_getOffset12Timer(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   372  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   373  /** \brief Gets the TIM4 couter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   374   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   375   * \return TIM4 counter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   377  IFX_INLINE uint32 IfxStm_getOffset16Timer(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   379  /** \brief Gets the TIM5 couter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   380   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   381   * \return TIM5 counter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   382   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   383  IFX_INLINE uint32 IfxStm_getOffset20Timer(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   384  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   385  /** \brief Gets the TIM6 couter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   386   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   387   * \return TIM6 counter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   388   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   389  IFX_INLINE uint32 IfxStm_getOffset32Timer(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   390  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   391  /** \brief Gets the TIM1 couter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   392   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   393   * \return TIM1 counter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   394   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   395  IFX_INLINE uint32 IfxStm_getOffset4Timer(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   396  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   397  /** \brief Gets the TIM2 couter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   398   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   399   * \return TIM2 counter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   400   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   401  IFX_INLINE uint32 IfxStm_getOffset8Timer(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   403  /** \brief Returns the timer value shifted right by offset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   404   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   405   * \param offset offset value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   406   * \return the lower system timer value shifted by offset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   408  IFX_INLINE uint32 IfxStm_getOffsetTimer(Ifx_STM *stm, uint8 offset);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   410  /** \brief Wait for requested time.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   411   * The macro waits in while loop for the specified time in system timer ticks.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   412   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   413   * \param ticks ticks Wait time in system timer ticks.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   414   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   415   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   416  IFX_INLINE void IfxStm_waitTicks(Ifx_STM *stm, uint32 ticks);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   417  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   418  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   419  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   420  /** \addtogroup IfxLld_Stm_Std_Comparator
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   421   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   422  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   423  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   424  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   425  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   426  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   427  /** \brief Returns the updated compare register value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   428   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   429   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   430   * \return The compare value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   431   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   432  IFX_INLINE uint32 IfxStm_getCompare(Ifx_STM *stm, IfxStm_Comparator comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   434  /** \brief Returns the number of ticks for the selected micro seconds based on the STM frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   435   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   436   * \param microSeconds Number of micro seconds that need to be converted to ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   437   * \return ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   439  IFX_INLINE sint32 IfxStm_getTicksFromMicroseconds(Ifx_STM *stm, uint32 microSeconds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   441  /** \brief Returns the number of ticks for the selected milli seconds based on the STM frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   442   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   443   * \param milliSeconds Number of micro seconds that need to be converted to ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   444   * \return ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   446  IFX_INLINE sint32 IfxStm_getTicksFromMilliseconds(Ifx_STM *stm, uint32 milliSeconds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   448  /** \brief Update the compare register value increased with given ticks.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   449   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   450   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   451   * \param ticks count for next comparison from current timer count.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   454  IFX_INLINE void IfxStm_increaseCompare(Ifx_STM *stm, IfxStm_Comparator comparator, uint32 ticks);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   456  /** \brief Update the compare register value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   457   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   458   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   459   * \param ticks count for next comparison.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   460   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   462  IFX_INLINE void IfxStm_updateCompare(Ifx_STM *stm, IfxStm_Comparator comparator, uint32 ticks);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   464  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   465  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   466  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   468  /** \brief Clear the compare interrupt flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   469   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   470   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   471   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   473  IFX_EXTERN void IfxStm_clearCompareFlag(Ifx_STM *stm, IfxStm_Comparator comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   474  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   475  /** \brief Disables the compare interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   476   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   477   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   480  IFX_EXTERN void IfxStm_disableComparatorInterrupt(Ifx_STM *stm, IfxStm_Comparator comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   482  /** \brief Enables the compare interrupt .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   483   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   484   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   485   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   486   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   487  IFX_EXTERN void IfxStm_enableComparatorInterrupt(Ifx_STM *stm, IfxStm_Comparator comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   489  /** \brief get the interrupt source pointer for the comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   490   * \param stm pointer to the STM registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   491   * \param comparator comparator selection comparator
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   492   * \return pointer to the interrupt source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   493   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   494  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxStm_getSrcPointer(Ifx_STM *stm, IfxStm_Comparator comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   495  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   496  /** \brief Initialise stm compare register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   497   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   498   * \param config pointer to configuration structure.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   499   * \return TRUE if Comparator successful otherwise FLASE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   501  IFX_EXTERN boolean IfxStm_initCompare(Ifx_STM *stm, const IfxStm_CompareConfig *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   503  /** \brief Initialise compare configuration with default values.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   504   * \param config pointer to configuration structure.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   507  IFX_EXTERN void IfxStm_initCompareConfig(IfxStm_CompareConfig *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   509  /** \brief Indicates if the compare interrupt flag is set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   510   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   511   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   512   * \return TRUE if the comparator flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   513   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   514  IFX_EXTERN boolean IfxStm_isCompareFlagSet(Ifx_STM *stm, IfxStm_Comparator comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   515  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   516  /** \brief Set the compare behavior
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   517   * \param stm pointer to System timer module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   518   * \param comparator comparator selection comparator
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   519   * \param offset Comparator start bit position
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   520   * \param size Size of compare value to compare with timer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   521   * \param interrupt Comparator Interrupt request source defined
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   522   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   523   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   524  IFX_EXTERN void IfxStm_setCompareControl(Ifx_STM *stm, IfxStm_Comparator comparator, IfxStm_ComparatorOffset offset, IfxStm_ComparatorSize size, IfxStm_ComparatorInterrupt interrupt);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   526  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   528  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   529  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   530  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   532  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   533   * \param stm pointer STM registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   534   * \param mode mode selection (enable/ disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   535   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   537  IFX_INLINE void IfxStm_setSleepMode(Ifx_STM *stm, IfxStm_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   539  /** \brief Returns the STM counter value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   540   * \return Returns the STM counter value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   541   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   542  IFX_INLINE sint64 IfxStm_now(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   543  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   544  /** \brief Get the deadline value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   545   * \param timeout timeout value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   546   * \return Return the deadline
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   547   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   548  IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   550  /** \brief Checked if deadline has occured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   551   * \param deadLine Deadline value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   552   * \return Return if deadline occured or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   553   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   554  IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   555  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   556  /** \brief Waits for a specific time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   557   * \param timeout timeout value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   558   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   560  IFX_INLINE void IfxStm_wait(sint64 timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   561  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   562  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   563  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   564  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   565  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   566  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   567   * \param stm pointer to STM registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   568   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   570  IFX_EXTERN void IfxStm_resetModule(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   572  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   573  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   574  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   575  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   576  IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   577  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   578      uint64 result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   579  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   580      result  = stm->TIM0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   581      result |= ((uint64)stm->CAP.U) << 32;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   583      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   584  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   585  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   587  IFX_INLINE uint32 IfxStm_getCompare(Ifx_STM *stm, IfxStm_Comparator comparator)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   588  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   589      return stm->CMP[comparator].B.CMPVAL;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   590  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   593  IFX_INLINE float32 IfxStm_getFrequency(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   594  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   595      IFX_UNUSED_PARAMETER(stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   596      float32 result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   598      result = IfxScuCcu_getStmFrequency();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   599  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   600      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   601  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   602  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   604  IFX_INLINE uint32 IfxStm_getLower(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   605  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   606      return stm->TIM0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   607  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   609  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   610  IFX_INLINE uint32 IfxStm_getOffset12Timer(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   611  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   612      return stm->TIM3.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   613  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   615  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   616  IFX_INLINE uint32 IfxStm_getOffset16Timer(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   617  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   618      return stm->TIM4.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   619  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   620  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   622  IFX_INLINE uint32 IfxStm_getOffset20Timer(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   623  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   624      return stm->TIM5.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   625  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   627  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   628  IFX_INLINE uint32 IfxStm_getOffset32Timer(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   629  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   630      return stm->TIM6.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   631  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   634  IFX_INLINE uint32 IfxStm_getOffset4Timer(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   635  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   636      return stm->TIM1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   637  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   640  IFX_INLINE uint32 IfxStm_getOffset8Timer(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   641  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   642      return stm->TIM2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   643  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   644  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   646  IFX_INLINE uint32 IfxStm_getOffsetTimer(Ifx_STM *stm, uint8 offset)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   647  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   648      uint64 now;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   649  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   650      now = IfxStm_get(stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   651  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   652      return (uint32)(now >> offset);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   653  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   656  IFX_INLINE sint32 IfxStm_getTicksFromMicroseconds(Ifx_STM *stm, uint32 microSeconds)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   657  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   658      sint32 freq = (sint32)IfxStm_getFrequency(stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   659      return (freq / (1000000)) * microSeconds;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   663  IFX_INLINE sint32 IfxStm_getTicksFromMilliseconds(Ifx_STM *stm, uint32 milliSeconds)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   665      sint32 freq = (sint32)IfxStm_getFrequency(stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   666      return (freq / (1000)) * milliSeconds;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   667  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   669  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   670  IFX_INLINE void IfxStm_increaseCompare(Ifx_STM *stm, IfxStm_Comparator comparator, uint32 ticks)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   671  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   672      stm->CMP[comparator].B.CMPVAL = stm->CMP[comparator].B.CMPVAL + ticks;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   673  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   674  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   675  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   676  IFX_INLINE boolean IfxStm_isModuleSuspended(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   677  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   678      Ifx_STM_OCS ocs;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   679  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   680      // read the status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   681      ocs.U = stm->OCS.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   682  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   683      // return the status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   684      return ocs.B.SUSSTA;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   685  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   686  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   687  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   688  IFX_INLINE void IfxStm_setSleepMode(Ifx_STM *stm, IfxStm_SleepMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   689  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   690      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   691      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   692      stm->CLC.B.EDIS = mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   693      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   694  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   695  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   696  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   697  IFX_INLINE void IfxStm_setSuspendMode(Ifx_STM *stm, IfxStm_SuspendMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   698  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   699      Ifx_STM_OCS ocs;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   700  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   701      /* Only if OCDS is enabled write into the OCS register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   702      if (MODULE_CBS.OSTATE.B.OEN == 1U)
	ld.bu	d15,0xf0000480
.L435:
	ld.a	a15,[a15]
.L442:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   702      if (MODULE_CBS.OSTATE.B.OEN == 1U)      (inlined)
	jz.t	d15:0,.L8
.L484:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     2   * \file IfxStm.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     3   * \brief STM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     4   * \ingroup IfxLld_Stm
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    41   * \defgroup IfxLld_Stm_Usage How to use the Stm driver?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    42   * \ingroup IfxLld_Stm
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    44   * The Stm Standard driver provides APIs to initialize, configure and control the Stm.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    45   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    46   * In the following sections it will be described, how to integrate the driver into the application framework.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    48   * \section IfxLld_Stm_Preparation Preparation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    49   * \subsection IfxLld_Stm_Include Include Files
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    51   * Include following header file into your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    52   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    53   * #include <Stm/Std/IfxStm.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    54   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    55   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    56   * \subsection IfxLld_Stm_Variables Variables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    57   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    58   * Declare STM variables :
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    59   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    60   * Ifx_STM *stmSfr;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    61   * IfxStm_CompareConfig stmConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    62   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    63   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    64   * \subsection IfxLld_Stm_Interrupt Interrupt Handler Installation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    65   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    66   * See also \ref IfxLld_Cpu_Irq_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    68   * Define priorities for the Interrrupt handlers. This is normally done in the Ifx_IntPrioDef.h file:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    69   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    70   * // priorities are normally defined in Ifx_IntPrioDef.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    71   * #define IFX_INTPRIO_STM0_SR0  10
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    72   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    73   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    74   * Add the interrupt service routines to your C code. They have to call the Stm interrupt handlers:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    75   * please take care in choosing number of ticks, the below example code will raise an interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    76   * evry time the specified number of ticks have been elapsed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    77   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    78   * IFX_INTERRUPT(stm0Sr0ISR, 0, IFX_INTPRIO_STM0_SR0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    79   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    80   *     IfxStm_clearCompareFlag(stmSfr, stmConfig.comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    81   *     IfxStm_increaseCompare(stmSfr, stmConfig.comparator, stmConfig.ticks);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    82   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    83   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    84   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    85   * Finally install the interrupt handlers in your initialisation function:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    86   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    87   *     // install interrupt handlers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    88   *     IfxCpu_Irq_installInterruptHandler(&stm0Sr0ISR, IFX_INTPRIO_STM0_SR0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    89   *     IfxCpu_enableInterrupts();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    90   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    91   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    92   * \subsection IfxLld_Stm_Init Module Initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    93   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    94   * The STM module can be configured to generate an interrupt at every compare match of the selected comaparator with the desired compare value, the interrupt can further be routed to other comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    95   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    96   * The module initialisation can be done as followed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    97   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    98   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    99   *     stmSfr = &MODULE_STM0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   100   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   101   *     IfxStm_initCompareConfig(&stmConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   103   *     // configure to generate interrupt every 10 us
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   104   *     sint32 ticks = IfxStm_getTicksFromMicroseconds(10);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   105   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   106   *     stmConfig.ticks = ticks;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   107   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   108   *     stmConfig.triggerPriority = IFX_INTPRIO_STM0_SR0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   109   *     stmConfig.typeOfService = IfxSrc_Tos_cpu0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   110   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   111   *     IfxStm_initCompare(stmSfr, &stmConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   112   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   113   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   114   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   115   * Now the Stm shall generate interrupts regularly based on the configured time !
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   116   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   117   * \defgroup IfxLld_Stm_Std_Enumerations Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   118   * \ingroup IfxLld_Stm_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   119   * \defgroup IfxLld_Stm_Std_Structures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   120   * \ingroup IfxLld_Stm_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   121   * \defgroup IfxLld_Stm_Std_Module Module Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   122   * \ingroup IfxLld_Stm_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   123   * \defgroup IfxLld_Stm_Std_Timer Timer Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   124   * \ingroup IfxLld_Stm_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   125   * \defgroup IfxLld_Stm_Std_Comparator Comparator Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   126   * \ingroup IfxLld_Stm_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   127   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   129  #ifndef IFXSTM_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   130  #define IFXSTM_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   131  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   132  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   133  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   134  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   135  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   136  #include "_Impl/IfxStm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   137  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   138  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   139  #include "IfxCbs_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   140  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   141  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   142  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   143  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   145  #ifndef IFXSTM_DEFAULT_TIMER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   146  #define IFXSTM_DEFAULT_TIMER (&MODULE_STM0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   147  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   149  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   150  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   151  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   152  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   153  /** \addtogroup IfxLld_Stm_Std_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   154   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   155  /** \brief Comparator Id defined in   MODULE_STMx.ISCR.B.CMP0IRR(x = 0, 1, 2)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   156   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   157  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   158  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   159      IfxStm_Comparator_0 = 0,      /**< \brief Comparator Id 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   160      IfxStm_Comparator_1           /**< \brief Comparator Id 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   161  } IfxStm_Comparator;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   163  /** \brief Comparator Interrupt request source defined in MODULE_SRC.STM.STM[index].SRx (x =0, 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   164   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   165  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   166  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   167      IfxStm_ComparatorInterrupt_ir0 = 0,  /**< \brief Select STMIR0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   168      IfxStm_ComparatorInterrupt_ir1 = 1   /**< \brief Select STMIR1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   169  } IfxStm_ComparatorInterrupt;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   171  /** \brief Comparator start bit position  defined in MODULE_STMx.CMCON.B.MSTART0(x = 0,1,2)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   172   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   173  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   174  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   175      IfxStm_ComparatorOffset_0 = 0,      /**< \brief Comparator start bit position 0 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   176      IfxStm_ComparatorOffset_1,          /**< \brief Comparator start bit position 1 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   177      IfxStm_ComparatorOffset_2,          /**< \brief Comparator start bit position 2 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   178      IfxStm_ComparatorOffset_3,          /**< \brief Comparator start bit position 3 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   179      IfxStm_ComparatorOffset_4,          /**< \brief Comparator start bit position 4 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   180      IfxStm_ComparatorOffset_5,          /**< \brief Comparator start bit position 5 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   181      IfxStm_ComparatorOffset_6,          /**< \brief Comparator start bit position 6 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   182      IfxStm_ComparatorOffset_7,          /**< \brief Comparator start bit position 7 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   183      IfxStm_ComparatorOffset_8,          /**< \brief Comparator start bit position 8 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   184      IfxStm_ComparatorOffset_9,          /**< \brief Comparator start bit position 9 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   185      IfxStm_ComparatorOffset_10,         /**< \brief Comparator start bit position 10 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   186      IfxStm_ComparatorOffset_11,         /**< \brief Comparator start bit position 11 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   187      IfxStm_ComparatorOffset_12,         /**< \brief Comparator start bit position 12 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   188      IfxStm_ComparatorOffset_13,         /**< \brief Comparator start bit position 13 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   189      IfxStm_ComparatorOffset_14,         /**< \brief Comparator start bit position 14 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   190      IfxStm_ComparatorOffset_15,         /**< \brief Comparator start bit position 15 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   191      IfxStm_ComparatorOffset_16,         /**< \brief Comparator start bit position 16 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   192      IfxStm_ComparatorOffset_17,         /**< \brief Comparator start bit position 17 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   193      IfxStm_ComparatorOffset_18,         /**< \brief Comparator start bit position 18 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   194      IfxStm_ComparatorOffset_19,         /**< \brief Comparator start bit position 19 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   195      IfxStm_ComparatorOffset_20,         /**< \brief Comparator start bit position 20 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   196      IfxStm_ComparatorOffset_21,         /**< \brief Comparator start bit position 21 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   197      IfxStm_ComparatorOffset_22,         /**< \brief Comparator start bit position 22 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   198      IfxStm_ComparatorOffset_23,         /**< \brief Comparator start bit position 23 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   199      IfxStm_ComparatorOffset_24,         /**< \brief Comparator start bit position 24 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   200      IfxStm_ComparatorOffset_25,         /**< \brief Comparator start bit position 25 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   201      IfxStm_ComparatorOffset_26,         /**< \brief Comparator start bit position 26 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   202      IfxStm_ComparatorOffset_27,         /**< \brief Comparator start bit position 27 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   203      IfxStm_ComparatorOffset_28,         /**< \brief Comparator start bit position 28 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   204      IfxStm_ComparatorOffset_29,         /**< \brief Comparator start bit position 29 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   205      IfxStm_ComparatorOffset_30,         /**< \brief Comparator start bit position 30 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   206      IfxStm_ComparatorOffset_31          /**< \brief Comparator start bit position 31 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   207  } IfxStm_ComparatorOffset;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   209  /** \brief Size of compare value to compare with timer defined in  MODULE_STMx.CMCON.B.MSIZE0(x = 0,1,2)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   210   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   211  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   212  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   213      IfxStm_ComparatorSize_1Bit   = 0,   /**< \brief Size of compare value to compare with timer: 1 bit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   214      IfxStm_ComparatorSize_2Bits  = 1,   /**< \brief Size of compare value to compare with timer: 2 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   215      IfxStm_ComparatorSize_3Bits  = 2,   /**< \brief Size of compare value to compare with timer: 3 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   216      IfxStm_ComparatorSize_4Bits  = 3,   /**< \brief Size of compare value to compare with timer: 4 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   217      IfxStm_ComparatorSize_5Bits  = 4,   /**< \brief Size of compare value to compare with timer: 5 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   218      IfxStm_ComparatorSize_6Bits  = 5,   /**< \brief Size of compare value to compare with timer: 6 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   219      IfxStm_ComparatorSize_7Bits  = 6,   /**< \brief Size of compare value to compare with timer: 7 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   220      IfxStm_ComparatorSize_8Bits  = 7,   /**< \brief Size of compare value to compare with timer: 8 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   221      IfxStm_ComparatorSize_9Bits  = 8,   /**< \brief Size of compare value to compare with timer: 9 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   222      IfxStm_ComparatorSize_10Bits = 9,   /**< \brief Size of compare value to compare with timer: 10 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   223      IfxStm_ComparatorSize_11Bits = 10,  /**< \brief Size of compare value to compare with timer: 11 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   224      IfxStm_ComparatorSize_12Bits = 11,  /**< \brief Size of compare value to compare with timer: 12 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   225      IfxStm_ComparatorSize_13Bits = 12,  /**< \brief Size of compare value to compare with timer: 13 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   226      IfxStm_ComparatorSize_14Bits = 13,  /**< \brief Size of compare value to compare with timer: 14 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   227      IfxStm_ComparatorSize_15Bits = 14,  /**< \brief Size of compare value to compare with timer: 15 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   228      IfxStm_ComparatorSize_16Bits = 15,  /**< \brief Size of compare value to compare with timer: 16 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   229      IfxStm_ComparatorSize_17Bits = 16,  /**< \brief Size of compare value to compare with timer: 17 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   230      IfxStm_ComparatorSize_18Bits = 17,  /**< \brief Size of compare value to compare with timer: 18 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   231      IfxStm_ComparatorSize_19Bits = 18,  /**< \brief Size of compare value to compare with timer: 19 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   232      IfxStm_ComparatorSize_20Bits = 19,  /**< \brief Size of compare value to compare with timer: 20 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   233      IfxStm_ComparatorSize_21Bits = 20,  /**< \brief Size of compare value to compare with timer: 21 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   234      IfxStm_ComparatorSize_22Bits = 21,  /**< \brief Size of compare value to compare with timer: 22 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   235      IfxStm_ComparatorSize_23Bits = 22,  /**< \brief Size of compare value to compare with timer: 23 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   236      IfxStm_ComparatorSize_24Bits = 23,  /**< \brief Size of compare value to compare with timer: 24 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   237      IfxStm_ComparatorSize_25Bits = 24,  /**< \brief Size of compare value to compare with timer: 25 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   238      IfxStm_ComparatorSize_26Bits = 25,  /**< \brief Size of compare value to compare with timer: 26 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   239      IfxStm_ComparatorSize_27Bits = 26,  /**< \brief Size of compare value to compare with timer: 27 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   240      IfxStm_ComparatorSize_28Bits = 27,  /**< \brief Size of compare value to compare with timer: 28 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   241      IfxStm_ComparatorSize_29Bits = 28,  /**< \brief Size of compare value to compare with timer: 29 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   242      IfxStm_ComparatorSize_30Bits = 29,  /**< \brief Size of compare value to compare with timer: 30 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   243      IfxStm_ComparatorSize_31Bits = 30,  /**< \brief Size of compare value to compare with timer: 31 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   244      IfxStm_ComparatorSize_32Bits = 31   /**< \brief Size of compare value to compare with timer: 32 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   245  } IfxStm_ComparatorSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   247  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   248   * Definition in Ifx_STM.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   250  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   251  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   252      IfxStm_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   253      IfxStm_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   254  } IfxStm_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   255  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   256  /** \brief OCDS Suspend Control (OCDS.SUS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   257   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   258  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   259  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   260      IfxStm_SuspendMode_none = 0,  /**< \brief No suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   261      IfxStm_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   262      IfxStm_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   263  } IfxStm_SuspendMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   265  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   268  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   271  /** \addtogroup IfxLld_Stm_Std_Structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   272   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   273  /** \brief Comparator Configuration Structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   275  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   276  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   277      IfxStm_Comparator          comparator;                /**< \brief Comparator Id defined in   MODULE_STMx.ISCR.B.CMP0IRR(x = 0, 1, 2). */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   278      IfxStm_ComparatorInterrupt comparatorInterrupt;       /**< \brief Comparator Interrupt request source defined in MODULE_SRC.STM.STM[index].SRx (x =0, 1). */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   279      IfxStm_ComparatorOffset    compareOffset;             /**< \brief Comparator start bit position  defined in MODULE_STMx.CMCON.B.MSTART0(x = 0,1,2). */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   280      IfxStm_ComparatorSize      compareSize;               /**< \brief Size of compare value to compare with timer defined in  MODULE_STMx.CMCON.B.MSIZE0(x = 0,1,2). */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   281      uint32                     ticks;                     /**< \brief count for next comparison from current timer count. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   282      Ifx_Priority               triggerPriority;           /**< \brief Interrupt priority. Range = 0 .. 255. 0 = interrupt is disabled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   283      IfxSrc_Tos                 typeOfService;             /**< \brief Type of service. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   284  } IfxStm_CompareConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   286  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   288  /** \addtogroup IfxLld_Stm_Std_Module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   289   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   291  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   292  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   293  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   294  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   295  /** \brief Returns system timer value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   296   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   297   * \return system timer value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   299  IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   301  /** \brief Returns the system timer frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   302   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   303   * \return the system timer frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   305  IFX_INLINE float32 IfxStm_getFrequency(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   307  /** \brief Returns the module's suspend state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   308   * TRUE :if module is suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   309   * FALSE:if module is not yet suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   310   * \param stm Pointer to STM module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   311   * \return Suspend status (TRUE / FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   313  IFX_INLINE boolean IfxStm_isModuleSuspended(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   315  /** \brief Configure the Module to Hard/Soft suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   316   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   317   * \param stm Pointer to STM module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   318   * \param mode Module suspend mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   319   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   320   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   321  IFX_INLINE void IfxStm_setSuspendMode(Ifx_STM *stm, IfxStm_SuspendMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   322  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   323  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   324  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   325  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   326  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   327  /** \brief Disables the Stm module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   328   * \param stm pointer to STM registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   329   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   330   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   331  IFX_EXTERN void IfxStm_disableModule(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   332  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   333  /** \brief enable suspend by debugger.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   334   * Note: The API will write into the OCS register only if OCDS is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   335   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   336   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   338  IFX_EXTERN void IfxStm_enableOcdsSuspend(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   339  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   340  /** \brief Returns the module index of the selected STM module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   341   * \param stm Pointer to STM module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   342   * \return STM module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   344  IFX_EXTERN Ifx_STM *IfxStm_getAddress(IfxStm_Index stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   346  /** \brief API to get the resource index of the STM specified.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   347   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   348   * \return system timer module index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   350  IFX_EXTERN IfxStm_Index IfxStm_getIndex(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   352  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   353  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   354  /** \addtogroup IfxLld_Stm_Std_Timer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   355   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   357  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   358  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   359  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   360  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   361  /** \brief Returns the lower system timer value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   362   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   363   * \return the lower system timer value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   364   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   365  IFX_INLINE uint32 IfxStm_getLower(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   366  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   367  /** \brief Gets the TIM3 couter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   368   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   369   * \return TIM3 counter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   370   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   371  IFX_INLINE uint32 IfxStm_getOffset12Timer(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   372  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   373  /** \brief Gets the TIM4 couter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   374   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   375   * \return TIM4 counter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   377  IFX_INLINE uint32 IfxStm_getOffset16Timer(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   379  /** \brief Gets the TIM5 couter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   380   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   381   * \return TIM5 counter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   382   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   383  IFX_INLINE uint32 IfxStm_getOffset20Timer(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   384  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   385  /** \brief Gets the TIM6 couter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   386   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   387   * \return TIM6 counter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   388   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   389  IFX_INLINE uint32 IfxStm_getOffset32Timer(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   390  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   391  /** \brief Gets the TIM1 couter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   392   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   393   * \return TIM1 counter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   394   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   395  IFX_INLINE uint32 IfxStm_getOffset4Timer(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   396  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   397  /** \brief Gets the TIM2 couter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   398   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   399   * \return TIM2 counter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   400   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   401  IFX_INLINE uint32 IfxStm_getOffset8Timer(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   403  /** \brief Returns the timer value shifted right by offset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   404   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   405   * \param offset offset value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   406   * \return the lower system timer value shifted by offset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   408  IFX_INLINE uint32 IfxStm_getOffsetTimer(Ifx_STM *stm, uint8 offset);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   410  /** \brief Wait for requested time.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   411   * The macro waits in while loop for the specified time in system timer ticks.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   412   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   413   * \param ticks ticks Wait time in system timer ticks.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   414   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   415   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   416  IFX_INLINE void IfxStm_waitTicks(Ifx_STM *stm, uint32 ticks);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   417  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   418  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   419  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   420  /** \addtogroup IfxLld_Stm_Std_Comparator
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   421   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   422  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   423  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   424  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   425  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   426  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   427  /** \brief Returns the updated compare register value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   428   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   429   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   430   * \return The compare value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   431   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   432  IFX_INLINE uint32 IfxStm_getCompare(Ifx_STM *stm, IfxStm_Comparator comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   434  /** \brief Returns the number of ticks for the selected micro seconds based on the STM frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   435   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   436   * \param microSeconds Number of micro seconds that need to be converted to ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   437   * \return ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   439  IFX_INLINE sint32 IfxStm_getTicksFromMicroseconds(Ifx_STM *stm, uint32 microSeconds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   441  /** \brief Returns the number of ticks for the selected milli seconds based on the STM frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   442   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   443   * \param milliSeconds Number of micro seconds that need to be converted to ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   444   * \return ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   446  IFX_INLINE sint32 IfxStm_getTicksFromMilliseconds(Ifx_STM *stm, uint32 milliSeconds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   448  /** \brief Update the compare register value increased with given ticks.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   449   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   450   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   451   * \param ticks count for next comparison from current timer count.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   454  IFX_INLINE void IfxStm_increaseCompare(Ifx_STM *stm, IfxStm_Comparator comparator, uint32 ticks);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   456  /** \brief Update the compare register value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   457   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   458   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   459   * \param ticks count for next comparison.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   460   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   462  IFX_INLINE void IfxStm_updateCompare(Ifx_STM *stm, IfxStm_Comparator comparator, uint32 ticks);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   464  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   465  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   466  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   468  /** \brief Clear the compare interrupt flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   469   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   470   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   471   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   473  IFX_EXTERN void IfxStm_clearCompareFlag(Ifx_STM *stm, IfxStm_Comparator comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   474  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   475  /** \brief Disables the compare interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   476   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   477   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   480  IFX_EXTERN void IfxStm_disableComparatorInterrupt(Ifx_STM *stm, IfxStm_Comparator comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   482  /** \brief Enables the compare interrupt .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   483   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   484   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   485   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   486   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   487  IFX_EXTERN void IfxStm_enableComparatorInterrupt(Ifx_STM *stm, IfxStm_Comparator comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   489  /** \brief get the interrupt source pointer for the comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   490   * \param stm pointer to the STM registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   491   * \param comparator comparator selection comparator
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   492   * \return pointer to the interrupt source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   493   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   494  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxStm_getSrcPointer(Ifx_STM *stm, IfxStm_Comparator comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   495  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   496  /** \brief Initialise stm compare register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   497   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   498   * \param config pointer to configuration structure.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   499   * \return TRUE if Comparator successful otherwise FLASE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   501  IFX_EXTERN boolean IfxStm_initCompare(Ifx_STM *stm, const IfxStm_CompareConfig *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   503  /** \brief Initialise compare configuration with default values.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   504   * \param config pointer to configuration structure.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   507  IFX_EXTERN void IfxStm_initCompareConfig(IfxStm_CompareConfig *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   509  /** \brief Indicates if the compare interrupt flag is set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   510   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   511   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   512   * \return TRUE if the comparator flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   513   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   514  IFX_EXTERN boolean IfxStm_isCompareFlagSet(Ifx_STM *stm, IfxStm_Comparator comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   515  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   516  /** \brief Set the compare behavior
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   517   * \param stm pointer to System timer module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   518   * \param comparator comparator selection comparator
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   519   * \param offset Comparator start bit position
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   520   * \param size Size of compare value to compare with timer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   521   * \param interrupt Comparator Interrupt request source defined
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   522   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   523   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   524  IFX_EXTERN void IfxStm_setCompareControl(Ifx_STM *stm, IfxStm_Comparator comparator, IfxStm_ComparatorOffset offset, IfxStm_ComparatorSize size, IfxStm_ComparatorInterrupt interrupt);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   526  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   528  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   529  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   530  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   532  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   533   * \param stm pointer STM registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   534   * \param mode mode selection (enable/ disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   535   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   537  IFX_INLINE void IfxStm_setSleepMode(Ifx_STM *stm, IfxStm_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   539  /** \brief Returns the STM counter value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   540   * \return Returns the STM counter value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   541   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   542  IFX_INLINE sint64 IfxStm_now(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   543  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   544  /** \brief Get the deadline value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   545   * \param timeout timeout value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   546   * \return Return the deadline
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   547   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   548  IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   550  /** \brief Checked if deadline has occured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   551   * \param deadLine Deadline value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   552   * \return Return if deadline occured or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   553   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   554  IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   555  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   556  /** \brief Waits for a specific time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   557   * \param timeout timeout value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   558   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   560  IFX_INLINE void IfxStm_wait(sint64 timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   561  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   562  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   563  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   564  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   565  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   566  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   567   * \param stm pointer to STM registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   568   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   570  IFX_EXTERN void IfxStm_resetModule(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   572  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   573  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   574  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   575  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   576  IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   577  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   578      uint64 result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   579  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   580      result  = stm->TIM0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   581      result |= ((uint64)stm->CAP.U) << 32;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   583      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   584  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   585  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   587  IFX_INLINE uint32 IfxStm_getCompare(Ifx_STM *stm, IfxStm_Comparator comparator)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   588  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   589      return stm->CMP[comparator].B.CMPVAL;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   590  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   593  IFX_INLINE float32 IfxStm_getFrequency(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   594  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   595      IFX_UNUSED_PARAMETER(stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   596      float32 result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   598      result = IfxScuCcu_getStmFrequency();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   599  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   600      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   601  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   602  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   604  IFX_INLINE uint32 IfxStm_getLower(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   605  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   606      return stm->TIM0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   607  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   609  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   610  IFX_INLINE uint32 IfxStm_getOffset12Timer(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   611  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   612      return stm->TIM3.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   613  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   615  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   616  IFX_INLINE uint32 IfxStm_getOffset16Timer(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   617  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   618      return stm->TIM4.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   619  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   620  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   622  IFX_INLINE uint32 IfxStm_getOffset20Timer(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   623  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   624      return stm->TIM5.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   625  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   627  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   628  IFX_INLINE uint32 IfxStm_getOffset32Timer(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   629  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   630      return stm->TIM6.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   631  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   634  IFX_INLINE uint32 IfxStm_getOffset4Timer(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   635  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   636      return stm->TIM1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   637  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   640  IFX_INLINE uint32 IfxStm_getOffset8Timer(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   641  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   642      return stm->TIM2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   643  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   644  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   646  IFX_INLINE uint32 IfxStm_getOffsetTimer(Ifx_STM *stm, uint8 offset)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   647  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   648      uint64 now;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   649  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   650      now = IfxStm_get(stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   651  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   652      return (uint32)(now >> offset);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   653  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   656  IFX_INLINE sint32 IfxStm_getTicksFromMicroseconds(Ifx_STM *stm, uint32 microSeconds)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   657  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   658      sint32 freq = (sint32)IfxStm_getFrequency(stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   659      return (freq / (1000000)) * microSeconds;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   663  IFX_INLINE sint32 IfxStm_getTicksFromMilliseconds(Ifx_STM *stm, uint32 milliSeconds)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   665      sint32 freq = (sint32)IfxStm_getFrequency(stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   666      return (freq / (1000)) * milliSeconds;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   667  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   669  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   670  IFX_INLINE void IfxStm_increaseCompare(Ifx_STM *stm, IfxStm_Comparator comparator, uint32 ticks)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   671  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   672      stm->CMP[comparator].B.CMPVAL = stm->CMP[comparator].B.CMPVAL + ticks;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   673  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   674  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   675  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   676  IFX_INLINE boolean IfxStm_isModuleSuspended(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   677  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   678      Ifx_STM_OCS ocs;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   679  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   680      // read the status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   681      ocs.U = stm->OCS.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   682  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   683      // return the status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   684      return ocs.B.SUSSTA;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   685  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   686  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   687  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   688  IFX_INLINE void IfxStm_setSleepMode(Ifx_STM *stm, IfxStm_SleepMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   689  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   690      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   691      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   692      stm->CLC.B.EDIS = mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   693      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   694  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   695  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   696  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   697  IFX_INLINE void IfxStm_setSuspendMode(Ifx_STM *stm, IfxStm_SuspendMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   698  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   699      Ifx_STM_OCS ocs;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   700  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   701      /* Only if OCDS is enabled write into the OCS register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   702      if (MODULE_CBS.OSTATE.B.OEN == 1U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   703      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   704          // remove protection and configure the suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   705          ocs.B.SUS_P      = 1;
	extr.u	d15,d15,#24,#8
.L485:
	or	d15,#16
.L805:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   706          ocs.B.SUS        = mode;
	insert	d15,d15,#1,#0,#4
.L486:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   707          stm->OCS.U       = ocs.U;
	insert	d15,d15,d15,#24,#8
	st.w	[a15]232,d15
.L806:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   708          stm->OCS.B.SUS_P = 0;
	ld.bu	d15,[a15]235
.L487:
	insert	d15,d15,#0,#4,#1
	st.b	[a15]235,d15

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   702      if (MODULE_CBS.OSTATE.B.OEN == 1U)      (inlined)
.L8:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   229  #ifdef RT_USING_HEAP
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   230      /* initialize heap */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   231      rt_system_heap_init(__HEAP, __HEAP_END);
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   232  #endif
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   233  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   234      /* Set-up the timer interrupt. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   235      rt_hw_systick_init();
	call	rt_hw_systick_init
.L807:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   236      /* USART driver initialization is open by default */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   237  #ifdef RT_USING_SERIAL
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   238      rt_hw_usart_init();
	call	rt_hw_usart_init
.L808:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   239  #endif
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   240  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   241      /* Set the shell console output device */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   242  #ifdef RT_USING_CONSOLE
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   243      // rt_console_set_device(RT_CONSOLE_DEVICE_NAME);
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   244  #endif
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   245  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   246      /* Board underlying hardware initialization */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   247  #ifdef RT_USING_COMPONENTS_INIT
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   248      rt_components_board_init();
	call	rt_components_board_init
.L809:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   249  #endif
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   250  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   251      IfxSrc_init(GPSR[TRICORE_CPU_ID], (IfxSrc_Tos)TRICORE_CPU_ID, 1);
	mfcr	d15,#65052
.L810:
	and	d15,#15
	lea	a2,GPSR
.L811:
	addsc.a	a15,a2,d15,#2
	ld.a	a15,[a15]
.L812:
	mfcr	d15,#65052
	and	d0,d15,#15
.L445:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     2   * \file IfxSrc.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     3   * \brief SRC  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     4   * \ingroup IfxLld_Src
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     7   * \copyright Copyright (c) 2016 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    41   * \defgroup IfxLld_Src SRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    42   * \addtogroup IfxLld_Src
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    43   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    44   * \defgroup IfxLld_Src_Usage How to use Service Request Mechanism?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    45   * \addtogroup IfxLld_Src_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    46   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    48   * For Aurix controller peripherals that can generate service requests is connected to one
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    49   * or more Service Request Nodes (SRNs) in the central Interrupt Router(IR) module. Refer to Controller User Manual for more details\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    51   * IfxSrc driver provides the APIs to configure and control service requests. Refer \ref IfxLld_Src_Usage for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    52   * details of these APIs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    53   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    54   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    55   * \section Ifx_Src_UsageInit Initialize the Service Request Node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    56   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    57   * Service request node is initialized to configure the following,\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    58   * 1) Route the interrupt trigger to service provider, which are:\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    59   *  __a. One of the available CPUs or\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    60   *  __b. DMA controller\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    61   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    62   * 2) Priority of CPU Interrupt or DMA Trigger.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    63   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    64   * For Interrupt or DMA to be correctly triggered, following steps are to be done in the user code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    65   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    66   * \subsection Ifx_Src_UsageInitStep1 Step1: Configure the Node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    68   * User must configure the service request node in the application / driver files.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    69   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    70   * \subsection Ifx_Src_UsageInitStep2 Step2: Enable the Trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    71   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    72   * Enable the service request node to connect the trigger event from the hardware to service provider.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    73   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    74   * Example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    75   * Following example show the configuration for STM0 Service request 0 trigger configured to trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    76   * CPU1 with the priority specified by IFX_INTPRIO_STM0 (from the example at IfxCpu_Irq)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    77   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    78   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    79   * //file: myApplication.c
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    80   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    81   * #include "Ifx_IntPrioDef.h" // to get the priority numbers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    82   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    83   * void myDriverInitFunction(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    84   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    85   *    // driver init code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    86   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    87   *    // Step1: Call the function to route the trigger from for SRC_STM0_SR0 to CPU1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    88   *    // and priority specified at Ifx_IntPrioDef.h globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    89   *    IfxSrc_init(&MODULE_SRC.STM.STM[0].SR[0], IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    90   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    91   *    // Step2: Enable the service request node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    92   *    IfxSrc_enable(&MODULE_SRC.STM.STM[0].SR[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    93   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    94   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    95   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    96   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    97   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    99   * \defgroup IfxLld_Src_Std_Service_Request Service Request Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   100   * \ingroup IfxLld_Src_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   101   * \defgroup IfxLld_Src_Std_Module Module Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   102   * \ingroup IfxLld_Src_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   103   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   105  #ifndef IFXSRC_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   106  #define IFXSRC_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   107  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   108  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   109  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   110  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   111  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   112  #include "_Impl/IfxSrc_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   113  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   114  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   115  /** \addtogroup IfxLld_Src_Std_Service_Request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   116   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   117  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   118  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   119  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   120  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   122  /** \brief Resets the overrun flag of the Service Request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   123   * \param src pointer to the Service Request Control register which the overrun flag should be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   124   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   126   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   127   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   129  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   131  /** \brief Resets a specific interrupt service by software.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   132   * \param src pointer to the Service Request Control register which the request should be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   135   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   136   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   137   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   138  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   139  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   140  /** \brief Gets the current overrun status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   141   * \param src pointer to the Service Request Control register for which the overrun status should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   142   * \return current service request control overrun status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   143   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   144   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   147  IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   149  /** \brief Gets the current request status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   150   * \param src pointer to the Service Request Control register for which the request status should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   151   * \return current service request control request status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   152   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   153   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   154   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   156  IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   158  /** \brief Requests a specific interrupt service by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   159   * \param src pointer to the Service Request Control register which the interrupt has to be requested.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   160   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   161   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   162   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   163   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   164   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   165  IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   167  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   169  /** \addtogroup IfxLld_Src_Std_Module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   170   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   171  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   172  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   173  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   174  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   176  /** \brief DeInitializes the service request control register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   177   * \param src pointer to the Service Request Control register which should be deinitialised.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   178   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   179   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   180   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   181   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   182   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   183  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   184  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   185  /** \brief Disables a specific interrupt service request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   186   * \param src pointer to the Service Request Control register for which the interrupt has to be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   187   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   188   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   189   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   190   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   192  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   194  /** \brief Enables a specific interrupt service request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   195   * \param src pointer to the Service Request Control register for which the interrupt has to be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   196   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   197   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   198   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   199   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   200   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   201  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   202  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   203  /** \brief Initializes the service request control register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   204   * \param src pointer to the Service Request Control register which should be initialised.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   205   * \param typOfService type of interrupt service provider.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   206   * \param priority Interrupt priority.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   207   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   208   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   209   * Get the peripheral service control register which request need to be serviced and assign this service to any of service providers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   210   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   211   * //define the interrupt priority
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   212   * #define IFXASCLIN0_TX_INTPRIO 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   213   * //get the service request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   214   * volatile Ifx_SRC_SRCR *src = IfxAsclin_getSrcPointerRx( &MODULE_ASCLIN0 );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   215   * //initlaise the service request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   216   * IfxSrc_init( src, IfxSrc_Tos_cpu0, IFXASCLIN0_TX_INTPRIO );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   217   * // enable the service
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   218   * IfxSrc_enable( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   219   * //check for service request flags and clear if they occur
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   220   * if ( IfxSrc_isRequested( src ) == TRUE )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   221   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   222   *    IfxSrc_clearRequest( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   223   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   224   * if ( IfxSrc_isOverrun( src ) == TRUE )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   225   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   226   *      IfxSrc_clearOverrun( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   227   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   228   * // Atlast deinitialise the service control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   229   * IfxSrc_deinit( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   230   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   231   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   233  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   235  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   237  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   238  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   239  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   241  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   242  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   243      src->B.IOVCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   244  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   245  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   247  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   248  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   249      src->B.CLRR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   250  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   253  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   254  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   255      src->U = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   256  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   259  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   261      src->B.SRE = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   262  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   265  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   266  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   267      src->B.SRE = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   268  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   269  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   271  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   272  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   273      src->B.SRPN = priority;
	mov	d15,#1
	st.b	[a15],d15
.L813:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   274      src->B.TOS  = typOfService;
	ld.bu	d15,[a15]1
.L814:
	insert	d15,d15,d0,#3,#3
	st.b	[a15]1,d15
.L450:
	ld.bu	d15,[a15]3
.L815:
	or	d15,#2
	st.b	[a15]3,d15
.L446:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   252      IfxSrc_enable(GPSR[TRICORE_CPU_ID]);
	mfcr	d15,#65052
	and	d15,#15
.L816:
	addsc.a	a15,a2,d15,#2
	ld.a	a15,[a15]
.L452:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     2   * \file IfxSrc.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     3   * \brief SRC  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     4   * \ingroup IfxLld_Src
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     7   * \copyright Copyright (c) 2016 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    41   * \defgroup IfxLld_Src SRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    42   * \addtogroup IfxLld_Src
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    43   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    44   * \defgroup IfxLld_Src_Usage How to use Service Request Mechanism?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    45   * \addtogroup IfxLld_Src_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    46   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    48   * For Aurix controller peripherals that can generate service requests is connected to one
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    49   * or more Service Request Nodes (SRNs) in the central Interrupt Router(IR) module. Refer to Controller User Manual for more details\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    51   * IfxSrc driver provides the APIs to configure and control service requests. Refer \ref IfxLld_Src_Usage for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    52   * details of these APIs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    53   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    54   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    55   * \section Ifx_Src_UsageInit Initialize the Service Request Node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    56   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    57   * Service request node is initialized to configure the following,\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    58   * 1) Route the interrupt trigger to service provider, which are:\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    59   *  __a. One of the available CPUs or\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    60   *  __b. DMA controller\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    61   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    62   * 2) Priority of CPU Interrupt or DMA Trigger.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    63   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    64   * For Interrupt or DMA to be correctly triggered, following steps are to be done in the user code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    65   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    66   * \subsection Ifx_Src_UsageInitStep1 Step1: Configure the Node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    68   * User must configure the service request node in the application / driver files.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    69   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    70   * \subsection Ifx_Src_UsageInitStep2 Step2: Enable the Trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    71   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    72   * Enable the service request node to connect the trigger event from the hardware to service provider.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    73   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    74   * Example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    75   * Following example show the configuration for STM0 Service request 0 trigger configured to trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    76   * CPU1 with the priority specified by IFX_INTPRIO_STM0 (from the example at IfxCpu_Irq)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    77   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    78   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    79   * //file: myApplication.c
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    80   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    81   * #include "Ifx_IntPrioDef.h" // to get the priority numbers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    82   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    83   * void myDriverInitFunction(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    84   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    85   *    // driver init code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    86   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    87   *    // Step1: Call the function to route the trigger from for SRC_STM0_SR0 to CPU1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    88   *    // and priority specified at Ifx_IntPrioDef.h globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    89   *    IfxSrc_init(&MODULE_SRC.STM.STM[0].SR[0], IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    90   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    91   *    // Step2: Enable the service request node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    92   *    IfxSrc_enable(&MODULE_SRC.STM.STM[0].SR[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    93   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    94   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    95   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    96   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    97   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    99   * \defgroup IfxLld_Src_Std_Service_Request Service Request Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   100   * \ingroup IfxLld_Src_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   101   * \defgroup IfxLld_Src_Std_Module Module Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   102   * \ingroup IfxLld_Src_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   103   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   105  #ifndef IFXSRC_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   106  #define IFXSRC_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   107  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   108  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   109  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   110  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   111  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   112  #include "_Impl/IfxSrc_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   113  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   114  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   115  /** \addtogroup IfxLld_Src_Std_Service_Request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   116   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   117  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   118  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   119  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   120  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   122  /** \brief Resets the overrun flag of the Service Request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   123   * \param src pointer to the Service Request Control register which the overrun flag should be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   124   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   126   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   127   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   129  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   131  /** \brief Resets a specific interrupt service by software.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   132   * \param src pointer to the Service Request Control register which the request should be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   135   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   136   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   137   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   138  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   139  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   140  /** \brief Gets the current overrun status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   141   * \param src pointer to the Service Request Control register for which the overrun status should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   142   * \return current service request control overrun status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   143   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   144   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   147  IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   149  /** \brief Gets the current request status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   150   * \param src pointer to the Service Request Control register for which the request status should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   151   * \return current service request control request status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   152   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   153   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   154   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   156  IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   158  /** \brief Requests a specific interrupt service by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   159   * \param src pointer to the Service Request Control register which the interrupt has to be requested.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   160   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   161   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   162   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   163   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   164   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   165  IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   167  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   169  /** \addtogroup IfxLld_Src_Std_Module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   170   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   171  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   172  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   173  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   174  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   176  /** \brief DeInitializes the service request control register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   177   * \param src pointer to the Service Request Control register which should be deinitialised.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   178   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   179   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   180   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   181   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   182   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   183  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   184  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   185  /** \brief Disables a specific interrupt service request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   186   * \param src pointer to the Service Request Control register for which the interrupt has to be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   187   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   188   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   189   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   190   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   192  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   194  /** \brief Enables a specific interrupt service request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   195   * \param src pointer to the Service Request Control register for which the interrupt has to be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   196   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   197   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   198   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   199   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   200   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   201  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   202  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   203  /** \brief Initializes the service request control register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   204   * \param src pointer to the Service Request Control register which should be initialised.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   205   * \param typOfService type of interrupt service provider.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   206   * \param priority Interrupt priority.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   207   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   208   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   209   * Get the peripheral service control register which request need to be serviced and assign this service to any of service providers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   210   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   211   * //define the interrupt priority
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   212   * #define IFXASCLIN0_TX_INTPRIO 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   213   * //get the service request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   214   * volatile Ifx_SRC_SRCR *src = IfxAsclin_getSrcPointerRx( &MODULE_ASCLIN0 );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   215   * //initlaise the service request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   216   * IfxSrc_init( src, IfxSrc_Tos_cpu0, IFXASCLIN0_TX_INTPRIO );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   217   * // enable the service
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   218   * IfxSrc_enable( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   219   * //check for service request flags and clear if they occur
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   220   * if ( IfxSrc_isRequested( src ) == TRUE )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   221   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   222   *    IfxSrc_clearRequest( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   223   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   224   * if ( IfxSrc_isOverrun( src ) == TRUE )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   225   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   226   *      IfxSrc_clearOverrun( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   227   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   228   * // Atlast deinitialise the service control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   229   * IfxSrc_deinit( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   230   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   231   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   233  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   235  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   237  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   238  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   239  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   241  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   242  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   243      src->B.IOVCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   244  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   245  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   247  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   248  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   249      src->B.CLRR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   250  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   253  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   254  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   255      src->U = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   256  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   259  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   261      src->B.SRE = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   262  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   265  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   266  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   267      src->B.SRE = 1;
	ld.bu	d15,[a15]1
.L817:
	or	d15,#4
	st.b	[a15]1,d15
.L453:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   253  }
	ret
.L432:
	
__rt_hw_board_init_function_end:
	.size	rt_hw_board_init,__rt_hw_board_init_function_end-rt_hw_board_init
.L226:
	; End of function
	
	.sdecl	'.text.cpuport.rt_hw_context_switch_to',code,cluster('rt_hw_context_switch_to')
	.sect	'.text.cpuport.rt_hw_context_switch_to'
	.align	2
	
	.global	rt_hw_context_switch_to

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   254  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   255  #ifdef RT_USING_SMP
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   256  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   257  void rt_hw_context_switch_to(rt_ubase_t to, struct rt_thread *to_thread)
; Function rt_hw_context_switch_to
.L66:
rt_hw_context_switch_to:	.type	func
	mov	d8,d4
	mov.aa	a15,a4
.L489:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   258  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   259      rt_base_t levelCore0,levelCore1;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   260      rt_base_t level;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   261  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   262      switch (__mfcr(CPU_CORE_ID))
	mfcr	d15,#65052
.L610:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   263      {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   264      case 0:
	jeq	d15,#0,.L9
.L611:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   265          levelCore0 = rt_hw_local_irq_disable();
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   266          rt_interrupt_to_thread_core0 = (*((unsigned long *)to));
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   267          rt_cpu_self()->current_thread = to_thread;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   268          rt_hw_local_irq_enable(levelCore0);
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   269          __syscall( 0 );
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   270          break;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   271      case 1:
	jeq	d15,#1,.L10
.L612:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   272          levelCore1 = rt_hw_local_irq_disable();
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   273          rt_interrupt_to_thread_core1 = (*((unsigned long *)to));
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   274          rt_cpu_self()->current_thread = to_thread;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   275          rt_hw_local_irq_enable(levelCore1);
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   276          __syscall( 1 );
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   277          break;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   278      
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   279      default:
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   280          break;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   281      }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   282  }
	ret
.L9:
	call	rt_hw_local_irq_disable
.L488:
	mov.a	a2,d8
.L491:
	mov	d15,d2
.L492:
	ld.w	d0,[a2]
.L613:
	st.w	rt_interrupt_to_thread_core0,d0
.L614:
	call	rt_cpu_self
.L490:
	st.a	[a2],a15
.L615:
	mov	d4,d15
	call	rt_hw_local_irq_enable
.L616:
	syscall	#0
.L617:
	ret
.L10:
	call	rt_hw_local_irq_disable
.L493:
	mov.a	a2,d8
.L495:
	mov	d15,d2
.L496:
	ld.w	d0,[a2]
.L618:
	st.w	rt_interrupt_to_thread_core1,d0
.L619:
	call	rt_cpu_self
.L494:
	st.a	[a2],a15
.L620:
	mov	d4,d15
	call	rt_hw_local_irq_enable
.L621:
	syscall	#1
.L622:
	ret
.L329:
	
__rt_hw_context_switch_to_function_end:
	.size	rt_hw_context_switch_to,__rt_hw_context_switch_to_function_end-rt_hw_context_switch_to
.L131:
	; End of function
	
	.sdecl	'.text.cpuport.rt_hw_context_switch_interrupt',code,cluster('rt_hw_context_switch_interrupt')
	.sect	'.text.cpuport.rt_hw_context_switch_interrupt'
	.align	2
	
	.global	rt_hw_context_switch_interrupt

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   283  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   284  void rt_hw_context_switch_interrupt(void *context, rt_ubase_t from, rt_ubase_t to, struct rt_thread *to_thread)
; Function rt_hw_context_switch_interrupt
.L68:
rt_hw_context_switch_interrupt:	.type	func
	mov	e8,d5,d4
	mov.aa	a12,a5
.L508:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   285  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   286      rt_base_t levelCore0,levelCore1;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   287  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   288      switch (__mfcr(CPU_CORE_ID))
	mfcr	d15,#65052
.L627:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   289      {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   290      case 0:
	jeq	d15,#0,.L13
.L628:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   291          levelCore0 = rt_hw_local_irq_disable();
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   292          rt_interrupt_from_thread_core0 = (*( (unsigned long *)from ));
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   293          rt_interrupt_to_thread_core0 = (*((unsigned long *)to));
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   294          rt_cpu_self()->current_thread = to_thread;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   295          rt_hw_local_irq_enable(levelCore0);
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   296          break;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   297      case 1:
	jeq	d15,#1,.L14
.L629:
	j	.L15
.L13:
	call	rt_hw_local_irq_disable
.L498:
	fcall	.cocofun_7
.L497:
	j	.L16
.L14:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   298          levelCore1 = rt_hw_local_irq_disable();
	call	rt_hw_local_irq_disable
.L502:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   299          rt_interrupt_from_thread_core1 = (*( (unsigned long *)from ));
	fcall	.cocofun_8

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   300          rt_interrupt_to_thread_core1 = (*((unsigned long *)to));
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   301          rt_cpu_self()->current_thread = to_thread;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   302          rt_hw_local_irq_enable(levelCore1);
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   303          break;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   304      default:
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   305          break;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   306      }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   307      /* 在保存完线程 CSA LinkWord 后,会给 SETR 位置 1，这样会触发一个异常陷阱函数。在这个陷阱函数里才会去真正的切换线程。*/
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   308      GPSR[TRICORE_CPU_ID]->B.SETR = 1;
.L16:
	mov	d15,d2
	call	rt_cpu_self
.L506:
	mov	d4,d15
	st.a	[a2],a12
.L507:
	call	rt_hw_local_irq_enable
.L15:
	mfcr	d15,#65052
	fcall	.cocofun_9
.L630:
	or	d15,#4
	st.b	[a15],d15
.L631:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   309  }
	ret
.L334:
	
__rt_hw_context_switch_interrupt_function_end:
	.size	rt_hw_context_switch_interrupt,__rt_hw_context_switch_interrupt_function_end-rt_hw_context_switch_interrupt
.L136:
	; End of function
	
	.sdecl	'.text.cpuport..cocofun_8',code,cluster('.cocofun_8')
	.sect	'.text.cpuport..cocofun_8'
	.align	2
; Function .cocofun_8
.L70:
.cocofun_8:	.type	func
; Function body .cocofun_8, coco_iter:0
	mov.a	a15,d8
.L503:
	ld.w	d0,[a15]
.L857:
	st.w	rt_interrupt_from_thread_core1,d0
.L505:
	mov.a	a15,d9
.L504:
	ld.w	d0,[a15]
.L858:
	st.w	rt_interrupt_to_thread_core1,d0
.L859:
	fret
.L261:
	; End of function
	.sdecl	'.text.cpuport..cocofun_7',code,cluster('.cocofun_7')
	.sect	'.text.cpuport..cocofun_7'
	.align	2
; Function .cocofun_7
.L72:
.cocofun_7:	.type	func
; Function body .cocofun_7, coco_iter:0
	mov.a	a15,d8
.L499:
	ld.w	d0,[a15]
.L850:
	st.w	rt_interrupt_from_thread_core0,d0
.L501:
	mov.a	a15,d9
.L500:
	ld.w	d0,[a15]
.L851:
	st.w	rt_interrupt_to_thread_core0,d0
.L852:
	fret
.L256:
	; End of function
	.sdecl	'.text.cpuport.rt_hw_context_switch',code,cluster('rt_hw_context_switch')
	.sect	'.text.cpuport.rt_hw_context_switch'
	.align	2
	
	.global	rt_hw_context_switch

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   310  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   311  void rt_hw_context_switch(rt_ubase_t from, rt_ubase_t to, struct rt_thread *to_thread)
; Function rt_hw_context_switch
.L74:
rt_hw_context_switch:	.type	func
	mov	e8,d5,d4
	mov.aa	a12,a4
.L517:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   312  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   313      rt_base_t levelCore0,levelCore1;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   314      
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   315      switch (__mfcr(CPU_CORE_ID))
	mfcr	d15,#65052
.L593:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   316      {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   317      case 0:
	jeq	d15,#0,.L17
.L594:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   318          levelCore0 = rt_hw_local_irq_disable();
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   319          rt_interrupt_from_thread_core0 = (*( (unsigned long *)from ));
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   320          rt_interrupt_to_thread_core0 = (*((unsigned long *)to));
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   321          to = RT_NULL;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   322          rt_cpu_self()->current_thread = to_thread;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   323          rt_hw_local_irq_enable(levelCore0);
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   324          /* 在保存完线程 CSA LinkWord 后，判断这次线程切换是否是 systick 触发的线程切换。*/
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   325          if(rt_thread_switch_interrupt_flag_core0 == 0)
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   326          {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   327              extern rt_hw_spinlock_t _cpus_lock;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   328              if(_cpus_lock.slock)
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   329              {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   330                  rt_hw_spin_unlock(&_cpus_lock);
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   331              }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   332              // rt_interrupt_from_thread_core0 = (*( (unsigned long *)from ));
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   333              /* 如果不是 systick 引发的线程切换，那么就触发一个线程切换的异常函数，这个异常函数里会真正做线程切换的事情。*/
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   334              __syscall( 0 );
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   335          }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   336          break;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   337      case 1:
	jeq	d15,#1,.L18
.L595:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   338          levelCore1 = rt_hw_local_irq_disable();
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   339          rt_interrupt_from_thread_core1 = (*( (unsigned long *)from ));
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   340          rt_interrupt_to_thread_core1 = (*((unsigned long *)to));
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   341          to = RT_NULL;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   342          rt_cpu_self()->current_thread = to_thread;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   343          rt_hw_local_irq_enable(levelCore1);
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   344          /* 在保存完线程 CSA LinkWord 后，判断这次线程切换是否是 systick 触发的线程切换。*/
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   345          if(rt_thread_switch_interrupt_flag_core1 == 0)
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   346          {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   347              extern rt_hw_spinlock_t _cpus_lock;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   348              if(_cpus_lock.slock)
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   349              {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   350                  rt_hw_spin_unlock(&_cpus_lock);
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   351              }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   352              // rt_interrupt_from_thread_core0 = (*( (unsigned long *)from ));
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   353              /* 如果不是 systick 引发的线程切换，那么就触发一个线程切换的异常函数，这个异常函数里会真正做线程切换的事情。*/
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   354              __syscall( 1 );
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   355          }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   356          break;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   357      default:
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   358          break;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   359      }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   360  }
	ret
.L17:
	call	rt_hw_local_irq_disable
.L509:
	mov	d15,d2
	fcall	.cocofun_7
.L510:
	call	rt_cpu_self
.L511:
	st.a	[a2],a12
.L596:
	mov	d4,d15
	call	rt_hw_local_irq_enable
.L597:
	ld.w	d15,rt_thread_switch_interrupt_flag_core0
.L512:
	jne	d15,#0,.L20
.L327:
	lea	a4,_cpus_lock
.L598:
	ld.w	d15,[a4]
.L599:
	jeq	d15,#0,.L21
.L600:
	call	rt_hw_spin_unlock
.L21:
	syscall	#0
.L20:
	ret
.L18:
	call	rt_hw_local_irq_disable
.L513:
	mov	d15,d2
	fcall	.cocofun_8
.L514:
	call	rt_cpu_self
.L516:
	st.a	[a2],a12
.L601:
	mov	d4,d15
	call	rt_hw_local_irq_enable
.L602:
	ld.w	d15,rt_thread_switch_interrupt_flag_core1
.L515:
	jne	d15,#0,.L23
.L328:
	lea	a4,_cpus_lock
.L603:
	ld.w	d15,[a4]
.L604:
	jeq	d15,#0,.L24
.L605:
	call	rt_hw_spin_unlock
.L24:
	syscall	#1
.L23:
	ret
.L319:
	
__rt_hw_context_switch_function_end:
	.size	rt_hw_context_switch,__rt_hw_context_switch_function_end-rt_hw_context_switch
.L126:
	; End of function
	
	.sdecl	'.text.cpuport.rt_hw_secondary_cpu_up',code,cluster('rt_hw_secondary_cpu_up')
	.sect	'.text.cpuport.rt_hw_secondary_cpu_up'
	.align	2
	
	.global	rt_hw_secondary_cpu_up

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   361  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   362  void rt_hw_secondary_cpu_up(void)
; Function rt_hw_secondary_cpu_up
.L76:
rt_hw_secondary_cpu_up:	.type	func

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   363  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   364  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   365  }
	ret
.L366:
	
__rt_hw_secondary_cpu_up_function_end:
	.size	rt_hw_secondary_cpu_up,__rt_hw_secondary_cpu_up_function_end-rt_hw_secondary_cpu_up
.L166:
	; End of function
	
	.sdecl	'.text.cpuport.Core1_init',code,cluster('Core1_init')
	.sect	'.text.cpuport.Core1_init'
	.align	2
	
	.global	Core1_init

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   366  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   367  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   368  void Core1_init(void)
; Function Core1_init
.L78:
Core1_init:	.type	func
	sub.a	a10,#48
.L518:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   369  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   370      #define TRICORE_CPU1_ID     1
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   371  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   372      IfxStm_Timer_Config timer_config;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   373      IfxStm_Timer_initConfig(&timer_config, STMs[TRICORE_CPU1_ID]);
	mov.aa	a4,a10
.L678:
	lea	a5,0xf0001100
	call	IfxStm_Timer_initConfig
.L679:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   374  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   375      timer_config.base.frequency = RT_TICK_PER_SECOND;
	movh	d15,#17530
	st.w	[a10],d15
.L680:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   376      timer_config.base.isrPriority = 2;
	mov	d15,#2
	st.h	[a10]4,d15
.L681:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   377      IfxStm_Timer_init(&tricore_timers[TRICORE_CPU1_ID], &timer_config);
	movh.a	a15,#@his(tricore_timers+24)
.L682:
	lea	a15,[a15]@los(tricore_timers+24)
.L683:
	mov.aa	a5,a10
	mov.aa	a4,a15
	call	IfxStm_Timer_init
.L684:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   378      IfxStm_Timer_run(&tricore_timers[TRICORE_CPU1_ID]);
	mov.aa	a4,a15
	call	IfxStm_Timer_run
.L372:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     2   * \file IfxSrc.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     3   * \brief SRC  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     4   * \ingroup IfxLld_Src
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     7   * \copyright Copyright (c) 2016 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    41   * \defgroup IfxLld_Src SRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    42   * \addtogroup IfxLld_Src
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    43   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    44   * \defgroup IfxLld_Src_Usage How to use Service Request Mechanism?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    45   * \addtogroup IfxLld_Src_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    46   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    48   * For Aurix controller peripherals that can generate service requests is connected to one
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    49   * or more Service Request Nodes (SRNs) in the central Interrupt Router(IR) module. Refer to Controller User Manual for more details\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    51   * IfxSrc driver provides the APIs to configure and control service requests. Refer \ref IfxLld_Src_Usage for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    52   * details of these APIs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    53   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    54   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    55   * \section Ifx_Src_UsageInit Initialize the Service Request Node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    56   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    57   * Service request node is initialized to configure the following,\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    58   * 1) Route the interrupt trigger to service provider, which are:\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    59   *  __a. One of the available CPUs or\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    60   *  __b. DMA controller\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    61   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    62   * 2) Priority of CPU Interrupt or DMA Trigger.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    63   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    64   * For Interrupt or DMA to be correctly triggered, following steps are to be done in the user code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    65   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    66   * \subsection Ifx_Src_UsageInitStep1 Step1: Configure the Node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    68   * User must configure the service request node in the application / driver files.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    69   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    70   * \subsection Ifx_Src_UsageInitStep2 Step2: Enable the Trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    71   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    72   * Enable the service request node to connect the trigger event from the hardware to service provider.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    73   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    74   * Example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    75   * Following example show the configuration for STM0 Service request 0 trigger configured to trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    76   * CPU1 with the priority specified by IFX_INTPRIO_STM0 (from the example at IfxCpu_Irq)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    77   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    78   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    79   * //file: myApplication.c
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    80   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    81   * #include "Ifx_IntPrioDef.h" // to get the priority numbers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    82   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    83   * void myDriverInitFunction(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    84   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    85   *    // driver init code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    86   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    87   *    // Step1: Call the function to route the trigger from for SRC_STM0_SR0 to CPU1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    88   *    // and priority specified at Ifx_IntPrioDef.h globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    89   *    IfxSrc_init(&MODULE_SRC.STM.STM[0].SR[0], IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    90   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    91   *    // Step2: Enable the service request node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    92   *    IfxSrc_enable(&MODULE_SRC.STM.STM[0].SR[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    93   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    94   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    95   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    96   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    97   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    99   * \defgroup IfxLld_Src_Std_Service_Request Service Request Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   100   * \ingroup IfxLld_Src_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   101   * \defgroup IfxLld_Src_Std_Module Module Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   102   * \ingroup IfxLld_Src_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   103   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   105  #ifndef IFXSRC_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   106  #define IFXSRC_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   107  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   108  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   109  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   110  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   111  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   112  #include "_Impl/IfxSrc_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   113  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   114  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   115  /** \addtogroup IfxLld_Src_Std_Service_Request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   116   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   117  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   118  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   119  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   120  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   122  /** \brief Resets the overrun flag of the Service Request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   123   * \param src pointer to the Service Request Control register which the overrun flag should be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   124   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   126   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   127   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   129  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   131  /** \brief Resets a specific interrupt service by software.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   132   * \param src pointer to the Service Request Control register which the request should be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   135   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   136   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   137   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   138  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   139  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   140  /** \brief Gets the current overrun status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   141   * \param src pointer to the Service Request Control register for which the overrun status should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   142   * \return current service request control overrun status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   143   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   144   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   147  IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   149  /** \brief Gets the current request status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   150   * \param src pointer to the Service Request Control register for which the request status should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   151   * \return current service request control request status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   152   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   153   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   154   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   156  IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   158  /** \brief Requests a specific interrupt service by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   159   * \param src pointer to the Service Request Control register which the interrupt has to be requested.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   160   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   161   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   162   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   163   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   164   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   165  IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   167  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   169  /** \addtogroup IfxLld_Src_Std_Module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   170   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   171  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   172  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   173  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   174  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   176  /** \brief DeInitializes the service request control register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   177   * \param src pointer to the Service Request Control register which should be deinitialised.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   178   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   179   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   180   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   181   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   182   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   183  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   184  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   185  /** \brief Disables a specific interrupt service request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   186   * \param src pointer to the Service Request Control register for which the interrupt has to be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   187   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   188   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   189   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   190   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   192  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   194  /** \brief Enables a specific interrupt service request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   195   * \param src pointer to the Service Request Control register for which the interrupt has to be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   196   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   197   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   198   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   199   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   200   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   201  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   202  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   203  /** \brief Initializes the service request control register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   204   * \param src pointer to the Service Request Control register which should be initialised.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   205   * \param typOfService type of interrupt service provider.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   206   * \param priority Interrupt priority.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   207   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   208   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   209   * Get the peripheral service control register which request need to be serviced and assign this service to any of service providers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   210   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   211   * //define the interrupt priority
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   212   * #define IFXASCLIN0_TX_INTPRIO 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   213   * //get the service request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   214   * volatile Ifx_SRC_SRCR *src = IfxAsclin_getSrcPointerRx( &MODULE_ASCLIN0 );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   215   * //initlaise the service request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   216   * IfxSrc_init( src, IfxSrc_Tos_cpu0, IFXASCLIN0_TX_INTPRIO );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   217   * // enable the service
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   218   * IfxSrc_enable( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   219   * //check for service request flags and clear if they occur
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   220   * if ( IfxSrc_isRequested( src ) == TRUE )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   221   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   222   *    IfxSrc_clearRequest( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   223   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   224   * if ( IfxSrc_isOverrun( src ) == TRUE )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   225   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   226   *      IfxSrc_clearOverrun( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   227   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   228   * // Atlast deinitialise the service control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   229   * IfxSrc_deinit( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   230   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   231   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   233  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   235  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   237  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   238  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   239  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   241  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   242  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   243      src->B.IOVCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   244  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   245  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   247  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   248  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   249      src->B.CLRR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   250  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   253  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   254  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   255      src->U = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   256  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   259  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   261      src->B.SRE = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   262  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   265  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   266  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   267      src->B.SRE = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   268  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   269  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   271  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   272  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   273      src->B.SRPN = priority;
	mov	d15,#1
	movh.a	a15,#61444
	st.b	[a15]@los(0xf00389b0),d15
.L685:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   274      src->B.TOS  = typOfService;
	ld.w	d15,.2.cnt
	mov.a	a15,d15
	ld.bu	d15,[a15]
.L686:
	insert	d15,d15,#2,#3,#3
	st.b	[a15],d15
.L382:
	ld.w	d15,.3.cnt
	mov.a	a2,d15
	ld.bu	d15,[a2]
.L687:
	or	d15,#2
	st.b	[a2],d15
.L373:
	ld.bu	d15,[a15]
.L688:
	or	d15,#4
	st.b	[a15],d15
.L387:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   379  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   380      IfxSrc_init(GPSR[TRICORE_CPU1_ID], (IfxSrc_Tos)IfxSrc_Tos_cpu1, 1);
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   381      IfxSrc_enable(GPSR[TRICORE_CPU1_ID]);
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   382  }
	ret
.L368:
	
__Core1_init_function_end:
	.size	Core1_init,__Core1_init_function_end-Core1_init
.L176:
	; End of function
	
	.sdecl	'.text.cpuport.rt_hw_ipi_send',code,cluster('rt_hw_ipi_send')
	.sect	'.text.cpuport.rt_hw_ipi_send'
	.align	2
	
	.global	rt_hw_ipi_send

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   383  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   384  void rt_hw_ipi_send(int ipi_vector, unsigned int cpu_mask)
; Function rt_hw_ipi_send
.L80:
rt_hw_ipi_send:	.type	func

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   385  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   386      
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   387  }
	ret
.L362:
	
__rt_hw_ipi_send_function_end:
	.size	rt_hw_ipi_send,__rt_hw_ipi_send_function_end-rt_hw_ipi_send
.L161:
	; End of function
	
	.sdecl	'.text.cpuport.rt_hw_spin_lock_init',code,cluster('rt_hw_spin_lock_init')
	.sect	'.text.cpuport.rt_hw_spin_lock_init'
	.align	2
	
	.global	rt_hw_spin_lock_init

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   388  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   389  void rt_hw_spin_lock_init(rt_hw_spinlock_t *lock)
; Function rt_hw_spin_lock_init
.L82:
rt_hw_spin_lock_init:	.type	func

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   390  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   391      lock->slock = 0;
	mov	d15,#0
	st.w	[a4],d15
.L636:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   392  }
	ret
.L342:
	
__rt_hw_spin_lock_init_function_end:
	.size	rt_hw_spin_lock_init,__rt_hw_spin_lock_init_function_end-rt_hw_spin_lock_init
.L141:
	; End of function
	
	.sdecl	'.text.cpuport.rt_hw_spin_lock',code,cluster('rt_hw_spin_lock')
	.sect	'.text.cpuport.rt_hw_spin_lock'
	.align	2
	
	.global	rt_hw_spin_lock

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   393  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   394  /* 获取spinlock，忙等待直到获取成功 */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   395  void rt_hw_spin_lock(rt_hw_spinlock_t *lock)
; Function rt_hw_spin_lock
.L84:
rt_hw_spin_lock:	.type	func

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   396  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   397      boolean         retVal = FALSE;
	mov	d0,#0
	sub.a	a10,#8

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   398      volatile unsigned int spinLockVal;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   399  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   400      do
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   401      {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   402          /** \brief This function is a implementation of a binary semaphore
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   403           *  using compare and swap instruction
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   404           * \param address address of resource.
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   405           * \param value This variable is updated with status of address
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   406           * \param condition if the value of address matches with the value 
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   407           * of condition, then swap of value & address occurs.
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   408           *  __cmpswapw((address), ((unsigned long)value), (condition) )
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   409           */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   410          spinLockVal = 1UL;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   411          spinLockVal =
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   412          (unsigned int)__cmpAndSwap(((unsigned int *)(&(lock->slock))), spinLockVal, 0);
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   413  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   414          /* Check if the SpinLock WAS set before the attempt to acquire spinlock */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   415          if (spinLockVal == 0)
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   416          {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   417              retVal = TRUE;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   418          }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   419      } while (retVal == FALSE);
.L25:
	mov	d15,#1
	st.w	[a10],d15
.L641:
	mov	d3,#0
	ld.w	d2,[a10]
	cmpswap.w	[a4]0,e2
.L642:
	st.w	[a10],d2
.L643:
	ld.w	d15,[a10]
.L644:
	cmovn	d0,d15,#1
.L645:
	jeq	d0,#0,.L25
.L646:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   420  }
	ret
.L345:
	
__rt_hw_spin_lock_function_end:
	.size	rt_hw_spin_lock,__rt_hw_spin_lock_function_end-rt_hw_spin_lock
.L146:
	; End of function
	
	.sdecl	'.text.cpuport.rt_hw_spin_unlock',code,cluster('rt_hw_spin_unlock')
	.sect	'.text.cpuport.rt_hw_spin_unlock'
	.align	2
	
	.global	rt_hw_spin_unlock

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   421  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   422  void rt_hw_spin_unlock(rt_hw_spinlock_t *lock)
; Function rt_hw_spin_unlock
.L86:
rt_hw_spin_unlock:	.type	func

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   423  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   424      boolean         retVal = FALSE;
	mov	d0,#0
	sub.a	a10,#8

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   425      volatile unsigned int spinLockVal;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   426  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   427      do
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   428      {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   429          spinLockVal = 0UL;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   430          spinLockVal =
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   431              (unsigned int)__cmpAndSwap(((unsigned int *)(&(lock->slock))), spinLockVal, 1);
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   432  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   433          /* Check if the SpinLock WAS set before the attempt to acquire spinlock */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   434          if (spinLockVal == 1)
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   435          {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   436              retVal = TRUE;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   437          }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   438      } while (retVal == FALSE);
.L27:
	mov	d15,#0
	st.w	[a10],d15
.L651:
	mov	d3,#1
	ld.w	d2,[a10]
	cmpswap.w	[a4]0,e2
.L652:
	st.w	[a10],d2
.L653:
	ld.w	d15,[a10]
.L654:
	eq	d15,d15,#1
.L655:
	cmov	d0,d15,#1
.L656:
	jeq	d0,#0,.L27
.L657:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   439  }
	ret
.L351:
	
__rt_hw_spin_unlock_function_end:
	.size	rt_hw_spin_unlock,__rt_hw_spin_unlock_function_end-rt_hw_spin_unlock
.L151:
	; End of function
	
	.sdecl	'.text.cpuport.rt_hw_cpu_id',code,cluster('rt_hw_cpu_id')
	.sect	'.text.cpuport.rt_hw_cpu_id'
	.align	2
	
	.global	rt_hw_cpu_id

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   440  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   441  int rt_hw_cpu_id(void)
; Function rt_hw_cpu_id
.L88:
rt_hw_cpu_id:	.type	func

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return module;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870      reg.U = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L519:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      return (IfxCpu_Id)reg.B.CORE_ID;
	and	d2,d15,#7

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   442  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   443      return ((int)IfxCpu_getCoreId());
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   444  }
	ret
.L357:
	
__rt_hw_cpu_id_function_end:
	.size	rt_hw_cpu_id,__rt_hw_cpu_id_function_end-rt_hw_cpu_id
.L156:
	; End of function
	
	.sdecl	'.text.cpuport.rt_hw_local_irq_enable',code,cluster('rt_hw_local_irq_enable')
	.sect	'.text.cpuport.rt_hw_local_irq_enable'
	.align	2
	
	.global	rt_hw_local_irq_enable

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   445  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   446  void rt_hw_local_irq_enable(rt_base_t level)
; Function rt_hw_local_irq_enable
.L90:
rt_hw_local_irq_enable:	.type	func

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   447  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   448      restoreInterrupts((boolean)level);
	extr.u	d15,d4,#0,#8
.L587:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1032      if (enabled != FALSE)      (inlined)
	jeq	d15,#0,.L30
.L588:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return module;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      return (IfxCpu_Id)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   872  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   873  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   874  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   875  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   876  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   877      uint32 reg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   878      reg = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   879      return (IfxCpu_ResourceCpu)__minu(reg, 5);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   880  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   881  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   882  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   883  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   884  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   885      return IfxCpu_getPerformanceCounter(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   886  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   887  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   888  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   889  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   890  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   891      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   892  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   893  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   894  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   895  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   896  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   897      Ifx_CPU_CCNT ccnt;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   898  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   899      if (address == CPU_CCNT)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   900      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   901          ccnt.U = __mfcr(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   902      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   903      else if (address == CPU_ICNT)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   904      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   905          ccnt.U = __mfcr(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   906      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   907      else if (address == CPU_M1CNT)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   908      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   909          ccnt.U = __mfcr(CPU_M1CNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   910      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   911      else if (address == CPU_M2CNT)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   912      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   913          ccnt.U = __mfcr(CPU_M2CNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   914      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   915      else if (address == CPU_M3CNT)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   916      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   917          ccnt.U = __mfcr(CPU_M3CNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   918      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   920      return ccnt.B.COUNTVALUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   921  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   922  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   923  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   924  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   925  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   926      Ifx_CPU_CCNT ccnt;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   927  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   928      if (address == CPU_CCNT)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   929      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   930          ccnt.U = __mfcr(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   931      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   932      else if (address == CPU_ICNT)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   933      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   934          ccnt.U = __mfcr(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   935      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   936      else if (address == CPU_M1CNT)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   937      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   938          ccnt.U = __mfcr(CPU_M1CNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   939      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   940      else if (address == CPU_M2CNT)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   941      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   942          ccnt.U = __mfcr(CPU_M2CNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   943      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   944      else if (address == CPU_M3CNT)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   945      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   946          ccnt.U = __mfcr(CPU_M3CNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   947      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   948  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   949      return ccnt.B.SOVF;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   950  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   951  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   952  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   953  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   954  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   955      uint32  k;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   956      uint32  nxt_cxi_val = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   957      uint32 *prvCsa      = 0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   958      uint32 *nxtCsa      = csaBegin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   959      uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   960  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   961      for (k = 0; k < numOfCsa; k++)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   962      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   963          nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28)) >> 12 | ((uint32)nxtCsa & (0XFFFFU << 6)) >> 6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   964  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   965          if (k == 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   966          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   967              __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   968          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   969          else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   970          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   971              *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   972          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   973  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   974          if (k == (numOfCsa - 3U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   975          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   976              __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   977          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   978  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   979          prvCsa  = (uint32 *)nxtCsa;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   980          nxtCsa += 16;           /* next CSA */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   981      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   982  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   983      *prvCsa = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   984  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   985  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   986  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   987  IFX_INLINE void IfxCpu_invalidateProgramCache(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   988  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   989      uint16 cpuWdtPassword = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   990      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   991          IfxScuWdt_clearCpuEndinit(cpuWdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   992          Ifx_CPU_PCON1 pcon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   993          pcon1.U       = __mfcr(CPU_PCON1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   994          pcon1.B.PCINV = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   995          __mtcr(CPU_PCON1, pcon1.U);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   996          IfxScuWdt_setCpuEndinit(cpuWdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   997      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   998  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   999  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1000  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1001  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1002  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1003      uint8 segment = (uint32)address >> 24;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1004      return ((segment == IFXCPU_CACHABLE_FLASH_SEGMENT) || (segment == IFXCPU_CACHABLE_LMU_SEGMENT)) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1005  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1006  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1007  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1008  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1009  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1010      Ifx_CPU_CCTRL cctrl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1011      cctrl.U    = __mfcr(CPU_CCTRL);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1012      /*Disable the counters */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1013      cctrl.B.CE = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1014      __mtcr(CPU_CCTRL, cctrl.U);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1015  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1016      /* reset the counters */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1017      __mtcr(CPU_CCNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1018      __mtcr(CPU_ICNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1019      __mtcr(CPU_M1CNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1020      __mtcr(CPU_M2CNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1021      __mtcr(CPU_M3CNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1022  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1023      /*Enable the counters, set the counter mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1024      cctrl.B.CE = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1025      cctrl.B.CM = mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1026      __mtcr(CPU_CCTRL, cctrl.U);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1027  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1028  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1029  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1030  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1031  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1032      if (enabled != FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1033      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1034          __enable();
	enable

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1032      if (enabled != FALSE)      (inlined)
.L30:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   449  }
	ret
.L309:
	
__rt_hw_local_irq_enable_function_end:
	.size	rt_hw_local_irq_enable,__rt_hw_local_irq_enable_function_end-rt_hw_local_irq_enable
.L121:
	; End of function
	
	.sdecl	'.text.cpuport.rt_hw_secondary_cpu_idle_exec',code,cluster('rt_hw_secondary_cpu_idle_exec')
	.sect	'.text.cpuport.rt_hw_secondary_cpu_idle_exec'
	.align	2
	
	.global	rt_hw_secondary_cpu_idle_exec

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   450  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   451  void rt_hw_secondary_cpu_idle_exec(void)
; Function rt_hw_secondary_cpu_idle_exec
.L92:
rt_hw_secondary_cpu_idle_exec:	.type	func

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   452  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   453  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   454  }
	ret
.L367:
	
__rt_hw_secondary_cpu_idle_exec_function_end:
	.size	rt_hw_secondary_cpu_idle_exec,__rt_hw_secondary_cpu_idle_exec_function_end-rt_hw_secondary_cpu_idle_exec
.L171:
	; End of function
	
	.sdecl	'.text.cpuport.rt_hw_local_irq_disable',code,cluster('rt_hw_local_irq_disable')
	.sect	'.text.cpuport.rt_hw_local_irq_disable'
	.align	2
	
	.global	rt_hw_local_irq_disable

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   455  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   456  rt_base_t rt_hw_local_irq_disable()
; Function rt_hw_local_irq_disable
.L94:
rt_hw_local_irq_disable:	.type	func

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
	mfcr	d15,#65068
.L520:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
	extr.u	d15,d15,#15,#1
.L521:
	ne	d2,d15,#0
.L305:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
	disable
.L582:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
	nop
.L302:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   457  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   458      rt_base_t level;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   459      level = IfxCpu_disableInterrupts();
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   460      return level;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   461  }
	ret
.L300:
	
__rt_hw_local_irq_disable_function_end:
	.size	rt_hw_local_irq_disable,__rt_hw_local_irq_disable_function_end-rt_hw_local_irq_disable
.L116:
	; End of function
	
	.sdecl	'.text.cpuport.rt_hw_stack_init',code,cluster('rt_hw_stack_init')
	.sect	'.text.cpuport.rt_hw_stack_init'
	.align	2
	
	.global	rt_hw_stack_init

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   462  #else
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   463  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   464  rt_base_t rt_hw_interrupt_disable(void)
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   465  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   466      rt_base_t level;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   467      level = IfxCpu_disableInterrupts();
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   468      return level;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   469  }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   470  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   471  void rt_hw_interrupt_enable(rt_base_t level)
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   472  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   473      restoreInterrupts((boolean)level);
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   474  }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   475  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   476  void rt_hw_context_switch_to(rt_ubase_t to)
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   477  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   478      rt_base_t level;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   479  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   480      level = rt_hw_interrupt_disable();
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   481      rt_interrupt_to_thread_core0 = (*((unsigned long *)to));
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   482      __syscall( 0 );
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   483      rt_hw_interrupt_enable(level);
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   484     /* Will not get here. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   485  }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   486  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   487  void rt_hw_context_switch_interrupt(rt_ubase_t from, rt_ubase_t to)
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   488  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   489      rt_base_t level;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   490  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   491      level = rt_hw_interrupt_disable();
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   492      rt_interrupt_from_thread_core0 = (*( (unsigned long *)from ));
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   493      rt_interrupt_to_thread_core0 = (*((unsigned long *)to));
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   494      rt_hw_interrupt_enable(level);
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   495      /* 在保存完线程 CSA LinkWord 后,会给 SETR 位置 1，这样会触发一个异常陷阱函数。在这个陷阱函数里才会去真正的切换线程。*/
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   496      GPSR[TRICORE_CPU_ID]->B.SETR = 1;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   497  }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   498  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   499  void rt_hw_context_switch(rt_ubase_t from, rt_ubase_t to)
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   500  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   501      rt_base_t level;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   502  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   503      level = rt_hw_interrupt_disable();
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   504      rt_interrupt_from_thread_core0 = (*( (unsigned long *)from ));
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   505      rt_interrupt_to_thread_core0 = (*((unsigned long *)to));
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   506      to = RT_NULL;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   507      rt_hw_interrupt_enable(level);
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   508      /* 在保存完线程 CSA LinkWord 后，判断这次线程切换是否是 systick 触发的线程切换。*/
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   509      if(rt_thread_switch_interrupt_flag_core0 == 0)
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   510      {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   511           /* 如果不是 systick 引发的线程切换，那么就触发一个线程切换的异常函数，这个异常函数里会真正做线程切换的事情。*/
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   512          __syscall( 0 );
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   513      }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   514  }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   515  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   516  #endif
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   517  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   518  /**
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   519   * This function will initialize thread stack
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   520   *
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   521   * @param tentry the entry of thread
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   522   * @param parameter the parameter of entry
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   523   * @param stack_addr the beginning stack address
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   524   * @param texit the function will be called when thread exit
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   525   *
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   526   * @return stack address
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   527   */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   528  rt_uint8_t *rt_hw_stack_init(void       *tentry,
; Function rt_hw_stack_init
.L96:
rt_hw_stack_init:	.type	func
	sub.a	a10,#16
.L522:
	st.a	[a10]4,a4
.L529:
	st.a	[a10],a5
.L527:
	mov.aa	a12,a6
.L528:
	mov.aa	a13,a7
.L530:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   529                               void       *parameter,
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   530                               rt_uint8_t *stack_addr,
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   531                               void       *texit)
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   532  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   533      rt_base_t level;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   534      UpperCtx_Ptr upperCtxPtr = NULL;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   535      LowCtx_Ptr   lowCtxPtr = NULL;
	mov.a	a14,#0
.L525:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   536  #ifdef RT_USING_SMP
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   537      level = rt_hw_local_irq_disable();
	call	rt_hw_local_irq_disable
.L523:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   538  #else
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   539      level = rt_hw_interrupt_disable();
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   540  #endif
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   541      {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   542          /* DSync to ensure that buffering is not a problem. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   543          __dsync();
	dsync
.L559:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   544  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   545          /* Consume two free CSAs. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   546          upperCtxPtr = LINKWORD_TO_ADDRESS(__mfcr(CPU_FCX));
	mfcr	d15,#65080
	fcall	.cocofun_5
	mfcr	d1,#65080
	insert	d1,d1,#0,#16,#16
	sha	d1,#6
.L531:
	or	d15,d1
.L560:
	mov.a	a15,d15
.L533:
	st.a	[a10]8,a15
.L532:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   547  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   548          if( NULL != upperCtxPtr )
	mov.a	a2,#0
.L561:
	jeq.a	a2,a15,.L32
.L562:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   549          {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   550              /* The Lower Links to the Upper. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   551              lowCtxPtr = LINKWORD_TO_ADDRESS( upperCtxPtr->_PCXI );
	ld.w	d1,[a15]
	and	d0,d1
	sh	d15,d0,#12
	insert	d0,d1,#0,#16,#16
	sh	d0,#6
.L535:
	or	d15,d0
.L526:
	mov.a	a14,d15
.L32:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   552          }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   553  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   554          /* Check that we have successfully reserved two CSAs. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   555          if( ( NULL != lowCtxPtr ) && ( NULL != upperCtxPtr ))
	movh	d8,#15
	jeq.a	a2,a14,.L33
.L563:
	jeq.a	a2,a15,.L34
.L564:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   556          {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   557              /* Remove the two consumed CSAs from the free CSA list. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   558              __dsync();
	dsync
.L565:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   559              __mtcr( CPU_FCX, lowCtxPtr->_PCXI );
	ld.w	d15,[a14]
.L566:
	mtcr	#65080,d15
	isync
.L567:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   560              /* MTCR is an exception and must be followed by an ISYNC instruction. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   561              __isync();
	isync
.L568:
	j	.L35
.L34:
.L33:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   562          }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   563          else
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   564          {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   565              /* Simply trigger a context list depletion trap. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   566              __svlcx();
	svlcx
.L35:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   567          }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   568      }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   569  #ifdef RT_USING_SMP
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   570      rt_hw_local_irq_enable(level);
	mov	d4,d2
	call	rt_hw_local_irq_enable
.L524:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   571  #else
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   572      rt_hw_interrupt_enable(level);
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   573  #endif
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   574  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   575      memset( upperCtxPtr, 0, TRICORE_NUM_WORDS_IN_CSA * sizeof( unsigned long ) );
	mov	d4,#0
	ld.a	a4,[a10]8
.L534:
	mov	d5,#64
	call	memset
.L536:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   576      upperCtxPtr->_A11 = ( unsigned long* )texit;
	st.a	[a15]12,a13
.L569:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   577      /* 对应 A10 寄存器; 这个寄存器用于保存栈指针 */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   578      upperCtxPtr->_A10 = ( unsigned long* )stack_addr;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   579      /* 对应 PSW 寄存器；这个寄存器用于保存当前线程的初始状态*/
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   580      upperCtxPtr->_PSW = TRICORE_SYSTEM_PROGRAM_STATUS_WORD;
	mov	d15,#2303
	st.a	[a15]8,a12
.L570:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   581  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   582      /* Clear the lower CSA. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   583      memset( lowCtxPtr, 0, TRICORE_NUM_WORDS_IN_CSA * sizeof( unsigned long ) );
	mov	d4,#0
	st.w	[a15]4,d15
.L537:
	mov	d5,#64
	mov.aa	a4,a14
.L538:
	call	memset
.L539:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   584      /* 对应 A4 寄存器; 用于保存函数的入参 */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   585      lowCtxPtr->_A4 = ( unsigned long *) parameter;
	ld.a	a15,[a10]
.L540:
	st.a	[a14]32,a15
.L571:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   586      /* 对应 A11 寄存器; 用于保存 PC 指针。*/
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   587      lowCtxPtr->_PC = ( unsigned long *) tentry;
	ld.a	a15,[a10]4
.L541:
	st.a	[a14]4,a15
.L572:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   588      /* PCXI pointing to the Upper context. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   589      lowCtxPtr->_PCXI = ( TRICORE_INITIAL_PCXI_UPPER_CONTEXT_WORD | ( unsigned long ) ADDRESS_TO_LINKWORD( upperCtxPtr ) );
	ld.a	a15,[a10]8
.L542:
	mov.d	d0,a15
.L543:
	sh	d15,d0,#-12
	extr.u	d0,d0,#6,#16
.L544:
	and	d15,d8
.L573:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   590      /* Save the link to the CSA in the top of stack. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   591      *((unsigned long * )stack_addr) = (unsigned long) ADDRESS_TO_LINKWORD( lowCtxPtr );
	or	d15,d0
	mov.d	d0,a14
.L545:
	insert	d15,d15,#3,#20,#2
	st.w	[a14],d15
.L574:
	sh	d15,d0,#-12
	and	d8,d15
	extr.u	d15,d0,#6,#16
.L575:
	or	d8,d15
	st.w	[a12],d8
.L576:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   592      /* DSync to ensure that buffering is not a problem. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   593      __dsync();
	dsync
.L577:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   594  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   595      return stack_addr;
	mov.aa	a2,a12
.L546:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   596  }
	ret
.L288:
	
__rt_hw_stack_init_function_end:
	.size	rt_hw_stack_init,__rt_hw_stack_init_function_end-rt_hw_stack_init
.L111:
	; End of function
	
	.sdecl	'.text.cpuport.get_clk',code,cluster('get_clk')
	.sect	'.text.cpuport.get_clk'
	.align	2
	
	.global	get_clk

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   597  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   598  void get_clk(void)
; Function get_clk
.L98:
get_clk:	.type	func

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
	mfcr	d15,#65068
.L395:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
	disable
.L693:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
	nop
.L393:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   599  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   600  	disableInterrupts();
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   601  	//禁用看门狗
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   602      IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
	call	IfxScuWdt_getCpuWatchdogPassword
	mov	d4,d2
	call	IfxScuWdt_disableCpuWatchdog
.L694:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   603      IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
	call	IfxScuWdt_getSafetyWatchdogPassword
	mov	d4,d2
	call	IfxScuWdt_disableSafetyWatchdog
.L695:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   604  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   605      //获取时钟频率，便于查看当前系统运行频率
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   606      g_AppCpu0.info.pllFreq = IfxScuCcu_getPllFrequency();
	movh.a	a15,#@his(g_AppCpu0)
	lea	a15,[a15]@los(g_AppCpu0)
.L696:
	call	IfxScuCcu_getPllFrequency
.L697:
	st.w	[a15]8,d2
.L398:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return module;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      return (IfxCpu_Id)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   872  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   873  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   874  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   875  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   876  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   877      uint32 reg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   878      reg = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L547:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   879      return (IfxCpu_ResourceCpu)__minu(reg, 5);
	min.u	d15,d15,#5
.L548:
	extr.u	d4,d15,#0,#8

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   607      g_AppCpu0.info.cpuFreq = IfxScuCcu_getCpuFrequency(IfxCpu_getCoreIndex());
	call	IfxScuCcu_getCpuFrequency
.L399:
	st.w	[a15]4,d2
.L698:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   608      g_AppCpu0.info.sysFreq = IfxScuCcu_getSpbFrequency();
	call	IfxScuCcu_getSpbFrequency
.L699:
	st.w	[a15],d2
.L403:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     2   * \file IfxScuCcu.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    42   * \defgroup IfxLld_Scu SCU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    43   * \addtogroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    44   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    45   * \defgroup IfxLld_ScuCcu How to use the Scu Clock driver?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    46   * \addtogroup IfxLld_ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    47   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    48   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    49   * The Scu Clock control unit driver provides a default configuration for pll and Clock initialisation and set of peripheral clock configuration functions.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    51   * In the following sections it will be described, how to integrate the driver into the application framework.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    52   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    53   * \section IfxLld_ScuCcu_Std_Preparation Preparation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    54   * \subsection IfxLld_ScuCcu_Std_Include Include Files
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    55   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    56   * Include following header file into your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    57   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    58   * #include <Scu/Std/IfxScuCcu.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    59   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    60   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    61   * \subsection IfxLld_ScuCcu_Std_Variables Variables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    62   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    63   * Declare the Clock Configuration variables in your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    64   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    65   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    66   * // used globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    68   * // configuration for the PLL  steps
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    69   * static IfxScuCcu_PllStepsConfig IfxScuCcu_testPllConfigSteps[] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    70   *     IFXSCU_CFG_PLL_STEPS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    71   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    72   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    73   * static const IfxScuCcu_FlashWaitstateConfig IfxScuCcu_defaultFlashWaitstateConfig = IFXSCU_CFG_FLASH_WAITSTATE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    74   * // Default configuration for the Clock Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    75   * IfxScuCcu_Config                      IfxScuCcu_testClockConfig = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    76   *     // IfxScuCcu_InitialStepConfig: Configuration of first step which is same as internal osc frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    77   *     IFXSCU_CFG_PLL_INITIAL_STEP,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    78   *     //IfxScuCcu_PllThrottleConfig: Configuration of PLL throttling.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    79   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    80   *         sizeof(IfxScuCcu_defaultPllConfigSteps) / sizeof(IfxScuCcu_PllStepConfig),
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    81   *         IfxScuCcu_defaultPllConfigSteps
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    82   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    83   *     IFXSCU_CFG_CLK_DISTRIBUTION,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    84   *     &IfxScuCcu_defaultFlashWaitstateConfig,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    85   *     &IfxScuCcu_defaultModConfig
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    86   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    87   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    88   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    89   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    90   * \subsection IfxLld_ScuCcu_Std_Init Module Initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    91   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    92   * The module initialisation can be done in the same function. Here an example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    93   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    94   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    95   *        // standard PLL & clock initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    96   *         IfxScuCcu_init(&IfxScuCcu_testClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    97   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    99   *    The SYS PLL, PER PLL1 , PLL2 and clocks are now initialised based on the XTAL and PLL values configured in Ifx_Cfg.h and are ready for use now!
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   100   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   101   * Alternately the PLL and clocks can be initialised using below method which provides greater control on the configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   103   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   104   * static const IfxScuCcu_PllStepConfig IfxScuCcu_defaultPllConfigSteps[] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   105   *     {                   //Step 0 Config: 150MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   106   *         (4 - 1),        //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   107   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   108   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   109   *     {                   //Step 1 Config: 200MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   110   *         (3 - 1),       //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   111   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   112   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   113   *     {                   //Step 2 Config: 300MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   114   *         (2 - 1),        //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   115   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   116   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   117   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   118   *     IfxScuCcu_Config        IfxScuCcu_sampleClockConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   119   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   120   *     IfxScuCcu_initConfig(&IfxScuCcu_sampleClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   121   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   122   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   123   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   124   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.pllInputClockSelection = IfxScuCcu_PllInputClockSelection_fOsc0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   126   *     //SYS PLL = 300Mhz, XTAL = 20Mhz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   127   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.k2Divider = IfxScuCcu_K2divider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   128   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.nDivider = IfxScuCcu_Ndivider_60;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   129   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.pDivider = IfxScuCcu_Pdivider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   130   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.waitTime = 0.000200F;  // wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   131   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   132   *     IfxScuCcu_sampleClockConfig.sysPllThrottleConfig.numOfSteps = sizeof(IfxScuCcu_defaultPllConfigSteps) / sizeof(IfxScuCcu_PllStepConfig); //  step clock incr
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   133   *     IfxScuCcu_sampleClockConfig.sysPllThrottleConfig.pllSteps = IfxScuCcu_defaultPllConfigSteps;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   135   *     // PER PLL1 = 240Mhz, PERPLL2 = 50Mhz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   136   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k2Divider = IfxScuCcu_K2divider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   137   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k3Divider = IfxScuCcu_K3divider_6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   138   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k3DividerBypass = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   139   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.nDivider = IfxScuCcu_Ndivider_24;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   140   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.pDivider = IfxScuCcu_Pdivider_1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   142   *     // update CCUCON Config use mask and value as below
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   143   *     IfxScuCcu_sampleClockConfig.clockDistribution.ccucon0.mask =IFXSCU_CFG_CCUCON0_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   144   *     IfxScuCcu_sampleClockConfig.clockDistribution.ccucon0.value = IFXSCU_CFG_CCUCON0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   146   *     // standard PLL & clock initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   147   *     IfxScuCcu_init(&IfxScuCcu_sampleClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   149   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   150   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   151   * ** Modulation Configuration **
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   152   * The SCU CCU module also provides an option to Frequency Modulate the clock.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   153   * The Modulation configuration can be done as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   154   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   155   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   156   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   157   * //define your modulation configuration structure:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   158   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   159   *  IFX_CONST IfxScuCcu_Mod_Config IfxScuCcu_SampleModConfig = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   160   *          IfxScuCcu_ModEn_disabled,          // disable is default //enable / disable modulation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   161   *          IfxScuCcu_ModulationAmplitude_0p5, // default 0 value  // specify the modulation amplitude %
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   162   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   163   *  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   164   *  // put this as part of the CCU configuration:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   165   *  IfxScuCcu_sampleClockConfig.modulationConfig = &IfxScuCcu_SampleModConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   166   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   167   *  // now initalize the CCU PLL and clock with the init function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   168   *  IfxScuCcu_init(&IfxScuCcu_sampleClockConfig)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   171   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   172   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   173   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   174   * \defgroup IfxLld_Scu_Std_Ccu Ccu Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   175   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   176   * \defgroup IfxLld_Scu_Std_Ccu_Ccu Clock Control Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   177   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   178   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Operative Clock Control Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   179   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   180   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Configuration Clock Control Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   181   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   182   * \defgroup IfxLld_Scu_Std_Ccu_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   183   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   186  #ifndef IFXSCUCCU_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   187  #define IFXSCUCCU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   188  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   189  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   190  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   191  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   193  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   194  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   195  #include "Cpu/Std/IfxCpu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   196  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   197  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   198  #include "_PinMap/IfxScu_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   199  #include "IfxSmu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   200  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   201  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   202  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   203  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   205  /** \brief Oscillator stability check timeout count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   207  #ifndef IFXSCUCCU_OSC_STABLECHK_TIME
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   208  #define IFXSCUCCU_OSC_STABLECHK_TIME               (640)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   209  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   210  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   211  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   213  #define IFXSCUCCU_SMUALARM_MASK                    (0x1DU)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   215  /** \brief ~40uS max wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   216   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   217  #ifndef IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   218  #define IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT     (0x1000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   219  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   221  /** \brief ~122uS max wait time for PLL locking
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   223  #define IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT           (0x3000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   224  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   225  /** \brief ~122uS max wait time for PLL power down/up state update
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   227  #define IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT (0x3000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   229  /** \brief ~244uS max wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   230   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   231  #define IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT           (0x6000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   233  /** \brief 3mS max wait time for PLL power down/up state update
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   235  #define IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT (0x493E0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   237  #define IFXSCUCCU_LOOP_TIMEOUT_CHECK(tVar, tErr) \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   238      {                                            \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   239          if (((sint32)--tVar) <= 0)               \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   240          {                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   241              tErr = (uint8)1;                     \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   242              break;                               \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   243          }                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   244          else                                     \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   245          {                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   246          }                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   247      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   248  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   249  /** \brief Modulation frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   250   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   251  #define IFXSCUCCU_MODULATION_FREQ_HZ               (3600000)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   253  /** \brief MODCFG shift value for SYSPLLCON2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   255  #define IFXSCUCCU_MODCFG_DEFAULT_SHIFT             (10)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   257  /** \brief MODCFG default value - for SYSPLLCON2[15:10]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   259  #define IFXSCUCCU_MODCFG_DEFAULT_VAL               ((uint32)0x3D)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   261  /** \brief get Rgain from MA and FDco
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   263  #define IFXSCUCCU_GET_RGAIN_NOM(MA, FDco)  ((2 * (MA / 100) * (FDco / IFXSCUCCU_MODULATION_FREQ_HZ)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   265  /** \brief Get RGAin HEX from RGain Nominal value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   266   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   267  #define IFXSCUCCU_GET_RGAIN_HEX(RGain_Nom) ((uint16)((RGain_Nom * 32) + 0.5))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   269  /** \brief Get MODCFG from RGAIN_HEX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   271  #define IFXSCUCCU_GET_MODCFG(RGain_Hex)    ((uint16)(IFXSCUCCU_MODCFG_DEFAULT_VAL << IFXSCUCCU_MODCFG_DEFAULT_SHIFT) | (uint16)(RGain_Hex))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   273  /** \brief Define to include the flash wait state check in ScuCcu_init()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   275  #define IFXSCUCCU_FLASHWAITSTATECHECK (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   277  /** \brief 10 microsecond wait time between steps to jump back to normal mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   278   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   279  #ifndef IFXSCUCCU_LPTONORMAL_WAITTIME
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   280  #define IFXSCUCCU_LPTONORMAL_WAITTIME (0.00001f)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   281  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   284  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   287  /** \brief Function pointer type for the hooks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   288   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   290  typedef void (*IfxScuCcu_PllStepsFunctionHook)(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   292  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   293  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   294  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   295  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   296  /** \addtogroup IfxLld_Scu_Std_Ccu_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   297   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   298  /** \brief clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   299   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   300  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   301  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   302      IfxScuCcu_Fsource_0 = 0,      /**< \brief fSource0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   303      IfxScuCcu_Fsource_1,          /**< \brief fSource1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   304      IfxScuCcu_Fsource_2           /**< \brief fSource2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   305  } IfxScuCcu_Fsource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   307  /** \brief MODULE_SCU.PLLCON1.B.K2DIV, specifies the K2-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   308   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   309  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   310  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   311      IfxScuCcu_K2divider_1 = 0,      /**< \brief K2-Divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   312      IfxScuCcu_K2divider_2,          /**< \brief K2-Divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   313      IfxScuCcu_K2divider_3,          /**< \brief K2-Divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   314      IfxScuCcu_K2divider_4,          /**< \brief K2-Divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   315      IfxScuCcu_K2divider_5,          /**< \brief K2-Divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   316      IfxScuCcu_K2divider_6,          /**< \brief K2-Divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   317      IfxScuCcu_K2divider_7,          /**< \brief K2-Divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   318      IfxScuCcu_K2divider_8           /**< \brief K2-Divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   319  } IfxScuCcu_K2divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   321  /** \brief MODULE_SCU.PLLCON1.B.K3DIV, specifies the K3-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   322   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   323  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   324  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   325      IfxScuCcu_K3divider_1 = 0,      /**< \brief K3-Divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   326      IfxScuCcu_K3divider_2,          /**< \brief K3-Divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   327      IfxScuCcu_K3divider_3,          /**< \brief K3-Divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   328      IfxScuCcu_K3divider_4,          /**< \brief K3-Divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   329      IfxScuCcu_K3divider_5,          /**< \brief K3-Divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   330      IfxScuCcu_K3divider_6,          /**< \brief K3-Divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   331      IfxScuCcu_K3divider_7,          /**< \brief K3-Divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   332      IfxScuCcu_K3divider_8           /**< \brief K3-Divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   333  } IfxScuCcu_K3divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   334  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   335  /** \brief Low Power Division Ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   336   * Corresponds to values of LPDIV in CCUCON0.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   338  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   339  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   340      IfxScuCcu_LowPowerDivRatio_divBy30 = 1,  /**< \brief Divide by 30 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   341      IfxScuCcu_LowPowerDivRatio_divBy60,      /**< \brief Divide by 60 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   342      IfxScuCcu_LowPowerDivRatio_divBy120,     /**< \brief Divide by 120 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   343      IfxScuCcu_LowPowerDivRatio_divBy240      /**< \brief Divide by 240 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   344  } IfxScuCcu_LowPowerDivRatio;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   346  /** \brief ENUM for MA (%) values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   347   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   348  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   349  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   350      IfxScuCcu_ModulationAmplitude_0p5 = 0,      /**< \brief 0.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   351      IfxScuCcu_ModulationAmplitude_1p0,          /**< \brief 1.0%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   352      IfxScuCcu_ModulationAmplitude_1p25,         /**< \brief 1.25%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   353      IfxScuCcu_ModulationAmplitude_1p5,          /**< \brief 1.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   354      IfxScuCcu_ModulationAmplitude_2p0,          /**< \brief 2%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   355      IfxScuCcu_ModulationAmplitude_2p5,          /**< \brief 2.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   356      IfxScuCcu_ModulationAmplitude_count,        /**< \brief range  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   357  } IfxScuCcu_ModulationAmplitude;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   358  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   359  /** \brief MODULE_SCU.PLLCON0.B.NDIV, specifies the N-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   361  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   362  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   363      IfxScuCcu_Ndivider_1 = 0,      /**< \brief  N-divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   364      IfxScuCcu_Ndivider_2,          /**< \brief  N-divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   365      IfxScuCcu_Ndivider_3,          /**< \brief  N-divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   366      IfxScuCcu_Ndivider_4,          /**< \brief  N-divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   367      IfxScuCcu_Ndivider_5,          /**< \brief  N-divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   368      IfxScuCcu_Ndivider_6,          /**< \brief  N-divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   369      IfxScuCcu_Ndivider_7,          /**< \brief  N-divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   370      IfxScuCcu_Ndivider_8,          /**< \brief  N-divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   371      IfxScuCcu_Ndivider_9,          /**< \brief  N-divider 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   372      IfxScuCcu_Ndivider_10,         /**< \brief  N-divider 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   373      IfxScuCcu_Ndivider_11,         /**< \brief  N-divider 11  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   374      IfxScuCcu_Ndivider_12,         /**< \brief  N-divider 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   375      IfxScuCcu_Ndivider_13,         /**< \brief  N-divider 13  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   376      IfxScuCcu_Ndivider_14,         /**< \brief  N-divider 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   377      IfxScuCcu_Ndivider_15,         /**< \brief  N-divider 15  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   378      IfxScuCcu_Ndivider_16,         /**< \brief  N-divider 16  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   379      IfxScuCcu_Ndivider_17,         /**< \brief  N-divider 17  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   380      IfxScuCcu_Ndivider_18,         /**< \brief  N-divider 18  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   381      IfxScuCcu_Ndivider_19,         /**< \brief  N-divider 19  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   382      IfxScuCcu_Ndivider_20,         /**< \brief  N-divider 20  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   383      IfxScuCcu_Ndivider_21,         /**< \brief  N-divider 21  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   384      IfxScuCcu_Ndivider_22,         /**< \brief  N-divider 22  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   385      IfxScuCcu_Ndivider_23,         /**< \brief  N-divider 23  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   386      IfxScuCcu_Ndivider_24,         /**< \brief  N-divider 24  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   387      IfxScuCcu_Ndivider_25,         /**< \brief  N-divider 25  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   388      IfxScuCcu_Ndivider_26,         /**< \brief  N-divider 26  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   389      IfxScuCcu_Ndivider_27,         /**< \brief  N-divider 27  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   390      IfxScuCcu_Ndivider_28,         /**< \brief  N-divider 28  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   391      IfxScuCcu_Ndivider_29,         /**< \brief  N-divider 29  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   392      IfxScuCcu_Ndivider_30,         /**< \brief  N-divider 30  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   393      IfxScuCcu_Ndivider_31,         /**< \brief  N-divider 31  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   394      IfxScuCcu_Ndivider_32,         /**< \brief  N-divider 32  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   395      IfxScuCcu_Ndivider_33,         /**< \brief  N-divider 33  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   396      IfxScuCcu_Ndivider_34,         /**< \brief  N-divider 34  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   397      IfxScuCcu_Ndivider_35,         /**< \brief  N-divider 35  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   398      IfxScuCcu_Ndivider_36,         /**< \brief  N-divider 36  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   399      IfxScuCcu_Ndivider_37,         /**< \brief  N-divider 37  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   400      IfxScuCcu_Ndivider_38,         /**< \brief  N-divider 38  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   401      IfxScuCcu_Ndivider_39,         /**< \brief  N-divider 39  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   402      IfxScuCcu_Ndivider_40,         /**< \brief  N-divider 40  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   403      IfxScuCcu_Ndivider_41,         /**< \brief  N-divider 41  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   404      IfxScuCcu_Ndivider_42,         /**< \brief  N-divider 42  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   405      IfxScuCcu_Ndivider_43,         /**< \brief  N-divider 43  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   406      IfxScuCcu_Ndivider_44,         /**< \brief  N-divider 44  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   407      IfxScuCcu_Ndivider_45,         /**< \brief  N-divider 45  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   408      IfxScuCcu_Ndivider_46,         /**< \brief  N-divider 46  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   409      IfxScuCcu_Ndivider_47,         /**< \brief  N-divider 47  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   410      IfxScuCcu_Ndivider_48,         /**< \brief  N-divider 48  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   411      IfxScuCcu_Ndivider_49,         /**< \brief  N-divider 49  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   412      IfxScuCcu_Ndivider_50,         /**< \brief  N-divider 50  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   413      IfxScuCcu_Ndivider_51,         /**< \brief  N-divider 51  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   414      IfxScuCcu_Ndivider_52,         /**< \brief  N-divider 52  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   415      IfxScuCcu_Ndivider_53,         /**< \brief  N-divider 53  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   416      IfxScuCcu_Ndivider_54,         /**< \brief  N-divider 54  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   417      IfxScuCcu_Ndivider_55,         /**< \brief  N-divider 55  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   418      IfxScuCcu_Ndivider_56,         /**< \brief  N-divider 56  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   419      IfxScuCcu_Ndivider_57,         /**< \brief  N-divider 57  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   420      IfxScuCcu_Ndivider_58,         /**< \brief  N-divider 58  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   421      IfxScuCcu_Ndivider_59,         /**< \brief  N-divider 59  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   422      IfxScuCcu_Ndivider_60,         /**< \brief  N-divider 60  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   423      IfxScuCcu_Ndivider_61,         /**< \brief  N-divider 61  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   424      IfxScuCcu_Ndivider_62,         /**< \brief  N-divider 62  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   425      IfxScuCcu_Ndivider_63,         /**< \brief  N-divider 63  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   426      IfxScuCcu_Ndivider_64,         /**< \brief  N-divider 64  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   427      IfxScuCcu_Ndivider_65,         /**< \brief  N-divider 65  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   428      IfxScuCcu_Ndivider_66,         /**< \brief  N-divider 66  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   429      IfxScuCcu_Ndivider_67,         /**< \brief  N-divider 67  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   430      IfxScuCcu_Ndivider_68,         /**< \brief  N-divider 68  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   431      IfxScuCcu_Ndivider_69,         /**< \brief  N-divider 69  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   432      IfxScuCcu_Ndivider_70,         /**< \brief  N-divider 70  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   433      IfxScuCcu_Ndivider_71,         /**< \brief  N-divider 71  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   434      IfxScuCcu_Ndivider_72,         /**< \brief  N-divider 72  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   435      IfxScuCcu_Ndivider_73,         /**< \brief  N-divider 73  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   436      IfxScuCcu_Ndivider_74,         /**< \brief  N-divider 74  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   437      IfxScuCcu_Ndivider_75,         /**< \brief  N-divider 75  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   438      IfxScuCcu_Ndivider_76,         /**< \brief  N-divider 76  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   439      IfxScuCcu_Ndivider_77,         /**< \brief  N-divider 77  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   440      IfxScuCcu_Ndivider_78,         /**< \brief  N-divider 78  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   441      IfxScuCcu_Ndivider_79,         /**< \brief  N-divider 79  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   442      IfxScuCcu_Ndivider_80,         /**< \brief  N-divider 80  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   443      IfxScuCcu_Ndivider_81,         /**< \brief  N-divider 81  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   444      IfxScuCcu_Ndivider_82,         /**< \brief  N-divider 82  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   445      IfxScuCcu_Ndivider_83,         /**< \brief  N-divider 83  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   446      IfxScuCcu_Ndivider_84,         /**< \brief  N-divider 84  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   447      IfxScuCcu_Ndivider_85,         /**< \brief  N-divider 85  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   448      IfxScuCcu_Ndivider_86,         /**< \brief  N-divider 86  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   449      IfxScuCcu_Ndivider_87,         /**< \brief  N-divider 87  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   450      IfxScuCcu_Ndivider_88,         /**< \brief  N-divider 88  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   451      IfxScuCcu_Ndivider_89,         /**< \brief  N-divider 89  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   452      IfxScuCcu_Ndivider_90,         /**< \brief  N-divider 90  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   453      IfxScuCcu_Ndivider_91,         /**< \brief  N-divider 91  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   454      IfxScuCcu_Ndivider_92,         /**< \brief  N-divider 92  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   455      IfxScuCcu_Ndivider_93,         /**< \brief  N-divider 93  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   456      IfxScuCcu_Ndivider_94,         /**< \brief  N-divider 94  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   457      IfxScuCcu_Ndivider_95,         /**< \brief  N-divider 95  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   458      IfxScuCcu_Ndivider_96,         /**< \brief  N-divider 96  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   459      IfxScuCcu_Ndivider_97,         /**< \brief  N-divider 97  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   460      IfxScuCcu_Ndivider_98,         /**< \brief  N-divider 98  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   461      IfxScuCcu_Ndivider_99,         /**< \brief  N-divider 99  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   462      IfxScuCcu_Ndivider_100,        /**< \brief  N-divider 100  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   463      IfxScuCcu_Ndivider_101,        /**< \brief  N-divider 101  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   464      IfxScuCcu_Ndivider_102,        /**< \brief  N-divider 102  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   465      IfxScuCcu_Ndivider_103,        /**< \brief  N-divider 103  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   466      IfxScuCcu_Ndivider_104,        /**< \brief  N-divider 104  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   467      IfxScuCcu_Ndivider_105,        /**< \brief  N-divider 105  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   468      IfxScuCcu_Ndivider_106,        /**< \brief  N-divider 106  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   469      IfxScuCcu_Ndivider_107,        /**< \brief  N-divider 107  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   470      IfxScuCcu_Ndivider_108,        /**< \brief  N-divider 108  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   471      IfxScuCcu_Ndivider_109,        /**< \brief  N-divider 109  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   472      IfxScuCcu_Ndivider_110,        /**< \brief  N-divider 110  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   473      IfxScuCcu_Ndivider_111,        /**< \brief  N-divider 111  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   474      IfxScuCcu_Ndivider_112,        /**< \brief  N-divider 112  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   475      IfxScuCcu_Ndivider_113,        /**< \brief  N-divider 113  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   476      IfxScuCcu_Ndivider_114,        /**< \brief  N-divider 114  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   477      IfxScuCcu_Ndivider_115,        /**< \brief  N-divider 115  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   478      IfxScuCcu_Ndivider_116,        /**< \brief  N-divider 116  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   479      IfxScuCcu_Ndivider_117,        /**< \brief  N-divider 117  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   480      IfxScuCcu_Ndivider_118,        /**< \brief  N-divider 118  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   481      IfxScuCcu_Ndivider_119,        /**< \brief  N-divider 119  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   482      IfxScuCcu_Ndivider_120,        /**< \brief  N-divider 120  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   483      IfxScuCcu_Ndivider_121,        /**< \brief  N-divider 121  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   484      IfxScuCcu_Ndivider_122,        /**< \brief  N-divider 122  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   485      IfxScuCcu_Ndivider_123,        /**< \brief  N-divider 123  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   486      IfxScuCcu_Ndivider_124,        /**< \brief  N-divider 124  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   487      IfxScuCcu_Ndivider_125,        /**< \brief  N-divider 125  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   488      IfxScuCcu_Ndivider_126,        /**< \brief  N-divider 126  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   489      IfxScuCcu_Ndivider_127,        /**< \brief  N-divider 127  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   490      IfxScuCcu_Ndivider_128         /**< \brief  N-divider 128  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   491  } IfxScuCcu_Ndivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   492  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   493  /** \brief MODULE_SCU.PLLCON0.B.PDIV, specifies the P-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   495  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   496  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   497      IfxScuCcu_Pdivider_1 = 0,      /**< \brief  P-divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   498      IfxScuCcu_Pdivider_2,          /**< \brief  P-divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   499      IfxScuCcu_Pdivider_3,          /**< \brief  P-divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   500      IfxScuCcu_Pdivider_4,          /**< \brief  P-divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   501      IfxScuCcu_Pdivider_5,          /**< \brief  P-divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   502      IfxScuCcu_Pdivider_6,          /**< \brief  P-divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   503      IfxScuCcu_Pdivider_7,          /**< \brief  P-divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   504      IfxScuCcu_Pdivider_8           /**< \brief  P-divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   505  } IfxScuCcu_Pdivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   507  /** \brief SysPll & Per Pll input clock selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   508   * SYSPLLCON0.B.INSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   509   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   510  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   511  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   512      IfxScuCcu_PllInputClockSelection_fOsc1   = 0, /**< \brief Backup clock select */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   513      IfxScuCcu_PllInputClockSelection_fOsc0   = 1, /**< \brief fOsc0 or XTAL clock select */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   514      IfxScuCcu_PllInputClockSelection_fSysclk = 2  /**< \brief fOsc1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   515  } IfxScuCcu_PllInputClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   517  /** \brief trap request type
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   518   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   519  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   520  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   521      IfxScuCcu_Traprequest_esr0 = 0,  /**< \brief external service request 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   522      IfxScuCcu_Traprequest_esr1,      /**< \brief external service request 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   523      IfxScuCcu_Traprequest_trap2,     /**< \brief trap2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   524      IfxScuCcu_Traprequest_smu        /**< \brief safety management unit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   525  } IfxScuCcu_Traprequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   527  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   528  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   529  /** \brief modulation enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   530   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   531  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   532  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   533      IfxScuCcu_ModEn_disabled = 0,  /**< \brief disable modulation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   534      IfxScuCcu_ModEn_enabled  = 1   /**< \brief enable modulation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   535  } IfxScuCcu_ModEn;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   537  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   538  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   539  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   541  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   542   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   543  /** \brief Configuration structure type for the Per Pll step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   544   * This structure must be used to configure the P, N and K2, K3 dividers .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   545   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   546  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   547  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   548      uint8 pDivider;              /**< \brief P divider value for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   549      uint8 nDivider;              /**< \brief N divider value for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   550      uint8 k2Divider;             /**< \brief K2 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   551      uint8 k3Divider;             /**< \brief K3 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   552      uint8 k3DividerBypass;       /**< \brief Divider Bypass
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   553                                    * 0 - The divide by block in front of the K3-Divider is not bypassed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   554                                    * 1-  The divide by block in front of the K3-Divider is bypassed. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   555  } IfxScuCcu_PerPllConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   556  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   557  /** \brief Configuration structure type for the Pll initial step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   558   * This structure must be used to configure the P, N and K2 dividers for initial step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   560  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   561  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   562      uint8 pDivider;        /**< \brief P divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   563      uint8 nDivider;        /**< \brief N divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   564      uint8 k2Divider;       /**< \brief K2 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   565  } IfxScuCcu_SysPllConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   567  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   568  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   569  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   570   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   571  /** \brief Configuration structure type for CCUCON registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   573  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   574  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   575      uint32 value;       /**< \brief CCUCON Register value to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   576      uint32 mask;        /**< \brief CCUCON Mask to select the bit fields to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   577  } IfxScuCcu_CcuconRegConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   578  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   579  /** \brief Configuration structure type for the Pll Steps for current jump control.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   581  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   582  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   583      uint8   k2Step;         /**< \brief K2 divider value for this step. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   584      float32 waitTime;       /**< \brief Wait time for for this step. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   585  } IfxScuCcu_PllStepConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   587  /** \brief Configuration structure type for the Pll Parameters.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   589  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   590  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   591      uint32                           xtalFrequency;                /**< \brief Xtal frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   592      IfxScuCcu_PllInputClockSelection pllInputClockSelection;       /**< \brief Pll input clock selection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   593      IfxScuCcu_SysPllConfig           sysPllConfig;                 /**< \brief System PLL Configurations */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   594      IfxScuCcu_PerPllConfig           perPllConfig;                 /**< \brief Peripheral PLL Configurations */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   595  } IfxScuCcu_pllsParameterConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   596  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   597  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   599  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   600   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   601  /** \brief Configuration structure type for the Flash waitstate configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   603  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   604  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   605      uint32 value;       /**< \brief FLASH.FCON Register value to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   606      uint32 mask;        /**< \brief FLASH.FCON Mask to select the bit fields to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   607  } IfxScuCcu_FlashWaitstateConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   609  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   610  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   611  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   612   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   613  /** \brief Configuration structure type for all the CCUCON registers to configure clock distribution.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   615  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   616  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   617      IfxScuCcu_CcuconRegConfig ccucon0;        /**< \brief CCUCON0 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   618      IfxScuCcu_CcuconRegConfig ccucon1;        /**< \brief CCUCON1 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   619      IfxScuCcu_CcuconRegConfig ccucon2;        /**< \brief CCUCON2 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   620      IfxScuCcu_CcuconRegConfig ccucon5;        /**< \brief CCUCON5 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   621      IfxScuCcu_CcuconRegConfig ccucon6;        /**< \brief CCUCON6 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   622      IfxScuCcu_CcuconRegConfig ccucon7;        /**< \brief CCUCON7 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   623      IfxScuCcu_CcuconRegConfig ccucon8;        /**< \brief CCUCON8 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   624      IfxScuCcu_CcuconRegConfig ccucon9;        /**< \brief CCUCON9 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   625      IfxScuCcu_CcuconRegConfig ccucon10;       /**< \brief CCUCON10 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   626      IfxScuCcu_CcuconRegConfig ccucon11;       /**< \brief CCUCON11 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   627  } IfxScuCcu_ClockDistributionConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   629  /** \brief Configuration structure type for the Pll Initial Step Configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   631  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   633      IfxScuCcu_pllsParameterConfig pllsParameters;       /**< \brief Configuration Parameters for both PLLs */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   634      float32                       waitTime;             /**< \brief Wait time for for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   635  } IfxScuCcu_InitialStepConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   637  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   638   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   639  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   640  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   641      uint8                              numOfSteps;       /**< \brief Number of PLL divider steps during clock throttling */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   642      IFX_CONST IfxScuCcu_PllStepConfig *pllSteps;         /**< \brief Pointer to the array of Pll divider step configuration. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   643  } IfxScuCcu_PllThrottleConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   644  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   645  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   647  /** \brief modulation config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   648   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   649  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   650  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   651      IfxScuCcu_ModEn               Mod_Enable;       /**< \brief modulation enable */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   652      IfxScuCcu_ModulationAmplitude Mod_Amp;          /**< \brief modulation amplitude */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   653  } IfxScuCcu_Mod_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   655  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   656   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   657  /** \brief Configuration structure SCU module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   658   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   659  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   660  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   661      IfxScuCcu_InitialStepConfig               pllInitialStepConfig;           /**< \brief Configuration of first step which is same as internal osc frequency. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   662      IfxScuCcu_PllThrottleConfig               sysPllThrottleConfig;           /**< \brief Configuration of PLL throttling. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   663      IfxScuCcu_ClockDistributionConfig         clockDistribution;              /**< \brief Configuration of of bus clocks and other module clock distribution. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   664      IFX_CONST IfxScuCcu_FlashWaitstateConfig *flashFconWaitStateConfig;       /**< \brief Configuration of flash waitstate */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   665      IFX_CONST IfxScuCcu_Mod_Config           *modulationConfig;               /**< \brief modulation configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   666  } IfxScuCcu_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   668  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   669  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   670  /** \brief structure holding the RGain parameters for modulation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   671   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   672  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   673  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   674      float32 RGainNom;       /**< \brief RGain Nominal value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   675      uint16  RGainHex;       /**< \brief RGain Hex value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   676  } IfxScuCcu_RGain_Values;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   678  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   679   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   681  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   682  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   683  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   684  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   685  /** \brief API to wait for requested duration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   686   * Note: IfxScuCcu_wait shall not use STM in future, because we can guarantee that STM is enabled after reset but  If PLL init is called for changing the frequency during runtime, there is no guarantee that STM is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   687   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   688   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   689  IFX_INLINE void IfxScuCcu_wait(float32 timeSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   690  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   691  /** \brief API to wait for requested duration along with watchdog service to avoid any reset case during startup of the chip.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   692   * Note: IfxScuCcu_wait shall not use STM in future, because we can guarantee that STM is enabled after reset but  If PLL init is called for changing the frequency during runtime, there is no guarantee that STM is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   694   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   695  IFX_INLINE void IfxScuCcu_waitWithWdtService(float32 timeSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   696  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   697  /** \brief API to configure the LPDIV value to enter into Low Power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   698   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   699   * Caution:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   700   * write to LPDIV with non-zero division ratio will cause system to enter low power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   701   * Low power mode will affect different SPBDIV and SRIDIV ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   703   * The original CCUCON0 ratios should be preserved by user prior to calling this function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   704   * The "normal" CCUCON0 ratios have to be passed to API: "IfxScuCcu_switchToNormalMode" to go back to the original division ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   705   * \param lpDiv Low Power Division Ratio
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   706   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   708  IFX_INLINE void IfxScuCcu_switchToLowPowerMode(IfxScuCcu_LowPowerDivRatio lpDiv);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   710  /** \brief API to switch back to normal mode from low power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   711   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   712   * Caution:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   713   * The original CCUCON0 setting has to be saved by user prior to entering Low Power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   714   * Pass the original CCUCON0 register as a whole word to this function to restore the normal settings.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   715   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   716   * Ramp back to normal mode is done in steps to avoid sudden jump in frequency and power usage.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   717   * \param ccucon0 CCUCON0 values at normal mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   718   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   720   * Switch to low power mode and back using iLLD functions as below
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   721   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   722   *     uint32 ccucon0 = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   723   *     IfxScuCcu_LowPowerDivRatio lpDiv = IfxScuCcu_LowPowerDivRatio_divBy30;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   724   *     IfxScuCcu_switchToLowPowerMode(lpDiv);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   725   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   726   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   727   * Switch back to normal mode  with the saved ccucon0 value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   728   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   729   *     IfxScuCcu_switchToNormalMode(ccucon0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   730   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   733  IFX_INLINE void IfxScuCcu_switchToNormalMode(const uint32 ccucon0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   735  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   736  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   737  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   738   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   739  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   740  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   741  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   742  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   743  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   744  /** \brief API to get ADAS divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   745   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   746   * \return ADAS frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   748  IFX_INLINE float32 IfxScuCcu_getAdasFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   750  /** \brief API to get Adc (EVADC, EDSADC)  frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   751   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   752   * \return Adc frequency (fADC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   753   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   754  IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   755  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   756  /** \brief API to get ASCLINF divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   757   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   758   * \return AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   759   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   760  IFX_INLINE float32 IfxScuCcu_getAsclinFFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   762  /** \brief API to get EBU frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   763   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   764   * \return EBU frequency (fEBU) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   765   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   766  IFX_INLINE float32 IfxScuCcu_getEbuFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   768  /** \brief API to get EVR Oscillator frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   769   * This API returns the constant which is specific to the ScuCcu of the controller.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   770   * \return EVR Oscillator frequency (fBACK or fEVR) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   771   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   772  IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   774  /** \brief API to get GETH divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   775   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   776   * \return GETH frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   777   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   778  IFX_INLINE float32 IfxScuCcu_getGethFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   780  /** \brief API to get GTMdivider frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   781   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   782   * return GTM frequency (fGTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   783   * \return Gtm Frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   784   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   785  IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   787  /** \brief API to get I2C frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   788   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   789   * \return I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   790   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   791  IFX_INLINE float32 IfxScuCcu_getI2cFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   792  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   793  /** \brief API to get MCANH divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   794   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   795   * \return MCANH frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   796   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   797  IFX_INLINE float32 IfxScuCcu_getMcanhFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   799  /** \brief API to get Oscillator 0 frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   800   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   801   * \return Osc0 frequency (fOSC0) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   802   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   803  IFX_INLINE float32 IfxScuCcu_getOsc0Frequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   804  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   805  /** \brief API to get Oscillator 0 frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   806   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   807   * \return Osc frequency (fOSC) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   808   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   809  IFX_INLINE float32 IfxScuCcu_getOscFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   811  /** \brief Returns the clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   812   * \return Clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   813   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   814  IFX_INLINE IfxScuCcu_PllInputClockSelection IfxScuCcu_getSourceSelection(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   816  /** \brief API to get STM divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   817   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   818   * \return STM frequency (fSTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   819   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   820  IFX_INLINE float32 IfxScuCcu_getStmFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   821  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   822  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   823  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   824  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   826  /** \brief API to get ASCLINS divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   827   * This API returns the ASCLINS frequency  based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   828   * \return AsclinS frequency (fASCLINS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   829   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   830  IFX_EXTERN float32 IfxScuCcu_getAsclinSFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   831  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   832  /** \brief API to get BBB divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   833   * This API returns the BBBDivider frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   834   * \return BBB frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   835   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   836  IFX_EXTERN float32 IfxScuCcu_getBbbFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   838  /** \brief This API returns the Cpu frequency based on the divider value in CCUCON register and fSource frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   839   * \param cpu CPU number for which effective fCPU is sought
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   840   * \return Cpu[x] frequency in Hz, where x is cpu number passed as parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   841   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   842  IFX_EXTERN float32 IfxScuCcu_getCpuFrequency(const IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   843  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   844  /** \brief API to get FSI2 divider frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   845   * This API returns the fFSI2 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   846   * \return FSI2 frequency (fFSI2) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   847   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   848  IFX_EXTERN float32 IfxScuCcu_getFsi2Frequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   849  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   850  /** \brief API to get FSI divider frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   851   * This API returns the fFSI based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   852   * \return FSI frequency (fFSI) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   853   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   854  IFX_EXTERN float32 IfxScuCcu_getFsiFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   855  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   856  /** \brief API to get MCAN divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   857   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   858   * \return Mcan frequency (fMCAN) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   859   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   860  IFX_EXTERN float32 IfxScuCcu_getMcanFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   861  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   862  /** \brief get source frequency fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   863   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   864   * \return Module frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   865   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   866  IFX_EXTERN float32 IfxScuCcu_getModuleFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   867  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   868  /** \brief API to get MSC divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   869   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   870   * \return Msc frequency (fMSC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   871   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   872  IFX_EXTERN float32 IfxScuCcu_getMscFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   873  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   874  /** \brief API to get actual PER PLL1  frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   875   * This API returns the PER PLL1 frequency based on the K2 divider value in PLLCON and the VCO frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   876   * Fpll1= (Fosc*N)/(P*K2)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   877   * \return PER PLL1 (K2 Divider) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   878   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   879  IFX_EXTERN float32 IfxScuCcu_getPerPllFrequency1(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   880  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   881  /** \brief API to get actual PER PLL2 (K3 Divider) frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   882   * This API returns the PER PLL2 frequency based on the K3 divider value in PLLCON and the VCO frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   883   * Fpll2= (Fosc*N)/(P*K3*1.6)  // DIVBY = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   884   * Fpll2= (Fosc*N)/(P*K3*2)  // DIVBY = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   885   * \return PER PLL2 (K3 Divider ) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   886   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   887  IFX_EXTERN float32 IfxScuCcu_getPerPllFrequency2(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   888  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   889  /** \brief API to get actual Sys PLL output frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   890   * This API returns the based on the divider values in CCUCON, PLLCON registers and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   891   * \return System Pll (fSysPLL) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   892   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   893  IFX_EXTERN float32 IfxScuCcu_getPllFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   894  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   895  /** \brief API to get Qspi divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   896   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   897   * \return Qspi frequency (fQspi) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   898   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   899  IFX_EXTERN float32 IfxScuCcu_getQspiFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   900  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   901  /** \brief get source frequency fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   902   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   903   * \param fsource fsource selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   904   * \return Effective fSOURCE in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   905   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   906  IFX_EXTERN float32 IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource fsource);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   907  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   908  /** \brief API to get SPB divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   909   * This API returns the based on fSOURCE and also on Low power divider mode and/or SPBDIV divider value in CCUCON registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   910   * \return SPB frequency (fSPB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   911   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   912  IFX_EXTERN float32 IfxScuCcu_getSpbFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   913  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   914  /** \brief API to get SRI divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   915   * This API returns the Sri frequency based on the divider values in CCUCON registers and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   916   * \return Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   918  IFX_EXTERN float32 IfxScuCcu_getSriFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   920  /** \brief API to set ADAS frequency (with ADAS divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   921   * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   922   * \param adasFreq ADAS frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   923   * \return Actual Adas frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   924   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   925  IFX_EXTERN float32 IfxScuCcu_setAdasFrequency(float32 adasFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   926  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   927  /** \brief API to set ASCLINF frequency (with ASCLINF divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   928   * This API configure ASCLINF divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   929   * \param asclinFFreq AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   930   * \return Actual AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   931   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   932  IFX_EXTERN float32 IfxScuCcu_setAsclinFFrequency(float32 asclinFFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   933  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   934  /** \brief API to set ASCLINS frequency (with ASCLINS divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   935   * This API configure ASCLINS divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   936   * \param asclinSFreq Desired AscLinS frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   937   * \return Actual AsclinS frequency (fASCLINS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   938   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   939  IFX_EXTERN float32 IfxScuCcu_setAsclinSFrequency(float32 asclinSFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   940  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   941  /** \brief API to set BBB frequency (with Bbb divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   942   * This API configure Bbb divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   943   * \param bbbFreq Bbb frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   944   * \return Actual Bbb frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   945   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   946  IFX_EXTERN float32 IfxScuCcu_setBbbFrequency(float32 bbbFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   948  /** \brief API to set CPU frequency (with CPU divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   949   * This API configure CPU divider values in CCUCON registers. The actual frequency is always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   950   * \param cpu CPU number for which fCPU to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   951   * \param cpuFreq Desired CPU frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   952   * \return Actual CPU[x] frequency in Hz, where x is the cpu number passed as parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   953   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   954  IFX_EXTERN float32 IfxScuCcu_setCpuFrequency(IfxCpu_ResourceCpu cpu, float32 cpuFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   955  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   956  /** \brief API to set FSI2 frequency (with FSI2 divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   957   * This API configure Fsi2 divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   958   * \param fsi2Freq FSI2 frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   959   * \return Actual Fsi2 frequency (fFSI2) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   960   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   961  IFX_EXTERN float32 IfxScuCcu_setFsi2Frequency(float32 fsi2Freq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   962  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   963  /** \brief API to set FSI frequency (with FSI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   964   * This API configure Fsi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   965   * \param fsiFreq FSI frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   966   * \return Actual Fsi frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   967   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   968  IFX_EXTERN float32 IfxScuCcu_setFsiFrequency(float32 fsiFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   969  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   970  /** \brief API to set GETH frequency (with GETH divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   971   * This API configure geth divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   972   * \param gethFreq GETH frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   973   * \return Actual Geth frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   974   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   975  IFX_EXTERN float32 IfxScuCcu_setGethFrequency(float32 gethFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   976  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   977  /** \brief API to set GTM frequency (with GTM divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   978   * This API configure GTM divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   979   * \param gtmFreq Desired GTM frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   980   * \return Actual GTM frequency in HZ
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   981   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   982  IFX_EXTERN float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   983  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   984  /** \brief API to set I2C frequency (with I2C divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   985   * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   986   * \param i2cFreq I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   987   * \return Actual I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   988   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   989  IFX_EXTERN float32 IfxScuCcu_setI2cFrequency(float32 i2cFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   990  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   991  /** \brief API to set MCAN frequency (with MCAN divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   992   * This API configure MCAN divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   993   * \param mcanFreq Desired MSC frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   994   * \return Actual Mcan frequency (fMCAN) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   995   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   996  IFX_EXTERN float32 IfxScuCcu_setMcanFrequency(float32 mcanFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   997  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   998  /** \brief API to set MCANH frequency (with MCANH divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   999   * This API configure mcanh divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1000   * \param mcanhFreq MCANH frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1001   * \return Actual MCanh frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1002   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1003  IFX_EXTERN float32 IfxScuCcu_setMcanhFrequency(float32 mcanhFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1004  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1005  /** \brief API to set MSC frequency (with MSC divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1006   * This API configure MSC divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1007   * \param mscFreq Desired MSC frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1008   * \return Actual Msc frequency (fMSC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1009   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1010  IFX_EXTERN float32 IfxScuCcu_setMscFrequency(float32 mscFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1012  /** \brief API to set QSPI frequency (with QSPI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1013   * This API configure Qspi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1014   * \param qspiFreq Desired QSPI frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1015   * \return Actual Qspi frequency (fQspi) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1016   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1017  IFX_EXTERN float32 IfxScuCcu_setQspiFrequency(float32 qspiFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1019  /** \brief API to set SPB frequency (with SPB divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1020   * This API configure SPB divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1021   * \param spbFreq Desired SPB frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1022   * \return Actual SPB frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1023   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1024  IFX_EXTERN float32 IfxScuCcu_setSpbFrequency(float32 spbFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1025  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1026  /** \brief API to set SRI frequency (with SRI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1027   * This API configure Sri divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1028   * \param sriFreq Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1029   * \return Actual Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1030   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1031  IFX_EXTERN float32 IfxScuCcu_setSriFrequency(float32 sriFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1032  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1033  /** \brief API to set STM frequency (with STM divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1034   * This API configure Stm divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1035   * \param stmFreq Stm frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1036   * \return Actual Stm frequency (fSTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1037   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1038  IFX_EXTERN float32 IfxScuCcu_setStmFrequency(float32 stmFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1039  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1040  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1041  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1042  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1043   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1044  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1045  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1046  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1047  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1048  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1049  /** \brief This inline function configures the Ccu SYS PLLs initial step and PER PLL.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1051  IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1053  /** \brief Inlined API for clock distribution
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1054   * For each CCUCON register update the configured value with the mask.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1055   * \param clockDistributionConfig pointer to clock distribution structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1056   * \return TRUE: Operation successful, FALSE: Operation Failure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1057   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1058  IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1059  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1060  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1061  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1062  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1063  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1064  /** \brief API for clock distribution.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1065   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1066   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1067  IFX_EXTERN void IfxScuCcu_distributeClock(IfxScuCcu_ClockDistributionConfig *clockDistributionConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1068  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1069  /** \brief API to initialize the SCU Clock Control Unit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1070   * This API initialize the Sys PLL with ramp steps, BUS dividers and Per PLL for the configuration provided by the configuration structure.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1071   * FSyspll = (Fosc * Nsys)/(Psys * K2sys);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1072   * Fpll1= (Fosc * Nper)/(Pper * K2per);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1073   * Fpll2= (Fosc * Nper)/(Pper * K3per * 1.6); // if DIVBY = 0, else Fpll2= (Fosc * Nper)/(Pper * K3per * 2) // if DIVBY = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1074   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1075   * Note: Following SMU alarms are disabled before the PLL configuration and Enabled at the end of PLL lock in the function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1076   * PLL0,1,2 clock out of range frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1077   * PLL0,1 VCO loss of lock event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1078   * System PLL Oscillator Watchdog, input clock out of range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1079   * The application should store/restore these alarm configurations if required.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1080   * \param config Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1081   * \return Error status of the ScuCcu initialization process.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1082   * \retval TRUE: If an error occurred during initialization.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1083   * \retval FALSE: If initialization was successful.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1084   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1085  IFX_EXTERN boolean IfxScuCcu_init(const IfxScuCcu_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1086  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1087  /** \brief Initializes the clock configuration with default values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1088   * \param cfg Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1089   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1090   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1091  IFX_EXTERN void IfxScuCcu_initConfig(IfxScuCcu_Config *cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1092  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1093  /** \brief API to switch to Backup clock from the current PLL frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1094   * \param cfg Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1095   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1096   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1097  IFX_EXTERN void IfxScuCcu_switchToBackupClock(const IfxScuCcu_Config *cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1098  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1099  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1100  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1101  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1102  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1105  /** \brief Clear the trap status flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1106   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1107   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1108   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1109  IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1110  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1111  /** \brief Get trap disable flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1112   * \param cpuIndex Cpu index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1113   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1114   * \return Trap request can be generated or not.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1115   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1116  IFX_INLINE boolean IfxScuCcu_getTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1117  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1118  /** \brief Get the trap status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1119   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1120   * \return Trap was requested or not.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1121   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1122  IFX_INLINE boolean IfxScuCcu_getTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1124  /** \brief Set the trap disable flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1125   * \param cpuIndex Cpu index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1126   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1127   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1129  IFX_INLINE void IfxScuCcu_setTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1131  /** \brief Set the trap status flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1132   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1134   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1135  IFX_INLINE void IfxScuCcu_setTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1136  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1137  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1138   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1139  IFX_INLINE boolean IfxScuCcu_throttleSysPllClockInline(const IfxScuCcu_PllThrottleConfig *pllThrottleConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1140  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1141  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1142  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1143  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1145  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1146   * \param modamp modulation amplitude
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1147   * \param RGain_P RGain values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1148   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1149   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1150  IFX_EXTERN void IfxScuCcu_calRGainParameters(IfxScuCcu_ModulationAmplitude modamp, IfxScuCcu_RGain_Values *RGain_P);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1151  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1152  /** \brief initialize modulation parameters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1153   * \param Mod_Cfg modulation configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1156  IFX_EXTERN void IfxScuCcu_modulation_init(const IfxScuCcu_Mod_Config *Mod_Cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1158  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1159   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1160   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1161  IFX_EXTERN void IfxScuCcu_throttleSysPllClock(IfxScuCcu_PllThrottleConfig *pllThrottleConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1163  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1164  /*-------------------Global Exported Variables/Constants----------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1165  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1167  /** \brief maps to the IfxScuCcu_ModulationAmplitude enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1169  IFX_EXTERN IFX_CONST float32 IfxScuCcu_MA_percent[IfxScuCcu_ModulationAmplitude_count];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1170  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1171  /** \brief Configuration structure for SCU CCU driver.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1172   * The values of this structure are defined as # defined macros in the implementation of Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1173   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1174  IFX_EXTERN IFX_CONST IfxScuCcu_Config     IfxScuCcu_defaultClockConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1176  /** \brief default modulation config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1177   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1178  IFX_EXTERN IFX_CONST IfxScuCcu_Mod_Config IfxScuCcu_defaultModConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1180  IFX_EXTERN uint32                         IfxScuCcu_xtalFrequency;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1182  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1183  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1184  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1185  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1186  IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1187  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1188      uint32 trapclear = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1189      SCU_TRAPCLR.U |= (trapclear << request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1190  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1193  IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1194  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1195      uint8                                initError = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1196      uint16                               endinitSfty_pw;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1197  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1198      uint32                               timeoutCycleCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1199      const IfxScuCcu_pllsParameterConfig *pllsParamCfg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1200      pllsParamCfg   = &pllInitStepCfg->pllsParameters;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1201      /*get the watch-dog passwords for usage with this function*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1202      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1204      /* Reset Safety ENDINIT, SCU_CCUCON registers are protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1205      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1207      timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1208  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1209      while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1210      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1211          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1212      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1213  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1214      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1215          Ifx_SCU_CCUCON0 scuCcucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1216          scuCcucon0.U        = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1217          scuCcucon0.B.CLKSEL = 0; /*Select the EVR as fsource0/1/2 for the clock distribution */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1218          scuCcucon0.B.UP     = 1; /*Update the ccucon0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1219          SCU_CCUCON0.U       = scuCcucon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1220      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1221  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1222      timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1224      while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1225      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1226          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1227      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1229      /*Disable SMU Alarms */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1230      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1231          SMU_KEYS.U    = (uint32)0xBCU;        /* Enable access to SMU registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1232          SMU_AG8CF0.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1233          SMU_AG8CF1.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1234          SMU_AG8CF2.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1235          SMU_KEYS.U    = (uint32)0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1236      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1238      /* Power down the both the PLLs before configuring registers*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1239      /* Both the PLLs are powered down to be sure for asynchronous PLL registers update cause no glitches */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1240      SCU_SYSPLLCON0.B.PLLPWD = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1241      SCU_PERPLLCON0.B.PLLPWD = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1242  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1243      timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1245      while ((SCU_SYSPLLSTAT.B.PWDSTAT == 0) || (SCU_PERPLLSTAT.B.PWDSTAT == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1246      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1247          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1248      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1249  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1250      /* Now configure the oscillator, required oscillator mode is external crystal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1252      if ((pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fOsc0) || (pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fSysclk))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1253  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1254      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1255          Ifx_SCU_OSCCON scuOsccon;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1256          scuOsccon.U      = SCU_OSCCON.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1257  #if (IFX_CFG_SCU_EXT_CLOCK == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1258          scuOsccon.B.MODE = 2U;   /* external clock selected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1259  #else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1260          scuOsccon.B.MODE = 0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1261  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1262  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1263          scuOsccon.B.OSCVAL = (uint32)(pllsParamCfg->xtalFrequency / 1000000U) - 15; /*XTAL range 16MHz to 40MHz*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1264          /*Note: Oscillator Watchdog Reset (OSCRES) is not required when the PLLs are powered down*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1265          SCU_OSCCON.U       = scuOsccon.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1266      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1267  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1268      /* Configure the initial steps for the system PLL*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1269      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1270          Ifx_SCU_SYSPLLCON0 sysPllCon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1271          sysPllCon0.U       = SCU_SYSPLLCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1272          sysPllCon0.B.PDIV  = pllsParamCfg->sysPllConfig.pDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1273          sysPllCon0.B.NDIV  = pllsParamCfg->sysPllConfig.nDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1274          sysPllCon0.B.INSEL = pllsParamCfg->pllInputClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1275          SCU_SYSPLLCON0.U   = sysPllCon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1276      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1278      /* Configure the initial steps for the peripheral PLL*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1279      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1280          Ifx_SCU_PERPLLCON0 scuPerPllCon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1281          scuPerPllCon0.U       = SCU_PERPLLCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1282          scuPerPllCon0.B.DIVBY = pllsParamCfg->perPllConfig.k3DividerBypass;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1283          scuPerPllCon0.B.PDIV  = pllsParamCfg->perPllConfig.pDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1284          scuPerPllCon0.B.NDIV  = pllsParamCfg->perPllConfig.nDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1285          SCU_PERPLLCON0.U      = scuPerPllCon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1286      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1288      /* Power up the both the PLLs before configuring registers*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1289      SCU_SYSPLLCON0.B.PLLPWD = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1290      SCU_PERPLLCON0.B.PLLPWD = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1292      timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1294      while ((SCU_SYSPLLSTAT.B.PWDSTAT == 1) || (SCU_PERPLLSTAT.B.PWDSTAT == 1))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1296          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1298  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1299      timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1301      while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1302             (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1303             (SCU_PERPLLSTAT.B.K3RDY == 0U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1304      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1305          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1306      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1307  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1308      SCU_SYSPLLCON1.B.K2DIV = pllsParamCfg->sysPllConfig.k2Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1309      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1310          Ifx_SCU_PERPLLCON1 scuPerPllCon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1311          scuPerPllCon1.U       = SCU_PERPLLCON1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1312          scuPerPllCon1.B.K2DIV = pllsParamCfg->perPllConfig.k2Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1313          scuPerPllCon1.B.K3DIV = pllsParamCfg->perPllConfig.k3Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1314          SCU_PERPLLCON1.U      = scuPerPllCon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1315      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1316  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1317      timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1319      while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1320             (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1321             (SCU_PERPLLSTAT.B.K3RDY == 0U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1322      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1323          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1324      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1325  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1326      /*Check if the OSC frequencies are in the limit*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1327      timeoutCycleCount = IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1329      while ((SCU_OSCCON.B.PLLLV == 0) && (SCU_OSCCON.B.PLLHV == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1330      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1331          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1332      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1333  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1334      /* Now start PLL locking for latest set values*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1335      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1336          SCU_SYSPLLCON0.B.RESLD = 1;             /* Restart Sys PLL lock detection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1337          SCU_PERPLLCON0.B.RESLD = 1;             /* Restart Per PLL lock detection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1338  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1339          timeoutCycleCount      = IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1340  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1341          while ((SCU_SYSPLLSTAT.B.LOCK == 0) || (SCU_PERPLLSTAT.B.LOCK == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1342          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1343              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1344          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1345      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1346      /*Enable SMU Alarms */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1347      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1348          SMU_KEYS.U = (uint32)0xBCU;           /* Enable access to SMU registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1349          SMU_CMD.U  = (uint32)0x00000005;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1350          SMU_AG8.U  = IFXSCUCCU_SMUALARM_MASK; /* Clear SMU Alarms*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1351          SMU_KEYS.U = (uint32)0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1352      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1353      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1354          Ifx_SCU_CCUCON0 scu_ccucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1355          scu_ccucon0.U        = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1356          scu_ccucon0.B.CLKSEL = 1; /*Select the PLLs for fsource0/1/2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1357          scu_ccucon0.B.UP     = 1; /*Update the ccucon0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1358  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1359          timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1360  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1361          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1362          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1363              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1364          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1365  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1366          SCU_CCUCON0.U     = scu_ccucon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1367  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1368          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1369  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1370          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1371          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1372              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1373          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1374      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1375  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1376      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1377      return (boolean)initError;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1378  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1379  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1380  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1381  IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1382  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1383      uint16 endinitSfty_pw;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1384      uint32 timeoutCycleCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1385      uint32 initError = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1386  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1387      /*get the watch-dog passwords for usage with this function*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1388      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1389  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1390      /* Reset Safety ENDINIT, SCU_CCUCON registers are protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1391      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1393      /*Configure the clock distribution */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1394      {                                                    /*Write CCUCON0 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1395          Ifx_SCU_CCUCON0 ccucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1396          ccucon0.U         = SCU_CCUCON0.U & ~clockDistributionConfig->ccucon0.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1397          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1398          ccucon0.U        |= (clockDistributionConfig->ccucon0.mask & clockDistributionConfig->ccucon0.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1399          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1400  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1401          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1402          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1403              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1404          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1406          SCU_CCUCON0.U     = ccucon0.U;      /*Set update bit explicitly to make above configurations effective */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1407          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1408  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1409          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1410          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1411              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1412          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1413      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1414      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1415          /*Write CCUCON1 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1416          Ifx_SCU_CCUCON1 ccucon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1417          ccucon1.U = SCU_CCUCON1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1419          if (ccucon1.B.CLKSELMCAN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1420              || ccucon1.B.CLKSELMSC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1421              || ccucon1.B.CLKSELQSPI)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1422          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1423              /* Non Zero ClockSel exists - set to Zero */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1424              /* CAUTION: this would briefly reset and set all clocks in CCUCON1! */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1425              ccucon1.U  = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1426              /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1427              ccucon1.U |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1428  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1429              /* set Clock selects to 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1430              ccucon1.B.CLKSELMCAN = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1431              ccucon1.B.CLKSELMSC  = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1432              ccucon1.B.CLKSELQSPI = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1434              timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1435  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1436              while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1437              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1438                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1439              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1441              SCU_CCUCON1.U     = ccucon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1442  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1443              timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1444  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1445              while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1446              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1447                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1448              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1449          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1450  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1451          ccucon1.U         = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1452          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1453          ccucon1.U        |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1454  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1455          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1456  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1457          while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1458          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1459              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1460          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1461  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1462          SCU_CCUCON1.U     = ccucon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1464          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1465  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1466          while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1467          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1468              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1469          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1470      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1472      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1473          /*Write CCUCON2 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1474          Ifx_SCU_CCUCON2 ccucon2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1475          ccucon2.U = SCU_CCUCON2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1477          if (ccucon2.B.CLKSELASCLINS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1478          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1479              /* Non Zero ClockSel exists - set to Zero */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1480              /* CAUTION: this would briefly reset and set ASCLINS clock in CCUCON2! */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1481              ccucon2.U               = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1482              /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1483              ccucon2.U              |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1485              ccucon2.B.CLKSELASCLINS = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1487              timeoutCycleCount       = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1489              while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1490              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1491                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1492              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1494              SCU_CCUCON2.U     = ccucon2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1495  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1496              timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1497  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1498              while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1499              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1500                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1501              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1502          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1503  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1504          ccucon2.U         = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1505          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1506          ccucon2.U        |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1507  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1508          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1509  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1510          while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1511          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1512              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1513          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1515          SCU_CCUCON2.U     = ccucon2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1517          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1518  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1519          while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1520          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1521              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1522          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1523      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1524      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1525          /*Write CCUCON5 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1526          Ifx_SCU_CCUCON5 ccucon5;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1527          ccucon5.U         = SCU_CCUCON5.U & ~clockDistributionConfig->ccucon5.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1528          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1529          ccucon5.U        |= (clockDistributionConfig->ccucon5.mask & clockDistributionConfig->ccucon5.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1530          ccucon5.B.UP      = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1531          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1532  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1533          while (SCU_CCUCON5.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1534          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1535              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1536          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1538          SCU_CCUCON5.U     = ccucon5.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1539          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1541          while (SCU_CCUCON5.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1542          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1543              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1544          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1545      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1546      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1547          /*Write CCUCON6 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1548          Ifx_SCU_CCUCON6 ccucon6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1549          ccucon6.U     = SCU_CCUCON6.U & ~clockDistributionConfig->ccucon6.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1550          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1551          ccucon6.U    |= (clockDistributionConfig->ccucon6.mask & clockDistributionConfig->ccucon6.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1552          SCU_CCUCON6.U = ccucon6.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1553      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1555      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1556          /*Write CCUCON7 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1557          Ifx_SCU_CCUCON7 ccucon7;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1558          ccucon7.U     = SCU_CCUCON7.U & ~clockDistributionConfig->ccucon7.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1559          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1560          ccucon7.U    |= (clockDistributionConfig->ccucon7.mask & clockDistributionConfig->ccucon7.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1561          SCU_CCUCON7.U = ccucon7.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1562      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1563  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1564      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1565          /*Write CCUCON8 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1566          Ifx_SCU_CCUCON8 ccucon8;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1567          ccucon8.U     = SCU_CCUCON8.U & ~clockDistributionConfig->ccucon8.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1568          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1569          ccucon8.U    |= (clockDistributionConfig->ccucon8.mask & clockDistributionConfig->ccucon8.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1570          SCU_CCUCON8.U = ccucon8.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1571      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1572      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1573          /*Write CCUCON9 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1574          Ifx_SCU_CCUCON9 ccucon9;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1575          ccucon9.U     = SCU_CCUCON9.U & ~clockDistributionConfig->ccucon9.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1576          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1577          ccucon9.U    |= (clockDistributionConfig->ccucon9.mask & clockDistributionConfig->ccucon9.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1578          SCU_CCUCON9.U = ccucon9.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1579      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1580      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1581          /*Write CCUCON10 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1582          Ifx_SCU_CCUCON10 ccucon10;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1583          ccucon10.U     = SCU_CCUCON10.U & ~clockDistributionConfig->ccucon10.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1584          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1585          ccucon10.U    |= (clockDistributionConfig->ccucon10.mask & clockDistributionConfig->ccucon10.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1586          SCU_CCUCON10.U = ccucon10.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1587      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1588      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1589          /*Write CCUCON11 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1590          Ifx_SCU_CCUCON11 ccucon11;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1591          ccucon11.U     = SCU_CCUCON11.U & ~clockDistributionConfig->ccucon11.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1592          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1593          ccucon11.U    |= (clockDistributionConfig->ccucon11.mask & clockDistributionConfig->ccucon11.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1594          SCU_CCUCON11.U = ccucon11.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1595      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1596      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1597      return (boolean)initError;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1598  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1599  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1600  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1601  IFX_INLINE float32 IfxScuCcu_getAdasFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1602  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1603      uint32 adasDiv = SCU_CCUCON5.B.ADASDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1605      return (adasDiv == (uint32)0) ? 0 : IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / adasDiv;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1606  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1607  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1609  IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1610  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1611      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1612  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1615  IFX_INLINE float32 IfxScuCcu_getAsclinFFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1616  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1617      float32 freq          = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1619      uint8   asclindiv[16] = {1, 1, 2, 3, 4, 5, 6, 6, 8, 8, 10, 10, 12, 12, 12, 15};
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1620  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1621      if (SCU_CCUCON2.B.ASCLINFDIV)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1622      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1623          freq = IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_2) / asclindiv[SCU_CCUCON2.B.ASCLINFDIV];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1624      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1625  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1626      return freq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1627  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1629  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1630  IFX_INLINE float32 IfxScuCcu_getEbuFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1631  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1632      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1633  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1635  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1636  IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1637  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1638      return IFXSCU_EVR_OSC_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1639  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1641  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1642  IFX_INLINE float32 IfxScuCcu_getGethFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1643  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1644      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON5.B.GETHDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1645  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1647  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1648  IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1649  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1650      /* fGTM = fSOURCEGTM / GTMDIV ;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1651       * fSOURCEGTM = fSPB *2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1652       */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1653      uint8   gtmDiv  = SCU_CCUCON0.B.GTMDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1654      float32 gtmFreq = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1656      if (gtmDiv == 0u)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1657      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1658          gtmFreq = 0.0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1659      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1660      else if (gtmDiv == 1U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1661      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1662          gtmFreq = IfxScuCcu_getSpbFrequency() * 2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1663      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1664      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1665  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1666      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1667          gtmFreq = IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / gtmDiv;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1668      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1669  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1670      return gtmFreq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1671  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1672  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1674  IFX_INLINE float32 IfxScuCcu_getI2cFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1675  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1676      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_2) / SCU_CCUCON1.B.I2CDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1677  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1678  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1679  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1680  IFX_INLINE float32 IfxScuCcu_getMcanhFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1681  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1682      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON5.B.MCANHDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1683  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1684  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1685  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1686  IFX_INLINE float32 IfxScuCcu_getOsc0Frequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1687  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1688      return (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1689  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1690  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1691  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1692  IFX_INLINE float32 IfxScuCcu_getOscFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1693  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1694      float32 freq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1695  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1696      if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1697      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1698          freq = IFXSCU_EVR_OSC_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1699      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1700      else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1701      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1702          freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1703      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1704      else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1705      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1706          freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1707      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1708      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1709      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1710          /* Reserved values, this */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1711          freq = 0.0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1712      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1713  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1714      return freq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1715  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1716  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1717  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1718  IFX_INLINE IfxScuCcu_PllInputClockSelection IfxScuCcu_getSourceSelection(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1719  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1720      return (IfxScuCcu_PllInputClockSelection)SCU_CCUCON0.B.CLKSEL;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1721  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1722  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1723  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1724  IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1725  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1726      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON0.B.STMDIV;
	mov	d4,#0
	call	IfxScuCcu_getSourceFrequency
.L700:
	movh.a	a2,#61443
	ld.bu	d15,[a2]@los(0xf0036030)
	and	d15,#15
	itof	d15,d15
.L701:
	div.f	d15,d2,d15

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   609      g_AppCpu0.info.stmFreq = IfxStm_getFrequency(&MODULE_STM0);
	st.w	[a15]12,d15
.L404:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   610  }
	ret
.L391:
	
__get_clk_function_end:
	.size	get_clk,__get_clk_function_end-get_clk
.L181:
	; End of function
	
	.sdecl	'.text.cpuport.tricore0_trap_yield_for_task',code,cluster('tricore0_trap_yield_for_task')
	.sect	'.text.cpuport.tricore0_trap_yield_for_task'
	.align	2
	
	.global	tricore0_trap_yield_for_task

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   611  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   612  void tricore0_trap_yield_for_task( int iTrapIdentification )
; Function tricore0_trap_yield_for_task
.L100:
tricore0_trap_yield_for_task:	.type	func

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   613  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   614    switch( iTrapIdentification )
	jne	d4,#0,.L37
.L822:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   615    {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   616      case 0:
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   617          core0_trigger_scheduling();
	j	core0_trigger_scheduling

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   618        break;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   619  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   620      default:
.L37:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   621        /* Unimplemented trap called. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   622        /* TODO */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   623        break;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   624    }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   625  }
	ret
.L455:
	
__tricore0_trap_yield_for_task_function_end:
	.size	tricore0_trap_yield_for_task,__tricore0_trap_yield_for_task_function_end-tricore0_trap_yield_for_task
.L231:
	; End of function
	
	.sdecl	'.text.cpuport.tricore1_trap_yield_for_task',code,cluster('tricore1_trap_yield_for_task')
	.sect	'.text.cpuport.tricore1_trap_yield_for_task'
	.align	2
	
	.global	tricore1_trap_yield_for_task

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   626  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   627  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   628  void tricore1_trap_yield_for_task( int iTrapIdentification )
; Function tricore1_trap_yield_for_task
.L102:
tricore1_trap_yield_for_task:	.type	func

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   629  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   630    switch( iTrapIdentification )
	jne	d4,#1,.L38
.L827:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   631    {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   632      case 1:
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   633          core1_trigger_scheduling();
	j	core1_trigger_scheduling

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   634        break;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   635  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   636      default:
.L38:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   637        /* Unimplemented trap called. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   638        /* TODO */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   639        break;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   640    }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   641  }
	ret
.L457:
	
__tricore1_trap_yield_for_task_function_end:
	.size	tricore1_trap_yield_for_task,__tricore1_trap_yield_for_task_function_end-tricore1_trap_yield_for_task
.L236:
	; End of function
	
	.sdecl	'.bss.cpuport.tricore_timers',data,cluster('tricore_timers')
	.sect	'.bss.cpuport.tricore_timers'
	.align	4
tricore_timers:	.type	object
	.size	tricore_timers,48
	.space	48
	.sdecl	'.zrodata.cpuport.STMs',data,rom,cluster('STMs')
	.sect	'.zrodata.cpuport.STMs'
	.align	4
STMs:	.type	object
	.size	STMs,8
	.word	-268431360,-268431104
	.sdecl	'.zrodata.cpuport.GPSR',data,rom,cluster('GPSR')
	.sect	'.zrodata.cpuport.GPSR'
	.align	4
GPSR:	.type	object
	.size	GPSR,8
	.word	-268203632,-268203600
	.sdecl	'.zdata.cpuport.rt_interrupt_from_thread_core0',data,cluster('rt_interrupt_from_thread_core0')
	.sect	'.zdata.cpuport.rt_interrupt_from_thread_core0'
	.align	2
rt_interrupt_from_thread_core0:	.type	object
	.size	rt_interrupt_from_thread_core0,4
	.space	4
	.sdecl	'.zdata.cpuport.rt_interrupt_to_thread_core0',data,cluster('rt_interrupt_to_thread_core0')
	.sect	'.zdata.cpuport.rt_interrupt_to_thread_core0'
	.align	2
rt_interrupt_to_thread_core0:	.type	object
	.size	rt_interrupt_to_thread_core0,4
	.space	4
	.sdecl	'.zdata.cpuport.rt_interrupt_from_thread_core1',data,cluster('rt_interrupt_from_thread_core1')
	.sect	'.zdata.cpuport.rt_interrupt_from_thread_core1'
	.align	2
rt_interrupt_from_thread_core1:	.type	object
	.size	rt_interrupt_from_thread_core1,4
	.space	4
	.sdecl	'.zdata.cpuport.rt_interrupt_to_thread_core1',data,cluster('rt_interrupt_to_thread_core1')
	.sect	'.zdata.cpuport.rt_interrupt_to_thread_core1'
	.align	2
rt_interrupt_to_thread_core1:	.type	object
	.size	rt_interrupt_to_thread_core1,4
	.space	4
	.sdecl	'.zdata.cpuport.rt_thread_switch_interrupt_flag_core0',data,cluster('rt_thread_switch_interrupt_flag_core0')
	.sect	'.zdata.cpuport.rt_thread_switch_interrupt_flag_core0'
	.align	2
rt_thread_switch_interrupt_flag_core0:	.type	object
	.size	rt_thread_switch_interrupt_flag_core0,4
	.space	4
	.sdecl	'.zdata.cpuport.rt_thread_switch_interrupt_flag_core1',data,cluster('rt_thread_switch_interrupt_flag_core1')
	.sect	'.zdata.cpuport.rt_thread_switch_interrupt_flag_core1'
	.align	2
rt_thread_switch_interrupt_flag_core1:	.type	object
	.size	rt_thread_switch_interrupt_flag_core1,4
	.space	4
	.sdecl	'.bss.cpuport.g_AppCpu0',data,cluster('g_AppCpu0')
	.sect	'.bss.cpuport.g_AppCpu0'
	.global	g_AppCpu0
	.align	4
g_AppCpu0:	.type	object
	.size	g_AppCpu0,20
	.space	20
	.calls	'rt_hw_systick_init','IfxStm_Timer_initConfig'
	.calls	'rt_hw_systick_init','IfxStm_Timer_init'
	.calls	'rt_hw_systick_init','IfxStm_Timer_run'
	.calls	'rt_hw_usart_init','initUART'
	.calls	'core0_trigger_scheduling','rt_hw_local_irq_disable'
	.calls	'core0_trigger_scheduling','rt_hw_local_irq_enable'
	.calls	'core1_trigger_scheduling','rt_hw_local_irq_disable'
	.calls	'core1_trigger_scheduling','rt_hw_local_irq_enable'
	.calls	'Core0_INTERRUPT','rt_interrupt_enter'
	.calls	'Core0_INTERRUPT','IfxStm_Timer_acknowledgeTimerIrq'
	.calls	'Core0_INTERRUPT','rt_tick_increase'
	.calls	'Core0_INTERRUPT','rt_interrupt_leave'
	.calls	'Core0_INTERRUPT','rt_cpu_index'
	.calls	'Core0_INTERRUPT','rt_scheduler_do_irq_switch'
	.calls	'Core1_INTERRUPT','rt_interrupt_enter'
	.calls	'Core1_INTERRUPT','IfxStm_Timer_acknowledgeTimerIrq'
	.calls	'Core1_INTERRUPT','rt_tick_increase'
	.calls	'Core1_INTERRUPT','rt_interrupt_leave'
	.calls	'Core1_INTERRUPT','rt_cpu_index'
	.calls	'Core1_INTERRUPT','rt_scheduler_do_irq_switch'
	.calls	'Core0_YIELD','rt_interrupt_enter'
	.calls	'Core0_YIELD','core0_trigger_scheduling'
	.calls	'Core0_YIELD','rt_interrupt_leave'
	.calls	'Core1_YIELD','rt_interrupt_enter'
	.calls	'Core1_YIELD','core1_trigger_scheduling'
	.calls	'Core1_YIELD','rt_interrupt_leave'
	.calls	'rt_hw_board_init','rt_hw_systick_init'
	.calls	'rt_hw_board_init','rt_hw_usart_init'
	.calls	'rt_hw_board_init','rt_components_board_init'
	.calls	'rt_hw_context_switch_to','rt_hw_local_irq_disable'
	.calls	'rt_hw_context_switch_to','rt_cpu_self'
	.calls	'rt_hw_context_switch_to','rt_hw_local_irq_enable'
	.calls	'rt_hw_context_switch_interrupt','rt_hw_local_irq_disable'
	.calls	'rt_hw_context_switch_interrupt','rt_cpu_self'
	.calls	'rt_hw_context_switch_interrupt','rt_hw_local_irq_enable'
	.calls	'rt_hw_context_switch','rt_hw_local_irq_disable'
	.calls	'rt_hw_context_switch','rt_cpu_self'
	.calls	'rt_hw_context_switch','rt_hw_local_irq_enable'
	.calls	'rt_hw_context_switch','rt_hw_spin_unlock'
	.calls	'Core1_init','IfxStm_Timer_initConfig'
	.calls	'Core1_init','IfxStm_Timer_init'
	.calls	'Core1_init','IfxStm_Timer_run'
	.calls	'rt_hw_stack_init','rt_hw_local_irq_disable'
	.calls	'rt_hw_stack_init','rt_hw_local_irq_enable'
	.calls	'rt_hw_stack_init','memset'
	.calls	'get_clk','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'get_clk','IfxScuWdt_disableCpuWatchdog'
	.calls	'get_clk','IfxScuWdt_getSafetyWatchdogPassword'
	.calls	'get_clk','IfxScuWdt_disableSafetyWatchdog'
	.calls	'get_clk','IfxScuCcu_getPllFrequency'
	.calls	'get_clk','IfxScuCcu_getCpuFrequency'
	.calls	'get_clk','IfxScuCcu_getSpbFrequency'
	.calls	'get_clk','IfxScuCcu_getSourceFrequency'
	.calls	'tricore0_trap_yield_for_task','core0_trigger_scheduling'
	.calls	'tricore1_trap_yield_for_task','core1_trigger_scheduling'
	.calls	'core0_trigger_scheduling','.cocofun_5'
	.calls	'core1_trigger_scheduling','.cocofun_5'
	.calls	'Core0_INTERRUPT','.cocofun_6'
	.calls	'Core1_INTERRUPT','.cocofun_6'
	.calls	'Core0_YIELD','.cocofun_4'
	.calls	'.cocofun_4','.cocofun_9'
	.calls	'Core1_YIELD','.cocofun_4'
	.calls	'rt_hw_context_switch_interrupt','.cocofun_7'
	.calls	'rt_hw_context_switch_interrupt','.cocofun_8'
	.calls	'rt_hw_context_switch_interrupt','.cocofun_9'
	.calls	'rt_hw_context_switch','.cocofun_7'
	.calls	'rt_hw_context_switch','.cocofun_8'
	.calls	'rt_hw_stack_init','.cocofun_5'
	.calls	'rt_hw_systick_init','',48
	.calls	'rt_hw_usart_init','',0
	.calls	'core0_trigger_scheduling','',0
	.calls	'.cocofun_5','',0
	.calls	'core1_trigger_scheduling','',0
	.calls	'Core0_INTERRUPT','',0
	.calls	'.cocofun_6','',0
	.calls	'Core1_INTERRUPT','',0
	.calls	'Core0_YIELD','',0
	.calls	'.cocofun_4','',0
	.calls	'.cocofun_9','',0
	.calls	'Core1_YIELD','',0
	.calls	'rt_hw_board_init','',0
	.calls	'rt_hw_context_switch_to','',0
	.calls	'rt_hw_context_switch_interrupt','',0
	.calls	'.cocofun_8','',0
	.calls	'.cocofun_7','',0
	.calls	'rt_hw_context_switch','',0
	.calls	'rt_hw_secondary_cpu_up','',0
	.calls	'Core1_init','',48
	.calls	'rt_hw_ipi_send','',0
	.calls	'rt_hw_spin_lock_init','',0
	.calls	'rt_hw_spin_lock','',8
	.calls	'rt_hw_spin_unlock','',8
	.calls	'rt_hw_cpu_id','',0
	.calls	'rt_hw_local_irq_enable','',0
	.calls	'rt_hw_secondary_cpu_idle_exec','',0
	.calls	'rt_hw_local_irq_disable','',0
	.calls	'rt_hw_stack_init','',16
	.calls	'get_clk','',0
	.calls	'tricore0_trap_yield_for_task','',0
	.extern	rt_tick_increase
	.extern	rt_interrupt_enter
	.extern	rt_interrupt_leave
	.extern	rt_cpu_self
	.extern	rt_cpu_index
	.extern	rt_components_board_init
	.extern	_cpus_lock
	.extern	IfxScuWdt_disableCpuWatchdog
	.extern	IfxScuWdt_disableSafetyWatchdog
	.extern	IfxScuWdt_getCpuWatchdogPassword
	.extern	IfxScuWdt_getSafetyWatchdogPassword
	.extern	IfxScuCcu_getCpuFrequency
	.extern	IfxScuCcu_getPllFrequency
	.extern	IfxScuCcu_getSourceFrequency
	.extern	IfxScuCcu_getSpbFrequency
	.extern	IfxStm_Timer_acknowledgeTimerIrq
	.extern	IfxStm_Timer_run
	.extern	IfxStm_Timer_init
	.extern	IfxStm_Timer_initConfig
	.extern	initUART
	.extern	rt_scheduler_do_irq_switch
	.extern	memset
	.calls	'tricore1_trap_yield_for_task','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L104:
	.word	192595
	.half	3
	.word	.L105
	.byte	4
.L103:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L106
	.byte	2,1,1,3
	.word	174
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,58,17,1,1,5
	.byte	'fun',0,1,58,43
	.word	177
	.byte	6,0,7
	.byte	'__fract',0,4,128,1,7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,149,2,18
	.word	222
	.byte	1,1,5
	.byte	'a',0,1,149,2,44
	.word	234
	.byte	6,0,4
	.byte	'Ifx__stopPerfCounters',0,3,1,169,2,17,1,1,6,0,7
	.byte	'unsigned long long int',0,8,7,9
	.byte	'void',0
.L289:
	.byte	3
	.word	346
	.byte	8
	.byte	'__ld64',0,3,2,132,1,19
	.word	320
	.byte	1,1,5
	.byte	'addr',0,2,132,1,32
	.word	352
	.byte	6,0,4
	.byte	'__st64',0,3,2,140,1,17,1,1,5
	.byte	'addr',0,2,140,1,30
	.word	352
	.byte	5
	.byte	'value',0,2,140,1,43
	.word	320
	.byte	6,0
.L364:
	.byte	7
	.byte	'unsigned int',0,4,7
.L356:
	.byte	7
	.byte	'int',0,4,5,7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,4,238,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	461
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	461
	.byte	16,0,2,35,0,0,12,4,189,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	477
	.byte	4,2,35,0,0
.L347:
	.byte	7
	.byte	'unsigned char',0,1,8,7
	.byte	'unsigned short int',0,2,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,4,247,9,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	613
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,12,4,197,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	652
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,4,135,10,16,4,11
	.byte	'AE',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	613
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	630
	.byte	16,0,2,35,2,0,12,4,205,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	918
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU',0,4,136,17,25,12,13
	.byte	'CON0',0
	.word	573
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	878
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	1109
	.byte	4,2,35,8,0,14
	.word	1149
	.byte	3
	.word	1212
	.byte	4
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,3,164,4,17,1,1,5
	.byte	'watchdog',0,3,164,4,65
	.word	1217
	.byte	5
	.byte	'password',0,3,164,4,82
	.word	630
	.byte	6,0,4
	.byte	'IfxScuWdt_clearSafetyEndinitInline',0,3,3,197,4,17,1,1,5
	.byte	'password',0,3,197,4,59
	.word	630
	.byte	6,0,4
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,3,144,5,17,1,1,5
	.byte	'watchdog',0,3,144,5,63
	.word	1217
	.byte	5
	.byte	'password',0,3,144,5,80
	.word	630
	.byte	6,0,4
	.byte	'IfxScuWdt_setSafetyEndinitInline',0,3,3,177,5,17,1,1,5
	.byte	'password',0,3,177,5,57
	.word	630
	.byte	6,0,8
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,3,220,4,19
	.word	630
	.byte	1,1,5
	.byte	'watchdog',0,3,220,4,74
	.word	1217
	.byte	6,0,8
	.byte	'IfxScuWdt_getSafetyWatchdogPasswordInline',0,3,3,129,5,19
	.word	630
	.byte	1,1,6,0,10
	.byte	'_Ifx_P_OUT_Bits',0,6,145,3,16,4,11
	.byte	'P0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,12,6,171,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1627
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMR_Bits',0,6,171,2,16,4,11
	.byte	'PS0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'PCL0',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	613
	.byte	1,0,2,35,3,0,12,6,251,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1943
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ID_Bits',0,6,133,1,16,4,11
	.byte	'MODREV',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	630
	.byte	16,0,2,35,2,0,12,6,155,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2514
	.byte	4,2,35,0,0,15,4
	.word	613
	.byte	16,3,0,10
	.byte	'_Ifx_P_IOCR0_Bits',0,6,163,1,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	3,5,2,35,0,11
	.byte	'PC0',0,1
	.word	613
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'PC1',0,1
	.word	613
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	613
	.byte	3,5,2,35,2,11
	.byte	'PC2',0,1
	.word	613
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	3,5,2,35,3,11
	.byte	'PC3',0,1
	.word	613
	.byte	5,0,2,35,3,0,12,6,171,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2643
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR4_Bits',0,6,189,1,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	3,5,2,35,0,11
	.byte	'PC4',0,1
	.word	613
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'PC5',0,1
	.word	613
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	613
	.byte	3,5,2,35,2,11
	.byte	'PC6',0,1
	.word	613
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	3,5,2,35,3,11
	.byte	'PC7',0,1
	.word	613
	.byte	5,0,2,35,3,0,12,6,187,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2858
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR8_Bits',0,6,202,1,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	3,5,2,35,0,11
	.byte	'PC8',0,1
	.word	613
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'PC9',0,1
	.word	613
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	613
	.byte	3,5,2,35,2,11
	.byte	'PC10',0,1
	.word	613
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	3,5,2,35,3,11
	.byte	'PC11',0,1
	.word	613
	.byte	5,0,2,35,3,0,12,6,195,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3073
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR12_Bits',0,6,176,1,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	3,5,2,35,0,11
	.byte	'PC12',0,1
	.word	613
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'PC13',0,1
	.word	613
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	613
	.byte	3,5,2,35,2,11
	.byte	'PC14',0,1
	.word	613
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	3,5,2,35,3,11
	.byte	'PC15',0,1
	.word	613
	.byte	5,0,2,35,3,0,12,6,179,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3290
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IN_Bits',0,6,141,1,16,4,11
	.byte	'P0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,12,6,163,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3510
	.byte	4,2,35,0,0,15,24
	.word	613
	.byte	16,23,0,10
	.byte	'_Ifx_P_PDR0_Bits',0,6,212,3,16,4,11
	.byte	'PD0',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	613
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'PD2',0,1
	.word	613
	.byte	2,6,2,35,1,11
	.byte	'PL2',0,1
	.word	613
	.byte	2,4,2,35,1,11
	.byte	'PD3',0,1
	.word	613
	.byte	2,2,2,35,1,11
	.byte	'PL3',0,1
	.word	613
	.byte	2,0,2,35,1,11
	.byte	'PD4',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'PL4',0,1
	.word	613
	.byte	2,4,2,35,2,11
	.byte	'PD5',0,1
	.word	613
	.byte	2,2,2,35,2,11
	.byte	'PL5',0,1
	.word	613
	.byte	2,0,2,35,2,11
	.byte	'PD6',0,1
	.word	613
	.byte	2,6,2,35,3,11
	.byte	'PL6',0,1
	.word	613
	.byte	2,4,2,35,3,11
	.byte	'PD7',0,1
	.word	613
	.byte	2,2,2,35,3,11
	.byte	'PL7',0,1
	.word	613
	.byte	2,0,2,35,3,0,12,6,195,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3834
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDR1_Bits',0,6,233,3,16,4,11
	.byte	'PD8',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'PL8',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'PD9',0,1
	.word	613
	.byte	2,2,2,35,0,11
	.byte	'PL9',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'PD10',0,1
	.word	613
	.byte	2,6,2,35,1,11
	.byte	'PL10',0,1
	.word	613
	.byte	2,4,2,35,1,11
	.byte	'PD11',0,1
	.word	613
	.byte	2,2,2,35,1,11
	.byte	'PL11',0,1
	.word	613
	.byte	2,0,2,35,1,11
	.byte	'PD12',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'PL12',0,1
	.word	613
	.byte	2,4,2,35,2,11
	.byte	'PD13',0,1
	.word	613
	.byte	2,2,2,35,2,11
	.byte	'PL13',0,1
	.word	613
	.byte	2,0,2,35,2,11
	.byte	'PD14',0,1
	.word	613
	.byte	2,6,2,35,3,11
	.byte	'PL14',0,1
	.word	613
	.byte	2,4,2,35,3,11
	.byte	'PD15',0,1
	.word	613
	.byte	2,2,2,35,3,11
	.byte	'PL15',0,1
	.word	613
	.byte	2,0,2,35,3,0,12,6,203,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4138
	.byte	4,2,35,0,0,15,8
	.word	613
	.byte	16,7,0,10
	.byte	'_Ifx_P_ESR_Bits',0,6,111,16,4,11
	.byte	'EN0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,12,6,147,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4463
	.byte	4,2,35,0,0,15,12
	.word	613
	.byte	16,11,0,10
	.byte	'_Ifx_P_PDISC_Bits',0,6,190,3,16,4,11
	.byte	'PDIS0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'PDIS2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'PDIS3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'PDIS4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'PDIS5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'PDIS6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'PDIS7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'PDIS8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'PDIS9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'PDIS10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'PDIS11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'PDIS12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'PDIS13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'PDIS14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'PDIS15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,12,6,187,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4803
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PCSR_Bits',0,6,167,3,16,4,11
	.byte	'SEL0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'SEL1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'SEL2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'SEL3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'SEL4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'SEL5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'SEL6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'SEL7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'SEL8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'SEL9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'SEL10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'SEL11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'SEL12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'SEL13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'SEL14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'SEL15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	613
	.byte	1,0,2,35,3,0,12,6,179,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5169
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR0_Bits',0,6,230,2,16,4,11
	.byte	'PS0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	438
	.byte	28,0,2,35,0,0,12,6,139,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5533
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR4_Bits',0,6,251,2,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'PS4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	438
	.byte	24,0,2,35,0,0,12,6,155,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5680
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR8_Bits',0,6,134,3,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'PS8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	438
	.byte	20,0,2,35,0,0,12,6,163,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5849
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR12_Bits',0,6,240,2,16,4,11
	.byte	'reserved_0',0,2
	.word	630
	.byte	12,4,2,35,0,11
	.byte	'PS12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,12,6,147,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6021
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR0_Bits',0,6,128,2,16,4,11
	.byte	'reserved_0',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	630
	.byte	12,0,2,35,2,0,12,6,219,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6196
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR4_Bits',0,6,149,2,16,4,11
	.byte	'reserved_0',0,4
	.word	438
	.byte	20,12,2,35,0,11
	.byte	'PCL4',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	8,0,2,35,3,0,12,6,235,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6370
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR8_Bits',0,6,160,2,16,4,11
	.byte	'reserved_0',0,4
	.word	438
	.byte	24,8,2,35,0,11
	.byte	'PCL8',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,12,6,243,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6544
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR12_Bits',0,6,139,2,16,4,11
	.byte	'reserved_0',0,4
	.word	438
	.byte	28,4,2,35,0,11
	.byte	'PCL12',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	613
	.byte	1,0,2,35,3,0,12,6,227,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6720
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR_Bits',0,6,208,2,16,4,11
	.byte	'PS0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,12,6,131,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6876
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR_Bits',0,6,234,1,16,4,11
	.byte	'reserved_0',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	613
	.byte	1,0,2,35,3,0,12,6,211,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7209
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR_Bits',0,6,215,1,16,4,11
	.byte	'REN_CTRL',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'RX_EN',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TERM',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'LRXTERM',0,1
	.word	613
	.byte	3,2,2,35,0,11
	.byte	'LVDSM',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'PS',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'TEN_CTRL',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'TX_EN',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'VDIFFADJ',0,1
	.word	613
	.byte	2,4,2,35,1,11
	.byte	'VOSDYN',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'VOSEXT',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'TX_PD',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'TX_PWDPD',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,12,6,203,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7557
	.byte	4,2,35,0,0,15,32
	.word	7837
	.byte	16,7,0,15,56
	.word	613
	.byte	16,55,0,10
	.byte	'_Ifx_P_ACCEN1_Bits',0,6,105,16,4,11
	.byte	'reserved_0',0,4
	.word	438
	.byte	32,0,2,35,0,0,12,6,139,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7895
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ACCEN0_Bits',0,6,68,16,4,11
	.byte	'EN0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	613
	.byte	1,0,2,35,3,0,12,6,131,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7982
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P',0,6,220,5,25,128,2,13
	.byte	'OUT',0
	.word	1903
	.byte	4,2,35,0,13
	.byte	'OMR',0
	.word	2474
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	2594
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2634
	.byte	4,2,35,12,13
	.byte	'IOCR0',0
	.word	2818
	.byte	4,2,35,16,13
	.byte	'IOCR4',0
	.word	3033
	.byte	4,2,35,20,13
	.byte	'IOCR8',0
	.word	3250
	.byte	4,2,35,24,13
	.byte	'IOCR12',0
	.word	3470
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	2634
	.byte	4,2,35,32,13
	.byte	'IN',0
	.word	3785
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	3825
	.byte	24,2,35,40,13
	.byte	'PDR0',0
	.word	4098
	.byte	4,2,35,64,13
	.byte	'PDR1',0
	.word	4414
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	4454
	.byte	8,2,35,72,13
	.byte	'ESR',0
	.word	4754
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	4794
	.byte	12,2,35,84,13
	.byte	'PDISC',0
	.word	5129
	.byte	4,2,35,96,13
	.byte	'PCSR',0
	.word	5493
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	4454
	.byte	8,2,35,104,13
	.byte	'OMSR0',0
	.word	5640
	.byte	4,2,35,112,13
	.byte	'OMSR4',0
	.word	5809
	.byte	4,2,35,116,13
	.byte	'OMSR8',0
	.word	5981
	.byte	4,2,35,120,13
	.byte	'OMSR12',0
	.word	6156
	.byte	4,2,35,124,13
	.byte	'OMCR0',0
	.word	6330
	.byte	4,3,35,128,1,13
	.byte	'OMCR4',0
	.word	6504
	.byte	4,3,35,132,1,13
	.byte	'OMCR8',0
	.word	6680
	.byte	4,3,35,136,1,13
	.byte	'OMCR12',0
	.word	6836
	.byte	4,3,35,140,1,13
	.byte	'OMSR',0
	.word	7169
	.byte	4,3,35,144,1,13
	.byte	'OMCR',0
	.word	7517
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	4454
	.byte	8,3,35,152,1,13
	.byte	'LPCR',0
	.word	7877
	.byte	32,3,35,160,1,13
	.byte	'reserved_C0',0
	.word	7886
	.byte	56,3,35,192,1,13
	.byte	'ACCEN1',0
	.word	7942
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	8509
	.byte	4,3,35,252,1,0,14
	.word	8549
	.byte	3
	.word	9119
	.byte	17,5,187,1,9,4,18
	.byte	'IfxPort_State_notChanged',0,0,18
	.byte	'IfxPort_State_high',0,1,18
	.byte	'IfxPort_State_low',0,128,128,4,18
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,5,169,5,17,1,1,5
	.byte	'port',0,5,169,5,44
	.word	9124
	.byte	5
	.byte	'pinIndex',0,5,169,5,56
	.word	613
	.byte	5
	.byte	'action',0,5,169,5,80
	.word	9129
	.byte	6,0,4
	.byte	'IfxScuCcu_wait',0,3,7,157,14,17,1,1,5
	.byte	'timeSec',0,7,157,14,40
	.word	234
	.byte	19,6,0,0
.L409:
	.byte	8
	.byte	'IfxScuCcu_getStmFrequency',0,3,7,188,13,20
	.word	234
	.byte	1,1
.L410:
	.byte	6,0,17,9,124,9,1,18
	.byte	'IfxCpu_Id_0',0,0,18
	.byte	'IfxCpu_Id_1',0,1,18
	.byte	'IfxCpu_Id_2',0,2,18
	.byte	'IfxCpu_Id_3',0,3,18
	.byte	'IfxCpu_Id_4',0,4,18
	.byte	'IfxCpu_Id_6',0,6,18
	.byte	'IfxCpu_Id_none',0,7,0
.L358:
	.byte	8
	.byte	'IfxCpu_getCoreId',0,3,8,227,6,22
	.word	9394
	.byte	1,1
.L359:
	.byte	6,0,17,9,161,1,9,1,18
	.byte	'IfxCpu_ResourceCpu_0',0,0,18
	.byte	'IfxCpu_ResourceCpu_1',0,1,18
	.byte	'IfxCpu_ResourceCpu_2',0,2,18
	.byte	'IfxCpu_ResourceCpu_3',0,3,18
	.byte	'IfxCpu_ResourceCpu_4',0,4,18
	.byte	'IfxCpu_ResourceCpu_5',0,5,18
	.byte	'IfxCpu_ResourceCpu_none',0,6,0
.L397:
	.byte	8
	.byte	'IfxCpu_getCoreIndex',0,3,8,235,6,31
	.word	9532
	.byte	1,1
.L400:
	.byte	6,0
.L304:
	.byte	8
	.byte	'IfxCpu_areInterruptsEnabled',0,3,8,233,5,20
	.word	613
	.byte	1,1
.L306:
	.byte	6,0
.L301:
	.byte	8
	.byte	'IfxCpu_disableInterrupts',0,3,8,241,5,20
	.word	613
	.byte	1,1
.L303:
	.byte	19,6,0,0,4
	.byte	'IfxCpu_enableInterrupts',0,3,8,251,5,17,1,1,6,0,4
	.byte	'IfxCpu_forceDisableInterrupts',0,3,8,191,6,17,1,1,6,0
.L315:
	.byte	4
	.byte	'IfxCpu_restoreInterrupts',0,3,8,134,8,17,1,1
.L316:
	.byte	5
	.byte	'enabled',0,8,134,8,50
	.word	613
.L318:
	.byte	6,0
.L320:
	.byte	7
	.byte	'unsigned long int',0,4,7,8
	.byte	'IfxCpu_getPerformanceCounter',0,3,8,255,6,19
	.word	9946
	.byte	1,1,5
	.byte	'address',0,8,255,6,55
	.word	630
	.byte	6,0,8
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,8,156,7,20
	.word	613
	.byte	1,1,5
	.byte	'address',0,8,156,7,70
	.word	630
	.byte	6,0,4
	.byte	'IfxCpu_updatePerformanceCounter',0,3,8,138,9,17,1,1,5
	.byte	'address',0,8,138,9,56
	.word	9946
	.byte	5
	.byte	'count',0,8,138,9,72
	.word	9946
	.byte	19,6,0,0,10
	.byte	'_Ifx_SRC_SRCR_Bits',0,11,68,16,4,11
	.byte	'SRPN',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	613
	.byte	3,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	613
	.byte	2,0,2,35,1,11
	.byte	'ECC',0,1
	.word	613
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	613
	.byte	3,0,2,35,2,11
	.byte	'SRR',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	613
	.byte	1,0,2,35,3,0,12,11,93,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10177
	.byte	4,2,35,0,0,14
	.word	10467
	.byte	3
	.word	10506
.L381:
	.byte	4
	.byte	'IfxSrc_clearRequest',0,3,10,247,1,17,1,1
.L383:
	.byte	5
	.byte	'src',0,10,247,1,60
	.word	10511
.L385:
	.byte	6,0
.L386:
	.byte	4
	.byte	'IfxSrc_enable',0,3,10,137,2,17,1,1
.L388:
	.byte	5
	.byte	'src',0,10,137,2,54
	.word	10511
.L390:
	.byte	6,0,17,12,66,9,1,18
	.byte	'IfxSrc_Tos_cpu0',0,0,18
	.byte	'IfxSrc_Tos_dma',0,1,18
	.byte	'IfxSrc_Tos_cpu1',0,2,18
	.byte	'IfxSrc_Tos_cpu2',0,3,18
	.byte	'IfxSrc_Tos_cpu3',0,4,18
	.byte	'IfxSrc_Tos_cpu4',0,5,18
	.byte	'IfxSrc_Tos_cpu5',0,6,0
.L371:
	.byte	4
	.byte	'IfxSrc_init',0,3,10,143,2,17,1,1
.L374:
	.byte	5
	.byte	'src',0,10,143,2,52
	.word	10511
.L376:
	.byte	5
	.byte	'typOfService',0,10,143,2,68
	.word	10596
.L378:
	.byte	5
	.byte	'priority',0,10,143,2,95
	.word	630
.L380:
	.byte	19,6,0,0,10
	.byte	'_Ifx_STM_CLC_Bits',0,14,123,16,4,11
	.byte	'DISR',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	438
	.byte	28,0,2,35,0,0,12,14,173,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10804
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_ID_Bits',0,14,165,1,16,4,11
	.byte	'MODREV',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'MODNUM',0,2
	.word	630
	.byte	16,0,2,35,2,0,12,14,205,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10960
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_TIM0_Bits',0,14,216,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	438
	.byte	32,0,2,35,0,0,12,14,253,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11079
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_TIM1_Bits',0,14,228,1,16,4,11
	.byte	'STM_35_4',0,4
	.word	438
	.byte	32,0,2,35,0,0,12,14,141,3,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11165
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_TIM2_Bits',0,14,234,1,16,4,11
	.byte	'STM_39_8',0,4
	.word	438
	.byte	32,0,2,35,0,0,12,14,149,3,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11251
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_TIM3_Bits',0,14,240,1,16,4,11
	.byte	'STM_43_12',0,4
	.word	438
	.byte	32,0,2,35,0,0,12,14,157,3,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11337
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_TIM4_Bits',0,14,246,1,16,4,11
	.byte	'STM_47_16',0,4
	.word	438
	.byte	32,0,2,35,0,0,12,14,165,3,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11424
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_TIM5_Bits',0,14,252,1,16,4,11
	.byte	'STM_51_20',0,4
	.word	438
	.byte	32,0,2,35,0,0,12,14,173,3,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11511
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_TIM6_Bits',0,14,130,2,16,4,11
	.byte	'STM_63_32',0,4
	.word	438
	.byte	32,0,2,35,0,0,12,14,181,3,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11598
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_CAP_Bits',0,14,111,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	438
	.byte	32,0,2,35,0,0,12,14,157,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11685
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_CMP_Bits',0,14,146,1,16,4,11
	.byte	'CMPVAL',0,4
	.word	438
	.byte	32,0,2,35,0,0,12,14,189,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11773
	.byte	4,2,35,0,0,15,8
	.word	11816
	.byte	16,1,0,10
	.byte	'_Ifx_STM_CMCON_Bits',0,14,133,1,16,4,11
	.byte	'MSIZE0',0,1
	.word	613
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	613
	.byte	3,0,2,35,0,11
	.byte	'MSTART0',0,1
	.word	613
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	613
	.byte	3,0,2,35,1,11
	.byte	'MSIZE1',0,1
	.word	613
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	613
	.byte	3,0,2,35,2,11
	.byte	'MSTART1',0,1
	.word	613
	.byte	5,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	613
	.byte	3,0,2,35,3,0,12,14,181,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11865
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_ICR_Bits',0,14,152,1,16,4,11
	.byte	'CMP0EN',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'CMP0IR',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'CMP0OS',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'CMP1EN',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'CMP1IR',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'CMP1OS',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	438
	.byte	25,0,2,35,0,0,12,14,197,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12097
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_ISCR_Bits',0,14,173,1,16,4,11
	.byte	'CMP0IRR',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'CMP0IRS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'CMP1IRR',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'CMP1IRS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	438
	.byte	28,0,2,35,0,0,12,14,213,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12314
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_TIM0SV_Bits',0,14,222,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	438
	.byte	32,0,2,35,0,0,12,14,133,3,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12478
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_CAPSV_Bits',0,14,117,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	438
	.byte	32,0,2,35,0,0,12,14,165,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12566
	.byte	4,2,35,0,0,15,144,1
	.word	613
	.byte	16,143,1,0,10
	.byte	'_Ifx_STM_OCS_Bits',0,14,205,1,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	438
	.byte	21,8,2,35,0,11
	.byte	'SUS',0,1
	.word	613
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	613
	.byte	2,0,2,35,3,0
.L443:
	.byte	12,14,245,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12667
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,14,198,1,16,4,11
	.byte	'CLR',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	438
	.byte	31,0,2,35,0,0,12,14,237,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12849
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_KRST1_Bits',0,14,191,1,16,4,11
	.byte	'RST',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	438
	.byte	31,0,2,35,0,0,12,14,229,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12955
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_KRST0_Bits',0,14,183,1,16,4,11
	.byte	'RST',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	438
	.byte	30,0,2,35,0,0,12,14,221,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13059
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_ACCEN1_Bits',0,14,105,16,4,11
	.byte	'reserved_0',0,4
	.word	438
	.byte	32,0,2,35,0,0,12,14,149,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13182
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_ACCEN0_Bits',0,14,68,16,4,11
	.byte	'EN0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	613
	.byte	1,0,2,35,3,0,12,14,141,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13271
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM',0,14,198,3,25,128,2,13
	.byte	'CLC',0
	.word	10920
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	2634
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	11039
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2634
	.byte	4,2,35,12,13
	.byte	'TIM0',0
	.word	11125
	.byte	4,2,35,16,13
	.byte	'TIM1',0
	.word	11211
	.byte	4,2,35,20,13
	.byte	'TIM2',0
	.word	11297
	.byte	4,2,35,24,13
	.byte	'TIM3',0
	.word	11384
	.byte	4,2,35,28,13
	.byte	'TIM4',0
	.word	11471
	.byte	4,2,35,32,13
	.byte	'TIM5',0
	.word	11558
	.byte	4,2,35,36,13
	.byte	'TIM6',0
	.word	11645
	.byte	4,2,35,40,13
	.byte	'CAP',0
	.word	11733
	.byte	4,2,35,44,13
	.byte	'CMP',0
	.word	11856
	.byte	8,2,35,48,13
	.byte	'CMCON',0
	.word	12057
	.byte	4,2,35,56,13
	.byte	'ICR',0
	.word	12274
	.byte	4,2,35,60,13
	.byte	'ISCR',0
	.word	12438
	.byte	4,2,35,64,13
	.byte	'reserved_44',0
	.word	4794
	.byte	12,2,35,68,13
	.byte	'TIM0SV',0
	.word	12526
	.byte	4,2,35,80,13
	.byte	'CAPSV',0
	.word	12616
	.byte	4,2,35,84,13
	.byte	'reserved_58',0
	.word	12656
	.byte	144,1,2,35,88,13
	.byte	'OCS',0
	.word	12809
	.byte	4,3,35,232,1,13
	.byte	'KRSTCLR',0
	.word	12915
	.byte	4,3,35,236,1,13
	.byte	'KRST1',0
	.word	13019
	.byte	4,3,35,240,1,13
	.byte	'KRST0',0
	.word	13142
	.byte	4,3,35,244,1,13
	.byte	'ACCEN1',0
	.word	13231
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	13800
	.byte	4,3,35,252,1,0,14
	.word	13840
	.byte	3
	.word	14260
	.byte	8
	.byte	'IfxStm_get',0,3,13,192,4,19
	.word	320
	.byte	1,1,5
	.byte	'stm',0,13,192,4,39
	.word	14265
	.byte	6,0
.L402:
	.byte	8
	.byte	'IfxStm_getFrequency',0,3,13,209,4,20
	.word	234
	.byte	1,1
.L405:
	.byte	5
	.byte	'stm',0,13,209,4,49
	.word	14265
.L407:
	.byte	19
.L408:
	.byte	6,6,0,0,17,13,130,2,9,1,18
	.byte	'IfxStm_SuspendMode_none',0,0,18
	.byte	'IfxStm_SuspendMode_hard',0,1,18
	.byte	'IfxStm_SuspendMode_soft',0,2,0
.L433:
	.byte	4
	.byte	'IfxStm_setSuspendMode',0,3,13,185,5,17,1,1
.L436:
	.byte	5
	.byte	'stm',0,13,185,5,48
	.word	14265
.L438:
	.byte	5
	.byte	'mode',0,13,185,5,72
	.word	14358
.L440:
	.byte	6,0,8
	.byte	'IfxStm_getLower',0,3,13,220,4,19
	.word	9946
	.byte	1,1,5
	.byte	'stm',0,13,220,4,44
	.word	14265
	.byte	6,0,7
	.byte	'long long int',0,8,5,8
	.byte	'IfxStm_now',0,3,13,221,5,19
	.word	14545
	.byte	1,1,19,6,6,6,0,0,8
	.byte	'IfxStm_getDeadLine',0,3,13,234,5,19
	.word	14545
	.byte	1,1,5
	.byte	'timeout',0,13,234,5,45
	.word	14545
	.byte	19,6,0,0,8
	.byte	'IfxStm_isDeadLine',0,3,13,251,5,20
	.word	613
	.byte	1,1,5
	.byte	'deadLine',0,13,251,5,45
	.word	14545
	.byte	19,6,0,0
.L392:
	.byte	8
	.byte	'disableInterrupts',0,3,15,105,20
	.word	613
	.byte	1,1
.L394:
	.byte	19,6,0,0
.L311:
	.byte	4
	.byte	'restoreInterrupts',0,3,15,139,1,17,1,1
.L312:
	.byte	5
	.byte	'enabled',0,15,139,1,43
	.word	613
.L314:
	.byte	19,6,0,0,8
	.byte	'getDeadLine',0,3,15,131,2,25
	.word	14545
	.byte	1,1,5
	.byte	'timeout',0,15,131,2,50
	.word	14545
	.byte	19,6,0,0,8
	.byte	'isDeadLine',0,3,15,178,2,20
	.word	613
	.byte	1,1,5
	.byte	'deadLine',0,15,178,2,44
	.word	14545
	.byte	19,6,0,0,8
	.byte	'now',0,3,15,188,1,25
	.word	14545
	.byte	1,1,19,6,6,6,0,0,8
	.byte	'nowWithoutCriticalSection',0,3,15,207,1,25
	.word	14545
	.byte	1,1,19,6,0,0,20
	.byte	'IfxStdIf_InterfaceDriver',0,17,115,15
	.word	352
	.byte	21
	.word	234
	.byte	1,1,22
	.word	352
	.byte	0,3
	.word	14962
	.byte	20
	.byte	'IfxStdIf_Timer_GetFrequency',0,16,99,19
	.word	14975
	.byte	21
	.word	9946
	.byte	1,1,22
	.word	352
	.byte	0,3
	.word	15016
	.byte	20
	.byte	'IfxStdIf_Timer_GetPeriod',0,16,105,26
	.word	15029
	.byte	20
	.byte	'IfxStdIf_Timer_GetResolution',0,16,111,19
	.word	14975
	.byte	20
	.byte	'IfxStdIf_Timer_GetTrigger',0,16,117,26
	.word	15029
	.byte	21
	.word	613
	.byte	1,1,22
	.word	352
	.byte	22
	.word	234
	.byte	0,3
	.word	15138
	.byte	20
	.byte	'IfxStdIf_Timer_SetFrequency',0,16,125,19
	.word	15156
	.byte	23,1,1,22
	.word	352
	.byte	0,3
	.word	15197
	.byte	20
	.byte	'IfxStdIf_Timer_UpdateInputFrequency',0,16,131,1,16
	.word	15206
	.byte	20
	.byte	'IfxStdIf_Timer_ApplyUpdate',0,16,152,1,16
	.word	15206
	.byte	20
	.byte	'IfxStdIf_Timer_DisableUpdate',0,16,169,1,16
	.word	15206
	.byte	20
	.byte	'IfxStdIf_Timer_GetInputFrequency',0,16,175,1,19
	.word	14975
	.byte	20
	.byte	'IfxStdIf_Timer_Run',0,16,184,1,16
	.word	15206
	.byte	21
	.word	613
	.byte	1,1,22
	.word	352
	.byte	22
	.word	9946
	.byte	0,3
	.word	15400
	.byte	20
	.byte	'IfxStdIf_Timer_SetPeriod',0,16,194,1,19
	.word	15418
	.byte	23,1,1,22
	.word	352
	.byte	22
	.word	613
	.byte	0,3
	.word	15457
	.byte	20
	.byte	'IfxStdIf_Timer_SetSingleMode',0,16,203,1,16
	.word	15471
	.byte	23,1,1,22
	.word	352
	.byte	22
	.word	9946
	.byte	0,3
	.word	15514
	.byte	20
	.byte	'IfxStdIf_Timer_SetTrigger',0,16,215,1,16
	.word	15528
	.byte	20
	.byte	'IfxStdIf_Timer_Stop',0,16,221,1,16
	.word	15206
	.byte	21
	.word	613
	.byte	1,1,22
	.word	352
	.byte	0,3
	.word	15597
	.byte	20
	.byte	'IfxStdIf_Timer_AckTimerIrq',0,16,227,1,19
	.word	15610
	.byte	20
	.byte	'IfxStdIf_Timer_AckTriggerIrq',0,16,233,1,19
	.word	15610
	.byte	10
	.byte	'IfxStdIf_Timer_',0,16,237,1,8,68,13
	.byte	'driver',0
	.word	14929
	.byte	4,2,35,0,13
	.byte	'getFrequency',0
	.word	14980
	.byte	4,2,35,4,13
	.byte	'getPeriod',0
	.word	15034
	.byte	4,2,35,8,13
	.byte	'getResolution',0
	.word	15067
	.byte	4,2,35,12,13
	.byte	'getTrigger',0
	.word	15104
	.byte	4,2,35,16,13
	.byte	'setFrequency',0
	.word	15161
	.byte	4,2,35,20,13
	.byte	'updateInputFrequency',0
	.word	15211
	.byte	4,2,35,24,13
	.byte	'applyUpdate',0
	.word	15256
	.byte	4,2,35,28,13
	.byte	'disableUpdate',0
	.word	15292
	.byte	4,2,35,32,13
	.byte	'getInputFrequency',0
	.word	15330
	.byte	4,2,35,36,13
	.byte	'run',0
	.word	15372
	.byte	4,2,35,40,13
	.byte	'setPeriod',0
	.word	15423
	.byte	4,2,35,44,13
	.byte	'setSingleMode',0
	.word	15476
	.byte	4,2,35,48,13
	.byte	'setTrigger',0
	.word	15533
	.byte	4,2,35,52,13
	.byte	'stop',0
	.word	15568
	.byte	4,2,35,56,13
	.byte	'ackTimerIrq',0
	.word	15615
	.byte	4,2,35,60,13
	.byte	'ackTriggerIrq',0
	.word	15651
	.byte	4,2,35,64,0,3
	.word	15689
	.byte	8
	.byte	'IfxStdIf_Timer_getInputFrequency',0,3,16,233,2,20
	.word	234
	.byte	1,1,5
	.byte	'stdIf',0,16,233,2,69
	.word	16068
	.byte	6,0,3
	.word	346
	.byte	3
	.word	14962
	.byte	3
	.word	15016
	.byte	3
	.word	14962
	.byte	3
	.word	15016
	.byte	3
	.word	15138
	.byte	3
	.word	15197
	.byte	3
	.word	15197
	.byte	3
	.word	15197
	.byte	3
	.word	14962
	.byte	3
	.word	15197
	.byte	3
	.word	15400
	.byte	3
	.word	15457
	.byte	3
	.word	15514
	.byte	3
	.word	15197
	.byte	3
	.word	15597
	.byte	3
	.word	15597
	.byte	8
	.byte	'IfxStdIf_Timer_tickToS',0,3,16,179,3,20
	.word	234
	.byte	1,1,5
	.byte	'clockFreq',0,16,179,3,51
	.word	234
	.byte	5
	.byte	'ticks',0,16,179,3,77
	.word	9946
	.byte	6,0,24
	.word	454
	.byte	25
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,22
	.word	16291
	.byte	0,14
	.word	438
	.byte	3
	.word	438
	.byte	26
	.byte	'__cmpswapw',0
	.word	16333
	.byte	1,1,1,1,27
	.byte	'p',0
	.word	16338
	.byte	27
	.byte	'value',0
	.word	438
	.byte	27
	.byte	'compare',0
	.word	438
	.byte	0,26
	.byte	'__minu',0
	.word	438
	.byte	1,1,1,1,22
	.word	438
	.byte	22
	.word	438
	.byte	0,25
	.byte	'__mtcr',0,1,1,1,1,22
	.word	454
	.byte	22
	.word	454
	.byte	0,14
	.word	454
	.byte	26
	.byte	'__mfcr',0
	.word	16445
	.byte	1,1,1,1,22
	.word	454
	.byte	0,28
	.byte	'__nop',0,1,1,1,1,25
	.byte	'__syscall',0,1,1,1,1,22
	.word	454
	.byte	0,28
	.byte	'__svlcx',0,1,1,1,1,28
	.byte	'__isync',0,1,1,1,1,28
	.byte	'__dsync',0,1,1,1,1,28
	.byte	'__disable',0,1,1,1,1,28
	.byte	'__enable',0,1,1,1,1,29
	.byte	'rt_tick_increase',0,18,79,6,1,1,1,1,29
	.byte	'rt_interrupt_enter',0,18,215,3,6,1,1,1,1,29
	.byte	'rt_interrupt_leave',0,18,216,3,6,1,1,1,1,7
	.byte	'char',0,1,6,15,8
	.word	16653
	.byte	16,7,0,3
	.word	.L549-.L104
.L549:
	.byte	10
	.byte	'rt_list_node',0,19,229,2,8,8,13
	.byte	'next',0
	.word	16670
	.byte	4,2,35,0,13
	.byte	'prev',0
	.word	16670
	.byte	4,2,35,4,0
.L294:
	.byte	7
	.byte	'long int',0,4,5,10
	.byte	'rt_object',0,19,131,3,8,20,13
	.byte	'name',0
	.word	16661
	.byte	8,2,35,0,13
	.byte	'type',0
	.word	613
	.byte	1,2,35,8,13
	.byte	'flag',0
	.word	613
	.byte	1,2,35,9,13
	.byte	'list',0
	.word	16675
	.byte	8,2,35,12,0,15,8
	.word	16675
	.byte	16,0,0,10
	.byte	'rt_timer',0,19,236,3,8,44,13
	.byte	'parent',0
	.word	16735
	.byte	20,2,35,0,13
	.byte	'row',0
	.word	16808
	.byte	8,2,35,20,13
	.byte	'timeout_func',0
	.word	15206
	.byte	4,2,35,28,13
	.byte	'parameter',0
	.word	352
	.byte	4,2,35,32,13
	.byte	'init_tick',0
	.word	438
	.byte	4,2,35,36,13
	.byte	'timeout_tick',0
	.word	438
	.byte	4,2,35,40,0,23,1,1,22
	.word	.L323-.L104
	.byte	0,3
	.word	16944
	.byte	10
	.byte	'rt_thread',0,19,213,4,8,136,1,13
	.byte	'name',0
	.word	16661
	.byte	8,2,35,0,13
	.byte	'type',0
	.word	613
	.byte	1,2,35,8,13
	.byte	'flags',0
	.word	613
	.byte	1,2,35,9,13
	.byte	'list',0
	.word	16675
	.byte	8,2,35,12,13
	.byte	'tlist',0
	.word	16675
	.byte	8,2,35,20,13
	.byte	'sp',0
	.word	352
	.byte	4,2,35,28,13
	.byte	'entry',0
	.word	352
	.byte	4,2,35,32,13
	.byte	'parameter',0
	.word	352
	.byte	4,2,35,36,13
	.byte	'stack_addr',0
	.word	352
	.byte	4,2,35,40,13
	.byte	'stack_size',0
	.word	438
	.byte	4,2,35,44,13
	.byte	'error',0
	.word	16723
	.byte	4,2,35,48,13
	.byte	'stat',0
	.word	613
	.byte	1,2,35,52,13
	.byte	'bind_cpu',0
	.word	613
	.byte	1,2,35,53,13
	.byte	'oncpu',0
	.word	613
	.byte	1,2,35,54,13
	.byte	'scheduler_lock_nest',0
	.word	630
	.byte	2,2,35,56,13
	.byte	'cpus_lock_nest',0
	.word	630
	.byte	2,2,35,58,13
	.byte	'critical_lock_nest',0
	.word	630
	.byte	2,2,35,60,13
	.byte	'current_priority',0
	.word	613
	.byte	1,2,35,62,13
	.byte	'init_priority',0
	.word	613
	.byte	1,2,35,63,13
	.byte	'number_mask',0
	.word	438
	.byte	4,2,35,64,13
	.byte	'event_set',0
	.word	438
	.byte	4,2,35,68,13
	.byte	'event_info',0
	.word	613
	.byte	1,2,35,72,13
	.byte	'init_tick',0
	.word	9946
	.byte	4,2,35,74,13
	.byte	'remaining_tick',0
	.word	9946
	.byte	4,2,35,78,13
	.byte	'thread_timer',0
	.word	16817
	.byte	44,2,35,84,13
	.byte	'cleanup',0
	.word	16953
	.byte	4,3,35,128,1,13
	.byte	'user_data',0
	.word	9946
	.byte	4,3,35,132,1,0
.L323:
	.byte	3
	.word	16958
	.byte	15,128,2
	.word	16675
	.byte	16,31,0,10
	.byte	'rt_cpu',0,19,189,4,8,144,2,13
	.byte	'current_thread',0
	.word	17489
	.byte	4,2,35,0,13
	.byte	'irq_nest',0
	.word	630
	.byte	2,2,35,4,13
	.byte	'irq_switch_flag',0
	.word	613
	.byte	1,2,35,6,13
	.byte	'current_priority',0
	.word	613
	.byte	1,2,35,7,13
	.byte	'priority_table',0
	.word	17494
	.byte	128,2,2,35,8,13
	.byte	'priority_group',0
	.word	438
	.byte	4,3,35,136,2,13
	.byte	'tick',0
	.word	438
	.byte	4,3,35,140,2,0
.L423:
	.byte	3
	.word	17504
	.byte	30
	.byte	'rt_cpu_self',0,18,227,3,16
	.word	17677
	.byte	1,1,1,1,31
	.byte	'rt_cpu_index',0,18,228,3,16
	.word	17677
	.byte	1,1,1,1,5
	.byte	'index',0,18,228,3,33
	.word	454
	.byte	0,29
	.byte	'rt_components_board_init',0,18,244,3,6,1,1,1,1
.L287:
	.byte	3
	.word	613
	.byte	3
	.word	9946
	.byte	10
	.byte	'UpperCtxInfo',0,20,30,16,64,13
	.byte	'_PCXI',0
	.word	9946
	.byte	4,2,35,0,13
	.byte	'_PSW',0
	.word	9946
	.byte	4,2,35,4,13
	.byte	'_A10',0
	.word	17788
	.byte	4,2,35,8,13
	.byte	'_A11',0
	.word	17788
	.byte	4,2,35,12,13
	.byte	'_D8',0
	.word	9946
	.byte	4,2,35,16,13
	.byte	'_D9',0
	.word	9946
	.byte	4,2,35,20,13
	.byte	'_D10',0
	.word	9946
	.byte	4,2,35,24,13
	.byte	'_D11',0
	.word	9946
	.byte	4,2,35,28,13
	.byte	'_A12',0
	.word	17788
	.byte	4,2,35,32,13
	.byte	'_A13',0
	.word	17788
	.byte	4,2,35,36,13
	.byte	'_A14',0
	.word	17788
	.byte	4,2,35,40,13
	.byte	'_A15',0
	.word	17788
	.byte	4,2,35,44,13
	.byte	'_D12',0
	.word	9946
	.byte	4,2,35,48,13
	.byte	'_D13',0
	.word	9946
	.byte	4,2,35,52,13
	.byte	'_D14',0
	.word	9946
	.byte	4,2,35,56,13
	.byte	'_D15',0
	.word	9946
	.byte	4,2,35,60,0,3
	.word	17793
	.byte	3
	.word	17793
.L296:
	.byte	20
	.byte	'UpperCtx_Ptr',0,20,47,14
	.word	18040
	.byte	10
	.byte	'LowCtxInfo',0,20,49,16,64,13
	.byte	'_PCXI',0
	.word	9946
	.byte	4,2,35,0,13
	.byte	'_PC',0
	.word	17788
	.byte	4,2,35,4,13
	.byte	'_A2',0
	.word	17788
	.byte	4,2,35,8,13
	.byte	'_A3',0
	.word	17788
	.byte	4,2,35,12,13
	.byte	'_D0',0
	.word	9946
	.byte	4,2,35,16,13
	.byte	'_D1',0
	.word	9946
	.byte	4,2,35,20,13
	.byte	'_D2',0
	.word	9946
	.byte	4,2,35,24,13
	.byte	'_D3',0
	.word	9946
	.byte	4,2,35,28,13
	.byte	'_A4',0
	.word	17788
	.byte	4,2,35,32,13
	.byte	'_A5',0
	.word	17788
	.byte	4,2,35,36,13
	.byte	'_A6',0
	.word	17788
	.byte	4,2,35,40,13
	.byte	'_A7',0
	.word	17788
	.byte	4,2,35,44,13
	.byte	'_D4',0
	.word	9946
	.byte	4,2,35,48,13
	.byte	'_D5',0
	.word	9946
	.byte	4,2,35,52,13
	.byte	'_D6',0
	.word	9946
	.byte	4,2,35,56,13
	.byte	'_D7',0
	.word	9946
	.byte	4,2,35,60,0,3
	.word	18066
	.byte	3
	.word	18066
.L298:
	.byte	20
	.byte	'LowCtx_Ptr',0,20,66,12
	.word	18298
	.byte	10
	.byte	'_Ifx_CPU_ICR_Bits',0,21,143,5,16,4,11
	.byte	'CCPN',0,4
	.word	461
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	7,17,2,35,0,11
	.byte	'IE',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'PIPN',0,4
	.word	461
	.byte	8,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	461
	.byte	8,0,2,35,0,0
.L307:
	.byte	12,21,204,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18322
	.byte	4,2,35,0,0,10
	.byte	'__arch_tickets',0,22,140,1,12,4,13
	.byte	'owner',0
	.word	630
	.byte	2,2,35,0,13
	.byte	'next',0
	.word	630
	.byte	2,2,35,2,0,12,22,138,1,9,4,13
	.byte	'slock',0
	.word	9946
	.byte	4,2,35,0,13
	.byte	'tickets',0
	.word	18478
	.byte	4,2,35,0,0
.L343:
	.byte	3
	.word	18529
.L349:
	.byte	14
	.word	438
.L354:
	.byte	14
	.word	438
	.byte	10
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,21,143,1,16,4,11
	.byte	'CORE_ID',0,4
	.word	461
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	461
	.byte	29,0,2,35,0,0
.L360:
	.byte	12,21,244,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18583
	.byte	4,2,35,0,0,32
	.word	182
	.byte	33
	.word	208
	.byte	6,0,32
	.word	243
	.byte	33
	.word	275
	.byte	6,0,32
	.word	288
	.byte	6,0,32
	.word	357
	.byte	33
	.word	376
	.byte	6,0,32
	.word	392
	.byte	33
	.word	407
	.byte	33
	.word	421
	.byte	6,0,32
	.word	1222
	.byte	33
	.word	1262
	.byte	33
	.word	1280
	.byte	6,0,32
	.word	1300
	.byte	33
	.word	1343
	.byte	6,0,32
	.word	1363
	.byte	33
	.word	1401
	.byte	33
	.word	1419
	.byte	6,0,32
	.word	1439
	.byte	33
	.word	1480
	.byte	6,0,32
	.word	1500
	.byte	33
	.word	1551
	.byte	6,0,32
	.word	1571
	.byte	6,0,34
	.byte	'IfxScuWdt_disableCpuWatchdog',0,3,176,3,17,1,1,1,1,5
	.byte	'password',0,3,176,3,53
	.word	630
	.byte	0,34
	.byte	'IfxScuWdt_disableSafetyWatchdog',0,3,186,3,17,1,1,1,1,5
	.byte	'password',0,3,186,3,56
	.word	630
	.byte	0,30
	.byte	'IfxScuWdt_getCpuWatchdogPassword',0,3,215,3,19
	.word	630
	.byte	1,1,1,1,30
	.byte	'IfxScuWdt_getSafetyWatchdogPassword',0,3,249,3,19
	.word	630
	.byte	1,1,1,1,32
	.word	9232
	.byte	33
	.word	9260
	.byte	33
	.word	9274
	.byte	33
	.word	9292
	.byte	6,0,32
	.word	9310
	.byte	33
	.word	9333
	.byte	19,35
	.word	9354
	.byte	36
	.word	9392
	.byte	0,6,0,0,32
	.word	9354
	.byte	6,0,24
	.word	9532
	.byte	31
	.byte	'IfxScuCcu_getCpuFrequency',0,7,202,6,20
	.word	234
	.byte	1,1,1,1,5
	.byte	'cpu',0,7,202,6,71
	.word	19096
	.byte	0,30
	.byte	'IfxScuCcu_getPllFrequency',0,7,253,6,20
	.word	234
	.byte	1,1,1,1,17,7,172,2,9,1,18
	.byte	'IfxScuCcu_Fsource_0',0,0,18
	.byte	'IfxScuCcu_Fsource_1',0,1,18
	.byte	'IfxScuCcu_Fsource_2',0,2,0,31
	.byte	'IfxScuCcu_getSourceFrequency',0,7,138,7,20
	.word	234
	.byte	1,1,1,1,5
	.byte	'fsource',0,7,138,7,67
	.word	19193
	.byte	0,30
	.byte	'IfxScuCcu_getSpbFrequency',0,7,144,7,20
	.word	234
	.byte	1,1,1,1,32
	.word	9501
	.byte	6,0,32
	.word	9703
	.byte	6,0,32
	.word	9737
	.byte	6,0,32
	.word	9779
	.byte	19,35
	.word	9737
	.byte	36
	.word	9777
	.byte	0,6,0,0,32
	.word	9820
	.byte	6,0,32
	.word	9854
	.byte	6,0,32
	.word	9894
	.byte	33
	.word	9927
	.byte	6,0,32
	.word	9967
	.byte	33
	.word	10008
	.byte	6,0,32
	.word	10027
	.byte	33
	.word	10082
	.byte	6,0,32
	.word	10101
	.byte	33
	.word	10141
	.byte	33
	.word	10158
	.byte	19,6,0,0,32
	.word	10516
	.byte	33
	.word	10544
	.byte	6,0,32
	.word	10559
	.byte	33
	.word	10581
	.byte	6,0,32
	.word	10727
	.byte	33
	.word	10747
	.byte	33
	.word	10760
	.byte	33
	.word	10782
	.byte	19,35
	.word	10516
	.byte	33
	.word	10544
	.byte	36
	.word	10557
	.byte	0,6,0,0,32
	.word	14270
	.byte	33
	.word	14293
	.byte	6,0,32
	.word	14308
	.byte	33
	.word	14340
	.byte	19,19,35
	.word	9354
	.byte	36
	.word	9392
	.byte	0,0,6,0,0,32
	.word	14443
	.byte	33
	.word	14473
	.byte	33
	.word	14486
	.byte	6,0,32
	.word	14502
	.byte	33
	.word	14530
	.byte	6,0,32
	.word	14562
	.byte	19,35
	.word	9894
	.byte	33
	.word	9927
	.byte	36
	.word	9944
	.byte	0,6,35
	.word	9779
	.byte	37
	.word	9816
	.byte	35
	.word	9737
	.byte	36
	.word	9777
	.byte	0,36
	.word	9817
	.byte	0,0,6,35
	.word	14270
	.byte	33
	.word	14293
	.byte	36
	.word	14306
	.byte	0,6,0,0,32
	.word	14591
	.byte	33
	.word	14622
	.byte	19,35
	.word	14562
	.byte	37
	.word	14585
	.byte	35
	.word	9894
	.byte	33
	.word	9927
	.byte	36
	.word	9944
	.byte	0,36
	.word	14586
	.byte	35
	.word	9779
	.byte	37
	.word	9816
	.byte	35
	.word	9737
	.byte	36
	.word	9777
	.byte	0,36
	.word	9817
	.byte	0,0,36
	.word	14587
	.byte	35
	.word	14270
	.byte	33
	.word	14293
	.byte	36
	.word	14306
	.byte	0,36
	.word	14588
	.byte	0,0,6,0,0,32
	.word	14643
	.byte	33
	.word	14673
	.byte	19,35
	.word	14562
	.byte	37
	.word	14585
	.byte	35
	.word	9894
	.byte	33
	.word	9927
	.byte	36
	.word	9944
	.byte	0,36
	.word	14586
	.byte	35
	.word	9779
	.byte	37
	.word	9816
	.byte	35
	.word	9737
	.byte	36
	.word	9777
	.byte	0,36
	.word	9817
	.byte	0,0,36
	.word	14587
	.byte	35
	.word	14270
	.byte	33
	.word	14293
	.byte	36
	.word	14306
	.byte	0,36
	.word	14588
	.byte	0,0,6,0,0,32
	.word	14695
	.byte	19,35
	.word	9779
	.byte	37
	.word	9816
	.byte	35
	.word	9737
	.byte	36
	.word	9777
	.byte	0,36
	.word	9817
	.byte	0,0,6,0,0,32
	.word	14728
	.byte	33
	.word	14754
	.byte	19,35
	.word	9894
	.byte	33
	.word	9927
	.byte	36
	.word	9944
	.byte	0,6,0,0,32
	.word	14775
	.byte	33
	.word	14799
	.byte	19,35
	.word	14865
	.byte	37
	.word	14881
	.byte	35
	.word	14695
	.byte	37
	.word	14724
	.byte	35
	.word	9779
	.byte	37
	.word	9816
	.byte	35
	.word	9737
	.byte	36
	.word	9777
	.byte	0,36
	.word	9817
	.byte	0,0,36
	.word	14725
	.byte	0,0,36
	.word	14882
	.byte	35
	.word	14728
	.byte	33
	.word	14754
	.byte	37
	.word	14771
	.byte	35
	.word	9894
	.byte	33
	.word	9927
	.byte	36
	.word	9944
	.byte	0,36
	.word	14772
	.byte	0,0,36
	.word	14883
	.byte	35
	.word	14270
	.byte	33
	.word	14293
	.byte	36
	.word	14306
	.byte	0,36
	.word	14884
	.byte	0,0,6,0,0,32
	.word	14820
	.byte	33
	.word	14843
	.byte	19,35
	.word	14865
	.byte	37
	.word	14881
	.byte	35
	.word	14695
	.byte	37
	.word	14724
	.byte	35
	.word	9779
	.byte	37
	.word	9816
	.byte	35
	.word	9737
	.byte	36
	.word	9777
	.byte	0,36
	.word	9817
	.byte	0,0,36
	.word	14725
	.byte	0,0,36
	.word	14882
	.byte	35
	.word	14728
	.byte	33
	.word	14754
	.byte	37
	.word	14771
	.byte	35
	.word	9894
	.byte	33
	.word	9927
	.byte	36
	.word	9944
	.byte	0,36
	.word	14772
	.byte	0,0,36
	.word	14883
	.byte	35
	.word	14270
	.byte	33
	.word	14293
	.byte	36
	.word	14306
	.byte	0,36
	.word	14884
	.byte	0,0,6,0,0,32
	.word	14865
	.byte	19,35
	.word	14695
	.byte	37
	.word	14724
	.byte	35
	.word	9779
	.byte	37
	.word	9816
	.byte	35
	.word	9737
	.byte	36
	.word	9777
	.byte	0,36
	.word	9817
	.byte	0,0,36
	.word	14725
	.byte	0,0,6,35
	.word	14728
	.byte	33
	.word	14754
	.byte	37
	.word	14771
	.byte	35
	.word	9894
	.byte	33
	.word	9927
	.byte	36
	.word	9944
	.byte	0,36
	.word	14772
	.byte	0,0,6,35
	.word	14270
	.byte	33
	.word	14293
	.byte	36
	.word	14306
	.byte	0,6,0,0,32
	.word	14887
	.byte	19,35
	.word	14270
	.byte	33
	.word	14293
	.byte	36
	.word	14306
	.byte	0,6,0,0,32
	.word	16073
	.byte	33
	.word	16118
	.byte	6,0,32
	.word	16220
	.byte	33
	.word	16255
	.byte	33
	.word	16274
	.byte	6,0,17,16,85,9,1,18
	.byte	'IfxStdIf_Timer_CountDir_up',0,0,18
	.byte	'IfxStdIf_Timer_CountDir_upAndDown',0,1,18
	.byte	'IfxStdIf_Timer_CountDir_down',0,2,0,38,23,126,9,12,13
	.byte	'period',0
	.word	9946
	.byte	4,2,35,0,13
	.byte	'triggerEnabled',0
	.word	613
	.byte	1,2,35,4,13
	.byte	'clockFreq',0
	.word	234
	.byte	4,2,35,6,13
	.byte	'countDir',0
	.word	20391
	.byte	1,2,35,10,13
	.byte	'singleShot',0
	.word	613
	.byte	1,2,35,11,0,17,13,157,1,9,1,18
	.byte	'IfxStm_Comparator_0',0,0,18
	.byte	'IfxStm_Comparator_1',0,1,0,38,23,141,1,9,24,13
	.byte	'base',0
	.word	20493
	.byte	12,2,35,0,13
	.byte	'stm',0
	.word	14265
	.byte	4,2,35,12,13
	.byte	'comparator',0
	.word	20596
	.byte	1,2,35,16,13
	.byte	'comparatorValue',0
	.word	9946
	.byte	4,2,35,18,13
	.byte	'comparatorShift',0
	.word	613
	.byte	1,2,35,22,0,3
	.word	20647
	.byte	31
	.byte	'IfxStm_Timer_acknowledgeTimerIrq',0,23,173,1,20
	.word	613
	.byte	1,1,1,1,5
	.byte	'driver',0,23,173,1,67
	.word	20751
	.byte	0,34
	.byte	'IfxStm_Timer_run',0,23,208,1,17,1,1,1,1,5
	.byte	'driver',0,23,208,1,48
	.word	20751
	.byte	0,17,5,140,1,9,1,18
	.byte	'IfxPort_OutputMode_none',0,0,18
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,18
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,17,5,151,1,9,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,18
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,18
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,18
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,18
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed1',0,12,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed2',0,13,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed3',0,14,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed4',0,15,0,38,16,131,2,9,16,13
	.byte	'enabled',0
	.word	613
	.byte	1,2,35,0,13
	.byte	'triggerPoint',0
	.word	9946
	.byte	4,2,35,2,13
	.byte	'isrPriority',0
	.word	630
	.byte	2,2,35,6,13
	.byte	'isrProvider',0
	.word	10596
	.byte	1,2,35,8,13
	.byte	'outputMode',0
	.word	20862
	.byte	1,2,35,9,13
	.byte	'outputDriver',0
	.word	20958
	.byte	1,2,35,10,13
	.byte	'risingEdgeAtPeriod',0
	.word	613
	.byte	1,2,35,11,13
	.byte	'outputEnabled',0
	.word	613
	.byte	1,2,35,12,0,38,16,144,2,9,36,13
	.byte	'frequency',0
	.word	234
	.byte	4,2,35,0,13
	.byte	'isrPriority',0
	.word	630
	.byte	2,2,35,4,13
	.byte	'isrProvider',0
	.word	10596
	.byte	1,2,35,6,13
	.byte	'minResolution',0
	.word	234
	.byte	4,2,35,8,13
	.byte	'trigger',0
	.word	21381
	.byte	16,2,35,12,13
	.byte	'countDir',0
	.word	20391
	.byte	1,2,35,28,13
	.byte	'startOffset',0
	.word	234
	.byte	4,2,35,30,0
.L369:
	.byte	38,23,152,1,9,44,13
	.byte	'base',0
	.word	21562
	.byte	36,2,35,0,13
	.byte	'stm',0
	.word	14265
	.byte	4,2,35,36,13
	.byte	'comparator',0
	.word	20596
	.byte	1,2,35,40,0,24
	.word	21709
	.byte	3
	.word	21763
	.byte	31
	.byte	'IfxStm_Timer_init',0,23,132,2,20
	.word	613
	.byte	1,1,1,1,5
	.byte	'driver',0,23,132,2,52
	.word	20751
	.byte	5
	.byte	'config',0,23,132,2,87
	.word	21768
	.byte	0,3
	.word	21709
	.byte	34
	.byte	'IfxStm_Timer_initConfig',0,23,139,2,17,1,1,1,1,5
	.byte	'config',0,23,139,2,62
	.word	21837
	.byte	5
	.byte	'stm',0,23,139,2,79
	.word	14265
	.byte	0,29
	.byte	'initUART',0,24,41,6,1,1,1,1,39
	.byte	'rt_scheduler_do_irq_switch',0,20,171,1,9
	.word	454
	.byte	1,1,1,39
	.byte	'memset',0,20,191,4,5
	.word	454
	.byte	1,1,1,7
	.byte	'short int',0,2,5,20
	.byte	'__wchar_t',0,20,1,1
	.word	21980
	.byte	20
	.byte	'__size_t',0,20,1,1
	.word	438
	.byte	20
	.byte	'__ptrdiff_t',0,20,1,1
	.word	454
	.byte	40,1,3
	.word	22048
	.byte	20
	.byte	'__codeptr',0,20,1,1
	.word	22050
	.byte	20
	.byte	'__intptr_t',0,20,1,1
	.word	454
	.byte	20
	.byte	'__uintptr_t',0,20,1,1
	.word	438
	.byte	20
	.byte	'rt_uint8_t',0,19,69,41
	.word	613
	.byte	20
	.byte	'rt_uint16_t',0,19,70,41
	.word	630
	.byte	20
	.byte	'rt_uint32_t',0,19,71,41
	.word	438
	.byte	20
	.byte	'rt_base_t',0,19,83,41
	.word	16723
	.byte	20
	.byte	'rt_ubase_t',0,19,84,41
	.word	9946
	.byte	20
	.byte	'rt_err_t',0,19,86,41
	.word	16723
	.byte	20
	.byte	'rt_tick_t',0,19,88,41
	.word	438
	.byte	20
	.byte	'rt_size_t',0,19,90,41
	.word	9946
	.byte	20
	.byte	'rt_list_t',0,19,234,2,29
	.word	16675
	.byte	3
	.word	.L550-.L104
.L550:
	.byte	10
	.byte	'rt_slist_node',0,19,239,2,8,4,13
	.byte	'next',0
	.word	22280
	.byte	4,2,35,0,0,20
	.byte	'rt_slist_t',0,19,243,2,30
	.word	22285
	.byte	20
	.byte	'uint16_t',0,25,246,1,41
	.word	630
	.byte	20
	.byte	'uint32_t',0,25,254,1,41
	.word	438
	.byte	20
	.byte	'time_t',0,26,44,25
	.word	9946
	.byte	20
	.byte	'fd_mask',0,27,39,17
	.word	16723
	.byte	23,1,1,22
	.word	454
	.byte	22
	.word	352
	.byte	0,3
	.word	22407
	.byte	20
	.byte	'rt_isr_handler_t',0,22,73,16
	.word	22421
	.byte	20
	.byte	'rt_hw_spinlock_t',0,22,144,1,3
	.word	18529
	.byte	41
	.byte	'_cpus_lock',0,22,157,1,25
	.word	18529
	.byte	1,1,20
	.byte	'boolean',0,28,104,29
	.word	613
	.byte	20
	.byte	'uint8',0,28,108,29
	.word	613
	.byte	20
	.byte	'uint16',0,28,112,29
	.word	630
	.byte	20
	.byte	'uint32',0,28,116,29
	.word	9946
	.byte	20
	.byte	'uint64',0,28,121,29
	.word	320
	.byte	20
	.byte	'sint16',0,28,129,1,29
	.word	21980
	.byte	20
	.byte	'sint32',0,28,134,1,29
	.word	16723
	.byte	20
	.byte	'sint64',0,28,141,1,29
	.word	14545
	.byte	20
	.byte	'float32',0,28,170,1,29
	.word	234
	.byte	20
	.byte	'pvoid',0,29,54,28
	.word	352
	.byte	20
	.byte	'Ifx_TickTime',0,29,76,28
	.word	14545
	.byte	20
	.byte	'Ifx_Priority',0,29,100,16
	.word	630
	.byte	20
	.byte	'Ifx_TimerValue',0,29,101,16
	.word	9946
	.byte	17,29,127,9,1,18
	.byte	'Ifx_RxSel_a',0,0,18
	.byte	'Ifx_RxSel_b',0,1,18
	.byte	'Ifx_RxSel_c',0,2,18
	.byte	'Ifx_RxSel_d',0,3,18
	.byte	'Ifx_RxSel_e',0,4,18
	.byte	'Ifx_RxSel_f',0,5,18
	.byte	'Ifx_RxSel_g',0,6,18
	.byte	'Ifx_RxSel_h',0,7,0,20
	.byte	'Ifx_RxSel',0,29,137,1,3
	.word	22718
	.byte	20
	.byte	'Ifx_UReg_8Bit',0,30,96,24
	.word	613
	.byte	20
	.byte	'Ifx_UReg_32Bit',0,30,98,24
	.word	438
	.byte	20
	.byte	'Ifx_SReg_32Bit',0,30,101,24
	.word	454
	.byte	10
	.byte	'_Ifx_CPU_A_Bits',0,21,68,16,4,11
	.byte	'ADDR',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CPU_A_Bits',0,21,71,3
	.word	22923
	.byte	10
	.byte	'_Ifx_CPU_BIV_Bits',0,21,74,16,4,11
	.byte	'VSS',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'BIV',0,4
	.word	461
	.byte	31,0,2,35,0,0,20
	.byte	'Ifx_CPU_BIV_Bits',0,21,78,3
	.word	22984
	.byte	10
	.byte	'_Ifx_CPU_BLK_OMASK_Bits',0,21,81,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	5,27,2,35,0,11
	.byte	'OMASK',0,4
	.word	461
	.byte	12,15,2,35,0,11
	.byte	'ONE',0,4
	.word	461
	.byte	11,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	461
	.byte	4,0,2,35,0,0,20
	.byte	'Ifx_CPU_BLK_OMASK_Bits',0,21,87,3
	.word	23063
	.byte	10
	.byte	'_Ifx_CPU_BLK_OTAR_Bits',0,21,90,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	5,27,2,35,0,11
	.byte	'TBASE',0,4
	.word	461
	.byte	23,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	461
	.byte	4,0,2,35,0,0,20
	.byte	'Ifx_CPU_BLK_OTAR_Bits',0,21,95,3
	.word	23201
	.byte	10
	.byte	'_Ifx_CPU_BLK_RABR_Bits',0,21,98,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	5,27,2,35,0,11
	.byte	'OBASE',0,4
	.word	461
	.byte	17,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	461
	.byte	2,8,2,35,0,11
	.byte	'OMEM',0,4
	.word	461
	.byte	4,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	461
	.byte	3,1,2,35,0,11
	.byte	'OVEN',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_BLK_RABR_Bits',0,21,106,3
	.word	23322
	.byte	10
	.byte	'_Ifx_CPU_BTV_Bits',0,21,109,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'BTV',0,4
	.word	461
	.byte	31,0,2,35,0,0,20
	.byte	'Ifx_CPU_BTV_Bits',0,21,113,3
	.word	23498
	.byte	10
	.byte	'_Ifx_CPU_CCNT_Bits',0,21,116,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	461
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_CCNT_Bits',0,21,120,3
	.word	23584
	.byte	10
	.byte	'_Ifx_CPU_CCTRL_Bits',0,21,123,16,4,11
	.byte	'CM',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'CE',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'M1',0,4
	.word	461
	.byte	3,27,2,35,0,11
	.byte	'M2',0,4
	.word	461
	.byte	3,24,2,35,0,11
	.byte	'M3',0,4
	.word	461
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	461
	.byte	21,0,2,35,0,0,20
	.byte	'Ifx_CPU_CCTRL_Bits',0,21,131,1,3
	.word	23673
	.byte	10
	.byte	'_Ifx_CPU_COMPAT_Bits',0,21,134,1,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	3,29,2,35,0,11
	.byte	'RM',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'SP',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	461
	.byte	27,0,2,35,0,0,20
	.byte	'Ifx_CPU_COMPAT_Bits',0,21,140,1,3
	.word	23820
	.byte	20
	.byte	'Ifx_CPU_CORE_ID_Bits',0,21,147,1,3
	.word	18583
	.byte	10
	.byte	'_Ifx_CPU_CPR_L_Bits',0,21,150,1,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	5,27,2,35,0,11
	.byte	'LOWBND',0,4
	.word	461
	.byte	27,0,2,35,0,0,20
	.byte	'Ifx_CPU_CPR_L_Bits',0,21,154,1,3
	.word	23979
	.byte	10
	.byte	'_Ifx_CPU_CPR_U_Bits',0,21,157,1,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	5,27,2,35,0,11
	.byte	'UPPBND',0,4
	.word	461
	.byte	27,0,2,35,0,0,20
	.byte	'Ifx_CPU_CPR_U_Bits',0,21,161,1,3
	.word	24074
	.byte	10
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,21,164,1,16,4,11
	.byte	'MOD_REV',0,4
	.word	461
	.byte	8,24,2,35,0,11
	.byte	'MOD_32B',0,4
	.word	461
	.byte	8,16,2,35,0,11
	.byte	'MOD',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_CPU_CPU_ID_Bits',0,21,169,1,3
	.word	24169
	.byte	10
	.byte	'_Ifx_CPU_CPXE_Bits',0,21,172,1,16,4,11
	.byte	'XE_N',0,4
	.word	461
	.byte	10,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	461
	.byte	22,0,2,35,0,0,20
	.byte	'Ifx_CPU_CPXE_Bits',0,21,176,1,3
	.word	24279
	.byte	10
	.byte	'_Ifx_CPU_CREVT_Bits',0,21,179,1,16,4,11
	.byte	'EVTA',0,4
	.word	461
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	461
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_CPU_CREVT_Bits',0,21,187,1,3
	.word	24371
	.byte	10
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,21,190,1,16,4,11
	.byte	'CID',0,4
	.word	461
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	461
	.byte	29,0,2,35,0,0,20
	.byte	'Ifx_CPU_CUS_ID_Bits',0,21,194,1,3
	.word	24525
	.byte	10
	.byte	'_Ifx_CPU_D_Bits',0,21,197,1,16,4,11
	.byte	'DATA',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CPU_D_Bits',0,21,200,1,3
	.word	24619
	.byte	10
	.byte	'_Ifx_CPU_DATR_Bits',0,21,203,1,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	3,29,2,35,0,11
	.byte	'SBE',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	461
	.byte	5,23,2,35,0,11
	.byte	'CWE',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'CFE',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	461
	.byte	3,18,2,35,0,11
	.byte	'SOE',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_CPU_DATR_Bits',0,21,214,1,3
	.word	24682
	.byte	10
	.byte	'_Ifx_CPU_DBGSR_Bits',0,21,217,1,16,4,11
	.byte	'DE',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'HALT',0,4
	.word	461
	.byte	2,29,2,35,0,11
	.byte	'SIH',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'SUSP',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'PREVSUSP',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'PEVT',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EVTSRC',0,4
	.word	461
	.byte	5,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	461
	.byte	19,0,2,35,0,0,20
	.byte	'Ifx_CPU_DBGSR_Bits',0,21,228,1,3
	.word	24908
	.byte	10
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,21,231,1,16,4,11
	.byte	'DTA',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	461
	.byte	31,0,2,35,0,0,20
	.byte	'Ifx_CPU_DBGTCR_Bits',0,21,235,1,3
	.word	25123
	.byte	10
	.byte	'_Ifx_CPU_DCON0_Bits',0,21,238,1,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'DCBYP',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	461
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_CPU_DCON0_Bits',0,21,243,1,3
	.word	25217
	.byte	10
	.byte	'_Ifx_CPU_DCON2_Bits',0,21,246,1,16,4,11
	.byte	'DCACHE_SZE',0,4
	.word	461
	.byte	16,16,2,35,0,11
	.byte	'DSCRATCH_SZE',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_CPU_DCON2_Bits',0,21,250,1,3
	.word	25333
	.byte	10
	.byte	'_Ifx_CPU_DCX_Bits',0,21,253,1,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	6,26,2,35,0,11
	.byte	'DCXVALUE',0,4
	.word	461
	.byte	26,0,2,35,0,0,20
	.byte	'Ifx_CPU_DCX_Bits',0,21,129,2,3
	.word	25434
	.byte	10
	.byte	'_Ifx_CPU_DEADD_Bits',0,21,132,2,16,4,11
	.byte	'ERROR_ADDRESS',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CPU_DEADD_Bits',0,21,135,2,3
	.word	25527
	.byte	10
	.byte	'_Ifx_CPU_DIEAR_Bits',0,21,138,2,16,4,11
	.byte	'TA',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CPU_DIEAR_Bits',0,21,141,2,3
	.word	25607
	.byte	10
	.byte	'_Ifx_CPU_DIETR_Bits',0,21,144,2,16,4,11
	.byte	'IED',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	461
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'IE_DLMU',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	461
	.byte	15,0,2,35,0,0,20
	.byte	'Ifx_CPU_DIETR_Bits',0,21,159,2,3
	.word	25676
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,21,162,2,16,4,11
	.byte	'EN0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,21,196,2,3
	.word	25960
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,21,199,2,16,4,11
	.byte	'EN0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,21,233,2,3
	.word	26551
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,21,236,2,16,4,11
	.byte	'EN32',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,21,142,3,3
	.word	27142
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,21,145,3,16,4,11
	.byte	'EN32',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,21,179,3,3
	.word	27743
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,21,182,3,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	461
	.byte	27,0,2,35,0,0,20
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,21,186,3,3
	.word	28344
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,21,189,3,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	461
	.byte	27,0,2,35,0,0,20
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,21,193,3,3
	.word	28459
	.byte	10
	.byte	'_Ifx_CPU_DMS_Bits',0,21,196,3,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'DMSVALUE',0,4
	.word	461
	.byte	31,0,2,35,0,0,20
	.byte	'Ifx_CPU_DMS_Bits',0,21,200,3,3
	.word	28574
	.byte	10
	.byte	'_Ifx_CPU_DPRE_Bits',0,21,203,3,16,4,11
	.byte	'RE_N',0,4
	.word	461
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	461
	.byte	14,0,2,35,0,0,20
	.byte	'Ifx_CPU_DPRE_Bits',0,21,207,3,3
	.word	28667
	.byte	10
	.byte	'_Ifx_CPU_DPR_L_Bits',0,21,210,3,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	461
	.byte	29,0,2,35,0,0,20
	.byte	'Ifx_CPU_DPR_L_Bits',0,21,214,3,3
	.word	28759
	.byte	10
	.byte	'_Ifx_CPU_DPR_U_Bits',0,21,217,3,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	461
	.byte	29,0,2,35,0,0,20
	.byte	'Ifx_CPU_DPR_U_Bits',0,21,221,3,3
	.word	28854
	.byte	10
	.byte	'_Ifx_CPU_DPWE_Bits',0,21,224,3,16,4,11
	.byte	'WE_N',0,4
	.word	461
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	461
	.byte	14,0,2,35,0,0,20
	.byte	'Ifx_CPU_DPWE_Bits',0,21,228,3,3
	.word	28949
	.byte	10
	.byte	'_Ifx_CPU_DSTR_Bits',0,21,231,3,16,4,11
	.byte	'SRE',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'GAE',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'LBE',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'DRE',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	461
	.byte	2,26,2,35,0,11
	.byte	'CRE',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	461
	.byte	7,18,2,35,0,11
	.byte	'DTME',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'LOE',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'SDE',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'SCE',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'CAC',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'MPE',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'CLE',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	461
	.byte	3,8,2,35,0,11
	.byte	'ALN',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	461
	.byte	7,0,2,35,0,0,20
	.byte	'Ifx_CPU_DSTR_Bits',0,21,250,3,3
	.word	29041
	.byte	10
	.byte	'_Ifx_CPU_EXEVT_Bits',0,21,253,3,16,4,11
	.byte	'EVTA',0,4
	.word	461
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	461
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_CPU_EXEVT_Bits',0,21,133,4,3
	.word	29380
	.byte	10
	.byte	'_Ifx_CPU_FCX_Bits',0,21,136,4,16,4,11
	.byte	'FCXO',0,4
	.word	461
	.byte	16,16,2,35,0,11
	.byte	'FCXS',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	461
	.byte	12,0,2,35,0,0,20
	.byte	'Ifx_CPU_FCX_Bits',0,21,141,4,3
	.word	29534
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON0_Bits',0,21,144,4,16,4,11
	.byte	'TAG1',0,4
	.word	461
	.byte	6,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	461
	.byte	2,24,2,35,0,11
	.byte	'TAG2',0,4
	.word	461
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	461
	.byte	2,16,2,35,0,11
	.byte	'TAG3',0,4
	.word	461
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	461
	.byte	2,8,2,35,0,11
	.byte	'TAG4',0,4
	.word	461
	.byte	6,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	461
	.byte	2,0,2,35,0,0,20
	.byte	'Ifx_CPU_FLASHCON0_Bits',0,21,154,4,3
	.word	29640
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON1_Bits',0,21,157,4,16,4,11
	.byte	'STALL',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	461
	.byte	15,16,2,35,0,11
	.byte	'MASKUECC',0,4
	.word	461
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	461
	.byte	6,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	461
	.byte	2,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	461
	.byte	6,0,2,35,0,0,20
	.byte	'Ifx_CPU_FLASHCON1_Bits',0,21,165,4,3
	.word	29858
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON2_Bits',0,21,168,4,16,4,11
	.byte	'RECDIS',0,4
	.word	461
	.byte	2,30,2,35,0,11
	.byte	'ECCCORDIS',0,4
	.word	461
	.byte	2,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'HMARGIN',0,4
	.word	461
	.byte	2,22,2,35,0,11
	.byte	'MSEL',0,4
	.word	461
	.byte	2,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	461
	.byte	4,16,2,35,0,11
	.byte	'ECCSCLR',0,4
	.word	461
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	461
	.byte	6,8,2,35,0,11
	.byte	'SBABCLR',0,4
	.word	461
	.byte	2,6,2,35,0,11
	.byte	'DBABCLR',0,4
	.word	461
	.byte	2,4,2,35,0,11
	.byte	'MBABCLR',0,4
	.word	461
	.byte	2,2,2,35,0,11
	.byte	'ZBABCLR',0,4
	.word	461
	.byte	2,0,2,35,0,0,20
	.byte	'Ifx_CPU_FLASHCON2_Bits',0,21,182,4,3
	.word	30049
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON3_Bits',0,21,185,4,16,4,11
	.byte	'ECCERRINJ',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EDCERRINJ',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'SBABERRINJ',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'DBABERRINJ',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'MBABERRINJ',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'ZBABERRINJ',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'SBERERRINJ',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'DBERERRINJ',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'NVMCERRINJ',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'FLCONERRINJ',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	461
	.byte	22,0,2,35,0,0,20
	.byte	'Ifx_CPU_FLASHCON3_Bits',0,21,198,4,3
	.word	30349
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON4_Bits',0,21,201,4,16,4,11
	.byte	'DDIS',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	461
	.byte	31,0,2,35,0,0,20
	.byte	'Ifx_CPU_FLASHCON4_Bits',0,21,205,4,3
	.word	30654
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,21,208,4,16,4,11
	.byte	'TST',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'TCL',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	461
	.byte	6,24,2,35,0,11
	.byte	'RM',0,4
	.word	461
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	461
	.byte	8,14,2,35,0,11
	.byte	'FXE',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'FUE',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'FZE',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'FVE',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'FIE',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	461
	.byte	3,6,2,35,0,11
	.byte	'FX',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'FU',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'FZ',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'FV',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'FI',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,21,227,4,3
	.word	30755
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,21,230,4,16,4,11
	.byte	'OPC',0,4
	.word	461
	.byte	8,24,2,35,0,11
	.byte	'FMT',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	461
	.byte	7,16,2,35,0,11
	.byte	'DREG',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	461
	.byte	12,0,2,35,0,0,20
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,21,237,4,3
	.word	31104
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,21,240,4,16,4,11
	.byte	'PC',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,21,243,4,3
	.word	31264
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,21,246,4,16,4,11
	.byte	'SRC1',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,21,249,4,3
	.word	31345
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,21,252,4,16,4,11
	.byte	'SRC2',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,21,255,4,3
	.word	31432
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,21,130,5,16,4,11
	.byte	'SRC3',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,21,133,5,3
	.word	31519
	.byte	10
	.byte	'_Ifx_CPU_ICNT_Bits',0,21,136,5,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	461
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_ICNT_Bits',0,21,140,5,3
	.word	31606
	.byte	20
	.byte	'Ifx_CPU_ICR_Bits',0,21,150,5,3
	.word	18322
	.byte	10
	.byte	'_Ifx_CPU_ISP_Bits',0,21,153,5,16,4,11
	.byte	'ISP',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CPU_ISP_Bits',0,21,156,5,3
	.word	31723
	.byte	10
	.byte	'_Ifx_CPU_KRST0_Bits',0,21,159,5,16,4,11
	.byte	'RST',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'RSTSTAT',0,4
	.word	461
	.byte	2,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	461
	.byte	29,0,2,35,0,0,20
	.byte	'Ifx_CPU_KRST0_Bits',0,21,164,5,3
	.word	31789
	.byte	10
	.byte	'_Ifx_CPU_KRST1_Bits',0,21,167,5,16,4,11
	.byte	'RST',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	461
	.byte	31,0,2,35,0,0,20
	.byte	'Ifx_CPU_KRST1_Bits',0,21,171,5,3
	.word	31900
	.byte	10
	.byte	'_Ifx_CPU_KRSTCLR_Bits',0,21,174,5,16,4,11
	.byte	'CLR',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	461
	.byte	31,0,2,35,0,0,20
	.byte	'Ifx_CPU_KRSTCLR_Bits',0,21,178,5,3
	.word	31992
	.byte	10
	.byte	'_Ifx_CPU_LCX_Bits',0,21,181,5,16,4,11
	.byte	'LCXO',0,4
	.word	461
	.byte	16,16,2,35,0,11
	.byte	'LCXS',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	461
	.byte	12,0,2,35,0,0,20
	.byte	'Ifx_CPU_LCX_Bits',0,21,186,5,3
	.word	32088
	.byte	10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,21,189,5,16,4,11
	.byte	'EN0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,21,223,5,3
	.word	32194
	.byte	10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,21,226,5,16,4,11
	.byte	'EN32',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,21,132,6,3
	.word	32777
	.byte	10
	.byte	'_Ifx_CPU_M1CNT_Bits',0,21,135,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	461
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_M1CNT_Bits',0,21,139,6,3
	.word	33370
	.byte	10
	.byte	'_Ifx_CPU_M2CNT_Bits',0,21,142,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	461
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_M2CNT_Bits',0,21,146,6,3
	.word	33463
	.byte	10
	.byte	'_Ifx_CPU_M3CNT_Bits',0,21,149,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	461
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_M3CNT_Bits',0,21,153,6,3
	.word	33556
	.byte	10
	.byte	'_Ifx_CPU_OSEL_Bits',0,21,156,6,16,4,11
	.byte	'SHOVEN_X',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CPU_OSEL_Bits',0,21,159,6,3
	.word	33649
	.byte	10
	.byte	'_Ifx_CPU_PC_Bits',0,21,162,6,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'PC',0,4
	.word	461
	.byte	31,0,2,35,0,0,20
	.byte	'Ifx_CPU_PC_Bits',0,21,166,6,3
	.word	33722
	.byte	10
	.byte	'_Ifx_CPU_PCON0_Bits',0,21,169,6,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'PCBYP',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	461
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_CPU_PCON0_Bits',0,21,174,6,3
	.word	33807
	.byte	10
	.byte	'_Ifx_CPU_PCON1_Bits',0,21,177,6,16,4,11
	.byte	'PCINV',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'PBINV',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	461
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_CPU_PCON1_Bits',0,21,182,6,3
	.word	33923
	.byte	10
	.byte	'_Ifx_CPU_PCON2_Bits',0,21,185,6,16,4,11
	.byte	'PCACHE_SZE',0,4
	.word	461
	.byte	16,16,2,35,0,11
	.byte	'PSCRATCH_SZE',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_CPU_PCON2_Bits',0,21,189,6,3
	.word	34034
	.byte	10
	.byte	'_Ifx_CPU_PCXI_Bits',0,21,192,6,16,4,11
	.byte	'PCXO',0,4
	.word	461
	.byte	16,16,2,35,0,11
	.byte	'PCXS',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'UL',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'PIE',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'PCPN',0,4
	.word	461
	.byte	8,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	461
	.byte	2,0,2,35,0,0,20
	.byte	'Ifx_CPU_PCXI_Bits',0,21,200,6,3
	.word	34135
	.byte	10
	.byte	'_Ifx_CPU_PIEAR_Bits',0,21,203,6,16,4,11
	.byte	'TA',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CPU_PIEAR_Bits',0,21,206,6,3
	.word	34288
	.byte	10
	.byte	'_Ifx_CPU_PIETR_Bits',0,21,209,6,16,4,11
	.byte	'IED',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	461
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'IE_ADDR',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	461
	.byte	15,0,2,35,0,0,20
	.byte	'Ifx_CPU_PIETR_Bits',0,21,224,6,3
	.word	34357
	.byte	10
	.byte	'_Ifx_CPU_PMA0_Bits',0,21,227,6,16,4,11
	.byte	'DAC',0,4
	.word	461
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_CPU_PMA0_Bits',0,21,231,6,3
	.word	34641
	.byte	10
	.byte	'_Ifx_CPU_PMA1_Bits',0,21,234,6,16,4,11
	.byte	'CAC',0,4
	.word	461
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_CPU_PMA1_Bits',0,21,238,6,3
	.word	34732
	.byte	10
	.byte	'_Ifx_CPU_PMA2_Bits',0,21,241,6,16,4,11
	.byte	'PSI',0,4
	.word	461
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_CPU_PMA2_Bits',0,21,245,6,3
	.word	34823
	.byte	10
	.byte	'_Ifx_CPU_PSTR_Bits',0,21,248,6,16,4,11
	.byte	'FRE',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'FBE',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	461
	.byte	9,20,2,35,0,11
	.byte	'FPE',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'FME',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	461
	.byte	17,0,2,35,0,0,20
	.byte	'Ifx_CPU_PSTR_Bits',0,21,130,7,3
	.word	34914
	.byte	10
	.byte	'_Ifx_CPU_PSW_Bits',0,21,133,7,16,4,11
	.byte	'CDC',0,4
	.word	461
	.byte	7,25,2,35,0,11
	.byte	'CDE',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'GW',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'IS',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'IO',0,4
	.word	461
	.byte	2,20,2,35,0,11
	.byte	'PRS',0,4
	.word	461
	.byte	2,18,2,35,0,11
	.byte	'S',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'PRS2',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	8,8,2,35,0,11
	.byte	'USB',0,4
	.word	461
	.byte	8,0,2,35,0,0,20
	.byte	'Ifx_CPU_PSW_Bits',0,21,145,7,3
	.word	35117
	.byte	10
	.byte	'_Ifx_CPU_RGN_ACCENA_Bits',0,21,148,7,16,4,11
	.byte	'EN0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_RGN_ACCENA_Bits',0,21,182,7,3
	.word	35322
	.byte	10
	.byte	'_Ifx_CPU_RGN_ACCENB_Bits',0,21,185,7,16,4,11
	.byte	'EN32',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_RGN_ACCENB_Bits',0,21,219,7,3
	.word	35889
	.byte	10
	.byte	'_Ifx_CPU_RGN_LA_Bits',0,21,222,7,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	461
	.byte	27,0,2,35,0,0,20
	.byte	'Ifx_CPU_RGN_LA_Bits',0,21,226,7,3
	.word	36466
	.byte	10
	.byte	'_Ifx_CPU_RGN_UA_Bits',0,21,229,7,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	461
	.byte	27,0,2,35,0,0,20
	.byte	'Ifx_CPU_RGN_UA_Bits',0,21,233,7,3
	.word	36561
	.byte	10
	.byte	'_Ifx_CPU_SEGEN_Bits',0,21,236,7,16,4,11
	.byte	'ADFLIP',0,4
	.word	461
	.byte	8,24,2,35,0,11
	.byte	'ADTYPE',0,4
	.word	461
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	461
	.byte	21,1,2,35,0,11
	.byte	'AE',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_SEGEN_Bits',0,21,242,7,3
	.word	36656
	.byte	10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,21,245,7,16,4,11
	.byte	'EN0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,21,151,8,3
	.word	36784
	.byte	10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,21,154,8,16,4,11
	.byte	'EN32',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,21,188,8,3
	.word	37367
	.byte	10
	.byte	'_Ifx_CPU_SMACON_Bits',0,21,191,8,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	24,8,2,35,0,11
	.byte	'IODT',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	461
	.byte	7,0,2,35,0,0,20
	.byte	'Ifx_CPU_SMACON_Bits',0,21,196,8,3
	.word	37960
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,21,199,8,16,4,11
	.byte	'EN0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,21,233,8,3
	.word	38078
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,21,236,8,16,4,11
	.byte	'EN32',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,21,142,9,3
	.word	38667
	.byte	10
	.byte	'_Ifx_CPU_SWEVT_Bits',0,21,145,9,16,4,11
	.byte	'EVTA',0,4
	.word	461
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	461
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_CPU_SWEVT_Bits',0,21,153,9,3
	.word	39266
	.byte	10
	.byte	'_Ifx_CPU_SYSCON_Bits',0,21,156,9,16,4,11
	.byte	'FCDSF',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'PROTEN',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'TPROTEN',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'IS',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'TS',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	461
	.byte	3,24,2,35,0,11
	.byte	'ESDIS',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	461
	.byte	7,16,2,35,0,11
	.byte	'U1_IED',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'U1_IOS',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	461
	.byte	6,8,2,35,0,11
	.byte	'BHALT',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	461
	.byte	7,0,2,35,0,0,20
	.byte	'Ifx_CPU_SYSCON_Bits',0,21,171,9,3
	.word	39420
	.byte	10
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,21,174,9,16,4,11
	.byte	'ASI',0,4
	.word	461
	.byte	5,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	461
	.byte	27,0,2,35,0,0,20
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,21,178,9,3
	.word	39719
	.byte	10
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,21,181,9,16,4,11
	.byte	'TEXP0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'TEXP1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'TEXP2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	461
	.byte	13,16,2,35,0,11
	.byte	'TTRAP',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	461
	.byte	15,0,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_CON_Bits',0,21,189,9,3
	.word	39817
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,21,192,9,16,4,11
	.byte	'EXTIM_CLASS_EN',0,4
	.word	461
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,21,196,9,3
	.word	39989
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,21,199,9,16,4,11
	.byte	'ENTRY_CVAL',0,4
	.word	461
	.byte	12,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	461
	.byte	20,0,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,21,203,9,3
	.word	40118
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,21,206,9,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'ENTRY_LVAL',0,4
	.word	461
	.byte	8,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	461
	.byte	20,0,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,21,211,9,3
	.word	40248
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,21,214,9,16,4,11
	.byte	'EXIT_CVAL',0,4
	.word	461
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	461
	.byte	8,0,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,21,218,9,3
	.word	40400
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,21,221,9,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'EXIT_LVAL',0,4
	.word	461
	.byte	20,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	461
	.byte	8,0,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,21,226,9,3
	.word	40527
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_FCX_Bits',0,21,229,9,16,4,11
	.byte	'EXIT_FCX',0,4
	.word	461
	.byte	20,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	461
	.byte	12,0,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_FCX_Bits',0,21,233,9,3
	.word	40676
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_STAT_Bits',0,21,236,9,16,4,11
	.byte	'EXIT_TIN',0,4
	.word	461
	.byte	8,24,2,35,0,11
	.byte	'EXIT_CLASS',0,4
	.word	461
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	461
	.byte	4,17,2,35,0,11
	.byte	'EXIT_AT',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'ENTRY_TIN',0,4
	.word	461
	.byte	8,8,2,35,0,11
	.byte	'ENTRY_CLASS',0,4
	.word	461
	.byte	3,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	461
	.byte	4,1,2,35,0,11
	.byte	'ENTRY_AT',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_STAT_Bits',0,21,246,9,3
	.word	40790
	.byte	10
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,21,249,9,16,4,11
	.byte	'TIMER',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,21,252,9,3
	.word	41034
	.byte	10
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,21,255,9,16,4,11
	.byte	'T0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'T1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'T2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'T3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'T4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'T5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'T6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'T7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,21,138,10,3
	.word	41114
	.byte	10
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,21,141,10,16,4,11
	.byte	'ADDR',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CPU_TR_ADR_Bits',0,21,144,10,3
	.word	41309
	.byte	10
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,21,147,10,16,4,11
	.byte	'EVTA',0,4
	.word	461
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	461
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	4,20,2,35,0,11
	.byte	'TYP',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'RNG',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'ASI_EN',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'ASI',0,4
	.word	461
	.byte	5,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	461
	.byte	6,5,2,35,0,11
	.byte	'AST',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'ALD',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	461
	.byte	3,0,2,35,0,0,20
	.byte	'Ifx_CPU_TR_EVT_Bits',0,21,164,10,3
	.word	41382
	.byte	12,21,172,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22923
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_A',0,21,177,10,3
	.word	41700
	.byte	12,21,180,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22984
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_BIV',0,21,185,10,3
	.word	41759
	.byte	12,21,188,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23063
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_BLK_OMASK',0,21,193,10,3
	.word	41820
	.byte	12,21,196,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23201
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_BLK_OTAR',0,21,201,10,3
	.word	41887
	.byte	12,21,204,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23322
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_BLK_RABR',0,21,209,10,3
	.word	41953
	.byte	12,21,212,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23498
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_BTV',0,21,217,10,3
	.word	42019
	.byte	12,21,220,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23584
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_CCNT',0,21,225,10,3
	.word	42080
	.byte	12,21,228,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23673
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_CCTRL',0,21,233,10,3
	.word	42142
	.byte	12,21,236,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23820
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_COMPAT',0,21,241,10,3
	.word	42205
	.byte	20
	.byte	'Ifx_CPU_CORE_ID',0,21,249,10,3
	.word	18653
	.byte	12,21,252,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23979
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_CPR_L',0,21,129,11,3
	.word	42294
	.byte	12,21,132,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24074
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_CPR_U',0,21,137,11,3
	.word	42357
	.byte	12,21,140,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24169
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_CPU_ID',0,21,145,11,3
	.word	42420
	.byte	12,21,148,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24279
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_CPXE',0,21,153,11,3
	.word	42484
	.byte	12,21,156,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24371
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_CREVT',0,21,161,11,3
	.word	42546
	.byte	12,21,164,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24525
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_CUS_ID',0,21,169,11,3
	.word	42609
	.byte	12,21,172,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24619
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_D',0,21,177,11,3
	.word	42673
	.byte	12,21,180,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24682
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DATR',0,21,185,11,3
	.word	42732
	.byte	12,21,188,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24908
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DBGSR',0,21,193,11,3
	.word	42794
	.byte	12,21,196,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25123
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DBGTCR',0,21,201,11,3
	.word	42857
	.byte	12,21,204,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25217
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DCON0',0,21,209,11,3
	.word	42921
	.byte	12,21,212,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25333
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DCON2',0,21,217,11,3
	.word	42984
	.byte	12,21,220,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25434
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DCX',0,21,225,11,3
	.word	43047
	.byte	12,21,228,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25527
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DEADD',0,21,233,11,3
	.word	43108
	.byte	12,21,236,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25607
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DIEAR',0,21,241,11,3
	.word	43171
	.byte	12,21,244,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25676
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DIETR',0,21,249,11,3
	.word	43234
	.byte	12,21,252,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25960
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R',0,21,129,12,3
	.word	43297
	.byte	12,21,132,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26551
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W',0,21,137,12,3
	.word	43377
	.byte	12,21,140,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27142
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R',0,21,145,12,3
	.word	43457
	.byte	12,21,148,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27743
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W',0,21,153,12,3
	.word	43537
	.byte	12,21,156,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28344
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA',0,21,161,12,3
	.word	43617
	.byte	12,21,164,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28459
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA',0,21,169,12,3
	.word	43691
	.byte	12,21,172,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28574
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DMS',0,21,177,12,3
	.word	43765
	.byte	12,21,180,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28667
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DPRE',0,21,185,12,3
	.word	43826
	.byte	12,21,188,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28759
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DPR_L',0,21,193,12,3
	.word	43888
	.byte	12,21,196,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28854
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DPR_U',0,21,201,12,3
	.word	43951
	.byte	12,21,204,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28949
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DPWE',0,21,209,12,3
	.word	44014
	.byte	12,21,212,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29041
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DSTR',0,21,217,12,3
	.word	44076
	.byte	12,21,220,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29380
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_EXEVT',0,21,225,12,3
	.word	44138
	.byte	12,21,228,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29534
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_FCX',0,21,233,12,3
	.word	44201
	.byte	12,21,236,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29640
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_FLASHCON0',0,21,241,12,3
	.word	44262
	.byte	12,21,244,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29858
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_FLASHCON1',0,21,249,12,3
	.word	44329
	.byte	12,21,252,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30049
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_FLASHCON2',0,21,129,13,3
	.word	44396
	.byte	12,21,132,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30349
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_FLASHCON3',0,21,137,13,3
	.word	44463
	.byte	12,21,140,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30654
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_FLASHCON4',0,21,145,13,3
	.word	44530
	.byte	12,21,148,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30755
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,21,153,13,3
	.word	44597
	.byte	12,21,156,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31104
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,21,161,13,3
	.word	44667
	.byte	12,21,164,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31264
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,21,169,13,3
	.word	44737
	.byte	12,21,172,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31345
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,21,177,13,3
	.word	44806
	.byte	12,21,180,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31432
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,21,185,13,3
	.word	44877
	.byte	12,21,188,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31519
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,21,193,13,3
	.word	44948
	.byte	12,21,196,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31606
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_ICNT',0,21,201,13,3
	.word	45019
	.byte	20
	.byte	'Ifx_CPU_ICR',0,21,209,13,3
	.word	18438
	.byte	12,21,212,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31723
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_ISP',0,21,217,13,3
	.word	45102
	.byte	12,21,220,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31789
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_KRST0',0,21,225,13,3
	.word	45163
	.byte	12,21,228,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31900
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_KRST1',0,21,233,13,3
	.word	45226
	.byte	12,21,236,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31992
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_KRSTCLR',0,21,241,13,3
	.word	45289
	.byte	12,21,244,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32088
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_LCX',0,21,249,13,3
	.word	45354
	.byte	12,21,252,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32194
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R',0,21,129,14,3
	.word	45415
	.byte	12,21,132,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32777
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R',0,21,137,14,3
	.word	45491
	.byte	12,21,140,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33370
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_M1CNT',0,21,145,14,3
	.word	45567
	.byte	12,21,148,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33463
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_M2CNT',0,21,153,14,3
	.word	45630
	.byte	12,21,156,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33556
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_M3CNT',0,21,161,14,3
	.word	45693
	.byte	12,21,164,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33649
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_OSEL',0,21,169,14,3
	.word	45756
	.byte	12,21,172,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33722
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_PC',0,21,177,14,3
	.word	45818
	.byte	12,21,180,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33807
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_PCON0',0,21,185,14,3
	.word	45878
	.byte	12,21,188,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33923
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_PCON1',0,21,193,14,3
	.word	45941
	.byte	12,21,196,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34034
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_PCON2',0,21,201,14,3
	.word	46004
	.byte	12,21,204,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34135
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_PCXI',0,21,209,14,3
	.word	46067
	.byte	12,21,212,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34288
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_PIEAR',0,21,217,14,3
	.word	46129
	.byte	12,21,220,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34357
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_PIETR',0,21,225,14,3
	.word	46192
	.byte	12,21,228,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34641
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_PMA0',0,21,233,14,3
	.word	46255
	.byte	12,21,236,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34732
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_PMA1',0,21,241,14,3
	.word	46317
	.byte	12,21,244,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34823
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_PMA2',0,21,249,14,3
	.word	46379
	.byte	12,21,252,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34914
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_PSTR',0,21,129,15,3
	.word	46441
	.byte	12,21,132,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35117
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_PSW',0,21,137,15,3
	.word	46503
	.byte	12,21,140,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35322
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_RGN_ACCENA',0,21,145,15,3
	.word	46564
	.byte	12,21,148,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35889
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_RGN_ACCENB',0,21,153,15,3
	.word	46632
	.byte	12,21,156,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36466
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_RGN_LA',0,21,161,15,3
	.word	46700
	.byte	12,21,164,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36561
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_RGN_UA',0,21,169,15,3
	.word	46764
	.byte	12,21,172,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36656
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_SEGEN',0,21,177,15,3
	.word	46828
	.byte	12,21,180,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36784
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W',0,21,185,15,3
	.word	46891
	.byte	12,21,188,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37367
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W',0,21,193,15,3
	.word	46967
	.byte	12,21,196,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37960
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_SMACON',0,21,201,15,3
	.word	47043
	.byte	12,21,204,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38078
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R',0,21,209,15,3
	.word	47107
	.byte	12,21,212,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38667
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R',0,21,217,15,3
	.word	47186
	.byte	12,21,220,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39266
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_SWEVT',0,21,225,15,3
	.word	47265
	.byte	12,21,228,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39420
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_SYSCON',0,21,233,15,3
	.word	47328
	.byte	12,21,236,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39719
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_TASK_ASI',0,21,241,15,3
	.word	47392
	.byte	12,21,244,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39817
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_CON',0,21,249,15,3
	.word	47458
	.byte	12,21,252,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39989
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN',0,21,129,16,3
	.word	47523
	.byte	12,21,132,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40118
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL',0,21,137,16,3
	.word	47599
	.byte	12,21,140,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40248
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL',0,21,145,16,3
	.word	47677
	.byte	12,21,148,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40400
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL',0,21,153,16,3
	.word	47755
	.byte	12,21,156,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40527
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL',0,21,161,16,3
	.word	47832
	.byte	12,21,164,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40676
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_FCX',0,21,169,16,3
	.word	47909
	.byte	12,21,172,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	40790
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_STAT',0,21,177,16,3
	.word	47980
	.byte	12,21,180,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41034
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_TIMER',0,21,185,16,3
	.word	48052
	.byte	12,21,188,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41114
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_TRIG_ACC',0,21,193,16,3
	.word	48119
	.byte	12,21,196,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41309
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_TR_ADR',0,21,201,16,3
	.word	48185
	.byte	12,21,204,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	41382
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_TR_EVT',0,21,209,16,3
	.word	48249
	.byte	10
	.byte	'_Ifx_CPU_RGN',0,21,221,16,25,16,13
	.byte	'LA',0
	.word	46700
	.byte	4,2,35,0,13
	.byte	'UA',0
	.word	46764
	.byte	4,2,35,4,13
	.byte	'ACCENA',0
	.word	46564
	.byte	4,2,35,8,13
	.byte	'ACCENB',0
	.word	46632
	.byte	4,2,35,12,0,14
	.word	48313
	.byte	20
	.byte	'Ifx_CPU_RGN',0,21,227,16,3
	.word	48389
	.byte	10
	.byte	'_Ifx_CPU_BLK',0,21,242,16,25,12,13
	.byte	'RABR',0
	.word	41953
	.byte	4,2,35,0,13
	.byte	'OTAR',0
	.word	41887
	.byte	4,2,35,4,13
	.byte	'OMASK',0
	.word	41820
	.byte	4,2,35,8,0,14
	.word	48415
	.byte	20
	.byte	'Ifx_CPU_BLK',0,21,247,16,3
	.word	48478
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP',0,21,134,17,25,28,13
	.byte	'CON',0
	.word	44597
	.byte	4,2,35,0,13
	.byte	'PC',0
	.word	44737
	.byte	4,2,35,4,13
	.byte	'OPC',0
	.word	44667
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2634
	.byte	4,2,35,12,13
	.byte	'SRC1',0
	.word	44806
	.byte	4,2,35,16,13
	.byte	'SRC2',0
	.word	44877
	.byte	4,2,35,20,13
	.byte	'SRC3',0
	.word	44948
	.byte	4,2,35,24,0,14
	.word	48504
	.byte	20
	.byte	'Ifx_CPU_FPU_TRAP',0,21,143,17,3
	.word	48629
	.byte	10
	.byte	'_Ifx_CPU_DPR',0,21,158,17,25,8,13
	.byte	'L',0
	.word	43888
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	43951
	.byte	4,2,35,4,0,14
	.word	48660
	.byte	20
	.byte	'Ifx_CPU_DPR',0,21,162,17,3
	.word	48702
	.byte	10
	.byte	'_Ifx_CPU_CPR',0,21,177,17,25,8,13
	.byte	'L',0
	.word	42294
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	42357
	.byte	4,2,35,4,0,14
	.word	48728
	.byte	20
	.byte	'Ifx_CPU_CPR',0,21,181,17,3
	.word	48770
	.byte	15,12
	.word	48052
	.byte	16,2,0,10
	.byte	'_Ifx_CPU_TPS',0,21,196,17,25,16,13
	.byte	'CON',0
	.word	47458
	.byte	4,2,35,0,13
	.byte	'TIMER',0
	.word	48796
	.byte	12,2,35,4,0,14
	.word	48805
	.byte	20
	.byte	'Ifx_CPU_TPS',0,21,200,17,3
	.word	48853
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM',0,21,215,17,25,28,13
	.byte	'ENTRY_LVAL',0
	.word	47677
	.byte	4,2,35,0,13
	.byte	'ENTRY_CVAL',0
	.word	47599
	.byte	4,2,35,4,13
	.byte	'EXIT_LVAL',0
	.word	47832
	.byte	4,2,35,8,13
	.byte	'EXIT_CVAL',0
	.word	47755
	.byte	4,2,35,12,13
	.byte	'CLASS_EN',0
	.word	47523
	.byte	4,2,35,16,13
	.byte	'STAT',0
	.word	47980
	.byte	4,2,35,20,13
	.byte	'FCX',0
	.word	47909
	.byte	4,2,35,24,0,14
	.word	48879
	.byte	20
	.byte	'Ifx_CPU_TPS_EXTIM',0,21,224,17,3
	.word	49028
	.byte	10
	.byte	'_Ifx_CPU_TR',0,21,239,17,25,8,13
	.byte	'EVT',0
	.word	48249
	.byte	4,2,35,0,13
	.byte	'ADR',0
	.word	48185
	.byte	4,2,35,4,0,14
	.word	49060
	.byte	20
	.byte	'Ifx_CPU_TR',0,21,243,17,3
	.word	49105
	.byte	15,128,34
	.word	613
	.byte	16,255,33,0,15,236,253,2
	.word	613
	.byte	16,235,253,2,0,15,244,31
	.word	613
	.byte	16,243,31,0,15,128,1
	.word	48313
	.byte	16,7,0,14
	.word	49165
	.byte	15,232,1
	.word	613
	.byte	16,231,1,0,15,128,48
	.word	613
	.byte	16,255,47,0,15,128,3
	.word	48415
	.byte	16,31,0,14
	.word	49202
	.byte	15,160,39
	.word	613
	.byte	16,159,39,0,15,208,223,1
	.word	613
	.byte	16,207,223,1,0,15,248,1
	.word	613
	.byte	16,247,1,0,15,244,29
	.word	613
	.byte	16,243,29,0,15,188,3
	.word	613
	.byte	16,187,3,0,15,232,3
	.word	613
	.byte	16,231,3,0,15,252,23
	.word	613
	.byte	16,251,23,0,14
	.word	48504
	.byte	15,228,63
	.word	613
	.byte	16,227,63,0,15,144,1
	.word	48660
	.byte	16,17,0,14
	.word	49312
	.byte	15,240,30
	.word	613
	.byte	16,239,30,0,15,80
	.word	48728
	.byte	16,9,0,14
	.word	49338
	.byte	15,176,31
	.word	613
	.byte	16,175,31,0,15,16
	.word	613
	.byte	16,15,0,15,152,7
	.word	613
	.byte	16,151,7,0,14
	.word	48805
	.byte	15,48
	.word	613
	.byte	16,47,0,14
	.word	48879
	.byte	15,164,23
	.word	613
	.byte	16,163,23,0,15,64
	.word	49060
	.byte	16,7,0,14
	.word	49413
	.byte	15,192,23
	.word	613
	.byte	16,191,23,0,15,28
	.word	613
	.byte	16,27,0,15,180,1
	.word	613
	.byte	16,179,1,0,15,172,1
	.word	613
	.byte	16,171,1,0,15,64
	.word	42673
	.byte	16,15,0,15,64
	.word	613
	.byte	16,63,0,15,64
	.word	41700
	.byte	16,15,0,10
	.byte	'_Ifx_CPU',0,21,130,18,25,128,128,8,13
	.byte	'reserved_0',0
	.word	49130
	.byte	128,34,2,35,0,13
	.byte	'FLASHCON0',0
	.word	44262
	.byte	4,3,35,128,34,13
	.byte	'FLASHCON1',0
	.word	44329
	.byte	4,3,35,132,34,13
	.byte	'FLASHCON2',0
	.word	44396
	.byte	4,3,35,136,34,13
	.byte	'FLASHCON3',0
	.word	44463
	.byte	4,3,35,140,34,13
	.byte	'FLASHCON4',0
	.word	44530
	.byte	4,3,35,144,34,13
	.byte	'reserved_1114',0
	.word	49141
	.byte	236,253,2,3,35,148,34,13
	.byte	'KRST0',0
	.word	45163
	.byte	4,4,35,128,160,3,13
	.byte	'KRST1',0
	.word	45226
	.byte	4,4,35,132,160,3,13
	.byte	'KRSTCLR',0
	.word	45289
	.byte	4,4,35,136,160,3,13
	.byte	'reserved_D00C',0
	.word	49154
	.byte	244,31,4,35,140,160,3,13
	.byte	'RGN',0
	.word	49175
	.byte	128,1,4,35,128,192,3,13
	.byte	'reserved_E080',0
	.word	4454
	.byte	8,4,35,128,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R0',0
	.word	47107
	.byte	4,4,35,136,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R0',0
	.word	47186
	.byte	4,4,35,140,193,3,13
	.byte	'reserved_E090',0
	.word	4454
	.byte	8,4,35,144,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R1',0
	.word	47107
	.byte	4,4,35,152,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R1',0
	.word	47186
	.byte	4,4,35,156,193,3,13
	.byte	'reserved_E0A0',0
	.word	4454
	.byte	8,4,35,160,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R2',0
	.word	47107
	.byte	4,4,35,168,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R2',0
	.word	47186
	.byte	4,4,35,172,193,3,13
	.byte	'reserved_E0B0',0
	.word	4454
	.byte	8,4,35,176,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R3',0
	.word	47107
	.byte	4,4,35,184,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R3',0
	.word	47186
	.byte	4,4,35,188,193,3,13
	.byte	'reserved_E0C0',0
	.word	4454
	.byte	8,4,35,192,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R4',0
	.word	47107
	.byte	4,4,35,200,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R4',0
	.word	47186
	.byte	4,4,35,204,193,3,13
	.byte	'reserved_E0D0',0
	.word	4454
	.byte	8,4,35,208,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R5',0
	.word	47107
	.byte	4,4,35,216,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R5',0
	.word	47186
	.byte	4,4,35,220,193,3,13
	.byte	'reserved_E0E0',0
	.word	4454
	.byte	8,4,35,224,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R6',0
	.word	47107
	.byte	4,4,35,232,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R6',0
	.word	47186
	.byte	4,4,35,236,193,3,13
	.byte	'reserved_E0F0',0
	.word	4454
	.byte	8,4,35,240,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R7',0
	.word	47107
	.byte	4,4,35,248,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R7',0
	.word	47186
	.byte	4,4,35,252,193,3,13
	.byte	'SFR_SPROT_ACCENA_W',0
	.word	46891
	.byte	4,4,35,128,194,3,13
	.byte	'SFR_SPROT_ACCENB_W',0
	.word	46967
	.byte	4,4,35,132,194,3,13
	.byte	'reserved_E108',0
	.word	4454
	.byte	8,4,35,136,194,3,13
	.byte	'LPB_SPROT_ACCENA_R',0
	.word	45415
	.byte	4,4,35,144,194,3,13
	.byte	'LPB_SPROT_ACCENB_R',0
	.word	45491
	.byte	4,4,35,148,194,3,13
	.byte	'reserved_E118',0
	.word	49180
	.byte	232,1,4,35,152,194,3,13
	.byte	'DLMU_SPROT_RGNLA0',0
	.word	43617
	.byte	4,4,35,128,196,3,13
	.byte	'DLMU_SPROT_RGNUA0',0
	.word	43691
	.byte	4,4,35,132,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W0',0
	.word	43377
	.byte	4,4,35,136,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W0',0
	.word	43537
	.byte	4,4,35,140,196,3,13
	.byte	'DLMU_SPROT_RGNLA1',0
	.word	43617
	.byte	4,4,35,144,196,3,13
	.byte	'DLMU_SPROT_RGNUA1',0
	.word	43691
	.byte	4,4,35,148,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W1',0
	.word	43377
	.byte	4,4,35,152,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W1',0
	.word	43537
	.byte	4,4,35,156,196,3,13
	.byte	'DLMU_SPROT_RGNLA2',0
	.word	43617
	.byte	4,4,35,160,196,3,13
	.byte	'DLMU_SPROT_RGNUA2',0
	.word	43691
	.byte	4,4,35,164,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W2',0
	.word	43377
	.byte	4,4,35,168,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W2',0
	.word	43537
	.byte	4,4,35,172,196,3,13
	.byte	'DLMU_SPROT_RGNLA3',0
	.word	43617
	.byte	4,4,35,176,196,3,13
	.byte	'DLMU_SPROT_RGNUA3',0
	.word	43691
	.byte	4,4,35,180,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W3',0
	.word	43377
	.byte	4,4,35,184,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W3',0
	.word	43537
	.byte	4,4,35,188,196,3,13
	.byte	'DLMU_SPROT_RGNLA4',0
	.word	43617
	.byte	4,4,35,192,196,3,13
	.byte	'DLMU_SPROT_RGNUA4',0
	.word	43691
	.byte	4,4,35,196,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W4',0
	.word	43377
	.byte	4,4,35,200,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W4',0
	.word	43537
	.byte	4,4,35,204,196,3,13
	.byte	'DLMU_SPROT_RGNLA5',0
	.word	43617
	.byte	4,4,35,208,196,3,13
	.byte	'DLMU_SPROT_RGNUA5',0
	.word	43691
	.byte	4,4,35,212,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W5',0
	.word	43377
	.byte	4,4,35,216,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W5',0
	.word	43537
	.byte	4,4,35,220,196,3,13
	.byte	'DLMU_SPROT_RGNLA6',0
	.word	43617
	.byte	4,4,35,224,196,3,13
	.byte	'DLMU_SPROT_RGNUA6',0
	.word	43691
	.byte	4,4,35,228,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W6',0
	.word	43377
	.byte	4,4,35,232,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W6',0
	.word	43537
	.byte	4,4,35,236,196,3,13
	.byte	'DLMU_SPROT_RGNLA7',0
	.word	43617
	.byte	4,4,35,240,196,3,13
	.byte	'DLMU_SPROT_RGNUA7',0
	.word	43691
	.byte	4,4,35,244,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W7',0
	.word	43377
	.byte	4,4,35,248,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W7',0
	.word	43537
	.byte	4,4,35,252,196,3,13
	.byte	'reserved_E280',0
	.word	4454
	.byte	8,4,35,128,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R0',0
	.word	43297
	.byte	4,4,35,136,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R0',0
	.word	43457
	.byte	4,4,35,140,197,3,13
	.byte	'reserved_E290',0
	.word	4454
	.byte	8,4,35,144,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R1',0
	.word	43297
	.byte	4,4,35,152,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R1',0
	.word	43457
	.byte	4,4,35,156,197,3,13
	.byte	'reserved_E2A0',0
	.word	4454
	.byte	8,4,35,160,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R2',0
	.word	43297
	.byte	4,4,35,168,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R2',0
	.word	43457
	.byte	4,4,35,172,197,3,13
	.byte	'reserved_E2B0',0
	.word	4454
	.byte	8,4,35,176,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R3',0
	.word	43297
	.byte	4,4,35,184,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R3',0
	.word	43457
	.byte	4,4,35,188,197,3,13
	.byte	'reserved_E2C0',0
	.word	4454
	.byte	8,4,35,192,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R4',0
	.word	43297
	.byte	4,4,35,200,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R4',0
	.word	43457
	.byte	4,4,35,204,197,3,13
	.byte	'reserved_E2D0',0
	.word	4454
	.byte	8,4,35,208,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R5',0
	.word	43297
	.byte	4,4,35,216,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R5',0
	.word	43457
	.byte	4,4,35,220,197,3,13
	.byte	'reserved_E2E0',0
	.word	4454
	.byte	8,4,35,224,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R6',0
	.word	43297
	.byte	4,4,35,232,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R6',0
	.word	43457
	.byte	4,4,35,236,197,3,13
	.byte	'reserved_E2F0',0
	.word	4454
	.byte	8,4,35,240,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R7',0
	.word	43297
	.byte	4,4,35,248,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R7',0
	.word	43457
	.byte	4,4,35,252,197,3,13
	.byte	'reserved_E300',0
	.word	49191
	.byte	128,48,4,35,128,198,3,13
	.byte	'OSEL',0
	.word	45756
	.byte	4,4,35,128,246,3,13
	.byte	'reserved_FB04',0
	.word	4794
	.byte	12,4,35,132,246,3,13
	.byte	'BLK',0
	.word	49212
	.byte	128,3,4,35,144,246,3,13
	.byte	'reserved_FC90',0
	.word	49217
	.byte	160,39,4,35,144,249,3,13
	.byte	'SEGEN',0
	.word	46828
	.byte	4,4,35,176,160,4,13
	.byte	'reserved_11034',0
	.word	49228
	.byte	208,223,1,4,35,180,160,4,13
	.byte	'TASK_ASI',0
	.word	47392
	.byte	4,4,35,132,128,6,13
	.byte	'reserved_18008',0
	.word	49241
	.byte	248,1,4,35,136,128,6,13
	.byte	'PMA0',0
	.word	46255
	.byte	4,4,35,128,130,6,13
	.byte	'PMA1',0
	.word	46317
	.byte	4,4,35,132,130,6,13
	.byte	'PMA2',0
	.word	46379
	.byte	4,4,35,136,130,6,13
	.byte	'reserved_1810C',0
	.word	49252
	.byte	244,29,4,35,140,130,6,13
	.byte	'DCON2',0
	.word	42984
	.byte	4,4,35,128,160,6,13
	.byte	'reserved_19004',0
	.word	4454
	.byte	8,4,35,132,160,6,13
	.byte	'SMACON',0
	.word	47043
	.byte	4,4,35,140,160,6,13
	.byte	'DSTR',0
	.word	44076
	.byte	4,4,35,144,160,6,13
	.byte	'reserved_19014',0
	.word	2634
	.byte	4,4,35,148,160,6,13
	.byte	'DATR',0
	.word	42732
	.byte	4,4,35,152,160,6,13
	.byte	'DEADD',0
	.word	43108
	.byte	4,4,35,156,160,6,13
	.byte	'DIEAR',0
	.word	43171
	.byte	4,4,35,160,160,6,13
	.byte	'DIETR',0
	.word	43234
	.byte	4,4,35,164,160,6,13
	.byte	'reserved_19028',0
	.word	3825
	.byte	24,4,35,168,160,6,13
	.byte	'DCON0',0
	.word	42921
	.byte	4,4,35,192,160,6,13
	.byte	'reserved_19044',0
	.word	49263
	.byte	188,3,4,35,196,160,6,13
	.byte	'PSTR',0
	.word	46441
	.byte	4,4,35,128,164,6,13
	.byte	'PCON1',0
	.word	45941
	.byte	4,4,35,132,164,6,13
	.byte	'PCON2',0
	.word	46004
	.byte	4,4,35,136,164,6,13
	.byte	'PCON0',0
	.word	45878
	.byte	4,4,35,140,164,6,13
	.byte	'PIEAR',0
	.word	46129
	.byte	4,4,35,144,164,6,13
	.byte	'PIETR',0
	.word	46192
	.byte	4,4,35,148,164,6,13
	.byte	'reserved_19218',0
	.word	49274
	.byte	232,3,4,35,152,164,6,13
	.byte	'COMPAT',0
	.word	42205
	.byte	4,4,35,128,168,6,13
	.byte	'reserved_19404',0
	.word	49285
	.byte	252,23,4,35,132,168,6,13
	.byte	'FPU_TRAP',0
	.word	49296
	.byte	28,4,35,128,192,6,13
	.byte	'reserved_1A01C',0
	.word	49301
	.byte	228,63,4,35,156,192,6,13
	.byte	'DPR',0
	.word	49322
	.byte	144,1,4,35,128,128,7,13
	.byte	'reserved_1C090',0
	.word	49327
	.byte	240,30,4,35,144,129,7,13
	.byte	'CPR',0
	.word	49347
	.byte	80,4,35,128,160,7,13
	.byte	'reserved_1D050',0
	.word	49352
	.byte	176,31,4,35,208,160,7,13
	.byte	'CPXE_0',0
	.word	42484
	.byte	4,4,35,128,192,7,13
	.byte	'CPXE_1',0
	.word	42484
	.byte	4,4,35,132,192,7,13
	.byte	'CPXE_2',0
	.word	42484
	.byte	4,4,35,136,192,7,13
	.byte	'CPXE_3',0
	.word	42484
	.byte	4,4,35,140,192,7,13
	.byte	'DPRE_0',0
	.word	43826
	.byte	4,4,35,144,192,7,13
	.byte	'DPRE_1',0
	.word	43826
	.byte	4,4,35,148,192,7,13
	.byte	'DPRE_2',0
	.word	43826
	.byte	4,4,35,152,192,7,13
	.byte	'DPRE_3',0
	.word	43826
	.byte	4,4,35,156,192,7,13
	.byte	'DPWE_0',0
	.word	44014
	.byte	4,4,35,160,192,7,13
	.byte	'DPWE_1',0
	.word	44014
	.byte	4,4,35,164,192,7,13
	.byte	'DPWE_2',0
	.word	44014
	.byte	4,4,35,168,192,7,13
	.byte	'DPWE_3',0
	.word	44014
	.byte	4,4,35,172,192,7,13
	.byte	'reserved_1E030',0
	.word	49363
	.byte	16,4,35,176,192,7,13
	.byte	'CPXE_4',0
	.word	42484
	.byte	4,4,35,192,192,7,13
	.byte	'CPXE_5',0
	.word	42484
	.byte	4,4,35,196,192,7,13
	.byte	'reserved_1E048',0
	.word	4454
	.byte	8,4,35,200,192,7,13
	.byte	'DPRE_4',0
	.word	43826
	.byte	4,4,35,208,192,7,13
	.byte	'DPRE_5',0
	.word	43826
	.byte	4,4,35,212,192,7,13
	.byte	'reserved_1E058',0
	.word	4454
	.byte	8,4,35,216,192,7,13
	.byte	'DPWE_4',0
	.word	44014
	.byte	4,4,35,224,192,7,13
	.byte	'DPWE_5',0
	.word	44014
	.byte	4,4,35,228,192,7,13
	.byte	'reserved_1E068',0
	.word	49372
	.byte	152,7,4,35,232,192,7,13
	.byte	'TPS',0
	.word	49383
	.byte	16,4,35,128,200,7,13
	.byte	'reserved_1E410',0
	.word	49388
	.byte	48,4,35,144,200,7,13
	.byte	'TPS_EXTIM',0
	.word	49397
	.byte	28,4,35,192,200,7,13
	.byte	'reserved_1E45C',0
	.word	49402
	.byte	164,23,4,35,220,200,7,13
	.byte	'TR',0
	.word	49422
	.byte	64,4,35,128,224,7,13
	.byte	'reserved_1F040',0
	.word	49427
	.byte	192,23,4,35,192,224,7,13
	.byte	'CCTRL',0
	.word	42142
	.byte	4,4,35,128,248,7,13
	.byte	'CCNT',0
	.word	42080
	.byte	4,4,35,132,248,7,13
	.byte	'ICNT',0
	.word	45019
	.byte	4,4,35,136,248,7,13
	.byte	'M1CNT',0
	.word	45567
	.byte	4,4,35,140,248,7,13
	.byte	'M2CNT',0
	.word	45630
	.byte	4,4,35,144,248,7,13
	.byte	'M3CNT',0
	.word	45693
	.byte	4,4,35,148,248,7,13
	.byte	'reserved_1FC18',0
	.word	49180
	.byte	232,1,4,35,152,248,7,13
	.byte	'DBGSR',0
	.word	42794
	.byte	4,4,35,128,250,7,13
	.byte	'reserved_1FD04',0
	.word	2634
	.byte	4,4,35,132,250,7,13
	.byte	'EXEVT',0
	.word	44138
	.byte	4,4,35,136,250,7,13
	.byte	'CREVT',0
	.word	42546
	.byte	4,4,35,140,250,7,13
	.byte	'SWEVT',0
	.word	47265
	.byte	4,4,35,144,250,7,13
	.byte	'reserved_1FD14',0
	.word	49438
	.byte	28,4,35,148,250,7,13
	.byte	'TRIG_ACC',0
	.word	48119
	.byte	4,4,35,176,250,7,13
	.byte	'reserved_1FD34',0
	.word	4794
	.byte	12,4,35,180,250,7,13
	.byte	'DMS',0
	.word	43765
	.byte	4,4,35,192,250,7,13
	.byte	'DCX',0
	.word	43047
	.byte	4,4,35,196,250,7,13
	.byte	'DBGTCR',0
	.word	42857
	.byte	4,4,35,200,250,7,13
	.byte	'reserved_1FD4C',0
	.word	49447
	.byte	180,1,4,35,204,250,7,13
	.byte	'PCXI',0
	.word	46067
	.byte	4,4,35,128,252,7,13
	.byte	'PSW',0
	.word	46503
	.byte	4,4,35,132,252,7,13
	.byte	'PC',0
	.word	45818
	.byte	4,4,35,136,252,7,13
	.byte	'reserved_1FE0C',0
	.word	4454
	.byte	8,4,35,140,252,7,13
	.byte	'SYSCON',0
	.word	47328
	.byte	4,4,35,148,252,7,13
	.byte	'CPU_ID',0
	.word	42420
	.byte	4,4,35,152,252,7,13
	.byte	'CORE_ID',0
	.word	18653
	.byte	4,4,35,156,252,7,13
	.byte	'BIV',0
	.word	41759
	.byte	4,4,35,160,252,7,13
	.byte	'BTV',0
	.word	42019
	.byte	4,4,35,164,252,7,13
	.byte	'ISP',0
	.word	45102
	.byte	4,4,35,168,252,7,13
	.byte	'ICR',0
	.word	18438
	.byte	4,4,35,172,252,7,13
	.byte	'reserved_1FE30',0
	.word	4454
	.byte	8,4,35,176,252,7,13
	.byte	'FCX',0
	.word	44201
	.byte	4,4,35,184,252,7,13
	.byte	'LCX',0
	.word	45354
	.byte	4,4,35,188,252,7,13
	.byte	'reserved_1FE40',0
	.word	49363
	.byte	16,4,35,192,252,7,13
	.byte	'CUS_ID',0
	.word	42609
	.byte	4,4,35,208,252,7,13
	.byte	'reserved_1FE54',0
	.word	49458
	.byte	172,1,4,35,212,252,7,13
	.byte	'D',0
	.word	49469
	.byte	64,4,35,128,254,7,13
	.byte	'reserved_1FF40',0
	.word	49478
	.byte	64,4,35,192,254,7,13
	.byte	'A',0
	.word	49487
	.byte	64,4,35,128,255,7,13
	.byte	'reserved_1FFC0',0
	.word	49478
	.byte	64,4,35,192,255,7,0,14
	.word	49496
	.byte	20
	.byte	'Ifx_CPU',0,21,210,19,3
	.word	54594
	.byte	20
	.byte	'IfxCpu_Id',0,9,133,1,3
	.word	9394
	.byte	20
	.byte	'IfxCpu_ResourceCpu',0,9,170,1,3
	.word	9532
	.byte	20
	.byte	'Ifx_SRC_SRCR_Bits',0,11,85,3
	.word	10177
	.byte	20
	.byte	'Ifx_SRC_SRCR',0,11,98,3
	.word	10467
	.byte	10
	.byte	'_Ifx_SRC_CPU_CPU',0,11,110,25,4,13
	.byte	'SB',0
	.word	10467
	.byte	4,2,35,0,0,14
	.word	54710
	.byte	20
	.byte	'Ifx_SRC_CPU_CPU',0,11,113,3
	.word	54745
	.byte	15,24
	.word	54710
	.byte	16,5,0,14
	.word	54774
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,11,128,1,25,24,13
	.byte	'CPU',0
	.word	54783
	.byte	24,2,35,0,0,14
	.word	54788
	.byte	20
	.byte	'Ifx_SRC_CPU',0,11,131,1,3
	.word	54821
	.byte	10
	.byte	'_Ifx_SRC_AGBT_AGBT',0,11,146,1,25,4,13
	.byte	'SR',0
	.word	10467
	.byte	4,2,35,0,0,14
	.word	54847
	.byte	20
	.byte	'Ifx_SRC_AGBT_AGBT',0,11,149,1,3
	.word	54885
	.byte	15,4
	.word	54847
	.byte	16,0,0,14
	.word	54917
	.byte	10
	.byte	'_Ifx_SRC_AGBT',0,11,164,1,25,4,13
	.byte	'AGBT',0
	.word	54926
	.byte	4,2,35,0,0,14
	.word	54931
	.byte	20
	.byte	'Ifx_SRC_AGBT',0,11,167,1,3
	.word	54966
	.byte	10
	.byte	'_Ifx_SRC_XBAR_XBAR',0,11,182,1,25,4,13
	.byte	'SR',0
	.word	10467
	.byte	4,2,35,0,0,14
	.word	54993
	.byte	20
	.byte	'Ifx_SRC_XBAR_XBAR',0,11,185,1,3
	.word	55031
	.byte	15,12
	.word	54993
	.byte	16,2,0,14
	.word	55063
	.byte	10
	.byte	'_Ifx_SRC_XBAR',0,11,200,1,25,12,13
	.byte	'XBAR',0
	.word	55072
	.byte	12,2,35,0,0,14
	.word	55077
	.byte	20
	.byte	'Ifx_SRC_XBAR',0,11,203,1,3
	.word	55112
	.byte	15,8
	.word	10467
	.byte	16,1,0,10
	.byte	'_Ifx_SRC_CERBERUS_CERBERUS',0,11,218,1,25,8,13
	.byte	'SR',0
	.word	55139
	.byte	8,2,35,0,0,14
	.word	55148
	.byte	20
	.byte	'Ifx_SRC_CERBERUS_CERBERUS',0,11,221,1,3
	.word	55194
	.byte	14
	.word	55148
	.byte	10
	.byte	'_Ifx_SRC_CERBERUS',0,11,236,1,25,8,13
	.byte	'CERBERUS',0
	.word	55234
	.byte	8,2,35,0,0,14
	.word	55239
	.byte	20
	.byte	'Ifx_SRC_CERBERUS',0,11,239,1,3
	.word	55282
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN_ASCLIN',0,11,254,1,25,12,13
	.byte	'TX',0
	.word	10467
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	10467
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	10467
	.byte	4,2,35,8,0,14
	.word	55313
	.byte	20
	.byte	'Ifx_SRC_ASCLIN_ASCLIN',0,11,131,2,3
	.word	55380
	.byte	15,144,1
	.word	55313
	.byte	16,11,0,14
	.word	55416
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,11,146,2,25,144,1,13
	.byte	'ASCLIN',0
	.word	55426
	.byte	144,1,2,35,0,0,14
	.word	55431
	.byte	20
	.byte	'Ifx_SRC_ASCLIN',0,11,149,2,3
	.word	55472
	.byte	10
	.byte	'_Ifx_SRC_QSPI_QSPI',0,11,164,2,25,20,13
	.byte	'TX',0
	.word	10467
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	10467
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	10467
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	10467
	.byte	4,2,35,12,13
	.byte	'U',0
	.word	10467
	.byte	4,2,35,16,0,14
	.word	55501
	.byte	20
	.byte	'Ifx_SRC_QSPI_QSPI',0,11,171,2,3
	.word	55587
	.byte	15,120
	.word	55501
	.byte	16,5,0,14
	.word	55619
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,11,186,2,25,120,13
	.byte	'QSPI',0
	.word	55628
	.byte	120,2,35,0,0,14
	.word	55633
	.byte	20
	.byte	'Ifx_SRC_QSPI',0,11,189,2,3
	.word	55668
	.byte	10
	.byte	'_Ifx_SRC_HSCT_HSCT',0,11,204,2,25,4,13
	.byte	'SR',0
	.word	10467
	.byte	4,2,35,0,0,14
	.word	55695
	.byte	20
	.byte	'Ifx_SRC_HSCT_HSCT',0,11,207,2,3
	.word	55733
	.byte	15,8
	.word	55695
	.byte	16,1,0,14
	.word	55765
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,11,222,2,25,8,13
	.byte	'HSCT',0
	.word	55774
	.byte	8,2,35,0,0,14
	.word	55779
	.byte	20
	.byte	'Ifx_SRC_HSCT',0,11,225,2,3
	.word	55814
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL_CH',0,11,240,2,25,16,13
	.byte	'COK',0
	.word	10467
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	10467
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	10467
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	10467
	.byte	4,2,35,12,0,14
	.word	55841
	.byte	20
	.byte	'Ifx_SRC_HSSL_HSSL_CH',0,11,246,2,3
	.word	55922
	.byte	15,64
	.word	55841
	.byte	16,3,0,14
	.word	55957
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL',0,11,133,3,25,68,13
	.byte	'CH',0
	.word	55966
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	10467
	.byte	4,2,35,64,0,14
	.word	55971
	.byte	20
	.byte	'Ifx_SRC_HSSL_HSSL',0,11,137,3,3
	.word	56022
	.byte	15,136,1
	.word	55971
	.byte	16,1,0,14
	.word	56054
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,11,152,3,25,136,1,13
	.byte	'HSSL',0
	.word	56064
	.byte	136,1,2,35,0,0,14
	.word	56069
	.byte	20
	.byte	'Ifx_SRC_HSSL',0,11,155,3,3
	.word	56106
	.byte	10
	.byte	'_Ifx_SRC_I2C_I2C',0,11,170,3,25,16,13
	.byte	'DTR',0
	.word	10467
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	10467
	.byte	4,2,35,4,13
	.byte	'P',0
	.word	10467
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2634
	.byte	4,2,35,12,0,14
	.word	56133
	.byte	20
	.byte	'Ifx_SRC_I2C_I2C',0,11,176,3,3
	.word	56214
	.byte	15,32
	.word	56133
	.byte	16,1,0,14
	.word	56244
	.byte	10
	.byte	'_Ifx_SRC_I2C',0,11,191,3,25,32,13
	.byte	'I2C',0
	.word	56253
	.byte	32,2,35,0,0,14
	.word	56258
	.byte	20
	.byte	'Ifx_SRC_I2C',0,11,194,3,3
	.word	56291
	.byte	10
	.byte	'_Ifx_SRC_SENT_SENT',0,11,209,3,25,4,13
	.byte	'SR',0
	.word	10467
	.byte	4,2,35,0,0,14
	.word	56317
	.byte	20
	.byte	'Ifx_SRC_SENT_SENT',0,11,212,3,3
	.word	56355
	.byte	15,40
	.word	56317
	.byte	16,9,0,14
	.word	56387
	.byte	10
	.byte	'_Ifx_SRC_SENT',0,11,227,3,25,40,13
	.byte	'SENT',0
	.word	56396
	.byte	40,2,35,0,0,14
	.word	56401
	.byte	20
	.byte	'Ifx_SRC_SENT',0,11,230,3,3
	.word	56436
	.byte	15,20
	.word	10467
	.byte	16,4,0,10
	.byte	'_Ifx_SRC_MSC_MSC',0,11,245,3,25,20,13
	.byte	'SR',0
	.word	56463
	.byte	20,2,35,0,0,14
	.word	56472
	.byte	20
	.byte	'Ifx_SRC_MSC_MSC',0,11,248,3,3
	.word	56508
	.byte	15,80
	.word	56472
	.byte	16,3,0,14
	.word	56538
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,11,135,4,25,80,13
	.byte	'MSC',0
	.word	56547
	.byte	80,2,35,0,0,14
	.word	56552
	.byte	20
	.byte	'Ifx_SRC_MSC',0,11,138,4,3
	.word	56585
	.byte	15,16
	.word	10467
	.byte	16,3,0,10
	.byte	'_Ifx_SRC_CCU6_CCU',0,11,153,4,25,16,13
	.byte	'SR',0
	.word	56611
	.byte	16,2,35,0,0,14
	.word	56620
	.byte	20
	.byte	'Ifx_SRC_CCU6_CCU',0,11,156,4,3
	.word	56657
	.byte	15,32
	.word	56620
	.byte	16,1,0,14
	.word	56688
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,11,171,4,25,32,13
	.byte	'CCU',0
	.word	56697
	.byte	32,2,35,0,0,14
	.word	56702
	.byte	20
	.byte	'Ifx_SRC_CCU6',0,11,174,4,3
	.word	56736
	.byte	10
	.byte	'_Ifx_SRC_GPT12_GPT12',0,11,189,4,25,24,13
	.byte	'CIRQ',0
	.word	10467
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	10467
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	10467
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	10467
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	10467
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	10467
	.byte	4,2,35,20,0,14
	.word	56763
	.byte	20
	.byte	'Ifx_SRC_GPT12_GPT12',0,11,197,4,3
	.word	56865
	.byte	15,24
	.word	56763
	.byte	16,0,0,14
	.word	56899
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,11,212,4,25,24,13
	.byte	'GPT12',0
	.word	56908
	.byte	24,2,35,0,0,14
	.word	56913
	.byte	20
	.byte	'Ifx_SRC_GPT12',0,11,215,4,3
	.word	56950
	.byte	10
	.byte	'_Ifx_SRC_STM_STM',0,11,230,4,25,8,13
	.byte	'SR',0
	.word	55139
	.byte	8,2,35,0,0,14
	.word	56978
	.byte	20
	.byte	'Ifx_SRC_STM_STM',0,11,233,4,3
	.word	57014
	.byte	15,48
	.word	56978
	.byte	16,5,0,14
	.word	57044
	.byte	10
	.byte	'_Ifx_SRC_STM',0,11,248,4,25,48,13
	.byte	'STM',0
	.word	57053
	.byte	48,2,35,0,0,14
	.word	57058
	.byte	20
	.byte	'Ifx_SRC_STM',0,11,251,4,3
	.word	57091
	.byte	10
	.byte	'_Ifx_SRC_FCE_FCE0',0,11,138,5,25,4,13
	.byte	'SR',0
	.word	10467
	.byte	4,2,35,0,0,14
	.word	57117
	.byte	20
	.byte	'Ifx_SRC_FCE_FCE0',0,11,141,5,3
	.word	57154
	.byte	14
	.word	57117
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,11,156,5,25,4,13
	.byte	'FCE0',0
	.word	57185
	.byte	4,2,35,0,0,14
	.word	57190
	.byte	20
	.byte	'Ifx_SRC_FCE',0,11,159,5,3
	.word	57224
	.byte	15,32
	.word	613
	.byte	16,31,0,15,128,4
	.word	10467
	.byte	16,127,0,10
	.byte	'_Ifx_SRC_DMA_DMA',0,11,174,5,25,176,4,13
	.byte	'ERR',0
	.word	56611
	.byte	16,2,35,0,13
	.byte	'reserved_10',0
	.word	57250
	.byte	32,2,35,16,13
	.byte	'CH',0
	.word	57259
	.byte	128,4,2,35,48,0,14
	.word	57269
	.byte	20
	.byte	'Ifx_SRC_DMA_DMA',0,11,179,5,3
	.word	57341
	.byte	15,176,4
	.word	57269
	.byte	16,0,0,14
	.word	57371
	.byte	10
	.byte	'_Ifx_SRC_DMA',0,11,194,5,25,176,4,13
	.byte	'DMA',0
	.word	57381
	.byte	176,4,2,35,0,0,14
	.word	57386
	.byte	20
	.byte	'Ifx_SRC_DMA',0,11,197,5,3
	.word	57421
	.byte	10
	.byte	'_Ifx_SRC_SDMMC_SDMMC',0,11,212,5,25,8,13
	.byte	'ERR',0
	.word	10467
	.byte	4,2,35,0,13
	.byte	'DMA',0
	.word	10467
	.byte	4,2,35,4,0,14
	.word	57447
	.byte	20
	.byte	'Ifx_SRC_SDMMC_SDMMC',0,11,216,5,3
	.word	57501
	.byte	15,8
	.word	57447
	.byte	16,0,0,14
	.word	57535
	.byte	10
	.byte	'_Ifx_SRC_SDMMC',0,11,231,5,25,8,13
	.byte	'SDMMC',0
	.word	57544
	.byte	8,2,35,0,0,14
	.word	57549
	.byte	20
	.byte	'Ifx_SRC_SDMMC',0,11,234,5,3
	.word	57586
	.byte	15,40
	.word	10467
	.byte	16,9,0,10
	.byte	'_Ifx_SRC_GETH_GETH',0,11,249,5,25,40,13
	.byte	'SR',0
	.word	57614
	.byte	40,2,35,0,0,14
	.word	57623
	.byte	20
	.byte	'Ifx_SRC_GETH_GETH',0,11,252,5,3
	.word	57661
	.byte	15,40
	.word	57623
	.byte	16,0,0,14
	.word	57693
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,11,139,6,25,40,13
	.byte	'GETH',0
	.word	57702
	.byte	40,2,35,0,0,14
	.word	57707
	.byte	20
	.byte	'Ifx_SRC_GETH',0,11,142,6,3
	.word	57742
	.byte	15,64
	.word	10467
	.byte	16,15,0,10
	.byte	'_Ifx_SRC_CAN_CAN',0,11,157,6,25,64,13
	.byte	'INT',0
	.word	57769
	.byte	64,2,35,0,0,14
	.word	57778
	.byte	20
	.byte	'Ifx_SRC_CAN_CAN',0,11,160,6,3
	.word	57815
	.byte	15,192,1
	.word	57778
	.byte	16,2,0,14
	.word	57845
	.byte	10
	.byte	'_Ifx_SRC_CAN',0,11,175,6,25,192,1,13
	.byte	'CAN',0
	.word	57855
	.byte	192,1,2,35,0,0,14
	.word	57860
	.byte	20
	.byte	'Ifx_SRC_CAN',0,11,178,6,3
	.word	57895
	.byte	10
	.byte	'_Ifx_SRC_VADC_G',0,11,193,6,25,16,13
	.byte	'SR0',0
	.word	10467
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	10467
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	10467
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	10467
	.byte	4,2,35,12,0,14
	.word	57921
	.byte	20
	.byte	'Ifx_SRC_VADC_G',0,11,199,6,3
	.word	57996
	.byte	10
	.byte	'_Ifx_SRC_VADC_FC',0,11,214,6,25,4,13
	.byte	'SR0',0
	.word	10467
	.byte	4,2,35,0,0,14
	.word	58025
	.byte	20
	.byte	'Ifx_SRC_VADC_FC',0,11,217,6,3
	.word	58062
	.byte	15,192,1
	.word	57921
	.byte	16,11,0,14
	.word	58092
	.byte	15,32
	.word	58025
	.byte	16,7,0,14
	.word	58107
	.byte	15,32
	.word	57921
	.byte	16,1,0,14
	.word	58121
	.byte	10
	.byte	'_Ifx_SRC_VADC',0,11,233,6,25,128,2,13
	.byte	'G',0
	.word	58102
	.byte	192,1,2,35,0,13
	.byte	'FC',0
	.word	58116
	.byte	32,3,35,192,1,13
	.byte	'CG',0
	.word	58130
	.byte	32,3,35,224,1,0,14
	.word	58135
	.byte	20
	.byte	'Ifx_SRC_VADC',0,11,238,6,3
	.word	58195
	.byte	10
	.byte	'_Ifx_SRC_DSADC_DSADC',0,11,253,6,25,8,13
	.byte	'SRM',0
	.word	10467
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	10467
	.byte	4,2,35,4,0,14
	.word	58222
	.byte	20
	.byte	'Ifx_SRC_DSADC_DSADC',0,11,129,7,3
	.word	58276
	.byte	15,112
	.word	58222
	.byte	16,13,0,14
	.word	58310
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,11,144,7,25,112,13
	.byte	'DSADC',0
	.word	58319
	.byte	112,2,35,0,0,14
	.word	58324
	.byte	20
	.byte	'Ifx_SRC_DSADC',0,11,147,7,3
	.word	58361
	.byte	10
	.byte	'_Ifx_SRC_ERAY_ERAY',0,11,162,7,25,48,13
	.byte	'INT0',0
	.word	10467
	.byte	4,2,35,0,13
	.byte	'INT1',0
	.word	10467
	.byte	4,2,35,4,13
	.byte	'TINT0',0
	.word	10467
	.byte	4,2,35,8,13
	.byte	'TINT1',0
	.word	10467
	.byte	4,2,35,12,13
	.byte	'NDAT0',0
	.word	10467
	.byte	4,2,35,16,13
	.byte	'NDAT1',0
	.word	10467
	.byte	4,2,35,20,13
	.byte	'MBSC0',0
	.word	10467
	.byte	4,2,35,24,13
	.byte	'MBSC1',0
	.word	10467
	.byte	4,2,35,28,13
	.byte	'OBUSY',0
	.word	10467
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	10467
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	4454
	.byte	8,2,35,40,0,14
	.word	58389
	.byte	20
	.byte	'Ifx_SRC_ERAY_ERAY',0,11,175,7,3
	.word	58584
	.byte	15,96
	.word	58389
	.byte	16,1,0,14
	.word	58616
	.byte	10
	.byte	'_Ifx_SRC_ERAY',0,11,190,7,25,96,13
	.byte	'ERAY',0
	.word	58625
	.byte	96,2,35,0,0,14
	.word	58630
	.byte	20
	.byte	'Ifx_SRC_ERAY',0,11,193,7,3
	.word	58665
	.byte	10
	.byte	'_Ifx_SRC_HSM_HSM',0,11,208,7,25,8,13
	.byte	'HSM',0
	.word	55139
	.byte	8,2,35,0,0,14
	.word	58692
	.byte	20
	.byte	'Ifx_SRC_HSM_HSM',0,11,211,7,3
	.word	58729
	.byte	15,8
	.word	58692
	.byte	16,0,0,14
	.word	58759
	.byte	10
	.byte	'_Ifx_SRC_HSM',0,11,226,7,25,8,13
	.byte	'HSM',0
	.word	58768
	.byte	8,2,35,0,0,14
	.word	58773
	.byte	20
	.byte	'Ifx_SRC_HSM',0,11,229,7,3
	.word	58806
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,11,244,7,25,16,13
	.byte	'SCUERU',0
	.word	56611
	.byte	16,2,35,0,0,14
	.word	58832
	.byte	20
	.byte	'Ifx_SRC_SCU',0,11,247,7,3
	.word	58868
	.byte	10
	.byte	'_Ifx_SRC_PMS_PMS',0,11,134,8,25,4,13
	.byte	'SR',0
	.word	10467
	.byte	4,2,35,0,0,14
	.word	58894
	.byte	20
	.byte	'Ifx_SRC_PMS_PMS',0,11,137,8,3
	.word	58930
	.byte	15,16
	.word	58894
	.byte	16,3,0,14
	.word	58960
	.byte	10
	.byte	'_Ifx_SRC_PMS',0,11,152,8,25,16,13
	.byte	'PMS',0
	.word	58969
	.byte	16,2,35,0,0,14
	.word	58974
	.byte	20
	.byte	'Ifx_SRC_PMS',0,11,155,8,3
	.word	59007
	.byte	15,12
	.word	10467
	.byte	16,2,0,10
	.byte	'_Ifx_SRC_SMU_SMU',0,11,170,8,25,12,13
	.byte	'SR',0
	.word	59033
	.byte	12,2,35,0,0,14
	.word	59042
	.byte	20
	.byte	'Ifx_SRC_SMU_SMU',0,11,173,8,3
	.word	59078
	.byte	15,12
	.word	59042
	.byte	16,0,0,14
	.word	59108
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,11,188,8,25,12,13
	.byte	'SMU',0
	.word	59117
	.byte	12,2,35,0,0,14
	.word	59122
	.byte	20
	.byte	'Ifx_SRC_SMU',0,11,191,8,3
	.word	59155
	.byte	15,32
	.word	10467
	.byte	16,7,0,10
	.byte	'_Ifx_SRC_PSI5_PSI5',0,11,206,8,25,32,13
	.byte	'SR',0
	.word	59181
	.byte	32,2,35,0,0,14
	.word	59190
	.byte	20
	.byte	'Ifx_SRC_PSI5_PSI5',0,11,209,8,3
	.word	59228
	.byte	15,32
	.word	59190
	.byte	16,0,0,14
	.word	59260
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,11,224,8,25,32,13
	.byte	'PSI5',0
	.word	59269
	.byte	32,2,35,0,0,14
	.word	59274
	.byte	20
	.byte	'Ifx_SRC_PSI5',0,11,227,8,3
	.word	59309
	.byte	10
	.byte	'_Ifx_SRC_HSPDM_HSPDM0',0,11,242,8,25,12,13
	.byte	'BFR',0
	.word	10467
	.byte	4,2,35,0,13
	.byte	'RAMP',0
	.word	10467
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	10467
	.byte	4,2,35,8,0,14
	.word	59336
	.byte	20
	.byte	'Ifx_SRC_HSPDM_HSPDM0',0,11,247,8,3
	.word	59405
	.byte	14
	.word	59336
	.byte	10
	.byte	'_Ifx_SRC_HSPDM',0,11,134,9,25,12,13
	.byte	'HSPDM0',0
	.word	59440
	.byte	12,2,35,0,0,14
	.word	59445
	.byte	20
	.byte	'Ifx_SRC_HSPDM',0,11,137,9,3
	.word	59483
	.byte	10
	.byte	'_Ifx_SRC_DAM_DAM',0,11,152,9,25,24,13
	.byte	'LI0',0
	.word	10467
	.byte	4,2,35,0,13
	.byte	'RI0',0
	.word	10467
	.byte	4,2,35,4,13
	.byte	'LI1',0
	.word	10467
	.byte	4,2,35,8,13
	.byte	'RI1',0
	.word	10467
	.byte	4,2,35,12,13
	.byte	'DR',0
	.word	10467
	.byte	4,2,35,16,13
	.byte	'ERR',0
	.word	10467
	.byte	4,2,35,20,0,14
	.word	59511
	.byte	20
	.byte	'Ifx_SRC_DAM_DAM',0,11,160,9,3
	.word	59612
	.byte	15,48
	.word	59511
	.byte	16,1,0,14
	.word	59642
	.byte	10
	.byte	'_Ifx_SRC_DAM',0,11,175,9,25,48,13
	.byte	'DAM',0
	.word	59651
	.byte	48,2,35,0,0,14
	.word	59656
	.byte	20
	.byte	'Ifx_SRC_DAM',0,11,178,9,3
	.word	59689
	.byte	10
	.byte	'_Ifx_SRC_PSI5S_PSI5S',0,11,193,9,25,32,13
	.byte	'SR',0
	.word	59181
	.byte	32,2,35,0,0,14
	.word	59715
	.byte	20
	.byte	'Ifx_SRC_PSI5S_PSI5S',0,11,196,9,3
	.word	59755
	.byte	15,32
	.word	59715
	.byte	16,0,0,14
	.word	59789
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,11,211,9,25,32,13
	.byte	'PSI5S',0
	.word	59798
	.byte	32,2,35,0,0,14
	.word	59803
	.byte	20
	.byte	'Ifx_SRC_PSI5S',0,11,214,9,3
	.word	59840
	.byte	10
	.byte	'_Ifx_SRC_RIF_RIF',0,11,229,9,25,8,13
	.byte	'ERR',0
	.word	10467
	.byte	4,2,35,0,13
	.byte	'INT',0
	.word	10467
	.byte	4,2,35,4,0,14
	.word	59868
	.byte	20
	.byte	'Ifx_SRC_RIF_RIF',0,11,233,9,3
	.word	59918
	.byte	15,16
	.word	59868
	.byte	16,1,0,14
	.word	59948
	.byte	10
	.byte	'_Ifx_SRC_RIF',0,11,248,9,25,16,13
	.byte	'RIF',0
	.word	59957
	.byte	16,2,35,0,0,14
	.word	59962
	.byte	20
	.byte	'Ifx_SRC_RIF',0,11,251,9,3
	.word	59995
	.byte	10
	.byte	'_Ifx_SRC_SPU_SPU',0,11,138,10,25,8,13
	.byte	'INT',0
	.word	10467
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	10467
	.byte	4,2,35,4,0,14
	.word	60021
	.byte	20
	.byte	'Ifx_SRC_SPU_SPU',0,11,142,10,3
	.word	60071
	.byte	15,16
	.word	60021
	.byte	16,1,0,14
	.word	60101
	.byte	10
	.byte	'_Ifx_SRC_SPU',0,11,157,10,25,16,13
	.byte	'SPU',0
	.word	60110
	.byte	16,2,35,0,0,14
	.word	60115
	.byte	20
	.byte	'Ifx_SRC_SPU',0,11,160,10,3
	.word	60148
	.byte	10
	.byte	'_Ifx_SRC_GPSR_GPSR',0,11,175,10,25,32,13
	.byte	'SR',0
	.word	59181
	.byte	32,2,35,0,0,14
	.word	60174
	.byte	20
	.byte	'Ifx_SRC_GPSR_GPSR',0,11,178,10,3
	.word	60212
	.byte	15,192,1
	.word	60174
	.byte	16,5,0,14
	.word	60244
	.byte	10
	.byte	'_Ifx_SRC_GPSR',0,11,193,10,25,192,1,13
	.byte	'GPSR',0
	.word	60254
	.byte	192,1,2,35,0,0,14
	.word	60259
	.byte	20
	.byte	'Ifx_SRC_GPSR',0,11,196,10,3
	.word	60296
	.byte	10
	.byte	'_Ifx_SCU_ACCEN00_Bits',0,4,68,16,4,11
	.byte	'EN0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_ACCEN00_Bits',0,4,102,3
	.word	60323
	.byte	10
	.byte	'_Ifx_SCU_ACCEN01_Bits',0,4,105,16,4,11
	.byte	'reserved_0',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_SCU_ACCEN01_Bits',0,4,108,3
	.word	60882
	.byte	10
	.byte	'_Ifx_SCU_ACCEN10_Bits',0,4,111,16,4,11
	.byte	'EN0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_ACCEN10_Bits',0,4,145,1,3
	.word	60961
	.byte	10
	.byte	'_Ifx_SCU_ACCEN11_Bits',0,4,148,1,16,4,11
	.byte	'reserved_0',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_SCU_ACCEN11_Bits',0,4,151,1,3
	.word	61521
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,4,154,1,16,4,11
	.byte	'STM0DIS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'STM3DIS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'STM4DIS',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'STM5DIS',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	438
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,4,164,1,3
	.word	61602
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,4,167,1,16,4,11
	.byte	'STMDIV',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	613
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	613
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	613
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	613
	.byte	4,4,2,35,2,11
	.byte	'BBBDIV',0,1
	.word	613
	.byte	4,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	613
	.byte	2,6,2,35,3,11
	.byte	'FSI2DIV',0,1
	.word	613
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	613
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_CCUCON0_Bits',0,4,181,1,3
	.word	61819
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,4,184,1,16,4,11
	.byte	'MCANDIV',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'CLKSELMCAN',0,1
	.word	613
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'PLL1DIVDIS',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'I2CDIV',0,1
	.word	613
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	613
	.byte	4,0,2,35,1,11
	.byte	'MSCDIV',0,1
	.word	613
	.byte	4,4,2,35,2,11
	.byte	'CLKSELMSC',0,1
	.word	613
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	613
	.byte	2,0,2,35,2,11
	.byte	'QSPIDIV',0,1
	.word	613
	.byte	4,4,2,35,3,11
	.byte	'CLKSELQSPI',0,1
	.word	613
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_CCUCON1_Bits',0,4,199,1,3
	.word	62092
	.byte	10
	.byte	'_Ifx_SCU_CCUCON10_Bits',0,4,202,1,16,4,11
	.byte	'CPU4DIV',0,1
	.word	613
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	438
	.byte	26,0,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON10_Bits',0,4,206,1,3
	.word	62418
	.byte	10
	.byte	'_Ifx_SCU_CCUCON11_Bits',0,4,209,1,16,4,11
	.byte	'CPU5DIV',0,1
	.word	613
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	438
	.byte	26,0,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON11_Bits',0,4,213,1,3
	.word	62520
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,4,216,1,16,4,11
	.byte	'ASCLINFDIV',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	4,0,2,35,0,11
	.byte	'ASCLINSDIV',0,1
	.word	613
	.byte	4,4,2,35,1,11
	.byte	'CLKSELASCLINS',0,1
	.word	613
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	438
	.byte	10,8,2,35,0,11
	.byte	'EBUPERON',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'ERAYPERON',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'HSPDMPERON',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	613
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_CCUCON2_Bits',0,4,228,1,3
	.word	62622
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,4,231,1,16,4,11
	.byte	'PLL0MONEN',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'PLL1MONEN',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'PLL2MONEN',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'SPBMONEN',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'BACKMONEN',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	613
	.byte	3,0,2,35,0,11
	.byte	'PLL0MONTST',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'PLL1MONTST',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'PLL2MONTST',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'SPBMONTST',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'BACKMONTST',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	438
	.byte	11,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	6,2,2,35,3,11
	.byte	'UP',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_CCUCON3_Bits',0,4,248,1,3
	.word	62896
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,4,251,1,16,4,11
	.byte	'LOTHR',0,2
	.word	630
	.byte	12,4,2,35,0,11
	.byte	'UPTHR',0,4
	.word	438
	.byte	12,8,2,35,0,11
	.byte	'MONEN',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'MONTST',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	613
	.byte	4,2,2,35,3,11
	.byte	'UP',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_CCUCON4_Bits',0,4,132,2,3
	.word	63265
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,4,135,2,16,4,11
	.byte	'GETHDIV',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'MCANHDIV',0,1
	.word	613
	.byte	4,0,2,35,0,11
	.byte	'ADASDIV',0,1
	.word	613
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	438
	.byte	18,2,2,35,0,11
	.byte	'UP',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_CCUCON5_Bits',0,4,143,2,3
	.word	63445
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,4,146,2,16,4,11
	.byte	'CPU0DIV',0,1
	.word	613
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	438
	.byte	26,0,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON6_Bits',0,4,150,2,3
	.word	63614
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,4,153,2,16,4,11
	.byte	'CPU1DIV',0,1
	.word	613
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	438
	.byte	26,0,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON7_Bits',0,4,157,2,3
	.word	63714
	.byte	10
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,4,160,2,16,4,11
	.byte	'CPU2DIV',0,1
	.word	613
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	438
	.byte	26,0,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON8_Bits',0,4,164,2,3
	.word	63814
	.byte	10
	.byte	'_Ifx_SCU_CCUCON9_Bits',0,4,167,2,16,4,11
	.byte	'CPU3DIV',0,1
	.word	613
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	438
	.byte	26,0,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON9_Bits',0,4,171,2,3
	.word	63914
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,4,174,2,16,4,11
	.byte	'CHREV',0,1
	.word	613
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'CHPK',0,1
	.word	613
	.byte	4,4,2,35,1,11
	.byte	'CHID',0,1
	.word	613
	.byte	4,0,2,35,1,11
	.byte	'EEA',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	613
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	613
	.byte	4,4,2,35,3,11
	.byte	'VART',0,1
	.word	613
	.byte	3,1,2,35,3,11
	.byte	'SEC',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_CHIPID_Bits',0,4,185,2,3
	.word	64014
	.byte	10
	.byte	'_Ifx_SCU_DTSCLIM_Bits',0,4,188,2,16,4,11
	.byte	'LOWER',0,2
	.word	630
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'BGPOK',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'EN',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'LLU',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	630
	.byte	12,4,2,35,2,11
	.byte	'INTEN',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'INT',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_DTSCLIM_Bits',0,4,200,2,3
	.word	64217
	.byte	10
	.byte	'_Ifx_SCU_DTSCSTAT_Bits',0,4,203,2,16,4,11
	.byte	'RESULT',0,2
	.word	630
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	438
	.byte	20,0,2,35,0,0,20
	.byte	'Ifx_SCU_DTSCSTAT_Bits',0,4,207,2,3
	.word	64449
	.byte	10
	.byte	'_Ifx_SCU_EICON0_Bits',0,4,210,2,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	461
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_SCU_EICON0_Bits',0,4,216,2,3
	.word	64551
	.byte	10
	.byte	'_Ifx_SCU_EICON1_Bits',0,4,219,2,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	438
	.byte	26,0,2,35,0,0,20
	.byte	'Ifx_SCU_EICON1_Bits',0,4,228,2,3
	.word	64679
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,4,231,2,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	613
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	613
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	438
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	613
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	613
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_EICR_Bits',0,4,250,2,3
	.word	64868
	.byte	10
	.byte	'_Ifx_SCU_EIFILT_Bits',0,4,253,2,16,4,11
	.byte	'FILRQ0A',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'FILRQ5A',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'FILRQ2A',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'FILRQ3A',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'FILRQ0C',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'FILRQ1C',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'FILRQ3C',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'FILRQ2C',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'FILRQ4A',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'FILRQ6A',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'FILRQ1A',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'FILRQ7A',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'FILRQ6D',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'FILRQ4D',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'FILRQ2B',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'FILRQ3B',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'FILRQ7C',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	613
	.byte	7,0,2,35,2,11
	.byte	'FILTDIV',0,1
	.word	613
	.byte	4,4,2,35,3,11
	.byte	'DEPTH',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_SCU_EIFILT_Bits',0,4,147,3,3
	.word	65232
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,4,150,3,16,4,11
	.byte	'INTF0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	438
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_SCU_EIFR_Bits',0,4,161,3,3
	.word	65671
	.byte	10
	.byte	'_Ifx_SCU_EISR_Bits',0,4,164,3,16,4,11
	.byte	'AE',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	630
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_EISR_Bits',0,4,174,3,3
	.word	65882
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,4,177,3,16,4,11
	.byte	'POL',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	630
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	630
	.byte	14,0,2,35,2,0,20
	.byte	'Ifx_SCU_EMSR_Bits',0,4,187,3,3
	.word	66058
	.byte	10
	.byte	'_Ifx_SCU_EMSSW_Bits',0,4,190,3,16,4,11
	.byte	'reserved_0',0,4
	.word	438
	.byte	24,8,2,35,0,11
	.byte	'EMSFM',0,1
	.word	613
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	613
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_SCU_EMSSW_Bits',0,4,196,3,3
	.word	66252
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,4,199,3,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	630
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	438
	.byte	23,0,2,35,0,0,20
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,4,204,3,3
	.word	66387
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,4,207,3,16,4,11
	.byte	'ARI',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	438
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_SCU_ESROCFG_Bits',0,4,212,3,3
	.word	66523
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,4,215,3,16,4,11
	.byte	'EN0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	613
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	630
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	613
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	613
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	613
	.byte	8,0,2,35,3,0,20
	.byte	'Ifx_SCU_EXTCON_Bits',0,4,226,3,3
	.word	66634
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,4,229,3,16,4,11
	.byte	'STEP',0,2
	.word	630
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	613
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	613
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	630
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	613
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_FDR_Bits',0,4,237,3,3
	.word	66852
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,4,240,3,16,4,11
	.byte	'FS0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	8,0,2,35,3,0,20
	.byte	'Ifx_SCU_FMR_Bits',0,4,132,4,3
	.word	67015
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,4,135,4,16,4,11
	.byte	'MODREV',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_ID_Bits',0,4,140,4,3
	.word	67351
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,4,143,4,16,4,11
	.byte	'IPEN00',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	613
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	613
	.byte	2,0,2,35,3,0,20
	.byte	'Ifx_SCU_IGCR_Bits',0,4,167,4,3
	.word	67458
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,4,170,4,16,4,11
	.byte	'P0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	438
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_SCU_IN_Bits',0,4,175,4,3
	.word	67910
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,4,178,4,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	613
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	613
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_IOCR_Bits',0,4,185,4,3
	.word	68009
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,4,188,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'LBISTRES',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,4
	.word	438
	.byte	18,12,2,35,0,11
	.byte	'reserved_20',0,2
	.word	630
	.byte	8,4,2,35,2,11
	.byte	'LBISTDONE',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'LBISTERRINJ',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'LBISTREQRED',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,4,198,4,3
	.word	68159
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,4,201,4,16,4,11
	.byte	'SEED',0,4
	.word	438
	.byte	19,13,2,35,0,11
	.byte	'reserved_19',0,1
	.word	613
	.byte	5,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	613
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,4,208,4,3
	.word	68397
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,4,211,4,16,4,11
	.byte	'LENGTH',0,2
	.word	630
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	438
	.byte	20,0,2,35,0,0,20
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,4,215,4,3
	.word	68558
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL3_Bits',0,4,218,4,16,4,11
	.byte	'SIGNATURE',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_SCU_LBISTCTRL3_Bits',0,4,221,4,3
	.word	68664
	.byte	10
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,4,224,4,16,4,11
	.byte	'LS2',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	630
	.byte	14,1,2,35,0,11
	.byte	'LSEN2',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'LS0',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	630
	.byte	14,1,2,35,2,11
	.byte	'LSEN0',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_LCLCON0_Bits',0,4,232,4,3
	.word	68750
	.byte	10
	.byte	'_Ifx_SCU_LCLCON1_Bits',0,4,235,4,16,4,11
	.byte	'LS3',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	630
	.byte	14,1,2,35,0,11
	.byte	'LSEN3',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'LS1',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	630
	.byte	14,1,2,35,2,11
	.byte	'LSEN1',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_LCLCON1_Bits',0,4,243,4,3
	.word	68918
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,4,246,4,16,4,11
	.byte	'LCLT0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'LCLT2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'LCLT3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'LCLT4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'LCLT5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	630
	.byte	10,0,2,35,0,11
	.byte	'PLCLT0',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'PLCLT1',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'PLCLT2',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'PLCLT3',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'PLCLT4',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'PLCLT5',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	630
	.byte	10,0,2,35,2,0,20
	.byte	'Ifx_SCU_LCLTEST_Bits',0,4,134,5,3
	.word	69086
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,4,137,5,16,4,11
	.byte	'DEPT',0,1
	.word	613
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	630
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_MANID_Bits',0,4,142,5,3
	.word	69400
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,4,145,5,16,4,11
	.byte	'PS0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	630
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	630
	.byte	14,0,2,35,2,0,20
	.byte	'Ifx_SCU_OMR_Bits',0,4,153,5,3
	.word	69511
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,4,156,5,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	613
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	613
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'HYSEN',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'HYSCTL',0,1
	.word	613
	.byte	2,4,2,35,1,11
	.byte	'AMPCTL',0,1
	.word	613
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	613
	.byte	2,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	613
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	613
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_SCU_OSCCON_Bits',0,4,177,5,3
	.word	69669
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,4,180,5,16,4,11
	.byte	'P0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	438
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_SCU_OUT_Bits',0,4,185,5,3
	.word	70080
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,4,188,5,16,4,11
	.byte	'CSEL0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'CSEL3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'CSEL4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'CSEL5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	630
	.byte	10,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	613
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	613
	.byte	6,0,2,35,3,0,20
	.byte	'Ifx_SCU_OVCCON_Bits',0,4,204,5,3
	.word	70181
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,4,207,5,16,4,11
	.byte	'OVEN0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'OVEN3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'OVEN4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'OVEN5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	438
	.byte	26,0,2,35,0,0,20
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,4,216,5,3
	.word	70499
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,4,219,5,16,4,11
	.byte	'PDIS0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	438
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_SCU_PDISC_Bits',0,4,224,5,3
	.word	70686
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,4,227,5,16,4,11
	.byte	'PD0',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	613
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	438
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_SCU_PDR_Bits',0,4,234,5,3
	.word	70797
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,4,237,5,16,4,11
	.byte	'PDR0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	438
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_SCU_PDRR_Bits',0,4,248,5,3
	.word	70930
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON0_Bits',0,4,251,5,16,4,11
	.byte	'DIVBY',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	630
	.byte	8,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	613
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	613
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	613
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	613
	.byte	5,0,2,35,3,0,20
	.byte	'Ifx_SCU_PERPLLCON0_Bits',0,4,134,6,3
	.word	71133
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON1_Bits',0,4,137,6,16,4,11
	.byte	'K2DIV',0,1
	.word	613
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	5,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	438
	.byte	21,0,2,35,0,0,20
	.byte	'Ifx_SCU_PERPLLCON1_Bits',0,4,143,6,3
	.word	71373
	.byte	10
	.byte	'_Ifx_SCU_PERPLLSTAT_Bits',0,4,146,6,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'K3RDY',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	438
	.byte	25,0,2,35,0,0,20
	.byte	'Ifx_SCU_PERPLLSTAT_Bits',0,4,156,6,3
	.word	71517
	.byte	10
	.byte	'_Ifx_SCU_PMCSR0_Bits',0,4,159,6,16,4,11
	.byte	'REQSLP',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	438
	.byte	21,0,2,35,0,0,20
	.byte	'Ifx_SCU_PMCSR0_Bits',0,4,165,6,3
	.word	71739
	.byte	10
	.byte	'_Ifx_SCU_PMCSR1_Bits',0,4,168,6,16,4,11
	.byte	'REQSLP',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	438
	.byte	21,0,2,35,0,0,20
	.byte	'Ifx_SCU_PMCSR1_Bits',0,4,174,6,3
	.word	71875
	.byte	10
	.byte	'_Ifx_SCU_PMCSR2_Bits',0,4,177,6,16,4,11
	.byte	'REQSLP',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	438
	.byte	21,0,2,35,0,0,20
	.byte	'Ifx_SCU_PMCSR2_Bits',0,4,183,6,3
	.word	72011
	.byte	10
	.byte	'_Ifx_SCU_PMCSR3_Bits',0,4,186,6,16,4,11
	.byte	'REQSLP',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	438
	.byte	21,0,2,35,0,0,20
	.byte	'Ifx_SCU_PMCSR3_Bits',0,4,192,6,3
	.word	72147
	.byte	10
	.byte	'_Ifx_SCU_PMCSR4_Bits',0,4,195,6,16,4,11
	.byte	'REQSLP',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	438
	.byte	21,0,2,35,0,0,20
	.byte	'Ifx_SCU_PMCSR4_Bits',0,4,201,6,3
	.word	72283
	.byte	10
	.byte	'_Ifx_SCU_PMCSR5_Bits',0,4,204,6,16,4,11
	.byte	'REQSLP',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	438
	.byte	21,0,2,35,0,0,20
	.byte	'Ifx_SCU_PMCSR5_Bits',0,4,210,6,3
	.word	72419
	.byte	10
	.byte	'_Ifx_SCU_PMSTAT0_Bits',0,4,213,6,16,4,11
	.byte	'CPU0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'CPU1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'CPU2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'CPU3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'CPU4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'CPU5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	630
	.byte	10,0,2,35,0,11
	.byte	'CPU0LS',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'CPU1LS',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'CPU2LS',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'CPU3LS',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	630
	.byte	12,0,2,35,2,0,20
	.byte	'Ifx_SCU_PMSTAT0_Bits',0,4,227,6,3
	.word	72555
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,4,230,6,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	438
	.byte	11,8,2,35,0,11
	.byte	'CPUSEL',0,1
	.word	613
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	613
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,4,241,6,3
	.word	72827
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR0_Bits',0,4,244,6,16,4,11
	.byte	'LJTEN',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'LJTOVEN',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'LJTOVIEN',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'LJTSTRT',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'LJTSTP',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'LJTCLR',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	630
	.byte	6,4,2,35,0,11
	.byte	'SDSTEP',0,1
	.word	613
	.byte	4,0,2,35,1,11
	.byte	'VDTEN',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'VDTOVEN',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'VDTOVIEN',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'VDTSTRT',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'VDTSTP',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'VDTCLR',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	630
	.byte	7,3,2,35,2,11
	.byte	'LPSLPEN',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	613
	.byte	2,0,2,35,3,0,20
	.byte	'Ifx_SCU_PMTRCSR0_Bits',0,4,135,7,3
	.word	73072
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR1_Bits',0,4,138,7,16,4,11
	.byte	'LJTCV',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'VDTCV',0,2
	.word	630
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	613
	.byte	6,0,2,35,3,0,20
	.byte	'Ifx_SCU_PMTRCSR1_Bits',0,4,143,7,3
	.word	73460
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR2_Bits',0,4,146,7,16,4,11
	.byte	'LDJMPREQ',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'LJTRUN',0,1
	.word	613
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'LJTOV',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	613
	.byte	3,4,2,35,1,11
	.byte	'LJTOVCLR',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	613
	.byte	3,0,2,35,1,11
	.byte	'LJTCNT',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_PMTRCSR2_Bits',0,4,157,7,3
	.word	73578
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR3_Bits',0,4,160,7,16,4,11
	.byte	'VDROOPREQ',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'VDTRUN',0,1
	.word	613
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'VDTOV',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	613
	.byte	3,4,2,35,1,11
	.byte	'VDTOVCLR',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	613
	.byte	3,0,2,35,1,11
	.byte	'VDTCNT',0,2
	.word	630
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	613
	.byte	6,0,2,35,3,0,20
	.byte	'Ifx_SCU_PMTRCSR3_Bits',0,4,172,7,3
	.word	73821
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,4,175,7,16,4,11
	.byte	'ESR0',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	613
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	613
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	613
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	613
	.byte	2,0,2,35,1,11
	.byte	'STM3',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'STM4',0,1
	.word	613
	.byte	2,4,2,35,2,11
	.byte	'STM5',0,1
	.word	613
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	630
	.byte	10,0,2,35,2,0,20
	.byte	'Ifx_SCU_RSTCON_Bits',0,4,189,7,3
	.word	74088
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,4,192,7,16,4,11
	.byte	'FRTO',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'CSSX',0,2
	.word	630
	.byte	6,3,2,35,0,11
	.byte	'reserved_13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_RSTCON2_Bits',0,4,206,7,3
	.word	74347
	.byte	10
	.byte	'_Ifx_SCU_RSTCON3_Bits',0,4,209,7,16,4,11
	.byte	'reserved_0',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_SCU_RSTCON3_Bits',0,4,212,7,3
	.word	74652
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,4,215,7,16,4,11
	.byte	'ESR0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'STM3',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'STM4',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'STM5',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	613
	.byte	5,0,2,35,1,11
	.byte	'PORST',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'EVRC',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'HSMS',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'HSMA',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'LBPORST',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'LBTERM',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,4,245,7,3
	.word	74733
	.byte	10
	.byte	'_Ifx_SCU_SEICON0_Bits',0,4,248,7,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	461
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_SCU_SEICON0_Bits',0,4,254,7,3
	.word	75282
	.byte	10
	.byte	'_Ifx_SCU_SEICON1_Bits',0,4,129,8,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	438
	.byte	26,0,2,35,0,0,20
	.byte	'Ifx_SCU_SEICON1_Bits',0,4,138,8,3
	.word	75412
	.byte	10
	.byte	'_Ifx_SCU_SEISR_Bits',0,4,141,8,16,4,11
	.byte	'AE',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	630
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_SEISR_Bits',0,4,151,8,3
	.word	75603
	.byte	10
	.byte	'_Ifx_SCU_STCON_Bits',0,4,154,8,16,4,11
	.byte	'reserved_0',0,2
	.word	630
	.byte	13,3,2,35,0,11
	.byte	'SFCBAE',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'CFCBAE',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'STP',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_STCON_Bits',0,4,161,8,3
	.word	75781
	.byte	10
	.byte	'_Ifx_SCU_STMEM1_Bits',0,4,164,8,16,4,11
	.byte	'MEM',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_SCU_STMEM1_Bits',0,4,167,8,3
	.word	75932
	.byte	10
	.byte	'_Ifx_SCU_STMEM2_Bits',0,4,170,8,16,4,11
	.byte	'MEM',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_SCU_STMEM2_Bits',0,4,173,8,3
	.word	76004
	.byte	10
	.byte	'_Ifx_SCU_STMEM3_Bits',0,4,176,8,16,4,11
	.byte	'MEM',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_SCU_STMEM3_Bits',0,4,179,8,3
	.word	76076
	.byte	10
	.byte	'_Ifx_SCU_STMEM4_Bits',0,4,182,8,16,4,11
	.byte	'MEM',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_SCU_STMEM4_Bits',0,4,185,8,3
	.word	76148
	.byte	10
	.byte	'_Ifx_SCU_STMEM5_Bits',0,4,188,8,16,4,11
	.byte	'MEM',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_SCU_STMEM5_Bits',0,4,191,8,3
	.word	76220
	.byte	10
	.byte	'_Ifx_SCU_STMEM6_Bits',0,4,194,8,16,4,11
	.byte	'MEM',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_SCU_STMEM6_Bits',0,4,197,8,3
	.word	76292
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,4,200,8,16,4,11
	.byte	'HWCFG',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	613
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	613
	.byte	3,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_SCU_STSTAT_Bits',0,4,216,8,3
	.word	76364
	.byte	10
	.byte	'_Ifx_SCU_SWAPCTRL_Bits',0,4,219,8,16,4,11
	.byte	'ADDRCFG',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'SPARE',0,2
	.word	630
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_SWAPCTRL_Bits',0,4,224,8,3
	.word	76693
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,4,227,8,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	6,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,4,234,8,3
	.word	76813
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,4,237,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'DDC',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	613
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_SYSCON_Bits',0,4,249,8,3
	.word	76983
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON0_Bits',0,4,252,8,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	630
	.byte	6,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	613
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	613
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	613
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	613
	.byte	3,2,2,35,3,11
	.byte	'INSEL',0,1
	.word	613
	.byte	2,0,2,35,3,0,20
	.byte	'Ifx_SCU_SYSPLLCON0_Bits',0,4,137,9,3
	.word	77246
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON1_Bits',0,4,140,9,16,4,11
	.byte	'K2DIV',0,1
	.word	613
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	438
	.byte	29,0,2,35,0,0,20
	.byte	'Ifx_SCU_SYSPLLCON1_Bits',0,4,144,9,3
	.word	77525
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON2_Bits',0,4,147,9,16,4,11
	.byte	'MODCFG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_SYSPLLCON2_Bits',0,4,151,9,3
	.word	77629
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLSTAT_Bits',0,4,154,9,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	2,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	438
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_SCU_SYSPLLSTAT_Bits',0,4,164,9,3
	.word	77735
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,4,167,9,16,4,11
	.byte	'ESR0T',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	438
	.byte	28,0,2,35,0,0,20
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,4,174,9,3
	.word	77958
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS0_Bits',0,4,177,9,16,4,11
	.byte	'CPU0ESR0T',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'CPU0ESR1T',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'CPU0TRAP2T',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'CPU0SMUT',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	4,0,2,35,0,11
	.byte	'CPU1ESR0T',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'CPU1ESR1T',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'CPU1TRAP2T',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'CPU1SMUT',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	613
	.byte	4,0,2,35,1,11
	.byte	'CPU2ESR0T',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'CPU2ESR1T',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'CPU2TRAP2T',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'CPU2SMUT',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	613
	.byte	4,0,2,35,2,11
	.byte	'CPU3ESR0T',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'CPU3ESR1T',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'CPU3TRAP2T',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'CPU3SMUT',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_SCU_TRAPDIS0_Bits',0,4,199,9,3
	.word	78106
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS1_Bits',0,4,202,9,16,4,11
	.byte	'CPU4ESR0T',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'CPU4ESR1T',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'CPU4TRAP2T',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'CPU4SMUT',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	4,0,2,35,0,11
	.byte	'CPU5ESR0T',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'CPU5ESR1T',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'CPU5TRAP2T',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'CPU5SMUT',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	613
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_TRAPDIS1_Bits',0,4,215,9,3
	.word	78594
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,4,218,9,16,4,11
	.byte	'ESR0T',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	438
	.byte	28,0,2,35,0,0,20
	.byte	'Ifx_SCU_TRAPSET_Bits',0,4,225,9,3
	.word	78891
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,4,228,9,16,4,11
	.byte	'ESR0T',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	438
	.byte	28,0,2,35,0,0,20
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,4,235,9,3
	.word	79039
	.byte	20
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,4,244,9,3
	.word	477
	.byte	20
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,4,132,10,3
	.word	652
	.byte	20
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,4,148,10,3
	.word	918
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,4,151,10,16,4,11
	.byte	'ENDINIT',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	461
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,4,157,10,3
	.word	79289
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,4,160,10,16,4,11
	.byte	'CLRIRF',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	613
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,4,173,10,3
	.word	79415
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,4,176,10,16,4,11
	.byte	'AE',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	613
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,4,189,10,3
	.word	79667
	.byte	12,4,197,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60323
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_ACCEN00',0,4,202,10,3
	.word	79886
	.byte	12,4,205,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60882
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_ACCEN01',0,4,210,10,3
	.word	79951
	.byte	12,4,213,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60961
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_ACCEN10',0,4,218,10,3
	.word	80016
	.byte	12,4,221,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61521
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_ACCEN11',0,4,226,10,3
	.word	80081
	.byte	12,4,229,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61602
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_ARSTDIS',0,4,234,10,3
	.word	80146
	.byte	12,4,237,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61819
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON0',0,4,242,10,3
	.word	80211
	.byte	12,4,245,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62092
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON1',0,4,250,10,3
	.word	80276
	.byte	12,4,253,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62418
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON10',0,4,130,11,3
	.word	80341
	.byte	12,4,133,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62520
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON11',0,4,138,11,3
	.word	80407
	.byte	12,4,141,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62622
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON2',0,4,146,11,3
	.word	80473
	.byte	12,4,149,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62896
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON3',0,4,154,11,3
	.word	80538
	.byte	12,4,157,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63265
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON4',0,4,162,11,3
	.word	80603
	.byte	12,4,165,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63445
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON5',0,4,170,11,3
	.word	80668
	.byte	12,4,173,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63614
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON6',0,4,178,11,3
	.word	80733
	.byte	12,4,181,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63714
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON7',0,4,186,11,3
	.word	80798
	.byte	12,4,189,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63814
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON8',0,4,194,11,3
	.word	80863
	.byte	12,4,197,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63914
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON9',0,4,202,11,3
	.word	80928
	.byte	12,4,205,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64014
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_CHIPID',0,4,210,11,3
	.word	80993
	.byte	12,4,213,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64217
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_DTSCLIM',0,4,218,11,3
	.word	81057
	.byte	12,4,221,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64449
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_DTSCSTAT',0,4,226,11,3
	.word	81122
	.byte	12,4,229,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64551
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_EICON0',0,4,234,11,3
	.word	81188
	.byte	12,4,237,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64679
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_EICON1',0,4,242,11,3
	.word	81252
	.byte	12,4,245,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64868
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_EICR',0,4,250,11,3
	.word	81316
	.byte	12,4,253,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65232
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_EIFILT',0,4,130,12,3
	.word	81378
	.byte	12,4,133,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65671
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_EIFR',0,4,138,12,3
	.word	81442
	.byte	12,4,141,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65882
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_EISR',0,4,146,12,3
	.word	81504
	.byte	12,4,149,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66058
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_EMSR',0,4,154,12,3
	.word	81566
	.byte	12,4,157,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66252
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_EMSSW',0,4,162,12,3
	.word	81628
	.byte	12,4,165,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66387
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX',0,4,170,12,3
	.word	81691
	.byte	12,4,173,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66523
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_ESROCFG',0,4,178,12,3
	.word	81764
	.byte	12,4,181,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66634
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_EXTCON',0,4,186,12,3
	.word	81829
	.byte	12,4,189,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66852
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_FDR',0,4,194,12,3
	.word	81893
	.byte	12,4,197,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67015
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_FMR',0,4,202,12,3
	.word	81954
	.byte	12,4,205,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67351
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_ID',0,4,210,12,3
	.word	82015
	.byte	12,4,213,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67458
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_IGCR',0,4,218,12,3
	.word	82075
	.byte	12,4,221,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67910
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_IN',0,4,226,12,3
	.word	82137
	.byte	12,4,229,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68009
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_IOCR',0,4,234,12,3
	.word	82197
	.byte	12,4,237,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68159
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_LBISTCTRL0',0,4,242,12,3
	.word	82259
	.byte	12,4,245,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68397
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_LBISTCTRL1',0,4,250,12,3
	.word	82327
	.byte	12,4,253,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68558
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_LBISTCTRL2',0,4,130,13,3
	.word	82395
	.byte	12,4,133,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68664
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_LBISTCTRL3',0,4,138,13,3
	.word	82463
	.byte	12,4,141,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68750
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_LCLCON0',0,4,146,13,3
	.word	82531
	.byte	12,4,149,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68918
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_LCLCON1',0,4,154,13,3
	.word	82596
	.byte	12,4,157,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69086
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_LCLTEST',0,4,162,13,3
	.word	82661
	.byte	12,4,165,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69400
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_MANID',0,4,170,13,3
	.word	82726
	.byte	12,4,173,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69511
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_OMR',0,4,178,13,3
	.word	82789
	.byte	12,4,181,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69669
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_OSCCON',0,4,186,13,3
	.word	82850
	.byte	12,4,189,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70080
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_OUT',0,4,194,13,3
	.word	82914
	.byte	12,4,197,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70181
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_OVCCON',0,4,202,13,3
	.word	82975
	.byte	12,4,205,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70499
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_OVCENABLE',0,4,210,13,3
	.word	83039
	.byte	12,4,213,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70686
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PDISC',0,4,218,13,3
	.word	83106
	.byte	12,4,221,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70797
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PDR',0,4,226,13,3
	.word	83169
	.byte	12,4,229,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70930
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PDRR',0,4,234,13,3
	.word	83230
	.byte	12,4,237,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71133
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PERPLLCON0',0,4,242,13,3
	.word	83292
	.byte	12,4,245,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71373
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PERPLLCON1',0,4,250,13,3
	.word	83360
	.byte	12,4,253,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71517
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PERPLLSTAT',0,4,130,14,3
	.word	83428
	.byte	12,4,133,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71739
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PMCSR0',0,4,138,14,3
	.word	83496
	.byte	12,4,141,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71875
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PMCSR1',0,4,146,14,3
	.word	83560
	.byte	12,4,149,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72011
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PMCSR2',0,4,154,14,3
	.word	83624
	.byte	12,4,157,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72147
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PMCSR3',0,4,162,14,3
	.word	83688
	.byte	12,4,165,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72283
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PMCSR4',0,4,170,14,3
	.word	83752
	.byte	12,4,173,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72419
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PMCSR5',0,4,178,14,3
	.word	83816
	.byte	12,4,181,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72555
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PMSTAT0',0,4,186,14,3
	.word	83880
	.byte	12,4,189,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72827
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PMSWCR1',0,4,194,14,3
	.word	83945
	.byte	12,4,197,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73072
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PMTRCSR0',0,4,202,14,3
	.word	84010
	.byte	12,4,205,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73460
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PMTRCSR1',0,4,210,14,3
	.word	84076
	.byte	12,4,213,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73578
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PMTRCSR2',0,4,218,14,3
	.word	84142
	.byte	12,4,221,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73821
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PMTRCSR3',0,4,226,14,3
	.word	84208
	.byte	12,4,229,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74088
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_RSTCON',0,4,234,14,3
	.word	84274
	.byte	12,4,237,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74347
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_RSTCON2',0,4,242,14,3
	.word	84338
	.byte	12,4,245,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74652
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_RSTCON3',0,4,250,14,3
	.word	84403
	.byte	12,4,253,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74733
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_RSTSTAT',0,4,130,15,3
	.word	84468
	.byte	12,4,133,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75282
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_SEICON0',0,4,138,15,3
	.word	84533
	.byte	12,4,141,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75412
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_SEICON1',0,4,146,15,3
	.word	84598
	.byte	12,4,149,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75603
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_SEISR',0,4,154,15,3
	.word	84663
	.byte	12,4,157,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75781
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_STCON',0,4,162,15,3
	.word	84726
	.byte	12,4,165,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75932
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_STMEM1',0,4,170,15,3
	.word	84789
	.byte	12,4,173,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76004
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_STMEM2',0,4,178,15,3
	.word	84853
	.byte	12,4,181,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76076
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_STMEM3',0,4,186,15,3
	.word	84917
	.byte	12,4,189,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76148
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_STMEM4',0,4,194,15,3
	.word	84981
	.byte	12,4,197,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76220
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_STMEM5',0,4,202,15,3
	.word	85045
	.byte	12,4,205,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76292
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_STMEM6',0,4,210,15,3
	.word	85109
	.byte	12,4,213,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76364
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_STSTAT',0,4,218,15,3
	.word	85173
	.byte	12,4,221,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76693
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_SWAPCTRL',0,4,226,15,3
	.word	85237
	.byte	12,4,229,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76813
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_SWRSTCON',0,4,234,15,3
	.word	85303
	.byte	12,4,237,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76983
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_SYSCON',0,4,242,15,3
	.word	85369
	.byte	12,4,245,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77246
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_SYSPLLCON0',0,4,250,15,3
	.word	85433
	.byte	12,4,253,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77525
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_SYSPLLCON1',0,4,130,16,3
	.word	85501
	.byte	12,4,133,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77629
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_SYSPLLCON2',0,4,138,16,3
	.word	85569
	.byte	12,4,141,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77735
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_SYSPLLSTAT',0,4,146,16,3
	.word	85637
	.byte	12,4,149,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77958
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_TRAPCLR',0,4,154,16,3
	.word	85705
	.byte	12,4,157,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78106
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_TRAPDIS0',0,4,162,16,3
	.word	85770
	.byte	12,4,165,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78594
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_TRAPDIS1',0,4,170,16,3
	.word	85836
	.byte	12,4,173,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78891
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_TRAPSET',0,4,178,16,3
	.word	85902
	.byte	12,4,181,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79039
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_TRAPSTAT',0,4,186,16,3
	.word	85967
	.byte	20
	.byte	'Ifx_SCU_WDTCPU_CON0',0,4,194,16,3
	.word	573
	.byte	20
	.byte	'Ifx_SCU_WDTCPU_CON1',0,4,202,16,3
	.word	878
	.byte	20
	.byte	'Ifx_SCU_WDTCPU_SR',0,4,210,16,3
	.word	1109
	.byte	12,4,213,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79289
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_WDTS_CON0',0,4,218,16,3
	.word	86118
	.byte	12,4,221,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79415
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_WDTS_CON1',0,4,226,16,3
	.word	86185
	.byte	12,4,229,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	79667
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_WDTS_SR',0,4,234,16,3
	.word	86252
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX',0,4,246,16,25,4,13
	.byte	'ESRCFGX',0
	.word	81691
	.byte	4,2,35,0,0,14
	.word	86317
	.byte	20
	.byte	'Ifx_SCU_ESRCFGX',0,4,249,16,3
	.word	86358
	.byte	14
	.word	1149
	.byte	20
	.byte	'Ifx_SCU_WDTCPU',0,4,141,17,3
	.word	86388
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,4,156,17,25,12,13
	.byte	'CON0',0
	.word	86118
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	86185
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	86252
	.byte	4,2,35,8,0,14
	.word	86417
	.byte	20
	.byte	'Ifx_SCU_WDTS',0,4,161,17,3
	.word	86478
	.byte	15,8
	.word	86317
	.byte	16,1,0,14
	.word	86505
	.byte	15,20
	.word	613
	.byte	16,19,0,15,36
	.word	613
	.byte	16,35,0,15,16
	.word	81316
	.byte	16,3,0,15,16
	.word	82075
	.byte	16,3,0,15,72
	.word	1149
	.byte	16,5,0,14
	.word	86555
	.byte	14
	.word	86417
	.byte	15,176,2
	.word	613
	.byte	16,175,2,0,10
	.byte	'_Ifx_SCU',0,4,176,17,25,128,8,13
	.byte	'reserved_0',0
	.word	4454
	.byte	8,2,35,0,13
	.byte	'ID',0
	.word	82015
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2634
	.byte	4,2,35,12,13
	.byte	'OSCCON',0
	.word	82850
	.byte	4,2,35,16,13
	.byte	'SYSPLLSTAT',0
	.word	85637
	.byte	4,2,35,20,13
	.byte	'SYSPLLCON0',0
	.word	85433
	.byte	4,2,35,24,13
	.byte	'SYSPLLCON1',0
	.word	85501
	.byte	4,2,35,28,13
	.byte	'SYSPLLCON2',0
	.word	85569
	.byte	4,2,35,32,13
	.byte	'PERPLLSTAT',0
	.word	83428
	.byte	4,2,35,36,13
	.byte	'PERPLLCON0',0
	.word	83292
	.byte	4,2,35,40,13
	.byte	'PERPLLCON1',0
	.word	83360
	.byte	4,2,35,44,13
	.byte	'CCUCON0',0
	.word	80211
	.byte	4,2,35,48,13
	.byte	'CCUCON1',0
	.word	80276
	.byte	4,2,35,52,13
	.byte	'FDR',0
	.word	81893
	.byte	4,2,35,56,13
	.byte	'EXTCON',0
	.word	81829
	.byte	4,2,35,60,13
	.byte	'CCUCON2',0
	.word	80473
	.byte	4,2,35,64,13
	.byte	'CCUCON3',0
	.word	80538
	.byte	4,2,35,68,13
	.byte	'CCUCON4',0
	.word	80603
	.byte	4,2,35,72,13
	.byte	'CCUCON5',0
	.word	80668
	.byte	4,2,35,76,13
	.byte	'RSTSTAT',0
	.word	84468
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	2634
	.byte	4,2,35,84,13
	.byte	'RSTCON',0
	.word	84274
	.byte	4,2,35,88,13
	.byte	'ARSTDIS',0
	.word	80146
	.byte	4,2,35,92,13
	.byte	'SWRSTCON',0
	.word	85303
	.byte	4,2,35,96,13
	.byte	'RSTCON2',0
	.word	84338
	.byte	4,2,35,100,13
	.byte	'RSTCON3',0
	.word	84403
	.byte	4,2,35,104,13
	.byte	'reserved_6C',0
	.word	2634
	.byte	4,2,35,108,13
	.byte	'ESRCFGX',0
	.word	86514
	.byte	8,2,35,112,13
	.byte	'ESROCFG',0
	.word	81764
	.byte	4,2,35,120,13
	.byte	'SYSCON',0
	.word	85369
	.byte	4,2,35,124,13
	.byte	'CCUCON6',0
	.word	80733
	.byte	4,3,35,128,1,13
	.byte	'CCUCON7',0
	.word	80798
	.byte	4,3,35,132,1,13
	.byte	'CCUCON8',0
	.word	80863
	.byte	4,3,35,136,1,13
	.byte	'CCUCON9',0
	.word	80928
	.byte	4,3,35,140,1,13
	.byte	'CCUCON10',0
	.word	80341
	.byte	4,3,35,144,1,13
	.byte	'CCUCON11',0
	.word	80407
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	2634
	.byte	4,3,35,152,1,13
	.byte	'PDR',0
	.word	83169
	.byte	4,3,35,156,1,13
	.byte	'IOCR',0
	.word	82197
	.byte	4,3,35,160,1,13
	.byte	'OUT',0
	.word	82914
	.byte	4,3,35,164,1,13
	.byte	'OMR',0
	.word	82789
	.byte	4,3,35,168,1,13
	.byte	'IN',0
	.word	82137
	.byte	4,3,35,172,1,13
	.byte	'reserved_B0',0
	.word	49363
	.byte	16,3,35,176,1,13
	.byte	'STSTAT',0
	.word	85173
	.byte	4,3,35,192,1,13
	.byte	'STCON',0
	.word	84726
	.byte	4,3,35,196,1,13
	.byte	'PMCSR0',0
	.word	83496
	.byte	4,3,35,200,1,13
	.byte	'PMCSR1',0
	.word	83560
	.byte	4,3,35,204,1,13
	.byte	'PMCSR2',0
	.word	83624
	.byte	4,3,35,208,1,13
	.byte	'PMCSR3',0
	.word	83688
	.byte	4,3,35,212,1,13
	.byte	'PMCSR4',0
	.word	83752
	.byte	4,3,35,216,1,13
	.byte	'PMCSR5',0
	.word	83816
	.byte	4,3,35,220,1,13
	.byte	'reserved_E0',0
	.word	2634
	.byte	4,3,35,224,1,13
	.byte	'PMSTAT0',0
	.word	83880
	.byte	4,3,35,228,1,13
	.byte	'PMSWCR1',0
	.word	83945
	.byte	4,3,35,232,1,13
	.byte	'reserved_EC',0
	.word	49363
	.byte	16,3,35,236,1,13
	.byte	'EMSR',0
	.word	81566
	.byte	4,3,35,252,1,13
	.byte	'EMSSW',0
	.word	81628
	.byte	4,3,35,128,2,13
	.byte	'DTSCSTAT',0
	.word	81122
	.byte	4,3,35,132,2,13
	.byte	'DTSCLIM',0
	.word	81057
	.byte	4,3,35,136,2,13
	.byte	'reserved_10C',0
	.word	86519
	.byte	20,3,35,140,2,13
	.byte	'TRAPDIS1',0
	.word	85836
	.byte	4,3,35,160,2,13
	.byte	'TRAPSTAT',0
	.word	85967
	.byte	4,3,35,164,2,13
	.byte	'TRAPSET',0
	.word	85902
	.byte	4,3,35,168,2,13
	.byte	'TRAPCLR',0
	.word	85705
	.byte	4,3,35,172,2,13
	.byte	'TRAPDIS0',0
	.word	85770
	.byte	4,3,35,176,2,13
	.byte	'LCLCON0',0
	.word	82531
	.byte	4,3,35,180,2,13
	.byte	'LCLCON1',0
	.word	82596
	.byte	4,3,35,184,2,13
	.byte	'LCLTEST',0
	.word	82661
	.byte	4,3,35,188,2,13
	.byte	'CHIPID',0
	.word	80993
	.byte	4,3,35,192,2,13
	.byte	'MANID',0
	.word	82726
	.byte	4,3,35,196,2,13
	.byte	'reserved_148',0
	.word	2634
	.byte	4,3,35,200,2,13
	.byte	'SWAPCTRL',0
	.word	85237
	.byte	4,3,35,204,2,13
	.byte	'reserved_150',0
	.word	86519
	.byte	20,3,35,208,2,13
	.byte	'LBISTCTRL0',0
	.word	82259
	.byte	4,3,35,228,2,13
	.byte	'LBISTCTRL1',0
	.word	82327
	.byte	4,3,35,232,2,13
	.byte	'LBISTCTRL2',0
	.word	82395
	.byte	4,3,35,236,2,13
	.byte	'LBISTCTRL3',0
	.word	82463
	.byte	4,3,35,240,2,13
	.byte	'reserved_174',0
	.word	49363
	.byte	16,3,35,244,2,13
	.byte	'STMEM1',0
	.word	84789
	.byte	4,3,35,132,3,13
	.byte	'STMEM2',0
	.word	84853
	.byte	4,3,35,136,3,13
	.byte	'PDISC',0
	.word	83106
	.byte	4,3,35,140,3,13
	.byte	'reserved_190',0
	.word	4454
	.byte	8,3,35,144,3,13
	.byte	'PMTRCSR0',0
	.word	84010
	.byte	4,3,35,152,3,13
	.byte	'PMTRCSR1',0
	.word	84076
	.byte	4,3,35,156,3,13
	.byte	'PMTRCSR2',0
	.word	84142
	.byte	4,3,35,160,3,13
	.byte	'PMTRCSR3',0
	.word	84208
	.byte	4,3,35,164,3,13
	.byte	'reserved_1A8',0
	.word	3825
	.byte	24,3,35,168,3,13
	.byte	'STMEM3',0
	.word	84917
	.byte	4,3,35,192,3,13
	.byte	'STMEM4',0
	.word	84981
	.byte	4,3,35,196,3,13
	.byte	'STMEM5',0
	.word	85045
	.byte	4,3,35,200,3,13
	.byte	'STMEM6',0
	.word	85109
	.byte	4,3,35,204,3,13
	.byte	'reserved_1D0',0
	.word	49363
	.byte	16,3,35,208,3,13
	.byte	'OVCENABLE',0
	.word	83039
	.byte	4,3,35,224,3,13
	.byte	'OVCCON',0
	.word	82975
	.byte	4,3,35,228,3,13
	.byte	'reserved_1E8',0
	.word	86528
	.byte	36,3,35,232,3,13
	.byte	'EIFILT',0
	.word	81378
	.byte	4,3,35,140,4,13
	.byte	'EICR',0
	.word	86537
	.byte	16,3,35,144,4,13
	.byte	'EIFR',0
	.word	81442
	.byte	4,3,35,160,4,13
	.byte	'FMR',0
	.word	81954
	.byte	4,3,35,164,4,13
	.byte	'PDRR',0
	.word	83230
	.byte	4,3,35,168,4,13
	.byte	'IGCR',0
	.word	86546
	.byte	16,3,35,172,4,13
	.byte	'reserved_23C',0
	.word	49363
	.byte	16,3,35,188,4,13
	.byte	'WDTCPU',0
	.word	86564
	.byte	72,3,35,204,4,13
	.byte	'reserved_294',0
	.word	4454
	.byte	8,3,35,148,5,13
	.byte	'EICON0',0
	.word	81188
	.byte	4,3,35,156,5,13
	.byte	'EICON1',0
	.word	81252
	.byte	4,3,35,160,5,13
	.byte	'EISR',0
	.word	81504
	.byte	4,3,35,164,5,13
	.byte	'WDTS',0
	.word	86569
	.byte	12,3,35,168,5,13
	.byte	'SEICON0',0
	.word	84533
	.byte	4,3,35,180,5,13
	.byte	'SEICON1',0
	.word	84598
	.byte	4,3,35,184,5,13
	.byte	'SEISR',0
	.word	84663
	.byte	4,3,35,188,5,13
	.byte	'reserved_2C0',0
	.word	86574
	.byte	176,2,3,35,192,5,13
	.byte	'ACCEN11',0
	.word	80081
	.byte	4,3,35,240,7,13
	.byte	'ACCEN10',0
	.word	80016
	.byte	4,3,35,244,7,13
	.byte	'ACCEN01',0
	.word	79951
	.byte	4,3,35,248,7,13
	.byte	'ACCEN00',0
	.word	79886
	.byte	4,3,35,252,7,0,14
	.word	86585
	.byte	20
	.byte	'Ifx_SCU',0,4,166,18,3
	.word	88706
	.byte	20
	.byte	'Ifx_STM_ACCEN0_Bits',0,14,102,3
	.word	13271
	.byte	20
	.byte	'Ifx_STM_ACCEN1_Bits',0,14,108,3
	.word	13182
	.byte	20
	.byte	'Ifx_STM_CAP_Bits',0,14,114,3
	.word	11685
	.byte	20
	.byte	'Ifx_STM_CAPSV_Bits',0,14,120,3
	.word	12566
	.byte	20
	.byte	'Ifx_STM_CLC_Bits',0,14,130,1,3
	.word	10804
	.byte	20
	.byte	'Ifx_STM_CMCON_Bits',0,14,143,1,3
	.word	11865
	.byte	20
	.byte	'Ifx_STM_CMP_Bits',0,14,149,1,3
	.word	11773
	.byte	20
	.byte	'Ifx_STM_ICR_Bits',0,14,162,1,3
	.word	12097
	.byte	20
	.byte	'Ifx_STM_ID_Bits',0,14,170,1,3
	.word	10960
	.byte	20
	.byte	'Ifx_STM_ISCR_Bits',0,14,180,1,3
	.word	12314
	.byte	20
	.byte	'Ifx_STM_KRST0_Bits',0,14,188,1,3
	.word	13059
	.byte	20
	.byte	'Ifx_STM_KRST1_Bits',0,14,195,1,3
	.word	12955
	.byte	20
	.byte	'Ifx_STM_KRSTCLR_Bits',0,14,202,1,3
	.word	12849
	.byte	20
	.byte	'Ifx_STM_OCS_Bits',0,14,213,1,3
	.word	12667
	.byte	20
	.byte	'Ifx_STM_TIM0_Bits',0,14,219,1,3
	.word	11079
	.byte	20
	.byte	'Ifx_STM_TIM0SV_Bits',0,14,225,1,3
	.word	12478
	.byte	20
	.byte	'Ifx_STM_TIM1_Bits',0,14,231,1,3
	.word	11165
	.byte	20
	.byte	'Ifx_STM_TIM2_Bits',0,14,237,1,3
	.word	11251
	.byte	20
	.byte	'Ifx_STM_TIM3_Bits',0,14,243,1,3
	.word	11337
	.byte	20
	.byte	'Ifx_STM_TIM4_Bits',0,14,249,1,3
	.word	11424
	.byte	20
	.byte	'Ifx_STM_TIM5_Bits',0,14,255,1,3
	.word	11511
	.byte	20
	.byte	'Ifx_STM_TIM6_Bits',0,14,133,2,3
	.word	11598
	.byte	20
	.byte	'Ifx_STM_ACCEN0',0,14,146,2,3
	.word	13800
	.byte	20
	.byte	'Ifx_STM_ACCEN1',0,14,154,2,3
	.word	13231
	.byte	20
	.byte	'Ifx_STM_CAP',0,14,162,2,3
	.word	11733
	.byte	20
	.byte	'Ifx_STM_CAPSV',0,14,170,2,3
	.word	12616
	.byte	20
	.byte	'Ifx_STM_CLC',0,14,178,2,3
	.word	10920
	.byte	20
	.byte	'Ifx_STM_CMCON',0,14,186,2,3
	.word	12057
	.byte	20
	.byte	'Ifx_STM_CMP',0,14,194,2,3
	.word	11816
	.byte	20
	.byte	'Ifx_STM_ICR',0,14,202,2,3
	.word	12274
	.byte	20
	.byte	'Ifx_STM_ID',0,14,210,2,3
	.word	11039
	.byte	20
	.byte	'Ifx_STM_ISCR',0,14,218,2,3
	.word	12438
	.byte	20
	.byte	'Ifx_STM_KRST0',0,14,226,2,3
	.word	13142
	.byte	20
	.byte	'Ifx_STM_KRST1',0,14,234,2,3
	.word	13019
	.byte	20
	.byte	'Ifx_STM_KRSTCLR',0,14,242,2,3
	.word	12915
	.byte	20
	.byte	'Ifx_STM_OCS',0,14,250,2,3
	.word	12809
	.byte	20
	.byte	'Ifx_STM_TIM0',0,14,130,3,3
	.word	11125
	.byte	20
	.byte	'Ifx_STM_TIM0SV',0,14,138,3,3
	.word	12526
	.byte	20
	.byte	'Ifx_STM_TIM1',0,14,146,3,3
	.word	11211
	.byte	20
	.byte	'Ifx_STM_TIM2',0,14,154,3,3
	.word	11297
	.byte	20
	.byte	'Ifx_STM_TIM3',0,14,162,3,3
	.word	11384
	.byte	20
	.byte	'Ifx_STM_TIM4',0,14,170,3,3
	.word	11471
	.byte	20
	.byte	'Ifx_STM_TIM5',0,14,178,3,3
	.word	11558
	.byte	20
	.byte	'Ifx_STM_TIM6',0,14,186,3,3
	.word	11645
	.byte	14
	.word	13840
	.byte	20
	.byte	'Ifx_STM',0,14,226,3,3
	.word	89814
	.byte	17,31,162,11,9,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,18
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,20
	.byte	'IfxScu_WDTCON1_IR',0,31,167,11,3
	.word	89836
	.byte	20
	.byte	'Ifx_P_ACCEN0_Bits',0,6,102,3
	.word	7982
	.byte	20
	.byte	'Ifx_P_ACCEN1_Bits',0,6,108,3
	.word	7895
	.byte	20
	.byte	'Ifx_P_ESR_Bits',0,6,130,1,3
	.word	4463
	.byte	20
	.byte	'Ifx_P_ID_Bits',0,6,138,1,3
	.word	2514
	.byte	20
	.byte	'Ifx_P_IN_Bits',0,6,160,1,3
	.word	3510
	.byte	20
	.byte	'Ifx_P_IOCR0_Bits',0,6,173,1,3
	.word	2643
	.byte	20
	.byte	'Ifx_P_IOCR12_Bits',0,6,186,1,3
	.word	3290
	.byte	20
	.byte	'Ifx_P_IOCR4_Bits',0,6,199,1,3
	.word	2858
	.byte	20
	.byte	'Ifx_P_IOCR8_Bits',0,6,212,1,3
	.word	3073
	.byte	20
	.byte	'Ifx_P_LPCR_Bits',0,6,231,1,3
	.word	7557
	.byte	20
	.byte	'Ifx_P_OMCR_Bits',0,6,253,1,3
	.word	7209
	.byte	20
	.byte	'Ifx_P_OMCR0_Bits',0,6,136,2,3
	.word	6196
	.byte	20
	.byte	'Ifx_P_OMCR12_Bits',0,6,146,2,3
	.word	6720
	.byte	20
	.byte	'Ifx_P_OMCR4_Bits',0,6,157,2,3
	.word	6370
	.byte	20
	.byte	'Ifx_P_OMCR8_Bits',0,6,168,2,3
	.word	6544
	.byte	20
	.byte	'Ifx_P_OMR_Bits',0,6,205,2,3
	.word	1943
	.byte	20
	.byte	'Ifx_P_OMSR_Bits',0,6,227,2,3
	.word	6876
	.byte	20
	.byte	'Ifx_P_OMSR0_Bits',0,6,237,2,3
	.word	5533
	.byte	20
	.byte	'Ifx_P_OMSR12_Bits',0,6,248,2,3
	.word	6021
	.byte	20
	.byte	'Ifx_P_OMSR4_Bits',0,6,131,3,3
	.word	5680
	.byte	20
	.byte	'Ifx_P_OMSR8_Bits',0,6,142,3,3
	.word	5849
	.byte	20
	.byte	'Ifx_P_OUT_Bits',0,6,164,3,3
	.word	1627
	.byte	20
	.byte	'Ifx_P_PCSR_Bits',0,6,187,3,3
	.word	5169
	.byte	20
	.byte	'Ifx_P_PDISC_Bits',0,6,209,3,3
	.word	4803
	.byte	20
	.byte	'Ifx_P_PDR0_Bits',0,6,230,3,3
	.word	3834
	.byte	20
	.byte	'Ifx_P_PDR1_Bits',0,6,251,3,3
	.word	4138
	.byte	20
	.byte	'Ifx_P_ACCEN0',0,6,136,4,3
	.word	8509
	.byte	20
	.byte	'Ifx_P_ACCEN1',0,6,144,4,3
	.word	7942
	.byte	20
	.byte	'Ifx_P_ESR',0,6,152,4,3
	.word	4754
	.byte	20
	.byte	'Ifx_P_ID',0,6,160,4,3
	.word	2594
	.byte	20
	.byte	'Ifx_P_IN',0,6,168,4,3
	.word	3785
	.byte	20
	.byte	'Ifx_P_IOCR0',0,6,176,4,3
	.word	2818
	.byte	20
	.byte	'Ifx_P_IOCR12',0,6,184,4,3
	.word	3470
	.byte	20
	.byte	'Ifx_P_IOCR4',0,6,192,4,3
	.word	3033
	.byte	20
	.byte	'Ifx_P_IOCR8',0,6,200,4,3
	.word	3250
	.byte	20
	.byte	'Ifx_P_LPCR',0,6,208,4,3
	.word	7837
	.byte	20
	.byte	'Ifx_P_OMCR',0,6,216,4,3
	.word	7517
	.byte	20
	.byte	'Ifx_P_OMCR0',0,6,224,4,3
	.word	6330
	.byte	20
	.byte	'Ifx_P_OMCR12',0,6,232,4,3
	.word	6836
	.byte	20
	.byte	'Ifx_P_OMCR4',0,6,240,4,3
	.word	6504
	.byte	20
	.byte	'Ifx_P_OMCR8',0,6,248,4,3
	.word	6680
	.byte	20
	.byte	'Ifx_P_OMR',0,6,128,5,3
	.word	2474
	.byte	20
	.byte	'Ifx_P_OMSR',0,6,136,5,3
	.word	7169
	.byte	20
	.byte	'Ifx_P_OMSR0',0,6,144,5,3
	.word	5640
	.byte	20
	.byte	'Ifx_P_OMSR12',0,6,152,5,3
	.word	6156
	.byte	20
	.byte	'Ifx_P_OMSR4',0,6,160,5,3
	.word	5809
	.byte	20
	.byte	'Ifx_P_OMSR8',0,6,168,5,3
	.word	5981
	.byte	20
	.byte	'Ifx_P_OUT',0,6,176,5,3
	.word	1903
	.byte	20
	.byte	'Ifx_P_PCSR',0,6,184,5,3
	.word	5493
	.byte	20
	.byte	'Ifx_P_PDISC',0,6,192,5,3
	.word	5129
	.byte	20
	.byte	'Ifx_P_PDR0',0,6,200,5,3
	.word	4098
	.byte	20
	.byte	'Ifx_P_PDR1',0,6,208,5,3
	.word	4414
	.byte	14
	.word	8549
	.byte	20
	.byte	'Ifx_P',0,6,128,6,3
	.word	91152
	.byte	17,5,73,9,1,18
	.byte	'IfxPort_ControlledBy_port',0,0,18
	.byte	'IfxPort_ControlledBy_hsct',0,1,0,20
	.byte	'IfxPort_ControlledBy',0,5,77,3
	.word	91172
	.byte	17,5,81,9,1,18
	.byte	'IfxPort_InputMode_undefined',0,127,18
	.byte	'IfxPort_InputMode_noPullDevice',0,0,18
	.byte	'IfxPort_InputMode_pullDown',0,8,18
	.byte	'IfxPort_InputMode_pullUp',0,16,0,20
	.byte	'IfxPort_InputMode',0,5,87,3
	.word	91263
	.byte	17,5,91,9,1,18
	.byte	'IfxPort_LvdsMode_high',0,0,18
	.byte	'IfxPort_LvdsMode_medium',0,1,0,20
	.byte	'IfxPort_LvdsMode',0,5,95,3
	.word	91414
	.byte	17,5,126,9,1,18
	.byte	'IfxPort_OutputIdx_general',0,128,1,18
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,18
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,18
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,18
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,18
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,18
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,18
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,20
	.byte	'IfxPort_OutputIdx',0,5,136,1,3
	.word	91495
	.byte	20
	.byte	'IfxPort_OutputMode',0,5,145,1,3
	.word	20862
	.byte	20
	.byte	'IfxPort_PadDriver',0,5,165,1,3
	.word	20958
	.byte	17,5,169,1,9,1,18
	.byte	'IfxPort_PadSupply_3v',0,0,18
	.byte	'IfxPort_PadSupply_5v',0,1,0,20
	.byte	'IfxPort_PadSupply',0,5,173,1,3
	.word	91794
	.byte	17,5,177,1,9,1,18
	.byte	'IfxPort_PinFunctionMode_digital',0,0,18
	.byte	'IfxPort_PinFunctionMode_analog',0,1,0,20
	.byte	'IfxPort_PinFunctionMode',0,5,181,1,3
	.word	91874
	.byte	20
	.byte	'IfxPort_State',0,5,193,1,3
	.word	9129
	.byte	38,5,246,1,9,8,13
	.byte	'port',0
	.word	9124
	.byte	4,2,35,0,13
	.byte	'pinIndex',0
	.word	613
	.byte	1,2,35,4,0,20
	.byte	'IfxPort_Pin',0,5,250,1,3
	.word	92004
	.byte	10
	.byte	'_Ifx_SMU_ACCEN0_Bits',0,32,68,16,4,11
	.byte	'EN0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SMU_ACCEN0_Bits',0,32,102,3
	.word	92064
	.byte	10
	.byte	'_Ifx_SMU_ACCEN1_Bits',0,32,105,16,4,11
	.byte	'reserved_0',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_SMU_ACCEN1_Bits',0,32,108,3
	.word	92621
	.byte	10
	.byte	'_Ifx_SMU_AD_Bits',0,32,111,16,4,11
	.byte	'DF0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'DF1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'DF2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'DF3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'DF4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'DF5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'DF6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'DF7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'DF8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'DF9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'DF10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'DF11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'DF12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'DF13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'DF14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'DF15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'DF16',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'DF17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'DF18',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'DF19',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'DF20',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'DF21',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'DF22',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'DF23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'DF24',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'DF25',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'DF26',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'DF27',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'DF28',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'DF29',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'DF30',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'DF31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SMU_AD_Bits',0,32,145,1,3
	.word	92698
	.byte	10
	.byte	'_Ifx_SMU_AEX_Bits',0,32,148,1,16,4,11
	.byte	'IRQ0STS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'IRQ1STS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'IRQ2STS',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'RST0STS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'RST1STS',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'RST2STS',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'RST3STS',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'RST4STS',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'RST5STS',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'NMISTS',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'EMSSTS',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	613
	.byte	4,0,2,35,1,11
	.byte	'IRQ0AEM',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'IRQ1AEM',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'IRQ2AEM',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'RST0AEM',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'RST1AEM',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'RST2AEM',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'RST3AEM',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'RST4AEM',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'RST5AEM',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'NMIAEM',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'EMSAEM',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_SMU_AEX_Bits',0,32,176,1,3
	.word	93248
	.byte	10
	.byte	'_Ifx_SMU_AEXCLR_Bits',0,32,179,1,16,4,11
	.byte	'IRQ0CLR',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'IRQ1CLR',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'IRQ2CLR',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'RST0CLR',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'RST1CLR',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'RST2CLR',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'RST3CLR',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'RST4CLR',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'RST5CLR',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'NMICLR',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'EMSCLR',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	461
	.byte	4,16,2,35,0,11
	.byte	'IRQ0AEMCLR',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'IRQ1AEMCLR',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'IRQ2AEMCLR',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'RST0AEMCLR',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'RST1AEMCLR',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'RST2AEMCLR',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'RST3AEMCLR',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'RST4AEMCLR',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'RST5AEMCLR',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'NMIAEMCLR',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'EMSAEMCLR',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	461
	.byte	4,0,2,35,0,0,20
	.byte	'Ifx_SMU_AEXCLR_Bits',0,32,207,1,3
	.word	93805
	.byte	10
	.byte	'_Ifx_SMU_AFCNT_Bits',0,32,210,1,16,4,11
	.byte	'FCNT',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'ACNT',0,2
	.word	630
	.byte	12,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	14,2,2,35,2,11
	.byte	'FCO',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'ACO',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SMU_AFCNT_Bits',0,32,217,1,3
	.word	94401
	.byte	10
	.byte	'_Ifx_SMU_AG_Bits',0,32,220,1,16,4,11
	.byte	'SF0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'SF1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'SF2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'SF3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'SF4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'SF5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'SF6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'SF7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'SF8',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'SF9',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'SF10',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'SF11',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'SF12',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'SF13',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'SF14',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'SF15',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'SF16',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'SF17',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'SF18',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'SF19',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'SF20',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'SF21',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'SF22',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'SF23',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'SF24',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'SF25',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'SF26',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'SF27',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'SF28',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'SF29',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'SF30',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'SF31',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_SMU_AG_Bits',0,32,254,1,3
	.word	94541
	.byte	10
	.byte	'_Ifx_SMU_AGC_Bits',0,32,129,2,16,4,11
	.byte	'IGCS0',0,4
	.word	461
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'IGCS1',0,4
	.word	461
	.byte	3,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'IGCS2',0,4
	.word	461
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	461
	.byte	5,16,2,35,0,11
	.byte	'RCS',0,4
	.word	461
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	461
	.byte	2,8,2,35,0,11
	.byte	'PES',0,4
	.word	461
	.byte	5,3,2,35,0,11
	.byte	'EFRST',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	461
	.byte	2,0,2,35,0,0,20
	.byte	'Ifx_SMU_AGC_Bits',0,32,142,2,3
	.word	95092
	.byte	10
	.byte	'_Ifx_SMU_AGCF_Bits',0,32,145,2,16,4,11
	.byte	'CF0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'CF1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'CF2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'CF3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'CF4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'CF5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'CF6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'CF7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'CF8',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'CF9',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'CF10',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'CF11',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'CF12',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'CF13',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'CF14',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'CF15',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'CF16',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'CF17',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'CF18',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'CF19',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'CF20',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'CF21',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'CF22',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'CF23',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'CF24',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'CF25',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'CF26',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'CF27',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'CF28',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'CF29',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'CF30',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'CF31',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_SMU_AGCF_Bits',0,32,179,2,3
	.word	95354
	.byte	10
	.byte	'_Ifx_SMU_AGFSP_Bits',0,32,182,2,16,4,11
	.byte	'FE0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'FE1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'FE2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'FE3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'FE4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'FE5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'FE6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'FE7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'FE8',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'FE9',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'FE10',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'FE11',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'FE12',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'FE13',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'FE14',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'FE15',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'FE16',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'FE17',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'FE18',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'FE19',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'FE20',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'FE21',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'FE22',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'FE23',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'FE24',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'FE25',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'FE26',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'FE27',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'FE28',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'FE29',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'FE30',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'FE31',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_SMU_AGFSP_Bits',0,32,216,2,3
	.word	95909
	.byte	10
	.byte	'_Ifx_SMU_CLC_Bits',0,32,219,2,16,4,11
	.byte	'DISR',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	438
	.byte	28,0,2,35,0,0,20
	.byte	'Ifx_SMU_CLC_Bits',0,32,226,2,3
	.word	96466
	.byte	10
	.byte	'_Ifx_SMU_CMD_Bits',0,32,229,2,16,4,11
	.byte	'CMD',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_SMU_CMD_Bits',0,32,234,2,3
	.word	96609
	.byte	10
	.byte	'_Ifx_SMU_DBG_Bits',0,32,237,2,16,4,11
	.byte	'SSM',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	438
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_SMU_DBG_Bits',0,32,241,2,3
	.word	96712
	.byte	10
	.byte	'_Ifx_SMU_FSP_Bits',0,32,244,2,16,4,11
	.byte	'PRE1',0,4
	.word	461
	.byte	3,29,2,35,0,11
	.byte	'PRE2',0,4
	.word	461
	.byte	2,27,2,35,0,11
	.byte	'MODE',0,4
	.word	461
	.byte	2,25,2,35,0,11
	.byte	'PES',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'TFSP_LOW',0,4
	.word	461
	.byte	14,10,2,35,0,11
	.byte	'TFSP_HIGH',0,4
	.word	461
	.byte	10,0,2,35,0,0,20
	.byte	'Ifx_SMU_FSP_Bits',0,32,252,2,3
	.word	96800
	.byte	10
	.byte	'_Ifx_SMU_ID_Bits',0,32,255,2,16,4,11
	.byte	'MOD_REV',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SMU_ID_Bits',0,32,132,3,3
	.word	96955
	.byte	10
	.byte	'_Ifx_SMU_KEYS_Bits',0,32,135,3,16,4,11
	.byte	'CFGLCK',0,4
	.word	461
	.byte	8,24,2,35,0,11
	.byte	'PERLCK',0,4
	.word	461
	.byte	8,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_SMU_KEYS_Bits',0,32,140,3,3
	.word	97065
	.byte	10
	.byte	'_Ifx_SMU_OCS_Bits',0,32,143,3,16,4,11
	.byte	'TGS',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'TGB',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'TG_P',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	438
	.byte	20,8,2,35,0,11
	.byte	'SUS',0,1
	.word	613
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	613
	.byte	2,0,2,35,3,0,20
	.byte	'Ifx_SMU_OCS_Bits',0,32,153,3,3
	.word	97177
	.byte	10
	.byte	'_Ifx_SMU_PCTL_Bits',0,32,156,3,16,4,11
	.byte	'HWDIR',0,4
	.word	461
	.byte	2,30,2,35,0,11
	.byte	'HWEN',0,4
	.word	461
	.byte	2,28,2,35,0,11
	.byte	'GFSCU_EN',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'GFSTS_EN',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'PCS',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	461
	.byte	9,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	461
	.byte	9,0,2,35,0,0,20
	.byte	'Ifx_SMU_PCTL_Bits',0,32,167,3,3
	.word	97369
	.byte	10
	.byte	'_Ifx_SMU_RMCTL_Bits',0,32,170,3,16,4,11
	.byte	'TE0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'TE1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'TE2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'TE3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'TE4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'TE5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'TE6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'TE7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'TE8',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'TE9',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'TE10',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_SMU_RMCTL_Bits',0,32,204,3,3
	.word	97600
	.byte	10
	.byte	'_Ifx_SMU_RMEF_Bits',0,32,207,3,16,4,11
	.byte	'EF0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EF1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EF2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'EF3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'EF4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'EF5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'EF6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'EF7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EF8',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'EF9',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'EF10',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_SMU_RMEF_Bits',0,32,241,3,3
	.word	98304
	.byte	10
	.byte	'_Ifx_SMU_RMSTS_Bits',0,32,244,3,16,4,11
	.byte	'STS0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'STS1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'STS2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'STS3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'STS4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'STS5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'STS6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'STS7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'STS8',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'STS9',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'STS10',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_SMU_RMSTS_Bits',0,32,150,4,3
	.word	99006
	.byte	10
	.byte	'_Ifx_SMU_RTAC00_Bits',0,32,153,4,16,4,11
	.byte	'GID0',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	461
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	461
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	461
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	461
	.byte	7,0,2,35,0,0,20
	.byte	'Ifx_SMU_RTAC00_Bits',0,32,161,4,3
	.word	99721
	.byte	10
	.byte	'_Ifx_SMU_RTAC01_Bits',0,32,164,4,16,4,11
	.byte	'GID2',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	461
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	461
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	461
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	461
	.byte	7,0,2,35,0,0,20
	.byte	'Ifx_SMU_RTAC01_Bits',0,32,172,4,3
	.word	99889
	.byte	10
	.byte	'_Ifx_SMU_RTAC10_Bits',0,32,175,4,16,4,11
	.byte	'GID0',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	461
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	461
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	461
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	461
	.byte	7,0,2,35,0,0,20
	.byte	'Ifx_SMU_RTAC10_Bits',0,32,183,4,3
	.word	100057
	.byte	10
	.byte	'_Ifx_SMU_RTAC11_Bits',0,32,186,4,16,4,11
	.byte	'GID2',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	461
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	461
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	461
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	461
	.byte	7,0,2,35,0,0,20
	.byte	'Ifx_SMU_RTAC11_Bits',0,32,194,4,3
	.word	100225
	.byte	10
	.byte	'_Ifx_SMU_RTC_Bits',0,32,197,4,16,4,11
	.byte	'RT0E',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'RT1E',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	461
	.byte	6,24,2,35,0,11
	.byte	'RTD',0,4
	.word	461
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_SMU_RTC_Bits',0,32,203,4,3
	.word	100393
	.byte	10
	.byte	'_Ifx_SMU_STS_Bits',0,32,206,4,16,4,11
	.byte	'CMD',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'RES',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'ASCE',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'FSP',0,4
	.word	461
	.byte	2,20,2,35,0,11
	.byte	'FSTS',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	461
	.byte	3,16,2,35,0,11
	.byte	'RTS0',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'RTME0',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'RTS1',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'RTME1',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	461
	.byte	12,0,2,35,0,0,20
	.byte	'Ifx_SMU_STS_Bits',0,32,220,4,3
	.word	100513
	.byte	12,32,228,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92064
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_ACCEN0',0,32,233,4,3
	.word	100768
	.byte	12,32,236,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92621
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_ACCEN1',0,32,241,4,3
	.word	100832
	.byte	12,32,244,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92698
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_AD',0,32,249,4,3
	.word	100896
	.byte	12,32,252,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93248
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_AEX',0,32,129,5,3
	.word	100956
	.byte	12,32,132,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93805
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_AEXCLR',0,32,137,5,3
	.word	101017
	.byte	12,32,140,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94401
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_AFCNT',0,32,145,5,3
	.word	101081
	.byte	12,32,148,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94541
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_AG',0,32,153,5,3
	.word	101144
	.byte	12,32,156,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95092
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_AGC',0,32,161,5,3
	.word	101204
	.byte	12,32,164,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95354
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_AGCF',0,32,169,5,3
	.word	101265
	.byte	12,32,172,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95909
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_AGFSP',0,32,177,5,3
	.word	101327
	.byte	12,32,180,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	96466
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_CLC',0,32,185,5,3
	.word	101390
	.byte	12,32,188,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	96609
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_CMD',0,32,193,5,3
	.word	101451
	.byte	12,32,196,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	96712
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_DBG',0,32,201,5,3
	.word	101512
	.byte	12,32,204,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	96800
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_FSP',0,32,209,5,3
	.word	101573
	.byte	12,32,212,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	96955
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_ID',0,32,217,5,3
	.word	101634
	.byte	12,32,220,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97065
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_KEYS',0,32,225,5,3
	.word	101694
	.byte	12,32,228,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97177
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_OCS',0,32,233,5,3
	.word	101756
	.byte	12,32,236,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97369
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_PCTL',0,32,241,5,3
	.word	101817
	.byte	12,32,244,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97600
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_RMCTL',0,32,249,5,3
	.word	101879
	.byte	12,32,252,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98304
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_RMEF',0,32,129,6,3
	.word	101942
	.byte	12,32,132,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	99006
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_RMSTS',0,32,137,6,3
	.word	102004
	.byte	12,32,140,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	99721
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_RTAC00',0,32,145,6,3
	.word	102067
	.byte	12,32,148,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	99889
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_RTAC01',0,32,153,6,3
	.word	102131
	.byte	12,32,156,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	100057
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_RTAC10',0,32,161,6,3
	.word	102195
	.byte	12,32,164,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	100225
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_RTAC11',0,32,169,6,3
	.word	102259
	.byte	12,32,172,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	100393
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_RTC',0,32,177,6,3
	.word	102323
	.byte	12,32,180,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	100513
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_STS',0,32,185,6,3
	.word	102384
	.byte	20
	.byte	'IfxScuCcu_Fsource',0,7,177,2,3
	.word	19193
	.byte	17,7,210,2,9,1,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy30',0,1,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy60',0,2,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy120',0,3,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy240',0,4,0,20
	.byte	'IfxScuCcu_LowPowerDivRatio',0,7,216,2,3
	.word	102472
	.byte	17,7,220,2,9,1,18
	.byte	'IfxScuCcu_ModulationAmplitude_0p5',0,0,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p0',0,1,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p25',0,2,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p5',0,3,18
	.byte	'IfxScuCcu_ModulationAmplitude_2p0',0,4,18
	.byte	'IfxScuCcu_ModulationAmplitude_2p5',0,5,18
	.byte	'IfxScuCcu_ModulationAmplitude_count',0,6,0,20
	.byte	'IfxScuCcu_ModulationAmplitude',0,7,229,2,3
	.word	102665
	.byte	17,7,254,3,9,1,18
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc1',0,0,18
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc0',0,1,18
	.byte	'IfxScuCcu_PllInputClockSelection_fSysclk',0,2,0,20
	.byte	'IfxScuCcu_PllInputClockSelection',0,7,131,4,3
	.word	102966
	.byte	17,7,135,4,9,1,18
	.byte	'IfxScuCcu_Traprequest_esr0',0,0,18
	.byte	'IfxScuCcu_Traprequest_esr1',0,1,18
	.byte	'IfxScuCcu_Traprequest_trap2',0,2,18
	.byte	'IfxScuCcu_Traprequest_smu',0,3,0,20
	.byte	'IfxScuCcu_Traprequest',0,7,141,4,3
	.word	103140
	.byte	17,7,147,4,9,1,18
	.byte	'IfxScuCcu_ModEn_disabled',0,0,18
	.byte	'IfxScuCcu_ModEn_enabled',0,1,0,20
	.byte	'IfxScuCcu_ModEn',0,7,151,4,3
	.word	103294
	.byte	38,7,162,4,9,6,13
	.byte	'pDivider',0
	.word	613
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	613
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	613
	.byte	1,2,35,2,13
	.byte	'k3Divider',0
	.word	613
	.byte	1,2,35,3,13
	.byte	'k3DividerBypass',0
	.word	613
	.byte	1,2,35,4,0,20
	.byte	'IfxScuCcu_PerPllConfig',0,7,171,4,3
	.word	103379
	.byte	38,7,176,4,9,4,13
	.byte	'pDivider',0
	.word	613
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	613
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	613
	.byte	1,2,35,2,0,20
	.byte	'IfxScuCcu_SysPllConfig',0,7,181,4,3
	.word	103517
	.byte	38,7,189,4,9,8,13
	.byte	'value',0
	.word	9946
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	9946
	.byte	4,2,35,4,0,20
	.byte	'IfxScuCcu_CcuconRegConfig',0,7,193,4,3
	.word	103611
	.byte	38,7,197,4,9,6,13
	.byte	'k2Step',0
	.word	613
	.byte	1,2,35,0,13
	.byte	'waitTime',0
	.word	234
	.byte	4,2,35,2,0,20
	.byte	'IfxScuCcu_PllStepConfig',0,7,201,4,3
	.word	103682
	.byte	38,7,205,4,9,16,13
	.byte	'xtalFrequency',0
	.word	9946
	.byte	4,2,35,0,13
	.byte	'pllInputClockSelection',0
	.word	102966
	.byte	1,2,35,4,13
	.byte	'sysPllConfig',0
	.word	103517
	.byte	4,2,35,6,13
	.byte	'perPllConfig',0
	.word	103379
	.byte	6,2,35,10,0,20
	.byte	'IfxScuCcu_pllsParameterConfig',0,7,211,4,3
	.word	103756
	.byte	38,7,219,4,9,8,13
	.byte	'value',0
	.word	9946
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	9946
	.byte	4,2,35,4,0,20
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,7,223,4,3
	.word	103901
	.byte	38,7,231,4,9,80,13
	.byte	'ccucon0',0
	.word	103611
	.byte	8,2,35,0,13
	.byte	'ccucon1',0
	.word	103611
	.byte	8,2,35,8,13
	.byte	'ccucon2',0
	.word	103611
	.byte	8,2,35,16,13
	.byte	'ccucon5',0
	.word	103611
	.byte	8,2,35,24,13
	.byte	'ccucon6',0
	.word	103611
	.byte	8,2,35,32,13
	.byte	'ccucon7',0
	.word	103611
	.byte	8,2,35,40,13
	.byte	'ccucon8',0
	.word	103611
	.byte	8,2,35,48,13
	.byte	'ccucon9',0
	.word	103611
	.byte	8,2,35,56,13
	.byte	'ccucon10',0
	.word	103611
	.byte	8,2,35,64,13
	.byte	'ccucon11',0
	.word	103611
	.byte	8,2,35,72,0,20
	.byte	'IfxScuCcu_ClockDistributionConfig',0,7,243,4,3
	.word	103977
	.byte	38,7,247,4,9,20,13
	.byte	'pllsParameters',0
	.word	103756
	.byte	16,2,35,0,13
	.byte	'waitTime',0
	.word	234
	.byte	4,2,35,16,0,20
	.byte	'IfxScuCcu_InitialStepConfig',0,7,251,4,3
	.word	104199
	.byte	24
	.word	103682
	.byte	3
	.word	104285
	.byte	38,7,255,4,9,8,13
	.byte	'numOfSteps',0
	.word	613
	.byte	1,2,35,0,13
	.byte	'pllSteps',0
	.word	104290
	.byte	4,2,35,4,0,20
	.byte	'IfxScuCcu_PllThrottleConfig',0,7,131,5,3
	.word	104295
	.byte	38,7,137,5,9,2,13
	.byte	'Mod_Enable',0
	.word	103294
	.byte	1,2,35,0,13
	.byte	'Mod_Amp',0
	.word	102665
	.byte	1,2,35,1,0,20
	.byte	'IfxScuCcu_Mod_Config',0,7,141,5,3
	.word	104377
	.byte	17,8,141,1,9,1,18
	.byte	'IfxCpu_CounterMode_normal',0,0,18
	.byte	'IfxCpu_CounterMode_task',0,1,0,20
	.byte	'IfxCpu_CounterMode',0,8,145,1,3
	.word	104451
	.byte	38,8,198,1,9,6,13
	.byte	'counter',0
	.word	9946
	.byte	4,2,35,0,13
	.byte	'overlfow',0
	.word	613
	.byte	1,2,35,4,0,20
	.byte	'IfxCpu_Counter',0,8,202,1,3
	.word	104540
	.byte	38,8,210,1,9,32,13
	.byte	'instruction',0
	.word	104540
	.byte	6,2,35,0,13
	.byte	'clock',0
	.word	104540
	.byte	6,2,35,6,13
	.byte	'counter1',0
	.word	104540
	.byte	6,2,35,12,13
	.byte	'counter2',0
	.word	104540
	.byte	6,2,35,18,13
	.byte	'counter3',0
	.word	104540
	.byte	6,2,35,24,0,20
	.byte	'IfxCpu_Perf',0,8,217,1,3
	.word	104606
	.byte	20
	.byte	'IfxSrc_Tos',0,12,75,3
	.word	10596
	.byte	10
	.byte	'_Ifx_CBS_ACCEN0_Bits',0,33,68,16,4,11
	.byte	'EN0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_CBS_ACCEN0_Bits',0,33,102,3
	.word	104743
	.byte	10
	.byte	'_Ifx_CBS_ACCEN1_Bits',0,33,105,16,4,11
	.byte	'reserved_0',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CBS_ACCEN1_Bits',0,33,108,3
	.word	105300
	.byte	10
	.byte	'_Ifx_CBS_COMDATA_Bits',0,33,111,16,4,11
	.byte	'DATA',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CBS_COMDATA_Bits',0,33,114,3
	.word	105377
	.byte	10
	.byte	'_Ifx_CBS_ICTSA_Bits',0,33,117,16,4,11
	.byte	'ADDR',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CBS_ICTSA_Bits',0,33,120,3
	.word	105450
	.byte	10
	.byte	'_Ifx_CBS_ICTTA_Bits',0,33,123,16,4,11
	.byte	'ADDR',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CBS_ICTTA_Bits',0,33,126,3
	.word	105519
	.byte	10
	.byte	'_Ifx_CBS_IFSA_Bits',0,33,129,1,16,4,11
	.byte	'ADDR',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CBS_IFSA_Bits',0,33,132,1,3
	.word	105588
	.byte	10
	.byte	'_Ifx_CBS_IFSC_Bits',0,33,135,1,16,4,11
	.byte	'GO',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'OTGS',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'MODE',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'PRIO',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'RSREP',0,4
	.word	461
	.byte	4,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	461
	.byte	4,16,2,35,0,11
	.byte	'BM0',0,4
	.word	461
	.byte	2,14,2,35,0,11
	.byte	'BM1',0,4
	.word	461
	.byte	2,12,2,35,0,11
	.byte	'BM2',0,4
	.word	461
	.byte	2,10,2,35,0,11
	.byte	'BM3',0,4
	.word	461
	.byte	2,8,2,35,0,11
	.byte	'BM4',0,4
	.word	461
	.byte	2,6,2,35,0,11
	.byte	'BM5',0,4
	.word	461
	.byte	2,4,2,35,0,11
	.byte	'BM6',0,4
	.word	461
	.byte	2,2,2,35,0,11
	.byte	'BM7',0,4
	.word	461
	.byte	2,0,2,35,0,0,20
	.byte	'Ifx_CBS_IFSC_Bits',0,33,152,1,3
	.word	105657
	.byte	10
	.byte	'_Ifx_CBS_INTMOD_Bits',0,33,155,1,16,4,11
	.byte	'SET_CRS',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'SET_CWS',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'SET_CS',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'CLR_CS',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'CHANNEL_P',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'CHANNEL',0,4
	.word	461
	.byte	3,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	8,16,2,35,0,11
	.byte	'SET_INT_MOD',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'SET_INT_TRC',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'CLR_INT_TRC',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'TRC_MOD_P',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'TRC_MOD',0,4
	.word	461
	.byte	2,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'INT_MOD',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'INT_TRC',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	461
	.byte	6,0,2,35,0,0,20
	.byte	'Ifx_CBS_INTMOD_Bits',0,33,174,1,3
	.word	105954
	.byte	10
	.byte	'_Ifx_CBS_IOSR_Bits',0,33,177,1,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'CRSYNC',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'CWSYNC',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'CW_ACK',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'COM_SYNC',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'HOSTED',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	461
	.byte	3,20,2,35,0,11
	.byte	'CHANNEL',0,4
	.word	461
	.byte	3,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	461
	.byte	17,0,2,35,0,0,20
	.byte	'Ifx_CBS_IOSR_Bits',0,33,188,1,3
	.word	106363
	.byte	10
	.byte	'_Ifx_CBS_JDPID_Bits',0,33,191,1,16,4,11
	.byte	'MOD_REV',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_CBS_JDPID_Bits',0,33,196,1,3
	.word	106594
	.byte	10
	.byte	'_Ifx_CBS_JTAGID_Bits',0,33,199,1,16,4,11
	.byte	'JTAG_ID',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CBS_JTAGID_Bits',0,33,202,1,3
	.word	106710
	.byte	10
	.byte	'_Ifx_CBS_OCNTRL_Bits',0,33,205,1,16,4,11
	.byte	'OC0_P',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'OC0',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'OC1_P',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'OC1',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'OC2_P',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'OC2',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'OC3_P',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'OC3',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'OC4_P',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'OC4',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'OC5_P',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'OC5',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'WDTSUS_P',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'WDTSUS',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'STABLE_P',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'STABLE',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'OJC0_P',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'OJC0',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'OJC1_P',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'OJC1',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'OJC2_P',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'OJC2',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'OJC3_P',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'OJC3',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'OJC4_P',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'OJC4',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'OJC5_P',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'OJC5',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'OJC6_P',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'OJC6',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'OJC7_P',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'OJC7',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CBS_OCNTRL_Bits',0,33,239,1,3
	.word	106786
	.byte	10
	.byte	'_Ifx_CBS_OEC_Bits',0,33,242,1,16,4,11
	.byte	'PAT',0,4
	.word	461
	.byte	8,24,2,35,0,11
	.byte	'DS',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'OCO',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	461
	.byte	6,16,2,35,0,11
	.byte	'IF_LCK_P',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'IF_LCK',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'AUT_OK_P',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'AUT_OK',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	461
	.byte	12,0,2,35,0,0,20
	.byte	'Ifx_CBS_OEC_Bits',0,33,253,1,3
	.word	107383
	.byte	10
	.byte	'_Ifx_CBS_OIFM_Bits',0,33,128,2,16,4,11
	.byte	'DAPMODE',0,4
	.word	461
	.byte	3,29,2,35,0,11
	.byte	'DAPRST',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'F_JTAG',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'N_JTAG',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	461
	.byte	2,20,2,35,0,11
	.byte	'PADCTL',0,4
	.word	461
	.byte	2,18,2,35,0,11
	.byte	'PADCTLI',0,4
	.word	461
	.byte	2,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_CBS_OIFM_Bits',0,33,139,2,3
	.word	107600
	.byte	10
	.byte	'_Ifx_CBS_OSTATE_Bits',0,33,142,2,16,4,11
	.byte	'OEN',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'OC0',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'OC1',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'OC2',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'ENIDIS',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'EECTRC',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'EECDIS',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'WDTSUS',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'HARR',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'OJC1',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'OJC2',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'OJC3',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'RSTCL0',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'RSTCL1',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'OJC6',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'RSTCL3',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'IF_LCK',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'AUT_OK',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'STABLE',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'OCO',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	630
	.byte	12,0,2,35,2,0,20
	.byte	'Ifx_CBS_OSTATE_Bits',0,33,165,2,3
	.word	107831
	.byte	10
	.byte	'_Ifx_CBS_TCCB_Bits',0,33,168,2,16,4,11
	.byte	'C0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'C1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'C2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'C3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'C4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'C5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	438
	.byte	25,1,2,35,0,11
	.byte	'HSM',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_CBS_TCCB_Bits',0,33,178,2,3
	.word	108246
	.byte	10
	.byte	'_Ifx_CBS_TCCH_Bits',0,33,181,2,16,4,11
	.byte	'C0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'C1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'C2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'C3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'C4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'C5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	438
	.byte	25,1,2,35,0,11
	.byte	'HSM',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_CBS_TCCH_Bits',0,33,191,2,3
	.word	108420
	.byte	10
	.byte	'_Ifx_CBS_TCIP_Bits',0,33,194,2,16,4,11
	.byte	'P0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	438
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_CBS_TCIP_Bits',0,33,205,2,3
	.word	108594
	.byte	10
	.byte	'_Ifx_CBS_TCM_Bits',0,33,208,2,16,4,11
	.byte	'BRK',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'SUS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	6,0,2,35,0,11
	.byte	'T0',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'T1',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'T2',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'T3',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	438
	.byte	20,0,2,35,0,0,20
	.byte	'Ifx_CBS_TCM_Bits',0,33,218,2,3
	.word	108781
	.byte	10
	.byte	'_Ifx_CBS_TCTGB_Bits',0,33,221,2,16,4,11
	.byte	'OTGB0',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'OTGB1',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_CBS_TCTGB_Bits',0,33,225,2,3
	.word	108963
	.byte	10
	.byte	'_Ifx_CBS_TCTL_Bits',0,33,228,2,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TL1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TL2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'TL3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'TL4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'TL5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'TL6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'TL7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	438
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_CBS_TCTL_Bits',0,33,239,2,3
	.word	109052
	.byte	10
	.byte	'_Ifx_CBS_TIPR_Bits',0,33,242,2,16,4,11
	.byte	'PIN0',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'PIN1',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'PIN2',0,4
	.word	461
	.byte	4,20,2,35,0,11
	.byte	'PIN3',0,4
	.word	461
	.byte	4,16,2,35,0,11
	.byte	'PIN4',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'PIN5',0,4
	.word	461
	.byte	4,8,2,35,0,11
	.byte	'PIN6',0,4
	.word	461
	.byte	4,4,2,35,0,11
	.byte	'PIN7',0,4
	.word	461
	.byte	4,0,2,35,0,0,20
	.byte	'Ifx_CBS_TIPR_Bits',0,33,252,2,3
	.word	109254
	.byte	10
	.byte	'_Ifx_CBS_TL1ST_Bits',0,33,255,2,16,4,11
	.byte	'C0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'C1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'C2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'C3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'C4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'C5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	461
	.byte	18,8,2,35,0,11
	.byte	'M0',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'M1',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'M2',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'HSS1',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'HSS0',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'DMA',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'DMA1',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'HSM',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CBS_TL1ST_Bits',0,33,144,3,3
	.word	109435
	.byte	10
	.byte	'_Ifx_CBS_TLC_Bits',0,33,147,3,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'TLSP1',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'TLSP2',0,4
	.word	461
	.byte	4,20,2,35,0,11
	.byte	'TLSP3',0,4
	.word	461
	.byte	4,16,2,35,0,11
	.byte	'TLSP4',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'TLSP5',0,4
	.word	461
	.byte	4,8,2,35,0,11
	.byte	'TLSP6',0,4
	.word	461
	.byte	4,4,2,35,0,11
	.byte	'TLSP7',0,4
	.word	461
	.byte	4,0,2,35,0,0,20
	.byte	'Ifx_CBS_TLC_Bits',0,33,157,3,3
	.word	109716
	.byte	10
	.byte	'_Ifx_CBS_TLCC_Bits',0,33,160,3,16,4,11
	.byte	'TGL',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'LE',0,4
	.word	461
	.byte	3,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'CLR',0,4
	.word	461
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	461
	.byte	2,20,2,35,0,11
	.byte	'STOP',0,4
	.word	461
	.byte	2,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	461
	.byte	18,0,2,35,0,0,20
	.byte	'Ifx_CBS_TLCC_Bits',0,33,169,3,3
	.word	109908
	.byte	10
	.byte	'_Ifx_CBS_TLCHE_Bits',0,33,172,3,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'TL1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'TL2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'TL3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	461
	.byte	28,0,2,35,0,0,20
	.byte	'Ifx_CBS_TLCHE_Bits',0,33,179,3,3
	.word	110089
	.byte	10
	.byte	'_Ifx_CBS_TLCHS_Bits',0,33,182,3,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'TL1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'TL2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'TL3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	461
	.byte	28,0,2,35,0,0,20
	.byte	'Ifx_CBS_TLCHS_Bits',0,33,189,3,3
	.word	110233
	.byte	10
	.byte	'_Ifx_CBS_TLCV_Bits',0,33,192,3,16,4,11
	.byte	'CV',0,4
	.word	438
	.byte	31,1,2,35,0,11
	.byte	'SO',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_CBS_TLCV_Bits',0,33,196,3,3
	.word	110377
	.byte	10
	.byte	'_Ifx_CBS_TLS_Bits',0,33,199,3,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TL1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TL2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'TL3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'TL4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'TL5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'TL6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'TL7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	438
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_CBS_TLS_Bits',0,33,210,3,3
	.word	110458
	.byte	10
	.byte	'_Ifx_CBS_TLT_Bits',0,33,213,3,16,4,11
	.byte	'TGL',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'VTZ',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'RL',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	461
	.byte	10,16,2,35,0,11
	.byte	'TIM',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_CBS_TLT_Bits',0,33,220,3,3
	.word	110658
	.byte	10
	.byte	'_Ifx_CBS_TLTTH_Bits',0,33,223,3,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	2,30,2,35,0,11
	.byte	'TL1',0,4
	.word	461
	.byte	2,28,2,35,0,11
	.byte	'TL2',0,4
	.word	461
	.byte	2,26,2,35,0,11
	.byte	'TL3',0,4
	.word	461
	.byte	2,24,2,35,0,11
	.byte	'TL4',0,4
	.word	461
	.byte	2,22,2,35,0,11
	.byte	'TL5',0,4
	.word	461
	.byte	2,20,2,35,0,11
	.byte	'TL6',0,4
	.word	461
	.byte	2,18,2,35,0,11
	.byte	'TL7',0,4
	.word	461
	.byte	2,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_CBS_TLTTH_Bits',0,33,234,3,3
	.word	110790
	.byte	10
	.byte	'_Ifx_CBS_TOPPS_Bits',0,33,237,3,16,4,11
	.byte	'PIN0',0,4
	.word	461
	.byte	2,30,2,35,0,11
	.byte	'PIN1',0,4
	.word	461
	.byte	2,28,2,35,0,11
	.byte	'PIN2',0,4
	.word	461
	.byte	2,26,2,35,0,11
	.byte	'PIN3',0,4
	.word	461
	.byte	2,24,2,35,0,11
	.byte	'PIN4',0,4
	.word	461
	.byte	2,22,2,35,0,11
	.byte	'PIN5',0,4
	.word	461
	.byte	2,20,2,35,0,11
	.byte	'PIN6',0,4
	.word	461
	.byte	2,18,2,35,0,11
	.byte	'PIN7',0,4
	.word	461
	.byte	2,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_CBS_TOPPS_Bits',0,33,248,3,3
	.word	110995
	.byte	10
	.byte	'_Ifx_CBS_TOPR_Bits',0,33,251,3,16,4,11
	.byte	'PIN0',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'PIN1',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'PIN2',0,4
	.word	461
	.byte	4,20,2,35,0,11
	.byte	'PIN3',0,4
	.word	461
	.byte	4,16,2,35,0,11
	.byte	'PIN4',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'PIN5',0,4
	.word	461
	.byte	4,8,2,35,0,11
	.byte	'PIN6',0,4
	.word	461
	.byte	4,4,2,35,0,11
	.byte	'PIN7',0,4
	.word	461
	.byte	4,0,2,35,0,0,20
	.byte	'Ifx_CBS_TOPR_Bits',0,33,133,4,3
	.word	111201
	.byte	10
	.byte	'_Ifx_CBS_TRC_Bits',0,33,136,4,16,4,11
	.byte	'HALT',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'BRKOUT',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'BT1',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	461
	.byte	11,12,2,35,0,11
	.byte	'BRKIN',0,4
	.word	461
	.byte	4,8,2,35,0,11
	.byte	'SUSIN',0,4
	.word	461
	.byte	4,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	461
	.byte	4,0,2,35,0,0,20
	.byte	'Ifx_CBS_TRC_Bits',0,33,145,4,3
	.word	111382
	.byte	10
	.byte	'_Ifx_CBS_TREC_Bits',0,33,148,4,16,4,11
	.byte	'TR0EV',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'TR2EV',0,4
	.word	461
	.byte	4,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	461
	.byte	4,16,2,35,0,11
	.byte	'TR4EV',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	461
	.byte	4,8,2,35,0,11
	.byte	'TR6EV',0,4
	.word	461
	.byte	4,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	461
	.byte	4,0,2,35,0,0,20
	.byte	'Ifx_CBS_TREC_Bits',0,33,158,4,3
	.word	111561
	.byte	10
	.byte	'_Ifx_CBS_TRHSM_Bits',0,33,161,4,16,4,11
	.byte	'HALT',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'BRKOUT',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'BT1',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	461
	.byte	11,12,2,35,0,11
	.byte	'BRKIN',0,4
	.word	461
	.byte	4,8,2,35,0,11
	.byte	'SUSIN',0,4
	.word	461
	.byte	4,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	461
	.byte	4,0,2,35,0,0,20
	.byte	'Ifx_CBS_TRHSM_Bits',0,33,170,4,3
	.word	111773
	.byte	10
	.byte	'_Ifx_CBS_TRIG_Bits',0,33,173,4,16,4,11
	.byte	'TRGX_0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TRGX_1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TRGX_2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'TRGX_3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'TRGX_4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'TRGX_5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'TRGX_6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'TRGX_7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'TRGX_8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'TRGX_9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'TRGX_10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'TRGX_11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'TRGX_12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'TRGX_13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'TRGX_14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'TRGX_15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	613
	.byte	8,0,2,35,2,11
	.byte	'X',0,1
	.word	613
	.byte	8,0,2,35,3,0,20
	.byte	'Ifx_CBS_TRIG_Bits',0,33,193,4,3
	.word	111956
	.byte	10
	.byte	'_Ifx_CBS_TRIGC_Bits',0,33,196,4,16,4,11
	.byte	'TRGX_0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TRGX_1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TRGX_2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'TRGX_3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'TRGX_4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'TRGX_5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'TRGX_6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'TRGX_7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'TRGX_8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'TRGX_9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'TRGX_10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'TRGX_11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'TRGX_12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'TRGX_13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'TRGX_14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'TRGX_15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	613
	.byte	8,0,2,35,2,11
	.byte	'X',0,1
	.word	613
	.byte	8,0,2,35,3,0,20
	.byte	'Ifx_CBS_TRIGC_Bits',0,33,216,4,3
	.word	112339
	.byte	10
	.byte	'_Ifx_CBS_TRIGS_Bits',0,33,219,4,16,4,11
	.byte	'BITNUM',0,4
	.word	461
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_CBS_TRIGS_Bits',0,33,223,4,3
	.word	112724
	.byte	10
	.byte	'_Ifx_CBS_TRMC_Bits',0,33,226,4,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'BRKOUT',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'SUSOUT',0,4
	.word	461
	.byte	4,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	461
	.byte	4,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'BRKIN',0,4
	.word	461
	.byte	4,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	461
	.byte	8,0,2,35,0,0,20
	.byte	'Ifx_CBS_TRMC_Bits',0,33,235,4,3
	.word	112819
	.byte	10
	.byte	'_Ifx_CBS_TRMT_Bits',0,33,238,4,16,4,11
	.byte	'TG0',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'TG1',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'TG2',0,4
	.word	461
	.byte	4,20,2,35,0,11
	.byte	'TG3',0,4
	.word	461
	.byte	4,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_CBS_TRMT_Bits',0,33,245,4,3
	.word	113016
	.byte	10
	.byte	'_Ifx_CBS_TRSS_Bits',0,33,248,4,16,4,11
	.byte	'TT',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'IFS',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	8,16,2,35,0,11
	.byte	'SRC0',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'SRC1',0,4
	.word	461
	.byte	4,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	461
	.byte	8,0,2,35,0,0,20
	.byte	'Ifx_CBS_TRSS_Bits',0,33,128,5,3
	.word	113152
	.byte	10
	.byte	'_Ifx_CBS_TRTGB_H_Bits',0,33,131,5,16,4,11
	.byte	'TG8',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'TG9',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'TG10',0,4
	.word	461
	.byte	4,20,2,35,0,11
	.byte	'TG11',0,4
	.word	461
	.byte	4,16,2,35,0,11
	.byte	'TG12',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'TG13',0,4
	.word	461
	.byte	4,8,2,35,0,11
	.byte	'TG14',0,4
	.word	461
	.byte	4,4,2,35,0,11
	.byte	'TG15',0,4
	.word	461
	.byte	4,0,2,35,0,0,20
	.byte	'Ifx_CBS_TRTGB_H_Bits',0,33,141,5,3
	.word	113311
	.byte	10
	.byte	'_Ifx_CBS_TRTGB_L_Bits',0,33,144,5,16,4,11
	.byte	'TG0',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'TG1',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'TG2',0,4
	.word	461
	.byte	4,20,2,35,0,11
	.byte	'TG3',0,4
	.word	461
	.byte	4,16,2,35,0,11
	.byte	'TG4',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'TG5',0,4
	.word	461
	.byte	4,8,2,35,0,11
	.byte	'TG6',0,4
	.word	461
	.byte	4,4,2,35,0,11
	.byte	'TG7',0,4
	.word	461
	.byte	4,0,2,35,0,0,20
	.byte	'Ifx_CBS_TRTGB_L_Bits',0,33,154,5,3
	.word	113496
	.byte	12,33,162,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104743
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_ACCEN0',0,33,167,5,3
	.word	113675
	.byte	12,33,170,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	105300
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_ACCEN1',0,33,175,5,3
	.word	113739
	.byte	12,33,178,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	105377
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_COMDATA',0,33,183,5,3
	.word	113803
	.byte	12,33,186,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	105450
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_ICTSA',0,33,191,5,3
	.word	113868
	.byte	12,33,194,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	105519
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_ICTTA',0,33,199,5,3
	.word	113931
	.byte	12,33,202,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	105588
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_IFSA',0,33,207,5,3
	.word	113994
	.byte	12,33,210,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	105657
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_IFSC',0,33,215,5,3
	.word	114056
	.byte	12,33,218,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	105954
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_INTMOD',0,33,223,5,3
	.word	114118
	.byte	12,33,226,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	106363
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_IOSR',0,33,231,5,3
	.word	114182
	.byte	12,33,234,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	106594
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_JDPID',0,33,239,5,3
	.word	114244
	.byte	12,33,242,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	106710
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_JTAGID',0,33,247,5,3
	.word	114307
	.byte	12,33,250,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	106786
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_OCNTRL',0,33,255,5,3
	.word	114371
	.byte	12,33,130,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107383
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_OEC',0,33,135,6,3
	.word	114435
	.byte	12,33,138,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107600
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_OIFM',0,33,143,6,3
	.word	114496
	.byte	12,33,146,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107831
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_OSTATE',0,33,151,6,3
	.word	114558
	.byte	12,33,154,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108246
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TCCB',0,33,159,6,3
	.word	114622
	.byte	12,33,162,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108420
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TCCH',0,33,167,6,3
	.word	114684
	.byte	12,33,170,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108594
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TCIP',0,33,175,6,3
	.word	114746
	.byte	12,33,178,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108781
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TCM',0,33,183,6,3
	.word	114808
	.byte	12,33,186,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108963
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TCTGB',0,33,191,6,3
	.word	114869
	.byte	12,33,194,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109052
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TCTL',0,33,199,6,3
	.word	114932
	.byte	12,33,202,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109254
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TIPR',0,33,207,6,3
	.word	114994
	.byte	12,33,210,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109435
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TL1ST',0,33,215,6,3
	.word	115056
	.byte	12,33,218,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109716
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TLC',0,33,223,6,3
	.word	115119
	.byte	12,33,226,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109908
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TLCC',0,33,231,6,3
	.word	115180
	.byte	12,33,234,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110089
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TLCHE',0,33,239,6,3
	.word	115242
	.byte	12,33,242,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110233
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TLCHS',0,33,247,6,3
	.word	115305
	.byte	12,33,250,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110377
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TLCV',0,33,255,6,3
	.word	115368
	.byte	12,33,130,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110458
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TLS',0,33,135,7,3
	.word	115430
	.byte	12,33,138,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110658
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TLT',0,33,143,7,3
	.word	115491
	.byte	12,33,146,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110790
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TLTTH',0,33,151,7,3
	.word	115552
	.byte	12,33,154,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110995
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TOPPS',0,33,159,7,3
	.word	115615
	.byte	12,33,162,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111201
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TOPR',0,33,167,7,3
	.word	115678
	.byte	12,33,170,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111382
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TRC',0,33,175,7,3
	.word	115740
	.byte	12,33,178,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111561
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TREC',0,33,183,7,3
	.word	115801
	.byte	12,33,186,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111773
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TRHSM',0,33,191,7,3
	.word	115863
	.byte	12,33,194,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111956
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TRIG',0,33,199,7,3
	.word	115926
	.byte	12,33,202,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	112339
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TRIGC',0,33,207,7,3
	.word	115988
	.byte	12,33,210,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	112724
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TRIGS',0,33,215,7,3
	.word	116051
	.byte	12,33,218,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	112819
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TRMC',0,33,223,7,3
	.word	116114
	.byte	12,33,226,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	113016
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TRMT',0,33,231,7,3
	.word	116176
	.byte	12,33,234,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	113152
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TRSS',0,33,239,7,3
	.word	116238
	.byte	12,33,242,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	113311
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TRTGB_H',0,33,247,7,3
	.word	116300
	.byte	12,33,250,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	113496
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TRTGB_L',0,33,255,7,3
	.word	116365
	.byte	10
	.byte	'_Ifx_CBS_TRTGB',0,33,139,8,25,8,13
	.byte	'L',0
	.word	116365
	.byte	4,2,35,0,13
	.byte	'H',0
	.word	116300
	.byte	4,2,35,4,0,14
	.word	116430
	.byte	20
	.byte	'Ifx_CBS_TRTGB',0,33,143,8,3
	.word	116474
	.byte	20
	.byte	'IfxStm_Comparator',0,13,161,1,3
	.word	20596
	.byte	17,13,165,1,9,1,18
	.byte	'IfxStm_ComparatorInterrupt_ir0',0,0,18
	.byte	'IfxStm_ComparatorInterrupt_ir1',0,1,0,20
	.byte	'IfxStm_ComparatorInterrupt',0,13,169,1,3
	.word	116529
	.byte	17,13,173,1,9,1,18
	.byte	'IfxStm_ComparatorOffset_0',0,0,18
	.byte	'IfxStm_ComparatorOffset_1',0,1,18
	.byte	'IfxStm_ComparatorOffset_2',0,2,18
	.byte	'IfxStm_ComparatorOffset_3',0,3,18
	.byte	'IfxStm_ComparatorOffset_4',0,4,18
	.byte	'IfxStm_ComparatorOffset_5',0,5,18
	.byte	'IfxStm_ComparatorOffset_6',0,6,18
	.byte	'IfxStm_ComparatorOffset_7',0,7,18
	.byte	'IfxStm_ComparatorOffset_8',0,8,18
	.byte	'IfxStm_ComparatorOffset_9',0,9,18
	.byte	'IfxStm_ComparatorOffset_10',0,10,18
	.byte	'IfxStm_ComparatorOffset_11',0,11,18
	.byte	'IfxStm_ComparatorOffset_12',0,12,18
	.byte	'IfxStm_ComparatorOffset_13',0,13,18
	.byte	'IfxStm_ComparatorOffset_14',0,14,18
	.byte	'IfxStm_ComparatorOffset_15',0,15,18
	.byte	'IfxStm_ComparatorOffset_16',0,16,18
	.byte	'IfxStm_ComparatorOffset_17',0,17,18
	.byte	'IfxStm_ComparatorOffset_18',0,18,18
	.byte	'IfxStm_ComparatorOffset_19',0,19,18
	.byte	'IfxStm_ComparatorOffset_20',0,20,18
	.byte	'IfxStm_ComparatorOffset_21',0,21,18
	.byte	'IfxStm_ComparatorOffset_22',0,22,18
	.byte	'IfxStm_ComparatorOffset_23',0,23,18
	.byte	'IfxStm_ComparatorOffset_24',0,24,18
	.byte	'IfxStm_ComparatorOffset_25',0,25,18
	.byte	'IfxStm_ComparatorOffset_26',0,26,18
	.byte	'IfxStm_ComparatorOffset_27',0,27,18
	.byte	'IfxStm_ComparatorOffset_28',0,28,18
	.byte	'IfxStm_ComparatorOffset_29',0,29,18
	.byte	'IfxStm_ComparatorOffset_30',0,30,18
	.byte	'IfxStm_ComparatorOffset_31',0,31,0,20
	.byte	'IfxStm_ComparatorOffset',0,13,207,1,3
	.word	116638
	.byte	17,13,211,1,9,1,18
	.byte	'IfxStm_ComparatorSize_1Bit',0,0,18
	.byte	'IfxStm_ComparatorSize_2Bits',0,1,18
	.byte	'IfxStm_ComparatorSize_3Bits',0,2,18
	.byte	'IfxStm_ComparatorSize_4Bits',0,3,18
	.byte	'IfxStm_ComparatorSize_5Bits',0,4,18
	.byte	'IfxStm_ComparatorSize_6Bits',0,5,18
	.byte	'IfxStm_ComparatorSize_7Bits',0,6,18
	.byte	'IfxStm_ComparatorSize_8Bits',0,7,18
	.byte	'IfxStm_ComparatorSize_9Bits',0,8,18
	.byte	'IfxStm_ComparatorSize_10Bits',0,9,18
	.byte	'IfxStm_ComparatorSize_11Bits',0,10,18
	.byte	'IfxStm_ComparatorSize_12Bits',0,11,18
	.byte	'IfxStm_ComparatorSize_13Bits',0,12,18
	.byte	'IfxStm_ComparatorSize_14Bits',0,13,18
	.byte	'IfxStm_ComparatorSize_15Bits',0,14,18
	.byte	'IfxStm_ComparatorSize_16Bits',0,15,18
	.byte	'IfxStm_ComparatorSize_17Bits',0,16,18
	.byte	'IfxStm_ComparatorSize_18Bits',0,17,18
	.byte	'IfxStm_ComparatorSize_19Bits',0,18,18
	.byte	'IfxStm_ComparatorSize_20Bits',0,19,18
	.byte	'IfxStm_ComparatorSize_21Bits',0,20,18
	.byte	'IfxStm_ComparatorSize_22Bits',0,21,18
	.byte	'IfxStm_ComparatorSize_23Bits',0,22,18
	.byte	'IfxStm_ComparatorSize_24Bits',0,23,18
	.byte	'IfxStm_ComparatorSize_25Bits',0,24,18
	.byte	'IfxStm_ComparatorSize_26Bits',0,25,18
	.byte	'IfxStm_ComparatorSize_27Bits',0,26,18
	.byte	'IfxStm_ComparatorSize_28Bits',0,27,18
	.byte	'IfxStm_ComparatorSize_29Bits',0,28,18
	.byte	'IfxStm_ComparatorSize_30Bits',0,29,18
	.byte	'IfxStm_ComparatorSize_31Bits',0,30,18
	.byte	'IfxStm_ComparatorSize_32Bits',0,31,0,20
	.byte	'IfxStm_ComparatorSize',0,13,245,1,3
	.word	117596
	.byte	17,13,250,1,9,1,18
	.byte	'IfxStm_SleepMode_enable',0,0,18
	.byte	'IfxStm_SleepMode_disable',0,1,0,20
	.byte	'IfxStm_SleepMode',0,13,254,1,3
	.word	118616
	.byte	20
	.byte	'IfxStm_SuspendMode',0,13,135,2,3
	.word	14358
	.byte	20
	.byte	'IfxStdIf_Timer_CountDir',0,16,90,3
	.word	20391
	.byte	20
	.byte	'IfxStdIf_Timer',0,16,93,32
	.word	15689
	.byte	20
	.byte	'IfxStdIf_Timer_TrigConfig',0,16,141,2,3
	.word	21381
	.byte	20
	.byte	'IfxStdIf_Timer_Config',0,16,153,2,3
	.word	21562
	.byte	20
	.byte	'IfxStm_Timer_Base',0,23,133,1,3
	.word	20493
	.byte	20
	.byte	'IfxStm_Timer',0,23,148,1,3
	.word	20647
	.byte	20
	.byte	'IfxStm_Timer_Config',0,23,157,1,3
	.word	21709
	.byte	10
	.byte	'_Ifx_GETH_ACCEN0_Bits',0,34,73,16,4,11
	.byte	'EN0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_ACCEN0_Bits',0,34,107,3
	.word	118929
	.byte	10
	.byte	'_Ifx_GETH_ACCEN1_Bits',0,34,110,16,4,11
	.byte	'reserved_0',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_ACCEN1_Bits',0,34,113,3
	.word	119488
	.byte	10
	.byte	'_Ifx_GETH_ACCEND_ACCEN0D_Bits',0,34,116,16,4,11
	.byte	'EN0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_ACCEND_ACCEN0D_Bits',0,34,150,1,3
	.word	119567
	.byte	10
	.byte	'_Ifx_GETH_ACCEND_ACCEN1D_Bits',0,34,153,1,16,4,11
	.byte	'reserved_0',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_ACCEND_ACCEN1D_Bits',0,34,156,1,3
	.word	120143
	.byte	10
	.byte	'_Ifx_GETH_CLC_Bits',0,34,159,1,16,4,11
	.byte	'DISR',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	438
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_GETH_CLC_Bits',0,34,164,1,3
	.word	120240
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_CONTROL_Bits',0,34,167,1,16,4,11
	.byte	'reserved_0',0,2
	.word	630
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	613
	.byte	2,0,2,35,1,11
	.byte	'PBLX8',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'DSL',0,1
	.word	613
	.byte	3,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	613
	.byte	3,0,2,35,2,11
	.byte	'SPH',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	613
	.byte	7,0,2,35,3,0,20
	.byte	'Ifx_GETH_DMA_CH_CONTROL_Bits',0,34,177,1,3
	.word	120347
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_CURRENT_APP_RXBUFFER_Bits',0,34,180,1,16,4,11
	.byte	'CURRBUFAPTR',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_CURRENT_APP_RXBUFFER_Bits',0,34,183,1,3
	.word	120583
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_CURRENT_APP_RXDESC_Bits',0,34,186,1,16,4,11
	.byte	'CURRDESAPTR',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_CURRENT_APP_RXDESC_Bits',0,34,189,1,3
	.word	120707
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_CURRENT_APP_TXBUFFER_Bits',0,34,192,1,16,4,11
	.byte	'CURTBUFAPTR',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_CURRENT_APP_TXBUFFER_Bits',0,34,195,1,3
	.word	120827
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_CURRENT_APP_TXDESC_Bits',0,34,198,1,16,4,11
	.byte	'CURTDESAPTR',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_CURRENT_APP_TXDESC_Bits',0,34,201,1,3
	.word	120951
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_INTERRUPT_ENABLE_Bits',0,34,204,1,16,4,11
	.byte	'TIE',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TXSE',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TBUE',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	3,2,2,35,0,11
	.byte	'RIE',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'RBUE',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'RSE',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'RWTE',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'ETIE',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'ERIE',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'FBEE',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'CDEE',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'AIE',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'NIE',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_DMA_CH_INTERRUPT_ENABLE_Bits',0,34,221,1,3
	.word	121071
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_MISS_FRAME_CNT_Bits',0,34,224,1,16,4,11
	.byte	'MFC',0,2
	.word	630
	.byte	11,5,2,35,0,11
	.byte	'reserved_11',0,1
	.word	613
	.byte	4,1,2,35,1,11
	.byte	'MFCO',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_DMA_CH_MISS_FRAME_CNT_Bits',0,34,230,1,3
	.word	121412
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_RXDESC_LIST_ADDRESS_Bits',0,34,233,1,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'RDESLA',0,4
	.word	438
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_RXDESC_LIST_ADDRESS_Bits',0,34,237,1,3
	.word	121578
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_RXDESC_RING_LENGTH_Bits',0,34,240,1,16,4,11
	.byte	'RDRL',0,2
	.word	630
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,4
	.word	438
	.byte	22,0,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_RXDESC_RING_LENGTH_Bits',0,34,244,1,3
	.word	121717
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_RXDESC_TAIL_POINTER_Bits',0,34,247,1,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'RDTP',0,4
	.word	438
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_RXDESC_TAIL_POINTER_Bits',0,34,251,1,3
	.word	121853
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_RX_CONTROL_Bits',0,34,254,1,16,4,11
	.byte	'SR',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'RBSZ_X_0',0,1
	.word	613
	.byte	2,5,2,35,0,11
	.byte	'RBSZ_13_Y',0,2
	.word	630
	.byte	12,1,2,35,0,11
	.byte	'reserved_15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'RXPBL',0,1
	.word	613
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	613
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	3,1,2,35,3,11
	.byte	'RPF',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_DMA_CH_RX_CONTROL_Bits',0,34,137,2,3
	.word	121990
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_RX_INTERRUPT_WATCHDOG_TIMER_Bits',0,34,140,2,16,4,11
	.byte	'RWT',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'RWTU',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	630
	.byte	14,0,2,35,2,0,20
	.byte	'Ifx_GETH_DMA_CH_RX_INTERRUPT_WATCHDOG_TIMER_Bits',0,34,146,2,3
	.word	122250
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_SLOT_FUNCTION_CONTROL_STATUS_Bits',0,34,149,2,16,4,11
	.byte	'ESC',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'ASC',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'SIV',0,2
	.word	630
	.byte	12,0,2,35,0,11
	.byte	'RSN',0,1
	.word	613
	.byte	4,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	630
	.byte	12,0,2,35,2,0,20
	.byte	'Ifx_GETH_DMA_CH_SLOT_FUNCTION_CONTROL_STATUS_Bits',0,34,157,2,3
	.word	122441
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_STATUS_Bits',0,34,160,2,16,4,11
	.byte	'TI',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TPS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TBU',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	3,2,2,35,0,11
	.byte	'RI',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'RBU',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'RPS',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'RWT',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'ETI',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'ERI',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'FBE',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'CDE',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'AIS',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'NIS',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'TEB',0,1
	.word	613
	.byte	3,5,2,35,2,11
	.byte	'REB',0,1
	.word	613
	.byte	3,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	630
	.byte	10,0,2,35,2,0,20
	.byte	'Ifx_GETH_DMA_CH_STATUS_Bits',0,34,179,2,3
	.word	122663
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_TXDESC_LIST_ADDRESS_Bits',0,34,182,2,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'TDESLA',0,4
	.word	438
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_TXDESC_LIST_ADDRESS_Bits',0,34,186,2,3
	.word	123004
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_TXDESC_RING_LENGTH_Bits',0,34,189,2,16,4,11
	.byte	'TDRL',0,2
	.word	630
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,4
	.word	438
	.byte	22,0,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_TXDESC_RING_LENGTH_Bits',0,34,193,2,3
	.word	123143
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_TXDESC_TAIL_POINTER_Bits',0,34,196,2,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'TDTP',0,4
	.word	438
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_TXDESC_TAIL_POINTER_Bits',0,34,200,2,3
	.word	123279
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_TX_CONTROL_Bits',0,34,203,2,16,4,11
	.byte	'ST',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TCW',0,1
	.word	613
	.byte	3,4,2,35,0,11
	.byte	'OSF',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,2
	.word	630
	.byte	7,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	613
	.byte	2,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'TXPBL',0,1
	.word	613
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	613
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_GETH_DMA_CH_TX_CONTROL_Bits',0,34,216,2,3
	.word	123416
	.byte	10
	.byte	'_Ifx_GETH_DMA_DEBUG_STATUS0_Bits',0,34,219,2,16,4,11
	.byte	'AXWHSTS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	6,0,2,35,0,11
	.byte	'RPS0',0,1
	.word	613
	.byte	4,4,2,35,1,11
	.byte	'TPS0',0,1
	.word	613
	.byte	4,0,2,35,1,11
	.byte	'RPS1',0,1
	.word	613
	.byte	4,4,2,35,2,11
	.byte	'TPS1',0,1
	.word	613
	.byte	4,0,2,35,2,11
	.byte	'RPS2',0,1
	.word	613
	.byte	4,4,2,35,3,11
	.byte	'TPS2',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_GETH_DMA_DEBUG_STATUS0_Bits',0,34,230,2,3
	.word	123718
	.byte	10
	.byte	'_Ifx_GETH_DMA_DEBUG_STATUS1_Bits',0,34,233,2,16,4,11
	.byte	'RPS3',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'TPS3',0,1
	.word	613
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	438
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_DEBUG_STATUS1_Bits',0,34,238,2,3
	.word	123958
	.byte	10
	.byte	'_Ifx_GETH_DMA_INTERRUPT_STATUS_Bits',0,34,241,2,16,4,11
	.byte	'DC0IS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'DC1IS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'DC2IS',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'DC3IS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'MTLIS',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'MACIS',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	630
	.byte	14,0,2,35,2,0,20
	.byte	'Ifx_GETH_DMA_INTERRUPT_STATUS_Bits',0,34,252,2,3
	.word	124093
	.byte	10
	.byte	'_Ifx_GETH_DMA_MODE_Bits',0,34,255,2,16,4,11
	.byte	'SWR',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'DA',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TAA',0,1
	.word	613
	.byte	3,3,2,35,0,11
	.byte	'reserved_5',0,2
	.word	630
	.byte	4,7,2,35,0,11
	.byte	'ARBC',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'TXPR',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'PR',0,1
	.word	613
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'INTM',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	630
	.byte	14,0,2,35,2,0,20
	.byte	'Ifx_GETH_DMA_MODE_Bits',0,34,140,3,3
	.word	124349
	.byte	10
	.byte	'_Ifx_GETH_DMA_SYSBUS_MODE_Bits',0,34,143,3,16,4,11
	.byte	'FB',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	613
	.byte	7,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	2,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	613
	.byte	2,4,2,35,1,11
	.byte	'AAL',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'MB',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'RB',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	613
	.byte	3,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	613
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	613
	.byte	3,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	613
	.byte	2,0,2,35,3,0,20
	.byte	'Ifx_GETH_DMA_SYSBUS_MODE_Bits',0,34,158,3,3
	.word	124609
	.byte	10
	.byte	'_Ifx_GETH_GPCTL_Bits',0,34,161,3,16,4,11
	.byte	'ALTI0',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'ALTI1',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'ALTI2',0,1
	.word	613
	.byte	2,2,2,35,0,11
	.byte	'ALTI3',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'ALTI4',0,1
	.word	613
	.byte	2,6,2,35,1,11
	.byte	'ALTI5',0,1
	.word	613
	.byte	2,4,2,35,1,11
	.byte	'ALTI6',0,1
	.word	613
	.byte	2,2,2,35,1,11
	.byte	'ALTI7',0,1
	.word	613
	.byte	2,0,2,35,1,11
	.byte	'ALTI8',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'ALTI9',0,1
	.word	613
	.byte	2,4,2,35,2,11
	.byte	'ALTI10',0,1
	.word	613
	.byte	2,2,2,35,2,11
	.byte	'EPR',0,2
	.word	630
	.byte	3,7,2,35,2,11
	.byte	'reserved_25',0,1
	.word	613
	.byte	6,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_GPCTL_Bits',0,34,177,3,3
	.word	124948
	.byte	10
	.byte	'_Ifx_GETH_ID_Bits',0,34,180,3,16,4,11
	.byte	'MODREV',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'MODNUM',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_ID_Bits',0,34,185,3,3
	.word	125254
	.byte	10
	.byte	'_Ifx_GETH_KRST0_Bits',0,34,188,3,16,4,11
	.byte	'RST',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	438
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_GETH_KRST0_Bits',0,34,193,3,3
	.word	125360
	.byte	10
	.byte	'_Ifx_GETH_KRST1_Bits',0,34,196,3,16,4,11
	.byte	'RST',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	438
	.byte	31,0,2,35,0,0,20
	.byte	'Ifx_GETH_KRST1_Bits',0,34,200,3,3
	.word	125473
	.byte	10
	.byte	'_Ifx_GETH_KRSTCLR_Bits',0,34,203,3,16,4,11
	.byte	'CLR',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	438
	.byte	31,0,2,35,0,0,20
	.byte	'Ifx_GETH_KRSTCLR_Bits',0,34,207,3,3
	.word	125567
	.byte	10
	.byte	'_Ifx_GETH_MAC_1US_TIC_COUNTER_Bits',0,34,210,3,16,4,11
	.byte	'TIC_1US_CNTR',0,2
	.word	630
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	438
	.byte	20,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_1US_TIC_COUNTER_Bits',0,34,214,3,3
	.word	125665
	.byte	10
	.byte	'_Ifx_GETH_MAC_ADDRESS_HIGH_Bits',0,34,217,3,16,4,11
	.byte	'ADDRHI',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'DCS',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	613
	.byte	6,0,2,35,2,11
	.byte	'MBC',0,1
	.word	613
	.byte	6,2,2,35,3,11
	.byte	'SA',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'AE',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_ADDRESS_HIGH_Bits',0,34,225,3,3
	.word	125797
	.byte	10
	.byte	'_Ifx_GETH_MAC_ADDRESS_HIGH0_Bits',0,34,228,3,16,4,11
	.byte	'ADDRHI',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'DCS',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	630
	.byte	13,1,2,35,2,11
	.byte	'AE',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_ADDRESS_HIGH0_Bits',0,34,234,3,3
	.word	125975
	.byte	10
	.byte	'_Ifx_GETH_MAC_ADDRESS_LOW_Bits',0,34,237,3,16,4,11
	.byte	'ADDRLO',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_ADDRESS_LOW_Bits',0,34,240,3,3
	.word	126126
	.byte	10
	.byte	'_Ifx_GETH_MAC_ADDRESS_LOW0_Bits',0,34,243,3,16,4,11
	.byte	'ADDRLO',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_ADDRESS_LOW0_Bits',0,34,246,3,3
	.word	126221
	.byte	10
	.byte	'_Ifx_GETH_MAC_CONFIGURATION_Bits',0,34,249,3,16,4,11
	.byte	'RE',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TE',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'PRELEN',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'DC',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'BL',0,1
	.word	613
	.byte	2,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'DR',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'DCRS',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'DO',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'ECRSFD',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'LM',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'DM',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'FES',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'PS',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'JE',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'JD',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'BE',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'WD',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'ACS',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'CST',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'S2KP',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'GPSLCE',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'IPG',0,1
	.word	613
	.byte	3,5,2,35,3,11
	.byte	'IPC',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'SARC',0,1
	.word	613
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_CONFIGURATION_Bits',0,34,149,4,3
	.word	126318
	.byte	10
	.byte	'_Ifx_GETH_MAC_CSR_SW_CTRL_Bits',0,34,152,4,16,4,11
	.byte	'RCWE',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	613
	.byte	7,0,2,35,0,11
	.byte	'SEEN',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	438
	.byte	23,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_CSR_SW_CTRL_Bits',0,34,158,4,3
	.word	126803
	.byte	10
	.byte	'_Ifx_GETH_MAC_DEBUG_Bits',0,34,161,4,16,4,11
	.byte	'RPESTS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'RFCFCSTS',0,1
	.word	613
	.byte	2,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	630
	.byte	13,0,2,35,0,11
	.byte	'TPESTS',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'TFCSTS',0,1
	.word	613
	.byte	2,5,2,35,2,11
	.byte	'reserved_19',0,2
	.word	630
	.byte	13,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_DEBUG_Bits',0,34,169,4,3
	.word	126956
	.byte	10
	.byte	'_Ifx_GETH_MAC_EXT_CFG1_Bits',0,34,172,4,16,4,11
	.byte	'SPLOFST',0,1
	.word	613
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'SPLM',0,1
	.word	613
	.byte	2,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	438
	.byte	22,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_EXT_CFG1_Bits',0,34,178,4,3
	.word	127140
	.byte	10
	.byte	'_Ifx_GETH_MAC_EXT_CONFIGURATION_Bits',0,34,181,4,16,4,11
	.byte	'GPSL',0,2
	.word	630
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	613
	.byte	2,0,2,35,1,11
	.byte	'DCRCC',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'SPEN',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'USP',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'HDSMS',0,1
	.word	613
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'EIPGEN',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'EIPG',0,1
	.word	613
	.byte	5,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'FHE',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_EXT_CONFIGURATION_Bits',0,34,195,4,3
	.word	127291
	.byte	10
	.byte	'_Ifx_GETH_MAC_HW_FEATURE0_Bits',0,34,198,4,16,4,11
	.byte	'MIISEL',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'GMIISEL',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'HDSEL',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'PCSSEL',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'VLHASH',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'SMASEL',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'RWKSEL',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'MGKSEL',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'MMCSEL',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'ARPOFFSEL',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	613
	.byte	2,4,2,35,1,11
	.byte	'TSSEL',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'EEESEL',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'TXCOESEL',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'RXCOESEL',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'ADDMACADRSEL',0,1
	.word	613
	.byte	5,1,2,35,2,11
	.byte	'MACADR32SEL',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'MACADR64SEL',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'TSSTSSEL',0,1
	.word	613
	.byte	2,5,2,35,3,11
	.byte	'SAVLANINS',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'ACTPHYSEL',0,1
	.word	613
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_HW_FEATURE0_Bits',0,34,224,4,3
	.word	127602
	.byte	10
	.byte	'_Ifx_GETH_MAC_HW_FEATURE1_Bits',0,34,227,4,16,4,11
	.byte	'RXFIFOSIZE',0,1
	.word	613
	.byte	5,3,2,35,0,11
	.byte	'SPRAM',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'TXFIFOSIZE',0,2
	.word	630
	.byte	5,5,2,35,0,11
	.byte	'OSTEN',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'PTOEN',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'ADVTHWORD',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'ADDR64',0,1
	.word	613
	.byte	2,0,2,35,1,11
	.byte	'DCBEN',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'SPHEN',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'TSOEN',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'DBGMEMA',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'AVSEL',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'RAVSEL',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'POUOST',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'HASHTBLSZ',0,1
	.word	613
	.byte	2,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'L3L4FNUM',0,1
	.word	613
	.byte	4,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_HW_FEATURE1_Bits',0,34,248,4,3
	.word	128161
	.byte	10
	.byte	'_Ifx_GETH_MAC_HW_FEATURE2_Bits',0,34,251,4,16,4,11
	.byte	'RXQCNT',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	2,2,2,35,0,11
	.byte	'TXQCNT',0,2
	.word	630
	.byte	4,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	613
	.byte	2,4,2,35,1,11
	.byte	'RXCHCNT',0,1
	.word	613
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'TXCHCNT',0,1
	.word	613
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	613
	.byte	2,0,2,35,2,11
	.byte	'PPSOUTNUM',0,1
	.word	613
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'AUXSNAPNUM',0,1
	.word	613
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_HW_FEATURE2_Bits',0,34,137,5,3
	.word	128605
	.byte	10
	.byte	'_Ifx_GETH_MAC_HW_FEATURE3_Bits',0,34,140,5,16,4,11
	.byte	'NRVF',0,1
	.word	613
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'CBTISEL',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'DVLAN',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	438
	.byte	26,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_HW_FEATURE3_Bits',0,34,147,5,3
	.word	128936
	.byte	10
	.byte	'_Ifx_GETH_MAC_INNER_VLAN_INCL_Bits',0,34,150,5,16,4,11
	.byte	'VLT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'VLC',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'VLP',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'CSVL',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'VLTI',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,2
	.word	630
	.byte	11,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_INNER_VLAN_INCL_Bits',0,34,158,5,3
	.word	129109
	.byte	10
	.byte	'_Ifx_GETH_MAC_INTERRUPT_ENABLE_Bits',0,34,161,5,16,4,11
	.byte	'RGSMIIIE',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	613
	.byte	2,5,2,35,0,11
	.byte	'PHYIE',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'PMTIE',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'LPIIE',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	630
	.byte	6,4,2,35,0,11
	.byte	'TSIE',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'TXSTSIE',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'RXSTSIE',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	438
	.byte	3,14,2,35,0,11
	.byte	'MDIOIE',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,2
	.word	630
	.byte	13,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_INTERRUPT_ENABLE_Bits',0,34,175,5,3
	.word	129294
	.byte	10
	.byte	'_Ifx_GETH_MAC_INTERRUPT_STATUS_Bits',0,34,178,5,16,4,11
	.byte	'RGSMIIIS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	613
	.byte	2,5,2,35,0,11
	.byte	'PHYIS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'PMTIS',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'LPIIS',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'MMCIS',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'MMCRXIS',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'MMCTXIS',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'MMCRXIPIS',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'TSIS',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'TXSTSIS',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'RXSTSIS',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	438
	.byte	3,14,2,35,0,11
	.byte	'MDIOIS',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,2
	.word	630
	.byte	13,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_INTERRUPT_STATUS_Bits',0,34,196,5,3
	.word	129614
	.byte	10
	.byte	'_Ifx_GETH_MAC_LPI_CONTROL_STATUS_Bits',0,34,199,5,16,4,11
	.byte	'TLPIEN',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TLPIEX',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'RLPIEN',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'RLPIEX',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	4,0,2,35,0,11
	.byte	'TLPIST',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'RLPIST',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	613
	.byte	6,0,2,35,1,11
	.byte	'LPIEN',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'PLS',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'PLSEN',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'LPITXA',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'LPIATE',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'LPITCSE',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	630
	.byte	10,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_LPI_CONTROL_STATUS_Bits',0,34,216,5,3
	.word	130010
	.byte	10
	.byte	'_Ifx_GETH_MAC_LPI_ENTRY_TIMER_Bits',0,34,219,5,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	3,5,2,35,0,11
	.byte	'LPIET',0,4
	.word	438
	.byte	17,12,2,35,0,11
	.byte	'reserved_20',0,2
	.word	630
	.byte	12,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_LPI_ENTRY_TIMER_Bits',0,34,224,5,3
	.word	130381
	.byte	10
	.byte	'_Ifx_GETH_MAC_LPI_TIMERS_CONTROL_Bits',0,34,227,5,16,4,11
	.byte	'TWT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'LST',0,2
	.word	630
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	613
	.byte	6,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_LPI_TIMERS_CONTROL_Bits',0,34,232,5,3
	.word	130528
	.byte	10
	.byte	'_Ifx_GETH_MAC_MDIO_ADDRESS_Bits',0,34,235,5,16,4,11
	.byte	'GB',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'C45E',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'GOC_0',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'GOC_1',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'SKAP',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	613
	.byte	3,0,2,35,0,11
	.byte	'CR',0,1
	.word	613
	.byte	4,4,2,35,1,11
	.byte	'NTC',0,1
	.word	613
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'RDA',0,1
	.word	613
	.byte	5,3,2,35,2,11
	.byte	'PA',0,2
	.word	630
	.byte	5,6,2,35,2,11
	.byte	'BTB',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'PSE',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_MDIO_ADDRESS_Bits',0,34,251,5,3
	.word	130672
	.byte	10
	.byte	'_Ifx_GETH_MAC_MDIO_DATA_Bits',0,34,254,5,16,4,11
	.byte	'GD',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'RA',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_MDIO_DATA_Bits',0,34,130,6,3
	.word	130987
	.byte	10
	.byte	'_Ifx_GETH_MAC_PACKET_FILTER_Bits',0,34,133,6,16,4,11
	.byte	'PR',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	613
	.byte	2,5,2,35,0,11
	.byte	'DAIF',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'PM',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'DBF',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'PCF',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'SAIF',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'SAF',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	613
	.byte	5,0,2,35,1,11
	.byte	'VTFE',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	613
	.byte	3,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	613
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	630
	.byte	9,1,2,35,2,11
	.byte	'RA',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_PACKET_FILTER_Bits',0,34,150,6,3
	.word	131088
	.byte	10
	.byte	'_Ifx_GETH_MAC_PHYIF_CONTROL_STATUS_Bits',0,34,153,6,16,4,11
	.byte	'TC',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'LUD',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,2
	.word	630
	.byte	11,0,2,35,0,11
	.byte	'LNKMOD',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'LNKSPEED',0,1
	.word	613
	.byte	2,5,2,35,2,11
	.byte	'LNKSTS',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	630
	.byte	10,2,2,35,2,11
	.byte	'reserved_30',0,1
	.word	613
	.byte	2,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_PHYIF_CONTROL_STATUS_Bits',0,34,166,6,3
	.word	131441
	.byte	10
	.byte	'_Ifx_GETH_MAC_PMT_CONTROL_STATUS_Bits',0,34,169,6,16,4,11
	.byte	'PWRDWN',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'MGKPKTEN',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'RWKPKTEN',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	2,3,2,35,0,11
	.byte	'MGKPRCVD',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'RWKPRCVD',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	630
	.byte	2,7,2,35,0,11
	.byte	'GLBLUCAST',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'RWKPFE',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	438
	.byte	13,8,2,35,0,11
	.byte	'RWKPTR',0,1
	.word	613
	.byte	5,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	613
	.byte	2,1,2,35,3,11
	.byte	'RWKFILTRST',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_PMT_CONTROL_STATUS_Bits',0,34,184,6,3
	.word	131755
	.byte	10
	.byte	'_Ifx_GETH_MAC_PPS0_INTERVAL_Bits',0,34,187,6,16,4,11
	.byte	'PPSINT0',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_PPS0_INTERVAL_Bits',0,34,190,6,3
	.word	132113
	.byte	10
	.byte	'_Ifx_GETH_MAC_PPS0_TARGET_TIME_NANOSECONDS_Bits',0,34,193,6,16,4,11
	.byte	'TTSL0',0,4
	.word	438
	.byte	31,1,2,35,0,11
	.byte	'TRGTBUSY0',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_PPS0_TARGET_TIME_NANOSECONDS_Bits',0,34,197,6,3
	.word	132213
	.byte	10
	.byte	'_Ifx_GETH_MAC_PPS0_TARGET_TIME_SECONDS_Bits',0,34,200,6,16,4,11
	.byte	'TSTRH0',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_PPS0_TARGET_TIME_SECONDS_Bits',0,34,203,6,3
	.word	132362
	.byte	10
	.byte	'_Ifx_GETH_MAC_PPS0_WIDTH_Bits',0,34,206,6,16,4,11
	.byte	'PPSWIDTH0',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_PPS0_WIDTH_Bits',0,34,209,6,3
	.word	132483
	.byte	10
	.byte	'_Ifx_GETH_MAC_PPS_CONTROL_Bits',0,34,212,6,16,4,11
	.byte	'PPSCTRL_PPSCMD',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'PPSEN0',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'TRGTMODSEL0',0,1
	.word	613
	.byte	2,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	613
	.byte	2,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	613
	.byte	2,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	613
	.byte	3,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	613
	.byte	2,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	613
	.byte	2,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	613
	.byte	2,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	613
	.byte	2,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_PPS_CONTROL_Bits',0,34,230,6,3
	.word	132579
	.byte	10
	.byte	'_Ifx_GETH_MAC_Q0_TX_FLOW_CTRL_Bits',0,34,233,6,16,4,11
	.byte	'FCB_BPA',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TFE',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'PLT',0,1
	.word	613
	.byte	3,1,2,35,0,11
	.byte	'DZPQ',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'PT',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_Q0_TX_FLOW_CTRL_Bits',0,34,242,6,3
	.word	133020
	.byte	10
	.byte	'_Ifx_GETH_MAC_RWK_PACKET_FILTER_Bits',0,34,245,6,16,4,11
	.byte	'WKUPFRMFTR',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_RWK_PACKET_FILTER_Bits',0,34,248,6,3
	.word	133228
	.byte	10
	.byte	'_Ifx_GETH_MAC_RXQ_CTRL0_Bits',0,34,251,6,16,4,11
	.byte	'RXQ0EN',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'RXQ1EN',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'RXQ2EN',0,1
	.word	613
	.byte	2,2,2,35,0,11
	.byte	'RXQ3EN',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_RXQ_CTRL0_Bits',0,34,131,7,3
	.word	133339
	.byte	10
	.byte	'_Ifx_GETH_MAC_RXQ_CTRL1_Bits',0,34,134,7,16,4,11
	.byte	'AVCPQ',0,1
	.word	613
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'PTPQ',0,1
	.word	613
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'UPQ',0,1
	.word	613
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'MCBCQ',0,1
	.word	613
	.byte	3,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'MCBCQEN',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'TACPQE',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'TPQC',0,1
	.word	613
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	8,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_RXQ_CTRL1_Bits',0,34,150,7,3
	.word	133529
	.byte	10
	.byte	'_Ifx_GETH_MAC_RXQ_CTRL2_Bits',0,34,153,7,16,4,11
	.byte	'PSRQ0',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'PSRQ1',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'PSRQ2',0,1
	.word	613
	.byte	8,0,2,35,2,11
	.byte	'PSRQ3',0,1
	.word	613
	.byte	8,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_RXQ_CTRL2_Bits',0,34,159,7,3
	.word	133878
	.byte	10
	.byte	'_Ifx_GETH_MAC_RXQ_CTRL4_Bits',0,34,162,7,16,4,11
	.byte	'UFFQE',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'UFFQ',0,1
	.word	613
	.byte	2,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	5,0,2,35,0,11
	.byte	'MFFQE',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'MFFQ',0,1
	.word	613
	.byte	2,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	613
	.byte	5,0,2,35,1,11
	.byte	'VFFQE',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'VFFQ',0,1
	.word	613
	.byte	2,5,2,35,2,11
	.byte	'reserved_19',0,2
	.word	630
	.byte	13,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_RXQ_CTRL4_Bits',0,34,173,7,3
	.word	134019
	.byte	10
	.byte	'_Ifx_GETH_MAC_RX_FLOW_CTRL_Bits',0,34,176,7,16,4,11
	.byte	'RFE',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'UP',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	6,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	438
	.byte	23,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_RX_FLOW_CTRL_Bits',0,34,183,7,3
	.word	134259
	.byte	10
	.byte	'_Ifx_GETH_MAC_RX_TX_STATUS_Bits',0,34,186,7,16,4,11
	.byte	'TJT',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'NCARR',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'LCARR',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'EXDEF',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'LCOL',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'EXCOL',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'RWT',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	438
	.byte	23,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_RX_TX_STATUS_Bits',0,34,197,7,3
	.word	134433
	.byte	10
	.byte	'_Ifx_GETH_MAC_SUB_SECOND_INCREMENT_Bits',0,34,200,7,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'SNSINC',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'SSINC',0,1
	.word	613
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	8,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_SUB_SECOND_INCREMENT_Bits',0,34,206,7,3
	.word	134670
	.byte	10
	.byte	'_Ifx_GETH_MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS_Bits',0,34,209,7,16,4,11
	.byte	'TSHWR',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS_Bits',0,34,213,7,3
	.word	134845
	.byte	10
	.byte	'_Ifx_GETH_MAC_SYSTEM_TIME_NANOSECONDS_Bits',0,34,216,7,16,4,11
	.byte	'TSSS',0,4
	.word	438
	.byte	31,1,2,35,0,11
	.byte	'reserved_31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_SYSTEM_TIME_NANOSECONDS_Bits',0,34,220,7,3
	.word	135002
	.byte	10
	.byte	'_Ifx_GETH_MAC_SYSTEM_TIME_NANOSECONDS_UPDATE_Bits',0,34,223,7,16,4,11
	.byte	'TSSS',0,4
	.word	438
	.byte	31,1,2,35,0,11
	.byte	'ADDSUB',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_SYSTEM_TIME_NANOSECONDS_UPDATE_Bits',0,34,227,7,3
	.word	135142
	.byte	10
	.byte	'_Ifx_GETH_MAC_SYSTEM_TIME_SECONDS_Bits',0,34,230,7,16,4,11
	.byte	'TSS',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_SYSTEM_TIME_SECONDS_Bits',0,34,233,7,3
	.word	135291
	.byte	10
	.byte	'_Ifx_GETH_MAC_SYSTEM_TIME_SECONDS_UPDATE_Bits',0,34,236,7,16,4,11
	.byte	'TSS',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_SYSTEM_TIME_SECONDS_UPDATE_Bits',0,34,239,7,3
	.word	135399
	.byte	10
	.byte	'_Ifx_GETH_MAC_TIMESTAMP_ADDEND_Bits',0,34,242,7,16,4,11
	.byte	'TSAR',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_ADDEND_Bits',0,34,245,7,3
	.word	135521
	.byte	10
	.byte	'_Ifx_GETH_MAC_TIMESTAMP_CONTROL_Bits',0,34,248,7,16,4,11
	.byte	'TSENA',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TSCFUPDT',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TSINIT',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'TSUPDT',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'TSADDREG',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'TSENALL',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'TSCTRLSSR',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'TSVER2ENA',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'TSIPENA',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'TSIPV6ENA',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'TSIPV4ENA',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'TSEVNTENA',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'TSMSTRENA',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'SNAPTYPSEL',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'TSENMACADDR',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'CSC',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	613
	.byte	3,0,2,35,2,11
	.byte	'TXTSSTSM',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	613
	.byte	3,4,2,35,3,11
	.byte	'AV8021ASMEN',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	613
	.byte	3,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_CONTROL_Bits',0,34,146,8,3
	.word	135624
	.byte	10
	.byte	'_Ifx_GETH_MAC_TIMESTAMP_EGRESS_ASYM_CORR_Bits',0,34,149,8,16,4,11
	.byte	'OSTEAC',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_EGRESS_ASYM_CORR_Bits',0,34,152,8,3
	.word	136209
	.byte	10
	.byte	'_Ifx_GETH_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND_Bits',0,34,155,8,16,4,11
	.byte	'TSEC',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND_Bits',0,34,158,8,3
	.word	136334
	.byte	10
	.byte	'_Ifx_GETH_MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSEC_Bits',0,34,161,8,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'TSECSNS',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSEC_Bits',0,34,166,8,3
	.word	136469
	.byte	10
	.byte	'_Ifx_GETH_MAC_TIMESTAMP_INGRESS_ASYM_CORR_Bits',0,34,169,8,16,4,11
	.byte	'OSTIAC',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_INGRESS_ASYM_CORR_Bits',0,34,172,8,3
	.word	136652
	.byte	10
	.byte	'_Ifx_GETH_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND_Bits',0,34,175,8,16,4,11
	.byte	'TSIC',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND_Bits',0,34,178,8,3
	.word	136779
	.byte	10
	.byte	'_Ifx_GETH_MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSEC_Bits',0,34,181,8,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'TSICSNS',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSEC_Bits',0,34,186,8,3
	.word	136916
	.byte	10
	.byte	'_Ifx_GETH_MAC_TIMESTAMP_STATUS_Bits',0,34,189,8,16,4,11
	.byte	'TSSOVF',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TSTARGT0',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'TSTRGTERR0',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'TSTARGT1',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'TSTRGTERR1',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'TSTARGT2',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'TSTRGTERR2',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'TSTARGT3',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'TSTRGTERR3',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	613
	.byte	5,1,2,35,1,11
	.byte	'TXTSSIS',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	613
	.byte	4,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	613
	.byte	4,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	6,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	613
	.byte	2,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_STATUS_Bits',0,34,207,8,3
	.word	137101
	.byte	10
	.byte	'_Ifx_GETH_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS_Bits',0,34,210,8,16,4,11
	.byte	'TXTSSLO',0,4
	.word	438
	.byte	31,1,2,35,0,11
	.byte	'TXTSSMIS',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS_Bits',0,34,214,8,3
	.word	137530
	.byte	10
	.byte	'_Ifx_GETH_MAC_TX_TIMESTAMP_STATUS_SECONDS_Bits',0,34,217,8,16,4,11
	.byte	'TXTSSHI',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TX_TIMESTAMP_STATUS_SECONDS_Bits',0,34,220,8,3
	.word	137686
	.byte	10
	.byte	'_Ifx_GETH_MAC_VERSION_Bits',0,34,223,8,16,4,11
	.byte	'SNPSVER',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'USERVER',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_VERSION_Bits',0,34,228,8,3
	.word	137814
	.byte	10
	.byte	'_Ifx_GETH_MAC_VLAN_HASH_TABLE_Bits',0,34,231,8,16,4,11
	.byte	'VLHT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_VLAN_HASH_TABLE_Bits',0,34,235,8,3
	.word	137944
	.byte	10
	.byte	'_Ifx_GETH_MAC_VLAN_INCL_Bits',0,34,238,8,16,4,11
	.byte	'VLT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'VLC',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'VLP',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'CSVL',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'VLTI',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'CBTI',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	613
	.byte	2,0,2,35,2,11
	.byte	'ADDR',0,1
	.word	613
	.byte	2,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	613
	.byte	4,2,2,35,3,11
	.byte	'RDWR',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'BUSY',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_VLAN_INCL_Bits',0,34,251,8,3
	.word	138068
	.byte	10
	.byte	'_Ifx_GETH_MAC_VLAN_INCL_Q_Bits',0,34,254,8,16,4,11
	.byte	'VLT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,1
	.word	613
	.byte	3,5,2,35,2,11
	.byte	'CSVL',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	630
	.byte	12,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_VLAN_INCL_Q_Bits',0,34,132,9,3
	.word	138328
	.byte	10
	.byte	'_Ifx_GETH_MAC_VLAN_TAG_CTRL_Bits',0,34,135,9,16,4,11
	.byte	'OB',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'CT',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'OFS',0,1
	.word	613
	.byte	5,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	438
	.byte	10,15,2,35,0,11
	.byte	'VTIM',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'ESVL',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	613
	.byte	2,3,2,35,2,11
	.byte	'EVLS',0,1
	.word	613
	.byte	2,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'EVLRXS',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'VTHM',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'EDVLP',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'RES_27',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'EIVLS',0,1
	.word	613
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'EIVLRXS',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_VLAN_TAG_CTRL_Bits',0,34,153,9,3
	.word	138482
	.byte	10
	.byte	'_Ifx_GETH_MAC_VLAN_TAG_DATA_Bits',0,34,156,9,16,4,11
	.byte	'VID',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'VEN',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'ETV',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'DOVLTC',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'ERSVLM',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'ERIVLT',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	613
	.byte	3,0,2,35,2,11
	.byte	'DMACHEN',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'DMACHN',0,1
	.word	613
	.byte	2,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	613
	.byte	5,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_VLAN_TAG_DATA_Bits',0,34,168,9,3
	.word	138850
	.byte	10
	.byte	'_Ifx_GETH_MAC_VLAN_TAG_FILTER_Bits',0,34,171,9,16,4,11
	.byte	'VID',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'VEN',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'ETV',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'DOVLTC',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'ERSVLM',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'ERIVLT',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	613
	.byte	3,0,2,35,2,11
	.byte	'DMACHEN',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'DMACHN',0,1
	.word	613
	.byte	2,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	613
	.byte	5,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_VLAN_TAG_FILTER_Bits',0,34,183,9,3
	.word	139113
	.byte	10
	.byte	'_Ifx_GETH_MAC_WATCHDOG_TIMEOUT_Bits',0,34,186,9,16,4,11
	.byte	'WTO',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	4,0,2,35,0,11
	.byte	'PWE',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	438
	.byte	23,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_WATCHDOG_TIMEOUT_Bits',0,34,192,9,3
	.word	139380
	.byte	10
	.byte	'_Ifx_GETH_MMC_CONTROL_Bits',0,34,195,9,16,4,11
	.byte	'CNTRST',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'CNTSTOPRO',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'RSTONRD',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'CNTFREEZ',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'CNTPRST',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'CNTPRSTLVL',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'UCDBC',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	438
	.byte	23,0,2,35,0,0,20
	.byte	'Ifx_GETH_MMC_CONTROL_Bits',0,34,206,9,3
	.word	139541
	.byte	10
	.byte	'_Ifx_GETH_MMC_IPC_RX_INTERRUPT_Bits',0,34,209,9,16,4,11
	.byte	'RXIPV4GPIS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'RXIPV4HERPIS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'RXIPV4NOPAYPIS',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'RXIPV4FRAGPIS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'RXIPV4UDSBLPIS',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'RXIPV6GPIS',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'RXIPV6HERPIS',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'RXIPV6NOPAYPIS',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'RXUDPGPIS',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'RXUDPERPIS',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'RXTCPGPIS',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'RXTCPERPIS',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'RXICMPGPIS',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'RXICMPERPIS',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	613
	.byte	2,0,2,35,1,11
	.byte	'RXIPV4GOIS',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'RXIPV4HEROIS',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'RXIPV4NOPAYOIS',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'RXIPV4FRAGOIS',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'RXIPV4UDSBLOIS',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'RXIPV6GOIS',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'RXIPV6HEROIS',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'RXIPV6NOPAYOIS',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'RXUDPGOIS',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'RXUDPEROIS',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'RXTCPGOIS',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'RXTCPEROIS',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'RXICMPGOIS',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'RXICMPEROIS',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	613
	.byte	2,0,2,35,3,0,20
	.byte	'Ifx_GETH_MMC_IPC_RX_INTERRUPT_Bits',0,34,241,9,3
	.word	139790
	.byte	10
	.byte	'_Ifx_GETH_MMC_IPC_RX_INTERRUPT_MASK_Bits',0,34,244,9,16,4,11
	.byte	'RXIPV4GPIM',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'RXIPV4HERPIM',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'RXIPV4NOPAYPIM',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'RXIPV4FRAGPIM',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'RXIPV4UDSBLPIM',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'RXIPV6GPIM',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'RXIPV6HERPIM',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'RXIPV6NOPAYPIM',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'RXUDPGPIM',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'RXUDPERPIM',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'RXTCPGPIM',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'RXTCPERPIM',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'RXICMPGPIM',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'RXICMPERPIM',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	613
	.byte	2,0,2,35,1,11
	.byte	'RXIPV4GOIM',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'RXIPV4HEROIM',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'RXIPV4NOPAYOIM',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'RXIPV4FRAGOIM',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'RXIPV4UDSBLOIM',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'RXIPV6GOIM',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'RXIPV6HEROIM',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'RXIPV6NOPAYOIM',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'RXUDPGOIM',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'RXUDPEROIM',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'RXTCPGOIM',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'RXTCPEROIM',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'RXICMPGOIM',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'RXICMPEROIM',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	613
	.byte	2,0,2,35,3,0,20
	.byte	'Ifx_GETH_MMC_IPC_RX_INTERRUPT_MASK_Bits',0,34,148,10,3
	.word	140575
	.byte	10
	.byte	'_Ifx_GETH_MMC_RX_INTERRUPT_Bits',0,34,151,10,16,4,11
	.byte	'RXGBPKTIS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'RXGBOCTIS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'RXGOCTIS',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'RXBCGPIS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'RXMCGPIS',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'RXCRCERPIS',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'RXALGNERPIS',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'RXRUNTPIS',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'RXJABERPIS',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'RXUSIZEGPIS',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'RXOSIZEGPIS',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'RX64OCTGBPIS',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'RX65T127OCTGBPIS',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'RX128T255OCTGBPIS',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'RX256T511OCTGBPIS',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'RX512T1023OCTGBPIS',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'RX1024TMAXOCTGBPIS',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'RXUCGPIS',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'RXLENERPIS',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'RXORANGEPIS',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'RXPAUSPIS',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'RXFOVPIS',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'RXVLANGBPIS',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'RXWDOGPIS',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'RXRCVERRPIS',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'RXCTRLPIS',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'RXLPIUSCIS',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'RXLPITRCIS',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_GETH_MMC_RX_INTERRUPT_Bits',0,34,182,10,3
	.word	141370
	.byte	10
	.byte	'_Ifx_GETH_MMC_RX_INTERRUPT_MASK_Bits',0,34,185,10,16,4,11
	.byte	'RXGBPKTIM',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'RXGBOCTIM',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'RXGOCTIM',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'RXBCGPIM',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'RXMCGPIM',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'RXCRCERPIM',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'RXALGNERPIM',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'RXRUNTPIM',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'RXJABERPIM',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'RXUSIZEGPIM',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'RXOSIZEGPIM',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'RX64OCTGBPIM',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'RX65T127OCTGBPIM',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'RX128T255OCTGBPIM',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'RX256T511OCTGBPIM',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'RX512T1023OCTGBPIM',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'RX1024TMAXOCTGBPIM',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'RXUCGPIM',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'RXLENERPIM',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'RXORANGEPIM',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'RXPAUSPIM',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'RXFOVPIM',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'RXVLANGBPIM',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'RXWDOGPIM',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'RXRCVERRPIM',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'RXCTRLPIM',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'RXLPIUSCIM',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'RXLPITRCIM',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_GETH_MMC_RX_INTERRUPT_MASK_Bits',0,34,216,10,3
	.word	142116
	.byte	10
	.byte	'_Ifx_GETH_MMC_TX_INTERRUPT_Bits',0,34,219,10,16,4,11
	.byte	'TXGBOCTIS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TXGBPKTIS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TXBCGPIS',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'TXMCGPIS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'TX64OCTGBPIS',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'TX65T127OCTGBPIS',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'TX128T255OCTGBPIS',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'TX256T511OCTGBPIS',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'TX512T1023OCTGBPIS',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'TX1024TMAXOCTGBPIS',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'TXUCGBPIS',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'TXMCGBPIS',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'TXBCGBPIS',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'TXUFLOWERPIS',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'TXSCOLGPIS',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'TXMCOLGPIS',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'TXDEFPIS',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'TXLATCOLPIS',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'TXEXCOLPIS',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'TXCARERPIS',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'TXGOCTIS',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'TXGPKTIS',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'TXEXDEFPIS',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'TXPAUSPIS',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'TXVLANGPIS',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'TXOSIZEGPIS',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'TXLPIUSCIS',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'TXLPITRCIS',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_GETH_MMC_TX_INTERRUPT_Bits',0,34,250,10,3
	.word	142872
	.byte	10
	.byte	'_Ifx_GETH_MMC_TX_INTERRUPT_MASK_Bits',0,34,253,10,16,4,11
	.byte	'TXGBOCTIM',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TXGBPKTIM',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TXBCGPIM',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'TXMCGPIM',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'TX64OCTGBPIM',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'TX65T127OCTGBPIM',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'TX128T255OCTGBPIM',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'TX256T511OCTGBPIM',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'TX512T1023OCTGBPIM',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'TX1024TMAXOCTGBPIM',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'TXUCGBPIM',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'TXMCGBPIM',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'TXBCGBPIM',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'TXUFLOWERPIM',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'TXSCOLGPIM',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'TXMCOLGPIM',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'TXDEFPIM',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'TXLATCOLPIM',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'TXEXCOLPIM',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'TXCARERPIM',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'TXGOCTIM',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'TXGPKTIM',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'TXEXDEFPIM',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'TXPAUSPIM',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'TXVLANGPIM',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'TXOSIZEGPIM',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'TXLPIUSCIM',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'TXLPITRCIM',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_GETH_MMC_TX_INTERRUPT_MASK_Bits',0,34,156,11,3
	.word	143616
	.byte	10
	.byte	'_Ifx_GETH_MTL_INTERRUPT_STATUS_Bits',0,34,159,11,16,4,11
	.byte	'Q0IS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'Q1IS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'Q2IS',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'Q3IS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	630
	.byte	14,0,2,35,2,0,20
	.byte	'Ifx_GETH_MTL_INTERRUPT_STATUS_Bits',0,34,169,11,3
	.word	144370
	.byte	10
	.byte	'_Ifx_GETH_MTL_OPERATION_MODE_Bits',0,34,172,11,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'DTXSTS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'RAA',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	2,3,2,35,0,11
	.byte	'SCHALG',0,1
	.word	613
	.byte	2,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'CNTPRST',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'CNTCLR',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	438
	.byte	22,0,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_OPERATION_MODE_Bits',0,34,183,11,3
	.word	144611
	.byte	10
	.byte	'_Ifx_GETH_MTL_Q0_INTERRUPT_CONTROL_STATUS_Bits',0,34,186,11,16,4,11
	.byte	'TXUNFIS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'ABPSIS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	6,0,2,35,0,11
	.byte	'TXUIE',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'ABPSIE',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	613
	.byte	6,0,2,35,1,11
	.byte	'RXOVFIS',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	613
	.byte	7,0,2,35,2,11
	.byte	'RXOIE',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	613
	.byte	7,0,2,35,3,0,20
	.byte	'Ifx_GETH_MTL_Q0_INTERRUPT_CONTROL_STATUS_Bits',0,34,198,11,3
	.word	144871
	.byte	10
	.byte	'_Ifx_GETH_MTL_Q_INTERRUPT_CONTROL_STATUS_Bits',0,34,201,11,16,4,11
	.byte	'TXUNFIS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'ABPSIS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	6,0,2,35,0,11
	.byte	'TXUIE',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'ABPSIE',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	613
	.byte	6,0,2,35,1,11
	.byte	'RXOVFIS',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	613
	.byte	7,0,2,35,2,11
	.byte	'RXOIE',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	613
	.byte	7,0,2,35,3,0,20
	.byte	'Ifx_GETH_MTL_Q_INTERRUPT_CONTROL_STATUS_Bits',0,34,213,11,3
	.word	145179
	.byte	10
	.byte	'_Ifx_GETH_MTL_RXQ0_CONTROL_Bits',0,34,216,11,16,4,11
	.byte	'RXQ_WEGT',0,1
	.word	613
	.byte	3,5,2,35,0,11
	.byte	'RXQ_FRM_ARBIT',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	438
	.byte	28,0,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_RXQ0_CONTROL_Bits',0,34,221,11,3
	.word	145485
	.byte	10
	.byte	'_Ifx_GETH_MTL_RXQ0_DEBUG_Bits',0,34,224,11,16,4,11
	.byte	'RWCSTS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'RRCSTS',0,1
	.word	613
	.byte	2,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'RXQSTS',0,1
	.word	613
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	630
	.byte	10,0,2,35,0,11
	.byte	'PRXQ',0,2
	.word	630
	.byte	14,2,2,35,2,11
	.byte	'reserved_30',0,1
	.word	613
	.byte	2,0,2,35,3,0,20
	.byte	'Ifx_GETH_MTL_RXQ0_DEBUG_Bits',0,34,233,11,3
	.word	145631
	.byte	10
	.byte	'_Ifx_GETH_MTL_RXQ0_MISSED_PACKET_OVERFLOW_CNT_Bits',0,34,236,11,16,4,11
	.byte	'OVFPKTCNT',0,2
	.word	630
	.byte	11,5,2,35,0,11
	.byte	'OVFCNTOVF',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	613
	.byte	4,0,2,35,1,11
	.byte	'MISPKTCNT',0,2
	.word	630
	.byte	11,5,2,35,2,11
	.byte	'MISCNTOVF',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_GETH_MTL_RXQ0_MISSED_PACKET_OVERFLOW_CNT_Bits',0,34,244,11,3
	.word	145843
	.byte	10
	.byte	'_Ifx_GETH_MTL_RXQ0_OPERATION_MODE_Bits',0,34,247,11,16,4,11
	.byte	'RTC',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'FUP',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'FEP',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'RSF',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'DIS_TCP_EF',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'EHFC',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'RFA',0,1
	.word	613
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	613
	.byte	2,2,2,35,1,11
	.byte	'RFD',0,4
	.word	438
	.byte	4,14,2,35,0,11
	.byte	'reserved_18',0,1
	.word	613
	.byte	2,4,2,35,2,11
	.byte	'RQS',0,2
	.word	630
	.byte	5,7,2,35,2,11
	.byte	'reserved_25',0,1
	.word	613
	.byte	7,0,2,35,3,0,20
	.byte	'Ifx_GETH_MTL_RXQ0_OPERATION_MODE_Bits',0,34,134,12,3
	.word	146090
	.byte	10
	.byte	'_Ifx_GETH_MTL_RXQ_CONTROL_Bits',0,34,137,12,16,4,11
	.byte	'RXQ_WEGT',0,1
	.word	613
	.byte	3,5,2,35,0,11
	.byte	'RXQ_FRM_ARBIT',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	438
	.byte	28,0,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_RXQ_CONTROL_Bits',0,34,142,12,3
	.word	146417
	.byte	10
	.byte	'_Ifx_GETH_MTL_RXQ_DEBUG_Bits',0,34,145,12,16,4,11
	.byte	'RWCSTS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'RRCSTS',0,1
	.word	613
	.byte	2,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'RXQSTS',0,1
	.word	613
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	630
	.byte	10,0,2,35,0,11
	.byte	'PRXQ',0,2
	.word	630
	.byte	14,2,2,35,2,11
	.byte	'reserved_30',0,1
	.word	613
	.byte	2,0,2,35,3,0,20
	.byte	'Ifx_GETH_MTL_RXQ_DEBUG_Bits',0,34,154,12,3
	.word	146561
	.byte	10
	.byte	'_Ifx_GETH_MTL_RXQ_DMA_MAP0_Bits',0,34,157,12,16,4,11
	.byte	'Q0MDMACH',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'Q0DDMACH',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	613
	.byte	3,0,2,35,0,11
	.byte	'Q1MDMACH',0,1
	.word	613
	.byte	2,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	613
	.byte	2,4,2,35,1,11
	.byte	'Q1DDMACH',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	613
	.byte	3,0,2,35,1,11
	.byte	'Q2MDMACH',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	613
	.byte	2,4,2,35,2,11
	.byte	'Q2DDMACH',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	613
	.byte	3,0,2,35,2,11
	.byte	'Q3MDMACH',0,1
	.word	613
	.byte	2,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	613
	.byte	2,4,2,35,3,11
	.byte	'Q3DDMACH',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	613
	.byte	3,0,2,35,3,0,20
	.byte	'Ifx_GETH_MTL_RXQ_DMA_MAP0_Bits',0,34,175,12,3
	.word	146771
	.byte	10
	.byte	'_Ifx_GETH_MTL_RXQ_MISSED_PACKET_OVERFLOW_CNT_Bits',0,34,178,12,16,4,11
	.byte	'OVFPKTCNT',0,2
	.word	630
	.byte	11,5,2,35,0,11
	.byte	'OVFCNTOVF',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	613
	.byte	4,0,2,35,1,11
	.byte	'MISPKTCNT',0,2
	.word	630
	.byte	11,5,2,35,2,11
	.byte	'MISCNTOVF',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_GETH_MTL_RXQ_MISSED_PACKET_OVERFLOW_CNT_Bits',0,34,186,12,3
	.word	147192
	.byte	10
	.byte	'_Ifx_GETH_MTL_RXQ_OPERATION_MODE_Bits',0,34,189,12,16,4,11
	.byte	'RTC',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'FUP',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'FEP',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'RSF',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'DIS_TCP_EF',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'EHFC',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'RFA',0,1
	.word	613
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	613
	.byte	2,2,2,35,1,11
	.byte	'RFD',0,4
	.word	438
	.byte	4,14,2,35,0,11
	.byte	'reserved_18',0,1
	.word	613
	.byte	2,4,2,35,2,11
	.byte	'RQS',0,2
	.word	630
	.byte	5,7,2,35,2,11
	.byte	'reserved_25',0,1
	.word	613
	.byte	7,0,2,35,3,0,20
	.byte	'Ifx_GETH_MTL_RXQ_OPERATION_MODE_Bits',0,34,204,12,3
	.word	147437
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ0_DEBUG_Bits',0,34,207,12,16,4,11
	.byte	'TXQPAUSED',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TRCSTS',0,1
	.word	613
	.byte	2,5,2,35,0,11
	.byte	'TWCSTS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'TXQSTS',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'TXSTSFSTS',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	630
	.byte	10,0,2,35,0,11
	.byte	'PTXQ',0,1
	.word	613
	.byte	3,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'STXSTSF',0,1
	.word	613
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	630
	.byte	9,0,2,35,2,0,20
	.byte	'Ifx_GETH_MTL_TXQ0_DEBUG_Bits',0,34,219,12,3
	.word	147762
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ0_ETS_STATUS_Bits',0,34,222,12,16,4,11
	.byte	'ABS',0,4
	.word	438
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	8,0,2,35,3,0,20
	.byte	'Ifx_GETH_MTL_TXQ0_ETS_STATUS_Bits',0,34,226,12,3
	.word	148036
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ0_OPERATION_MODE_Bits',0,34,229,12,16,4,11
	.byte	'FTQ',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TSF',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TXQEN',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'TTC',0,1
	.word	613
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	630
	.byte	9,0,2,35,0,11
	.byte	'TQS',0,1
	.word	613
	.byte	4,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	630
	.byte	12,0,2,35,2,0,20
	.byte	'Ifx_GETH_MTL_TXQ0_OPERATION_MODE_Bits',0,34,238,12,3
	.word	148159
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ0_QUANTUM_WEIGHT_Bits',0,34,241,12,16,4,11
	.byte	'ISCQW',0,4
	.word	438
	.byte	21,11,2,35,0,11
	.byte	'reserved_21',0,2
	.word	630
	.byte	11,0,2,35,2,0,20
	.byte	'Ifx_GETH_MTL_TXQ0_QUANTUM_WEIGHT_Bits',0,34,245,12,3
	.word	148374
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ0_UNDERFLOW_Bits',0,34,248,12,16,4,11
	.byte	'UFFRMCNT',0,2
	.word	630
	.byte	11,5,2,35,0,11
	.byte	'UFCNTOVF',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	438
	.byte	20,0,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ0_UNDERFLOW_Bits',0,34,253,12,3
	.word	148507
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ_DEBUG_Bits',0,34,128,13,16,4,11
	.byte	'TXQPAUSED',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TRCSTS',0,1
	.word	613
	.byte	2,5,2,35,0,11
	.byte	'TWCSTS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'TXQSTS',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'TXSTSFSTS',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	630
	.byte	10,0,2,35,0,11
	.byte	'PTXQ',0,1
	.word	613
	.byte	3,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'STXSTSF',0,1
	.word	613
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	630
	.byte	9,0,2,35,2,0,20
	.byte	'Ifx_GETH_MTL_TXQ_DEBUG_Bits',0,34,140,13,3
	.word	148653
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ_ETS_CONTROL_Bits',0,34,143,13,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'AVALG',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'CC',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'SLC',0,1
	.word	613
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	438
	.byte	25,0,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ_ETS_CONTROL_Bits',0,34,150,13,3
	.word	148925
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ_ETS_STATUS_Bits',0,34,153,13,16,4,11
	.byte	'ABS',0,4
	.word	438
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	8,0,2,35,3,0,20
	.byte	'Ifx_GETH_MTL_TXQ_ETS_STATUS_Bits',0,34,157,13,3
	.word	149100
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ_HICREDIT_Bits',0,34,160,13,16,4,11
	.byte	'HC',0,4
	.word	438
	.byte	29,3,2,35,0,11
	.byte	'reserved_29',0,1
	.word	613
	.byte	3,0,2,35,3,0,20
	.byte	'Ifx_GETH_MTL_TXQ_HICREDIT_Bits',0,34,164,13,3
	.word	149221
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ_LOCREDIT_Bits',0,34,167,13,16,4,11
	.byte	'LC',0,4
	.word	438
	.byte	29,3,2,35,0,11
	.byte	'reserved_29',0,1
	.word	613
	.byte	3,0,2,35,3,0,20
	.byte	'Ifx_GETH_MTL_TXQ_LOCREDIT_Bits',0,34,171,13,3
	.word	149337
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ_OPERATION_MODE_Bits',0,34,174,13,16,4,11
	.byte	'FTQ',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TSF',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TXQEN',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'TTC',0,1
	.word	613
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	630
	.byte	9,0,2,35,0,11
	.byte	'TQS',0,1
	.word	613
	.byte	4,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	630
	.byte	12,0,2,35,2,0,20
	.byte	'Ifx_GETH_MTL_TXQ_OPERATION_MODE_Bits',0,34,183,13,3
	.word	149453
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ_QUANTUM_WEIGHT_Bits',0,34,186,13,16,4,11
	.byte	'ISCQW',0,4
	.word	438
	.byte	21,11,2,35,0,11
	.byte	'reserved_21',0,2
	.word	630
	.byte	11,0,2,35,2,0,20
	.byte	'Ifx_GETH_MTL_TXQ_QUANTUM_WEIGHT_Bits',0,34,190,13,3
	.word	149666
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ_SENDSLOPECREDIT_Bits',0,34,193,13,16,4,11
	.byte	'SSC',0,2
	.word	630
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,4
	.word	438
	.byte	18,0,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ_SENDSLOPECREDIT_Bits',0,34,197,13,3
	.word	149797
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ_UNDERFLOW_Bits',0,34,200,13,16,4,11
	.byte	'UFFRMCNT',0,2
	.word	630
	.byte	11,5,2,35,0,11
	.byte	'UFCNTOVF',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	438
	.byte	20,0,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ_UNDERFLOW_Bits',0,34,205,13,3
	.word	149928
	.byte	10
	.byte	'_Ifx_GETH_RWK_FILTER_BYTE_MASK_Bits',0,34,208,13,16,4,11
	.byte	'FILTERI_BYTE_MASK',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RWK_FILTER_BYTE_MASK_Bits',0,34,211,13,3
	.word	150072
	.byte	10
	.byte	'_Ifx_GETH_RWK_FILTER_COMMAND_0_Bits',0,34,214,13,16,4,11
	.byte	'FILTER0_COMMAND',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	4,0,2,35,0,11
	.byte	'FILTER1_COMMAND',0,1
	.word	613
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	613
	.byte	4,0,2,35,1,11
	.byte	'FILTER2_COMMAND',0,1
	.word	613
	.byte	4,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	613
	.byte	4,0,2,35,2,11
	.byte	'FILTER3_COMMAND',0,1
	.word	613
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_GETH_RWK_FILTER_COMMAND_0_Bits',0,34,224,13,3
	.word	150188
	.byte	10
	.byte	'_Ifx_GETH_RWK_FILTER_CRC_Bits',0,34,227,13,16,4,11
	.byte	'FILTER0_CRC',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'FILTER1_CRC',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RWK_FILTER_CRC_Bits',0,34,231,13,3
	.word	150474
	.byte	10
	.byte	'_Ifx_GETH_RWK_FILTER_OFFSET_0_Bits',0,34,234,13,16,4,11
	.byte	'FILTER0_OFFSET',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'FILTER1_OFFSET',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'FILTER2_OFFSET',0,1
	.word	613
	.byte	8,0,2,35,2,11
	.byte	'FILTER3_OFFSET',0,1
	.word	613
	.byte	8,0,2,35,3,0,20
	.byte	'Ifx_GETH_RWK_FILTER_OFFSET_0_Bits',0,34,240,13,3
	.word	150595
	.byte	10
	.byte	'_Ifx_GETH_RXICMP_ERROR_OCTETS_Bits',0,34,243,13,16,4,11
	.byte	'RXICMPERROCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXICMP_ERROR_OCTETS_Bits',0,34,246,13,3
	.word	150784
	.byte	10
	.byte	'_Ifx_GETH_RXICMP_ERROR_PACKETS_Bits',0,34,249,13,16,4,11
	.byte	'RXICMPERRPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXICMP_ERROR_PACKETS_Bits',0,34,253,13,3
	.word	150893
	.byte	10
	.byte	'_Ifx_GETH_RXICMP_GOOD_OCTETS_Bits',0,34,128,14,16,4,11
	.byte	'RXICMPGDOCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXICMP_GOOD_OCTETS_Bits',0,34,131,14,3
	.word	151027
	.byte	10
	.byte	'_Ifx_GETH_RXICMP_GOOD_PACKETS_Bits',0,34,134,14,16,4,11
	.byte	'RXICMPGDPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXICMP_GOOD_PACKETS_Bits',0,34,138,14,3
	.word	151133
	.byte	10
	.byte	'_Ifx_GETH_RXIPV4_FRAGMENTED_OCTETS_Bits',0,34,141,14,16,4,11
	.byte	'RXIPV4FRAGOCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_FRAGMENTED_OCTETS_Bits',0,34,144,14,3
	.word	151264
	.byte	10
	.byte	'_Ifx_GETH_RXIPV4_FRAGMENTED_PACKETS_Bits',0,34,147,14,16,4,11
	.byte	'RXIPV4FRAGPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXIPV4_FRAGMENTED_PACKETS_Bits',0,34,151,14,3
	.word	151384
	.byte	10
	.byte	'_Ifx_GETH_RXIPV4_GOOD_OCTETS_Bits',0,34,154,14,16,4,11
	.byte	'RXIPV4GDOCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_GOOD_OCTETS_Bits',0,34,157,14,3
	.word	151529
	.byte	10
	.byte	'_Ifx_GETH_RXIPV4_GOOD_PACKETS_Bits',0,34,160,14,16,4,11
	.byte	'RXIPV4GDPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXIPV4_GOOD_PACKETS_Bits',0,34,164,14,3
	.word	151635
	.byte	10
	.byte	'_Ifx_GETH_RXIPV4_HEADER_ERROR_OCTETS_Bits',0,34,167,14,16,4,11
	.byte	'RXIPV4HDRERROCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_HEADER_ERROR_OCTETS_Bits',0,34,170,14,3
	.word	151766
	.byte	10
	.byte	'_Ifx_GETH_RXIPV4_HEADER_ERROR_PACKETS_Bits',0,34,173,14,16,4,11
	.byte	'RXIPV4HDRERRPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXIPV4_HEADER_ERROR_PACKETS_Bits',0,34,177,14,3
	.word	151892
	.byte	10
	.byte	'_Ifx_GETH_RXIPV4_NO_PAYLOAD_OCTETS_Bits',0,34,180,14,16,4,11
	.byte	'RXIPV4NOPAYOCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_NO_PAYLOAD_OCTETS_Bits',0,34,183,14,3
	.word	152043
	.byte	10
	.byte	'_Ifx_GETH_RXIPV4_NO_PAYLOAD_PACKETS_Bits',0,34,186,14,16,4,11
	.byte	'RXIPV4NOPAYPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXIPV4_NO_PAYLOAD_PACKETS_Bits',0,34,190,14,3
	.word	152164
	.byte	10
	.byte	'_Ifx_GETH_RXIPV4_UDP_CHECKSUM_DISABLED_PACKETS_Bits',0,34,193,14,16,4,11
	.byte	'RXIPV4UDSBLPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXIPV4_UDP_CHECKSUM_DISABLED_PACKETS_Bits',0,34,197,14,3
	.word	152310
	.byte	10
	.byte	'_Ifx_GETH_RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS_Bits',0,34,200,14,16,4,11
	.byte	'RXIPV4UDSBLOCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS_Bits',0,34,203,14,3
	.word	152478
	.byte	10
	.byte	'_Ifx_GETH_RXIPV6_GOOD_OCTETS_Bits',0,34,206,14,16,4,11
	.byte	'RXIPV6GDOCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV6_GOOD_OCTETS_Bits',0,34,209,14,3
	.word	152619
	.byte	10
	.byte	'_Ifx_GETH_RXIPV6_GOOD_PACKETS_Bits',0,34,212,14,16,4,11
	.byte	'RXIPV6GDPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXIPV6_GOOD_PACKETS_Bits',0,34,216,14,3
	.word	152725
	.byte	10
	.byte	'_Ifx_GETH_RXIPV6_HEADER_ERROR_OCTETS_Bits',0,34,219,14,16,4,11
	.byte	'RXIPV6HDRERROCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV6_HEADER_ERROR_OCTETS_Bits',0,34,222,14,3
	.word	152856
	.byte	10
	.byte	'_Ifx_GETH_RXIPV6_HEADER_ERROR_PACKETS_Bits',0,34,225,14,16,4,11
	.byte	'RXIPV6HDRERRPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXIPV6_HEADER_ERROR_PACKETS_Bits',0,34,229,14,3
	.word	152982
	.byte	10
	.byte	'_Ifx_GETH_RXIPV6_NO_PAYLOAD_OCTETS_Bits',0,34,232,14,16,4,11
	.byte	'RXIPV6NOPAYOCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV6_NO_PAYLOAD_OCTETS_Bits',0,34,235,14,3
	.word	153133
	.byte	10
	.byte	'_Ifx_GETH_RXIPV6_NO_PAYLOAD_PACKETS_Bits',0,34,238,14,16,4,11
	.byte	'RXIPV6NOPAYPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXIPV6_NO_PAYLOAD_PACKETS_Bits',0,34,242,14,3
	.word	153254
	.byte	10
	.byte	'_Ifx_GETH_RXTCP_ERROR_OCTETS_Bits',0,34,245,14,16,4,11
	.byte	'RXTCPERROCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXTCP_ERROR_OCTETS_Bits',0,34,248,14,3
	.word	153400
	.byte	10
	.byte	'_Ifx_GETH_RXTCP_ERROR_PACKETS_Bits',0,34,251,14,16,4,11
	.byte	'RXTCPERRPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXTCP_ERROR_PACKETS_Bits',0,34,255,14,3
	.word	153506
	.byte	10
	.byte	'_Ifx_GETH_RXTCP_GOOD_OCTETS_Bits',0,34,130,15,16,4,11
	.byte	'RXTCPGDOCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXTCP_GOOD_OCTETS_Bits',0,34,133,15,3
	.word	153637
	.byte	10
	.byte	'_Ifx_GETH_RXTCP_GOOD_PACKETS_Bits',0,34,136,15,16,4,11
	.byte	'RXTCPGDPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXTCP_GOOD_PACKETS_Bits',0,34,140,15,3
	.word	153740
	.byte	10
	.byte	'_Ifx_GETH_RXUDP_ERROR_OCTETS_Bits',0,34,143,15,16,4,11
	.byte	'RXUDPERROCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXUDP_ERROR_OCTETS_Bits',0,34,146,15,3
	.word	153868
	.byte	10
	.byte	'_Ifx_GETH_RXUDP_ERROR_PACKETS_Bits',0,34,149,15,16,4,11
	.byte	'RXUDPERRPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXUDP_ERROR_PACKETS_Bits',0,34,153,15,3
	.word	153974
	.byte	10
	.byte	'_Ifx_GETH_RXUDP_GOOD_OCTETS_Bits',0,34,156,15,16,4,11
	.byte	'RXUDPGDOCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXUDP_GOOD_OCTETS_Bits',0,34,159,15,3
	.word	154105
	.byte	10
	.byte	'_Ifx_GETH_RXUDP_GOOD_PACKETS_Bits',0,34,162,15,16,4,11
	.byte	'RXUDPGDPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXUDP_GOOD_PACKETS_Bits',0,34,166,15,3
	.word	154208
	.byte	10
	.byte	'_Ifx_GETH_RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_Bits',0,34,169,15,16,4,11
	.byte	'RX1024_MAXOCTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_Bits',0,34,173,15,3
	.word	154336
	.byte	10
	.byte	'_Ifx_GETH_RX_128TO255OCTETS_PACKETS_GOOD_BAD_Bits',0,34,176,15,16,4,11
	.byte	'RX128_255OCTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_128TO255OCTETS_PACKETS_GOOD_BAD_Bits',0,34,180,15,3
	.word	154503
	.byte	10
	.byte	'_Ifx_GETH_RX_256TO511OCTETS_PACKETS_GOOD_BAD_Bits',0,34,183,15,16,4,11
	.byte	'RX256_511OCTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_256TO511OCTETS_PACKETS_GOOD_BAD_Bits',0,34,187,15,3
	.word	154667
	.byte	10
	.byte	'_Ifx_GETH_RX_512TO1023OCTETS_PACKETS_GOOD_BAD_Bits',0,34,190,15,16,4,11
	.byte	'RX512_1023OCTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_512TO1023OCTETS_PACKETS_GOOD_BAD_Bits',0,34,194,15,3
	.word	154831
	.byte	10
	.byte	'_Ifx_GETH_RX_64OCTETS_PACKETS_GOOD_BAD_Bits',0,34,197,15,16,4,11
	.byte	'RX64OCTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_64OCTETS_PACKETS_GOOD_BAD_Bits',0,34,201,15,3
	.word	154998
	.byte	10
	.byte	'_Ifx_GETH_RX_65TO127OCTETS_PACKETS_GOOD_BAD_Bits',0,34,204,15,16,4,11
	.byte	'RX65_127OCTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_65TO127OCTETS_PACKETS_GOOD_BAD_Bits',0,34,208,15,3
	.word	155145
	.byte	10
	.byte	'_Ifx_GETH_RX_ALIGNMENT_ERROR_PACKETS_Bits',0,34,211,15,16,4,11
	.byte	'RXALGNERR',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_ALIGNMENT_ERROR_PACKETS_Bits',0,34,215,15,3
	.word	155306
	.byte	10
	.byte	'_Ifx_GETH_RX_BROADCAST_PACKETS_GOOD_Bits',0,34,218,15,16,4,11
	.byte	'RXBCASTG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_BROADCAST_PACKETS_GOOD_Bits',0,34,222,15,3
	.word	155449
	.byte	10
	.byte	'_Ifx_GETH_RX_CONTROL_PACKETS_GOOD_Bits',0,34,225,15,16,4,11
	.byte	'RXCTRLG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_CONTROL_PACKETS_GOOD_Bits',0,34,229,15,3
	.word	155589
	.byte	10
	.byte	'_Ifx_GETH_RX_CRC_ERROR_PACKETS_Bits',0,34,232,15,16,4,11
	.byte	'RXCRCERR',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_CRC_ERROR_PACKETS_Bits',0,34,236,15,3
	.word	155724
	.byte	10
	.byte	'_Ifx_GETH_RX_FIFO_OVERFLOW_PACKETS_Bits',0,34,239,15,16,4,11
	.byte	'RXFIFOOVFL',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_FIFO_OVERFLOW_PACKETS_Bits',0,34,243,15,3
	.word	155854
	.byte	10
	.byte	'_Ifx_GETH_RX_JABBER_ERROR_PACKETS_Bits',0,34,246,15,16,4,11
	.byte	'RXJABERR',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_JABBER_ERROR_PACKETS_Bits',0,34,250,15,3
	.word	155994
	.byte	10
	.byte	'_Ifx_GETH_RX_LENGTH_ERROR_PACKETS_Bits',0,34,253,15,16,4,11
	.byte	'RXLENERR',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_LENGTH_ERROR_PACKETS_Bits',0,34,129,16,3
	.word	156130
	.byte	10
	.byte	'_Ifx_GETH_RX_LPI_TRAN_CNTR_Bits',0,34,132,16,16,4,11
	.byte	'RXLPITRC',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_LPI_TRAN_CNTR_Bits',0,34,136,16,3
	.word	156266
	.byte	10
	.byte	'_Ifx_GETH_RX_LPI_USEC_CNTR_Bits',0,34,139,16,16,4,11
	.byte	'RXLPIUSC',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_LPI_USEC_CNTR_Bits',0,34,143,16,3
	.word	156388
	.byte	10
	.byte	'_Ifx_GETH_RX_MULTICAST_PACKETS_GOOD_Bits',0,34,146,16,16,4,11
	.byte	'RXMCASTG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_MULTICAST_PACKETS_GOOD_Bits',0,34,150,16,3
	.word	156510
	.byte	10
	.byte	'_Ifx_GETH_RX_OCTET_COUNT_GOOD_Bits',0,34,153,16,16,4,11
	.byte	'RXOCTG',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RX_OCTET_COUNT_GOOD_Bits',0,34,156,16,3
	.word	156650
	.byte	10
	.byte	'_Ifx_GETH_RX_OCTET_COUNT_GOOD_BAD_Bits',0,34,159,16,16,4,11
	.byte	'RXOCTGB',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RX_OCTET_COUNT_GOOD_BAD_Bits',0,34,162,16,3
	.word	156753
	.byte	10
	.byte	'_Ifx_GETH_RX_OUT_OF_RANGE_TYPE_PACKETS_Bits',0,34,165,16,16,4,11
	.byte	'RXOUTOFRNG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_OUT_OF_RANGE_TYPE_PACKETS_Bits',0,34,169,16,3
	.word	156865
	.byte	10
	.byte	'_Ifx_GETH_RX_OVERSIZE_PACKETS_GOOD_Bits',0,34,172,16,16,4,11
	.byte	'RXOVERSZG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_OVERSIZE_PACKETS_GOOD_Bits',0,34,176,16,3
	.word	157013
	.byte	10
	.byte	'_Ifx_GETH_RX_PACKETS_COUNT_GOOD_BAD_Bits',0,34,179,16,16,4,11
	.byte	'RXPKTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_PACKETS_COUNT_GOOD_BAD_Bits',0,34,183,16,3
	.word	157152
	.byte	10
	.byte	'_Ifx_GETH_RX_PAUSE_PACKETS_Bits',0,34,186,16,16,4,11
	.byte	'RXPAUSEPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_PAUSE_PACKETS_Bits',0,34,190,16,3
	.word	157291
	.byte	10
	.byte	'_Ifx_GETH_RX_RECEIVE_ERROR_PACKETS_Bits',0,34,193,16,16,4,11
	.byte	'RXRCVERR',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_RECEIVE_ERROR_PACKETS_Bits',0,34,197,16,3
	.word	157415
	.byte	10
	.byte	'_Ifx_GETH_RX_RUNT_ERROR_PACKETS_Bits',0,34,200,16,16,4,11
	.byte	'RXRUNTERR',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_RUNT_ERROR_PACKETS_Bits',0,34,204,16,3
	.word	157553
	.byte	10
	.byte	'_Ifx_GETH_RX_UNDERSIZE_PACKETS_GOOD_Bits',0,34,207,16,16,4,11
	.byte	'RXUNDERSZG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_UNDERSIZE_PACKETS_GOOD_Bits',0,34,211,16,3
	.word	157686
	.byte	10
	.byte	'_Ifx_GETH_RX_UNICAST_PACKETS_GOOD_Bits',0,34,214,16,16,4,11
	.byte	'RXUCASTG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_UNICAST_PACKETS_GOOD_Bits',0,34,218,16,3
	.word	157828
	.byte	10
	.byte	'_Ifx_GETH_RX_VLAN_PACKETS_GOOD_BAD_Bits',0,34,221,16,16,4,11
	.byte	'RXVLANPKTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_VLAN_PACKETS_GOOD_BAD_Bits',0,34,225,16,3
	.word	157964
	.byte	10
	.byte	'_Ifx_GETH_RX_WATCHDOG_ERROR_PACKETS_Bits',0,34,228,16,16,4,11
	.byte	'RXWDGERR',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_WATCHDOG_ERROR_PACKETS_Bits',0,34,232,16,3
	.word	158105
	.byte	10
	.byte	'_Ifx_GETH_SKEWCTL_Bits',0,34,235,16,16,4,11
	.byte	'TXCFG',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	4,0,2,35,0,11
	.byte	'RXCFG',0,1
	.word	613
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	438
	.byte	20,0,2,35,0,0,20
	.byte	'Ifx_GETH_SKEWCTL_Bits',0,34,241,16,3
	.word	158245
	.byte	10
	.byte	'_Ifx_GETH_TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_Bits',0,34,244,16,16,4,11
	.byte	'TX1024_MAXOCTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_Bits',0,34,248,16,3
	.word	158385
	.byte	10
	.byte	'_Ifx_GETH_TX_128TO255OCTETS_PACKETS_GOOD_BAD_Bits',0,34,251,16,16,4,11
	.byte	'TX128_255OCTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_128TO255OCTETS_PACKETS_GOOD_BAD_Bits',0,34,255,16,3
	.word	158552
	.byte	10
	.byte	'_Ifx_GETH_TX_256TO511OCTETS_PACKETS_GOOD_BAD_Bits',0,34,130,17,16,4,11
	.byte	'TX256_511OCTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_256TO511OCTETS_PACKETS_GOOD_BAD_Bits',0,34,134,17,3
	.word	158716
	.byte	10
	.byte	'_Ifx_GETH_TX_512TO1023OCTETS_PACKETS_GOOD_BAD_Bits',0,34,137,17,16,4,11
	.byte	'TX512_1023OCTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_512TO1023OCTETS_PACKETS_GOOD_BAD_Bits',0,34,141,17,3
	.word	158880
	.byte	10
	.byte	'_Ifx_GETH_TX_64OCTETS_PACKETS_GOOD_BAD_Bits',0,34,144,17,16,4,11
	.byte	'TX64OCTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_64OCTETS_PACKETS_GOOD_BAD_Bits',0,34,148,17,3
	.word	159047
	.byte	10
	.byte	'_Ifx_GETH_TX_65TO127OCTETS_PACKETS_GOOD_BAD_Bits',0,34,151,17,16,4,11
	.byte	'TX65_127OCTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_65TO127OCTETS_PACKETS_GOOD_BAD_Bits',0,34,155,17,3
	.word	159194
	.byte	10
	.byte	'_Ifx_GETH_TX_BROADCAST_PACKETS_GOOD_Bits',0,34,158,17,16,4,11
	.byte	'TXBCASTG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_BROADCAST_PACKETS_GOOD_Bits',0,34,162,17,3
	.word	159355
	.byte	10
	.byte	'_Ifx_GETH_TX_BROADCAST_PACKETS_GOOD_BAD_Bits',0,34,165,17,16,4,11
	.byte	'TXBCASTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_BROADCAST_PACKETS_GOOD_BAD_Bits',0,34,169,17,3
	.word	159495
	.byte	10
	.byte	'_Ifx_GETH_TX_CARRIER_ERROR_PACKETS_Bits',0,34,172,17,16,4,11
	.byte	'TXCARR',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_CARRIER_ERROR_PACKETS_Bits',0,34,176,17,3
	.word	159644
	.byte	10
	.byte	'_Ifx_GETH_TX_DEFERRED_PACKETS_Bits',0,34,179,17,16,4,11
	.byte	'TXDEFRD',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_DEFERRED_PACKETS_Bits',0,34,183,17,3
	.word	159780
	.byte	10
	.byte	'_Ifx_GETH_TX_EXCESSIVE_COLLISION_PACKETS_Bits',0,34,186,17,16,4,11
	.byte	'TXEXSCOL',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_EXCESSIVE_COLLISION_PACKETS_Bits',0,34,190,17,3
	.word	159907
	.byte	10
	.byte	'_Ifx_GETH_TX_EXCESSIVE_DEFERRAL_ERROR_Bits',0,34,193,17,16,4,11
	.byte	'TXEXSDEF',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_EXCESSIVE_DEFERRAL_ERROR_Bits',0,34,197,17,3
	.word	160057
	.byte	10
	.byte	'_Ifx_GETH_TX_LATE_COLLISION_PACKETS_Bits',0,34,200,17,16,4,11
	.byte	'TXLATECOL',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_LATE_COLLISION_PACKETS_Bits',0,34,204,17,3
	.word	160201
	.byte	10
	.byte	'_Ifx_GETH_TX_LPI_TRAN_CNTR_Bits',0,34,207,17,16,4,11
	.byte	'TXLPITRC',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_LPI_TRAN_CNTR_Bits',0,34,211,17,3
	.word	160342
	.byte	10
	.byte	'_Ifx_GETH_TX_LPI_USEC_CNTR_Bits',0,34,214,17,16,4,11
	.byte	'TXLPIUSC',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_LPI_USEC_CNTR_Bits',0,34,218,17,3
	.word	160464
	.byte	10
	.byte	'_Ifx_GETH_TX_MULTICAST_PACKETS_GOOD_Bits',0,34,221,17,16,4,11
	.byte	'TXMCASTG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_MULTICAST_PACKETS_GOOD_Bits',0,34,225,17,3
	.word	160586
	.byte	10
	.byte	'_Ifx_GETH_TX_MULTICAST_PACKETS_GOOD_BAD_Bits',0,34,228,17,16,4,11
	.byte	'TXMCASTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_MULTICAST_PACKETS_GOOD_BAD_Bits',0,34,232,17,3
	.word	160726
	.byte	10
	.byte	'_Ifx_GETH_TX_MULTIPLE_COLLISION_GOOD_PACKETS_Bits',0,34,235,17,16,4,11
	.byte	'TXMULTCOLG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_MULTIPLE_COLLISION_GOOD_PACKETS_Bits',0,34,239,17,3
	.word	160875
	.byte	10
	.byte	'_Ifx_GETH_TX_OCTET_COUNT_GOOD_Bits',0,34,242,17,16,4,11
	.byte	'TXOCTG',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_TX_OCTET_COUNT_GOOD_Bits',0,34,245,17,3
	.word	161035
	.byte	10
	.byte	'_Ifx_GETH_TX_OCTET_COUNT_GOOD_BAD_Bits',0,34,248,17,16,4,11
	.byte	'TXOCTGB',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_TX_OCTET_COUNT_GOOD_BAD_Bits',0,34,251,17,3
	.word	161138
	.byte	10
	.byte	'_Ifx_GETH_TX_OSIZE_PACKETS_GOOD_Bits',0,34,254,17,16,4,11
	.byte	'TXOSIZG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_OSIZE_PACKETS_GOOD_Bits',0,34,130,18,3
	.word	161250
	.byte	10
	.byte	'_Ifx_GETH_TX_PACKET_COUNT_GOOD_Bits',0,34,133,18,16,4,11
	.byte	'TXPKTG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_PACKET_COUNT_GOOD_Bits',0,34,137,18,3
	.word	161381
	.byte	10
	.byte	'_Ifx_GETH_TX_PACKET_COUNT_GOOD_BAD_Bits',0,34,140,18,16,4,11
	.byte	'TXPKTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_PACKET_COUNT_GOOD_BAD_Bits',0,34,144,18,3
	.word	161509
	.byte	10
	.byte	'_Ifx_GETH_TX_PAUSE_PACKETS_Bits',0,34,147,18,16,4,11
	.byte	'TXPAUSE',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_PAUSE_PACKETS_Bits',0,34,151,18,3
	.word	161646
	.byte	10
	.byte	'_Ifx_GETH_TX_SINGLE_COLLISION_GOOD_PACKETS_Bits',0,34,154,18,16,4,11
	.byte	'TXSNGLCOLG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_SINGLE_COLLISION_GOOD_PACKETS_Bits',0,34,158,18,3
	.word	161767
	.byte	10
	.byte	'_Ifx_GETH_TX_UNDERFLOW_ERROR_PACKETS_Bits',0,34,161,18,16,4,11
	.byte	'TXUNDRFLW',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_UNDERFLOW_ERROR_PACKETS_Bits',0,34,165,18,3
	.word	161923
	.byte	10
	.byte	'_Ifx_GETH_TX_UNICAST_PACKETS_GOOD_BAD_Bits',0,34,168,18,16,4,11
	.byte	'TXUCASTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_UNICAST_PACKETS_GOOD_BAD_Bits',0,34,172,18,3
	.word	162066
	.byte	10
	.byte	'_Ifx_GETH_TX_VLAN_PACKETS_GOOD_Bits',0,34,175,18,16,4,11
	.byte	'TXVLANG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_VLAN_PACKETS_GOOD_Bits',0,34,179,18,3
	.word	162211
	.byte	12,34,187,18,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	118929
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_ACCEN0',0,34,192,18,3
	.word	162340
	.byte	12,34,195,18,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	119488
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_ACCEN1',0,34,200,18,3
	.word	162405
	.byte	12,34,203,18,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	119567
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_ACCEND_ACCEN0D',0,34,208,18,3
	.word	162470
	.byte	12,34,211,18,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	120143
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_ACCEND_ACCEN1D',0,34,216,18,3
	.word	162543
	.byte	12,34,219,18,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	120240
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_CLC',0,34,224,18,3
	.word	162616
	.byte	12,34,227,18,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	120347
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_CONTROL',0,34,232,18,3
	.word	162678
	.byte	12,34,235,18,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	120583
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_CURRENT_APP_RXBUFFER',0,34,240,18,3
	.word	162751
	.byte	12,34,243,18,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	120707
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_CURRENT_APP_RXDESC',0,34,248,18,3
	.word	162837
	.byte	12,34,251,18,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	120827
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_CURRENT_APP_TXBUFFER',0,34,128,19,3
	.word	162921
	.byte	12,34,131,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	120951
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_CURRENT_APP_TXDESC',0,34,136,19,3
	.word	163007
	.byte	12,34,139,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	121071
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_INTERRUPT_ENABLE',0,34,144,19,3
	.word	163091
	.byte	12,34,147,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	121412
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_MISS_FRAME_CNT',0,34,152,19,3
	.word	163173
	.byte	12,34,155,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	121578
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_RXDESC_LIST_ADDRESS',0,34,160,19,3
	.word	163253
	.byte	12,34,163,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	121717
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_RXDESC_RING_LENGTH',0,34,168,19,3
	.word	163338
	.byte	12,34,171,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	121853
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_RXDESC_TAIL_POINTER',0,34,176,19,3
	.word	163422
	.byte	12,34,179,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	121990
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_RX_CONTROL',0,34,184,19,3
	.word	163507
	.byte	12,34,187,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	122250
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_RX_INTERRUPT_WATCHDOG_TIMER',0,34,192,19,3
	.word	163583
	.byte	12,34,195,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	122441
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_SLOT_FUNCTION_CONTROL_STATUS',0,34,200,19,3
	.word	163676
	.byte	12,34,203,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	122663
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_STATUS',0,34,208,19,3
	.word	163770
	.byte	12,34,211,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	123004
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_TXDESC_LIST_ADDRESS',0,34,216,19,3
	.word	163842
	.byte	12,34,219,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	123143
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_TXDESC_RING_LENGTH',0,34,224,19,3
	.word	163927
	.byte	12,34,227,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	123279
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_TXDESC_TAIL_POINTER',0,34,232,19,3
	.word	164011
	.byte	12,34,235,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	123416
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_TX_CONTROL',0,34,240,19,3
	.word	164096
	.byte	12,34,243,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	123718
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_DEBUG_STATUS0',0,34,248,19,3
	.word	164172
	.byte	12,34,251,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	123958
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_DEBUG_STATUS1',0,34,128,20,3
	.word	164248
	.byte	12,34,131,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	124093
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_INTERRUPT_STATUS',0,34,136,20,3
	.word	164324
	.byte	12,34,139,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	124349
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_MODE',0,34,144,20,3
	.word	164403
	.byte	12,34,147,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	124609
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_SYSBUS_MODE',0,34,152,20,3
	.word	164470
	.byte	12,34,155,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	124948
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_GPCTL',0,34,160,20,3
	.word	164544
	.byte	12,34,163,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	125254
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_ID',0,34,168,20,3
	.word	164608
	.byte	12,34,171,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	125360
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_KRST0',0,34,176,20,3
	.word	164669
	.byte	12,34,179,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	125473
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_KRST1',0,34,184,20,3
	.word	164733
	.byte	12,34,187,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	125567
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_KRSTCLR',0,34,192,20,3
	.word	164797
	.byte	12,34,195,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	125665
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_1US_TIC_COUNTER',0,34,200,20,3
	.word	164863
	.byte	12,34,203,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	125797
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_ADDRESS_HIGH',0,34,208,20,3
	.word	164941
	.byte	12,34,211,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	125975
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_ADDRESS_HIGH0',0,34,216,20,3
	.word	165016
	.byte	12,34,219,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	126126
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_ADDRESS_LOW',0,34,224,20,3
	.word	165092
	.byte	12,34,227,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	126221
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_ADDRESS_LOW0',0,34,232,20,3
	.word	165166
	.byte	12,34,235,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	126318
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_CONFIGURATION',0,34,240,20,3
	.word	165241
	.byte	12,34,243,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	126803
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_CSR_SW_CTRL',0,34,248,20,3
	.word	165317
	.byte	12,34,251,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	126956
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_DEBUG',0,34,128,21,3
	.word	165391
	.byte	12,34,131,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	127140
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_EXT_CFG1',0,34,136,21,3
	.word	165459
	.byte	12,34,139,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	127291
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_EXT_CONFIGURATION',0,34,144,21,3
	.word	165530
	.byte	12,34,147,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	127602
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_HW_FEATURE0',0,34,152,21,3
	.word	165610
	.byte	12,34,155,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	128161
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_HW_FEATURE1',0,34,160,21,3
	.word	165684
	.byte	12,34,163,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	128605
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_HW_FEATURE2',0,34,168,21,3
	.word	165758
	.byte	12,34,171,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	128936
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_HW_FEATURE3',0,34,176,21,3
	.word	165832
	.byte	12,34,179,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	129109
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_INNER_VLAN_INCL',0,34,184,21,3
	.word	165906
	.byte	12,34,187,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	129294
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_INTERRUPT_ENABLE',0,34,192,21,3
	.word	165984
	.byte	12,34,195,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	129614
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_INTERRUPT_STATUS',0,34,200,21,3
	.word	166063
	.byte	12,34,203,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	130010
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_LPI_CONTROL_STATUS',0,34,208,21,3
	.word	166142
	.byte	12,34,211,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	130381
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_LPI_ENTRY_TIMER',0,34,216,21,3
	.word	166223
	.byte	12,34,219,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	130528
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_LPI_TIMERS_CONTROL',0,34,224,21,3
	.word	166301
	.byte	12,34,227,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	130672
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_MDIO_ADDRESS',0,34,232,21,3
	.word	166382
	.byte	12,34,235,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	130987
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_MDIO_DATA',0,34,240,21,3
	.word	166457
	.byte	12,34,243,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	131088
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_PACKET_FILTER',0,34,248,21,3
	.word	166529
	.byte	12,34,251,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	131441
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_PHYIF_CONTROL_STATUS',0,34,128,22,3
	.word	166605
	.byte	12,34,131,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	131755
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_PMT_CONTROL_STATUS',0,34,136,22,3
	.word	166688
	.byte	12,34,139,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	132113
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_PPS0_INTERVAL',0,34,144,22,3
	.word	166769
	.byte	12,34,147,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	132213
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_PPS0_TARGET_TIME_NANOSECONDS',0,34,152,22,3
	.word	166845
	.byte	12,34,155,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	132362
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_PPS0_TARGET_TIME_SECONDS',0,34,160,22,3
	.word	166936
	.byte	12,34,163,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	132483
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_PPS0_WIDTH',0,34,168,22,3
	.word	167023
	.byte	12,34,171,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	132579
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_PPS_CONTROL',0,34,176,22,3
	.word	167096
	.byte	12,34,179,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	133020
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_Q0_TX_FLOW_CTRL',0,34,184,22,3
	.word	167170
	.byte	12,34,187,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	133228
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_RWK_PACKET_FILTER',0,34,192,22,3
	.word	167248
	.byte	12,34,195,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	133339
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_RXQ_CTRL0',0,34,200,22,3
	.word	167328
	.byte	12,34,203,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	133529
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_RXQ_CTRL1',0,34,208,22,3
	.word	167400
	.byte	12,34,211,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	133878
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_RXQ_CTRL2',0,34,216,22,3
	.word	167472
	.byte	12,34,219,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	134019
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_RXQ_CTRL4',0,34,224,22,3
	.word	167544
	.byte	12,34,227,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	134259
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_RX_FLOW_CTRL',0,34,232,22,3
	.word	167616
	.byte	12,34,235,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	134433
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_RX_TX_STATUS',0,34,240,22,3
	.word	167691
	.byte	12,34,243,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	134670
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_SUB_SECOND_INCREMENT',0,34,248,22,3
	.word	167766
	.byte	12,34,251,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	134845
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS',0,34,128,23,3
	.word	167849
	.byte	12,34,131,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	135002
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_SYSTEM_TIME_NANOSECONDS',0,34,136,23,3
	.word	167943
	.byte	12,34,139,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	135142
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_SYSTEM_TIME_NANOSECONDS_UPDATE',0,34,144,23,3
	.word	168029
	.byte	12,34,147,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	135291
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_SYSTEM_TIME_SECONDS',0,34,152,23,3
	.word	168122
	.byte	12,34,155,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	135399
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_SYSTEM_TIME_SECONDS_UPDATE',0,34,160,23,3
	.word	168204
	.byte	12,34,163,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	135521
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_ADDEND',0,34,168,23,3
	.word	168293
	.byte	12,34,171,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	135624
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_CONTROL',0,34,176,23,3
	.word	168372
	.byte	12,34,179,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	136209
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_EGRESS_ASYM_CORR',0,34,184,23,3
	.word	168452
	.byte	12,34,187,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	136334
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND',0,34,192,23,3
	.word	168541
	.byte	12,34,195,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	136469
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSEC',0,34,200,23,3
	.word	168636
	.byte	12,34,203,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	136652
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_INGRESS_ASYM_CORR',0,34,208,23,3
	.word	168731
	.byte	12,34,211,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	136779
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND',0,34,216,23,3
	.word	168821
	.byte	12,34,219,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	136916
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSEC',0,34,224,23,3
	.word	168917
	.byte	12,34,227,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	137101
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_STATUS',0,34,232,23,3
	.word	169013
	.byte	12,34,235,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	137530
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS',0,34,240,23,3
	.word	169092
	.byte	12,34,243,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	137686
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TX_TIMESTAMP_STATUS_SECONDS',0,34,248,23,3
	.word	169186
	.byte	12,34,251,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	137814
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_VERSION',0,34,128,24,3
	.word	169276
	.byte	12,34,131,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	137944
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_VLAN_HASH_TABLE',0,34,136,24,3
	.word	169346
	.byte	12,34,139,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	138068
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_VLAN_INCL',0,34,144,24,3
	.word	169424
	.byte	12,34,147,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	138328
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_VLAN_INCL_Q',0,34,152,24,3
	.word	169496
	.byte	12,34,155,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	138482
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_VLAN_TAG_CTRL',0,34,160,24,3
	.word	169570
	.byte	12,34,163,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	138850
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_VLAN_TAG_DATA',0,34,168,24,3
	.word	169646
	.byte	12,34,171,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	139113
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_VLAN_TAG_FILTER',0,34,176,24,3
	.word	169722
	.byte	12,34,179,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	139380
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_WATCHDOG_TIMEOUT',0,34,184,24,3
	.word	169800
	.byte	12,34,187,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	139541
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MMC_CONTROL',0,34,192,24,3
	.word	169879
	.byte	12,34,195,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	139790
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MMC_IPC_RX_INTERRUPT',0,34,200,24,3
	.word	169949
	.byte	12,34,203,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	140575
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MMC_IPC_RX_INTERRUPT_MASK',0,34,208,24,3
	.word	170028
	.byte	12,34,211,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	141370
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MMC_RX_INTERRUPT',0,34,216,24,3
	.word	170112
	.byte	12,34,219,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	142116
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MMC_RX_INTERRUPT_MASK',0,34,224,24,3
	.word	170187
	.byte	12,34,227,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	142872
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MMC_TX_INTERRUPT',0,34,232,24,3
	.word	170267
	.byte	12,34,235,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	143616
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MMC_TX_INTERRUPT_MASK',0,34,240,24,3
	.word	170342
	.byte	12,34,243,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	144370
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_INTERRUPT_STATUS',0,34,248,24,3
	.word	170422
	.byte	12,34,251,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	144611
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_OPERATION_MODE',0,34,128,25,3
	.word	170501
	.byte	12,34,131,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	144871
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_Q0_INTERRUPT_CONTROL_STATUS',0,34,136,25,3
	.word	170578
	.byte	12,34,139,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	145179
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_Q_INTERRUPT_CONTROL_STATUS',0,34,144,25,3
	.word	170668
	.byte	12,34,147,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	145485
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_RXQ0_CONTROL',0,34,152,25,3
	.word	170757
	.byte	12,34,155,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	145631
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_RXQ0_DEBUG',0,34,160,25,3
	.word	170832
	.byte	12,34,163,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	145843
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_RXQ0_MISSED_PACKET_OVERFLOW_CNT',0,34,168,25,3
	.word	170905
	.byte	12,34,171,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	146090
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_RXQ0_OPERATION_MODE',0,34,176,25,3
	.word	170999
	.byte	12,34,179,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	146417
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_RXQ_CONTROL',0,34,184,25,3
	.word	171081
	.byte	12,34,187,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	146561
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_RXQ_DEBUG',0,34,192,25,3
	.word	171155
	.byte	12,34,195,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	146771
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_RXQ_DMA_MAP0',0,34,200,25,3
	.word	171227
	.byte	12,34,203,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	147192
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_RXQ_MISSED_PACKET_OVERFLOW_CNT',0,34,208,25,3
	.word	171302
	.byte	12,34,211,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	147437
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_RXQ_OPERATION_MODE',0,34,216,25,3
	.word	171395
	.byte	12,34,219,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	147762
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ0_DEBUG',0,34,224,25,3
	.word	171476
	.byte	12,34,227,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	148036
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ0_ETS_STATUS',0,34,232,25,3
	.word	171549
	.byte	12,34,235,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	148159
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ0_OPERATION_MODE',0,34,240,25,3
	.word	171627
	.byte	12,34,243,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	148374
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ0_QUANTUM_WEIGHT',0,34,248,25,3
	.word	171709
	.byte	12,34,251,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	148507
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ0_UNDERFLOW',0,34,128,26,3
	.word	171791
	.byte	12,34,131,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	148653
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ_DEBUG',0,34,136,26,3
	.word	171868
	.byte	12,34,139,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	148925
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ_ETS_CONTROL',0,34,144,26,3
	.word	171940
	.byte	12,34,147,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	149100
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ_ETS_STATUS',0,34,152,26,3
	.word	172018
	.byte	12,34,155,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	149221
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ_HICREDIT',0,34,160,26,3
	.word	172095
	.byte	12,34,163,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	149337
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ_LOCREDIT',0,34,168,26,3
	.word	172170
	.byte	12,34,171,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	149453
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ_OPERATION_MODE',0,34,176,26,3
	.word	172245
	.byte	12,34,179,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	149666
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ_QUANTUM_WEIGHT',0,34,184,26,3
	.word	172326
	.byte	12,34,187,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	149797
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ_SENDSLOPECREDIT',0,34,192,26,3
	.word	172407
	.byte	12,34,195,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	149928
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ_UNDERFLOW',0,34,200,26,3
	.word	172489
	.byte	12,34,203,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	150072
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RWK_FILTER_BYTE_MASK',0,34,208,26,3
	.word	172565
	.byte	12,34,211,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	150188
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RWK_FILTER_COMMAND_0',0,34,216,26,3
	.word	172644
	.byte	12,34,219,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	150474
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RWK_FILTER_CRC',0,34,224,26,3
	.word	172723
	.byte	12,34,227,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	150595
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RWK_FILTER_OFFSET_0',0,34,232,26,3
	.word	172796
	.byte	12,34,235,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	150784
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXICMP_ERROR_OCTETS',0,34,240,26,3
	.word	172874
	.byte	12,34,243,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	150893
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXICMP_ERROR_PACKETS',0,34,248,26,3
	.word	172952
	.byte	12,34,251,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	151027
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXICMP_GOOD_OCTETS',0,34,128,27,3
	.word	173031
	.byte	12,34,131,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	151133
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXICMP_GOOD_PACKETS',0,34,136,27,3
	.word	173108
	.byte	12,34,139,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	151264
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_FRAGMENTED_OCTETS',0,34,144,27,3
	.word	173186
	.byte	12,34,147,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	151384
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_FRAGMENTED_PACKETS',0,34,152,27,3
	.word	173269
	.byte	12,34,155,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	151529
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_GOOD_OCTETS',0,34,160,27,3
	.word	173353
	.byte	12,34,163,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	151635
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_GOOD_PACKETS',0,34,168,27,3
	.word	173430
	.byte	12,34,171,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	151766
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_HEADER_ERROR_OCTETS',0,34,176,27,3
	.word	173508
	.byte	12,34,179,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	151892
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_HEADER_ERROR_PACKETS',0,34,184,27,3
	.word	173593
	.byte	12,34,187,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	152043
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_NO_PAYLOAD_OCTETS',0,34,192,27,3
	.word	173679
	.byte	12,34,195,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	152164
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_NO_PAYLOAD_PACKETS',0,34,200,27,3
	.word	173762
	.byte	12,34,203,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	152310
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_UDP_CHECKSUM_DISABLED_PACKETS',0,34,208,27,3
	.word	173846
	.byte	12,34,211,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	152478
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS',0,34,216,27,3
	.word	173941
	.byte	12,34,219,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	152619
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV6_GOOD_OCTETS',0,34,224,27,3
	.word	174034
	.byte	12,34,227,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	152725
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV6_GOOD_PACKETS',0,34,232,27,3
	.word	174111
	.byte	12,34,235,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	152856
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV6_HEADER_ERROR_OCTETS',0,34,240,27,3
	.word	174189
	.byte	12,34,243,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	152982
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV6_HEADER_ERROR_PACKETS',0,34,248,27,3
	.word	174274
	.byte	12,34,251,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	153133
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV6_NO_PAYLOAD_OCTETS',0,34,128,28,3
	.word	174360
	.byte	12,34,131,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	153254
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV6_NO_PAYLOAD_PACKETS',0,34,136,28,3
	.word	174443
	.byte	12,34,139,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	153400
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXTCP_ERROR_OCTETS',0,34,144,28,3
	.word	174527
	.byte	12,34,147,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	153506
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXTCP_ERROR_PACKETS',0,34,152,28,3
	.word	174604
	.byte	12,34,155,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	153637
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXTCP_GOOD_OCTETS',0,34,160,28,3
	.word	174682
	.byte	12,34,163,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	153740
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXTCP_GOOD_PACKETS',0,34,168,28,3
	.word	174758
	.byte	12,34,171,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	153868
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXUDP_ERROR_OCTETS',0,34,176,28,3
	.word	174835
	.byte	12,34,179,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	153974
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXUDP_ERROR_PACKETS',0,34,184,28,3
	.word	174912
	.byte	12,34,187,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	154105
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXUDP_GOOD_OCTETS',0,34,192,28,3
	.word	174990
	.byte	12,34,195,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	154208
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXUDP_GOOD_PACKETS',0,34,200,28,3
	.word	175066
	.byte	12,34,203,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	154336
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD',0,34,208,28,3
	.word	175143
	.byte	12,34,211,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	154503
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_128TO255OCTETS_PACKETS_GOOD_BAD',0,34,216,28,3
	.word	175237
	.byte	12,34,219,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	154667
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_256TO511OCTETS_PACKETS_GOOD_BAD',0,34,224,28,3
	.word	175330
	.byte	12,34,227,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	154831
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_512TO1023OCTETS_PACKETS_GOOD_BAD',0,34,232,28,3
	.word	175423
	.byte	12,34,235,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	154998
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_64OCTETS_PACKETS_GOOD_BAD',0,34,240,28,3
	.word	175517
	.byte	12,34,243,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	155145
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_65TO127OCTETS_PACKETS_GOOD_BAD',0,34,248,28,3
	.word	175604
	.byte	12,34,251,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	155306
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_ALIGNMENT_ERROR_PACKETS',0,34,128,29,3
	.word	175696
	.byte	12,34,131,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	155449
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_BROADCAST_PACKETS_GOOD',0,34,136,29,3
	.word	175781
	.byte	12,34,139,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	155589
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_CONTROL_PACKETS_GOOD',0,34,144,29,3
	.word	175865
	.byte	12,34,147,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	155724
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_CRC_ERROR_PACKETS',0,34,152,29,3
	.word	175947
	.byte	12,34,155,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	155854
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_FIFO_OVERFLOW_PACKETS',0,34,160,29,3
	.word	176026
	.byte	12,34,163,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	155994
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_JABBER_ERROR_PACKETS',0,34,168,29,3
	.word	176109
	.byte	12,34,171,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	156130
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_LENGTH_ERROR_PACKETS',0,34,176,29,3
	.word	176191
	.byte	12,34,179,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	156266
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_LPI_TRAN_CNTR',0,34,184,29,3
	.word	176273
	.byte	12,34,187,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	156388
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_LPI_USEC_CNTR',0,34,192,29,3
	.word	176348
	.byte	12,34,195,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	156510
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_MULTICAST_PACKETS_GOOD',0,34,200,29,3
	.word	176423
	.byte	12,34,203,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	156650
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_OCTET_COUNT_GOOD',0,34,208,29,3
	.word	176507
	.byte	12,34,211,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	156753
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_OCTET_COUNT_GOOD_BAD',0,34,216,29,3
	.word	176585
	.byte	12,34,219,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	156865
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_OUT_OF_RANGE_TYPE_PACKETS',0,34,224,29,3
	.word	176667
	.byte	12,34,227,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	157013
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_OVERSIZE_PACKETS_GOOD',0,34,232,29,3
	.word	176754
	.byte	12,34,235,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	157152
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_PACKETS_COUNT_GOOD_BAD',0,34,240,29,3
	.word	176837
	.byte	12,34,243,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	157291
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_PAUSE_PACKETS',0,34,248,29,3
	.word	176921
	.byte	12,34,251,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	157415
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_RECEIVE_ERROR_PACKETS',0,34,128,30,3
	.word	176996
	.byte	12,34,131,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	157553
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_RUNT_ERROR_PACKETS',0,34,136,30,3
	.word	177079
	.byte	12,34,139,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	157686
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_UNDERSIZE_PACKETS_GOOD',0,34,144,30,3
	.word	177159
	.byte	12,34,147,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	157828
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_UNICAST_PACKETS_GOOD',0,34,152,30,3
	.word	177243
	.byte	12,34,155,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	157964
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_VLAN_PACKETS_GOOD_BAD',0,34,160,30,3
	.word	177325
	.byte	12,34,163,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	158105
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_WATCHDOG_ERROR_PACKETS',0,34,168,30,3
	.word	177408
	.byte	12,34,171,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	158245
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_SKEWCTL',0,34,176,30,3
	.word	177492
	.byte	12,34,179,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	158385
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD',0,34,184,30,3
	.word	177558
	.byte	12,34,187,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	158552
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_128TO255OCTETS_PACKETS_GOOD_BAD',0,34,192,30,3
	.word	177652
	.byte	12,34,195,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	158716
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_256TO511OCTETS_PACKETS_GOOD_BAD',0,34,200,30,3
	.word	177745
	.byte	12,34,203,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	158880
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_512TO1023OCTETS_PACKETS_GOOD_BAD',0,34,208,30,3
	.word	177838
	.byte	12,34,211,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	159047
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_64OCTETS_PACKETS_GOOD_BAD',0,34,216,30,3
	.word	177932
	.byte	12,34,219,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	159194
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_65TO127OCTETS_PACKETS_GOOD_BAD',0,34,224,30,3
	.word	178019
	.byte	12,34,227,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	159355
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_BROADCAST_PACKETS_GOOD',0,34,232,30,3
	.word	178111
	.byte	12,34,235,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	159495
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_BROADCAST_PACKETS_GOOD_BAD',0,34,240,30,3
	.word	178195
	.byte	12,34,243,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	159644
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_CARRIER_ERROR_PACKETS',0,34,248,30,3
	.word	178283
	.byte	12,34,251,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	159780
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_DEFERRED_PACKETS',0,34,128,31,3
	.word	178366
	.byte	12,34,131,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	159907
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_EXCESSIVE_COLLISION_PACKETS',0,34,136,31,3
	.word	178444
	.byte	12,34,139,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	160057
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_EXCESSIVE_DEFERRAL_ERROR',0,34,144,31,3
	.word	178533
	.byte	12,34,147,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	160201
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_LATE_COLLISION_PACKETS',0,34,152,31,3
	.word	178619
	.byte	12,34,155,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	160342
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_LPI_TRAN_CNTR',0,34,160,31,3
	.word	178703
	.byte	12,34,163,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	160464
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_LPI_USEC_CNTR',0,34,168,31,3
	.word	178778
	.byte	12,34,171,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	160586
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_MULTICAST_PACKETS_GOOD',0,34,176,31,3
	.word	178853
	.byte	12,34,179,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	160726
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_MULTICAST_PACKETS_GOOD_BAD',0,34,184,31,3
	.word	178937
	.byte	12,34,187,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	160875
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_MULTIPLE_COLLISION_GOOD_PACKETS',0,34,192,31,3
	.word	179025
	.byte	12,34,195,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	161035
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_OCTET_COUNT_GOOD',0,34,200,31,3
	.word	179118
	.byte	12,34,203,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	161138
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_OCTET_COUNT_GOOD_BAD',0,34,208,31,3
	.word	179196
	.byte	12,34,211,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	161250
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_OSIZE_PACKETS_GOOD',0,34,216,31,3
	.word	179278
	.byte	12,34,219,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	161381
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_PACKET_COUNT_GOOD',0,34,224,31,3
	.word	179358
	.byte	12,34,227,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	161509
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_PACKET_COUNT_GOOD_BAD',0,34,232,31,3
	.word	179437
	.byte	12,34,235,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	161646
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_PAUSE_PACKETS',0,34,240,31,3
	.word	179520
	.byte	12,34,243,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	161767
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_SINGLE_COLLISION_GOOD_PACKETS',0,34,248,31,3
	.word	179595
	.byte	12,34,251,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	161923
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_UNDERFLOW_ERROR_PACKETS',0,34,128,32,3
	.word	179686
	.byte	12,34,131,32,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	162066
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_UNICAST_PACKETS_GOOD_BAD',0,34,136,32,3
	.word	179771
	.byte	12,34,139,32,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	162211
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_VLAN_PACKETS_GOOD',0,34,144,32,3
	.word	179857
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ0',0,34,156,32,25,28,13
	.byte	'OPERATION_MODE',0
	.word	171627
	.byte	4,2,35,0,13
	.byte	'UNDERFLOW',0
	.word	171791
	.byte	4,2,35,4,13
	.byte	'DEBUG',0
	.word	171476
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	4454
	.byte	8,2,35,12,13
	.byte	'ETS_STATUS',0
	.word	171549
	.byte	4,2,35,20,13
	.byte	'QUANTUM_WEIGHT',0
	.word	171709
	.byte	4,2,35,24,0,14
	.word	179936
	.byte	20
	.byte	'Ifx_GETH_MTL_TXQ0',0,34,164,32,3
	.word	180084
	.byte	10
	.byte	'_Ifx_GETH_MTL_Q0',0,34,179,32,25,4,13
	.byte	'INTERRUPT_CONTROL_STATUS',0
	.word	170578
	.byte	4,2,35,0,0,14
	.word	180116
	.byte	20
	.byte	'Ifx_GETH_MTL_Q0',0,34,182,32,3
	.word	180174
	.byte	10
	.byte	'_Ifx_GETH_MTL_RXQ0',0,34,197,32,25,16,13
	.byte	'OPERATION_MODE',0
	.word	170999
	.byte	4,2,35,0,13
	.byte	'MISSED_PACKET_OVERFLOW_CNT',0
	.word	170905
	.byte	4,2,35,4,13
	.byte	'DEBUG',0
	.word	170832
	.byte	4,2,35,8,13
	.byte	'CONTROL',0
	.word	170757
	.byte	4,2,35,12,0,14
	.word	180204
	.byte	20
	.byte	'Ifx_GETH_MTL_RXQ0',0,34,203,32,3
	.word	180322
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ',0,34,218,32,25,40,13
	.byte	'OPERATION_MODE',0
	.word	172245
	.byte	4,2,35,0,13
	.byte	'UNDERFLOW',0
	.word	172489
	.byte	4,2,35,4,13
	.byte	'DEBUG',0
	.word	171868
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2634
	.byte	4,2,35,12,13
	.byte	'ETS_CONTROL',0
	.word	171940
	.byte	4,2,35,16,13
	.byte	'ETS_STATUS',0
	.word	172018
	.byte	4,2,35,20,13
	.byte	'QUANTUM_WEIGHT',0
	.word	172326
	.byte	4,2,35,24,13
	.byte	'SENDSLOPECREDIT',0
	.word	172407
	.byte	4,2,35,28,13
	.byte	'HICREDIT',0
	.word	172095
	.byte	4,2,35,32,13
	.byte	'LOCREDIT',0
	.word	172170
	.byte	4,2,35,36,0,14
	.word	180354
	.byte	20
	.byte	'Ifx_GETH_MTL_TXQ',0,34,230,32,3
	.word	180583
	.byte	10
	.byte	'_Ifx_GETH_MTL_Q',0,34,245,32,25,4,13
	.byte	'INTERRUPT_CONTROL_STATUS',0
	.word	170668
	.byte	4,2,35,0,0,14
	.word	180614
	.byte	20
	.byte	'Ifx_GETH_MTL_Q',0,34,248,32,3
	.word	180671
	.byte	10
	.byte	'_Ifx_GETH_MTL_RXQ',0,34,135,33,25,16,13
	.byte	'OPERATION_MODE',0
	.word	171395
	.byte	4,2,35,0,13
	.byte	'MISSED_PACKET_OVERFLOW_CNT',0
	.word	171302
	.byte	4,2,35,4,13
	.byte	'DEBUG',0
	.word	171155
	.byte	4,2,35,8,13
	.byte	'CONTROL',0
	.word	171081
	.byte	4,2,35,12,0,14
	.word	180700
	.byte	20
	.byte	'Ifx_GETH_MTL_RXQ',0,34,141,33,3
	.word	180817
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH',0,34,156,33,25,128,1,13
	.byte	'CONTROL',0
	.word	162678
	.byte	4,2,35,0,13
	.byte	'TX_CONTROL',0
	.word	164096
	.byte	4,2,35,4,13
	.byte	'RX_CONTROL',0
	.word	163507
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	4454
	.byte	8,2,35,12,13
	.byte	'TXDESC_LIST_ADDRESS',0
	.word	163842
	.byte	4,2,35,20,13
	.byte	'reserved_18',0
	.word	2634
	.byte	4,2,35,24,13
	.byte	'RXDESC_LIST_ADDRESS',0
	.word	163253
	.byte	4,2,35,28,13
	.byte	'TXDESC_TAIL_POINTER',0
	.word	164011
	.byte	4,2,35,32,13
	.byte	'reserved_24',0
	.word	2634
	.byte	4,2,35,36,13
	.byte	'RXDESC_TAIL_POINTER',0
	.word	163422
	.byte	4,2,35,40,13
	.byte	'TXDESC_RING_LENGTH',0
	.word	163927
	.byte	4,2,35,44,13
	.byte	'RXDESC_RING_LENGTH',0
	.word	163338
	.byte	4,2,35,48,13
	.byte	'INTERRUPT_ENABLE',0
	.word	163091
	.byte	4,2,35,52,13
	.byte	'RX_INTERRUPT_WATCHDOG_TIMER',0
	.word	163583
	.byte	4,2,35,56,13
	.byte	'SLOT_FUNCTION_CONTROL_STATUS',0
	.word	163676
	.byte	4,2,35,60,13
	.byte	'reserved_40',0
	.word	2634
	.byte	4,2,35,64,13
	.byte	'CURRENT_APP_TXDESC',0
	.word	163007
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	2634
	.byte	4,2,35,72,13
	.byte	'CURRENT_APP_RXDESC',0
	.word	162837
	.byte	4,2,35,76,13
	.byte	'reserved_50',0
	.word	2634
	.byte	4,2,35,80,13
	.byte	'CURRENT_APP_TXBUFFER',0
	.word	162921
	.byte	4,2,35,84,13
	.byte	'reserved_58',0
	.word	2634
	.byte	4,2,35,88,13
	.byte	'CURRENT_APP_RXBUFFER',0
	.word	162751
	.byte	4,2,35,92,13
	.byte	'STATUS',0
	.word	163770
	.byte	4,2,35,96,13
	.byte	'MISS_FRAME_CNT',0
	.word	163173
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	3825
	.byte	24,2,35,104,0,14
	.word	180848
	.byte	20
	.byte	'Ifx_GETH_DMA_CH',0,34,184,33,3
	.word	181526
	.byte	10
	.byte	'_Ifx_GETH_ACCEND',0,34,199,33,25,8,13
	.byte	'ACCEN0D',0
	.word	162470
	.byte	4,2,35,0,13
	.byte	'ACCEN1D',0
	.word	162543
	.byte	4,2,35,4,0,14
	.word	181556
	.byte	20
	.byte	'Ifx_GETH_ACCEND',0,34,203,33,3
	.word	181614
	.byte	12,34,226,33,8,4,13
	.byte	'MAC_VLAN_TAG_DATA',0
	.word	169646
	.byte	4,2,35,0,13
	.byte	'MAC_VLAN_TAG_FILTER',0
	.word	169722
	.byte	4,2,35,0,0,12,34,233,33,8,4,13
	.byte	'MAC_VLAN_INCL',0
	.word	169424
	.byte	4,2,35,0,13
	.byte	'MAC_VLAN_INCL_Q',0
	.word	169496
	.byte	4,2,35,0,0,12,34,254,33,8,4,13
	.byte	'MAC_RWK_PACKET_FILTER',0
	.word	167248
	.byte	4,2,35,0,13
	.byte	'RWK_FILTER_COMMAND_0',0
	.word	172644
	.byte	4,2,35,0,13
	.byte	'RWK_FILTER_OFFSET_0',0
	.word	172796
	.byte	4,2,35,0,13
	.byte	'RWK_FILTER_CRC',0
	.word	172723
	.byte	4,2,35,0,13
	.byte	'RWK_FILTER_BYTE_MASK',0
	.word	172565
	.byte	4,2,35,0,0,15,212,1
	.word	613
	.byte	16,211,1,0,15,40
	.word	613
	.byte	16,39,0,15,196,1
	.word	613
	.byte	16,195,1,0,15,128,6
	.word	613
	.byte	16,255,5,0,15,248,4
	.word	613
	.byte	16,247,4,0,15,112
	.word	613
	.byte	16,111,0,15,204,1
	.word	613
	.byte	16,203,1,0,14
	.word	179936
	.byte	14
	.word	180116
	.byte	14
	.word	180204
	.byte	14
	.word	180354
	.byte	14
	.word	180614
	.byte	14
	.word	180700
	.byte	14
	.word	180354
	.byte	14
	.word	180614
	.byte	14
	.word	180700
	.byte	14
	.word	180354
	.byte	14
	.word	180614
	.byte	14
	.word	180700
	.byte	15,128,4
	.word	613
	.byte	16,255,3,0,15,236,1
	.word	613
	.byte	16,235,1,0,15,128,4
	.word	180848
	.byte	16,3,0,14
	.word	182068
	.byte	15,128,26
	.word	613
	.byte	16,255,25,0,15,32
	.word	181556
	.byte	16,3,0,14
	.word	182094
	.byte	15,188,1
	.word	613
	.byte	16,187,1,0,10
	.byte	'_Ifx_GETH',0,34,218,33,25,128,66,13
	.byte	'MAC_CONFIGURATION',0
	.word	165241
	.byte	4,2,35,0,13
	.byte	'MAC_EXT_CONFIGURATION',0
	.word	165530
	.byte	4,2,35,4,13
	.byte	'MAC_PACKET_FILTER',0
	.word	166529
	.byte	4,2,35,8,13
	.byte	'MAC_WATCHDOG_TIMEOUT',0
	.word	169800
	.byte	4,2,35,12,13
	.byte	'reserved_10',0
	.word	49478
	.byte	64,2,35,16,13
	.byte	'MAC_VLAN_TAG_CTRL',0
	.word	169570
	.byte	4,2,35,80,42
	.word	181644
	.byte	4,2,35,84,13
	.byte	'MAC_VLAN_HASH_TABLE',0
	.word	169346
	.byte	4,2,35,88,13
	.byte	'reserved_5C',0
	.word	2634
	.byte	4,2,35,92,42
	.word	181707
	.byte	4,2,35,96,13
	.byte	'MAC_INNER_VLAN_INCL',0
	.word	165906
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	4454
	.byte	8,2,35,104,13
	.byte	'MAC_Q0_TX_FLOW_CTRL',0
	.word	167170
	.byte	4,2,35,112,13
	.byte	'reserved_74',0
	.word	49438
	.byte	28,2,35,116,13
	.byte	'MAC_RX_FLOW_CTRL',0
	.word	167616
	.byte	4,3,35,144,1,13
	.byte	'MAC_RXQ_CTRL4',0
	.word	167544
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	4454
	.byte	8,3,35,152,1,13
	.byte	'MAC_RXQ_CTRL0',0
	.word	167328
	.byte	4,3,35,160,1,13
	.byte	'MAC_RXQ_CTRL1',0
	.word	167400
	.byte	4,3,35,164,1,13
	.byte	'MAC_RXQ_CTRL2',0
	.word	167472
	.byte	4,3,35,168,1,13
	.byte	'reserved_AC',0
	.word	2634
	.byte	4,3,35,172,1,13
	.byte	'MAC_INTERRUPT_STATUS',0
	.word	166063
	.byte	4,3,35,176,1,13
	.byte	'MAC_INTERRUPT_ENABLE',0
	.word	165984
	.byte	4,3,35,180,1,13
	.byte	'MAC_RX_TX_STATUS',0
	.word	167691
	.byte	4,3,35,184,1,13
	.byte	'reserved_BC',0
	.word	2634
	.byte	4,3,35,188,1,13
	.byte	'MAC_PMT_CONTROL_STATUS',0
	.word	166688
	.byte	4,3,35,192,1,42
	.word	181762
	.byte	4,3,35,196,1,13
	.byte	'reserved_C8',0
	.word	4454
	.byte	8,3,35,200,1,13
	.byte	'MAC_LPI_CONTROL_STATUS',0
	.word	166142
	.byte	4,3,35,208,1,13
	.byte	'MAC_LPI_TIMERS_CONTROL',0
	.word	166301
	.byte	4,3,35,212,1,13
	.byte	'MAC_LPI_ENTRY_TIMER',0
	.word	166223
	.byte	4,3,35,216,1,13
	.byte	'MAC_1US_TIC_COUNTER',0
	.word	164863
	.byte	4,3,35,220,1,13
	.byte	'reserved_E0',0
	.word	3825
	.byte	24,3,35,224,1,13
	.byte	'MAC_PHYIF_CONTROL_STATUS',0
	.word	166605
	.byte	4,3,35,248,1,13
	.byte	'reserved_FC',0
	.word	86519
	.byte	20,3,35,252,1,13
	.byte	'MAC_VERSION',0
	.word	169276
	.byte	4,3,35,144,2,13
	.byte	'MAC_DEBUG',0
	.word	165391
	.byte	4,3,35,148,2,13
	.byte	'reserved_118',0
	.word	2634
	.byte	4,3,35,152,2,13
	.byte	'MAC_HW_FEATURE0',0
	.word	165610
	.byte	4,3,35,156,2,13
	.byte	'MAC_HW_FEATURE1',0
	.word	165684
	.byte	4,3,35,160,2,13
	.byte	'MAC_HW_FEATURE2',0
	.word	165758
	.byte	4,3,35,164,2,13
	.byte	'MAC_HW_FEATURE3',0
	.word	165832
	.byte	4,3,35,168,2,13
	.byte	'reserved_12C',0
	.word	181913
	.byte	212,1,3,35,172,2,13
	.byte	'MAC_MDIO_ADDRESS',0
	.word	166382
	.byte	4,3,35,128,4,13
	.byte	'MAC_MDIO_DATA',0
	.word	166457
	.byte	4,3,35,132,4,13
	.byte	'reserved_208',0
	.word	181924
	.byte	40,3,35,136,4,13
	.byte	'MAC_CSR_SW_CTRL',0
	.word	165317
	.byte	4,3,35,176,4,13
	.byte	'reserved_234',0
	.word	2634
	.byte	4,3,35,180,4,13
	.byte	'MAC_EXT_CFG1',0
	.word	165459
	.byte	4,3,35,184,4,13
	.byte	'reserved_23C',0
	.word	181933
	.byte	196,1,3,35,188,4,13
	.byte	'MAC_ADDRESS_HIGH0',0
	.word	165016
	.byte	4,3,35,128,6,13
	.byte	'MAC_ADDRESS_LOW0',0
	.word	165166
	.byte	4,3,35,132,6,13
	.byte	'MAC_ADDRESS_HIGH1',0
	.word	164941
	.byte	4,3,35,136,6,13
	.byte	'MAC_ADDRESS_LOW1',0
	.word	165092
	.byte	4,3,35,140,6,13
	.byte	'MAC_ADDRESS_HIGH2',0
	.word	164941
	.byte	4,3,35,144,6,13
	.byte	'MAC_ADDRESS_LOW2',0
	.word	165092
	.byte	4,3,35,148,6,13
	.byte	'MAC_ADDRESS_HIGH3',0
	.word	164941
	.byte	4,3,35,152,6,13
	.byte	'MAC_ADDRESS_LOW3',0
	.word	165092
	.byte	4,3,35,156,6,13
	.byte	'MAC_ADDRESS_HIGH4',0
	.word	164941
	.byte	4,3,35,160,6,13
	.byte	'MAC_ADDRESS_LOW4',0
	.word	165092
	.byte	4,3,35,164,6,13
	.byte	'MAC_ADDRESS_HIGH5',0
	.word	164941
	.byte	4,3,35,168,6,13
	.byte	'MAC_ADDRESS_LOW5',0
	.word	165092
	.byte	4,3,35,172,6,13
	.byte	'MAC_ADDRESS_HIGH6',0
	.word	164941
	.byte	4,3,35,176,6,13
	.byte	'MAC_ADDRESS_LOW6',0
	.word	165092
	.byte	4,3,35,180,6,13
	.byte	'MAC_ADDRESS_HIGH7',0
	.word	164941
	.byte	4,3,35,184,6,13
	.byte	'MAC_ADDRESS_LOW7',0
	.word	165092
	.byte	4,3,35,188,6,13
	.byte	'MAC_ADDRESS_HIGH8',0
	.word	164941
	.byte	4,3,35,192,6,13
	.byte	'MAC_ADDRESS_LOW8',0
	.word	165092
	.byte	4,3,35,196,6,13
	.byte	'MAC_ADDRESS_HIGH9',0
	.word	164941
	.byte	4,3,35,200,6,13
	.byte	'MAC_ADDRESS_LOW9',0
	.word	165092
	.byte	4,3,35,204,6,13
	.byte	'MAC_ADDRESS_HIGH10',0
	.word	164941
	.byte	4,3,35,208,6,13
	.byte	'MAC_ADDRESS_LOW10',0
	.word	165092
	.byte	4,3,35,212,6,13
	.byte	'MAC_ADDRESS_HIGH11',0
	.word	164941
	.byte	4,3,35,216,6,13
	.byte	'MAC_ADDRESS_LOW11',0
	.word	165092
	.byte	4,3,35,220,6,13
	.byte	'MAC_ADDRESS_HIGH12',0
	.word	164941
	.byte	4,3,35,224,6,13
	.byte	'MAC_ADDRESS_LOW12',0
	.word	165092
	.byte	4,3,35,228,6,13
	.byte	'MAC_ADDRESS_HIGH13',0
	.word	164941
	.byte	4,3,35,232,6,13
	.byte	'MAC_ADDRESS_LOW13',0
	.word	165092
	.byte	4,3,35,236,6,13
	.byte	'MAC_ADDRESS_HIGH14',0
	.word	164941
	.byte	4,3,35,240,6,13
	.byte	'MAC_ADDRESS_LOW14',0
	.word	165092
	.byte	4,3,35,244,6,13
	.byte	'MAC_ADDRESS_HIGH15',0
	.word	164941
	.byte	4,3,35,248,6,13
	.byte	'MAC_ADDRESS_LOW15',0
	.word	165092
	.byte	4,3,35,252,6,13
	.byte	'MAC_ADDRESS_HIGH16',0
	.word	164941
	.byte	4,3,35,128,7,13
	.byte	'MAC_ADDRESS_LOW16',0
	.word	165092
	.byte	4,3,35,132,7,13
	.byte	'MAC_ADDRESS_HIGH17',0
	.word	164941
	.byte	4,3,35,136,7,13
	.byte	'MAC_ADDRESS_LOW17',0
	.word	165092
	.byte	4,3,35,140,7,13
	.byte	'MAC_ADDRESS_HIGH18',0
	.word	164941
	.byte	4,3,35,144,7,13
	.byte	'MAC_ADDRESS_LOW18',0
	.word	165092
	.byte	4,3,35,148,7,13
	.byte	'MAC_ADDRESS_HIGH19',0
	.word	164941
	.byte	4,3,35,152,7,13
	.byte	'MAC_ADDRESS_LOW19',0
	.word	165092
	.byte	4,3,35,156,7,13
	.byte	'MAC_ADDRESS_HIGH20',0
	.word	164941
	.byte	4,3,35,160,7,13
	.byte	'MAC_ADDRESS_LOW20',0
	.word	165092
	.byte	4,3,35,164,7,13
	.byte	'MAC_ADDRESS_HIGH21',0
	.word	164941
	.byte	4,3,35,168,7,13
	.byte	'MAC_ADDRESS_LOW21',0
	.word	165092
	.byte	4,3,35,172,7,13
	.byte	'MAC_ADDRESS_HIGH22',0
	.word	164941
	.byte	4,3,35,176,7,13
	.byte	'MAC_ADDRESS_LOW22',0
	.word	165092
	.byte	4,3,35,180,7,13
	.byte	'MAC_ADDRESS_HIGH23',0
	.word	164941
	.byte	4,3,35,184,7,13
	.byte	'MAC_ADDRESS_LOW23',0
	.word	165092
	.byte	4,3,35,188,7,13
	.byte	'MAC_ADDRESS_HIGH24',0
	.word	164941
	.byte	4,3,35,192,7,13
	.byte	'MAC_ADDRESS_LOW24',0
	.word	165092
	.byte	4,3,35,196,7,13
	.byte	'MAC_ADDRESS_HIGH25',0
	.word	164941
	.byte	4,3,35,200,7,13
	.byte	'MAC_ADDRESS_LOW25',0
	.word	165092
	.byte	4,3,35,204,7,13
	.byte	'MAC_ADDRESS_HIGH26',0
	.word	164941
	.byte	4,3,35,208,7,13
	.byte	'MAC_ADDRESS_LOW26',0
	.word	165092
	.byte	4,3,35,212,7,13
	.byte	'MAC_ADDRESS_HIGH27',0
	.word	164941
	.byte	4,3,35,216,7,13
	.byte	'MAC_ADDRESS_LOW27',0
	.word	165092
	.byte	4,3,35,220,7,13
	.byte	'MAC_ADDRESS_HIGH28',0
	.word	164941
	.byte	4,3,35,224,7,13
	.byte	'MAC_ADDRESS_LOW28',0
	.word	165092
	.byte	4,3,35,228,7,13
	.byte	'MAC_ADDRESS_HIGH29',0
	.word	164941
	.byte	4,3,35,232,7,13
	.byte	'MAC_ADDRESS_LOW29',0
	.word	165092
	.byte	4,3,35,236,7,13
	.byte	'MAC_ADDRESS_HIGH30',0
	.word	164941
	.byte	4,3,35,240,7,13
	.byte	'MAC_ADDRESS_LOW30',0
	.word	165092
	.byte	4,3,35,244,7,13
	.byte	'MAC_ADDRESS_HIGH31',0
	.word	164941
	.byte	4,3,35,248,7,13
	.byte	'MAC_ADDRESS_LOW31',0
	.word	165092
	.byte	4,3,35,252,7,13
	.byte	'reserved_400',0
	.word	181944
	.byte	128,6,3,35,128,8,13
	.byte	'MMC_CONTROL',0
	.word	169879
	.byte	4,3,35,128,14,13
	.byte	'MMC_RX_INTERRUPT',0
	.word	170112
	.byte	4,3,35,132,14,13
	.byte	'MMC_TX_INTERRUPT',0
	.word	170267
	.byte	4,3,35,136,14,13
	.byte	'MMC_RX_INTERRUPT_MASK',0
	.word	170187
	.byte	4,3,35,140,14,13
	.byte	'MMC_TX_INTERRUPT_MASK',0
	.word	170342
	.byte	4,3,35,144,14,13
	.byte	'TX_OCTET_COUNT_GOOD_BAD',0
	.word	179196
	.byte	4,3,35,148,14,13
	.byte	'TX_PACKET_COUNT_GOOD_BAD',0
	.word	179437
	.byte	4,3,35,152,14,13
	.byte	'TX_BROADCAST_PACKETS_GOOD',0
	.word	178111
	.byte	4,3,35,156,14,13
	.byte	'TX_MULTICAST_PACKETS_GOOD',0
	.word	178853
	.byte	4,3,35,160,14,13
	.byte	'TX_64OCTETS_PACKETS_GOOD_BAD',0
	.word	177932
	.byte	4,3,35,164,14,13
	.byte	'TX_65TO127OCTETS_PACKETS_GOOD_BAD',0
	.word	178019
	.byte	4,3,35,168,14,13
	.byte	'TX_128TO255OCTETS_PACKETS_GOOD_BAD',0
	.word	177652
	.byte	4,3,35,172,14,13
	.byte	'TX_256TO511OCTETS_PACKETS_GOOD_BAD',0
	.word	177745
	.byte	4,3,35,176,14,13
	.byte	'TX_512TO1023OCTETS_PACKETS_GOOD_BAD',0
	.word	177838
	.byte	4,3,35,180,14,13
	.byte	'TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD',0
	.word	177558
	.byte	4,3,35,184,14,13
	.byte	'TX_UNICAST_PACKETS_GOOD_BAD',0
	.word	179771
	.byte	4,3,35,188,14,13
	.byte	'TX_MULTICAST_PACKETS_GOOD_BAD',0
	.word	178937
	.byte	4,3,35,192,14,13
	.byte	'TX_BROADCAST_PACKETS_GOOD_BAD',0
	.word	178195
	.byte	4,3,35,196,14,13
	.byte	'TX_UNDERFLOW_ERROR_PACKETS',0
	.word	179686
	.byte	4,3,35,200,14,13
	.byte	'TX_SINGLE_COLLISION_GOOD_PACKETS',0
	.word	179595
	.byte	4,3,35,204,14,13
	.byte	'TX_MULTIPLE_COLLISION_GOOD_PACKETS',0
	.word	179025
	.byte	4,3,35,208,14,13
	.byte	'TX_DEFERRED_PACKETS',0
	.word	178366
	.byte	4,3,35,212,14,13
	.byte	'TX_LATE_COLLISION_PACKETS',0
	.word	178619
	.byte	4,3,35,216,14,13
	.byte	'TX_EXCESSIVE_COLLISION_PACKETS',0
	.word	178444
	.byte	4,3,35,220,14,13
	.byte	'TX_CARRIER_ERROR_PACKETS',0
	.word	178283
	.byte	4,3,35,224,14,13
	.byte	'TX_OCTET_COUNT_GOOD',0
	.word	179118
	.byte	4,3,35,228,14,13
	.byte	'TX_PACKET_COUNT_GOOD',0
	.word	179358
	.byte	4,3,35,232,14,13
	.byte	'TX_EXCESSIVE_DEFERRAL_ERROR',0
	.word	178533
	.byte	4,3,35,236,14,13
	.byte	'TX_PAUSE_PACKETS',0
	.word	179520
	.byte	4,3,35,240,14,13
	.byte	'TX_VLAN_PACKETS_GOOD',0
	.word	179857
	.byte	4,3,35,244,14,13
	.byte	'TX_OSIZE_PACKETS_GOOD',0
	.word	179278
	.byte	4,3,35,248,14,13
	.byte	'reserved_77C',0
	.word	2634
	.byte	4,3,35,252,14,13
	.byte	'RX_PACKETS_COUNT_GOOD_BAD',0
	.word	176837
	.byte	4,3,35,128,15,13
	.byte	'RX_OCTET_COUNT_GOOD_BAD',0
	.word	176585
	.byte	4,3,35,132,15,13
	.byte	'RX_OCTET_COUNT_GOOD',0
	.word	176507
	.byte	4,3,35,136,15,13
	.byte	'RX_BROADCAST_PACKETS_GOOD',0
	.word	175781
	.byte	4,3,35,140,15,13
	.byte	'RX_MULTICAST_PACKETS_GOOD',0
	.word	176423
	.byte	4,3,35,144,15,13
	.byte	'RX_CRC_ERROR_PACKETS',0
	.word	175947
	.byte	4,3,35,148,15,13
	.byte	'RX_ALIGNMENT_ERROR_PACKETS',0
	.word	175696
	.byte	4,3,35,152,15,13
	.byte	'RX_RUNT_ERROR_PACKETS',0
	.word	177079
	.byte	4,3,35,156,15,13
	.byte	'RX_JABBER_ERROR_PACKETS',0
	.word	176109
	.byte	4,3,35,160,15,13
	.byte	'RX_UNDERSIZE_PACKETS_GOOD',0
	.word	177159
	.byte	4,3,35,164,15,13
	.byte	'RX_OVERSIZE_PACKETS_GOOD',0
	.word	176754
	.byte	4,3,35,168,15,13
	.byte	'RX_64OCTETS_PACKETS_GOOD_BAD',0
	.word	175517
	.byte	4,3,35,172,15,13
	.byte	'RX_65TO127OCTETS_PACKETS_GOOD_BAD',0
	.word	175604
	.byte	4,3,35,176,15,13
	.byte	'RX_128TO255OCTETS_PACKETS_GOOD_BAD',0
	.word	175237
	.byte	4,3,35,180,15,13
	.byte	'RX_256TO511OCTETS_PACKETS_GOOD_BAD',0
	.word	175330
	.byte	4,3,35,184,15,13
	.byte	'RX_512TO1023OCTETS_PACKETS_GOOD_BAD',0
	.word	175423
	.byte	4,3,35,188,15,13
	.byte	'RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD',0
	.word	175143
	.byte	4,3,35,192,15,13
	.byte	'RX_UNICAST_PACKETS_GOOD',0
	.word	177243
	.byte	4,3,35,196,15,13
	.byte	'RX_LENGTH_ERROR_PACKETS',0
	.word	176191
	.byte	4,3,35,200,15,13
	.byte	'RX_OUT_OF_RANGE_TYPE_PACKETS',0
	.word	176667
	.byte	4,3,35,204,15,13
	.byte	'RX_PAUSE_PACKETS',0
	.word	176921
	.byte	4,3,35,208,15,13
	.byte	'RX_FIFO_OVERFLOW_PACKETS',0
	.word	176026
	.byte	4,3,35,212,15,13
	.byte	'RX_VLAN_PACKETS_GOOD_BAD',0
	.word	177325
	.byte	4,3,35,216,15,13
	.byte	'RX_WATCHDOG_ERROR_PACKETS',0
	.word	177408
	.byte	4,3,35,220,15,13
	.byte	'RX_RECEIVE_ERROR_PACKETS',0
	.word	176996
	.byte	4,3,35,224,15,13
	.byte	'RX_CONTROL_PACKETS_GOOD',0
	.word	175865
	.byte	4,3,35,228,15,13
	.byte	'reserved_7E8',0
	.word	2634
	.byte	4,3,35,232,15,13
	.byte	'TX_LPI_USEC_CNTR',0
	.word	178778
	.byte	4,3,35,236,15,13
	.byte	'TX_LPI_TRAN_CNTR',0
	.word	178703
	.byte	4,3,35,240,15,13
	.byte	'RX_LPI_USEC_CNTR',0
	.word	176348
	.byte	4,3,35,244,15,13
	.byte	'RX_LPI_TRAN_CNTR',0
	.word	176273
	.byte	4,3,35,248,15,13
	.byte	'reserved_7FC',0
	.word	2634
	.byte	4,3,35,252,15,13
	.byte	'MMC_IPC_RX_INTERRUPT_MASK',0
	.word	170028
	.byte	4,3,35,128,16,13
	.byte	'reserved_804',0
	.word	2634
	.byte	4,3,35,132,16,13
	.byte	'MMC_IPC_RX_INTERRUPT',0
	.word	169949
	.byte	4,3,35,136,16,13
	.byte	'reserved_80C',0
	.word	2634
	.byte	4,3,35,140,16,13
	.byte	'RXIPV4_GOOD_PACKETS',0
	.word	173430
	.byte	4,3,35,144,16,13
	.byte	'RXIPV4_HEADER_ERROR_PACKETS',0
	.word	173593
	.byte	4,3,35,148,16,13
	.byte	'RXIPV4_NO_PAYLOAD_PACKETS',0
	.word	173762
	.byte	4,3,35,152,16,13
	.byte	'RXIPV4_FRAGMENTED_PACKETS',0
	.word	173269
	.byte	4,3,35,156,16,13
	.byte	'RXIPV4_UDP_CHECKSUM_DISABLED_PACKETS',0
	.word	173846
	.byte	4,3,35,160,16,13
	.byte	'RXIPV6_GOOD_PACKETS',0
	.word	174111
	.byte	4,3,35,164,16,13
	.byte	'RXIPV6_HEADER_ERROR_PACKETS',0
	.word	174274
	.byte	4,3,35,168,16,13
	.byte	'RXIPV6_NO_PAYLOAD_PACKETS',0
	.word	174443
	.byte	4,3,35,172,16,13
	.byte	'RXUDP_GOOD_PACKETS',0
	.word	175066
	.byte	4,3,35,176,16,13
	.byte	'RXUDP_ERROR_PACKETS',0
	.word	174912
	.byte	4,3,35,180,16,13
	.byte	'RXTCP_GOOD_PACKETS',0
	.word	174758
	.byte	4,3,35,184,16,13
	.byte	'RXTCP_ERROR_PACKETS',0
	.word	174604
	.byte	4,3,35,188,16,13
	.byte	'RXICMP_GOOD_PACKETS',0
	.word	173108
	.byte	4,3,35,192,16,13
	.byte	'RXICMP_ERROR_PACKETS',0
	.word	172952
	.byte	4,3,35,196,16,13
	.byte	'reserved_848',0
	.word	4454
	.byte	8,3,35,200,16,13
	.byte	'RXIPV4_GOOD_OCTETS',0
	.word	173353
	.byte	4,3,35,208,16,13
	.byte	'RXIPV4_HEADER_ERROR_OCTETS',0
	.word	173508
	.byte	4,3,35,212,16,13
	.byte	'RXIPV4_NO_PAYLOAD_OCTETS',0
	.word	173679
	.byte	4,3,35,216,16,13
	.byte	'RXIPV4_FRAGMENTED_OCTETS',0
	.word	173186
	.byte	4,3,35,220,16,13
	.byte	'RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS',0
	.word	173941
	.byte	4,3,35,224,16,13
	.byte	'RXIPV6_GOOD_OCTETS',0
	.word	174034
	.byte	4,3,35,228,16,13
	.byte	'RXIPV6_HEADER_ERROR_OCTETS',0
	.word	174189
	.byte	4,3,35,232,16,13
	.byte	'RXIPV6_NO_PAYLOAD_OCTETS',0
	.word	174360
	.byte	4,3,35,236,16,13
	.byte	'RXUDP_GOOD_OCTETS',0
	.word	174990
	.byte	4,3,35,240,16,13
	.byte	'RXUDP_ERROR_OCTETS',0
	.word	174835
	.byte	4,3,35,244,16,13
	.byte	'RXTCP_GOOD_OCTETS',0
	.word	174682
	.byte	4,3,35,248,16,13
	.byte	'RXTCP_ERROR_OCTETS',0
	.word	174527
	.byte	4,3,35,252,16,13
	.byte	'RXICMP_GOOD_OCTETS',0
	.word	173031
	.byte	4,3,35,128,17,13
	.byte	'RXICMP_ERROR_OCTETS',0
	.word	172874
	.byte	4,3,35,132,17,13
	.byte	'reserved_888',0
	.word	181955
	.byte	248,4,3,35,136,17,13
	.byte	'MAC_TIMESTAMP_CONTROL',0
	.word	168372
	.byte	4,3,35,128,22,13
	.byte	'MAC_SUB_SECOND_INCREMENT',0
	.word	167766
	.byte	4,3,35,132,22,13
	.byte	'MAC_SYSTEM_TIME_SECONDS',0
	.word	168122
	.byte	4,3,35,136,22,13
	.byte	'MAC_SYSTEM_TIME_NANOSECONDS',0
	.word	167943
	.byte	4,3,35,140,22,13
	.byte	'MAC_SYSTEM_TIME_SECONDS_UPDATE',0
	.word	168204
	.byte	4,3,35,144,22,13
	.byte	'MAC_SYSTEM_TIME_NANOSECONDS_UPDATE',0
	.word	168029
	.byte	4,3,35,148,22,13
	.byte	'MAC_TIMESTAMP_ADDEND',0
	.word	168293
	.byte	4,3,35,152,22,13
	.byte	'MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS',0
	.word	167849
	.byte	4,3,35,156,22,13
	.byte	'MAC_TIMESTAMP_STATUS',0
	.word	169013
	.byte	4,3,35,160,22,13
	.byte	'reserved_B24',0
	.word	4794
	.byte	12,3,35,164,22,13
	.byte	'MAC_TX_TIMESTAMP_STATUS_NANOSECONDS',0
	.word	169092
	.byte	4,3,35,176,22,13
	.byte	'MAC_TX_TIMESTAMP_STATUS_SECONDS',0
	.word	169186
	.byte	4,3,35,180,22,13
	.byte	'reserved_B38',0
	.word	3825
	.byte	24,3,35,184,22,13
	.byte	'MAC_TIMESTAMP_INGRESS_ASYM_CORR',0
	.word	168731
	.byte	4,3,35,208,22,13
	.byte	'MAC_TIMESTAMP_EGRESS_ASYM_CORR',0
	.word	168452
	.byte	4,3,35,212,22,13
	.byte	'MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND',0
	.word	168821
	.byte	4,3,35,216,22,13
	.byte	'MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND',0
	.word	168541
	.byte	4,3,35,220,22,13
	.byte	'MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSEC',0
	.word	168917
	.byte	4,3,35,224,22,13
	.byte	'MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSEC',0
	.word	168636
	.byte	4,3,35,228,22,13
	.byte	'reserved_B68',0
	.word	4454
	.byte	8,3,35,232,22,13
	.byte	'MAC_PPS_CONTROL',0
	.word	167096
	.byte	4,3,35,240,22,13
	.byte	'reserved_B74',0
	.word	4794
	.byte	12,3,35,244,22,13
	.byte	'MAC_PPS0_TARGET_TIME_SECONDS',0
	.word	166936
	.byte	4,3,35,128,23,13
	.byte	'MAC_PPS0_TARGET_TIME_NANOSECONDS',0
	.word	166845
	.byte	4,3,35,132,23,13
	.byte	'MAC_PPS0_INTERVAL',0
	.word	166769
	.byte	4,3,35,136,23,13
	.byte	'MAC_PPS0_WIDTH',0
	.word	167023
	.byte	4,3,35,140,23,13
	.byte	'reserved_B90',0
	.word	181966
	.byte	112,3,35,144,23,13
	.byte	'MTL_OPERATION_MODE',0
	.word	170501
	.byte	4,3,35,128,24,13
	.byte	'reserved_C04',0
	.word	49438
	.byte	28,3,35,132,24,13
	.byte	'MTL_INTERRUPT_STATUS',0
	.word	170422
	.byte	4,3,35,160,24,13
	.byte	'reserved_C24',0
	.word	4794
	.byte	12,3,35,164,24,13
	.byte	'MTL_RXQ_DMA_MAP0',0
	.word	171227
	.byte	4,3,35,176,24,13
	.byte	'reserved_C34',0
	.word	181975
	.byte	204,1,3,35,180,24,13
	.byte	'MTL_TXQ0',0
	.word	181986
	.byte	28,3,35,128,26,13
	.byte	'reserved_D1C',0
	.word	49363
	.byte	16,3,35,156,26,13
	.byte	'MTL_Q0',0
	.word	181991
	.byte	4,3,35,172,26,13
	.byte	'MTL_RXQ0',0
	.word	181996
	.byte	16,3,35,176,26,13
	.byte	'MTL_TXQ1',0
	.word	182001
	.byte	40,3,35,192,26,13
	.byte	'reserved_D68',0
	.word	2634
	.byte	4,3,35,232,26,13
	.byte	'MTL_Q1',0
	.word	182006
	.byte	4,3,35,236,26,13
	.byte	'MTL_RXQ1',0
	.word	182011
	.byte	16,3,35,240,26,13
	.byte	'MTL_TXQ2',0
	.word	182016
	.byte	40,3,35,128,27,13
	.byte	'reserved_DA8',0
	.word	2634
	.byte	4,3,35,168,27,13
	.byte	'MTL_Q2',0
	.word	182021
	.byte	4,3,35,172,27,13
	.byte	'MTL_RXQ2',0
	.word	182026
	.byte	16,3,35,176,27,13
	.byte	'MTL_TXQ3',0
	.word	182031
	.byte	40,3,35,192,27,13
	.byte	'reserved_DE8',0
	.word	2634
	.byte	4,3,35,232,27,13
	.byte	'MTL_Q3',0
	.word	182036
	.byte	4,3,35,236,27,13
	.byte	'MTL_RXQ3',0
	.word	182041
	.byte	16,3,35,240,27,13
	.byte	'reserved_E00',0
	.word	182046
	.byte	128,4,3,35,128,28,13
	.byte	'DMA_MODE',0
	.word	164403
	.byte	4,3,35,128,32,13
	.byte	'DMA_SYSBUS_MODE',0
	.word	164470
	.byte	4,3,35,132,32,13
	.byte	'DMA_INTERRUPT_STATUS',0
	.word	164324
	.byte	4,3,35,136,32,13
	.byte	'DMA_DEBUG_STATUS0',0
	.word	164172
	.byte	4,3,35,140,32,13
	.byte	'DMA_DEBUG_STATUS1',0
	.word	164248
	.byte	4,3,35,144,32,13
	.byte	'reserved_1014',0
	.word	182057
	.byte	236,1,3,35,148,32,13
	.byte	'DMA_CH',0
	.word	182078
	.byte	128,4,3,35,128,34,13
	.byte	'reserved_1300',0
	.word	182083
	.byte	128,26,3,35,128,38,13
	.byte	'CLC',0
	.word	162616
	.byte	4,3,35,128,64,13
	.byte	'ID',0
	.word	164608
	.byte	4,3,35,132,64,13
	.byte	'GPCTL',0
	.word	164544
	.byte	4,3,35,136,64,13
	.byte	'ACCEN0',0
	.word	162340
	.byte	4,3,35,140,64,13
	.byte	'ACCEN1',0
	.word	162405
	.byte	4,3,35,144,64,13
	.byte	'KRST0',0
	.word	164669
	.byte	4,3,35,148,64,13
	.byte	'KRST1',0
	.word	164733
	.byte	4,3,35,152,64,13
	.byte	'KRSTCLR',0
	.word	164797
	.byte	4,3,35,156,64,13
	.byte	'ACCEND',0
	.word	182103
	.byte	32,3,35,160,64,13
	.byte	'SKEWCTL',0
	.word	177492
	.byte	4,3,35,192,64,13
	.byte	'reserved_2044',0
	.word	182108
	.byte	188,1,3,35,196,64,0,14
	.word	182119
	.byte	20
	.byte	'Ifx_GETH',0,34,133,36,3
	.word	190390
	.byte	38,35,60,9,16,13
	.byte	'sysFreq',0
	.word	234
	.byte	4,2,35,0,13
	.byte	'cpuFreq',0
	.word	234
	.byte	4,2,35,4,13
	.byte	'pllFreq',0
	.word	234
	.byte	4,2,35,8,13
	.byte	'stmFreq',0
	.word	234
	.byte	4,2,35,12,0,20
	.byte	'AppInfo',0,35,66,3
	.word	190413
.L459:
	.byte	38,35,69,9,20,13
	.byte	'info',0
	.word	190413
	.byte	16,2,35,0,13
	.byte	'TickCount_1ms',0
	.word	9946
	.byte	4,2,35,16,0,20
	.byte	'App_Cpu',0,35,73,3
	.word	190503
	.byte	17,36,86,9,1,18
	.byte	'IfxCpu_Trap_MemoryManagement_Id_virtualAddressFill',0,0,18
	.byte	'IfxCpu_Trap_MemoryManagement_Id_virtualAddressProtection',0,1,0,20
	.byte	'IfxCpu_Trap_MemoryManagement_Id',0,36,90,3
	.word	190562
	.byte	17,36,95,9,1,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_privilegeViolation',0,1,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_memoryProtectionRead',0,2,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_memoryProtectionWrite',0,3,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_memoryProtectionExecute',0,4,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_memoryProtectionPeripheralAccess',0,5,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_memoryProtectionNullAddress',0,6,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_globalRegisterWriteProtection',0,7,0,20
	.byte	'IfxCpu_Trap_InternalProtection_Id',0,36,104,3
	.word	190720
	.byte	17,36,109,9,1,18
	.byte	'IfxCpu_Trap_InstructionErrors_Id_illegalOpcode',0,1,18
	.byte	'IfxCpu_Trap_InstructionErrors_Id_unimplementedOpcode',0,2,18
	.byte	'IfxCpu_Trap_InstructionErrors_Id_invalidOperand',0,3,18
	.byte	'IfxCpu_Trap_InstructionErrors_Id_dataAddressAlignment',0,4,18
	.byte	'IfxCpu_Trap_InstructionErrors_Id_invalidMemoryAddress',0,5,0,20
	.byte	'IfxCpu_Trap_InstructionErrors_Id',0,36,116,3
	.word	191197
	.byte	17,36,121,9,1,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_freeContextListDepletion',0,1,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_callDepthOverflow',0,2,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_callDepthUnderflow',0,3,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_freeContextListUnderflow',0,4,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_callStackUnderflow',0,5,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_contextType',0,6,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_nestingError',0,7,0,20
	.byte	'IfxCpu_Trap_ContextManagement_Id',0,36,130,1,3
	.word	191510
	.byte	17,36,135,1,9,1,18
	.byte	'IfxCpu_Trap_Bus_Id_programFetchSynchronousError',0,1,18
	.byte	'IfxCpu_Trap_Bus_Id_dataAccessSynchronousError',0,2,18
	.byte	'IfxCpu_Trap_Bus_Id_dataAccessAsynchronousError',0,3,18
	.byte	'IfxCpu_Trap_Bus_Id_CoprocessorTrapAsynchronousError',0,4,18
	.byte	'IfxCpu_Trap_Bus_Id_programMemoryIntegrityError',0,5,18
	.byte	'IfxCpu_Trap_Bus_Id_dataMemoryIntegrityError',0,6,18
	.byte	'IfxCpu_Trap_Bus_Id_temporalAsynchronousError',0,7,0,20
	.byte	'IfxCpu_Trap_Bus_Id',0,36,144,1,3
	.word	191934
	.byte	17,36,149,1,9,1,18
	.byte	'IfxCpu_Trap_Assertion_Id_arithmeticOverflow',0,1,18
	.byte	'IfxCpu_Trap_Assertion_Id_stickyArithmeticOverflow',0,2,0,20
	.byte	'IfxCpu_Trap_Assertion_Id',0,36,153,1,3
	.word	192312
	.byte	20
	.byte	'IfxCpu_Trap_SystemCall_Id',0,36,158,1,16
	.word	16723
	.byte	20
	.byte	'IfxCpu_Trap_NonMaskableInterrupt_Id',0,36,163,1,16
	.word	16723
.L460:
	.byte	15,48
	.word	20647
	.byte	16,1,0,15,8
	.word	14265
	.byte	16,1,0
.L461:
	.byte	24
	.word	192540
	.byte	15,8
	.word	10511
	.byte	16,1,0
.L462:
	.byte	24
	.word	192554
.L463:
	.byte	14
	.word	9946
.L464:
	.byte	14
	.word	9946
.L465:
	.byte	14
	.word	9946
.L466:
	.byte	14
	.word	9946
.L467:
	.byte	14
	.word	9946
.L468:
	.byte	14
	.word	9946
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L105:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,1,1,11,15,73,19,0,0,16,33,0,47,15,0,0,17,4,1,58,15,59
	.byte	15,57,15,11,15,0,0,18,40,0,3,8,28,13,0,0,19,11,1,0,0,20,22,0,3,8,58,15,59,15,57,15,73,19,0,0,21,21,1,73
	.byte	19,54,15,39,12,0,0,22,5,0,73,19,0,0,23,21,1,54,15,39,12,0,0,24,38,0,73,19,0,0,25,46,1,3,8,54,15,39,12
	.byte	63,12,60,12,0,0,26,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,27,5,0,3,8,73,19,0,0,28,46,0,3,8,54,15,39
	.byte	12,63,12,60,12,0,0,29,46,0,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,30,46,0,3,8,58,15,59,15,57
	.byte	15,73,19,54,15,39,12,63,12,60,12,0,0,31,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,32
	.byte	46,1,49,19,0,0,33,5,0,49,19,0,0,34,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,35,29,1,49,19
	.byte	0,0,36,11,0,49,19,0,0,37,11,1,49,19,0,0,38,19,1,58,15,59,15,57,15,11,15,0,0,39,46,0,3,8,58,15,59,15,57
	.byte	15,73,19,54,15,63,12,60,12,0,0,40,21,0,54,15,0,0,41,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,42
	.byte	13,0,73,19,11,15,56,9,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L106:
	.word	.L552-.L551
.L551:
	.half	3
	.word	.L554-.L553
.L553:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\UART',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include\\libc',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxScuWdt.h',0,2,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0
	.byte	'IfxPort.h',0,4,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'IfxScuCcu.h',0,2,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxCpu_cfg.h',0,5,0,0
	.byte	'IfxSrc.h',0,6,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'IfxSrc_cfg.h',0,5,0,0
	.byte	'IfxStm.h',0,7,0,0
	.byte	'IfxStm_regdef.h',0,3,0,0
	.byte	'Bsp.h',0,8,0,0
	.byte	'IfxStdIf_Timer.h',0,9,0,0
	.byte	'IfxStdIf.h',0,9,0,0
	.byte	'rtthread.h',0,10,0,0
	.byte	'rtdef.h',0,10,0,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0
	.byte	'IfxCpu_regdef.h',0,3,0,0
	.byte	'rthw.h',0,10,0,0
	.byte	'IfxStm_Timer.h',0,11,0,0
	.byte	'UART_Logging.h',0,12,0,0
	.byte	'stdint.h',0,13,0,0
	.byte	'time.h',0,13,0,0
	.byte	'libc_fdset.h',0,14,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'Ifx_TypesReg.h',0,3,0,0
	.byte	'IfxScu_cfg.h',0,5,0,0
	.byte	'IfxSmu_regdef.h',0,3,0,0
	.byte	'IfxCbs_regdef.h',0,3,0,0
	.byte	'IfxGeth_regdef.h',0,3,0,0
	.byte	'Cpu_Main.h',0,15,0,0
	.byte	'IfxCpu_Trap.h',0,16,0,0,0
.L554:
.L552:
	.sdecl	'.debug_info',debug,cluster('rt_hw_stack_init')
	.sect	'.debug_info'
.L107:
	.word	385
	.half	3
	.word	.L108
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L110,.L109
	.byte	2
	.word	.L103
	.byte	3
	.byte	'rt_hw_stack_init',0,1,144,4,13
	.word	.L287
	.byte	1,1,1
	.word	.L96,.L288,.L95
	.byte	4
	.byte	'tentry',0,1,144,4,42
	.word	.L289,.L290
	.byte	4
	.byte	'parameter',0,1,145,4,42
	.word	.L289,.L291
	.byte	4
	.byte	'stack_addr',0,1,146,4,42
	.word	.L287,.L292
	.byte	4
	.byte	'texit',0,1,147,4,42
	.word	.L289,.L293
	.byte	5
	.word	.L96,.L288
	.byte	6
	.byte	'level',0,1,149,4,15
	.word	.L294,.L295
	.byte	6
	.byte	'upperCtxPtr',0,1,150,4,18
	.word	.L296,.L297
	.byte	6
	.byte	'lowCtxPtr',0,1,151,4,18
	.word	.L298,.L299
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('rt_hw_stack_init')
	.sect	'.debug_abbrev'
.L108:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('rt_hw_stack_init')
	.sect	'.debug_line'
.L109:
	.word	.L556-.L555
.L555:
	.half	3
	.word	.L558-.L557
.L557:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L558:
	.byte	5,13,7,0,5,2
	.word	.L96
	.byte	3,143,4,1,5,28,9
	.half	.L530-.L96
	.byte	3,7,1,5,36,9
	.half	.L525-.L530
	.byte	3,2,1,5,16,9
	.half	.L523-.L525
	.byte	3,6,1,5,23,9
	.half	.L559-.L523
	.byte	3,3,1,5,21,9
	.half	.L560-.L559
	.byte	1,5,13,9
	.half	.L532-.L560
	.byte	3,2,1,5,9,9
	.half	.L561-.L532
	.byte	1,5,25,7,9
	.half	.L562-.L561
	.byte	3,3,1,5,23,9
	.half	.L526-.L562
	.byte	1,5,25,9
	.half	.L32-.L526
	.byte	1,5,13,3,4,1,5,45,7,9
	.half	.L563-.L32
	.byte	1,5,20,7,9
	.half	.L564-.L563
	.byte	3,3,1,5,39,9
	.half	.L565-.L564
	.byte	3,1,1,5,19,9
	.half	.L566-.L565
	.byte	1,5,20,9
	.half	.L567-.L566
	.byte	3,2,1,5,22,9
	.half	.L568-.L567
	.byte	3,125,1,5,20,9
	.half	.L33-.L568
	.byte	3,8,1,5,28,9
	.half	.L35-.L33
	.byte	3,4,1,5,26,9
	.half	.L524-.L35
	.byte	3,5,1,5,54,1,5,23,9
	.half	.L536-.L524
	.byte	3,1,1,5,25,9
	.half	.L569-.L536
	.byte	3,4,1,5,23,3,126,1,5,24,9
	.half	.L570-.L569
	.byte	3,5,1,5,23,3,125,1,5,52,9
	.half	.L537-.L570
	.byte	3,3,1,5,20,9
	.half	.L539-.L537
	.byte	3,2,1,9
	.half	.L571-.L539
	.byte	3,2,1,5,86,9
	.half	.L572-.L571
	.byte	3,2,1,5,55,9
	.half	.L573-.L572
	.byte	3,2,1,5,66,9
	.half	.L545-.L573
	.byte	3,126,1,5,22,1,5,55,9
	.half	.L574-.L545
	.byte	3,2,1,5,37,9
	.half	.L575-.L574
	.byte	1,5,12,9
	.half	.L576-.L575
	.byte	3,2,1,5,5,9
	.half	.L577-.L576
	.byte	3,2,1,5,1,9
	.half	.L546-.L577
	.byte	3,1,1,7,9
	.half	.L111-.L546
	.byte	0,1,1
.L556:
	.sdecl	'.debug_ranges',debug,cluster('rt_hw_stack_init')
	.sect	'.debug_ranges'
.L110:
	.word	-1,.L96,0,.L111-.L96,0,0
	.sdecl	'.debug_info',debug,cluster('rt_hw_local_irq_disable')
	.sect	'.debug_info'
.L112:
	.word	311
	.half	3
	.word	.L113
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L115,.L114
	.byte	2
	.word	.L103
	.byte	3
	.byte	'rt_hw_local_irq_disable',0,1,200,3,11
	.word	.L294
	.byte	1,1
	.word	.L94,.L300,.L93
	.byte	4
	.word	.L94,.L300
	.byte	5
	.word	.L301,.L94,.L302
	.byte	6
	.word	.L303,.L94,.L302
	.byte	5
	.word	.L304,.L94,.L305
	.byte	6
	.word	.L306,.L94,.L305
	.byte	7
	.byte	'reg',0,2,235,5,17
	.word	.L307,.L308
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('rt_hw_local_irq_disable')
	.sect	'.debug_abbrev'
.L113:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,29,1,49,16,17,1,18,1,0,0,6,11,1,49,16,17,1,18,1
	.byte	0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('rt_hw_local_irq_disable')
	.sect	'.debug_line'
.L114:
	.word	.L579-.L578
.L578:
	.half	3
	.word	.L581-.L580
.L580:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L581:
	.byte	4,2,5,19,7,0,5,2
	.word	.L94
	.byte	3,235,5,1,5,17,9
	.half	.L520-.L94
	.byte	3,1,1,5,21,9
	.half	.L521-.L520
	.byte	1,5,14,9
	.half	.L305-.L521
	.byte	3,8,1,5,10,9
	.half	.L582-.L305
	.byte	3,1,1,4,1,5,1,9
	.half	.L302-.L582
	.byte	3,215,125,1,7,9
	.half	.L116-.L302
	.byte	0,1,1
.L579:
	.sdecl	'.debug_ranges',debug,cluster('rt_hw_local_irq_disable')
	.sect	'.debug_ranges'
.L115:
	.word	-1,.L94,0,.L116-.L94,0,0
	.sdecl	'.debug_info',debug,cluster('rt_hw_local_irq_enable')
	.sect	'.debug_info'
.L117:
	.word	326
	.half	3
	.word	.L118
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L120,.L119
	.byte	2
	.word	.L103
	.byte	3
	.byte	'rt_hw_local_irq_enable',0,1,190,3,6,1,1,1
	.word	.L90,.L309,.L89
	.byte	4
	.byte	'level',0,1,190,3,39
	.word	.L294,.L310
	.byte	5
	.word	.L90,.L309
	.byte	6
	.word	.L311,.L90,.L30
	.byte	7
	.word	.L312,.L313
	.byte	8
	.word	.L314,.L90,.L30
	.byte	6
	.word	.L315,.L90,.L30
	.byte	7
	.word	.L316,.L317
	.byte	9
	.word	.L318,.L90,.L30
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('rt_hw_local_irq_enable')
	.sect	'.debug_abbrev'
.L118:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('rt_hw_local_irq_enable')
	.sect	'.debug_line'
.L119:
	.word	.L584-.L583
.L583:
	.half	3
	.word	.L586-.L585
.L585:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L586:
	.byte	5,23,7,0,5,2
	.word	.L90
	.byte	3,191,3,1,4,2,5,5,9
	.half	.L587-.L90
	.byte	3,200,4,1,5,17,7,9
	.half	.L588-.L587
	.byte	3,2,1,4,1,5,1,9
	.half	.L30-.L588
	.byte	3,183,123,1,7,9
	.half	.L121-.L30
	.byte	0,1,1
.L584:
	.sdecl	'.debug_ranges',debug,cluster('rt_hw_local_irq_enable')
	.sect	'.debug_ranges'
.L120:
	.word	-1,.L90,0,.L121-.L90,0,0
	.sdecl	'.debug_info',debug,cluster('rt_hw_context_switch')
	.sect	'.debug_info'
.L122:
	.word	355
	.half	3
	.word	.L123
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L125,.L124
	.byte	2
	.word	.L103
	.byte	3
	.byte	'rt_hw_context_switch',0,1,183,2,6,1,1,1
	.word	.L74,.L319,.L73
	.byte	4
	.byte	'from',0,1,183,2,38
	.word	.L320,.L321
	.byte	4
	.byte	'to',0,1,183,2,55
	.word	.L320,.L322
	.byte	4
	.byte	'to_thread',0,1,183,2,77
	.word	.L323,.L324
	.byte	5
	.word	.L74,.L319
	.byte	6
	.byte	'levelCore0',0,1,185,2,15
	.word	.L294,.L325
	.byte	6
	.byte	'levelCore1',0,1,185,2,26
	.word	.L294,.L326
	.byte	7
	.word	.L327,.L20
	.byte	7
	.word	.L328,.L23
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('rt_hw_context_switch')
	.sect	'.debug_abbrev'
.L123:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('rt_hw_context_switch')
	.sect	'.debug_line'
.L124:
	.word	.L590-.L589
.L589:
	.half	3
	.word	.L592-.L591
.L591:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L592:
	.byte	5,6,7,0,5,2
	.word	.L74
	.byte	3,182,2,1,5,19,9
	.half	.L517-.L74
	.byte	3,4,1,5,10,9
	.half	.L593-.L517
	.byte	3,2,1,7,9
	.half	.L594-.L593
	.byte	3,20,1,5,1,7,9
	.half	.L595-.L594
	.byte	3,23,1,5,45,7,9
	.half	.L17-.L595
	.byte	3,86,1,5,20,9
	.half	.L509-.L17
	.byte	1,5,46,3,1,1,5,20,9
	.half	.L510-.L509
	.byte	3,3,1,5,39,9
	.half	.L511-.L510
	.byte	1,5,32,9
	.half	.L596-.L511
	.byte	3,1,1,5,12,9
	.half	.L597-.L596
	.byte	3,2,1,5,9,9
	.half	.L512-.L597
	.byte	1,5,16,7,9
	.half	.L327-.L512
	.byte	3,3,1,5,26,9
	.half	.L598-.L327
	.byte	1,5,13,9
	.half	.L599-.L598
	.byte	1,5,36,7,9
	.half	.L600-.L599
	.byte	3,2,1,5,22,9
	.half	.L21-.L600
	.byte	3,4,1,5,1,9
	.half	.L20-.L21
	.byte	3,26,1,5,45,7,9
	.half	.L18-.L20
	.byte	3,106,1,5,20,9
	.half	.L513-.L18
	.byte	1,5,46,3,1,1,5,20,9
	.half	.L514-.L513
	.byte	3,3,1,5,39,9
	.half	.L516-.L514
	.byte	1,5,32,9
	.half	.L601-.L516
	.byte	3,1,1,5,12,9
	.half	.L602-.L601
	.byte	3,2,1,5,9,9
	.half	.L515-.L602
	.byte	1,5,16,7,9
	.half	.L328-.L515
	.byte	3,3,1,5,26,9
	.half	.L603-.L328
	.byte	1,5,13,9
	.half	.L604-.L603
	.byte	1,5,36,7,9
	.half	.L605-.L604
	.byte	3,2,1,5,22,9
	.half	.L24-.L605
	.byte	3,4,1,5,1,9
	.half	.L23-.L24
	.byte	3,6,1,7,9
	.half	.L126-.L23
	.byte	0,1,1
.L590:
	.sdecl	'.debug_ranges',debug,cluster('rt_hw_context_switch')
	.sect	'.debug_ranges'
.L125:
	.word	-1,.L74,0,.L126-.L74,0,0
	.sdecl	'.debug_info',debug,cluster('rt_hw_context_switch_to')
	.sect	'.debug_info'
.L127:
	.word	322
	.half	3
	.word	.L128
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L130,.L129
	.byte	2
	.word	.L103
	.byte	3
	.byte	'rt_hw_context_switch_to',0,1,129,2,6,1,1,1
	.word	.L66,.L329,.L65
	.byte	4
	.byte	'to',0,1,129,2,41
	.word	.L320,.L330
	.byte	4
	.byte	'to_thread',0,1,129,2,63
	.word	.L323,.L331
	.byte	5
	.word	.L66,.L329
	.byte	6
	.byte	'levelCore0',0,1,131,2,15
	.word	.L294,.L332
	.byte	6
	.byte	'levelCore1',0,1,131,2,26
	.word	.L294,.L333
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('rt_hw_context_switch_to')
	.sect	'.debug_abbrev'
.L128:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('rt_hw_context_switch_to')
	.sect	'.debug_line'
.L129:
	.word	.L607-.L606
.L606:
	.half	3
	.word	.L609-.L608
.L608:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L609:
	.byte	5,6,7,0,5,2
	.word	.L66
	.byte	3,128,2,1,5,19,9
	.half	.L489-.L66
	.byte	3,5,1,5,10,9
	.half	.L610-.L489
	.byte	3,2,1,7,9
	.half	.L611-.L610
	.byte	3,7,1,5,1,7,9
	.half	.L612-.L611
	.byte	3,11,1,5,45,7,9
	.half	.L9-.L612
	.byte	3,111,1,5,43,9
	.half	.L488-.L9
	.byte	3,1,1,5,20,9
	.half	.L491-.L488
	.byte	3,127,1,5,41,9
	.half	.L492-.L491
	.byte	3,1,1,5,38,9
	.half	.L613-.L492
	.byte	1,5,20,9
	.half	.L614-.L613
	.byte	3,1,1,5,39,9
	.half	.L490-.L614
	.byte	1,5,32,9
	.half	.L615-.L490
	.byte	3,1,1,5,18,9
	.half	.L616-.L615
	.byte	3,1,1,5,1,9
	.half	.L617-.L616
	.byte	3,13,1,5,45,7,9
	.half	.L10-.L617
	.byte	3,118,1,5,43,9
	.half	.L493-.L10
	.byte	3,1,1,5,20,9
	.half	.L495-.L493
	.byte	3,127,1,5,41,9
	.half	.L496-.L495
	.byte	3,1,1,5,38,9
	.half	.L618-.L496
	.byte	1,5,20,9
	.half	.L619-.L618
	.byte	3,1,1,5,39,9
	.half	.L494-.L619
	.byte	1,5,32,9
	.half	.L620-.L494
	.byte	3,1,1,5,18,9
	.half	.L621-.L620
	.byte	3,1,1,5,1,9
	.half	.L622-.L621
	.byte	3,6,1,7,9
	.half	.L131-.L622
	.byte	0,1,1
.L607:
	.sdecl	'.debug_ranges',debug,cluster('rt_hw_context_switch_to')
	.sect	'.debug_ranges'
.L130:
	.word	-1,.L66,0,.L131-.L66,0,0
	.sdecl	'.debug_info',debug,cluster('rt_hw_context_switch_interrupt')
	.sect	'.debug_info'
.L132:
	.word	364
	.half	3
	.word	.L133
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L135,.L134
	.byte	2
	.word	.L103
	.byte	3
	.byte	'rt_hw_context_switch_interrupt',0,1,156,2,6,1,1,1
	.word	.L68,.L334,.L67
	.byte	4
	.byte	'context',0,1,156,2,43
	.word	.L289,.L335
	.byte	4
	.byte	'from',0,1,156,2,63
	.word	.L320,.L336
	.byte	4
	.byte	'to',0,1,156,2,80
	.word	.L320,.L337
	.byte	4
	.byte	'to_thread',0,1,156,2,102
	.word	.L323,.L338
	.byte	5
	.word	.L339
	.byte	6
	.byte	'levelCore0',0,1,158,2,15
	.word	.L294,.L340
	.byte	6
	.byte	'levelCore1',0,1,158,2,26
	.word	.L294,.L341
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('rt_hw_context_switch_interrupt')
	.sect	'.debug_abbrev'
.L133:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('rt_hw_context_switch_interrupt')
	.sect	'.debug_line'
.L134:
	.word	.L624-.L623
.L623:
	.half	3
	.word	.L626-.L625
.L625:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L626:
	.byte	5,6,7,0,5,2
	.word	.L68
	.byte	3,155,2,1,5,19,9
	.half	.L508-.L68
	.byte	3,4,1,5,10,9
	.half	.L627-.L508
	.byte	3,2,1,7,9
	.half	.L628-.L627
	.byte	3,7,1,7,9
	.half	.L629-.L628
	.byte	1,5,45,9
	.half	.L13-.L629
	.byte	3,122,1,5,46,9
	.half	.L498-.L13
	.byte	3,1,1,5,9,9
	.half	.L497-.L498
	.byte	3,4,1,5,45,9
	.half	.L14-.L497
	.byte	3,2,1,5,46,9
	.half	.L502-.L14
	.byte	3,1,1,5,20,9
	.half	.L16-.L502
	.byte	3,127,1,3,3,1,5,32,9
	.half	.L506-.L16
	.byte	3,1,1,5,39,3,127,1,5,32,9
	.half	.L507-.L506
	.byte	3,1,1,5,10,9
	.half	.L15-.L507
	.byte	3,6,1,5,34,9
	.half	.L630-.L15
	.byte	1,5,1,9
	.half	.L631-.L630
	.byte	3,1,1,7,9
	.half	.L136-.L631
	.byte	0,1,1
.L624:
	.sdecl	'.debug_ranges',debug,cluster('rt_hw_context_switch_interrupt')
	.sect	'.debug_ranges'
.L135:
	.word	-1,.L68,0,.L136-.L68,0,0
.L339:
	.word	-1,.L68,0,.L334-.L68,-1,.L70,0,.L261-.L70,-1,.L72,0,.L256-.L72,0,0
	.sdecl	'.debug_info',debug,cluster('rt_hw_spin_lock_init')
	.sect	'.debug_info'
.L137:
	.word	249
	.half	3
	.word	.L138
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L140,.L139
	.byte	2
	.word	.L103
	.byte	3
	.byte	'rt_hw_spin_lock_init',0,1,133,3,6,1,1,1
	.word	.L82,.L342,.L81
	.byte	4
	.byte	'lock',0,1,133,3,45
	.word	.L343,.L344
	.byte	5
	.word	.L82,.L342
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('rt_hw_spin_lock_init')
	.sect	'.debug_abbrev'
.L138:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('rt_hw_spin_lock_init')
	.sect	'.debug_line'
.L139:
	.word	.L633-.L632
.L632:
	.half	3
	.word	.L635-.L634
.L634:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L635:
	.byte	5,19,7,0,5,2
	.word	.L82
	.byte	3,134,3,1,5,17,1,5,1,9
	.half	.L636-.L82
	.byte	3,1,1,7,9
	.half	.L141-.L636
	.byte	0,1,1
.L633:
	.sdecl	'.debug_ranges',debug,cluster('rt_hw_spin_lock_init')
	.sect	'.debug_ranges'
.L140:
	.word	-1,.L82,0,.L141-.L82,0,0
	.sdecl	'.debug_info',debug,cluster('rt_hw_spin_lock')
	.sect	'.debug_info'
.L142:
	.word	290
	.half	3
	.word	.L143
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L145,.L144
	.byte	2
	.word	.L103
	.byte	3
	.byte	'rt_hw_spin_lock',0,1,139,3,6,1,1,1
	.word	.L84,.L345,.L83
	.byte	4
	.byte	'lock',0,1,139,3,40
	.word	.L343,.L346
	.byte	5
	.word	.L84,.L345
	.byte	6
	.byte	'retVal',0,1,141,3,21
	.word	.L347,.L348
	.byte	6
	.byte	'spinLockVal',0,1,142,3,27
	.word	.L349,.L350
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('rt_hw_spin_lock')
	.sect	'.debug_abbrev'
.L143:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('rt_hw_spin_lock')
	.sect	'.debug_line'
.L144:
	.word	.L638-.L637
.L637:
	.half	3
	.word	.L640-.L639
.L639:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L640:
	.byte	5,28,7,0,5,2
	.word	.L84
	.byte	3,140,3,1,5,6,3,126,1,5,23,9
	.half	.L25-.L84
	.byte	3,15,1,5,21,1,5,23,9
	.half	.L641-.L25
	.byte	3,2,1,5,21,9
	.half	.L642-.L641
	.byte	3,127,1,5,13,9
	.half	.L643-.L642
	.byte	3,4,1,5,20,9
	.half	.L644-.L643
	.byte	3,2,1,5,30,9
	.half	.L645-.L644
	.byte	3,2,1,5,1,7,9
	.half	.L646-.L645
	.byte	3,1,1,7,9
	.half	.L146-.L646
	.byte	0,1,1
.L638:
	.sdecl	'.debug_ranges',debug,cluster('rt_hw_spin_lock')
	.sect	'.debug_ranges'
.L145:
	.word	-1,.L84,0,.L146-.L84,0,0
	.sdecl	'.debug_info',debug,cluster('rt_hw_spin_unlock')
	.sect	'.debug_info'
.L147:
	.word	292
	.half	3
	.word	.L148
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L150,.L149
	.byte	2
	.word	.L103
	.byte	3
	.byte	'rt_hw_spin_unlock',0,1,166,3,6,1,1,1
	.word	.L86,.L351,.L85
	.byte	4
	.byte	'lock',0,1,166,3,42
	.word	.L343,.L352
	.byte	5
	.word	.L86,.L351
	.byte	6
	.byte	'retVal',0,1,168,3,21
	.word	.L347,.L353
	.byte	6
	.byte	'spinLockVal',0,1,169,3,27
	.word	.L354,.L355
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('rt_hw_spin_unlock')
	.sect	'.debug_abbrev'
.L148:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('rt_hw_spin_unlock')
	.sect	'.debug_line'
.L149:
	.word	.L648-.L647
.L647:
	.half	3
	.word	.L650-.L649
.L649:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L650:
	.byte	5,28,7,0,5,2
	.word	.L86
	.byte	3,167,3,1,5,6,3,126,1,5,23,9
	.half	.L27-.L86
	.byte	3,7,1,5,21,1,5,27,9
	.half	.L651-.L27
	.byte	3,2,1,5,21,9
	.half	.L652-.L651
	.byte	3,127,1,5,13,9
	.half	.L653-.L652
	.byte	3,4,1,5,9,9
	.half	.L654-.L653
	.byte	1,5,20,9
	.half	.L655-.L654
	.byte	3,2,1,5,30,9
	.half	.L656-.L655
	.byte	3,2,1,5,1,7,9
	.half	.L657-.L656
	.byte	3,1,1,7,9
	.half	.L151-.L657
	.byte	0,1,1
.L648:
	.sdecl	'.debug_ranges',debug,cluster('rt_hw_spin_unlock')
	.sect	'.debug_ranges'
.L150:
	.word	-1,.L86,0,.L151-.L86,0,0
	.sdecl	'.debug_info',debug,cluster('rt_hw_cpu_id')
	.sect	'.debug_info'
.L152:
	.word	273
	.half	3
	.word	.L153
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L155,.L154
	.byte	2
	.word	.L103
	.byte	3
	.byte	'rt_hw_cpu_id',0,1,185,3,5
	.word	.L356
	.byte	1,1,1
	.word	.L88,.L357,.L87
	.byte	4
	.word	.L88,.L357
	.byte	5
	.word	.L358,.L88,.L357
	.byte	6
	.word	.L359,.L88,.L357
	.byte	7
	.byte	'reg',0,2,229,6,21
	.word	.L360,.L361
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('rt_hw_cpu_id')
	.sect	'.debug_abbrev'
.L153:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,29,1,49,16,17,1,18,1,0,0,6,11,1,49,16,17,1
	.byte	18,1,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('rt_hw_cpu_id')
	.sect	'.debug_line'
.L154:
	.word	.L659-.L658
.L658:
	.half	3
	.word	.L661-.L660
.L660:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L661:
	.byte	4,2,5,19,7,0,5,2
	.word	.L88
	.byte	3,229,6,1,5,28,9
	.half	.L519-.L88
	.byte	3,1,1,4,1,5,1,3,213,124,1,7,9
	.half	.L156-.L519
	.byte	0,1,1
.L659:
	.sdecl	'.debug_ranges',debug,cluster('rt_hw_cpu_id')
	.sect	'.debug_ranges'
.L155:
	.word	-1,.L88,0,.L156-.L88,0,0
	.sdecl	'.debug_info',debug,cluster('rt_hw_ipi_send')
	.sect	'.debug_info'
.L157:
	.word	271
	.half	3
	.word	.L158
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L160,.L159
	.byte	2
	.word	.L103
	.byte	3
	.byte	'rt_hw_ipi_send',0,1,128,3,6,1,1,1
	.word	.L80,.L362,.L79
	.byte	4
	.byte	'ipi_vector',0,1,128,3,25
	.word	.L356,.L363
	.byte	4
	.byte	'cpu_mask',0,1,128,3,50
	.word	.L364,.L365
	.byte	5
	.word	.L80,.L362
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('rt_hw_ipi_send')
	.sect	'.debug_abbrev'
.L158:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('rt_hw_ipi_send')
	.sect	'.debug_line'
.L159:
	.word	.L663-.L662
.L662:
	.half	3
	.word	.L665-.L664
.L664:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L665:
	.byte	5,1,7,0,5,2
	.word	.L80
	.byte	3,130,3,1,7,9
	.half	.L161-.L80
	.byte	0,1,1
.L663:
	.sdecl	'.debug_ranges',debug,cluster('rt_hw_ipi_send')
	.sect	'.debug_ranges'
.L160:
	.word	-1,.L80,0,.L161-.L80,0,0
	.sdecl	'.debug_info',debug,cluster('rt_hw_secondary_cpu_up')
	.sect	'.debug_info'
.L162:
	.word	233
	.half	3
	.word	.L163
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L165,.L164
	.byte	2
	.word	.L103
	.byte	3
	.byte	'rt_hw_secondary_cpu_up',0,1,234,2,6,1,1,1
	.word	.L76,.L366,.L75
	.byte	4
	.word	.L76,.L366
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('rt_hw_secondary_cpu_up')
	.sect	'.debug_abbrev'
.L163:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('rt_hw_secondary_cpu_up')
	.sect	'.debug_line'
.L164:
	.word	.L667-.L666
.L666:
	.half	3
	.word	.L669-.L668
.L668:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L669:
	.byte	5,1,7,0,5,2
	.word	.L76
	.byte	3,236,2,1,7,9
	.half	.L166-.L76
	.byte	0,1,1
.L667:
	.sdecl	'.debug_ranges',debug,cluster('rt_hw_secondary_cpu_up')
	.sect	'.debug_ranges'
.L165:
	.word	-1,.L76,0,.L166-.L76,0,0
	.sdecl	'.debug_info',debug,cluster('rt_hw_secondary_cpu_idle_exec')
	.sect	'.debug_info'
.L167:
	.word	240
	.half	3
	.word	.L168
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L170,.L169
	.byte	2
	.word	.L103
	.byte	3
	.byte	'rt_hw_secondary_cpu_idle_exec',0,1,195,3,6,1,1,1
	.word	.L92,.L367,.L91
	.byte	4
	.word	.L92,.L367
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('rt_hw_secondary_cpu_idle_exec')
	.sect	'.debug_abbrev'
.L168:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('rt_hw_secondary_cpu_idle_exec')
	.sect	'.debug_line'
.L169:
	.word	.L671-.L670
.L670:
	.half	3
	.word	.L673-.L672
.L672:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L673:
	.byte	5,1,7,0,5,2
	.word	.L92
	.byte	3,197,3,1,7,9
	.half	.L171-.L92
	.byte	0,1,1
.L671:
	.sdecl	'.debug_ranges',debug,cluster('rt_hw_secondary_cpu_idle_exec')
	.sect	'.debug_ranges'
.L170:
	.word	-1,.L92,0,.L171-.L92,0,0
	.sdecl	'.debug_info',debug,cluster('Core1_init')
	.sect	'.debug_info'
.L172:
	.word	375
	.half	3
	.word	.L173
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L175,.L174
	.byte	2
	.word	.L103
	.byte	3
	.byte	'Core1_init',0,1,240,2,6,1,1,1
	.word	.L78,.L368,.L77
	.byte	4
	.word	.L78,.L368
	.byte	5
	.byte	'timer_config',0,1,244,2,25
	.word	.L369,.L370
	.byte	6
	.word	.L371,.L372,.L373
	.byte	7
	.word	.L374,.L375
	.byte	7
	.word	.L376,.L377
	.byte	7
	.word	.L378,.L379
	.byte	8
	.word	.L380,.L372,.L373
	.byte	6
	.word	.L381,.L382,.L373
	.byte	7
	.word	.L383,.L384
	.byte	9
	.word	.L385,.L382,.L373
	.byte	0,0,0,6
	.word	.L386,.L373,.L387
	.byte	7
	.word	.L388,.L389
	.byte	9
	.word	.L390,.L373,.L387
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Core1_init')
	.sect	'.debug_abbrev'
.L173:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,29,1
	.byte	49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Core1_init')
	.sect	'.debug_line'
.L174:
	.word	.L675-.L674
.L674:
	.half	3
	.word	.L677-.L676
.L676:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std',0,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0
	.byte	'IfxSrc.h',0,1,0,0,0
.L677:
	.byte	5,6,7,0,5,2
	.word	.L78
	.byte	3,239,2,1,5,30,9
	.half	.L518-.L78
	.byte	3,5,1,5,58,9
	.half	.L678-.L518
	.byte	3,159,125,1,5,35,9
	.half	.L679-.L678
	.byte	3,227,2,1,5,33,1,5,37,9
	.half	.L680-.L679
	.byte	3,1,1,5,35,1,5,24,9
	.half	.L681-.L680
	.byte	3,1,1,5,38,9
	.half	.L682-.L681
	.byte	1,5,58,9
	.half	.L683-.L682
	.byte	1,5,37,9
	.half	.L684-.L683
	.byte	3,1,1,4,2,5,19,9
	.half	.L372-.L684
	.byte	3,151,127,1,5,17,1,5,11,9
	.half	.L685-.L372
	.byte	3,1,1,5,17,9
	.half	.L686-.L685
	.byte	1,5,11,9
	.half	.L382-.L686
	.byte	3,103,1,5,17,9
	.half	.L687-.L382
	.byte	1,5,11,9
	.half	.L373-.L687
	.byte	3,18,1,5,16,9
	.half	.L688-.L373
	.byte	1,4,1,5,1,9
	.half	.L387-.L688
	.byte	3,243,0,1,7,9
	.half	.L176-.L387
	.byte	0,1,1
.L675:
	.sdecl	'.debug_ranges',debug,cluster('Core1_init')
	.sect	'.debug_ranges'
.L175:
	.word	-1,.L78,0,.L176-.L78,0,0
	.sdecl	'.debug_info',debug,cluster('get_clk')
	.sect	'.debug_info'
.L177:
	.word	443
	.half	3
	.word	.L178
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L180,.L179
	.byte	2
	.word	.L103
	.byte	3
	.byte	'get_clk',0,1,214,4,6,1,1,1
	.word	.L98,.L391,.L97
	.byte	4
	.word	.L98,.L391
	.byte	5
	.word	.L392,.L98,.L393
	.byte	6
	.word	.L394,.L98,.L393
	.byte	5
	.word	.L301,.L98,.L393
	.byte	6
	.word	.L303,.L98,.L393
	.byte	5
	.word	.L304,.L98,.L395
	.byte	6
	.word	.L306,.L98,.L395
	.byte	7
	.byte	'reg',0,2,235,5,17
	.word	.L307,.L396
	.byte	0,0,0,0,0,0,5
	.word	.L397,.L398,.L399
	.byte	6
	.word	.L400,.L398,.L399
	.byte	7
	.byte	'reg',0,2,237,6,12
	.word	.L320,.L401
	.byte	0,0,5
	.word	.L402,.L403,.L404
	.byte	8
	.word	.L405,.L406
	.byte	6
	.word	.L407,.L403,.L404
	.byte	6
	.word	.L408,.L403,.L404
	.byte	5
	.word	.L409,.L403,.L404
	.byte	9
	.word	.L410,.L403,.L404
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('get_clk')
	.sect	'.debug_abbrev'
.L178:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,29,1,49,16,17,1,18,1,0,0,6,11,1,49,16,17,1,18,1
	.byte	0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('get_clk')
	.sect	'.debug_line'
.L179:
	.word	.L690-.L689
.L689:
	.half	3
	.word	.L692-.L691
.L691:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxScuCcu.h',0,2,0,0,0
.L692:
	.byte	4,2,5,19,7,0,5,2
	.word	.L98
	.byte	3,235,5,1,5,14,9
	.half	.L395-.L98
	.byte	3,9,1,5,10,9
	.half	.L693-.L395
	.byte	3,1,1,4,1,5,66,9
	.half	.L393-.L693
	.byte	3,228,126,1,5,72,9
	.half	.L694-.L393
	.byte	3,1,1,5,5,9
	.half	.L695-.L694
	.byte	3,3,1,5,55,9
	.half	.L696-.L695
	.byte	1,5,28,9
	.half	.L697-.L696
	.byte	1,4,2,5,17,9
	.half	.L398-.L697
	.byte	3,144,2,1,5,38,9
	.half	.L547-.L398
	.byte	3,1,1,5,12,9
	.half	.L548-.L547
	.byte	1,4,1,5,75,3,240,125,1,5,28,9
	.half	.L399-.L548
	.byte	1,5,55,9
	.half	.L698-.L399
	.byte	3,1,1,5,28,9
	.half	.L699-.L698
	.byte	1,4,3,5,41,9
	.half	.L403-.L699
	.byte	3,222,8,1,5,77,9
	.half	.L700-.L403
	.byte	1,5,62,9
	.half	.L701-.L700
	.byte	1,4,1,5,28,3,163,119,1,5,1,9
	.half	.L404-.L701
	.byte	3,1,1,7,9
	.half	.L181-.L404
	.byte	0,1,1
.L690:
	.sdecl	'.debug_ranges',debug,cluster('get_clk')
	.sect	'.debug_ranges'
.L180:
	.word	-1,.L98,0,.L181-.L98,0,0
	.sdecl	'.debug_info',debug,cluster('rt_hw_systick_init')
	.sect	'.debug_info'
.L182:
	.word	254
	.half	3
	.word	.L183
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L185,.L184
	.byte	2
	.word	.L103
	.byte	3
	.byte	'rt_hw_systick_init',0,1,70,6,1,1,1
	.word	.L40,.L411,.L39
	.byte	4
	.word	.L40,.L411
	.byte	5
	.byte	'timer_config',0,1,72,23
	.word	.L369,.L412
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('rt_hw_systick_init')
	.sect	'.debug_abbrev'
.L183:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('rt_hw_systick_init')
	.sect	'.debug_line'
.L184:
	.word	.L703-.L702
.L702:
	.half	3
	.word	.L705-.L704
.L704:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L705:
	.byte	5,6,7,0,5,2
	.word	.L40
	.byte	3,197,0,1,5,47,9
	.half	.L469-.L40
	.byte	3,3,1,5,42,9
	.half	.L706-.L469
	.byte	1,5,46,9
	.half	.L707-.L706
	.byte	1,5,28,9
	.half	.L708-.L707
	.byte	1,5,46,9
	.half	.L709-.L708
	.byte	1,5,33,9
	.half	.L710-.L709
	.byte	3,2,1,5,31,1,5,35,9
	.half	.L711-.L710
	.byte	3,1,1,5,33,1,5,22,9
	.half	.L712-.L711
	.byte	3,1,1,5,37,9
	.half	.L713-.L712
	.byte	1,5,36,9
	.half	.L714-.L713
	.byte	1,5,55,9
	.half	.L715-.L714
	.byte	1,5,36,9
	.half	.L716-.L715
	.byte	3,1,1,5,35,9
	.half	.L717-.L716
	.byte	1,5,1,9
	.half	.L186-.L717
	.byte	3,1,0,1,1
.L703:
	.sdecl	'.debug_ranges',debug,cluster('rt_hw_systick_init')
	.sect	'.debug_ranges'
.L185:
	.word	-1,.L40,0,.L186-.L40,0,0
	.sdecl	'.debug_info',debug,cluster('rt_hw_usart_init')
	.sect	'.debug_info'
.L187:
	.word	226
	.half	3
	.word	.L188
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L190,.L189
	.byte	2
	.word	.L103
	.byte	3
	.byte	'rt_hw_usart_init',0,1,81,6,1,1,1
	.word	.L42,.L413,.L41
	.byte	4
	.word	.L42,.L413
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('rt_hw_usart_init')
	.sect	'.debug_abbrev'
.L188:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('rt_hw_usart_init')
	.sect	'.debug_line'
.L189:
	.word	.L719-.L718
.L718:
	.half	3
	.word	.L721-.L720
.L720:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L721:
	.byte	5,13,7,0,5,2
	.word	.L42
	.byte	3,210,0,1,5,1,7,9
	.half	.L191-.L42
	.byte	3,1,0,1,1
.L719:
	.sdecl	'.debug_ranges',debug,cluster('rt_hw_usart_init')
	.sect	'.debug_ranges'
.L190:
	.word	-1,.L42,0,.L191-.L42,0,0
	.sdecl	'.debug_info',debug,cluster('core0_trigger_scheduling')
	.sect	'.debug_info'
.L192:
	.word	272
	.half	3
	.word	.L193
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L195,.L194
	.byte	2
	.word	.L103
	.byte	3
	.byte	'core0_trigger_scheduling',0,1,86,6,1,1,1
	.word	.L44,.L414,.L43
	.byte	4
	.word	.L415
	.byte	5
	.byte	'ptUpperCtx',0,1,89,18
	.word	.L296,.L416
	.byte	5
	.byte	'level',0,1,91,15
	.word	.L294,.L417
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('core0_trigger_scheduling')
	.sect	'.debug_abbrev'
.L193:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,85,6,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('core0_trigger_scheduling')
	.sect	'.debug_line'
.L194:
	.word	.L723-.L722
.L722:
	.half	3
	.word	.L725-.L724
.L724:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L725:
	.byte	5,36,7,0,5,2
	.word	.L44
	.byte	3,219,0,1,5,8,9
	.half	.L470-.L44
	.byte	3,4,1,5,5,9
	.half	.L726-.L470
	.byte	1,5,16,7,9
	.half	.L727-.L726
	.byte	3,5,1,5,22,9
	.half	.L728-.L727
	.byte	3,2,1,5,20,9
	.half	.L729-.L728
	.byte	1,5,12,9
	.half	.L475-.L729
	.byte	3,2,1,5,9,9
	.half	.L474-.L475
	.byte	1,5,33,7,9
	.half	.L730-.L474
	.byte	3,3,1,5,66,9
	.half	.L731-.L730
	.byte	1,5,78,9
	.half	.L732-.L731
	.byte	1,5,66,9
	.half	.L733-.L732
	.byte	1,5,49,9
	.half	.L3-.L733
	.byte	3,3,1,5,32,9
	.half	.L734-.L3
	.byte	1,5,29,9
	.half	.L735-.L734
	.byte	1,5,27,9
	.half	.L736-.L735
	.byte	1,5,16,9
	.half	.L737-.L736
	.byte	3,1,1,5,28,9
	.half	.L2-.L737
	.byte	3,3,1,5,1,9
	.half	.L196-.L2
	.byte	3,2,0,1,1
.L723:
	.sdecl	'.debug_ranges',debug,cluster('core0_trigger_scheduling')
	.sect	'.debug_ranges'
.L195:
	.word	-1,.L44,0,.L196-.L44,0,0
.L415:
	.word	-1,.L44,0,.L414-.L44,-1,.L46,0,.L246-.L46,0,0
	.sdecl	'.debug_info',debug,cluster('core1_trigger_scheduling')
	.sect	'.debug_info'
.L197:
	.word	276
	.half	3
	.word	.L198
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L200,.L199
	.byte	2
	.word	.L103
	.byte	3
	.byte	'core1_trigger_scheduling',0,1,119,6,1,1,1
	.word	.L48,.L418,.L47
	.byte	4
	.word	.L48,.L418
	.byte	5
	.byte	'ptUpperCtx',0,1,122,18
	.word	.L296,.L419
	.byte	5
	.byte	'level',0,1,124,15
	.word	.L294,.L420
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('core1_trigger_scheduling')
	.sect	'.debug_abbrev'
.L198:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('core1_trigger_scheduling')
	.sect	'.debug_line'
.L199:
	.word	.L739-.L738
.L738:
	.half	3
	.word	.L741-.L740
.L740:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L741:
	.byte	5,36,7,0,5,2
	.word	.L48
	.byte	3,252,0,1,5,8,9
	.half	.L477-.L48
	.byte	3,4,1,5,5,9
	.half	.L742-.L477
	.byte	1,5,16,7,9
	.half	.L743-.L742
	.byte	3,5,1,5,22,9
	.half	.L744-.L743
	.byte	3,2,1,5,20,9
	.half	.L745-.L744
	.byte	1,5,12,9
	.half	.L480-.L745
	.byte	3,2,1,5,9,9
	.half	.L479-.L480
	.byte	1,5,33,7,9
	.half	.L746-.L479
	.byte	3,3,1,5,66,9
	.half	.L747-.L746
	.byte	1,5,78,9
	.half	.L748-.L747
	.byte	1,5,66,9
	.half	.L749-.L748
	.byte	1,5,49,9
	.half	.L5-.L749
	.byte	3,3,1,5,32,9
	.half	.L750-.L5
	.byte	1,5,29,9
	.half	.L751-.L750
	.byte	1,5,27,9
	.half	.L752-.L751
	.byte	1,5,16,9
	.half	.L753-.L752
	.byte	3,1,1,5,28,9
	.half	.L4-.L753
	.byte	3,4,1,5,1,9
	.half	.L201-.L4
	.byte	3,2,0,1,1
.L739:
	.sdecl	'.debug_ranges',debug,cluster('core1_trigger_scheduling')
	.sect	'.debug_ranges'
.L200:
	.word	-1,.L48,0,.L201-.L48,0,0
	.sdecl	'.debug_info',debug,cluster('Core0_INTERRUPT')
	.sect	'.debug_info'
.L202:
	.word	250
	.half	3
	.word	.L203
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L205,.L204
	.byte	2
	.word	.L103
	.byte	3
	.byte	'Core0_INTERRUPT',0,1,154,1,1,1,1,1
	.word	.L50,.L421,.L49
	.byte	4
	.word	.L422
	.byte	5
	.byte	'pcpu',0,1,157,1,23
	.word	.L423,.L424
	.byte	6
	.word	.L425,.L6
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Core0_INTERRUPT')
	.sect	'.debug_abbrev'
.L203:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,85,6,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,11,0,17,1
	.byte	18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Core0_INTERRUPT')
	.sect	'.debug_line'
.L204:
	.word	.L755-.L754
.L754:
	.half	3
	.word	.L757-.L756
.L756:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L757:
	.byte	5,1,7,0,5,2
	.word	.L50
	.byte	3,153,1,1,5,45,9
	.half	.L758-.L50
	.byte	3,5,1,5,43,1,5,23,9
	.half	.L759-.L758
	.byte	3,1,1,5,54,9
	.half	.L760-.L759
	.byte	3,1,1,5,53,9
	.half	.L761-.L760
	.byte	1,5,21,9
	.half	.L762-.L761
	.byte	3,1,1,5,23,9
	.half	.L763-.L762
	.byte	3,1,1,5,45,9
	.half	.L764-.L763
	.byte	3,1,1,5,43,1,5,27,9
	.half	.L765-.L764
	.byte	3,3,1,5,13,9
	.half	.L482-.L765
	.byte	3,2,1,5,5,9
	.half	.L766-.L482
	.byte	1,5,35,7,9
	.half	.L425-.L766
	.byte	3,2,1,5,1,9
	.half	.L6-.L425
	.byte	3,3,1,9
	.half	.L206-.L6
	.byte	0,1,1
.L755:
	.sdecl	'.debug_ranges',debug,cluster('Core0_INTERRUPT')
	.sect	'.debug_ranges'
.L205:
	.word	-1,.L50,0,.L206-.L50,0,0
.L422:
	.word	-1,.L50,0,.L421-.L50,-1,.L52,0,.L251-.L52,0,0
	.sdecl	'.debug_info',debug,cluster('Core1_INTERRUPT')
	.sect	'.debug_info'
.L207:
	.word	254
	.half	3
	.word	.L208
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L210,.L209
	.byte	2
	.word	.L103
	.byte	3
	.byte	'Core1_INTERRUPT',0,1,177,1,1,1,1,1
	.word	.L54,.L426,.L53
	.byte	4
	.word	.L54,.L426
	.byte	5
	.byte	'pcpu',0,1,180,1,23
	.word	.L423,.L427
	.byte	6
	.word	.L428,.L7
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Core1_INTERRUPT')
	.sect	'.debug_abbrev'
.L208:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,11,0
	.byte	17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Core1_INTERRUPT')
	.sect	'.debug_line'
.L209:
	.word	.L768-.L767
.L767:
	.half	3
	.word	.L770-.L769
.L769:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L770:
	.byte	5,1,7,0,5,2
	.word	.L54
	.byte	3,176,1,1,5,45,9
	.half	.L771-.L54
	.byte	3,5,1,5,43,1,5,23,9
	.half	.L772-.L771
	.byte	3,1,1,5,54,9
	.half	.L773-.L772
	.byte	3,1,1,5,53,9
	.half	.L774-.L773
	.byte	1,5,21,9
	.half	.L775-.L774
	.byte	3,1,1,5,23,9
	.half	.L776-.L775
	.byte	3,1,1,5,45,9
	.half	.L777-.L776
	.byte	3,1,1,5,43,1,5,27,9
	.half	.L778-.L777
	.byte	3,3,1,5,13,9
	.half	.L483-.L778
	.byte	3,2,1,5,5,9
	.half	.L779-.L483
	.byte	1,5,35,7,9
	.half	.L428-.L779
	.byte	3,2,1,5,1,9
	.half	.L7-.L428
	.byte	3,3,1,9
	.half	.L211-.L7
	.byte	0,1,1
.L768:
	.sdecl	'.debug_ranges',debug,cluster('Core1_INTERRUPT')
	.sect	'.debug_ranges'
.L210:
	.word	-1,.L54,0,.L211-.L54,0,0
	.sdecl	'.debug_info',debug,cluster('Core0_YIELD')
	.sect	'.debug_info'
.L212:
	.word	218
	.half	3
	.word	.L213
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L215,.L214
	.byte	2
	.word	.L103
	.byte	3
	.byte	'Core0_YIELD',0,1,199,1,1,1,1,1
	.word	.L56,.L429,.L55
	.byte	4
	.word	.L430
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Core0_YIELD')
	.sect	'.debug_abbrev'
.L213:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Core0_YIELD')
	.sect	'.debug_line'
.L214:
	.word	.L781-.L780
.L780:
	.half	3
	.word	.L783-.L782
.L782:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L783:
	.byte	5,1,7,0,5,2
	.word	.L56
	.byte	3,198,1,1,5,23,9
	.half	.L784-.L56
	.byte	3,2,1,5,10,9
	.half	.L785-.L784
	.byte	3,2,1,5,29,9
	.half	.L786-.L785
	.byte	3,2,1,5,23,9
	.half	.L787-.L786
	.byte	3,1,1,5,1,9
	.half	.L788-.L787
	.byte	3,1,1,9
	.half	.L216-.L788
	.byte	0,1,1
.L781:
	.sdecl	'.debug_ranges',debug,cluster('Core0_YIELD')
	.sect	'.debug_ranges'
.L215:
	.word	-1,.L56,0,.L216-.L56,0,0
.L430:
	.word	-1,.L56,0,.L429-.L56,-1,.L58,0,.L241-.L58,-1,.L60,0,.L266-.L60,0,0
	.sdecl	'.debug_info',debug,cluster('Core1_YIELD')
	.sect	'.debug_info'
.L217:
	.word	222
	.half	3
	.word	.L218
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L220,.L219
	.byte	2
	.word	.L103
	.byte	3
	.byte	'Core1_YIELD',0,1,209,1,1,1,1,1
	.word	.L62,.L431,.L61
	.byte	4
	.word	.L62,.L431
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Core1_YIELD')
	.sect	'.debug_abbrev'
.L218:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Core1_YIELD')
	.sect	'.debug_line'
.L219:
	.word	.L790-.L789
.L789:
	.half	3
	.word	.L792-.L791
.L791:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L792:
	.byte	5,1,7,0,5,2
	.word	.L62
	.byte	3,208,1,1,5,23,9
	.half	.L793-.L62
	.byte	3,2,1,5,10,9
	.half	.L794-.L793
	.byte	3,2,1,5,29,9
	.half	.L795-.L794
	.byte	3,2,1,5,23,9
	.half	.L796-.L795
	.byte	3,1,1,5,1,9
	.half	.L797-.L796
	.byte	3,1,1,9
	.half	.L221-.L797
	.byte	0,1,1
.L790:
	.sdecl	'.debug_ranges',debug,cluster('Core1_YIELD')
	.sect	'.debug_ranges'
.L220:
	.word	-1,.L62,0,.L221-.L62,0,0
	.sdecl	'.debug_info',debug,cluster('rt_hw_board_init')
	.sect	'.debug_info'
.L222:
	.word	445
	.half	3
	.word	.L223
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L225,.L224
	.byte	2
	.word	.L103
	.byte	3
	.byte	'rt_hw_board_init',0,1,226,1,6,1,1
	.word	.L64,.L432,.L63
	.byte	4
	.word	.L64,.L432
	.byte	5
	.word	.L433,.L434,.L435
	.byte	6
	.word	.L436,.L437
	.byte	6
	.word	.L438,.L439
	.byte	7
	.word	.L440,.L441
	.byte	8
	.byte	'ocs',0,2,187,5,17
	.word	.L443,.L444
	.byte	0,0,5
	.word	.L433,.L442,.L8
	.byte	6
	.word	.L436,.L437
	.byte	6
	.word	.L438,.L439
	.byte	0,5
	.word	.L371,.L445,.L446
	.byte	6
	.word	.L374,.L447
	.byte	6
	.word	.L376,.L448
	.byte	6
	.word	.L378,.L449
	.byte	9
	.word	.L380,.L445,.L446
	.byte	5
	.word	.L381,.L450,.L446
	.byte	6
	.word	.L383,.L451
	.byte	10
	.word	.L385,.L450,.L446
	.byte	0,0,0,5
	.word	.L386,.L452,.L453
	.byte	6
	.word	.L388,.L454
	.byte	10
	.word	.L390,.L452,.L453
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('rt_hw_board_init')
	.sect	'.debug_abbrev'
.L223:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,29,1,49,16,17,1,18,1,0,0,6,5,0,49,16,2,6,0,0,7,11,1,49
	.byte	16,85,6,0,0,8,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,9,11,1,49,16,17,1,18,1,0,0,10,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('rt_hw_board_init')
	.sect	'.debug_line'
.L224:
	.word	.L799-.L798
.L798:
	.half	3
	.word	.L801-.L800
.L800:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std',0,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0
	.byte	'IfxStm.h',0,1,0,0
	.byte	'IfxSrc.h',0,2,0,0,0
.L801:
	.byte	5,32,7,0,5,2
	.word	.L64
	.byte	3,227,1,1,5,27,9
	.half	.L802-.L64
	.byte	1,5,32,9
	.half	.L803-.L802
	.byte	1,5,31,9
	.half	.L804-.L803
	.byte	1,4,2,5,28,9
	.half	.L434-.L804
	.byte	3,218,3,1,4,1,5,31,9
	.half	.L435-.L434
	.byte	3,166,124,1,4,2,5,5,9
	.half	.L442-.L435
	.byte	3,218,3,1,5,14,7,9
	.half	.L484-.L442
	.byte	3,3,1,5,26,9
	.half	.L485-.L484
	.byte	1,9
	.half	.L805-.L485
	.byte	3,1,1,9
	.half	.L486-.L805
	.byte	3,1,1,5,19,9
	.half	.L806-.L486
	.byte	3,1,1,5,26,9
	.half	.L487-.L806
	.byte	1,4,1,5,23,9
	.half	.L8-.L487
	.byte	3,167,124,1,5,21,9
	.half	.L807-.L8
	.byte	3,3,1,5,29,9
	.half	.L808-.L807
	.byte	3,10,1,5,22,9
	.half	.L809-.L808
	.byte	3,3,1,5,17,9
	.half	.L810-.L809
	.byte	1,5,21,9
	.half	.L811-.L810
	.byte	1,5,51,9
	.half	.L812-.L811
	.byte	1,4,3,5,19,9
	.half	.L445-.L812
	.byte	3,22,1,5,17,1,5,11,9
	.half	.L813-.L445
	.byte	3,1,1,5,17,9
	.half	.L814-.L813
	.byte	1,5,11,9
	.half	.L450-.L814
	.byte	3,103,1,5,17,9
	.half	.L815-.L450
	.byte	1,4,1,5,24,9
	.half	.L446-.L815
	.byte	3,3,1,5,23,9
	.half	.L816-.L446
	.byte	1,4,3,5,11,9
	.half	.L452-.L816
	.byte	3,15,1,5,16,9
	.half	.L817-.L452
	.byte	1,4,1,5,1,9
	.half	.L453-.L817
	.byte	3,114,1,7,9
	.half	.L226-.L453
	.byte	0,1,1
.L799:
	.sdecl	'.debug_ranges',debug,cluster('rt_hw_board_init')
	.sect	'.debug_ranges'
.L225:
	.word	-1,.L64,0,.L226-.L64,0,0
.L441:
	.word	-1,.L64,.L434-.L64,.L435-.L64,.L442-.L64,.L8-.L64,0,0
	.sdecl	'.debug_info',debug,cluster('tricore0_trap_yield_for_task')
	.sect	'.debug_info'
.L227:
	.word	272
	.half	3
	.word	.L228
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L230,.L229
	.byte	2
	.word	.L103
	.byte	3
	.byte	'tricore0_trap_yield_for_task',0,1,228,4,6,1,1,1
	.word	.L100,.L455,.L99
	.byte	4
	.byte	'iTrapIdentification',0,1,228,4,40
	.word	.L356,.L456
	.byte	5
	.word	.L100,.L455
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tricore0_trap_yield_for_task')
	.sect	'.debug_abbrev'
.L228:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tricore0_trap_yield_for_task')
	.sect	'.debug_line'
.L229:
	.word	.L819-.L818
.L818:
	.half	3
	.word	.L821-.L820
.L820:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L821:
	.byte	5,3,7,0,5,2
	.word	.L100
	.byte	3,229,4,1,5,33,7,9
	.half	.L822-.L100
	.byte	3,3,1,5,1,7,9
	.half	.L37-.L822
	.byte	3,8,1,7,9
	.half	.L231-.L37
	.byte	0,1,1
.L819:
	.sdecl	'.debug_ranges',debug,cluster('tricore0_trap_yield_for_task')
	.sect	'.debug_ranges'
.L230:
	.word	-1,.L100,0,.L231-.L100,0,0
	.sdecl	'.debug_info',debug,cluster('tricore1_trap_yield_for_task')
	.sect	'.debug_info'
.L232:
	.word	272
	.half	3
	.word	.L233
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L235,.L234
	.byte	2
	.word	.L103
	.byte	3
	.byte	'tricore1_trap_yield_for_task',0,1,244,4,6,1,1,1
	.word	.L102,.L457,.L101
	.byte	4
	.byte	'iTrapIdentification',0,1,244,4,40
	.word	.L356,.L458
	.byte	5
	.word	.L102,.L457
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tricore1_trap_yield_for_task')
	.sect	'.debug_abbrev'
.L233:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tricore1_trap_yield_for_task')
	.sect	'.debug_line'
.L234:
	.word	.L824-.L823
.L823:
	.half	3
	.word	.L826-.L825
.L825:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L826:
	.byte	5,3,7,0,5,2
	.word	.L102
	.byte	3,245,4,1,5,33,7,9
	.half	.L827-.L102
	.byte	3,3,1,5,1,7,9
	.half	.L38-.L827
	.byte	3,8,1,7,9
	.half	.L236-.L38
	.byte	0,1,1
.L824:
	.sdecl	'.debug_ranges',debug,cluster('tricore1_trap_yield_for_task')
	.sect	'.debug_ranges'
.L235:
	.word	-1,.L102,0,.L236-.L102,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_4')
	.sect	'.debug_info'
.L237:
	.word	209
	.half	3
	.word	.L238
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L240,.L239
	.byte	2
	.word	.L103
	.byte	3
	.byte	'.cocofun_4',0,1,199,1,1,1
	.word	.L58,.L241,.L57
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_4')
	.sect	'.debug_abbrev'
.L238:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_4')
	.sect	'.debug_line'
.L239:
	.word	.L829-.L828
.L828:
	.half	3
	.word	.L831-.L830
.L830:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L831:
	.byte	5,10,7,0,5,2
	.word	.L58
	.byte	3,202,1,1,5,34,9
	.half	.L832-.L58
	.byte	1,9
	.half	.L241-.L832
	.byte	0,1,1,5,10,0,5,2
	.word	.L58
	.byte	3,202,1,1,5,34,9
	.half	.L832-.L58
	.byte	3,10,1,9
	.half	.L833-.L832
	.byte	3,118,1,7,9
	.half	.L241-.L833
	.byte	0,1,1
.L829:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_4')
	.sect	'.debug_ranges'
.L240:
	.word	-1,.L58,0,.L241-.L58,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_5')
	.sect	'.debug_info'
.L242:
	.word	208
	.half	3
	.word	.L243
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L245,.L244
	.byte	2
	.word	.L103
	.byte	3
	.byte	'.cocofun_5',0,1,86,6,1
	.word	.L46,.L246,.L45
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_5')
	.sect	'.debug_abbrev'
.L243:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_5')
	.sect	'.debug_line'
.L244:
	.word	.L835-.L834
.L834:
	.half	3
	.word	.L837-.L836
.L836:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L837:
	.byte	5,22,7,0,5,2
	.word	.L46
	.byte	3,230,0,1,9
	.half	.L246-.L46
	.byte	0,1,1,5,22,0,5,2
	.word	.L46
	.byte	3,135,1,1,9
	.half	.L838-.L46
	.byte	3,95,1,7,9
	.half	.L246-.L838
	.byte	0,1,1,5,23,0,5,2
	.word	.L46
	.byte	3,161,4,1,5,22,9
	.half	.L838-.L46
	.byte	3,197,124,1,7,9
	.half	.L246-.L838
	.byte	0,1,1
.L835:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_5')
	.sect	'.debug_ranges'
.L245:
	.word	-1,.L46,0,.L246-.L46,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_6')
	.sect	'.debug_info'
.L247:
	.word	209
	.half	3
	.word	.L248
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L250,.L249
	.byte	2
	.word	.L103
	.byte	3
	.byte	'.cocofun_6',0,1,154,1,1,1
	.word	.L52,.L251,.L51
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_6')
	.sect	'.debug_abbrev'
.L248:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_6')
	.sect	'.debug_line'
.L249:
	.word	.L840-.L839
.L839:
	.half	3
	.word	.L842-.L841
.L841:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L842:
	.byte	5,54,7,0,5,2
	.word	.L52
	.byte	3,160,1,1,5,53,9
	.half	.L843-.L52
	.byte	1,5,39,1,5,53,9
	.half	.L844-.L843
	.byte	1,9
	.half	.L251-.L844
	.byte	0,1,1,5,54,0,5,2
	.word	.L52
	.byte	3,183,1,1,5,53,9
	.half	.L843-.L52
	.byte	1,5,39,1,5,53,9
	.half	.L844-.L843
	.byte	1,9
	.half	.L845-.L844
	.byte	3,105,1,7,9
	.half	.L251-.L845
	.byte	0,1,1
.L840:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_6')
	.sect	'.debug_ranges'
.L250:
	.word	-1,.L52,0,.L251-.L52,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_7')
	.sect	'.debug_info'
.L252:
	.word	209
	.half	3
	.word	.L253
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L255,.L254
	.byte	2
	.word	.L103
	.byte	3
	.byte	'.cocofun_7',0,1,156,2,6,1
	.word	.L72,.L256,.L71
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_7')
	.sect	'.debug_abbrev'
.L253:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_7')
	.sect	'.debug_line'
.L254:
	.word	.L847-.L846
.L846:
	.half	3
	.word	.L849-.L848
.L848:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L849:
	.byte	5,46,7,0,5,2
	.word	.L72
	.byte	3,163,2,1,5,43,9
	.half	.L499-.L72
	.byte	1,5,40,9
	.half	.L850-.L499
	.byte	1,5,43,9
	.half	.L501-.L850
	.byte	3,1,1,5,41,9
	.half	.L500-.L501
	.byte	1,5,38,9
	.half	.L851-.L500
	.byte	1,9
	.half	.L256-.L851
	.byte	0,1,1,5,46,0,5,2
	.word	.L72
	.byte	3,190,2,1,5,43,9
	.half	.L499-.L72
	.byte	1,5,40,9
	.half	.L850-.L499
	.byte	1,5,43,9
	.half	.L501-.L850
	.byte	3,1,1,5,41,9
	.half	.L500-.L501
	.byte	1,5,38,9
	.half	.L851-.L500
	.byte	1,9
	.half	.L852-.L851
	.byte	3,101,1,7,9
	.half	.L256-.L852
	.byte	0,1,1
.L847:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_7')
	.sect	'.debug_ranges'
.L255:
	.word	-1,.L72,0,.L256-.L72,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_8')
	.sect	'.debug_info'
.L257:
	.word	209
	.half	3
	.word	.L258
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L260,.L259
	.byte	2
	.word	.L103
	.byte	3
	.byte	'.cocofun_8',0,1,156,2,6,1
	.word	.L70,.L261,.L69
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_8')
	.sect	'.debug_abbrev'
.L258:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_8')
	.sect	'.debug_line'
.L259:
	.word	.L854-.L853
.L853:
	.half	3
	.word	.L856-.L855
.L855:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L856:
	.byte	5,46,7,0,5,2
	.word	.L70
	.byte	3,170,2,1,5,43,9
	.half	.L503-.L70
	.byte	1,5,40,9
	.half	.L857-.L503
	.byte	1,5,43,9
	.half	.L505-.L857
	.byte	3,1,1,5,41,9
	.half	.L504-.L505
	.byte	1,5,38,9
	.half	.L858-.L504
	.byte	1,9
	.half	.L261-.L858
	.byte	0,1,1,5,46,0,5,2
	.word	.L70
	.byte	3,210,2,1,5,43,9
	.half	.L503-.L70
	.byte	1,5,40,9
	.half	.L857-.L503
	.byte	1,5,43,9
	.half	.L505-.L857
	.byte	3,1,1,5,41,9
	.half	.L504-.L505
	.byte	1,5,38,9
	.half	.L858-.L504
	.byte	1,9
	.half	.L859-.L858
	.byte	3,88,1,7,9
	.half	.L261-.L859
	.byte	0,1,1
.L854:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_8')
	.sect	'.debug_ranges'
.L260:
	.word	-1,.L70,0,.L261-.L70,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_9')
	.sect	'.debug_info'
.L262:
	.word	209
	.half	3
	.word	.L263
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L265,.L264
	.byte	2
	.word	.L103
	.byte	3
	.byte	'.cocofun_9',0,1,199,1,1,1
	.word	.L60,.L266,.L59
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_9')
	.sect	'.debug_abbrev'
.L263:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_9')
	.sect	'.debug_line'
.L264:
	.word	.L861-.L860
.L860:
	.half	3
	.word	.L863-.L862
.L862:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L863:
	.byte	5,10,7,0,5,2
	.word	.L60
	.byte	3,202,1,1,5,5,1,5,9,9
	.half	.L864-.L60
	.byte	1,5,34,9
	.half	.L865-.L864
	.byte	1,9
	.half	.L266-.L865
	.byte	0,1,1,5,10,0,5,2
	.word	.L60
	.byte	3,212,1,1,5,5,1,5,9,9
	.half	.L864-.L60
	.byte	1,5,34,9
	.half	.L865-.L864
	.byte	1,9
	.half	.L866-.L865
	.byte	3,118,1,7,9
	.half	.L266-.L866
	.byte	0,1,1,5,10,0,5,2
	.word	.L60
	.byte	3,179,2,1,5,5,1,5,9,9
	.half	.L864-.L60
	.byte	1,5,34,9
	.half	.L865-.L864
	.byte	1,9
	.half	.L866-.L865
	.byte	3,151,127,1,7,9
	.half	.L266-.L866
	.byte	0,1,1
.L861:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_9')
	.sect	'.debug_ranges'
.L265:
	.word	-1,.L60,0,.L266-.L60,0,0
	.sdecl	'.debug_info',debug,cluster('g_AppCpu0')
	.sect	'.debug_info'
.L267:
	.word	197
	.half	3
	.word	.L268
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1,2
	.word	.L103
	.byte	3
	.byte	'g_AppCpu0',0,20,68,9
	.word	.L459
	.byte	1,5,3
	.word	g_AppCpu0
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('g_AppCpu0')
	.sect	'.debug_abbrev'
.L268:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('tricore_timers')
	.sect	'.debug_info'
.L269:
	.word	201
	.half	3
	.word	.L270
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1,2
	.word	.L103
	.byte	3
	.byte	'tricore_timers',0,20,19,21
	.word	.L460
	.byte	5,3
	.word	tricore_timers
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('tricore_timers')
	.sect	'.debug_abbrev'
.L270:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('STMs')
	.sect	'.debug_info'
.L271:
	.word	191
	.half	3
	.word	.L272
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1,2
	.word	.L103
	.byte	3
	.byte	'STMs',0,20,20,32
	.word	.L461
	.byte	5,3
	.word	STMs
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('STMs')
	.sect	'.debug_abbrev'
.L272:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('GPSR')
	.sect	'.debug_info'
.L273:
	.word	191
	.half	3
	.word	.L274
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1,2
	.word	.L103
	.byte	3
	.byte	'GPSR',0,20,21,37
	.word	.L462
	.byte	5,3
	.word	GPSR
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('GPSR')
	.sect	'.debug_abbrev'
.L274:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('rt_interrupt_from_thread_core0')
	.sect	'.debug_info'
.L275:
	.word	217
	.half	3
	.word	.L276
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1,2
	.word	.L103
	.byte	3
	.byte	'rt_interrupt_from_thread_core0',0,20,23,28
	.word	.L463
	.byte	5,3
	.word	rt_interrupt_from_thread_core0
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('rt_interrupt_from_thread_core0')
	.sect	'.debug_abbrev'
.L276:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('rt_interrupt_to_thread_core0')
	.sect	'.debug_info'
.L277:
	.word	215
	.half	3
	.word	.L278
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1,2
	.word	.L103
	.byte	3
	.byte	'rt_interrupt_to_thread_core0',0,20,24,28
	.word	.L464
	.byte	5,3
	.word	rt_interrupt_to_thread_core0
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('rt_interrupt_to_thread_core0')
	.sect	'.debug_abbrev'
.L278:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('rt_interrupt_from_thread_core1')
	.sect	'.debug_info'
.L279:
	.word	217
	.half	3
	.word	.L280
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1,2
	.word	.L103
	.byte	3
	.byte	'rt_interrupt_from_thread_core1',0,20,25,28
	.word	.L465
	.byte	5,3
	.word	rt_interrupt_from_thread_core1
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('rt_interrupt_from_thread_core1')
	.sect	'.debug_abbrev'
.L280:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('rt_interrupt_to_thread_core1')
	.sect	'.debug_info'
.L281:
	.word	215
	.half	3
	.word	.L282
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1,2
	.word	.L103
	.byte	3
	.byte	'rt_interrupt_to_thread_core1',0,20,26,28
	.word	.L466
	.byte	5,3
	.word	rt_interrupt_to_thread_core1
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('rt_interrupt_to_thread_core1')
	.sect	'.debug_abbrev'
.L282:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('rt_thread_switch_interrupt_flag_core0')
	.sect	'.debug_info'
.L283:
	.word	224
	.half	3
	.word	.L284
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1,2
	.word	.L103
	.byte	3
	.byte	'rt_thread_switch_interrupt_flag_core0',0,20,27,28
	.word	.L467
	.byte	5,3
	.word	rt_thread_switch_interrupt_flag_core0
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('rt_thread_switch_interrupt_flag_core0')
	.sect	'.debug_abbrev'
.L284:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('rt_thread_switch_interrupt_flag_core1')
	.sect	'.debug_info'
.L285:
	.word	224
	.half	3
	.word	.L286
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1,2
	.word	.L103
	.byte	3
	.byte	'rt_thread_switch_interrupt_flag_core1',0,20,28,28
	.word	.L468
	.byte	5,3
	.word	rt_thread_switch_interrupt_flag_core1
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('rt_thread_switch_interrupt_flag_core1')
	.sect	'.debug_abbrev'
.L286:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_4')
	.sect	'.debug_loc'
.L57:
	.word	-1,.L58,0,.L241-.L58
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_5')
	.sect	'.debug_loc'
.L45:
	.word	-1,.L46,0,.L246-.L46
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_6')
	.sect	'.debug_loc'
.L51:
	.word	-1,.L52,0,.L251-.L52
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_7')
	.sect	'.debug_loc'
.L71:
	.word	-1,.L72,0,.L256-.L72
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_8')
	.sect	'.debug_loc'
.L69:
	.word	-1,.L70,0,.L261-.L70
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_9')
	.sect	'.debug_loc'
.L59:
	.word	-1,.L60,0,.L266-.L60
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Core0_INTERRUPT')
	.sect	'.debug_loc'
.L49:
	.word	-1,.L50,0,.L421-.L50
	.half	2
	.byte	138,0
	.word	0,0
.L424:
	.word	-1,.L50,.L482-.L50,.L6-.L50
	.half	1
	.byte	98
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Core0_YIELD')
	.sect	'.debug_loc'
.L55:
	.word	-1,.L56,0,.L429-.L56
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Core1_INTERRUPT')
	.sect	'.debug_loc'
.L53:
	.word	-1,.L54,0,.L426-.L54
	.half	2
	.byte	138,0
	.word	0,0
.L427:
	.word	-1,.L54,.L483-.L54,.L7-.L54
	.half	1
	.byte	98
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Core1_YIELD')
	.sect	'.debug_loc'
.L61:
	.word	-1,.L62,0,.L431-.L62
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Core1_init')
	.sect	'.debug_loc'
.L77:
	.word	-1,.L78,0,.L518-.L78
	.half	2
	.byte	138,0
	.word	.L518-.L78,.L368-.L78
	.half	2
	.byte	138,48
	.word	.L368-.L78,.L368-.L78
	.half	2
	.byte	138,0
	.word	0,0
.L379:
	.word	0,0
.L384:
	.word	0,0
.L389:
	.word	0,0
.L375:
	.word	0,0
.L370:
	.word	-1,.L78,0,.L368-.L78
	.half	2
	.byte	145,80
	.word	0,0
.L377:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('core0_trigger_scheduling')
	.sect	'.debug_loc'
.L43:
	.word	-1,.L44,0,.L414-.L44
	.half	2
	.byte	138,0
	.word	0,0
.L417:
	.word	-1,.L44,.L470-.L44,.L471-.L44
	.half	1
	.byte	82
	.word	.L46-.L44,.L246-.L44
	.half	1
	.byte	82
	.word	.L472-.L44,.L414-.L44
	.half	1
	.byte	82
	.word	.L476-.L44,.L414-.L44
	.half	1
	.byte	84
	.word	0,0
.L416:
	.word	-1,.L44,.L473-.L44,.L474-.L44
	.half	1
	.byte	95
	.word	.L475-.L44,.L2-.L44
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('core1_trigger_scheduling')
	.sect	'.debug_loc'
.L47:
	.word	-1,.L48,0,.L418-.L48
	.half	2
	.byte	138,0
	.word	0,0
.L420:
	.word	-1,.L48,.L46-.L48,.L246-.L48
	.half	1
	.byte	82
	.word	.L477-.L48,.L418-.L48
	.half	1
	.byte	82
	.word	.L481-.L48,.L418-.L48
	.half	1
	.byte	84
	.word	0,0
.L419:
	.word	-1,.L48,.L478-.L48,.L479-.L48
	.half	1
	.byte	95
	.word	.L480-.L48,.L4-.L48
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('get_clk')
	.sect	'.debug_loc'
.L97:
	.word	-1,.L98,0,.L391-.L98
	.half	2
	.byte	138,0
	.word	0,0
.L396:
	.word	0,0
.L401:
	.word	-1,.L98,.L547-.L98,.L548-.L98
	.half	1
	.byte	95
	.word	0,0
.L406:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('rt_hw_board_init')
	.sect	'.debug_loc'
.L439:
	.word	0,0
.L444:
	.word	-1,.L64,.L484-.L64,.L485-.L64
	.half	1
	.byte	95
	.word	.L486-.L64,.L487-.L64
	.half	1
	.byte	95
	.word	0,0
.L449:
	.word	0,0
.L63:
	.word	-1,.L64,0,.L432-.L64
	.half	2
	.byte	138,0
	.word	0,0
.L451:
	.word	0,0
.L454:
	.word	0,0
.L447:
	.word	0,0
.L437:
	.word	0,0
.L448:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('rt_hw_context_switch')
	.sect	'.debug_loc'
.L321:
	.word	-1,.L74,0,.L509-.L74
	.half	1
	.byte	84
	.word	.L509-.L74,.L510-.L74
	.half	1
	.byte	88
	.word	.L509-.L74,.L510-.L74
	.half	1
	.byte	111
	.word	.L499-.L74,.L500-.L74
	.half	1
	.byte	111
	.word	.L18-.L74,.L513-.L74
	.half	1
	.byte	84
	.word	.L513-.L74,.L514-.L74
	.half	1
	.byte	88
	.word	.L513-.L74,.L514-.L74
	.half	1
	.byte	111
	.word	.L503-.L74,.L504-.L74
	.half	1
	.byte	111
	.word	0,0
.L325:
	.word	-1,.L74,.L499-.L74,.L256-.L74
	.half	1
	.byte	82
	.word	.L499-.L74,.L256-.L74
	.half	1
	.byte	95
	.word	.L509-.L74,.L511-.L74
	.half	1
	.byte	82
	.word	.L509-.L74,.L512-.L74
	.half	1
	.byte	95
	.word	0,0
.L326:
	.word	-1,.L74,.L503-.L74,.L261-.L74
	.half	1
	.byte	95
	.word	.L503-.L74,.L261-.L74
	.half	1
	.byte	82
	.word	.L513-.L74,.L515-.L74
	.half	1
	.byte	95
	.word	.L513-.L74,.L516-.L74
	.half	1
	.byte	82
	.word	0,0
.L73:
	.word	-1,.L74,0,.L319-.L74
	.half	2
	.byte	138,0
	.word	0,0
.L322:
	.word	-1,.L74,0,.L509-.L74
	.half	1
	.byte	85
	.word	.L501-.L74,.L500-.L74
	.half	1
	.byte	89
	.word	.L500-.L74,.L256-.L74
	.half	1
	.byte	111
	.word	.L510-.L74,.L18-.L74
	.half	1
	.byte	111
	.word	.L18-.L74,.L513-.L74
	.half	1
	.byte	85
	.word	.L505-.L74,.L504-.L74
	.half	1
	.byte	89
	.word	.L504-.L74,.L261-.L74
	.half	1
	.byte	111
	.word	.L514-.L74,.L319-.L74
	.half	1
	.byte	111
	.word	0,0
.L324:
	.word	-1,.L74,0,.L509-.L74
	.half	1
	.byte	100
	.word	.L499-.L74,.L256-.L74
	.half	1
	.byte	108
	.word	.L18-.L74,.L513-.L74
	.half	1
	.byte	100
	.word	.L503-.L74,.L261-.L74
	.half	1
	.byte	108
	.word	.L517-.L74,.L319-.L74
	.half	1
	.byte	108
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('rt_hw_context_switch_interrupt')
	.sect	'.debug_loc'
.L335:
	.word	-1,.L68,0,.L497-.L68
	.half	1
	.byte	100
	.word	.L14-.L68,.L16-.L68
	.half	1
	.byte	100
	.word	0,0
.L336:
	.word	-1,.L68,0,.L497-.L68
	.half	1
	.byte	84
	.word	.L498-.L68,.L497-.L68
	.half	1
	.byte	88
	.word	.L72-.L68,.L499-.L68
	.half	1
	.byte	88
	.word	.L499-.L68,.L500-.L68
	.half	1
	.byte	111
	.word	.L14-.L68,.L16-.L68
	.half	1
	.byte	84
	.word	.L502-.L68,.L16-.L68
	.half	1
	.byte	88
	.word	.L70-.L68,.L503-.L68
	.half	1
	.byte	88
	.word	.L503-.L68,.L504-.L68
	.half	1
	.byte	111
	.word	0,0
.L340:
	.word	0,0
.L341:
	.word	-1,.L68,.L70-.L68,.L261-.L68
	.half	1
	.byte	82
	.word	.L502-.L68,.L506-.L68
	.half	1
	.byte	82
	.word	.L506-.L68,.L15-.L68
	.half	1
	.byte	95
	.word	.L507-.L68,.L15-.L68
	.half	1
	.byte	84
	.word	0,0
.L67:
	.word	-1,.L68,0,.L334-.L68
	.half	2
	.byte	138,0
	.word	0,0
.L337:
	.word	-1,.L68,0,.L497-.L68
	.half	1
	.byte	85
	.word	.L501-.L68,.L500-.L68
	.half	1
	.byte	89
	.word	.L500-.L68,.L256-.L68
	.half	1
	.byte	111
	.word	.L497-.L68,.L14-.L68
	.half	1
	.byte	111
	.word	.L14-.L68,.L16-.L68
	.half	1
	.byte	85
	.word	.L505-.L68,.L504-.L68
	.half	1
	.byte	89
	.word	.L504-.L68,.L261-.L68
	.half	1
	.byte	111
	.word	0,0
.L338:
	.word	-1,.L68,0,.L497-.L68
	.half	1
	.byte	101
	.word	.L72-.L68,.L256-.L68
	.half	1
	.byte	108
	.word	.L14-.L68,.L16-.L68
	.half	1
	.byte	101
	.word	.L70-.L68,.L261-.L68
	.half	1
	.byte	108
	.word	.L60-.L68,.L266-.L68
	.half	1
	.byte	108
	.word	.L508-.L68,.L334-.L68
	.half	1
	.byte	108
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('rt_hw_context_switch_to')
	.sect	'.debug_loc'
.L332:
	.word	-1,.L66,.L488-.L66,.L490-.L66
	.half	1
	.byte	82
	.word	.L492-.L66,.L10-.L66
	.half	1
	.byte	95
	.word	0,0
.L333:
	.word	-1,.L66,.L493-.L66,.L494-.L66
	.half	1
	.byte	82
	.word	.L496-.L66,.L329-.L66
	.half	1
	.byte	95
	.word	0,0
.L65:
	.word	-1,.L66,0,.L329-.L66
	.half	2
	.byte	138,0
	.word	0,0
.L330:
	.word	-1,.L66,0,.L488-.L66
	.half	1
	.byte	84
	.word	.L489-.L66,.L329-.L66
	.half	1
	.byte	88
	.word	.L491-.L66,.L490-.L66
	.half	1
	.byte	98
	.word	.L10-.L66,.L493-.L66
	.half	1
	.byte	84
	.word	.L495-.L66,.L494-.L66
	.half	1
	.byte	98
	.word	0,0
.L331:
	.word	-1,.L66,0,.L488-.L66
	.half	1
	.byte	100
	.word	.L489-.L66,.L329-.L66
	.half	1
	.byte	111
	.word	.L10-.L66,.L493-.L66
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('rt_hw_cpu_id')
	.sect	'.debug_loc'
.L361:
	.word	-1,.L88,.L519-.L88,.L357-.L88
	.half	1
	.byte	95
	.word	0,0
.L87:
	.word	-1,.L88,0,.L357-.L88
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('rt_hw_ipi_send')
	.sect	'.debug_loc'
.L365:
	.word	-1,.L80,0,.L362-.L80
	.half	1
	.byte	85
	.word	0,0
.L363:
	.word	-1,.L80,0,.L362-.L80
	.half	1
	.byte	84
	.word	0,0
.L79:
	.word	-1,.L80,0,.L362-.L80
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('rt_hw_local_irq_disable')
	.sect	'.debug_loc'
.L308:
	.word	-1,.L94,.L520-.L94,.L521-.L94
	.half	1
	.byte	95
	.word	0,0
.L93:
	.word	-1,.L94,0,.L300-.L94
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('rt_hw_local_irq_enable')
	.sect	'.debug_loc'
.L313:
	.word	0,0
.L317:
	.word	0,0
.L310:
	.word	-1,.L90,0,.L309-.L90
	.half	1
	.byte	84
	.word	0,0
.L89:
	.word	-1,.L90,0,.L309-.L90
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('rt_hw_secondary_cpu_idle_exec')
	.sect	'.debug_loc'
.L91:
	.word	-1,.L92,0,.L367-.L92
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('rt_hw_secondary_cpu_up')
	.sect	'.debug_loc'
.L75:
	.word	-1,.L76,0,.L366-.L76
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('rt_hw_spin_lock')
	.sect	'.debug_loc'
.L346:
	.word	-1,.L84,0,.L345-.L84
	.half	1
	.byte	100
	.word	0,0
.L348:
	.word	-1,.L84,.L25-.L84,.L345-.L84
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L83:
	.word	-1,.L84,0,.L25-.L84
	.half	2
	.byte	138,0
	.word	.L25-.L84,.L345-.L84
	.half	2
	.byte	138,8
	.word	.L345-.L84,.L345-.L84
	.half	2
	.byte	138,0
	.word	0,0
.L350:
	.word	-1,.L84,0,.L345-.L84
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('rt_hw_spin_lock_init')
	.sect	'.debug_loc'
.L344:
	.word	-1,.L82,0,.L342-.L82
	.half	1
	.byte	100
	.word	0,0
.L81:
	.word	-1,.L82,0,.L342-.L82
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('rt_hw_spin_unlock')
	.sect	'.debug_loc'
.L352:
	.word	-1,.L86,0,.L351-.L86
	.half	1
	.byte	100
	.word	0,0
.L353:
	.word	-1,.L86,.L27-.L86,.L351-.L86
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L85:
	.word	-1,.L86,0,.L27-.L86
	.half	2
	.byte	138,0
	.word	.L27-.L86,.L351-.L86
	.half	2
	.byte	138,8
	.word	.L351-.L86,.L351-.L86
	.half	2
	.byte	138,0
	.word	0,0
.L355:
	.word	-1,.L86,0,.L351-.L86
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('rt_hw_stack_init')
	.sect	'.debug_loc'
.L295:
	.word	-1,.L96,.L46-.L96,.L246-.L96
	.half	1
	.byte	82
	.word	.L523-.L96,.L524-.L96
	.half	1
	.byte	82
	.word	0,0
.L299:
	.word	-1,.L96,.L46-.L96,.L246-.L96
	.half	1
	.byte	110
	.word	.L525-.L96,.L526-.L96
	.half	1
	.byte	110
	.word	.L535-.L96,.L32-.L96
	.half	1
	.byte	95
	.word	.L32-.L96,.L288-.L96
	.half	1
	.byte	110
	.word	.L538-.L96,.L539-.L96
	.half	1
	.byte	100
	.word	.L545-.L96,.L288-.L96
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L291:
	.word	-1,.L96,0,.L523-.L96
	.half	1
	.byte	101
	.word	.L46-.L96,.L246-.L96
	.half	2
	.byte	145,112
	.word	.L527-.L96,.L288-.L96
	.half	2
	.byte	145,112
	.word	.L540-.L96,.L541-.L96
	.half	1
	.byte	111
	.word	0,0
.L95:
	.word	-1,.L96,0,.L522-.L96
	.half	2
	.byte	138,0
	.word	.L522-.L96,.L288-.L96
	.half	2
	.byte	138,16
	.word	.L288-.L96,.L288-.L96
	.half	2
	.byte	138,0
	.word	0,0
.L292:
	.word	-1,.L96,0,.L523-.L96
	.half	1
	.byte	102
	.word	.L46-.L96,.L246-.L96
	.half	1
	.byte	108
	.word	.L528-.L96,.L288-.L96
	.half	1
	.byte	108
	.word	.L546-.L96,.L288-.L96
	.half	1
	.byte	98
	.word	0,0
.L290:
	.word	-1,.L96,0,.L523-.L96
	.half	1
	.byte	100
	.word	.L46-.L96,.L246-.L96
	.half	2
	.byte	145,116
	.word	.L529-.L96,.L288-.L96
	.half	2
	.byte	145,116
	.word	.L541-.L96,.L542-.L96
	.half	1
	.byte	111
	.word	0,0
.L293:
	.word	-1,.L96,0,.L523-.L96
	.half	1
	.byte	103
	.word	.L46-.L96,.L246-.L96
	.half	1
	.byte	109
	.word	.L530-.L96,.L288-.L96
	.half	1
	.byte	109
	.word	0,0
.L297:
	.word	-1,.L96,.L531-.L96,.L532-.L96
	.half	1
	.byte	95
	.word	.L533-.L96,.L534-.L96
	.half	1
	.byte	111
	.word	.L532-.L96,.L288-.L96
	.half	2
	.byte	145,120
	.word	.L534-.L96,.L536-.L96
	.half	1
	.byte	100
	.word	.L536-.L96,.L537-.L96
	.half	1
	.byte	111
	.word	.L542-.L96,.L288-.L96
	.half	1
	.byte	111
	.word	.L543-.L96,.L544-.L96
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('rt_hw_systick_init')
	.sect	'.debug_loc'
.L39:
	.word	-1,.L40,0,.L469-.L40
	.half	2
	.byte	138,0
	.word	.L469-.L40,.L411-.L40
	.half	2
	.byte	138,48
	.word	.L411-.L40,.L411-.L40
	.half	2
	.byte	138,0
	.word	0,0
.L412:
	.word	-1,.L40,0,.L411-.L40
	.half	2
	.byte	145,80
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('rt_hw_usart_init')
	.sect	'.debug_loc'
.L41:
	.word	-1,.L42,0,.L413-.L42
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tricore0_trap_yield_for_task')
	.sect	'.debug_loc'
.L456:
	.word	-1,.L100,0,.L455-.L100
	.half	1
	.byte	84
	.word	0,0
.L99:
	.word	-1,.L100,0,.L455-.L100
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tricore1_trap_yield_for_task')
	.sect	'.debug_loc'
.L458:
	.word	-1,.L102,0,.L457-.L102
	.half	1
	.byte	84
	.word	0,0
.L101:
	.word	-1,.L102,0,.L457-.L102
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L867:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('rt_hw_systick_init')
	.sect	'.debug_frame'
	.word	36
	.word	.L867,.L40,.L411-.L40
	.byte	4
	.word	(.L469-.L40)/2
	.byte	19,48,22,26,3,19,138,48,4
	.word	(.L411-.L469)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('rt_hw_usart_init')
	.sect	'.debug_frame'
	.word	12
	.word	.L867,.L42,.L413-.L42
	.sdecl	'.debug_frame',debug,cluster('core0_trigger_scheduling')
	.sect	'.debug_frame'
	.word	12
	.word	.L867,.L44,.L414-.L44
	.sdecl	'.debug_frame',debug,cluster('core1_trigger_scheduling')
	.sect	'.debug_frame'
	.word	12
	.word	.L867,.L48,.L418-.L48
	.sdecl	'.debug_frame',debug,cluster('Core0_INTERRUPT')
	.sect	'.debug_frame'
	.word	12
	.word	.L867,.L50,.L421-.L50
	.sdecl	'.debug_frame',debug,cluster('Core1_INTERRUPT')
	.sect	'.debug_frame'
	.word	12
	.word	.L867,.L54,.L426-.L54
	.sdecl	'.debug_frame',debug,cluster('Core0_YIELD')
	.sect	'.debug_frame'
	.word	12
	.word	.L867,.L56,.L429-.L56
	.sdecl	'.debug_frame',debug,cluster('Core1_YIELD')
	.sect	'.debug_frame'
	.word	12
	.word	.L867,.L62,.L431-.L62
	.sdecl	'.debug_frame',debug,cluster('rt_hw_board_init')
	.sect	'.debug_frame'
	.word	12
	.word	.L867,.L64,.L432-.L64
	.sdecl	'.debug_frame',debug,cluster('rt_hw_context_switch_to')
	.sect	'.debug_frame'
	.word	12
	.word	.L867,.L66,.L329-.L66
	.sdecl	'.debug_frame',debug,cluster('rt_hw_context_switch_interrupt')
	.sect	'.debug_frame'
	.word	12
	.word	.L867,.L68,.L334-.L68
	.sdecl	'.debug_frame',debug,cluster('rt_hw_context_switch')
	.sect	'.debug_frame'
	.word	12
	.word	.L867,.L74,.L319-.L74
	.sdecl	'.debug_frame',debug,cluster('rt_hw_secondary_cpu_up')
	.sect	'.debug_frame'
	.word	24
	.word	.L867,.L76,.L366-.L76
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Core1_init')
	.sect	'.debug_frame'
	.word	36
	.word	.L867,.L78,.L368-.L78
	.byte	4
	.word	(.L518-.L78)/2
	.byte	19,48,22,26,3,19,138,48,4
	.word	(.L368-.L518)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('rt_hw_ipi_send')
	.sect	'.debug_frame'
	.word	24
	.word	.L867,.L80,.L362-.L80
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('rt_hw_spin_lock_init')
	.sect	'.debug_frame'
	.word	24
	.word	.L867,.L82,.L342-.L82
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('rt_hw_spin_lock')
	.sect	'.debug_frame'
	.word	44
	.word	.L867,.L84,.L345-.L84
	.byte	8,18,8,19,8,21,8,22,8,23,4
	.word	(.L25-.L84)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L345-.L25)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('rt_hw_spin_unlock')
	.sect	'.debug_frame'
	.word	44
	.word	.L867,.L86,.L351-.L86
	.byte	8,18,8,19,8,21,8,22,8,23,4
	.word	(.L27-.L86)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L351-.L27)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('rt_hw_cpu_id')
	.sect	'.debug_frame'
	.word	24
	.word	.L867,.L88,.L357-.L88
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('rt_hw_local_irq_enable')
	.sect	'.debug_frame'
	.word	24
	.word	.L867,.L90,.L309-.L90
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('rt_hw_secondary_cpu_idle_exec')
	.sect	'.debug_frame'
	.word	24
	.word	.L867,.L92,.L367-.L92
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('rt_hw_local_irq_disable')
	.sect	'.debug_frame'
	.word	24
	.word	.L867,.L94,.L300-.L94
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('rt_hw_stack_init')
	.sect	'.debug_frame'
	.word	36
	.word	.L867,.L96,.L288-.L96
	.byte	4
	.word	(.L522-.L96)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L288-.L522)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('get_clk')
	.sect	'.debug_frame'
	.word	12
	.word	.L867,.L98,.L391-.L98
	.sdecl	'.debug_frame',debug,cluster('tricore0_trap_yield_for_task')
	.sect	'.debug_frame'
	.word	12
	.word	.L867,.L100,.L455-.L100
	.sdecl	'.debug_frame',debug,cluster('tricore1_trap_yield_for_task')
	.sect	'.debug_frame'
	.word	12
	.word	.L867,.L102,.L457-.L102
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L868:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_5')
	.sect	'.debug_frame'
	.word	24
	.word	.L868,.L46,.L246-.L46
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_6')
	.sect	'.debug_frame'
	.word	24
	.word	.L868,.L52,.L251-.L52
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_4')
	.sect	'.debug_frame'
	.word	24
	.word	.L868,.L58,.L241-.L58
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_9')
	.sect	'.debug_frame'
	.word	24
	.word	.L868,.L60,.L266-.L60
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_8')
	.sect	'.debug_frame'
	.word	24
	.word	.L868,.L70,.L261-.L70
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_7')
	.sect	'.debug_frame'
	.word	24
	.word	.L868,.L72,.L256-.L72
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   642  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   643  

	; Module end
