	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\.cpuport.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include\\libc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.src ..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c'

	
$TC162
	
	.sdecl	'.text.cpuport.rt_hw_interrupt_disable',code,cluster('rt_hw_interrupt_disable')
	.sect	'.text.cpuport.rt_hw_interrupt_disable'
	.align	2
	
	.global	rt_hw_interrupt_disable

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	     1  /*
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	     2   * Copyright (c) 2006-2018, RT-Thread Development Team
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	     3   *rt_interrupt_from_thread
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	     4   * SPDX-License-Identifier: GPL-2.0 License
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	     5   *
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	     6   * Change Logs:
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	     7   * Date           Author       Notes
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	     8   * 2021/02/01     BalanceTWK   The unify TriCore porting code.
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	     9   */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    10  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    11  #include <rthw.h>
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    12  #include <rtthread.h>
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    13  #include "cpuport.h"
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    14  #include "IfxCpu_Trap.h"
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    15  #include "UART_Logging.h"
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    16  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    17  static IfxStm_Timer tricore_timers[2];
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    18  static volatile Ifx_STM *const STMs[2] = {&MODULE_STM0, &MODULE_STM1};
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    19  static volatile Ifx_SRC_SRCR *const GPSR[2] = {&SRC_GPSR_GPSR0_SR0, &SRC_GPSR_GPSR1_SR0};
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    20  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    21  static volatile rt_ubase_t rt_interrupt_from_thread = RT_NULL;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    22  static volatile rt_ubase_t rt_interrupt_to_thread = RT_NULL;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    23  // static volatile rt_ubase_t rt_interrupt_from_thread[TRICORE_NUM_WORDS_IN_CSA] = {};
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    24  // static volatile rt_ubase_t rt_interrupt_to_thread[TRICORE_NUM_WORDS_IN_CSA] = {};
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    25  static volatile rt_ubase_t rt_thread_switch_interrupt_flag = RT_NULL;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    26  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    27  typedef struct UpperCtxInfo{
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    28      unsigned long  _PCXI;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    29      unsigned long  _PSW;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    30      unsigned long*  _A10;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    31      unsigned long*  _A11;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    32      unsigned long  _D8;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    33      unsigned long  _D9;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    34      unsigned long  _D10;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    35      unsigned long  _D11;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    36      unsigned long*  _A12;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    37      unsigned long*  _A13;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    38      unsigned long*  _A14;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    39      unsigned long*  _A15;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    40      unsigned long  _D12;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    41      unsigned long  _D13;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    42      unsigned long  _D14;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    43      unsigned long  _D15;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    44  }UpperCtx_T,*UpperCtx_Ptr;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    45  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    46  typedef struct LowCtxInfo{
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    47      unsigned long  _PCXI;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    48      unsigned long*  _PC;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    49      unsigned long*  _A2;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    50      unsigned long*  _A3;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    51      unsigned long  _D0;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    52      unsigned long  _D1;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    53      unsigned long  _D2;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    54      unsigned long  _D3;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    55      unsigned long*  _A4;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    56      unsigned long*  _A5;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    57      unsigned long*  _A6;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    58      unsigned long*  _A7;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    59      unsigned long  _D4;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    60      unsigned long  _D5;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    61      unsigned long  _D6;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    62      unsigned long  _D7;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    63  }LowCtx_T,*LowCtx_Ptr;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    64  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    65  App_Cpu g_AppCpu0; //频率信息变量
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    66  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    67  rt_base_t rt_hw_interrupt_disable(void)
; Function rt_hw_interrupt_disable
.L15:
rt_hw_interrupt_disable:	.type	func

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
	mfcr	d15,#65068
.L261:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
	extr.u	d15,d15,#15,#1
.L262:
	ne	d2,d15,#0
.L161:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
	disable
.L353:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
	nop
.L158:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    68  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    69      rt_base_t level;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    70      level = IfxCpu_disableInterrupts();
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    71      return level;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    72  }
	ret
.L156:
	
__rt_hw_interrupt_disable_function_end:
	.size	rt_hw_interrupt_disable,__rt_hw_interrupt_disable_function_end-rt_hw_interrupt_disable
.L59:
	; End of function
	
	.sdecl	'.text.cpuport.rt_hw_interrupt_enable',code,cluster('rt_hw_interrupt_enable')
	.sect	'.text.cpuport.rt_hw_interrupt_enable'
	.align	2
	
	.global	rt_hw_interrupt_enable

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    73  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    74  void rt_hw_interrupt_enable(rt_base_t level)
; Function rt_hw_interrupt_enable
.L17:
rt_hw_interrupt_enable:	.type	func

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    75  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    76      restoreInterrupts((boolean)level);
	extr.u	d15,d4,#0,#8
.L358:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1032      if (enabled != FALSE)      (inlined)
	jeq	d15,#0,.L3
.L359:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return module;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      return (IfxCpu_Id)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   872  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   873  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   874  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   875  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   876  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   877      uint32 reg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   878      reg = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   879      return (IfxCpu_ResourceCpu)__minu(reg, 5);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   880  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   881  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   882  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   883  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   884  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   885      return IfxCpu_getPerformanceCounter(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   886  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   887  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   888  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   889  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   890  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   891      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   892  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   893  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   894  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   895  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   896  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   897      Ifx_CPU_CCNT ccnt;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   898  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   899      if (address == CPU_CCNT)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   900      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   901          ccnt.U = __mfcr(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   902      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   903      else if (address == CPU_ICNT)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   904      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   905          ccnt.U = __mfcr(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   906      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   907      else if (address == CPU_M1CNT)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   908      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   909          ccnt.U = __mfcr(CPU_M1CNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   910      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   911      else if (address == CPU_M2CNT)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   912      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   913          ccnt.U = __mfcr(CPU_M2CNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   914      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   915      else if (address == CPU_M3CNT)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   916      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   917          ccnt.U = __mfcr(CPU_M3CNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   918      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   920      return ccnt.B.COUNTVALUE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   921  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   922  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   923  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   924  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   925  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   926      Ifx_CPU_CCNT ccnt;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   927  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   928      if (address == CPU_CCNT)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   929      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   930          ccnt.U = __mfcr(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   931      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   932      else if (address == CPU_ICNT)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   933      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   934          ccnt.U = __mfcr(CPU_ICNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   935      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   936      else if (address == CPU_M1CNT)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   937      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   938          ccnt.U = __mfcr(CPU_M1CNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   939      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   940      else if (address == CPU_M2CNT)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   941      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   942          ccnt.U = __mfcr(CPU_M2CNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   943      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   944      else if (address == CPU_M3CNT)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   945      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   946          ccnt.U = __mfcr(CPU_M3CNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   947      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   948  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   949      return ccnt.B.SOVF;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   950  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   951  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   952  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   953  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   954  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   955      uint32  k;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   956      uint32  nxt_cxi_val = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   957      uint32 *prvCsa      = 0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   958      uint32 *nxtCsa      = csaBegin;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   959      uint32  numOfCsa    = (((uint32)csaEnd - (uint32)csaBegin) / 64U);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   960  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   961      for (k = 0; k < numOfCsa; k++)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   962      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   963          nxt_cxi_val = ((uint32)nxtCsa & (0XFU << 28)) >> 12 | ((uint32)nxtCsa & (0XFFFFU << 6)) >> 6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   964  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   965          if (k == 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   966          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   967              __mtcr(CPU_FCX, nxt_cxi_val);   /* store the new pcxi value to LCX */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   968          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   969          else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   970          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   971              *prvCsa = nxt_cxi_val;  /* Store null pointer in last CSA (= very first time!) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   972          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   973  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   974          if (k == (numOfCsa - 3U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   975          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   976              __mtcr(CPU_LCX, nxt_cxi_val);   /* Last but 2 context save area is pointed in LCX to know if there is CSA depletion */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   977          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   978  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   979          prvCsa  = (uint32 *)nxtCsa;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   980          nxtCsa += 16;           /* next CSA */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   981      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   982  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   983      *prvCsa = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   984  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   985  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   986  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   987  IFX_INLINE void IfxCpu_invalidateProgramCache(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   988  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   989      uint16 cpuWdtPassword = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   990      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   991          IfxScuWdt_clearCpuEndinit(cpuWdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   992          Ifx_CPU_PCON1 pcon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   993          pcon1.U       = __mfcr(CPU_PCON1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   994          pcon1.B.PCINV = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   995          __mtcr(CPU_PCON1, pcon1.U);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   996          IfxScuWdt_setCpuEndinit(cpuWdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   997      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   998  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   999  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1000  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1001  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1002  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1003      uint8 segment = (uint32)address >> 24;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1004      return ((segment == IFXCPU_CACHABLE_FLASH_SEGMENT) || (segment == IFXCPU_CACHABLE_LMU_SEGMENT)) ? TRUE : FALSE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1005  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1006  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1007  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1008  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1009  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1010      Ifx_CPU_CCTRL cctrl;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1011      cctrl.U    = __mfcr(CPU_CCTRL);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1012      /*Disable the counters */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1013      cctrl.B.CE = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1014      __mtcr(CPU_CCTRL, cctrl.U);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1015  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1016      /* reset the counters */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1017      __mtcr(CPU_CCNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1018      __mtcr(CPU_ICNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1019      __mtcr(CPU_M1CNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1020      __mtcr(CPU_M2CNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1021      __mtcr(CPU_M3CNT, 0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1022  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1023      /*Enable the counters, set the counter mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1024      cctrl.B.CE = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1025      cctrl.B.CM = mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1026      __mtcr(CPU_CCTRL, cctrl.U);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1027  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1028  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1029  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1030  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1031  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1032      if (enabled != FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1033      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1034          __enable();
	enable

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	  1032      if (enabled != FALSE)      (inlined)
.L3:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    77  }
	ret
.L165:
	
__rt_hw_interrupt_enable_function_end:
	.size	rt_hw_interrupt_enable,__rt_hw_interrupt_enable_function_end-rt_hw_interrupt_enable
.L64:
	; End of function
	
	.sdecl	'.text.cpuport.rt_hw_systick_init',code,cluster('rt_hw_systick_init')
	.sect	'.text.cpuport.rt_hw_systick_init'
	.align	2
	
	.global	rt_hw_systick_init

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    78  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    79  void rt_hw_systick_init( void )
; Function rt_hw_systick_init
.L19:
rt_hw_systick_init:	.type	func
	sub.a	a10,#48
.L263:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    80  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    81    IfxStm_Timer_Config timer_config;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    82    IfxStm_Timer_initConfig(&timer_config, STMs[TRICORE_CPU_ID]);
	mfcr	d15,#65052
.L393:
	and	d15,#15
	lea	a15,STMs
.L394:
	addsc.a	a15,a15,d15,#2
	ld.a	a5,[a15]
.L395:
	mov.aa	a4,a10
.L396:
	call	IfxStm_Timer_initConfig
.L397:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    83  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    84    timer_config.base.frequency = RT_TICK_PER_SECOND;
	movh	d15,#17530
	st.w	[a10],d15
.L398:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    85    timer_config.base.isrPriority = 2;
	mov	d15,#2
	st.h	[a10]4,d15
.L399:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    86    IfxStm_Timer_init(&tricore_timers[TRICORE_CPU_ID], &timer_config);
	movh.a	a15,#@his(tricore_timers)
	lea	a15,[a15]@los(tricore_timers)
.L400:
	mfcr	d15,#65052
	and	d15,#15
.L401:
	mul	d15,d15,#24
	addsc.a	a4,a15,d15,#0
.L402:
	mov.aa	a5,a10
	call	IfxStm_Timer_init
.L403:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    87    IfxStm_Timer_run(&tricore_timers[TRICORE_CPU_ID]);
	mfcr	d15,#65052
	and	d15,#15
.L404:
	mul	d15,d15,#24
	addsc.a	a4,a15,d15,#0
	j	IfxStm_Timer_run
.L208:
	
__rt_hw_systick_init_function_end:
	.size	rt_hw_systick_init,__rt_hw_systick_init_function_end-rt_hw_systick_init
.L89:
	; End of function
	
	.sdecl	'.text.cpuport.rt_hw_usart_init',code,cluster('rt_hw_usart_init')
	.sect	'.text.cpuport.rt_hw_usart_init'
	.align	2
	
	.global	rt_hw_usart_init

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    88  }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    89  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    90  void rt_hw_usart_init(void)
; Function rt_hw_usart_init
.L21:
rt_hw_usart_init:	.type	func

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    91  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    92      initUART();
	j	initUART
.L211:
	
__rt_hw_usart_init_function_end:
	.size	rt_hw_usart_init,__rt_hw_usart_init_function_end-rt_hw_usart_init
.L94:
	; End of function
	
	.sdecl	'.text.cpuport.trigger_scheduling',code,cluster('trigger_scheduling')
	.sect	'.text.cpuport.trigger_scheduling'
	.align	2
	
	.global	trigger_scheduling

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    93  }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    94  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    95  void trigger_scheduling(void)
; Function trigger_scheduling
.L23:
trigger_scheduling:	.type	func

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    96  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    97      UpperCtx_Ptr ptUpperCtx = NULL;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    98  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	    99      /* 判断是否需要切换到 to 线程 */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   100      if(rt_interrupt_to_thread)
	ld.w	d15,rt_interrupt_to_thread
.L413:
	jeq	d15,#0,.L4
.L414:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   101      {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   102          __dsync();
	dsync
.L415:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   103          /* 获取当前线程的 CSA 上下文地址 */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   104          ptUpperCtx = LINKWORD_TO_ADDRESS( __mfcr( CPU_PCXI ) );
	mfcr	d15,#65024
	movh	d0,#15
	and	d15,d0
	sha	d15,d15,#12
	mfcr	d0,#65024
	insert	d0,d0,#0,#16,#16
	sha	d0,#6
.L264:
	or	d15,d0
.L416:
	mov.a	a15,d15
.L266:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   105  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   106          if(rt_interrupt_from_thread)
	ld.w	d15,rt_interrupt_from_thread
.L265:
	jeq	d15,#0,.L5
.L417:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   107          {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   108              /* 保存当前线程的 CSA 上下文 */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   109              *( (unsigned long *)rt_interrupt_from_thread ) = ptUpperCtx->_PCXI;
	ld.w	d15,rt_interrupt_from_thread
.L418:
	mov.a	a2,d15
.L419:
	ld.w	d15,[a15]
.L420:
	st.w	[a2],d15
.L5:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   110          }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   111          /* 将to线程的 CSA linkword赋给当前线程的上层 上下文的 LinkWord ，用于 TriCore 自动切换线程。*/
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   112          ptUpperCtx->_PCXI = *( (unsigned long *)rt_interrupt_to_thread );
	ld.w	d15,rt_interrupt_to_thread
.L421:
	mov.a	a2,d15
.L422:
	ld.w	d15,[a2]
.L423:
	st.w	[a15],d15
.L424:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   113          __isync();
	isync
.L4:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   114      }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   115  }
	ret
.L212:
	
__trigger_scheduling_function_end:
	.size	trigger_scheduling,__trigger_scheduling_function_end-trigger_scheduling
.L99:
	; End of function
	
	.sdecl	'.text.inttab0.intvec.002',code
	.sect	'.text.inttab0.intvec.002'

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   116  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   117  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   118  IFX_INTERRUPT(KERNEL_INTERRUPT, 0, 2)
	movh.a	a14,#@his(KERNEL_INTERRUPT)
	lea	a14,[a14]@los(KERNEL_INTERRUPT)
	ji	a14
	.sdecl	'.text.cpuport.KERNEL_INTERRUPT',code,cluster('KERNEL_INTERRUPT')
	.sect	'.text.cpuport.KERNEL_INTERRUPT'
	.align	2
	
	.global	KERNEL_INTERRUPT
; Function KERNEL_INTERRUPT
.L25:
KERNEL_INTERRUPT:	.type	func
	svlcx
.L429:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   119  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   120      rt_interrupt_enter();
	call	rt_interrupt_enter
.L430:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   121      IfxStm_Timer_acknowledgeTimerIrq(&tricore_timers[TRICORE_CPU_ID]);
	mfcr	d15,#65052
	and	d15,#15
.L431:
	mul	d15,d15,#24
	movh.a	a15,#@his(tricore_timers)
	lea	a15,[a15]@los(tricore_timers)
.L432:
	addsc.a	a4,a15,d15,#0
	call	IfxStm_Timer_acknowledgeTimerIrq
.L433:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   122      rt_tick_increase();
	call	rt_tick_increase
.L434:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   123      rt_interrupt_leave();
	call	rt_interrupt_leave
.L435:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   124  }
	rslcx
	rfe
.L214:
	
__KERNEL_INTERRUPT_function_end:
	.size	KERNEL_INTERRUPT,__KERNEL_INTERRUPT_function_end-KERNEL_INTERRUPT
.L104:
	; End of function
	
	.sdecl	'.text.inttab0.intvec.001',code
	.sect	'.text.inttab0.intvec.001'

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   125  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   126  // __attribute__((noinline)) static void tricore_yield_for_interrupt( void )
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   127  // {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   128  //     trigger_scheduling();
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   129  // }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   130  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   131  IFX_INTERRUPT(KERNEL_YIELD, 0, 1)
	movh.a	a14,#@his(KERNEL_YIELD)
	lea	a14,[a14]@los(KERNEL_YIELD)
	ji	a14
	.sdecl	'.text.cpuport.KERNEL_YIELD',code,cluster('KERNEL_YIELD')
	.sect	'.text.cpuport.KERNEL_YIELD'
	.align	2
	
	.global	KERNEL_YIELD
; Function KERNEL_YIELD
.L27:
KERNEL_YIELD:	.type	func
	svlcx
.L440:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   132  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   133      /* clear the SRR bit */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   134      GPSR[TRICORE_CPU_ID]->B.CLRR = 1;
	mfcr	d15,#65052
	fcall	.cocofun_3
.L441:
	or	d15,#2
	st.b	[a15],d15
.L442:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   135  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   136      trigger_scheduling();
	call	trigger_scheduling
.L443:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   137  }
	rslcx
	rfe
.L215:
	
__KERNEL_YIELD_function_end:
	.size	KERNEL_YIELD,__KERNEL_YIELD_function_end-KERNEL_YIELD
.L109:
	; End of function
	
	.sdecl	'.text.cpuport..cocofun_3',code,cluster('.cocofun_3')
	.sect	'.text.cpuport..cocofun_3'
	.align	2
; Function .cocofun_3
.L29:
.cocofun_3:	.type	func
; Function body .cocofun_3, coco_iter:0
	and	d15,#15
	lea	a15,GPSR
.L284:
	addsc.a	a15,a15,d15,#2
	ld.a	a15,[a15]
.L480:
	ld.bu	d15,[+a15]3
.L481:
	fret
.L129:
	; End of function
	.sdecl	'.text.cpuport.rt_hw_board_init',code,cluster('rt_hw_board_init')
	.sect	'.text.cpuport.rt_hw_board_init'
	.align	2
	
	.global	rt_hw_board_init

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   138  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   139  /**
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   140   * This function will initial board.
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   141   */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   142  #ifdef RT_USING_HEAP
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   143  extern unsigned int __HEAP[];
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   144  extern unsigned int __HEAP_END[];
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   145  #endif
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   146  void rt_hw_board_init()
; Function rt_hw_board_init
.L31:
rt_hw_board_init:	.type	func

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   147  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   148      IfxStm_setSuspendMode(STMs[TRICORE_CPU_ID], IfxStm_SuspendMode_hard);
	mfcr	d15,#65052
.L448:
	lea	a15,STMs
.L449:
	and	d15,#15
.L450:
	addsc.a	a15,a15,d15,#2
.L219:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     2   * \file IfxStm.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     3   * \brief STM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     4   * \ingroup IfxLld_Stm
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    41   * \defgroup IfxLld_Stm_Usage How to use the Stm driver?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    42   * \ingroup IfxLld_Stm
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    44   * The Stm Standard driver provides APIs to initialize, configure and control the Stm.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    45   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    46   * In the following sections it will be described, how to integrate the driver into the application framework.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    48   * \section IfxLld_Stm_Preparation Preparation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    49   * \subsection IfxLld_Stm_Include Include Files
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    51   * Include following header file into your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    52   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    53   * #include <Stm/Std/IfxStm.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    54   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    55   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    56   * \subsection IfxLld_Stm_Variables Variables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    57   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    58   * Declare STM variables :
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    59   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    60   * Ifx_STM *stmSfr;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    61   * IfxStm_CompareConfig stmConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    62   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    63   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    64   * \subsection IfxLld_Stm_Interrupt Interrupt Handler Installation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    65   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    66   * See also \ref IfxLld_Cpu_Irq_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    68   * Define priorities for the Interrrupt handlers. This is normally done in the Ifx_IntPrioDef.h file:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    69   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    70   * // priorities are normally defined in Ifx_IntPrioDef.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    71   * #define IFX_INTPRIO_STM0_SR0  10
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    72   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    73   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    74   * Add the interrupt service routines to your C code. They have to call the Stm interrupt handlers:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    75   * please take care in choosing number of ticks, the below example code will raise an interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    76   * evry time the specified number of ticks have been elapsed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    77   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    78   * IFX_INTERRUPT(stm0Sr0ISR, 0, IFX_INTPRIO_STM0_SR0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    79   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    80   *     IfxStm_clearCompareFlag(stmSfr, stmConfig.comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    81   *     IfxStm_increaseCompare(stmSfr, stmConfig.comparator, stmConfig.ticks);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    82   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    83   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    84   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    85   * Finally install the interrupt handlers in your initialisation function:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    86   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    87   *     // install interrupt handlers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    88   *     IfxCpu_Irq_installInterruptHandler(&stm0Sr0ISR, IFX_INTPRIO_STM0_SR0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    89   *     IfxCpu_enableInterrupts();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    90   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    91   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    92   * \subsection IfxLld_Stm_Init Module Initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    93   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    94   * The STM module can be configured to generate an interrupt at every compare match of the selected comaparator with the desired compare value, the interrupt can further be routed to other comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    95   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    96   * The module initialisation can be done as followed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    97   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    98   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    99   *     stmSfr = &MODULE_STM0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   100   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   101   *     IfxStm_initCompareConfig(&stmConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   103   *     // configure to generate interrupt every 10 us
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   104   *     sint32 ticks = IfxStm_getTicksFromMicroseconds(10);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   105   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   106   *     stmConfig.ticks = ticks;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   107   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   108   *     stmConfig.triggerPriority = IFX_INTPRIO_STM0_SR0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   109   *     stmConfig.typeOfService = IfxSrc_Tos_cpu0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   110   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   111   *     IfxStm_initCompare(stmSfr, &stmConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   112   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   113   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   114   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   115   * Now the Stm shall generate interrupts regularly based on the configured time !
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   116   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   117   * \defgroup IfxLld_Stm_Std_Enumerations Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   118   * \ingroup IfxLld_Stm_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   119   * \defgroup IfxLld_Stm_Std_Structures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   120   * \ingroup IfxLld_Stm_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   121   * \defgroup IfxLld_Stm_Std_Module Module Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   122   * \ingroup IfxLld_Stm_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   123   * \defgroup IfxLld_Stm_Std_Timer Timer Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   124   * \ingroup IfxLld_Stm_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   125   * \defgroup IfxLld_Stm_Std_Comparator Comparator Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   126   * \ingroup IfxLld_Stm_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   127   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   129  #ifndef IFXSTM_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   130  #define IFXSTM_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   131  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   132  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   133  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   134  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   135  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   136  #include "_Impl/IfxStm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   137  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   138  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   139  #include "IfxCbs_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   140  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   141  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   142  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   143  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   145  #ifndef IFXSTM_DEFAULT_TIMER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   146  #define IFXSTM_DEFAULT_TIMER (&MODULE_STM0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   147  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   149  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   150  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   151  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   152  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   153  /** \addtogroup IfxLld_Stm_Std_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   154   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   155  /** \brief Comparator Id defined in   MODULE_STMx.ISCR.B.CMP0IRR(x = 0, 1, 2)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   156   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   157  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   158  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   159      IfxStm_Comparator_0 = 0,      /**< \brief Comparator Id 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   160      IfxStm_Comparator_1           /**< \brief Comparator Id 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   161  } IfxStm_Comparator;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   163  /** \brief Comparator Interrupt request source defined in MODULE_SRC.STM.STM[index].SRx (x =0, 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   164   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   165  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   166  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   167      IfxStm_ComparatorInterrupt_ir0 = 0,  /**< \brief Select STMIR0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   168      IfxStm_ComparatorInterrupt_ir1 = 1   /**< \brief Select STMIR1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   169  } IfxStm_ComparatorInterrupt;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   171  /** \brief Comparator start bit position  defined in MODULE_STMx.CMCON.B.MSTART0(x = 0,1,2)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   172   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   173  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   174  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   175      IfxStm_ComparatorOffset_0 = 0,      /**< \brief Comparator start bit position 0 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   176      IfxStm_ComparatorOffset_1,          /**< \brief Comparator start bit position 1 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   177      IfxStm_ComparatorOffset_2,          /**< \brief Comparator start bit position 2 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   178      IfxStm_ComparatorOffset_3,          /**< \brief Comparator start bit position 3 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   179      IfxStm_ComparatorOffset_4,          /**< \brief Comparator start bit position 4 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   180      IfxStm_ComparatorOffset_5,          /**< \brief Comparator start bit position 5 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   181      IfxStm_ComparatorOffset_6,          /**< \brief Comparator start bit position 6 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   182      IfxStm_ComparatorOffset_7,          /**< \brief Comparator start bit position 7 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   183      IfxStm_ComparatorOffset_8,          /**< \brief Comparator start bit position 8 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   184      IfxStm_ComparatorOffset_9,          /**< \brief Comparator start bit position 9 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   185      IfxStm_ComparatorOffset_10,         /**< \brief Comparator start bit position 10 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   186      IfxStm_ComparatorOffset_11,         /**< \brief Comparator start bit position 11 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   187      IfxStm_ComparatorOffset_12,         /**< \brief Comparator start bit position 12 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   188      IfxStm_ComparatorOffset_13,         /**< \brief Comparator start bit position 13 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   189      IfxStm_ComparatorOffset_14,         /**< \brief Comparator start bit position 14 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   190      IfxStm_ComparatorOffset_15,         /**< \brief Comparator start bit position 15 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   191      IfxStm_ComparatorOffset_16,         /**< \brief Comparator start bit position 16 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   192      IfxStm_ComparatorOffset_17,         /**< \brief Comparator start bit position 17 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   193      IfxStm_ComparatorOffset_18,         /**< \brief Comparator start bit position 18 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   194      IfxStm_ComparatorOffset_19,         /**< \brief Comparator start bit position 19 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   195      IfxStm_ComparatorOffset_20,         /**< \brief Comparator start bit position 20 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   196      IfxStm_ComparatorOffset_21,         /**< \brief Comparator start bit position 21 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   197      IfxStm_ComparatorOffset_22,         /**< \brief Comparator start bit position 22 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   198      IfxStm_ComparatorOffset_23,         /**< \brief Comparator start bit position 23 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   199      IfxStm_ComparatorOffset_24,         /**< \brief Comparator start bit position 24 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   200      IfxStm_ComparatorOffset_25,         /**< \brief Comparator start bit position 25 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   201      IfxStm_ComparatorOffset_26,         /**< \brief Comparator start bit position 26 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   202      IfxStm_ComparatorOffset_27,         /**< \brief Comparator start bit position 27 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   203      IfxStm_ComparatorOffset_28,         /**< \brief Comparator start bit position 28 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   204      IfxStm_ComparatorOffset_29,         /**< \brief Comparator start bit position 29 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   205      IfxStm_ComparatorOffset_30,         /**< \brief Comparator start bit position 30 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   206      IfxStm_ComparatorOffset_31          /**< \brief Comparator start bit position 31 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   207  } IfxStm_ComparatorOffset;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   209  /** \brief Size of compare value to compare with timer defined in  MODULE_STMx.CMCON.B.MSIZE0(x = 0,1,2)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   210   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   211  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   212  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   213      IfxStm_ComparatorSize_1Bit   = 0,   /**< \brief Size of compare value to compare with timer: 1 bit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   214      IfxStm_ComparatorSize_2Bits  = 1,   /**< \brief Size of compare value to compare with timer: 2 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   215      IfxStm_ComparatorSize_3Bits  = 2,   /**< \brief Size of compare value to compare with timer: 3 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   216      IfxStm_ComparatorSize_4Bits  = 3,   /**< \brief Size of compare value to compare with timer: 4 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   217      IfxStm_ComparatorSize_5Bits  = 4,   /**< \brief Size of compare value to compare with timer: 5 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   218      IfxStm_ComparatorSize_6Bits  = 5,   /**< \brief Size of compare value to compare with timer: 6 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   219      IfxStm_ComparatorSize_7Bits  = 6,   /**< \brief Size of compare value to compare with timer: 7 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   220      IfxStm_ComparatorSize_8Bits  = 7,   /**< \brief Size of compare value to compare with timer: 8 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   221      IfxStm_ComparatorSize_9Bits  = 8,   /**< \brief Size of compare value to compare with timer: 9 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   222      IfxStm_ComparatorSize_10Bits = 9,   /**< \brief Size of compare value to compare with timer: 10 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   223      IfxStm_ComparatorSize_11Bits = 10,  /**< \brief Size of compare value to compare with timer: 11 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   224      IfxStm_ComparatorSize_12Bits = 11,  /**< \brief Size of compare value to compare with timer: 12 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   225      IfxStm_ComparatorSize_13Bits = 12,  /**< \brief Size of compare value to compare with timer: 13 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   226      IfxStm_ComparatorSize_14Bits = 13,  /**< \brief Size of compare value to compare with timer: 14 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   227      IfxStm_ComparatorSize_15Bits = 14,  /**< \brief Size of compare value to compare with timer: 15 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   228      IfxStm_ComparatorSize_16Bits = 15,  /**< \brief Size of compare value to compare with timer: 16 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   229      IfxStm_ComparatorSize_17Bits = 16,  /**< \brief Size of compare value to compare with timer: 17 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   230      IfxStm_ComparatorSize_18Bits = 17,  /**< \brief Size of compare value to compare with timer: 18 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   231      IfxStm_ComparatorSize_19Bits = 18,  /**< \brief Size of compare value to compare with timer: 19 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   232      IfxStm_ComparatorSize_20Bits = 19,  /**< \brief Size of compare value to compare with timer: 20 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   233      IfxStm_ComparatorSize_21Bits = 20,  /**< \brief Size of compare value to compare with timer: 21 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   234      IfxStm_ComparatorSize_22Bits = 21,  /**< \brief Size of compare value to compare with timer: 22 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   235      IfxStm_ComparatorSize_23Bits = 22,  /**< \brief Size of compare value to compare with timer: 23 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   236      IfxStm_ComparatorSize_24Bits = 23,  /**< \brief Size of compare value to compare with timer: 24 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   237      IfxStm_ComparatorSize_25Bits = 24,  /**< \brief Size of compare value to compare with timer: 25 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   238      IfxStm_ComparatorSize_26Bits = 25,  /**< \brief Size of compare value to compare with timer: 26 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   239      IfxStm_ComparatorSize_27Bits = 26,  /**< \brief Size of compare value to compare with timer: 27 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   240      IfxStm_ComparatorSize_28Bits = 27,  /**< \brief Size of compare value to compare with timer: 28 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   241      IfxStm_ComparatorSize_29Bits = 28,  /**< \brief Size of compare value to compare with timer: 29 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   242      IfxStm_ComparatorSize_30Bits = 29,  /**< \brief Size of compare value to compare with timer: 30 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   243      IfxStm_ComparatorSize_31Bits = 30,  /**< \brief Size of compare value to compare with timer: 31 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   244      IfxStm_ComparatorSize_32Bits = 31   /**< \brief Size of compare value to compare with timer: 32 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   245  } IfxStm_ComparatorSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   247  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   248   * Definition in Ifx_STM.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   250  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   251  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   252      IfxStm_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   253      IfxStm_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   254  } IfxStm_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   255  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   256  /** \brief OCDS Suspend Control (OCDS.SUS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   257   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   258  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   259  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   260      IfxStm_SuspendMode_none = 0,  /**< \brief No suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   261      IfxStm_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   262      IfxStm_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   263  } IfxStm_SuspendMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   265  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   268  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   271  /** \addtogroup IfxLld_Stm_Std_Structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   272   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   273  /** \brief Comparator Configuration Structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   275  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   276  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   277      IfxStm_Comparator          comparator;                /**< \brief Comparator Id defined in   MODULE_STMx.ISCR.B.CMP0IRR(x = 0, 1, 2). */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   278      IfxStm_ComparatorInterrupt comparatorInterrupt;       /**< \brief Comparator Interrupt request source defined in MODULE_SRC.STM.STM[index].SRx (x =0, 1). */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   279      IfxStm_ComparatorOffset    compareOffset;             /**< \brief Comparator start bit position  defined in MODULE_STMx.CMCON.B.MSTART0(x = 0,1,2). */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   280      IfxStm_ComparatorSize      compareSize;               /**< \brief Size of compare value to compare with timer defined in  MODULE_STMx.CMCON.B.MSIZE0(x = 0,1,2). */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   281      uint32                     ticks;                     /**< \brief count for next comparison from current timer count. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   282      Ifx_Priority               triggerPriority;           /**< \brief Interrupt priority. Range = 0 .. 255. 0 = interrupt is disabled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   283      IfxSrc_Tos                 typeOfService;             /**< \brief Type of service. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   284  } IfxStm_CompareConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   286  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   288  /** \addtogroup IfxLld_Stm_Std_Module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   289   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   291  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   292  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   293  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   294  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   295  /** \brief Returns system timer value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   296   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   297   * \return system timer value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   299  IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   301  /** \brief Returns the system timer frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   302   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   303   * \return the system timer frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   305  IFX_INLINE float32 IfxStm_getFrequency(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   307  /** \brief Returns the module's suspend state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   308   * TRUE :if module is suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   309   * FALSE:if module is not yet suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   310   * \param stm Pointer to STM module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   311   * \return Suspend status (TRUE / FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   313  IFX_INLINE boolean IfxStm_isModuleSuspended(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   315  /** \brief Configure the Module to Hard/Soft suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   316   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   317   * \param stm Pointer to STM module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   318   * \param mode Module suspend mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   319   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   320   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   321  IFX_INLINE void IfxStm_setSuspendMode(Ifx_STM *stm, IfxStm_SuspendMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   322  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   323  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   324  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   325  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   326  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   327  /** \brief Disables the Stm module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   328   * \param stm pointer to STM registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   329   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   330   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   331  IFX_EXTERN void IfxStm_disableModule(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   332  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   333  /** \brief enable suspend by debugger.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   334   * Note: The API will write into the OCS register only if OCDS is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   335   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   336   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   338  IFX_EXTERN void IfxStm_enableOcdsSuspend(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   339  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   340  /** \brief Returns the module index of the selected STM module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   341   * \param stm Pointer to STM module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   342   * \return STM module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   344  IFX_EXTERN Ifx_STM *IfxStm_getAddress(IfxStm_Index stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   346  /** \brief API to get the resource index of the STM specified.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   347   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   348   * \return system timer module index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   350  IFX_EXTERN IfxStm_Index IfxStm_getIndex(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   352  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   353  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   354  /** \addtogroup IfxLld_Stm_Std_Timer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   355   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   357  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   358  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   359  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   360  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   361  /** \brief Returns the lower system timer value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   362   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   363   * \return the lower system timer value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   364   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   365  IFX_INLINE uint32 IfxStm_getLower(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   366  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   367  /** \brief Gets the TIM3 couter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   368   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   369   * \return TIM3 counter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   370   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   371  IFX_INLINE uint32 IfxStm_getOffset12Timer(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   372  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   373  /** \brief Gets the TIM4 couter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   374   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   375   * \return TIM4 counter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   377  IFX_INLINE uint32 IfxStm_getOffset16Timer(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   379  /** \brief Gets the TIM5 couter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   380   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   381   * \return TIM5 counter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   382   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   383  IFX_INLINE uint32 IfxStm_getOffset20Timer(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   384  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   385  /** \brief Gets the TIM6 couter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   386   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   387   * \return TIM6 counter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   388   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   389  IFX_INLINE uint32 IfxStm_getOffset32Timer(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   390  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   391  /** \brief Gets the TIM1 couter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   392   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   393   * \return TIM1 counter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   394   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   395  IFX_INLINE uint32 IfxStm_getOffset4Timer(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   396  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   397  /** \brief Gets the TIM2 couter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   398   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   399   * \return TIM2 counter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   400   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   401  IFX_INLINE uint32 IfxStm_getOffset8Timer(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   403  /** \brief Returns the timer value shifted right by offset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   404   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   405   * \param offset offset value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   406   * \return the lower system timer value shifted by offset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   408  IFX_INLINE uint32 IfxStm_getOffsetTimer(Ifx_STM *stm, uint8 offset);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   410  /** \brief Wait for requested time.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   411   * The macro waits in while loop for the specified time in system timer ticks.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   412   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   413   * \param ticks ticks Wait time in system timer ticks.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   414   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   415   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   416  IFX_INLINE void IfxStm_waitTicks(Ifx_STM *stm, uint32 ticks);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   417  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   418  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   419  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   420  /** \addtogroup IfxLld_Stm_Std_Comparator
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   421   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   422  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   423  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   424  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   425  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   426  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   427  /** \brief Returns the updated compare register value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   428   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   429   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   430   * \return The compare value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   431   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   432  IFX_INLINE uint32 IfxStm_getCompare(Ifx_STM *stm, IfxStm_Comparator comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   434  /** \brief Returns the number of ticks for the selected micro seconds based on the STM frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   435   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   436   * \param microSeconds Number of micro seconds that need to be converted to ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   437   * \return ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   439  IFX_INLINE sint32 IfxStm_getTicksFromMicroseconds(Ifx_STM *stm, uint32 microSeconds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   441  /** \brief Returns the number of ticks for the selected milli seconds based on the STM frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   442   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   443   * \param milliSeconds Number of micro seconds that need to be converted to ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   444   * \return ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   446  IFX_INLINE sint32 IfxStm_getTicksFromMilliseconds(Ifx_STM *stm, uint32 milliSeconds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   448  /** \brief Update the compare register value increased with given ticks.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   449   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   450   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   451   * \param ticks count for next comparison from current timer count.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   454  IFX_INLINE void IfxStm_increaseCompare(Ifx_STM *stm, IfxStm_Comparator comparator, uint32 ticks);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   456  /** \brief Update the compare register value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   457   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   458   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   459   * \param ticks count for next comparison.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   460   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   462  IFX_INLINE void IfxStm_updateCompare(Ifx_STM *stm, IfxStm_Comparator comparator, uint32 ticks);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   464  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   465  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   466  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   468  /** \brief Clear the compare interrupt flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   469   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   470   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   471   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   473  IFX_EXTERN void IfxStm_clearCompareFlag(Ifx_STM *stm, IfxStm_Comparator comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   474  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   475  /** \brief Disables the compare interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   476   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   477   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   480  IFX_EXTERN void IfxStm_disableComparatorInterrupt(Ifx_STM *stm, IfxStm_Comparator comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   482  /** \brief Enables the compare interrupt .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   483   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   484   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   485   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   486   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   487  IFX_EXTERN void IfxStm_enableComparatorInterrupt(Ifx_STM *stm, IfxStm_Comparator comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   489  /** \brief get the interrupt source pointer for the comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   490   * \param stm pointer to the STM registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   491   * \param comparator comparator selection comparator
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   492   * \return pointer to the interrupt source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   493   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   494  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxStm_getSrcPointer(Ifx_STM *stm, IfxStm_Comparator comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   495  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   496  /** \brief Initialise stm compare register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   497   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   498   * \param config pointer to configuration structure.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   499   * \return TRUE if Comparator successful otherwise FLASE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   501  IFX_EXTERN boolean IfxStm_initCompare(Ifx_STM *stm, const IfxStm_CompareConfig *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   503  /** \brief Initialise compare configuration with default values.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   504   * \param config pointer to configuration structure.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   507  IFX_EXTERN void IfxStm_initCompareConfig(IfxStm_CompareConfig *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   509  /** \brief Indicates if the compare interrupt flag is set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   510   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   511   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   512   * \return TRUE if the comparator flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   513   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   514  IFX_EXTERN boolean IfxStm_isCompareFlagSet(Ifx_STM *stm, IfxStm_Comparator comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   515  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   516  /** \brief Set the compare behavior
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   517   * \param stm pointer to System timer module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   518   * \param comparator comparator selection comparator
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   519   * \param offset Comparator start bit position
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   520   * \param size Size of compare value to compare with timer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   521   * \param interrupt Comparator Interrupt request source defined
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   522   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   523   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   524  IFX_EXTERN void IfxStm_setCompareControl(Ifx_STM *stm, IfxStm_Comparator comparator, IfxStm_ComparatorOffset offset, IfxStm_ComparatorSize size, IfxStm_ComparatorInterrupt interrupt);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   526  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   528  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   529  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   530  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   532  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   533   * \param stm pointer STM registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   534   * \param mode mode selection (enable/ disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   535   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   537  IFX_INLINE void IfxStm_setSleepMode(Ifx_STM *stm, IfxStm_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   539  /** \brief Returns the STM counter value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   540   * \return Returns the STM counter value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   541   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   542  IFX_INLINE sint64 IfxStm_now(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   543  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   544  /** \brief Get the deadline value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   545   * \param timeout timeout value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   546   * \return Return the deadline
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   547   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   548  IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   550  /** \brief Checked if deadline has occured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   551   * \param deadLine Deadline value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   552   * \return Return if deadline occured or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   553   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   554  IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   555  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   556  /** \brief Waits for a specific time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   557   * \param timeout timeout value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   558   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   560  IFX_INLINE void IfxStm_wait(sint64 timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   561  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   562  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   563  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   564  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   565  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   566  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   567   * \param stm pointer to STM registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   568   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   570  IFX_EXTERN void IfxStm_resetModule(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   572  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   573  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   574  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   575  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   576  IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   577  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   578      uint64 result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   579  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   580      result  = stm->TIM0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   581      result |= ((uint64)stm->CAP.U) << 32;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   583      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   584  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   585  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   587  IFX_INLINE uint32 IfxStm_getCompare(Ifx_STM *stm, IfxStm_Comparator comparator)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   588  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   589      return stm->CMP[comparator].B.CMPVAL;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   590  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   593  IFX_INLINE float32 IfxStm_getFrequency(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   594  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   595      IFX_UNUSED_PARAMETER(stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   596      float32 result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   598      result = IfxScuCcu_getStmFrequency();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   599  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   600      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   601  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   602  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   604  IFX_INLINE uint32 IfxStm_getLower(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   605  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   606      return stm->TIM0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   607  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   609  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   610  IFX_INLINE uint32 IfxStm_getOffset12Timer(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   611  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   612      return stm->TIM3.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   613  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   615  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   616  IFX_INLINE uint32 IfxStm_getOffset16Timer(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   617  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   618      return stm->TIM4.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   619  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   620  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   622  IFX_INLINE uint32 IfxStm_getOffset20Timer(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   623  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   624      return stm->TIM5.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   625  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   627  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   628  IFX_INLINE uint32 IfxStm_getOffset32Timer(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   629  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   630      return stm->TIM6.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   631  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   634  IFX_INLINE uint32 IfxStm_getOffset4Timer(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   635  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   636      return stm->TIM1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   637  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   640  IFX_INLINE uint32 IfxStm_getOffset8Timer(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   641  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   642      return stm->TIM2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   643  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   644  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   646  IFX_INLINE uint32 IfxStm_getOffsetTimer(Ifx_STM *stm, uint8 offset)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   647  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   648      uint64 now;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   649  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   650      now = IfxStm_get(stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   651  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   652      return (uint32)(now >> offset);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   653  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   656  IFX_INLINE sint32 IfxStm_getTicksFromMicroseconds(Ifx_STM *stm, uint32 microSeconds)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   657  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   658      sint32 freq = (sint32)IfxStm_getFrequency(stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   659      return (freq / (1000000)) * microSeconds;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   663  IFX_INLINE sint32 IfxStm_getTicksFromMilliseconds(Ifx_STM *stm, uint32 milliSeconds)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   665      sint32 freq = (sint32)IfxStm_getFrequency(stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   666      return (freq / (1000)) * milliSeconds;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   667  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   669  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   670  IFX_INLINE void IfxStm_increaseCompare(Ifx_STM *stm, IfxStm_Comparator comparator, uint32 ticks)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   671  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   672      stm->CMP[comparator].B.CMPVAL = stm->CMP[comparator].B.CMPVAL + ticks;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   673  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   674  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   675  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   676  IFX_INLINE boolean IfxStm_isModuleSuspended(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   677  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   678      Ifx_STM_OCS ocs;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   679  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   680      // read the status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   681      ocs.U = stm->OCS.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   682  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   683      // return the status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   684      return ocs.B.SUSSTA;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   685  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   686  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   687  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   688  IFX_INLINE void IfxStm_setSleepMode(Ifx_STM *stm, IfxStm_SleepMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   689  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   690      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   691      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   692      stm->CLC.B.EDIS = mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   693      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   694  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   695  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   696  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   697  IFX_INLINE void IfxStm_setSuspendMode(Ifx_STM *stm, IfxStm_SuspendMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   698  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   699      Ifx_STM_OCS ocs;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   700  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   701      /* Only if OCDS is enabled write into the OCS register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   702      if (MODULE_CBS.OSTATE.B.OEN == 1U)
	ld.bu	d15,0xf0000480
.L220:
	ld.a	a15,[a15]
.L227:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   702      if (MODULE_CBS.OSTATE.B.OEN == 1U)      (inlined)
	jz.t	d15:0,.L6
.L267:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     2   * \file IfxStm.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     3   * \brief STM  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     4   * \ingroup IfxLld_Stm
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     7   * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    41   * \defgroup IfxLld_Stm_Usage How to use the Stm driver?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    42   * \ingroup IfxLld_Stm
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    43   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    44   * The Stm Standard driver provides APIs to initialize, configure and control the Stm.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    45   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    46   * In the following sections it will be described, how to integrate the driver into the application framework.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    48   * \section IfxLld_Stm_Preparation Preparation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    49   * \subsection IfxLld_Stm_Include Include Files
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    51   * Include following header file into your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    52   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    53   * #include <Stm/Std/IfxStm.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    54   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    55   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    56   * \subsection IfxLld_Stm_Variables Variables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    57   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    58   * Declare STM variables :
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    59   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    60   * Ifx_STM *stmSfr;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    61   * IfxStm_CompareConfig stmConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    62   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    63   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    64   * \subsection IfxLld_Stm_Interrupt Interrupt Handler Installation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    65   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    66   * See also \ref IfxLld_Cpu_Irq_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    68   * Define priorities for the Interrrupt handlers. This is normally done in the Ifx_IntPrioDef.h file:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    69   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    70   * // priorities are normally defined in Ifx_IntPrioDef.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    71   * #define IFX_INTPRIO_STM0_SR0  10
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    72   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    73   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    74   * Add the interrupt service routines to your C code. They have to call the Stm interrupt handlers:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    75   * please take care in choosing number of ticks, the below example code will raise an interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    76   * evry time the specified number of ticks have been elapsed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    77   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    78   * IFX_INTERRUPT(stm0Sr0ISR, 0, IFX_INTPRIO_STM0_SR0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    79   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    80   *     IfxStm_clearCompareFlag(stmSfr, stmConfig.comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    81   *     IfxStm_increaseCompare(stmSfr, stmConfig.comparator, stmConfig.ticks);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    82   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    83   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    84   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    85   * Finally install the interrupt handlers in your initialisation function:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    86   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    87   *     // install interrupt handlers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    88   *     IfxCpu_Irq_installInterruptHandler(&stm0Sr0ISR, IFX_INTPRIO_STM0_SR0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    89   *     IfxCpu_enableInterrupts();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    90   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    91   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    92   * \subsection IfxLld_Stm_Init Module Initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    93   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    94   * The STM module can be configured to generate an interrupt at every compare match of the selected comaparator with the desired compare value, the interrupt can further be routed to other comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    95   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    96   * The module initialisation can be done as followed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    97   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    98   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	    99   *     stmSfr = &MODULE_STM0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   100   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   101   *     IfxStm_initCompareConfig(&stmConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   103   *     // configure to generate interrupt every 10 us
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   104   *     sint32 ticks = IfxStm_getTicksFromMicroseconds(10);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   105   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   106   *     stmConfig.ticks = ticks;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   107   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   108   *     stmConfig.triggerPriority = IFX_INTPRIO_STM0_SR0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   109   *     stmConfig.typeOfService = IfxSrc_Tos_cpu0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   110   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   111   *     IfxStm_initCompare(stmSfr, &stmConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   112   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   113   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   114   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   115   * Now the Stm shall generate interrupts regularly based on the configured time !
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   116   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   117   * \defgroup IfxLld_Stm_Std_Enumerations Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   118   * \ingroup IfxLld_Stm_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   119   * \defgroup IfxLld_Stm_Std_Structures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   120   * \ingroup IfxLld_Stm_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   121   * \defgroup IfxLld_Stm_Std_Module Module Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   122   * \ingroup IfxLld_Stm_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   123   * \defgroup IfxLld_Stm_Std_Timer Timer Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   124   * \ingroup IfxLld_Stm_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   125   * \defgroup IfxLld_Stm_Std_Comparator Comparator Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   126   * \ingroup IfxLld_Stm_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   127   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   128  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   129  #ifndef IFXSTM_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   130  #define IFXSTM_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   131  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   132  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   133  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   134  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   135  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   136  #include "_Impl/IfxStm_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   137  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   138  #include "Src/Std/IfxSrc.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   139  #include "IfxCbs_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   140  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   141  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   142  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   143  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   145  #ifndef IFXSTM_DEFAULT_TIMER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   146  #define IFXSTM_DEFAULT_TIMER (&MODULE_STM0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   147  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   149  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   150  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   151  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   152  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   153  /** \addtogroup IfxLld_Stm_Std_Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   154   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   155  /** \brief Comparator Id defined in   MODULE_STMx.ISCR.B.CMP0IRR(x = 0, 1, 2)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   156   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   157  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   158  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   159      IfxStm_Comparator_0 = 0,      /**< \brief Comparator Id 0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   160      IfxStm_Comparator_1           /**< \brief Comparator Id 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   161  } IfxStm_Comparator;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   163  /** \brief Comparator Interrupt request source defined in MODULE_SRC.STM.STM[index].SRx (x =0, 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   164   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   165  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   166  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   167      IfxStm_ComparatorInterrupt_ir0 = 0,  /**< \brief Select STMIR0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   168      IfxStm_ComparatorInterrupt_ir1 = 1   /**< \brief Select STMIR1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   169  } IfxStm_ComparatorInterrupt;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   170  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   171  /** \brief Comparator start bit position  defined in MODULE_STMx.CMCON.B.MSTART0(x = 0,1,2)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   172   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   173  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   174  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   175      IfxStm_ComparatorOffset_0 = 0,      /**< \brief Comparator start bit position 0 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   176      IfxStm_ComparatorOffset_1,          /**< \brief Comparator start bit position 1 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   177      IfxStm_ComparatorOffset_2,          /**< \brief Comparator start bit position 2 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   178      IfxStm_ComparatorOffset_3,          /**< \brief Comparator start bit position 3 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   179      IfxStm_ComparatorOffset_4,          /**< \brief Comparator start bit position 4 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   180      IfxStm_ComparatorOffset_5,          /**< \brief Comparator start bit position 5 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   181      IfxStm_ComparatorOffset_6,          /**< \brief Comparator start bit position 6 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   182      IfxStm_ComparatorOffset_7,          /**< \brief Comparator start bit position 7 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   183      IfxStm_ComparatorOffset_8,          /**< \brief Comparator start bit position 8 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   184      IfxStm_ComparatorOffset_9,          /**< \brief Comparator start bit position 9 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   185      IfxStm_ComparatorOffset_10,         /**< \brief Comparator start bit position 10 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   186      IfxStm_ComparatorOffset_11,         /**< \brief Comparator start bit position 11 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   187      IfxStm_ComparatorOffset_12,         /**< \brief Comparator start bit position 12 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   188      IfxStm_ComparatorOffset_13,         /**< \brief Comparator start bit position 13 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   189      IfxStm_ComparatorOffset_14,         /**< \brief Comparator start bit position 14 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   190      IfxStm_ComparatorOffset_15,         /**< \brief Comparator start bit position 15 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   191      IfxStm_ComparatorOffset_16,         /**< \brief Comparator start bit position 16 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   192      IfxStm_ComparatorOffset_17,         /**< \brief Comparator start bit position 17 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   193      IfxStm_ComparatorOffset_18,         /**< \brief Comparator start bit position 18 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   194      IfxStm_ComparatorOffset_19,         /**< \brief Comparator start bit position 19 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   195      IfxStm_ComparatorOffset_20,         /**< \brief Comparator start bit position 20 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   196      IfxStm_ComparatorOffset_21,         /**< \brief Comparator start bit position 21 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   197      IfxStm_ComparatorOffset_22,         /**< \brief Comparator start bit position 22 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   198      IfxStm_ComparatorOffset_23,         /**< \brief Comparator start bit position 23 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   199      IfxStm_ComparatorOffset_24,         /**< \brief Comparator start bit position 24 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   200      IfxStm_ComparatorOffset_25,         /**< \brief Comparator start bit position 25 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   201      IfxStm_ComparatorOffset_26,         /**< \brief Comparator start bit position 26 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   202      IfxStm_ComparatorOffset_27,         /**< \brief Comparator start bit position 27 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   203      IfxStm_ComparatorOffset_28,         /**< \brief Comparator start bit position 28 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   204      IfxStm_ComparatorOffset_29,         /**< \brief Comparator start bit position 29 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   205      IfxStm_ComparatorOffset_30,         /**< \brief Comparator start bit position 30 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   206      IfxStm_ComparatorOffset_31          /**< \brief Comparator start bit position 31 with 64 bit timer  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   207  } IfxStm_ComparatorOffset;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   208  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   209  /** \brief Size of compare value to compare with timer defined in  MODULE_STMx.CMCON.B.MSIZE0(x = 0,1,2)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   210   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   211  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   212  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   213      IfxStm_ComparatorSize_1Bit   = 0,   /**< \brief Size of compare value to compare with timer: 1 bit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   214      IfxStm_ComparatorSize_2Bits  = 1,   /**< \brief Size of compare value to compare with timer: 2 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   215      IfxStm_ComparatorSize_3Bits  = 2,   /**< \brief Size of compare value to compare with timer: 3 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   216      IfxStm_ComparatorSize_4Bits  = 3,   /**< \brief Size of compare value to compare with timer: 4 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   217      IfxStm_ComparatorSize_5Bits  = 4,   /**< \brief Size of compare value to compare with timer: 5 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   218      IfxStm_ComparatorSize_6Bits  = 5,   /**< \brief Size of compare value to compare with timer: 6 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   219      IfxStm_ComparatorSize_7Bits  = 6,   /**< \brief Size of compare value to compare with timer: 7 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   220      IfxStm_ComparatorSize_8Bits  = 7,   /**< \brief Size of compare value to compare with timer: 8 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   221      IfxStm_ComparatorSize_9Bits  = 8,   /**< \brief Size of compare value to compare with timer: 9 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   222      IfxStm_ComparatorSize_10Bits = 9,   /**< \brief Size of compare value to compare with timer: 10 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   223      IfxStm_ComparatorSize_11Bits = 10,  /**< \brief Size of compare value to compare with timer: 11 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   224      IfxStm_ComparatorSize_12Bits = 11,  /**< \brief Size of compare value to compare with timer: 12 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   225      IfxStm_ComparatorSize_13Bits = 12,  /**< \brief Size of compare value to compare with timer: 13 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   226      IfxStm_ComparatorSize_14Bits = 13,  /**< \brief Size of compare value to compare with timer: 14 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   227      IfxStm_ComparatorSize_15Bits = 14,  /**< \brief Size of compare value to compare with timer: 15 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   228      IfxStm_ComparatorSize_16Bits = 15,  /**< \brief Size of compare value to compare with timer: 16 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   229      IfxStm_ComparatorSize_17Bits = 16,  /**< \brief Size of compare value to compare with timer: 17 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   230      IfxStm_ComparatorSize_18Bits = 17,  /**< \brief Size of compare value to compare with timer: 18 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   231      IfxStm_ComparatorSize_19Bits = 18,  /**< \brief Size of compare value to compare with timer: 19 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   232      IfxStm_ComparatorSize_20Bits = 19,  /**< \brief Size of compare value to compare with timer: 20 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   233      IfxStm_ComparatorSize_21Bits = 20,  /**< \brief Size of compare value to compare with timer: 21 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   234      IfxStm_ComparatorSize_22Bits = 21,  /**< \brief Size of compare value to compare with timer: 22 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   235      IfxStm_ComparatorSize_23Bits = 22,  /**< \brief Size of compare value to compare with timer: 23 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   236      IfxStm_ComparatorSize_24Bits = 23,  /**< \brief Size of compare value to compare with timer: 24 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   237      IfxStm_ComparatorSize_25Bits = 24,  /**< \brief Size of compare value to compare with timer: 25 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   238      IfxStm_ComparatorSize_26Bits = 25,  /**< \brief Size of compare value to compare with timer: 26 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   239      IfxStm_ComparatorSize_27Bits = 26,  /**< \brief Size of compare value to compare with timer: 27 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   240      IfxStm_ComparatorSize_28Bits = 27,  /**< \brief Size of compare value to compare with timer: 28 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   241      IfxStm_ComparatorSize_29Bits = 28,  /**< \brief Size of compare value to compare with timer: 29 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   242      IfxStm_ComparatorSize_30Bits = 29,  /**< \brief Size of compare value to compare with timer: 30 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   243      IfxStm_ComparatorSize_31Bits = 30,  /**< \brief Size of compare value to compare with timer: 31 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   244      IfxStm_ComparatorSize_32Bits = 31   /**< \brief Size of compare value to compare with timer: 32 bits */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   245  } IfxStm_ComparatorSize;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   247  /** \brief Enable/disable the sensitivity of the module to sleep signal\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   248   * Definition in Ifx_STM.CLC.B.EDIS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   249   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   250  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   251  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   252      IfxStm_SleepMode_enable  = 0, /**< \brief enables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   253      IfxStm_SleepMode_disable = 1  /**< \brief disables sleep mode */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   254  } IfxStm_SleepMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   255  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   256  /** \brief OCDS Suspend Control (OCDS.SUS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   257   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   258  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   259  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   260      IfxStm_SuspendMode_none = 0,  /**< \brief No suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   261      IfxStm_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   262      IfxStm_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   263  } IfxStm_SuspendMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   265  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   268  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   271  /** \addtogroup IfxLld_Stm_Std_Structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   272   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   273  /** \brief Comparator Configuration Structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   275  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   276  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   277      IfxStm_Comparator          comparator;                /**< \brief Comparator Id defined in   MODULE_STMx.ISCR.B.CMP0IRR(x = 0, 1, 2). */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   278      IfxStm_ComparatorInterrupt comparatorInterrupt;       /**< \brief Comparator Interrupt request source defined in MODULE_SRC.STM.STM[index].SRx (x =0, 1). */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   279      IfxStm_ComparatorOffset    compareOffset;             /**< \brief Comparator start bit position  defined in MODULE_STMx.CMCON.B.MSTART0(x = 0,1,2). */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   280      IfxStm_ComparatorSize      compareSize;               /**< \brief Size of compare value to compare with timer defined in  MODULE_STMx.CMCON.B.MSIZE0(x = 0,1,2). */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   281      uint32                     ticks;                     /**< \brief count for next comparison from current timer count. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   282      Ifx_Priority               triggerPriority;           /**< \brief Interrupt priority. Range = 0 .. 255. 0 = interrupt is disabled. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   283      IfxSrc_Tos                 typeOfService;             /**< \brief Type of service. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   284  } IfxStm_CompareConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   285  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   286  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   288  /** \addtogroup IfxLld_Stm_Std_Module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   289   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   290  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   291  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   292  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   293  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   294  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   295  /** \brief Returns system timer value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   296   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   297   * \return system timer value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   299  IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   301  /** \brief Returns the system timer frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   302   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   303   * \return the system timer frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   304   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   305  IFX_INLINE float32 IfxStm_getFrequency(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   307  /** \brief Returns the module's suspend state.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   308   * TRUE :if module is suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   309   * FALSE:if module is not yet suspended.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   310   * \param stm Pointer to STM module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   311   * \return Suspend status (TRUE / FALSE)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   313  IFX_INLINE boolean IfxStm_isModuleSuspended(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   315  /** \brief Configure the Module to Hard/Soft suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   316   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   317   * \param stm Pointer to STM module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   318   * \param mode Module suspend mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   319   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   320   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   321  IFX_INLINE void IfxStm_setSuspendMode(Ifx_STM *stm, IfxStm_SuspendMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   322  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   323  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   324  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   325  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   326  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   327  /** \brief Disables the Stm module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   328   * \param stm pointer to STM registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   329   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   330   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   331  IFX_EXTERN void IfxStm_disableModule(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   332  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   333  /** \brief enable suspend by debugger.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   334   * Note: The API will write into the OCS register only if OCDS is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   335   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   336   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   338  IFX_EXTERN void IfxStm_enableOcdsSuspend(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   339  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   340  /** \brief Returns the module index of the selected STM module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   341   * \param stm Pointer to STM module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   342   * \return STM module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   344  IFX_EXTERN Ifx_STM *IfxStm_getAddress(IfxStm_Index stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   346  /** \brief API to get the resource index of the STM specified.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   347   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   348   * \return system timer module index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   350  IFX_EXTERN IfxStm_Index IfxStm_getIndex(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   352  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   353  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   354  /** \addtogroup IfxLld_Stm_Std_Timer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   355   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   357  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   358  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   359  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   360  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   361  /** \brief Returns the lower system timer value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   362   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   363   * \return the lower system timer value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   364   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   365  IFX_INLINE uint32 IfxStm_getLower(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   366  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   367  /** \brief Gets the TIM3 couter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   368   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   369   * \return TIM3 counter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   370   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   371  IFX_INLINE uint32 IfxStm_getOffset12Timer(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   372  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   373  /** \brief Gets the TIM4 couter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   374   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   375   * \return TIM4 counter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   376   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   377  IFX_INLINE uint32 IfxStm_getOffset16Timer(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   378  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   379  /** \brief Gets the TIM5 couter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   380   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   381   * \return TIM5 counter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   382   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   383  IFX_INLINE uint32 IfxStm_getOffset20Timer(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   384  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   385  /** \brief Gets the TIM6 couter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   386   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   387   * \return TIM6 counter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   388   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   389  IFX_INLINE uint32 IfxStm_getOffset32Timer(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   390  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   391  /** \brief Gets the TIM1 couter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   392   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   393   * \return TIM1 counter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   394   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   395  IFX_INLINE uint32 IfxStm_getOffset4Timer(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   396  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   397  /** \brief Gets the TIM2 couter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   398   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   399   * \return TIM2 counter value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   400   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   401  IFX_INLINE uint32 IfxStm_getOffset8Timer(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   402  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   403  /** \brief Returns the timer value shifted right by offset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   404   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   405   * \param offset offset value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   406   * \return the lower system timer value shifted by offset.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   407   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   408  IFX_INLINE uint32 IfxStm_getOffsetTimer(Ifx_STM *stm, uint8 offset);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   409  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   410  /** \brief Wait for requested time.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   411   * The macro waits in while loop for the specified time in system timer ticks.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   412   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   413   * \param ticks ticks Wait time in system timer ticks.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   414   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   415   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   416  IFX_INLINE void IfxStm_waitTicks(Ifx_STM *stm, uint32 ticks);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   417  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   418  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   419  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   420  /** \addtogroup IfxLld_Stm_Std_Comparator
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   421   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   422  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   423  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   424  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   425  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   426  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   427  /** \brief Returns the updated compare register value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   428   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   429   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   430   * \return The compare value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   431   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   432  IFX_INLINE uint32 IfxStm_getCompare(Ifx_STM *stm, IfxStm_Comparator comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   434  /** \brief Returns the number of ticks for the selected micro seconds based on the STM frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   435   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   436   * \param microSeconds Number of micro seconds that need to be converted to ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   437   * \return ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   438   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   439  IFX_INLINE sint32 IfxStm_getTicksFromMicroseconds(Ifx_STM *stm, uint32 microSeconds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   441  /** \brief Returns the number of ticks for the selected milli seconds based on the STM frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   442   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   443   * \param milliSeconds Number of micro seconds that need to be converted to ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   444   * \return ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   445   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   446  IFX_INLINE sint32 IfxStm_getTicksFromMilliseconds(Ifx_STM *stm, uint32 milliSeconds);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   447  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   448  /** \brief Update the compare register value increased with given ticks.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   449   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   450   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   451   * \param ticks count for next comparison from current timer count.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   452   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   454  IFX_INLINE void IfxStm_increaseCompare(Ifx_STM *stm, IfxStm_Comparator comparator, uint32 ticks);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   456  /** \brief Update the compare register value.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   457   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   458   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   459   * \param ticks count for next comparison.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   460   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   462  IFX_INLINE void IfxStm_updateCompare(Ifx_STM *stm, IfxStm_Comparator comparator, uint32 ticks);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   464  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   465  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   466  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   467  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   468  /** \brief Clear the compare interrupt flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   469   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   470   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   471   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   472   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   473  IFX_EXTERN void IfxStm_clearCompareFlag(Ifx_STM *stm, IfxStm_Comparator comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   474  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   475  /** \brief Disables the compare interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   476   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   477   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   478   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   479   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   480  IFX_EXTERN void IfxStm_disableComparatorInterrupt(Ifx_STM *stm, IfxStm_Comparator comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   481  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   482  /** \brief Enables the compare interrupt .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   483   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   484   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   485   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   486   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   487  IFX_EXTERN void IfxStm_enableComparatorInterrupt(Ifx_STM *stm, IfxStm_Comparator comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   489  /** \brief get the interrupt source pointer for the comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   490   * \param stm pointer to the STM registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   491   * \param comparator comparator selection comparator
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   492   * \return pointer to the interrupt source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   493   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   494  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxStm_getSrcPointer(Ifx_STM *stm, IfxStm_Comparator comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   495  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   496  /** \brief Initialise stm compare register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   497   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   498   * \param config pointer to configuration structure.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   499   * \return TRUE if Comparator successful otherwise FLASE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   500   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   501  IFX_EXTERN boolean IfxStm_initCompare(Ifx_STM *stm, const IfxStm_CompareConfig *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   502  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   503  /** \brief Initialise compare configuration with default values.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   504   * \param config pointer to configuration structure.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   507  IFX_EXTERN void IfxStm_initCompareConfig(IfxStm_CompareConfig *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   509  /** \brief Indicates if the compare interrupt flag is set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   510   * \param stm pointer to System timer module registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   511   * \param comparator comparator selection comparator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   512   * \return TRUE if the comparator flag is set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   513   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   514  IFX_EXTERN boolean IfxStm_isCompareFlagSet(Ifx_STM *stm, IfxStm_Comparator comparator);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   515  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   516  /** \brief Set the compare behavior
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   517   * \param stm pointer to System timer module registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   518   * \param comparator comparator selection comparator
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   519   * \param offset Comparator start bit position
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   520   * \param size Size of compare value to compare with timer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   521   * \param interrupt Comparator Interrupt request source defined
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   522   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   523   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   524  IFX_EXTERN void IfxStm_setCompareControl(Ifx_STM *stm, IfxStm_Comparator comparator, IfxStm_ComparatorOffset offset, IfxStm_ComparatorSize size, IfxStm_ComparatorInterrupt interrupt);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   525  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   526  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   528  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   529  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   530  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   531  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   532  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   533   * \param stm pointer STM registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   534   * \param mode mode selection (enable/ disable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   535   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   536   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   537  IFX_INLINE void IfxStm_setSleepMode(Ifx_STM *stm, IfxStm_SleepMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   538  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   539  /** \brief Returns the STM counter value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   540   * \return Returns the STM counter value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   541   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   542  IFX_INLINE sint64 IfxStm_now(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   543  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   544  /** \brief Get the deadline value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   545   * \param timeout timeout value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   546   * \return Return the deadline
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   547   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   548  IFX_INLINE sint64 IfxStm_getDeadLine(sint64 timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   550  /** \brief Checked if deadline has occured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   551   * \param deadLine Deadline value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   552   * \return Return if deadline occured or not
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   553   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   554  IFX_INLINE boolean IfxStm_isDeadLine(sint64 deadLine);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   555  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   556  /** \brief Waits for a specific time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   557   * \param timeout timeout value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   558   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   560  IFX_INLINE void IfxStm_wait(sint64 timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   561  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   562  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   563  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   564  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   565  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   566  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   567   * \param stm pointer to STM registers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   568   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   570  IFX_EXTERN void IfxStm_resetModule(Ifx_STM *stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   572  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   573  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   574  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   575  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   576  IFX_INLINE uint64 IfxStm_get(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   577  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   578      uint64 result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   579  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   580      result  = stm->TIM0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   581      result |= ((uint64)stm->CAP.U) << 32;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   582  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   583      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   584  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   585  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   587  IFX_INLINE uint32 IfxStm_getCompare(Ifx_STM *stm, IfxStm_Comparator comparator)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   588  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   589      return stm->CMP[comparator].B.CMPVAL;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   590  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   591  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   592  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   593  IFX_INLINE float32 IfxStm_getFrequency(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   594  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   595      IFX_UNUSED_PARAMETER(stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   596      float32 result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   598      result = IfxScuCcu_getStmFrequency();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   599  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   600      return result;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   601  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   602  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   603  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   604  IFX_INLINE uint32 IfxStm_getLower(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   605  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   606      return stm->TIM0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   607  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   609  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   610  IFX_INLINE uint32 IfxStm_getOffset12Timer(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   611  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   612      return stm->TIM3.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   613  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   615  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   616  IFX_INLINE uint32 IfxStm_getOffset16Timer(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   617  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   618      return stm->TIM4.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   619  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   620  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   622  IFX_INLINE uint32 IfxStm_getOffset20Timer(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   623  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   624      return stm->TIM5.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   625  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   626  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   627  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   628  IFX_INLINE uint32 IfxStm_getOffset32Timer(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   629  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   630      return stm->TIM6.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   631  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   633  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   634  IFX_INLINE uint32 IfxStm_getOffset4Timer(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   635  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   636      return stm->TIM1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   637  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   638  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   639  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   640  IFX_INLINE uint32 IfxStm_getOffset8Timer(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   641  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   642      return stm->TIM2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   643  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   644  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   645  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   646  IFX_INLINE uint32 IfxStm_getOffsetTimer(Ifx_STM *stm, uint8 offset)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   647  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   648      uint64 now;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   649  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   650      now = IfxStm_get(stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   651  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   652      return (uint32)(now >> offset);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   653  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   656  IFX_INLINE sint32 IfxStm_getTicksFromMicroseconds(Ifx_STM *stm, uint32 microSeconds)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   657  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   658      sint32 freq = (sint32)IfxStm_getFrequency(stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   659      return (freq / (1000000)) * microSeconds;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   660  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   661  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   663  IFX_INLINE sint32 IfxStm_getTicksFromMilliseconds(Ifx_STM *stm, uint32 milliSeconds)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   664  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   665      sint32 freq = (sint32)IfxStm_getFrequency(stm);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   666      return (freq / (1000)) * milliSeconds;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   667  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   668  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   669  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   670  IFX_INLINE void IfxStm_increaseCompare(Ifx_STM *stm, IfxStm_Comparator comparator, uint32 ticks)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   671  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   672      stm->CMP[comparator].B.CMPVAL = stm->CMP[comparator].B.CMPVAL + ticks;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   673  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   674  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   675  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   676  IFX_INLINE boolean IfxStm_isModuleSuspended(Ifx_STM *stm)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   677  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   678      Ifx_STM_OCS ocs;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   679  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   680      // read the status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   681      ocs.U = stm->OCS.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   682  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   683      // return the status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   684      return ocs.B.SUSSTA;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   685  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   686  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   687  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   688  IFX_INLINE void IfxStm_setSleepMode(Ifx_STM *stm, IfxStm_SleepMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   689  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   690      uint16 passwd = IfxScuWdt_getCpuWatchdogPassword();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   691      IfxScuWdt_clearCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   692      stm->CLC.B.EDIS = mode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   693      IfxScuWdt_setCpuEndinit(passwd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   694  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   695  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   696  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   697  IFX_INLINE void IfxStm_setSuspendMode(Ifx_STM *stm, IfxStm_SuspendMode mode)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   698  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   699      Ifx_STM_OCS ocs;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   700  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   701      /* Only if OCDS is enabled write into the OCS register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   702      if (MODULE_CBS.OSTATE.B.OEN == 1U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   703      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   704          // remove protection and configure the suspend mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   705          ocs.B.SUS_P      = 1;
	extr.u	d15,d15,#24,#8
.L268:
	or	d15,#16
.L451:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   706          ocs.B.SUS        = mode;
	insert	d15,d15,#1,#0,#4
.L269:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   707          stm->OCS.U       = ocs.U;
	insert	d15,d15,d15,#24,#8
	st.w	[a15]232,d15
.L452:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   708          stm->OCS.B.SUS_P = 0;
	ld.bu	d15,[a15]235
.L270:
	insert	d15,d15,#0,#4,#1
	st.b	[a15]235,d15

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Stm\Std\IfxStm.h	   702      if (MODULE_CBS.OSTATE.B.OEN == 1U)      (inlined)
.L6:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   149  #ifdef RT_USING_HEAP
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   150      /* initialize heap */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   151      rt_system_heap_init(__HEAP, __HEAP_END);
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   152  #endif
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   153  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   154      /* Set-up the timer interrupt. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   155      rt_hw_systick_init();
	call	rt_hw_systick_init
.L453:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   156      /* USART driver initialization is open by default */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   157  #ifdef RT_USING_SERIAL
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   158      rt_hw_usart_init();
	call	rt_hw_usart_init
.L454:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   159  #endif
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   160  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   161      /* Set the shell console output device */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   162  #ifdef RT_USING_CONSOLE
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   163      // rt_console_set_device(RT_CONSOLE_DEVICE_NAME);
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   164  #endif
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   165  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   166      /* Board underlying hardware initialization */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   167  #ifdef RT_USING_COMPONENTS_INIT
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   168      rt_components_board_init();
	call	rt_components_board_init
.L455:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   169  #endif
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   170  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   171      IfxSrc_init(GPSR[TRICORE_CPU_ID], (IfxSrc_Tos)TRICORE_CPU_ID, 1);
	mfcr	d15,#65052
.L456:
	and	d15,#15
	lea	a2,GPSR
.L457:
	addsc.a	a15,a2,d15,#2
	ld.a	a15,[a15]
.L458:
	mfcr	d15,#65052
	and	d0,d15,#15
.L231:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     2   * \file IfxSrc.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     3   * \brief SRC  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     4   * \ingroup IfxLld_Src
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     7   * \copyright Copyright (c) 2016 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    41   * \defgroup IfxLld_Src SRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    42   * \addtogroup IfxLld_Src
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    43   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    44   * \defgroup IfxLld_Src_Usage How to use Service Request Mechanism?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    45   * \addtogroup IfxLld_Src_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    46   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    48   * For Aurix controller peripherals that can generate service requests is connected to one
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    49   * or more Service Request Nodes (SRNs) in the central Interrupt Router(IR) module. Refer to Controller User Manual for more details\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    51   * IfxSrc driver provides the APIs to configure and control service requests. Refer \ref IfxLld_Src_Usage for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    52   * details of these APIs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    53   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    54   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    55   * \section Ifx_Src_UsageInit Initialize the Service Request Node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    56   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    57   * Service request node is initialized to configure the following,\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    58   * 1) Route the interrupt trigger to service provider, which are:\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    59   *  __a. One of the available CPUs or\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    60   *  __b. DMA controller\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    61   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    62   * 2) Priority of CPU Interrupt or DMA Trigger.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    63   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    64   * For Interrupt or DMA to be correctly triggered, following steps are to be done in the user code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    65   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    66   * \subsection Ifx_Src_UsageInitStep1 Step1: Configure the Node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    68   * User must configure the service request node in the application / driver files.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    69   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    70   * \subsection Ifx_Src_UsageInitStep2 Step2: Enable the Trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    71   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    72   * Enable the service request node to connect the trigger event from the hardware to service provider.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    73   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    74   * Example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    75   * Following example show the configuration for STM0 Service request 0 trigger configured to trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    76   * CPU1 with the priority specified by IFX_INTPRIO_STM0 (from the example at IfxCpu_Irq)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    77   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    78   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    79   * //file: myApplication.c
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    80   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    81   * #include "Ifx_IntPrioDef.h" // to get the priority numbers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    82   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    83   * void myDriverInitFunction(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    84   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    85   *    // driver init code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    86   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    87   *    // Step1: Call the function to route the trigger from for SRC_STM0_SR0 to CPU1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    88   *    // and priority specified at Ifx_IntPrioDef.h globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    89   *    IfxSrc_init(&MODULE_SRC.STM.STM[0].SR[0], IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    90   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    91   *    // Step2: Enable the service request node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    92   *    IfxSrc_enable(&MODULE_SRC.STM.STM[0].SR[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    93   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    94   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    95   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    96   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    97   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    99   * \defgroup IfxLld_Src_Std_Service_Request Service Request Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   100   * \ingroup IfxLld_Src_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   101   * \defgroup IfxLld_Src_Std_Module Module Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   102   * \ingroup IfxLld_Src_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   103   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   105  #ifndef IFXSRC_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   106  #define IFXSRC_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   107  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   108  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   109  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   110  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   111  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   112  #include "_Impl/IfxSrc_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   113  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   114  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   115  /** \addtogroup IfxLld_Src_Std_Service_Request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   116   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   117  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   118  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   119  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   120  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   122  /** \brief Resets the overrun flag of the Service Request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   123   * \param src pointer to the Service Request Control register which the overrun flag should be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   124   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   126   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   127   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   129  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   131  /** \brief Resets a specific interrupt service by software.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   132   * \param src pointer to the Service Request Control register which the request should be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   135   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   136   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   137   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   138  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   139  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   140  /** \brief Gets the current overrun status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   141   * \param src pointer to the Service Request Control register for which the overrun status should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   142   * \return current service request control overrun status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   143   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   144   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   147  IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   149  /** \brief Gets the current request status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   150   * \param src pointer to the Service Request Control register for which the request status should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   151   * \return current service request control request status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   152   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   153   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   154   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   156  IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   158  /** \brief Requests a specific interrupt service by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   159   * \param src pointer to the Service Request Control register which the interrupt has to be requested.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   160   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   161   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   162   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   163   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   164   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   165  IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   167  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   169  /** \addtogroup IfxLld_Src_Std_Module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   170   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   171  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   172  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   173  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   174  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   176  /** \brief DeInitializes the service request control register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   177   * \param src pointer to the Service Request Control register which should be deinitialised.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   178   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   179   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   180   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   181   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   182   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   183  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   184  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   185  /** \brief Disables a specific interrupt service request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   186   * \param src pointer to the Service Request Control register for which the interrupt has to be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   187   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   188   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   189   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   190   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   192  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   194  /** \brief Enables a specific interrupt service request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   195   * \param src pointer to the Service Request Control register for which the interrupt has to be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   196   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   197   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   198   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   199   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   200   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   201  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   202  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   203  /** \brief Initializes the service request control register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   204   * \param src pointer to the Service Request Control register which should be initialised.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   205   * \param typOfService type of interrupt service provider.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   206   * \param priority Interrupt priority.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   207   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   208   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   209   * Get the peripheral service control register which request need to be serviced and assign this service to any of service providers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   210   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   211   * //define the interrupt priority
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   212   * #define IFXASCLIN0_TX_INTPRIO 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   213   * //get the service request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   214   * volatile Ifx_SRC_SRCR *src = IfxAsclin_getSrcPointerRx( &MODULE_ASCLIN0 );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   215   * //initlaise the service request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   216   * IfxSrc_init( src, IfxSrc_Tos_cpu0, IFXASCLIN0_TX_INTPRIO );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   217   * // enable the service
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   218   * IfxSrc_enable( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   219   * //check for service request flags and clear if they occur
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   220   * if ( IfxSrc_isRequested( src ) == TRUE )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   221   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   222   *    IfxSrc_clearRequest( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   223   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   224   * if ( IfxSrc_isOverrun( src ) == TRUE )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   225   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   226   *      IfxSrc_clearOverrun( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   227   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   228   * // Atlast deinitialise the service control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   229   * IfxSrc_deinit( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   230   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   231   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   233  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   235  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   237  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   238  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   239  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   241  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   242  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   243      src->B.IOVCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   244  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   245  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   247  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   248  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   249      src->B.CLRR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   250  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   253  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   254  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   255      src->U = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   256  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   259  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   261      src->B.SRE = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   262  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   265  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   266  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   267      src->B.SRE = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   268  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   269  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   271  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   272  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   273      src->B.SRPN = priority;
	mov	d15,#1
	st.b	[a15],d15
.L459:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   274      src->B.TOS  = typOfService;
	ld.bu	d15,[a15]1
.L460:
	insert	d15,d15,d0,#3,#3
	st.b	[a15]1,d15
.L241:
	ld.bu	d15,[a15]3
.L461:
	or	d15,#2
	st.b	[a15]3,d15
.L232:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   172      IfxSrc_enable(GPSR[TRICORE_CPU_ID]);
	mfcr	d15,#65052
	and	d15,#15
.L462:
	addsc.a	a15,a2,d15,#2
	ld.a	a15,[a15]
.L246:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     2   * \file IfxSrc.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     3   * \brief SRC  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     4   * \ingroup IfxLld_Src
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     7   * \copyright Copyright (c) 2016 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    41   * \defgroup IfxLld_Src SRC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    42   * \addtogroup IfxLld_Src
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    43   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    44   * \defgroup IfxLld_Src_Usage How to use Service Request Mechanism?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    45   * \addtogroup IfxLld_Src_Usage
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    46   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    48   * For Aurix controller peripherals that can generate service requests is connected to one
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    49   * or more Service Request Nodes (SRNs) in the central Interrupt Router(IR) module. Refer to Controller User Manual for more details\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    51   * IfxSrc driver provides the APIs to configure and control service requests. Refer \ref IfxLld_Src_Usage for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    52   * details of these APIs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    53   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    54   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    55   * \section Ifx_Src_UsageInit Initialize the Service Request Node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    56   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    57   * Service request node is initialized to configure the following,\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    58   * 1) Route the interrupt trigger to service provider, which are:\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    59   *  __a. One of the available CPUs or\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    60   *  __b. DMA controller\n
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    61   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    62   * 2) Priority of CPU Interrupt or DMA Trigger.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    63   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    64   * For Interrupt or DMA to be correctly triggered, following steps are to be done in the user code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    65   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    66   * \subsection Ifx_Src_UsageInitStep1 Step1: Configure the Node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    68   * User must configure the service request node in the application / driver files.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    69   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    70   * \subsection Ifx_Src_UsageInitStep2 Step2: Enable the Trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    71   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    72   * Enable the service request node to connect the trigger event from the hardware to service provider.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    73   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    74   * Example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    75   * Following example show the configuration for STM0 Service request 0 trigger configured to trigger
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    76   * CPU1 with the priority specified by IFX_INTPRIO_STM0 (from the example at IfxCpu_Irq)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    77   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    78   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    79   * //file: myApplication.c
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    80   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    81   * #include "Ifx_IntPrioDef.h" // to get the priority numbers
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    82   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    83   * void myDriverInitFunction(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    84   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    85   *    // driver init code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    86   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    87   *    // Step1: Call the function to route the trigger from for SRC_STM0_SR0 to CPU1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    88   *    // and priority specified at Ifx_IntPrioDef.h globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    89   *    IfxSrc_init(&MODULE_SRC.STM.STM[0].SR[0], IfxSrc_Tos_cpu1, IFX_INTPRIO_STM0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    90   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    91   *    // Step2: Enable the service request node
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    92   *    IfxSrc_enable(&MODULE_SRC.STM.STM[0].SR[0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    93   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    94   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    95   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    96   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    97   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	    99   * \defgroup IfxLld_Src_Std_Service_Request Service Request Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   100   * \ingroup IfxLld_Src_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   101   * \defgroup IfxLld_Src_Std_Module Module Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   102   * \ingroup IfxLld_Src_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   103   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   105  #ifndef IFXSRC_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   106  #define IFXSRC_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   107  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   108  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   109  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   110  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   111  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   112  #include "_Impl/IfxSrc_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   113  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   114  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   115  /** \addtogroup IfxLld_Src_Std_Service_Request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   116   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   117  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   118  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   119  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   120  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   122  /** \brief Resets the overrun flag of the Service Request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   123   * \param src pointer to the Service Request Control register which the overrun flag should be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   124   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   126   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   127   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   129  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   131  /** \brief Resets a specific interrupt service by software.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   132   * \param src pointer to the Service Request Control register which the request should be cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   135   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   136   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   137   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   138  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   139  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   140  /** \brief Gets the current overrun status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   141   * \param src pointer to the Service Request Control register for which the overrun status should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   142   * \return current service request control overrun status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   143   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   144   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   146   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   147  IFX_INLINE boolean IfxSrc_isOverrun(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   148  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   149  /** \brief Gets the current request status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   150   * \param src pointer to the Service Request Control register for which the request status should be returned.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   151   * \return current service request control request status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   152   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   153   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   154   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   156  IFX_INLINE boolean IfxSrc_isRequested(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   158  /** \brief Requests a specific interrupt service by software
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   159   * \param src pointer to the Service Request Control register which the interrupt has to be requested.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   160   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   161   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   162   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   163   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   164   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   165  IFX_INLINE void IfxSrc_setRequest(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   167  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   168  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   169  /** \addtogroup IfxLld_Src_Std_Module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   170   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   171  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   172  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   173  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   174  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   176  /** \brief DeInitializes the service request control register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   177   * \param src pointer to the Service Request Control register which should be deinitialised.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   178   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   179   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   180   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   181   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   182   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   183  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   184  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   185  /** \brief Disables a specific interrupt service request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   186   * \param src pointer to the Service Request Control register for which the interrupt has to be disabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   187   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   188   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   189   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   190   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   191   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   192  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   194  /** \brief Enables a specific interrupt service request.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   195   * \param src pointer to the Service Request Control register for which the interrupt has to be enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   196   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   197   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   198   * Usage example: see \ref IfxSrc_init
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   199   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   200   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   201  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   202  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   203  /** \brief Initializes the service request control register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   204   * \param src pointer to the Service Request Control register which should be initialised.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   205   * \param typOfService type of interrupt service provider.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   206   * \param priority Interrupt priority.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   207   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   208   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   209   * Get the peripheral service control register which request need to be serviced and assign this service to any of service providers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   210   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   211   * //define the interrupt priority
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   212   * #define IFXASCLIN0_TX_INTPRIO 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   213   * //get the service request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   214   * volatile Ifx_SRC_SRCR *src = IfxAsclin_getSrcPointerRx( &MODULE_ASCLIN0 );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   215   * //initlaise the service request
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   216   * IfxSrc_init( src, IfxSrc_Tos_cpu0, IFXASCLIN0_TX_INTPRIO );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   217   * // enable the service
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   218   * IfxSrc_enable( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   219   * //check for service request flags and clear if they occur
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   220   * if ( IfxSrc_isRequested( src ) == TRUE )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   221   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   222   *    IfxSrc_clearRequest( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   223   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   224   * if ( IfxSrc_isOverrun( src ) == TRUE )
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   225   * {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   226   *      IfxSrc_clearOverrun( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   227   * }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   228   * // Atlast deinitialise the service control
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   229   * IfxSrc_deinit( src );
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   230   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   231   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   232   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   233  IFX_INLINE void IfxSrc_init(volatile Ifx_SRC_SRCR *src, IfxSrc_Tos typOfService, Ifx_Priority priority);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   235  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   237  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   238  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   239  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   241  IFX_INLINE void IfxSrc_clearOverrun(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   242  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   243      src->B.IOVCLR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   244  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   245  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   247  IFX_INLINE void IfxSrc_clearRequest(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   248  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   249      src->B.CLRR = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   250  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   253  IFX_INLINE void IfxSrc_deinit(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   254  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   255      src->U = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   256  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   257  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   258  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   259  IFX_INLINE void IfxSrc_disable(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   261      src->B.SRE = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   262  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   265  IFX_INLINE void IfxSrc_enable(volatile Ifx_SRC_SRCR *src)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   266  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Src\Std\IfxSrc.h	   267      src->B.SRE = 1;
	ld.bu	d15,[a15]1
.L463:
	or	d15,#4
	st.b	[a15]1,d15
.L247:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   173  }
	ret
.L217:
	
__rt_hw_board_init_function_end:
	.size	rt_hw_board_init,__rt_hw_board_init_function_end-rt_hw_board_init
.L114:
	; End of function
	
	.sdecl	'.text.cpuport.rt_hw_context_switch',code,cluster('rt_hw_context_switch')
	.sect	'.text.cpuport.rt_hw_context_switch'
	.align	2
	
	.global	rt_hw_context_switch

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   174  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   175  void rt_hw_context_switch(rt_ubase_t from, rt_ubase_t to)
; Function rt_hw_context_switch
.L33:
rt_hw_context_switch:	.type	func
	mov	d15,d4
.L272:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   176  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   177      rt_base_t level;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   178  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   179      level = rt_hw_interrupt_disable();
	mov	d8,d5
	call	rt_hw_interrupt_disable
.L271:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   180      rt_interrupt_from_thread = (*( (unsigned long *)from ));
	fcall	.cocofun_2
.L277:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   181      rt_interrupt_to_thread = (*((unsigned long *)to));
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   182      to = RT_NULL;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   183      rt_hw_interrupt_enable(level);
	call	rt_hw_interrupt_enable
.L278:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   184      /* 在保存完线程 CSA LinkWord 后，判断这次线程切换是否是 systick 触发的线程切换。*/
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   185      if(rt_thread_switch_interrupt_flag == 0)
	ld.w	d15,rt_thread_switch_interrupt_flag
.L364:
	jne	d15,#0,.L7
.L365:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   186      {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   187           /* 如果不是 systick 引发的线程切换，那么就触发一个线程切换的异常函数，这个异常函数里会真正做线程切换的事情。*/
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   188          __syscall( 0 );
	syscall	#0
.L7:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   189      }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   190  }
	ret
.L175:
	
__rt_hw_context_switch_function_end:
	.size	rt_hw_context_switch,__rt_hw_context_switch_function_end-rt_hw_context_switch
.L69:
	; End of function
	
	.sdecl	'.text.cpuport..cocofun_2',code,cluster('.cocofun_2')
	.sect	'.text.cpuport..cocofun_2'
	.align	2
; Function .cocofun_2
.L35:
.cocofun_2:	.type	func
; Function body .cocofun_2, coco_iter:0
	mov.a	a15,d15
.L274:
	mov	d4,d2
.L276:
	ld.w	d15,[a15]
.L273:
	mov.a	a15,d8
.L275:
	st.w	rt_interrupt_from_thread,d15
.L473:
	ld.w	d15,[a15]
.L474:
	st.w	rt_interrupt_to_thread,d15
.L475:
	fret
.L124:
	; End of function
	.sdecl	'.text.cpuport.rt_hw_context_switch_interrupt',code,cluster('rt_hw_context_switch_interrupt')
	.sect	'.text.cpuport.rt_hw_context_switch_interrupt'
	.align	2
	
	.global	rt_hw_context_switch_interrupt

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   191  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   192  void rt_hw_context_switch_interrupt(rt_ubase_t from, rt_ubase_t to)
; Function rt_hw_context_switch_interrupt
.L37:
rt_hw_context_switch_interrupt:	.type	func
	mov	d15,d4
.L280:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   193  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   194      rt_base_t level;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   195  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   196      level = rt_hw_interrupt_disable();
	mov	d8,d5
	call	rt_hw_interrupt_disable
.L279:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   197      rt_interrupt_from_thread = (*( (unsigned long *)from ));
	fcall	.cocofun_2
.L281:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   198      rt_interrupt_to_thread = (*((unsigned long *)to));
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   199      rt_hw_interrupt_enable(level);
	call	rt_hw_interrupt_enable
.L282:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   200      /* 在保存完线程 CSA LinkWord 后,会给 SETR 位置 1，这样会触发一个异常陷阱函数。在这个陷阱函数里才会去真正的切换线程。*/
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   201      GPSR[TRICORE_CPU_ID]->B.SETR = 1;
	mfcr	d15,#65052
	fcall	.cocofun_3
.L283:
	or	d15,#4
	st.b	[a15],d15
.L375:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   202  }
	ret
.L184:
	
__rt_hw_context_switch_interrupt_function_end:
	.size	rt_hw_context_switch_interrupt,__rt_hw_context_switch_interrupt_function_end-rt_hw_context_switch_interrupt
.L79:
	; End of function
	
	.sdecl	'.text.cpuport.rt_hw_context_switch_to',code,cluster('rt_hw_context_switch_to')
	.sect	'.text.cpuport.rt_hw_context_switch_to'
	.align	2
	
	.global	rt_hw_context_switch_to

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   203  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   204  void rt_hw_context_switch_to(rt_ubase_t to)
; Function rt_hw_context_switch_to
.L39:
rt_hw_context_switch_to:	.type	func

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   205  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   206      rt_base_t level;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   207  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   208      level = rt_hw_interrupt_disable();
	mov	d15,d4
	call	rt_hw_interrupt_disable
.L285:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   209      rt_interrupt_to_thread = (*((unsigned long *)to));
	mov.a	a15,d15
.L288:
	mov	d8,d2
.L289:
	ld.w	d15,[a15]
.L287:
	st.w	rt_interrupt_to_thread,d15
.L370:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   210      __syscall( 0 );
	syscall	#0
.L286:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   211      rt_hw_interrupt_enable(level);
	mov	d4,d8
.L290:
	j	rt_hw_interrupt_enable
.L181:
	
__rt_hw_context_switch_to_function_end:
	.size	rt_hw_context_switch_to,__rt_hw_context_switch_to_function_end-rt_hw_context_switch_to
.L74:
	; End of function
	
	.sdecl	'.text.cpuport.rt_hw_stack_init',code,cluster('rt_hw_stack_init')
	.sect	'.text.cpuport.rt_hw_stack_init'
	.align	2
	
	.global	rt_hw_stack_init

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   212     /* Will not get here. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   213  }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   214  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   215  /**
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   216   * This function will initialize thread stack
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   217   *
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   218   * @param tentry the entry of thread
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   219   * @param parameter the parameter of entry
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   220   * @param stack_addr the beginning stack address
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   221   * @param texit the function will be called when thread exit
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   222   *
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   223   * @return stack address
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   224   */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   225  rt_uint8_t *rt_hw_stack_init(void       *tentry,
; Function rt_hw_stack_init
.L41:
rt_hw_stack_init:	.type	func
	sub.a	a10,#16
.L291:
	st.a	[a10]4,a4
.L293:
	st.a	[a10],a5
.L294:
	mov.aa	a12,a6
.L295:
	mov.aa	a13,a7
.L296:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   226                               void       *parameter,
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   227                               rt_uint8_t *stack_addr,
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   228                               void       *texit)
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   229  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   230      UpperCtx_Ptr upperCtxPtr = NULL;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   231      LowCtx_Ptr   lowCtxPtr = NULL;
	mov.a	a14,#0
.L297:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   232  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   233      rt_hw_interrupt_disable();
	call	rt_hw_interrupt_disable
.L292:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   234      {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   235          /* DSync to ensure that buffering is not a problem. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   236          __dsync();
	dsync
.L327:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   237  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   238          /* Consume two free CSAs. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   239          upperCtxPtr = LINKWORD_TO_ADDRESS(__mfcr(CPU_FCX));
	mfcr	d15,#65080
	movh	d0,#15
	and	d15,d0
	sha	d15,d15,#12
	mfcr	d1,#65080
	insert	d1,d1,#0,#16,#16
	sha	d1,#6
.L299:
	or	d15,d1
.L328:
	mov.a	a15,d15
.L301:
	st.a	[a10]8,a15
.L300:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   240  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   241          if( NULL != upperCtxPtr )
	mov.a	a2,#0
.L329:
	jeq.a	a2,a15,.L8
.L330:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   242          {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   243              /* The Lower Links to the Upper. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   244              lowCtxPtr = LINKWORD_TO_ADDRESS( upperCtxPtr->_PCXI );
	ld.w	d1,[a15]
	and	d0,d1
	sh	d15,d0,#12
	insert	d0,d1,#0,#16,#16
	sh	d0,#6
.L303:
	or	d15,d0
.L298:
	mov.a	a14,d15
.L8:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   245          }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   246  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   247          /* Check that we have successfully reserved two CSAs. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   248          if( ( NULL != lowCtxPtr ) && ( NULL != upperCtxPtr ))
	movh	d8,#15
	jeq.a	a2,a14,.L9
.L331:
	jeq.a	a2,a15,.L10
.L332:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   249          {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   250              /* Remove the two consumed CSAs from the free CSA list. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   251              __disable();
	disable
.L333:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   252              __dsync();
	dsync
.L334:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   253              __mtcr( CPU_FCX, lowCtxPtr->_PCXI );
	ld.w	d15,[a14]
.L335:
	mtcr	#65080,d15
	isync
.L336:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   254              __isync();
	isync
.L337:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   255              __enable();
	enable
.L338:
	j	.L11
.L10:
.L9:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   256          }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   257          else
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   258          {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   259              /* Simply trigger a context list depletion trap. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   260              __svlcx();
	svlcx
.L11:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   261          }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   262      }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   263      rt_hw_interrupt_enable((rt_base_t)RT_NULL);
	mov	d4,#0
	call	rt_hw_interrupt_enable
.L339:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   264  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   265      memset( upperCtxPtr, 0, TRICORE_NUM_WORDS_IN_CSA * sizeof( unsigned long ) );
	mov	d4,#0
	ld.a	a4,[a10]8
.L302:
	mov	d5,#64
	call	memset
.L304:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   266      upperCtxPtr->_A11 = ( unsigned long* )texit;
	st.a	[a15]12,a13
.L340:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   267      /* 对应 A10 寄存器; 这个寄存器用于保存栈指针 */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   268      upperCtxPtr->_A10 = ( unsigned long* )stack_addr;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   269      /* 对应 PSW 寄存器；这个寄存器用于保存当前线程的初始状态*/
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   270      upperCtxPtr->_PSW = TRICORE_SYSTEM_PROGRAM_STATUS_WORD;
	mov	d15,#2303
	st.a	[a15]8,a12
.L341:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   271  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   272      /* Clear the lower CSA. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   273      memset( lowCtxPtr, 0, TRICORE_NUM_WORDS_IN_CSA * sizeof( unsigned long ) );
	mov	d4,#0
	st.w	[a15]4,d15
.L305:
	mov	d5,#64
	mov.aa	a4,a14
.L306:
	call	memset
.L307:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   274      /* 对应 A4 寄存器; 用于保存函数的入参 */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   275      lowCtxPtr->_A4 = ( unsigned long *) parameter;
	ld.a	a15,[a10]
.L308:
	st.a	[a14]32,a15
.L342:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   276      /* 对应 A11 寄存器; 用于保存 PC 指针。*/
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   277      lowCtxPtr->_PC = ( unsigned long *) tentry;
	ld.a	a15,[a10]4
.L309:
	st.a	[a14]4,a15
.L343:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   278      /* PCXI pointing to the Upper context. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   279      lowCtxPtr->_PCXI = ( TRICORE_INITIAL_PCXI_UPPER_CONTEXT_WORD | ( unsigned long ) ADDRESS_TO_LINKWORD( upperCtxPtr ) );
	ld.a	a15,[a10]8
.L310:
	mov.d	d0,a15
.L311:
	sh	d15,d0,#-12
	extr.u	d0,d0,#6,#16
.L312:
	and	d15,d8
.L344:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   280      /* Save the link to the CSA in the top of stack. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   281      *((unsigned long * )stack_addr) = (unsigned long) ADDRESS_TO_LINKWORD( lowCtxPtr );
	or	d15,d0
	mov.d	d0,a14
.L313:
	insert	d15,d15,#3,#20,#2
	st.w	[a14],d15
.L345:
	sh	d15,d0,#-12
	and	d8,d15
	extr.u	d15,d0,#6,#16
.L346:
	or	d8,d15
	st.w	[a12],d8
.L347:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   282      /* DSync to ensure that buffering is not a problem. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   283      __dsync();
	dsync
.L348:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   284  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   285      return stack_addr;
	mov.aa	a2,a12
.L314:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   286  }
	ret
.L145:
	
__rt_hw_stack_init_function_end:
	.size	rt_hw_stack_init,__rt_hw_stack_init_function_end-rt_hw_stack_init
.L54:
	; End of function
	
	.sdecl	'.text.cpuport.get_clk',code,cluster('get_clk')
	.sect	'.text.cpuport.get_clk'
	.align	2
	
	.global	get_clk

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   287  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   288  void get_clk(void)
; Function get_clk
.L43:
get_clk:	.type	func

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
	mfcr	d15,#65068
.L192:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
	disable
.L380:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
	nop
.L190:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   289  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   290  	disableInterrupts();
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   291  	//禁用看门狗
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   292      IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());
	call	IfxScuWdt_getCpuWatchdogPassword
	mov	d4,d2
	call	IfxScuWdt_disableCpuWatchdog
.L381:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   293      IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());
	call	IfxScuWdt_getSafetyWatchdogPassword
	mov	d4,d2
	call	IfxScuWdt_disableSafetyWatchdog
.L382:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   294  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   295      //获取时钟频率，便于查看当前系统运行频率
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   296      g_AppCpu0.info.pllFreq = IfxScuCcu_getPllFrequency();
	movh.a	a15,#@his(g_AppCpu0)
	lea	a15,[a15]@los(g_AppCpu0)
.L383:
	call	IfxScuCcu_getPllFrequency
.L384:
	st.w	[a15]8,d2
.L195:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     2   * \file IfxCpu.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     3   * \brief CPU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     4   * \ingroup IfxLld_Cpu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    42   * \defgroup IfxLld_Cpu_Std_Core Cpu Core Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    43   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    44   * \defgroup IfxLld_Cpu_Std_Interrupt Interrupt Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    45   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    46   * \defgroup IfxLld_Cpu_Std_Cache Cache Management Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    47   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    48   * \defgroup IfxLld_Cpu_Std_PerformanceCounter Performance Counter Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    49   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    50   * \defgroup IfxLld_Cpu_Std_Synchronization Synchronization Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    51   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    52   * \defgroup IfxLld_Cpu_Std_Utility Cpu Utility Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    53   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    54   * \defgroup IfxLld_Cpu_Std_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    55   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    56   * \defgroup IfxLld_Cpu_Std_DataStructures Data Structures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    57   * \ingroup IfxLld_Cpu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    58   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    59  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    60  #ifndef IFXCPU_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    61  #define IFXCPU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    62  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    63  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    64  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    65  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    67  #include "_Impl/IfxCpu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    68  #include "IfxSrc_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    69  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    70  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    71  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    72  #include "_Utilities/Ifx_Assert.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    73  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    74  #include "Scu/Std/IfxScuCcu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    76  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    77  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    78  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    79  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    80  /** \brief Convert local DSPR address to global DSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    81   * Use this macro to convert a local DSPR address (in segment 0xd00.....) to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    82   * a global DSPR address (in segment 0x700....., 0x600....., 0x500..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    83   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    84   * Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    85   *  \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    86   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &sourceBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    87   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_DSPR(IfxCpu_getCoreId(), &destinationBuffer[i][0]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    88   *  \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    89   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    90  #define IFXCPU_GLB_ADDR_DSPR(cpu, address) ((((((unsigned)(address) & 0xF0000000) == 0xD0000000) ? ((((unsigned)(address) & 0x000fffff) | 0x70000000) - ((cpu) * 0x10000000)) : (unsigned)(address))))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    91  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    92  /** \brief Convert local PSPR address to global PSPR address which can be accessed from the SRI bus.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    93   * Use this macro to convert a local PSPR address (in segment 0xc......) to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    94   * a global PSPR address (in segment 0x701....., 0x601....., 0x501..... downwards) depending on
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    95   * the CPU number.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    96   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    97   *   Example usage:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    98   *   \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	    99   *     dmaChConfig.sourceAddress      = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &sourceBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   100   *     dmaChConfig.destinationAddress = IFXCPU_GLB_ADDR_PSPR(IfxCpu_getCoreId(), &destinationBufferInPsprMemory);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   101   *   \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   102   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   103  #define IFXCPU_GLB_ADDR_PSPR(cpu, address) ((((unsigned)(address) & 0x000fffff) | 0x70100000) - ((cpu) * 0x10000000))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   105  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   106  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   107  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   108  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   109  /** \brief Lock type Spin lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   110   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   111  typedef unsigned int IfxCpu_spinLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   112  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   113  /** \brief Lock type Mutex lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   114   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   115  typedef unsigned int IfxCpu_mutexLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   116  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   117  /** \brief Event used for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   118   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   119  typedef unsigned int IfxCpu_syncEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   120  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   121  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   122  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   123  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   124  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   125  /** \addtogroup IfxLld_Cpu_Std_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   126   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   127  /** \brief Enumeration for the Cpu mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   129  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   130  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   131      IfxCpu_CoreMode_halt,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   132      IfxCpu_CoreMode_run,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   133      IfxCpu_CoreMode_idle,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   134      IfxCpu_CoreMode_sleep,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   135      IfxCpu_CoreMode_stby,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   136      IfxCpu_CoreMode_unknown
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   137  } IfxCpu_CoreMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   138  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   139  /** \brief Performance conunter modes
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   140   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   141  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   142  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   143      IfxCpu_CounterMode_normal = 0,  /**< \brief Normal counter mode:the counter increments on their respective triggers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   144      IfxCpu_CounterMode_task   = 1   /**< \brief Normal counter mode:additional gating control from the debug unit which allows the data gathered in the performance counters to be filtered by some specific criteria */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   145  } IfxCpu_CounterMode;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   146  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   147  /** \brief Overlay Address Mask: determines the overlay block size and the bits used for address comparison and translation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   148   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   149  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   150  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   151      IfxCpu_OverlayAddressMask_32byte  = 0xFFF,  /**< \brief 32 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   152      IfxCpu_OverlayAddressMask_64byte  = 0xFFE,  /**< \brief 64 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   153      IfxCpu_OverlayAddressMask_128byte = 0xFFC,  /**< \brief 128 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   154      IfxCpu_OverlayAddressMask_256byte = 0xFF8,  /**< \brief 256 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   155      IfxCpu_OverlayAddressMask_512byte = 0xFF0,  /**< \brief 512 byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   156      IfxCpu_OverlayAddressMask_1KB     = 0xFE0,  /**< \brief 1K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   157      IfxCpu_OverlayAddressMask_2KB     = 0xFC0,  /**< \brief 2K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   158      IfxCpu_OverlayAddressMask_4KB     = 0xF80,  /**< \brief 4K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   159      IfxCpu_OverlayAddressMask_8KB     = 0xF00,  /**< \brief 8K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   160      IfxCpu_OverlayAddressMask_16KB    = 0xE00,  /**< \brief 16K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   161      IfxCpu_OverlayAddressMask_32KB    = 0xC00,  /**< \brief 32K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   162      IfxCpu_OverlayAddressMask_64KB    = 0x800,  /**< \brief 64K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   163      IfxCpu_OverlayAddressMask_128KB   = 0x0     /**< \brief 128K byte block size Mask */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   164  } IfxCpu_OverlayAddressMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   165  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   166  /** \brief Selects overlay memory used for redirection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   167   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   168  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   169  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   170      IfxCpu_OverlayMemorySelect_core0DsprPspr = 0,  /**< \brief Redirection to Core 0 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   171      IfxCpu_OverlayMemorySelect_core1DsprPspr = 1,  /**< \brief Redirection to Core 1 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   172      IfxCpu_OverlayMemorySelect_core2DsprPspr = 2,  /**< \brief Redirection to Core 2 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   173      IfxCpu_OverlayMemorySelect_core3DsprPspr = 3,  /**< \brief Redirection to Core 3 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   174      IfxCpu_OverlayMemorySelect_core4DsprPspr = 4,  /**< \brief Redirection to Core 4 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   175      IfxCpu_OverlayMemorySelect_core5DsprPspr = 5,  /**< \brief Redirection to Core 5 DSPR/PSPR memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   176      IfxCpu_OverlayMemorySelect_lmu           = 8,  /**< \brief Redirection to LMU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   177      IfxCpu_OverlayMemorySelect_emem          = 9,  /**< \brief Redirection to EMEM memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   178      IfxCpu_OverlayMemorySelect_ebu           = 10  /**< \brief Redirection to EBU memory */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   179  } IfxCpu_OverlayMemorySelect;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   180  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   181  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   182  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   183      IfxCpu_ResetStatus_notCpuReset   = 0,  /**< \brief No Kernel Reset was executed */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   184      IfxCpu_ResetStatus_cpuResetBySmu = 1,  /**< \brief Kernel reset was requested by hardware since last clear (SMU) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   185      IfxCpu_ResetStatus_cpuResetBySw  = 2   /**< \brief Kernel reset was requested by software since last clear (by writing KRST0.RST=1 and KRST1.RST=1) */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   186  } IfxCpu_ResetStatus;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   187  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   188  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   189  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   190  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   191  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   192  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   193  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   194  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   195   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   196  /** \brief counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   197   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   198  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   199  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   200      uint32  counter;        /**< \brief Counter value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   201      boolean overlfow;       /**< \brief sticky overlfow */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   202  } IfxCpu_Counter;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   204  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   205  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   206  /** \addtogroup IfxLld_Cpu_Std_DataStructures
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   207   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   208  /** \brief Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   209   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   210  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   211  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   212      IfxCpu_Counter instruction;       /**< \brief Instruction counter */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   213      IfxCpu_Counter clock;             /**< \brief CPU clock counter */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   214      IfxCpu_Counter counter1;          /**< \brief Multi counter 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   215      IfxCpu_Counter counter2;          /**< \brief Multi counter 2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   216      IfxCpu_Counter counter3;          /**< \brief Multi counter 3 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   217  } IfxCpu_Perf;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   218  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   219  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   221  /** \addtogroup IfxLld_Cpu_Std_Core
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   222   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   224  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   225  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   226  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   228  /** \brief API to get the address for CPU HW module register memory map
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   229   * \param cpu Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   230   * \return CPU module register address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   231   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   232  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   233  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   234  /** \brief API to get core id of the CPU of the caller.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   235   * Caution: Core id of the cpu's may not be continguous and shouldn't be used to index cpu.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   236   * Use IfxCpu_getCoreIndex() to get cpu no.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   237   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   238   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   239  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   240  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   241  /** \brief API to get cpu index of the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   242   * Note: This api can be used whereever cpu no/index is needed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   243   * \return Resource index of the CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   244   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   245  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   246  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   247  /** \brief API to initialize the context save area of the CPU where this is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   248   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   249   * This API can initialize the CSA of the host CPU where this API is called. This API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   250   * shall not be used to initialize the CSA of another CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   251   * \param csaBegin Pointer to start of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   252   * \param csaEnd Pointer to end of context save area
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   253   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   255  IFX_INLINE void IfxCpu_initCSA(uint32 *csaBegin, uint32 *csaEnd);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   257  /** \brief Set/Clear safety task identifier (PSW.S) on current CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   258   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   259   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   260  IFX_INLINE void IfxCpu_setSafetyTaskIdentifier(boolean safetyId);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   261  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   262  /** \brief Triggers Software Reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   263   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   264   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   265  IFX_INLINE void IfxCpu_triggerSwReset(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   266  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   267  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   268  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   269  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   270  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   271  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   272   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   273   * \return Current mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   275  IFX_EXTERN IfxCpu_CoreMode IfxCpu_getCoreMode(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   277  /** \brief API to get current mode of CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   278   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   279   * \return Resource index of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   280   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   281  IFX_EXTERN IfxCpu_ResourceCpu IfxCpu_getIndex(Ifx_CPU *cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   283  /** \brief API to set mode of the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   284   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   285   * \param mode CPU mode to be set by this API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   286   * \return Success status of the activity (setting the core mode).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   287   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   288   * \retval FALSE: If the activity can't be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   290  IFX_EXTERN boolean IfxCpu_setCoreMode(Ifx_CPU *cpu, IfxCpu_CoreMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   292  /** \brief API to set the program counter for the CPU specified.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   293   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   294   * \param programCounter Program counter value to be set
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   295   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   296   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   297   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   299  IFX_EXTERN boolean IfxCpu_setProgramCounter(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   301  /** \brief API to set the program counter for the CPU specified and start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   302   * \param cpu Pointer to the CPU HW module (register memory map)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   303   * \param programCounter Program counter value to start the CPU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   304   * \return success status of the activity (setting program counter value).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   305   * \retval TRUE: If the activity successfully be performed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   306   * \retval FALSE: If the activity can't be performed
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   307   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   308  IFX_EXTERN boolean IfxCpu_startCore(Ifx_CPU *cpu, uint32 programCounter);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   309  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   310  /** \brief To request reset of a particular core, given by coreId
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   311   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   312   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   313  IFX_EXTERN void IfxCpu_triggerCpuReset(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   314  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   315  /** \brief Retrieve the cause of reset(no reset, hardware(SMU) or software) since last clear by reading KRST0.RSTSTAT and clear it.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   316   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   317  IFX_EXTERN IfxCpu_ResetStatus IfxCpu_getCpuResetStatus(IfxCpu_ResourceCpu coreIndex);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   319  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   321  /** \addtogroup IfxLld_Cpu_Std_Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   322   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   323  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   324  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   325  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   326  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   327  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   328  /** \brief API to get the status of global interrupt enable (ICR.IE) for the CPU which calls this API
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   329   * This API provides the status of CPU where this API is called
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   330   * \return Status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   331   * \retval TRUE: Global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   332   * \retval FALSE: Global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   333   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   334  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   335  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   336  /** \brief API to disable global interrupt and return the previous status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   337   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   338   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   339   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   340   * \return Previous status of global interrupt enable bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   341   * \retval TRUE: Previously, global interrupts enabled.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   342   * \retval FALSE: Previously, global interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   343   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   344  IFX_INLINE boolean IfxCpu_disableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   346  /** \brief API to enable global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   347   * This API simply enables the global interrupt.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   348   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   349   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   350  IFX_INLINE void IfxCpu_enableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   351  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   352  /** \brief Disable the Global Interrupt
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   353   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   354   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   355  IFX_INLINE void IfxCpu_forceDisableInterrupts(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   356  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   357  /** \brief API to restore global interrupt with that of the passed parameter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   358   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   359   * This API can be used only to disable the global interrupts of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   360   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   361   * \param enabled Previous status of the global interrupt enable bit
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   362   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   363   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   364  IFX_INLINE void IfxCpu_restoreInterrupts(boolean enabled);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   365  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   366  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   367  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   368  /** \addtogroup IfxLld_Cpu_Std_Cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   369   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   370  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   371  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   372  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   373  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   374  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   375  /** \brief API to enable/ disable the data cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   376   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   377   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   378   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   379   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   380   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   381   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   382  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   383  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   384  /** \brief API to enable/ disable the instruction cacheability for selected segments
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   385   * With this API cacheability for one or more segment can be enabled/disabled for the CPU core where this API is called.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   386   * \Note This API is to be called only if the PCACHE or DCACHE are not enabled before
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   387   * \param segmentNumberMask Mask where bitfield 0 represents segment 0 and bitfield 16 represent segment F.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   388   * \param enable TRUE: to enable the cacheability for selected segment, FALSE: to disable.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   389   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   390   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   391  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   393  /** \brief API to invalidate the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   394   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   395   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   396  IFX_INLINE void IfxCpu_invalidateProgramCache(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   397  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   398  /** \brief API to determine if an address is in a cachable or non-cachable Flash/LMU section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   399   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   400   * \return Status TRUE/FALSE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   401   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   402  IFX_INLINE boolean IfxCpu_isAddressCachable(void *address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   403  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   404  /** \brief API to enable or bypass the data cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   405   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   406   * This API can be used only to enable or bypass the data cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   407   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   408   * \param enable Command to enable or bypass the data cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   409   * TRUE: Enable the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   410   * FALSE: Bypass the data cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   411   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   412   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   413  IFX_INLINE void IfxCpu_setDataCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   414  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   415  /** \brief API to enable or bypass the program cache for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   416   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   417   * This API can be used only to enable or bypass the program cache of caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   418   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   419   * \param enable Command to enable or bypass the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   420   * TRUE: Enable the program cache.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   421   * FALSE: Bypass the program cache
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   422   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   423   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   424  IFX_INLINE void IfxCpu_setProgramCache(boolean enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   425  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   426  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   427  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   428  /** \addtogroup IfxLld_Cpu_Std_PerformanceCounter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   429   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   430  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   431  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   432  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   433  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   434  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   435  /** \brief API to read the clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   436   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   437   * This API can be used to read clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   438   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   439   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   440   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   441  IFX_INLINE uint32 IfxCpu_getClockCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   442  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   443  /** \brief API to get sticky overflow bit of clock counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   444   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   445   * This API can be used to get sticky overflow bit of clock counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   446   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   447   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   448   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   449   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   450   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   451   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   452   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   453   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   454  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   455  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   456  /** \brief API to read the instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   457   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   458   * This API can be used to read instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   459   * used for this activity towards other CPUs
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   460   * \return Counter value. 0 to 0x7FFFFFFF.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   461   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   462  IFX_INLINE uint32 IfxCpu_getInstructionCounter(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   464  /** \brief API to get sticky overflow bit of Instruction counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   465   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   466   * This API can be used to get sticky overflow bit of Instruction counter of only the caller CPU.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   467   * It cannot be used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   468   * This API also clears the sticky overflow after the read. While reading the sticky bit this API disables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   469   * the counter for short time. (otherwise sticky bit cannot be cleared). This API shall be used after
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   470   * reading the counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   471   * \return Status of sticky overflow bit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   472   * \retval TRUE: Sticky overflow bit is set.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   473   * \retval FALSE: Sticky overflow bit is reset
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   474   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   475  IFX_INLINE boolean IfxCpu_getInstructionCounterStickyOverflow(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   477  /** \brief API to read the performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   478   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   479   * \return counter value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   480   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   481  IFX_INLINE uint32 IfxCpu_getPerformanceCounter(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   482  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   483  /** \brief API to get sticky overflow bit of performance counter for the CPU, which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   484   * This is generic function to get sticky overflow bit of any performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   485   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   486   * \return Status
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   487   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   488  IFX_INLINE boolean IfxCpu_getPerformanceCounterStickyOverflow(uint16 address);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   489  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   490  /** \brief Reset and start instruction, clock and multi counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   491   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   492   * Reset and start CCNT, ICNT, M1CNT, M2CNT, M3CNT. the overflow bits are cleared.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   493   * \param mode Counter mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   494   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   495   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   496  IFX_INLINE void IfxCpu_resetAndStartCounters(IfxCpu_CounterMode mode);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   497  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   498  /** \brief API to enable or disable performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   499   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   500   * This API can be used to enable or disable performance counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   501   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   502   * \param enable enable Command to enable or disable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   503   * TRUE: Enable the performance counter.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   504   * FALSE: Disable the performance counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   505   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   506   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   507  IFX_INLINE void IfxCpu_setPerformanceCountersEnableBit(uint32 enable);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   508  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   509  #if !((defined(__cplusplus)) && (defined(__TASKING__)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   510  /** \brief Stop instruction and clock counters, return their values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   511   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   512   * Stop CCNT, ICNT, M1CNT, M2CNT, M3CNT and return their values;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   513   *  \Note The CCTRL is reset to 0, for more accurate measurements and has to be initialized again before strating the next performance measurement.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   514   * \return Performance counter result
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   515   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   516  IFX_INLINE IfxCpu_Perf IfxCpu_stopCounters(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   517  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   518  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   519  /** \brief API to update clock counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   520   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   521   * This API can be used to update clock counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   522   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   523   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   524   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   525   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   526  IFX_INLINE void IfxCpu_updateClockCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   527  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   528  /** \brief API to update Instruction counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   529   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   530   * This API can be used to update Instruction counter of only the caller CPU. It cannot be
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   531   * used for this activity towards other CPUs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   532   * \param count Counter value to be updated. 0 to 0x7FFFFFFF
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   533   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   534   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   535  IFX_INLINE void IfxCpu_updateInstructionCounter(uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   537  /** \brief API to update performance counter for the CPU which calls this API.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   538   * This is generic function to update any of the performance counters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   539   * \param address Address
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   540   * \param count Count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   541   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   542   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   543  IFX_INLINE void IfxCpu_updatePerformanceCounter(uint32 address, uint32 count);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   544  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   545  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   546  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   547  /** \addtogroup IfxLld_Cpu_Std_Synchronization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   548   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   549  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   550  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   551  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   552  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   553  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   554  /** \brief API to acquire the mutex (binary semaphore).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   555   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   556   * This API can be used to acquire/get the mutex.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   557   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   558   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   559   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   560   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   561   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   562   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   563   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   564   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   565   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   566   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   567   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   568   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   569   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   570  IFX_EXTERN boolean IfxCpu_acquireMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   571  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   572  /** \brief API to unlock the mutex .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   573   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   574   * This API can be used to unlock the previously acquired mutex
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   575   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   576   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   577   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   578   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   579   *    IfxCpu_mutexLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   580   *    boolean flag = IfxCpu_acquireMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   581   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   582   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   583   *      IfxCpu_releaseMutex(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   584   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   585   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   586   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   587   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   588  IFX_EXTERN void IfxCpu_releaseMutex(IfxCpu_mutexLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   589  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   590  /** \brief API to unlock the resource .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   591   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   592   * This API can be used to unlock the previously acquired lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   593   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   594   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   595   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   596  IFX_EXTERN void IfxCpu_resetSpinLock(IfxCpu_spinLock *lock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   597  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   598  /** \brief API to lock the resource in spin mode with the given timeout.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   599   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   600   * This API can be used to spin lock for the lock for the given timeout period.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   601   * \param lock lock pointer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   602   * \param timeoutCount loop counter value used for timeout to acquire lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   603   * \return TRUE : lock acquired successfully. FALSE: Failed to acquire the lock
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   604   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   605   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   606   *    IfxCpu_spinLock resourceLock;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   607   *    boolean flag = IfxCpu_setSpinLock(&resourceLock, 0xFFFF);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   608   *    if (flag){
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   609   *      // critical section
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   610   *      IfxCpu_resetSpinLock(&resourceLock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   611   *    }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   612   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   613   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   615  IFX_EXTERN boolean IfxCpu_setSpinLock(IfxCpu_spinLock *lock, uint32 timeoutCount);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   616  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   617  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   619  /** \addtogroup IfxLld_Cpu_Std_Utility
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   620   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   621  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   622  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   623  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   624  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   625  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   626  /** \brief This function disables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   627   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   628   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   629   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   631  IFX_EXTERN void IfxCpu_disableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   632  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   633  /** \brief This function configures and enables the overlay memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   634   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   635   * The data overlay provides the capability to redirect selected data accesses to the Overlay memory. Data accesses made by the TriCore to Program Flash, Online Data Acquisition space, or EBU space can be redirected. Overlay memory may be located in the Local Memory (if present), in the Emulation Memory (Emulation Device only), or in the EBU space,or in the DPSR/PSPR memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   636   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   637   * How the overlay Memory works?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   638   * Any data access to segment 8 or segment A is checked against all the activated overlay blocks. For each activated overlay block, address bits 27..5 are compared with the target base address , and this bit-wise comparison is qualified by the content of address mask. Address bits participate in the comparison if the corresponding mask bits are set to one. The access is redirected, if all the address bits selected by mask equal to the corresponding bits in target address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   639   * The address for redirection is constructed as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   640   * 1. Address bits 31..22 are set according to the overlay memory selection and the cache-ability of the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   641   * 2. For address bits 21..5:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   642   * - If the corresponding address mask bit is set, the address bit value is taken from overlay base address .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   643   * - If the corresponding address mask bit is cleared, the address bit value is taken from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   644   * 3. Address bits 4..0 are always taken directly from the original address.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   645   * If there is no redirection, the original address is used to perform the access.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   646   * Target address ranges for activated overlay blocks should not overlap or an exception may occur.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   647   * \param cpu Core no
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   648   * \param overlayBlock Overlay Block
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   649   * \param overlayMemorySelect Overlay Memory Select
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   650   * \param overlayAddressMask overlay Address Mask
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   651   * \param targetBaseAddress Target Base address (i.e Source address to be re-directed)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   652   * \param overlayBaseAddress Overlay or Re-directed Base address (Bits 21..5 of the base address the overlay memory block in the overlay memory)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   653   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   654   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   655  IFX_EXTERN void IfxCpu_enableOverlayBlock(IfxCpu_ResourceCpu cpu, uint16 overlayBlock, IfxCpu_OverlayMemorySelect overlayMemorySelect, IfxCpu_OverlayAddressMask overlayAddressMask, uint32 targetBaseAddress, uint32 overlayBaseAddress);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   656  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   657  /** \brief API to get random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   658   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   659   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   660   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   661  IFX_EXTERN uint32 IfxCpu_getRandomValue(uint32 *seed);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   662  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   663  /** \brief API to get random value with in the range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   664   * \param seed Pointer to seed value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   665   * \param min minimum range value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   666   * \param max maximum range value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   667   * \return random value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   668   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   669  IFX_EXTERN uint32 IfxCpu_getRandomValueWithinRange(uint32 *seed, uint32 min, uint32 max);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   670  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   671  /** \brief This function waits till all the cores have set their corresponding bits in the event. This function along with
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   672   * IfxCpu_emitEvent() are used to achieve the synchronisation between the configured cores. By default
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   673   * "IFXCPU_CFG_ALLCORE_DONE" macro defined for all the cores. In case the user wants to check for
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   674   * synchronisation among the required cores, the macro can be redefined with the value accroing to the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   675   * CORE_ID register.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   676   * The IfxCpu_emitEvent() is to be used in the Main functions of the Cores where the user wants to check for synchronisation.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   677   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   678   * e.g:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   679   * 1. Check for synchronisation between core 0 and core 5
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   680   * # define 0x41U
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   681   * 2. Check for synchronisation between core 0 to core 5
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   682   * # define 0x5FU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   683   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   684   * Note:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   685   * Core id values read from CORE_ID register will be as shown below. The value indicates the position of the bit needs to be set while building the macro.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   686   * Core 0: 0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   687   * Core 1: 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   688   * Core 2: 2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   689   * Core 3: 3
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   690   * Core 4: 4
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   691   * Core 5: 6
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   692   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   693   * \param timeoutMilliSec timeout in millisec
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   694   * \return Error condition
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   695   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   696   * The functions IfxCpu_waitEvent and IfxCpu_emitEvent are used to achieve synchronisation between all cores (i.e individual cores wait till all cores have reached the synchronisation point). The IfxCpu_waitEvent returns 1 incase a timeout occurs.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   697   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   698   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   699   * // Global variable. preferably located in  shared memory.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   700   * IfxCpu_syncEvent event;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   701   * boolean errorVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   703   * // Below code should be repeated in Each core
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   704   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   705   * // Upon reaching Synchonisation point
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   706   * IfxCpu_emitEvent(&event);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   707   * errorVal = IfxCpu_waitEvent(&event, timeoutMilliSec); // timeoutMilliSec is timeout value to wait
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   708   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   709   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   710   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   711   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   712  IFX_EXTERN boolean IfxCpu_waitEvent(IfxCpu_syncEvent *event, uint32 timeoutMilliSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   713  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   714  /** \brief This function sets a bit corresponding to the core in the event.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   715   * \param event Synchronous Event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   716   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   717   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   718   * A coding example can be found in \ref IfxCpu_waitEvent
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   720   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   721  IFX_EXTERN void IfxCpu_emitEvent(IfxCpu_syncEvent *event);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   722  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   723  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   724  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   725  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   726  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   727  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   728  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   729  /** \brief Sets all CPUs to Idle mode except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   730   * \param masterCpu Master CPU Index- All except this will be set to Idle Mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   731   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   733  IFX_EXTERN void IfxCpu_setAllIdleExceptMasterCpu(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   735  /** \brief Disables interrupts for all CPUs except the Master CPU,index of which is given as the parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   736   * \param masterCpu Master CPU Index- All except this will have their interrupts disabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   737   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   738   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   739  IFX_EXTERN void IfxCpu_disableInterruptsAllExceptMaster(IfxCpu_ResourceCpu masterCpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   740  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   741  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   742  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   743  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   744  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   745  IFX_INLINE boolean IfxCpu_areInterruptsEnabled(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   746  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   747      Ifx_CPU_ICR reg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   748      reg.U = __mfcr(CPU_ICR);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   749      return reg.B.IE != 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   750  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   751  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   752  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   753  IFX_INLINE boolean IfxCpu_disableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   754  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   755      boolean enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   756      enabled = IfxCpu_areInterruptsEnabled();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   757      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   758      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   759      return enabled;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   760  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   762  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   763  IFX_INLINE void IfxCpu_enableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   764  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   765      __enable();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   766  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   768  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   769  IFX_INLINE void IfxCpu_enableSegmentSpecificDataAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   770  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   771      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   772      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   773      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   774      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   775  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   776      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   777      /*In PMA0 Segment-C and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   778      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xC);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   780      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   781      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   782          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   783      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   784  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   785      cpu_pmaVal = __mfcr(CPU_PMA0);                                                              /* Read the CPU_PMA0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   787      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   788  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   789      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   790      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   791      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   792      /*Write to PMA0 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   793      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   794      __mtcr(CPU_PMA0, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   795      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   796      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   797  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   799  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   800  IFX_INLINE void IfxCpu_enableSegmentSpecificInstructionAccessCacheability(uint16 segmentNumberMask, boolean enable)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   801  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   802      uint32 cpu_pmaVal;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   803      uint16 checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   804      uint32 coreIndex   = IfxCpu_getCoreIndex();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   805      uint16 wdtPassword = IfxScuWdt_getCpuWatchdogPasswordInline(&MODULE_SCU.WDTCPU[coreIndex]);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   806  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   807      /*resolve the restrictions*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   808      /*In PMA1 Segment-D and Segment[7-CoreID] must have the same value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   809      checkRestrictionMask = ((uint16)1 << (7 - coreIndex)) | ((uint16)1 << 0xD);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   811      if ((segmentNumberMask & checkRestrictionMask) != 0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   812      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   813          segmentNumberMask |= checkRestrictionMask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   814      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   816      cpu_pmaVal = __mfcr(CPU_PMA1);                                                              /* Read the CPU_PMA1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   817  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   818      cpu_pmaVal = enable ? (cpu_pmaVal | segmentNumberMask) : (cpu_pmaVal & ~segmentNumberMask); /* enable or disable the corresponding bitfield */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   819  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   820      /*The CPU_PMA registers are ENDINIT protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   821      IfxScuWdt_clearCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   822      /*When changing the value of the CPU_PMAx registers both the instruction and data caches should be invalidated*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   823      /*Write to PMA1 register for selecting the cacheability for data cache*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   824      __dsync();      /* DSYNC instruction should be executed immediately prior to the MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   825      __mtcr(CPU_PMA1, cpu_pmaVal);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   826      __isync();      /* ISYNC instruction executed immediately following MTCR */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   827      IfxScuWdt_setCpuEndinitInline(&MODULE_SCU.WDTCPU[coreIndex], wdtPassword);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   828  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   829  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   830  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   831  IFX_INLINE void IfxCpu_forceDisableInterrupts(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   832  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   833      __disable();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   834      __nop();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   835  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   836  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   838  IFX_INLINE Ifx_CPU *IfxCpu_getAddress(IfxCpu_ResourceCpu cpu)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   839  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   840      Ifx_CPU *module;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   841  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   842      if (cpu < IfxCpu_ResourceCpu_none)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   843      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   844          module = (Ifx_CPU *)IfxCpu_cfg_indexMap[cpu].module;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   845      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   846      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   847      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   848          module = NULL_PTR;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   849      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   850  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   851      return module;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   852  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   853  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   854  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   855  IFX_INLINE uint32 IfxCpu_getClockCounter(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   856  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   857      return IfxCpu_getPerformanceCounter(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   858  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   859  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   860  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   861  IFX_INLINE boolean IfxCpu_getClockCounterStickyOverflow(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   862  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   863      return IfxCpu_getPerformanceCounterStickyOverflow(CPU_CCNT);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   864  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   865  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   866  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   867  IFX_INLINE IfxCpu_Id IfxCpu_getCoreId(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   868  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   869      Ifx_CPU_CORE_ID reg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   870      reg.U = __mfcr(CPU_CORE_ID);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   871      return (IfxCpu_Id)reg.B.CORE_ID;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   872  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   873  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   874  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   875  IFX_INLINE IfxCpu_ResourceCpu IfxCpu_getCoreIndex(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   876  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   877      uint32 reg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   878      reg = __mfcr(CPU_CORE_ID);
	mfcr	d15,#65052
.L315:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Cpu\Std\IfxCpu.h	   879      return (IfxCpu_ResourceCpu)__minu(reg, 5);
	min.u	d15,d15,#5
.L316:
	extr.u	d4,d15,#0,#8

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   297      g_AppCpu0.info.cpuFreq = IfxScuCcu_getCpuFrequency(IfxCpu_getCoreIndex());
	call	IfxScuCcu_getCpuFrequency
.L196:
	st.w	[a15]4,d2
.L385:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   298      g_AppCpu0.info.sysFreq = IfxScuCcu_getSpbFrequency();
	call	IfxScuCcu_getSpbFrequency
.L386:
	st.w	[a15],d2
.L200:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     2   * \file IfxScuCcu.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     3   * \brief SCU  basic functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     4   * \ingroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     6   * \version iLLD_1_0_1_12_0
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     8   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    42   * \defgroup IfxLld_Scu SCU
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    43   * \addtogroup IfxLld_Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    44   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    45   * \defgroup IfxLld_ScuCcu How to use the Scu Clock driver?
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    46   * \addtogroup IfxLld_ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    47   * \{
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    48   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    49   * The Scu Clock control unit driver provides a default configuration for pll and Clock initialisation and set of peripheral clock configuration functions.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    50   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    51   * In the following sections it will be described, how to integrate the driver into the application framework.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    52   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    53   * \section IfxLld_ScuCcu_Std_Preparation Preparation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    54   * \subsection IfxLld_ScuCcu_Std_Include Include Files
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    55   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    56   * Include following header file into your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    57   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    58   * #include <Scu/Std/IfxScuCcu.h>
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    59   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    60   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    61   * \subsection IfxLld_ScuCcu_Std_Variables Variables
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    62   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    63   * Declare the Clock Configuration variables in your C code:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    64   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    65   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    66   * // used globally
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    67   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    68   * // configuration for the PLL  steps
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    69   * static IfxScuCcu_PllStepsConfig IfxScuCcu_testPllConfigSteps[] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    70   *     IFXSCU_CFG_PLL_STEPS
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    71   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    72   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    73   * static const IfxScuCcu_FlashWaitstateConfig IfxScuCcu_defaultFlashWaitstateConfig = IFXSCU_CFG_FLASH_WAITSTATE;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    74   * // Default configuration for the Clock Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    75   * IfxScuCcu_Config                      IfxScuCcu_testClockConfig = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    76   *     // IfxScuCcu_InitialStepConfig: Configuration of first step which is same as internal osc frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    77   *     IFXSCU_CFG_PLL_INITIAL_STEP,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    78   *     //IfxScuCcu_PllThrottleConfig: Configuration of PLL throttling.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    79   *     {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    80   *         sizeof(IfxScuCcu_defaultPllConfigSteps) / sizeof(IfxScuCcu_PllStepConfig),
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    81   *         IfxScuCcu_defaultPllConfigSteps
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    82   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    83   *     IFXSCU_CFG_CLK_DISTRIBUTION,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    84   *     &IfxScuCcu_defaultFlashWaitstateConfig,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    85   *     &IfxScuCcu_defaultModConfig
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    86   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    87   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    88   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    89   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    90   * \subsection IfxLld_ScuCcu_Std_Init Module Initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    91   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    92   * The module initialisation can be done in the same function. Here an example:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    93   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    94   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    95   *        // standard PLL & clock initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    96   *         IfxScuCcu_init(&IfxScuCcu_testClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    97   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    98   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	    99   *    The SYS PLL, PER PLL1 , PLL2 and clocks are now initialised based on the XTAL and PLL values configured in Ifx_Cfg.h and are ready for use now!
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   100   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   101   * Alternately the PLL and clocks can be initialised using below method which provides greater control on the configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   102   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   103   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   104   * static const IfxScuCcu_PllStepConfig IfxScuCcu_defaultPllConfigSteps[] = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   105   *     {                   //Step 0 Config: 150MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   106   *         (4 - 1),        //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   107   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   108   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   109   *     {                   //Step 1 Config: 200MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   110   *         (3 - 1),       //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   111   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   112   *     },
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   113   *     {                   //Step 2 Config: 300MHz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   114   *         (2 - 1),        //uint8 k2Step;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   115   *         0.000100,       //float32 waitTime;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   116   *     }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   117   * };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   118   *     IfxScuCcu_Config        IfxScuCcu_sampleClockConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   119   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   120   *     IfxScuCcu_initConfig(&IfxScuCcu_sampleClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   121   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   122   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   123   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   124   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.pllInputClockSelection = IfxScuCcu_PllInputClockSelection_fOsc0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   126   *     //SYS PLL = 300Mhz, XTAL = 20Mhz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   127   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.k2Divider = IfxScuCcu_K2divider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   128   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.nDivider = IfxScuCcu_Ndivider_60;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   129   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.sysPllConfig.pDivider = IfxScuCcu_Pdivider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   130   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.waitTime = 0.000200F;  // wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   131   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   132   *     IfxScuCcu_sampleClockConfig.sysPllThrottleConfig.numOfSteps = sizeof(IfxScuCcu_defaultPllConfigSteps) / sizeof(IfxScuCcu_PllStepConfig); //  step clock incr
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   133   *     IfxScuCcu_sampleClockConfig.sysPllThrottleConfig.pllSteps = IfxScuCcu_defaultPllConfigSteps;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   134   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   135   *     // PER PLL1 = 240Mhz, PERPLL2 = 50Mhz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   136   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k2Divider = IfxScuCcu_K2divider_2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   137   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k3Divider = IfxScuCcu_K3divider_6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   138   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.k3DividerBypass = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   139   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.nDivider = IfxScuCcu_Ndivider_24;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   140   *     IfxScuCcu_sampleClockConfig.pllInitialStepConfig.pllsParameters.perPllConfig.pDivider = IfxScuCcu_Pdivider_1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   142   *     // update CCUCON Config use mask and value as below
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   143   *     IfxScuCcu_sampleClockConfig.clockDistribution.ccucon0.mask =IFXSCU_CFG_CCUCON0_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   144   *     IfxScuCcu_sampleClockConfig.clockDistribution.ccucon0.value = IFXSCU_CFG_CCUCON0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   145   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   146   *     // standard PLL & clock initialisation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   147   *     IfxScuCcu_init(&IfxScuCcu_sampleClockConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   148   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   149   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   150   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   151   * ** Modulation Configuration **
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   152   * The SCU CCU module also provides an option to Frequency Modulate the clock.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   153   * The Modulation configuration can be done as follows:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   154   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   155   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   156   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   157   * //define your modulation configuration structure:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   158   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   159   *  IFX_CONST IfxScuCcu_Mod_Config IfxScuCcu_SampleModConfig = {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   160   *          IfxScuCcu_ModEn_disabled,          // disable is default //enable / disable modulation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   161   *          IfxScuCcu_ModulationAmplitude_0p5, // default 0 value  // specify the modulation amplitude %
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   162   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   163   *  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   164   *  // put this as part of the CCU configuration:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   165   *  IfxScuCcu_sampleClockConfig.modulationConfig = &IfxScuCcu_SampleModConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   166   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   167   *  // now initalize the CCU PLL and clock with the init function
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   168   *  IfxScuCcu_init(&IfxScuCcu_sampleClockConfig)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   169   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   171   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   172   * \}
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   173   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   174   * \defgroup IfxLld_Scu_Std_Ccu Ccu Basic Functionality
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   175   * \ingroup IfxLld_Scu_Std
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   176   * \defgroup IfxLld_Scu_Std_Ccu_Ccu Clock Control Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   177   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   178   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Operative Clock Control Operative Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   179   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   180   * \defgroup IfxLld_Scu_Std_Ccu_Ccu_Configuration Clock Control Configuration Functions
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   181   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   182   * \defgroup IfxLld_Scu_Std_Ccu_Enum Enumerations
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   183   * \ingroup IfxLld_Scu_Std_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   184   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   185  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   186  #ifndef IFXSCUCCU_H
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   187  #define IFXSCUCCU_H 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   188  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   189  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   190  /*----------------------------------Includes----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   191  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   193  #include "_Impl/IfxScu_cfg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   194  #include "Scu/Std/IfxScuWdt.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   195  #include "Cpu/Std/IfxCpu.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   196  #include "IfxStm_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   197  #include "IfxScu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   198  #include "_PinMap/IfxScu_PinMap.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   199  #include "IfxSmu_reg.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   200  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   201  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   202  /*-----------------------------------Macros-----------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   203  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   204  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   205  /** \brief Oscillator stability check timeout count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   206   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   207  #ifndef IFXSCUCCU_OSC_STABLECHK_TIME
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   208  #define IFXSCUCCU_OSC_STABLECHK_TIME               (640)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   209  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   210  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   211  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   212   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   213  #define IFXSCUCCU_SMUALARM_MASK                    (0x1DU)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   214  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   215  /** \brief ~40uS max wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   216   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   217  #ifndef IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   218  #define IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT     (0x1000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   219  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   220  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   221  /** \brief ~122uS max wait time for PLL locking
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   222   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   223  #define IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT           (0x3000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   224  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   225  /** \brief ~122uS max wait time for PLL power down/up state update
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   226   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   227  #define IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT (0x3000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   229  /** \brief ~244uS max wait time
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   230   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   231  #define IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT           (0x6000U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   232  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   233  /** \brief 3mS max wait time for PLL power down/up state update
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   234   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   235  #define IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT (0x493E0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   236  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   237  #define IFXSCUCCU_LOOP_TIMEOUT_CHECK(tVar, tErr) \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   238      {                                            \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   239          if (((sint32)--tVar) <= 0)               \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   240          {                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   241              tErr = (uint8)1;                     \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   242              break;                               \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   243          }                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   244          else                                     \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   245          {                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   246          }                                        \ 
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   247      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   248  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   249  /** \brief Modulation frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   250   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   251  #define IFXSCUCCU_MODULATION_FREQ_HZ               (3600000)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   252  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   253  /** \brief MODCFG shift value for SYSPLLCON2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   254   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   255  #define IFXSCUCCU_MODCFG_DEFAULT_SHIFT             (10)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   256  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   257  /** \brief MODCFG default value - for SYSPLLCON2[15:10]
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   259  #define IFXSCUCCU_MODCFG_DEFAULT_VAL               ((uint32)0x3D)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   260  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   261  /** \brief get Rgain from MA and FDco
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   262   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   263  #define IFXSCUCCU_GET_RGAIN_NOM(MA, FDco)  ((2 * (MA / 100) * (FDco / IFXSCUCCU_MODULATION_FREQ_HZ)))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   265  /** \brief Get RGAin HEX from RGain Nominal value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   266   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   267  #define IFXSCUCCU_GET_RGAIN_HEX(RGain_Nom) ((uint16)((RGain_Nom * 32) + 0.5))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   268  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   269  /** \brief Get MODCFG from RGAIN_HEX
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   270   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   271  #define IFXSCUCCU_GET_MODCFG(RGain_Hex)    ((uint16)(IFXSCUCCU_MODCFG_DEFAULT_VAL << IFXSCUCCU_MODCFG_DEFAULT_SHIFT) | (uint16)(RGain_Hex))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   273  /** \brief Define to include the flash wait state check in ScuCcu_init()
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   275  #define IFXSCUCCU_FLASHWAITSTATECHECK (0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   276  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   277  /** \brief 10 microsecond wait time between steps to jump back to normal mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   278   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   279  #ifndef IFXSCUCCU_LPTONORMAL_WAITTIME
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   280  #define IFXSCUCCU_LPTONORMAL_WAITTIME (0.00001f)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   281  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   282  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   283  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   284  /*------------------------------Type Definitions------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   285  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   286  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   287  /** \brief Function pointer type for the hooks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   288   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   289   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   290  typedef void (*IfxScuCcu_PllStepsFunctionHook)(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   292  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   293  /*--------------------------------Enumerations--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   294  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   295  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   296  /** \addtogroup IfxLld_Scu_Std_Ccu_Enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   297   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   298  /** \brief clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   299   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   300  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   301  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   302      IfxScuCcu_Fsource_0 = 0,      /**< \brief fSource0  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   303      IfxScuCcu_Fsource_1,          /**< \brief fSource1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   304      IfxScuCcu_Fsource_2           /**< \brief fSource2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   305  } IfxScuCcu_Fsource;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   306  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   307  /** \brief MODULE_SCU.PLLCON1.B.K2DIV, specifies the K2-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   308   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   309  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   310  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   311      IfxScuCcu_K2divider_1 = 0,      /**< \brief K2-Divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   312      IfxScuCcu_K2divider_2,          /**< \brief K2-Divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   313      IfxScuCcu_K2divider_3,          /**< \brief K2-Divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   314      IfxScuCcu_K2divider_4,          /**< \brief K2-Divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   315      IfxScuCcu_K2divider_5,          /**< \brief K2-Divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   316      IfxScuCcu_K2divider_6,          /**< \brief K2-Divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   317      IfxScuCcu_K2divider_7,          /**< \brief K2-Divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   318      IfxScuCcu_K2divider_8           /**< \brief K2-Divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   319  } IfxScuCcu_K2divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   321  /** \brief MODULE_SCU.PLLCON1.B.K3DIV, specifies the K3-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   322   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   323  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   324  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   325      IfxScuCcu_K3divider_1 = 0,      /**< \brief K3-Divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   326      IfxScuCcu_K3divider_2,          /**< \brief K3-Divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   327      IfxScuCcu_K3divider_3,          /**< \brief K3-Divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   328      IfxScuCcu_K3divider_4,          /**< \brief K3-Divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   329      IfxScuCcu_K3divider_5,          /**< \brief K3-Divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   330      IfxScuCcu_K3divider_6,          /**< \brief K3-Divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   331      IfxScuCcu_K3divider_7,          /**< \brief K3-Divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   332      IfxScuCcu_K3divider_8           /**< \brief K3-Divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   333  } IfxScuCcu_K3divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   334  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   335  /** \brief Low Power Division Ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   336   * Corresponds to values of LPDIV in CCUCON0.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   337   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   338  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   339  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   340      IfxScuCcu_LowPowerDivRatio_divBy30 = 1,  /**< \brief Divide by 30 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   341      IfxScuCcu_LowPowerDivRatio_divBy60,      /**< \brief Divide by 60 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   342      IfxScuCcu_LowPowerDivRatio_divBy120,     /**< \brief Divide by 120 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   343      IfxScuCcu_LowPowerDivRatio_divBy240      /**< \brief Divide by 240 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   344  } IfxScuCcu_LowPowerDivRatio;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   345  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   346  /** \brief ENUM for MA (%) values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   347   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   348  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   349  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   350      IfxScuCcu_ModulationAmplitude_0p5 = 0,      /**< \brief 0.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   351      IfxScuCcu_ModulationAmplitude_1p0,          /**< \brief 1.0%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   352      IfxScuCcu_ModulationAmplitude_1p25,         /**< \brief 1.25%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   353      IfxScuCcu_ModulationAmplitude_1p5,          /**< \brief 1.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   354      IfxScuCcu_ModulationAmplitude_2p0,          /**< \brief 2%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   355      IfxScuCcu_ModulationAmplitude_2p5,          /**< \brief 2.5%  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   356      IfxScuCcu_ModulationAmplitude_count,        /**< \brief range  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   357  } IfxScuCcu_ModulationAmplitude;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   358  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   359  /** \brief MODULE_SCU.PLLCON0.B.NDIV, specifies the N-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   360   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   361  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   362  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   363      IfxScuCcu_Ndivider_1 = 0,      /**< \brief  N-divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   364      IfxScuCcu_Ndivider_2,          /**< \brief  N-divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   365      IfxScuCcu_Ndivider_3,          /**< \brief  N-divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   366      IfxScuCcu_Ndivider_4,          /**< \brief  N-divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   367      IfxScuCcu_Ndivider_5,          /**< \brief  N-divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   368      IfxScuCcu_Ndivider_6,          /**< \brief  N-divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   369      IfxScuCcu_Ndivider_7,          /**< \brief  N-divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   370      IfxScuCcu_Ndivider_8,          /**< \brief  N-divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   371      IfxScuCcu_Ndivider_9,          /**< \brief  N-divider 9  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   372      IfxScuCcu_Ndivider_10,         /**< \brief  N-divider 10  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   373      IfxScuCcu_Ndivider_11,         /**< \brief  N-divider 11  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   374      IfxScuCcu_Ndivider_12,         /**< \brief  N-divider 12  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   375      IfxScuCcu_Ndivider_13,         /**< \brief  N-divider 13  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   376      IfxScuCcu_Ndivider_14,         /**< \brief  N-divider 14  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   377      IfxScuCcu_Ndivider_15,         /**< \brief  N-divider 15  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   378      IfxScuCcu_Ndivider_16,         /**< \brief  N-divider 16  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   379      IfxScuCcu_Ndivider_17,         /**< \brief  N-divider 17  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   380      IfxScuCcu_Ndivider_18,         /**< \brief  N-divider 18  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   381      IfxScuCcu_Ndivider_19,         /**< \brief  N-divider 19  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   382      IfxScuCcu_Ndivider_20,         /**< \brief  N-divider 20  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   383      IfxScuCcu_Ndivider_21,         /**< \brief  N-divider 21  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   384      IfxScuCcu_Ndivider_22,         /**< \brief  N-divider 22  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   385      IfxScuCcu_Ndivider_23,         /**< \brief  N-divider 23  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   386      IfxScuCcu_Ndivider_24,         /**< \brief  N-divider 24  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   387      IfxScuCcu_Ndivider_25,         /**< \brief  N-divider 25  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   388      IfxScuCcu_Ndivider_26,         /**< \brief  N-divider 26  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   389      IfxScuCcu_Ndivider_27,         /**< \brief  N-divider 27  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   390      IfxScuCcu_Ndivider_28,         /**< \brief  N-divider 28  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   391      IfxScuCcu_Ndivider_29,         /**< \brief  N-divider 29  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   392      IfxScuCcu_Ndivider_30,         /**< \brief  N-divider 30  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   393      IfxScuCcu_Ndivider_31,         /**< \brief  N-divider 31  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   394      IfxScuCcu_Ndivider_32,         /**< \brief  N-divider 32  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   395      IfxScuCcu_Ndivider_33,         /**< \brief  N-divider 33  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   396      IfxScuCcu_Ndivider_34,         /**< \brief  N-divider 34  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   397      IfxScuCcu_Ndivider_35,         /**< \brief  N-divider 35  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   398      IfxScuCcu_Ndivider_36,         /**< \brief  N-divider 36  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   399      IfxScuCcu_Ndivider_37,         /**< \brief  N-divider 37  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   400      IfxScuCcu_Ndivider_38,         /**< \brief  N-divider 38  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   401      IfxScuCcu_Ndivider_39,         /**< \brief  N-divider 39  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   402      IfxScuCcu_Ndivider_40,         /**< \brief  N-divider 40  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   403      IfxScuCcu_Ndivider_41,         /**< \brief  N-divider 41  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   404      IfxScuCcu_Ndivider_42,         /**< \brief  N-divider 42  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   405      IfxScuCcu_Ndivider_43,         /**< \brief  N-divider 43  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   406      IfxScuCcu_Ndivider_44,         /**< \brief  N-divider 44  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   407      IfxScuCcu_Ndivider_45,         /**< \brief  N-divider 45  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   408      IfxScuCcu_Ndivider_46,         /**< \brief  N-divider 46  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   409      IfxScuCcu_Ndivider_47,         /**< \brief  N-divider 47  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   410      IfxScuCcu_Ndivider_48,         /**< \brief  N-divider 48  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   411      IfxScuCcu_Ndivider_49,         /**< \brief  N-divider 49  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   412      IfxScuCcu_Ndivider_50,         /**< \brief  N-divider 50  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   413      IfxScuCcu_Ndivider_51,         /**< \brief  N-divider 51  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   414      IfxScuCcu_Ndivider_52,         /**< \brief  N-divider 52  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   415      IfxScuCcu_Ndivider_53,         /**< \brief  N-divider 53  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   416      IfxScuCcu_Ndivider_54,         /**< \brief  N-divider 54  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   417      IfxScuCcu_Ndivider_55,         /**< \brief  N-divider 55  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   418      IfxScuCcu_Ndivider_56,         /**< \brief  N-divider 56  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   419      IfxScuCcu_Ndivider_57,         /**< \brief  N-divider 57  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   420      IfxScuCcu_Ndivider_58,         /**< \brief  N-divider 58  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   421      IfxScuCcu_Ndivider_59,         /**< \brief  N-divider 59  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   422      IfxScuCcu_Ndivider_60,         /**< \brief  N-divider 60  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   423      IfxScuCcu_Ndivider_61,         /**< \brief  N-divider 61  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   424      IfxScuCcu_Ndivider_62,         /**< \brief  N-divider 62  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   425      IfxScuCcu_Ndivider_63,         /**< \brief  N-divider 63  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   426      IfxScuCcu_Ndivider_64,         /**< \brief  N-divider 64  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   427      IfxScuCcu_Ndivider_65,         /**< \brief  N-divider 65  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   428      IfxScuCcu_Ndivider_66,         /**< \brief  N-divider 66  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   429      IfxScuCcu_Ndivider_67,         /**< \brief  N-divider 67  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   430      IfxScuCcu_Ndivider_68,         /**< \brief  N-divider 68  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   431      IfxScuCcu_Ndivider_69,         /**< \brief  N-divider 69  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   432      IfxScuCcu_Ndivider_70,         /**< \brief  N-divider 70  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   433      IfxScuCcu_Ndivider_71,         /**< \brief  N-divider 71  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   434      IfxScuCcu_Ndivider_72,         /**< \brief  N-divider 72  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   435      IfxScuCcu_Ndivider_73,         /**< \brief  N-divider 73  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   436      IfxScuCcu_Ndivider_74,         /**< \brief  N-divider 74  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   437      IfxScuCcu_Ndivider_75,         /**< \brief  N-divider 75  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   438      IfxScuCcu_Ndivider_76,         /**< \brief  N-divider 76  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   439      IfxScuCcu_Ndivider_77,         /**< \brief  N-divider 77  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   440      IfxScuCcu_Ndivider_78,         /**< \brief  N-divider 78  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   441      IfxScuCcu_Ndivider_79,         /**< \brief  N-divider 79  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   442      IfxScuCcu_Ndivider_80,         /**< \brief  N-divider 80  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   443      IfxScuCcu_Ndivider_81,         /**< \brief  N-divider 81  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   444      IfxScuCcu_Ndivider_82,         /**< \brief  N-divider 82  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   445      IfxScuCcu_Ndivider_83,         /**< \brief  N-divider 83  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   446      IfxScuCcu_Ndivider_84,         /**< \brief  N-divider 84  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   447      IfxScuCcu_Ndivider_85,         /**< \brief  N-divider 85  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   448      IfxScuCcu_Ndivider_86,         /**< \brief  N-divider 86  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   449      IfxScuCcu_Ndivider_87,         /**< \brief  N-divider 87  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   450      IfxScuCcu_Ndivider_88,         /**< \brief  N-divider 88  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   451      IfxScuCcu_Ndivider_89,         /**< \brief  N-divider 89  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   452      IfxScuCcu_Ndivider_90,         /**< \brief  N-divider 90  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   453      IfxScuCcu_Ndivider_91,         /**< \brief  N-divider 91  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   454      IfxScuCcu_Ndivider_92,         /**< \brief  N-divider 92  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   455      IfxScuCcu_Ndivider_93,         /**< \brief  N-divider 93  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   456      IfxScuCcu_Ndivider_94,         /**< \brief  N-divider 94  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   457      IfxScuCcu_Ndivider_95,         /**< \brief  N-divider 95  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   458      IfxScuCcu_Ndivider_96,         /**< \brief  N-divider 96  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   459      IfxScuCcu_Ndivider_97,         /**< \brief  N-divider 97  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   460      IfxScuCcu_Ndivider_98,         /**< \brief  N-divider 98  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   461      IfxScuCcu_Ndivider_99,         /**< \brief  N-divider 99  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   462      IfxScuCcu_Ndivider_100,        /**< \brief  N-divider 100  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   463      IfxScuCcu_Ndivider_101,        /**< \brief  N-divider 101  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   464      IfxScuCcu_Ndivider_102,        /**< \brief  N-divider 102  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   465      IfxScuCcu_Ndivider_103,        /**< \brief  N-divider 103  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   466      IfxScuCcu_Ndivider_104,        /**< \brief  N-divider 104  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   467      IfxScuCcu_Ndivider_105,        /**< \brief  N-divider 105  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   468      IfxScuCcu_Ndivider_106,        /**< \brief  N-divider 106  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   469      IfxScuCcu_Ndivider_107,        /**< \brief  N-divider 107  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   470      IfxScuCcu_Ndivider_108,        /**< \brief  N-divider 108  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   471      IfxScuCcu_Ndivider_109,        /**< \brief  N-divider 109  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   472      IfxScuCcu_Ndivider_110,        /**< \brief  N-divider 110  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   473      IfxScuCcu_Ndivider_111,        /**< \brief  N-divider 111  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   474      IfxScuCcu_Ndivider_112,        /**< \brief  N-divider 112  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   475      IfxScuCcu_Ndivider_113,        /**< \brief  N-divider 113  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   476      IfxScuCcu_Ndivider_114,        /**< \brief  N-divider 114  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   477      IfxScuCcu_Ndivider_115,        /**< \brief  N-divider 115  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   478      IfxScuCcu_Ndivider_116,        /**< \brief  N-divider 116  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   479      IfxScuCcu_Ndivider_117,        /**< \brief  N-divider 117  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   480      IfxScuCcu_Ndivider_118,        /**< \brief  N-divider 118  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   481      IfxScuCcu_Ndivider_119,        /**< \brief  N-divider 119  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   482      IfxScuCcu_Ndivider_120,        /**< \brief  N-divider 120  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   483      IfxScuCcu_Ndivider_121,        /**< \brief  N-divider 121  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   484      IfxScuCcu_Ndivider_122,        /**< \brief  N-divider 122  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   485      IfxScuCcu_Ndivider_123,        /**< \brief  N-divider 123  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   486      IfxScuCcu_Ndivider_124,        /**< \brief  N-divider 124  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   487      IfxScuCcu_Ndivider_125,        /**< \brief  N-divider 125  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   488      IfxScuCcu_Ndivider_126,        /**< \brief  N-divider 126  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   489      IfxScuCcu_Ndivider_127,        /**< \brief  N-divider 127  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   490      IfxScuCcu_Ndivider_128         /**< \brief  N-divider 128  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   491  } IfxScuCcu_Ndivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   492  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   493  /** \brief MODULE_SCU.PLLCON0.B.PDIV, specifies the P-Divider
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   494   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   495  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   496  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   497      IfxScuCcu_Pdivider_1 = 0,      /**< \brief  P-divider 1  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   498      IfxScuCcu_Pdivider_2,          /**< \brief  P-divider 2  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   499      IfxScuCcu_Pdivider_3,          /**< \brief  P-divider 3  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   500      IfxScuCcu_Pdivider_4,          /**< \brief  P-divider 4  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   501      IfxScuCcu_Pdivider_5,          /**< \brief  P-divider 5  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   502      IfxScuCcu_Pdivider_6,          /**< \brief  P-divider 6  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   503      IfxScuCcu_Pdivider_7,          /**< \brief  P-divider 7  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   504      IfxScuCcu_Pdivider_8           /**< \brief  P-divider 8  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   505  } IfxScuCcu_Pdivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   506  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   507  /** \brief SysPll & Per Pll input clock selection.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   508   * SYSPLLCON0.B.INSEL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   509   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   510  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   511  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   512      IfxScuCcu_PllInputClockSelection_fOsc1   = 0, /**< \brief Backup clock select */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   513      IfxScuCcu_PllInputClockSelection_fOsc0   = 1, /**< \brief fOsc0 or XTAL clock select */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   514      IfxScuCcu_PllInputClockSelection_fSysclk = 2  /**< \brief fOsc1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   515  } IfxScuCcu_PllInputClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   517  /** \brief trap request type
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   518   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   519  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   520  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   521      IfxScuCcu_Traprequest_esr0 = 0,  /**< \brief external service request 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   522      IfxScuCcu_Traprequest_esr1,      /**< \brief external service request 1 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   523      IfxScuCcu_Traprequest_trap2,     /**< \brief trap2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   524      IfxScuCcu_Traprequest_smu        /**< \brief safety management unit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   525  } IfxScuCcu_Traprequest;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   526  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   527  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   528  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   529  /** \brief modulation enable
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   530   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   531  typedef enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   532  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   533      IfxScuCcu_ModEn_disabled = 0,  /**< \brief disable modulation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   534      IfxScuCcu_ModEn_enabled  = 1   /**< \brief enable modulation */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   535  } IfxScuCcu_ModEn;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   536  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   537  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   538  /*-----------------------------Data Structures--------------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   539  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   541  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   542   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   543  /** \brief Configuration structure type for the Per Pll step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   544   * This structure must be used to configure the P, N and K2, K3 dividers .
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   545   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   546  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   547  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   548      uint8 pDivider;              /**< \brief P divider value for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   549      uint8 nDivider;              /**< \brief N divider value for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   550      uint8 k2Divider;             /**< \brief K2 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   551      uint8 k3Divider;             /**< \brief K3 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   552      uint8 k3DividerBypass;       /**< \brief Divider Bypass
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   553                                    * 0 - The divide by block in front of the K3-Divider is not bypassed.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   554                                    * 1-  The divide by block in front of the K3-Divider is bypassed. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   555  } IfxScuCcu_PerPllConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   556  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   557  /** \brief Configuration structure type for the Pll initial step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   558   * This structure must be used to configure the P, N and K2 dividers for initial step.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   559   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   560  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   561  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   562      uint8 pDivider;        /**< \brief P divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   563      uint8 nDivider;        /**< \brief N divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   564      uint8 k2Divider;       /**< \brief K2 divider value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   565  } IfxScuCcu_SysPllConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   566  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   567  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   568  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   569  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   570   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   571  /** \brief Configuration structure type for CCUCON registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   572   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   573  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   574  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   575      uint32 value;       /**< \brief CCUCON Register value to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   576      uint32 mask;        /**< \brief CCUCON Mask to select the bit fields to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   577  } IfxScuCcu_CcuconRegConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   578  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   579  /** \brief Configuration structure type for the Pll Steps for current jump control.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   580   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   581  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   582  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   583      uint8   k2Step;         /**< \brief K2 divider value for this step. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   584      float32 waitTime;       /**< \brief Wait time for for this step. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   585  } IfxScuCcu_PllStepConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   586  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   587  /** \brief Configuration structure type for the Pll Parameters.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   588   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   589  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   590  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   591      uint32                           xtalFrequency;                /**< \brief Xtal frequency */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   592      IfxScuCcu_PllInputClockSelection pllInputClockSelection;       /**< \brief Pll input clock selection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   593      IfxScuCcu_SysPllConfig           sysPllConfig;                 /**< \brief System PLL Configurations */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   594      IfxScuCcu_PerPllConfig           perPllConfig;                 /**< \brief Peripheral PLL Configurations */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   595  } IfxScuCcu_pllsParameterConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   596  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   597  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   598  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   599  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   600   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   601  /** \brief Configuration structure type for the Flash waitstate configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   602   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   603  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   604  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   605      uint32 value;       /**< \brief FLASH.FCON Register value to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   606      uint32 mask;        /**< \brief FLASH.FCON Mask to select the bit fields to be updated. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   607  } IfxScuCcu_FlashWaitstateConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   609  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   610  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   611  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   612   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   613  /** \brief Configuration structure type for all the CCUCON registers to configure clock distribution.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   614   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   615  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   616  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   617      IfxScuCcu_CcuconRegConfig ccucon0;        /**< \brief CCUCON0 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   618      IfxScuCcu_CcuconRegConfig ccucon1;        /**< \brief CCUCON1 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   619      IfxScuCcu_CcuconRegConfig ccucon2;        /**< \brief CCUCON2 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   620      IfxScuCcu_CcuconRegConfig ccucon5;        /**< \brief CCUCON5 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   621      IfxScuCcu_CcuconRegConfig ccucon6;        /**< \brief CCUCON6 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   622      IfxScuCcu_CcuconRegConfig ccucon7;        /**< \brief CCUCON7 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   623      IfxScuCcu_CcuconRegConfig ccucon8;        /**< \brief CCUCON8 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   624      IfxScuCcu_CcuconRegConfig ccucon9;        /**< \brief CCUCON9 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   625      IfxScuCcu_CcuconRegConfig ccucon10;       /**< \brief CCUCON10 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   626      IfxScuCcu_CcuconRegConfig ccucon11;       /**< \brief CCUCON11 Register configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   627  } IfxScuCcu_ClockDistributionConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   629  /** \brief Configuration structure type for the Pll Initial Step Configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   630   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   631  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   632  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   633      IfxScuCcu_pllsParameterConfig pllsParameters;       /**< \brief Configuration Parameters for both PLLs */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   634      float32                       waitTime;             /**< \brief Wait time for for basic (initial) step */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   635  } IfxScuCcu_InitialStepConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   636  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   637  /** \brief
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   638   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   639  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   640  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   641      uint8                              numOfSteps;       /**< \brief Number of PLL divider steps during clock throttling */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   642      IFX_CONST IfxScuCcu_PllStepConfig *pllSteps;         /**< \brief Pointer to the array of Pll divider step configuration. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   643  } IfxScuCcu_PllThrottleConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   644  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   645  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   647  /** \brief modulation config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   648   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   649  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   650  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   651      IfxScuCcu_ModEn               Mod_Enable;       /**< \brief modulation enable */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   652      IfxScuCcu_ModulationAmplitude Mod_Amp;          /**< \brief modulation amplitude */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   653  } IfxScuCcu_Mod_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   654  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   655  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   656   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   657  /** \brief Configuration structure SCU module
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   658   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   659  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   660  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   661      IfxScuCcu_InitialStepConfig               pllInitialStepConfig;           /**< \brief Configuration of first step which is same as internal osc frequency. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   662      IfxScuCcu_PllThrottleConfig               sysPllThrottleConfig;           /**< \brief Configuration of PLL throttling. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   663      IfxScuCcu_ClockDistributionConfig         clockDistribution;              /**< \brief Configuration of of bus clocks and other module clock distribution. */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   664      IFX_CONST IfxScuCcu_FlashWaitstateConfig *flashFconWaitStateConfig;       /**< \brief Configuration of flash waitstate */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   665      IFX_CONST IfxScuCcu_Mod_Config           *modulationConfig;               /**< \brief modulation configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   666  } IfxScuCcu_Config;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   667  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   668  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   669  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   670  /** \brief structure holding the RGain parameters for modulation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   671   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   672  typedef struct
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   673  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   674      float32 RGainNom;       /**< \brief RGain Nominal value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   675      uint16  RGainHex;       /**< \brief RGain Hex value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   676  } IfxScuCcu_RGain_Values;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   677  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   678  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   679   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   680  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   681  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   682  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   683  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   684  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   685  /** \brief API to wait for requested duration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   686   * Note: IfxScuCcu_wait shall not use STM in future, because we can guarantee that STM is enabled after reset but  If PLL init is called for changing the frequency during runtime, there is no guarantee that STM is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   687   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   688   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   689  IFX_INLINE void IfxScuCcu_wait(float32 timeSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   690  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   691  /** \brief API to wait for requested duration along with watchdog service to avoid any reset case during startup of the chip.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   692   * Note: IfxScuCcu_wait shall not use STM in future, because we can guarantee that STM is enabled after reset but  If PLL init is called for changing the frequency during runtime, there is no guarantee that STM is enabled
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   693   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   694   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   695  IFX_INLINE void IfxScuCcu_waitWithWdtService(float32 timeSec);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   696  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   697  /** \brief API to configure the LPDIV value to enter into Low Power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   698   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   699   * Caution:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   700   * write to LPDIV with non-zero division ratio will cause system to enter low power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   701   * Low power mode will affect different SPBDIV and SRIDIV ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   702   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   703   * The original CCUCON0 ratios should be preserved by user prior to calling this function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   704   * The "normal" CCUCON0 ratios have to be passed to API: "IfxScuCcu_switchToNormalMode" to go back to the original division ratios.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   705   * \param lpDiv Low Power Division Ratio
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   706   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   707   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   708  IFX_INLINE void IfxScuCcu_switchToLowPowerMode(IfxScuCcu_LowPowerDivRatio lpDiv);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   709  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   710  /** \brief API to switch back to normal mode from low power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   711   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   712   * Caution:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   713   * The original CCUCON0 setting has to be saved by user prior to entering Low Power mode.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   714   * Pass the original CCUCON0 register as a whole word to this function to restore the normal settings.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   715   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   716   * Ramp back to normal mode is done in steps to avoid sudden jump in frequency and power usage.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   717   * \param ccucon0 CCUCON0 values at normal mode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   718   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   719   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   720   * Switch to low power mode and back using iLLD functions as below
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   721   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   722   *     uint32 ccucon0 = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   723   *     IfxScuCcu_LowPowerDivRatio lpDiv = IfxScuCcu_LowPowerDivRatio_divBy30;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   724   *     IfxScuCcu_switchToLowPowerMode(lpDiv);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   725   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   726   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   727   * Switch back to normal mode  with the saved ccucon0 value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   728   * \code
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   729   *     IfxScuCcu_switchToNormalMode(ccucon0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   730   * \endcode
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   731   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   732   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   733  IFX_INLINE void IfxScuCcu_switchToNormalMode(const uint32 ccucon0);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   734  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   735  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   736  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   737  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Operative
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   738   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   739  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   740  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   741  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   742  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   743  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   744  /** \brief API to get ADAS divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   745   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   746   * \return ADAS frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   747   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   748  IFX_INLINE float32 IfxScuCcu_getAdasFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   749  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   750  /** \brief API to get Adc (EVADC, EDSADC)  frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   751   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   752   * \return Adc frequency (fADC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   753   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   754  IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   755  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   756  /** \brief API to get ASCLINF divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   757   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   758   * \return AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   759   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   760  IFX_INLINE float32 IfxScuCcu_getAsclinFFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   761  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   762  /** \brief API to get EBU frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   763   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   764   * \return EBU frequency (fEBU) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   765   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   766  IFX_INLINE float32 IfxScuCcu_getEbuFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   767  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   768  /** \brief API to get EVR Oscillator frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   769   * This API returns the constant which is specific to the ScuCcu of the controller.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   770   * \return EVR Oscillator frequency (fBACK or fEVR) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   771   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   772  IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   773  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   774  /** \brief API to get GETH divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   775   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   776   * \return GETH frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   777   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   778  IFX_INLINE float32 IfxScuCcu_getGethFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   779  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   780  /** \brief API to get GTMdivider frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   781   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   782   * return GTM frequency (fGTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   783   * \return Gtm Frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   784   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   785  IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   786  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   787  /** \brief API to get I2C frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   788   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   789   * \return I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   790   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   791  IFX_INLINE float32 IfxScuCcu_getI2cFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   792  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   793  /** \brief API to get MCANH divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   794   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   795   * \return MCANH frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   796   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   797  IFX_INLINE float32 IfxScuCcu_getMcanhFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   798  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   799  /** \brief API to get Oscillator 0 frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   800   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   801   * \return Osc0 frequency (fOSC0) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   802   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   803  IFX_INLINE float32 IfxScuCcu_getOsc0Frequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   804  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   805  /** \brief API to get Oscillator 0 frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   806   * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   807   * \return Osc frequency (fOSC) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   808   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   809  IFX_INLINE float32 IfxScuCcu_getOscFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   810  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   811  /** \brief Returns the clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   812   * \return Clock source selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   813   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   814  IFX_INLINE IfxScuCcu_PllInputClockSelection IfxScuCcu_getSourceSelection(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   815  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   816  /** \brief API to get STM divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   817   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   818   * \return STM frequency (fSTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   819   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   820  IFX_INLINE float32 IfxScuCcu_getStmFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   821  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   822  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   823  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   824  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   825  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   826  /** \brief API to get ASCLINS divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   827   * This API returns the ASCLINS frequency  based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   828   * \return AsclinS frequency (fASCLINS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   829   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   830  IFX_EXTERN float32 IfxScuCcu_getAsclinSFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   831  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   832  /** \brief API to get BBB divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   833   * This API returns the BBBDivider frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   834   * \return BBB frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   835   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   836  IFX_EXTERN float32 IfxScuCcu_getBbbFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   837  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   838  /** \brief This API returns the Cpu frequency based on the divider value in CCUCON register and fSource frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   839   * \param cpu CPU number for which effective fCPU is sought
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   840   * \return Cpu[x] frequency in Hz, where x is cpu number passed as parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   841   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   842  IFX_EXTERN float32 IfxScuCcu_getCpuFrequency(const IfxCpu_ResourceCpu cpu);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   843  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   844  /** \brief API to get FSI2 divider frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   845   * This API returns the fFSI2 frequency based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   846   * \return FSI2 frequency (fFSI2) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   847   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   848  IFX_EXTERN float32 IfxScuCcu_getFsi2Frequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   849  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   850  /** \brief API to get FSI divider frequency in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   851   * This API returns the fFSI based on the divider value in CCUCON register and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   852   * \return FSI frequency (fFSI) in Hz.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   853   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   854  IFX_EXTERN float32 IfxScuCcu_getFsiFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   855  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   856  /** \brief API to get MCAN divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   857   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   858   * \return Mcan frequency (fMCAN) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   859   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   860  IFX_EXTERN float32 IfxScuCcu_getMcanFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   861  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   862  /** \brief get source frequency fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   863   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   864   * \return Module frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   865   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   866  IFX_EXTERN float32 IfxScuCcu_getModuleFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   867  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   868  /** \brief API to get MSC divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   869   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   870   * \return Msc frequency (fMSC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   871   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   872  IFX_EXTERN float32 IfxScuCcu_getMscFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   873  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   874  /** \brief API to get actual PER PLL1  frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   875   * This API returns the PER PLL1 frequency based on the K2 divider value in PLLCON and the VCO frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   876   * Fpll1= (Fosc*N)/(P*K2)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   877   * \return PER PLL1 (K2 Divider) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   878   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   879  IFX_EXTERN float32 IfxScuCcu_getPerPllFrequency1(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   880  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   881  /** \brief API to get actual PER PLL2 (K3 Divider) frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   882   * This API returns the PER PLL2 frequency based on the K3 divider value in PLLCON and the VCO frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   883   * Fpll2= (Fosc*N)/(P*K3*1.6)  // DIVBY = 0,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   884   * Fpll2= (Fosc*N)/(P*K3*2)  // DIVBY = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   885   * \return PER PLL2 (K3 Divider ) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   886   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   887  IFX_EXTERN float32 IfxScuCcu_getPerPllFrequency2(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   888  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   889  /** \brief API to get actual Sys PLL output frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   890   * This API returns the based on the divider values in CCUCON, PLLCON registers and the input oscillator.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   891   * \return System Pll (fSysPLL) frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   892   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   893  IFX_EXTERN float32 IfxScuCcu_getPllFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   894  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   895  /** \brief API to get Qspi divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   896   * This API returns the based on the divider value in CCUCON register and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   897   * \return Qspi frequency (fQspi) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   898   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   899  IFX_EXTERN float32 IfxScuCcu_getQspiFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   900  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   901  /** \brief get source frequency fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   902   * This API returns the source frequency based on the configurations with CCUCON register configuration.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   903   * \param fsource fsource selection
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   904   * \return Effective fSOURCE in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   905   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   906  IFX_EXTERN float32 IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource fsource);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   907  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   908  /** \brief API to get SPB divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   909   * This API returns the based on fSOURCE and also on Low power divider mode and/or SPBDIV divider value in CCUCON registers.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   910   * \return SPB frequency (fSPB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   911   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   912  IFX_EXTERN float32 IfxScuCcu_getSpbFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   913  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   914  /** \brief API to get SRI divider frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   915   * This API returns the Sri frequency based on the divider values in CCUCON registers and fSOURCE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   916   * \return Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   917   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   918  IFX_EXTERN float32 IfxScuCcu_getSriFrequency(void);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   919  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   920  /** \brief API to set ADAS frequency (with ADAS divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   921   * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   922   * \param adasFreq ADAS frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   923   * \return Actual Adas frequency (fADAS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   924   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   925  IFX_EXTERN float32 IfxScuCcu_setAdasFrequency(float32 adasFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   926  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   927  /** \brief API to set ASCLINF frequency (with ASCLINF divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   928   * This API configure ASCLINF divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   929   * \param asclinFFreq AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   930   * \return Actual AsclinF frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   931   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   932  IFX_EXTERN float32 IfxScuCcu_setAsclinFFrequency(float32 asclinFFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   933  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   934  /** \brief API to set ASCLINS frequency (with ASCLINS divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   935   * This API configure ASCLINS divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   936   * \param asclinSFreq Desired AscLinS frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   937   * \return Actual AsclinS frequency (fASCLINS) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   938   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   939  IFX_EXTERN float32 IfxScuCcu_setAsclinSFrequency(float32 asclinSFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   940  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   941  /** \brief API to set BBB frequency (with Bbb divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   942   * This API configure Bbb divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   943   * \param bbbFreq Bbb frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   944   * \return Actual Bbb frequency (fBBB) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   945   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   946  IFX_EXTERN float32 IfxScuCcu_setBbbFrequency(float32 bbbFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   947  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   948  /** \brief API to set CPU frequency (with CPU divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   949   * This API configure CPU divider values in CCUCON registers. The actual frequency is always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   950   * \param cpu CPU number for which fCPU to be configured
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   951   * \param cpuFreq Desired CPU frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   952   * \return Actual CPU[x] frequency in Hz, where x is the cpu number passed as parameter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   953   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   954  IFX_EXTERN float32 IfxScuCcu_setCpuFrequency(IfxCpu_ResourceCpu cpu, float32 cpuFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   955  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   956  /** \brief API to set FSI2 frequency (with FSI2 divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   957   * This API configure Fsi2 divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   958   * \param fsi2Freq FSI2 frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   959   * \return Actual Fsi2 frequency (fFSI2) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   960   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   961  IFX_EXTERN float32 IfxScuCcu_setFsi2Frequency(float32 fsi2Freq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   962  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   963  /** \brief API to set FSI frequency (with FSI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   964   * This API configure Fsi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   965   * \param fsiFreq FSI frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   966   * \return Actual Fsi frequency (fFSI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   967   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   968  IFX_EXTERN float32 IfxScuCcu_setFsiFrequency(float32 fsiFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   969  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   970  /** \brief API to set GETH frequency (with GETH divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   971   * This API configure geth divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   972   * \param gethFreq GETH frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   973   * \return Actual Geth frequency (fGETH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   974   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   975  IFX_EXTERN float32 IfxScuCcu_setGethFrequency(float32 gethFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   976  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   977  /** \brief API to set GTM frequency (with GTM divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   978   * This API configure GTM divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   979   * \param gtmFreq Desired GTM frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   980   * \return Actual GTM frequency in HZ
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   981   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   982  IFX_EXTERN float32 IfxScuCcu_setGtmFrequency(float32 gtmFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   983  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   984  /** \brief API to set I2C frequency (with I2C divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   985   * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   986   * \param i2cFreq I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   987   * \return Actual I2C frequency (fI2C) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   988   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   989  IFX_EXTERN float32 IfxScuCcu_setI2cFrequency(float32 i2cFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   990  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   991  /** \brief API to set MCAN frequency (with MCAN divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   992   * This API configure MCAN divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   993   * \param mcanFreq Desired MSC frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   994   * \return Actual Mcan frequency (fMCAN) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   995   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   996  IFX_EXTERN float32 IfxScuCcu_setMcanFrequency(float32 mcanFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   997  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   998  /** \brief API to set MCANH frequency (with MCANH divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	   999   * This API configure mcanh divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1000   * \param mcanhFreq MCANH frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1001   * \return Actual MCanh frequency (fMCANH) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1002   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1003  IFX_EXTERN float32 IfxScuCcu_setMcanhFrequency(float32 mcanhFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1004  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1005  /** \brief API to set MSC frequency (with MSC divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1006   * This API configure MSC divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1007   * \param mscFreq Desired MSC frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1008   * \return Actual Msc frequency (fMSC) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1009   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1010  IFX_EXTERN float32 IfxScuCcu_setMscFrequency(float32 mscFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1011  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1012  /** \brief API to set QSPI frequency (with QSPI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1013   * This API configure Qspi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1014   * \param qspiFreq Desired QSPI frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1015   * \return Actual Qspi frequency (fQspi) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1016   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1017  IFX_EXTERN float32 IfxScuCcu_setQspiFrequency(float32 qspiFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1018  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1019  /** \brief API to set SPB frequency (with SPB divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1020   * This API configure SPB divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1021   * \param spbFreq Desired SPB frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1022   * \return Actual SPB frequency in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1023   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1024  IFX_EXTERN float32 IfxScuCcu_setSpbFrequency(float32 spbFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1025  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1026  /** \brief API to set SRI frequency (with SRI divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1027   * This API configure Sri divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1028   * \param sriFreq Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1029   * \return Actual Sri frequency (fSRI) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1030   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1031  IFX_EXTERN float32 IfxScuCcu_setSriFrequency(float32 sriFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1032  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1033  /** \brief API to set STM frequency (with STM divider)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1034   * This API configure Stm divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1035   * \param stmFreq Stm frequency (fASCLINF) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1036   * \return Actual Stm frequency (fSTM) in Hz
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1037   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1038  IFX_EXTERN float32 IfxScuCcu_setStmFrequency(float32 stmFreq);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1039  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1040  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1041  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1042  /** \addtogroup IfxLld_Scu_Std_Ccu_Ccu_Configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1043   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1044  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1045  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1046  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1047  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1048  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1049  /** \brief This inline function configures the Ccu SYS PLLs initial step and PER PLL.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1050   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1051  IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1052  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1053  /** \brief Inlined API for clock distribution
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1054   * For each CCUCON register update the configured value with the mask.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1055   * \param clockDistributionConfig pointer to clock distribution structure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1056   * \return TRUE: Operation successful, FALSE: Operation Failure
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1057   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1058  IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1059  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1060  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1061  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1062  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1063  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1064  /** \brief API for clock distribution.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1065   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1066   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1067  IFX_EXTERN void IfxScuCcu_distributeClock(IfxScuCcu_ClockDistributionConfig *clockDistributionConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1068  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1069  /** \brief API to initialize the SCU Clock Control Unit.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1070   * This API initialize the Sys PLL with ramp steps, BUS dividers and Per PLL for the configuration provided by the configuration structure.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1071   * FSyspll = (Fosc * Nsys)/(Psys * K2sys);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1072   * Fpll1= (Fosc * Nper)/(Pper * K2per);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1073   * Fpll2= (Fosc * Nper)/(Pper * K3per * 1.6); // if DIVBY = 0, else Fpll2= (Fosc * Nper)/(Pper * K3per * 2) // if DIVBY = 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1074   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1075   * Note: Following SMU alarms are disabled before the PLL configuration and Enabled at the end of PLL lock in the function.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1076   * PLL0,1,2 clock out of range frequency
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1077   * PLL0,1 VCO loss of lock event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1078   * System PLL Oscillator Watchdog, input clock out of range
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1079   * The application should store/restore these alarm configurations if required.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1080   * \param config Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1081   * \return Error status of the ScuCcu initialization process.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1082   * \retval TRUE: If an error occurred during initialization.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1083   * \retval FALSE: If initialization was successful.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1084   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1085  IFX_EXTERN boolean IfxScuCcu_init(const IfxScuCcu_Config *config);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1086  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1087  /** \brief Initializes the clock configuration with default values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1088   * \param cfg Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1089   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1090   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1091  IFX_EXTERN void IfxScuCcu_initConfig(IfxScuCcu_Config *cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1092  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1093  /** \brief API to switch to Backup clock from the current PLL frequency.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1094   * \param cfg Pointer to the configuration structure of the ScuCcu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1095   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1096   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1097  IFX_EXTERN void IfxScuCcu_switchToBackupClock(const IfxScuCcu_Config *cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1098  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1099  /** \} */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1100  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1101  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1102  /*-------------------------Inline Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1103  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1104  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1105  /** \brief Clear the trap status flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1106   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1107   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1108   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1109  IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1110  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1111  /** \brief Get trap disable flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1112   * \param cpuIndex Cpu index
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1113   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1114   * \return Trap request can be generated or not.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1115   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1116  IFX_INLINE boolean IfxScuCcu_getTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1117  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1118  /** \brief Get the trap status.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1119   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1120   * \return Trap was requested or not.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1121   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1122  IFX_INLINE boolean IfxScuCcu_getTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1123  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1124  /** \brief Set the trap disable flag
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1125   * \param cpuIndex Cpu index.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1126   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1127   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1128   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1129  IFX_INLINE void IfxScuCcu_setTrapDisableFlag(IfxCpu_ResourceCpu cpuIndex, IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1130  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1131  /** \brief Set the trap status flag.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1132   * \param request Trap request type.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1133   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1134   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1135  IFX_INLINE void IfxScuCcu_setTrapStatusFlag(IfxScuCcu_Traprequest request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1136  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1137  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1138   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1139  IFX_INLINE boolean IfxScuCcu_throttleSysPllClockInline(const IfxScuCcu_PllThrottleConfig *pllThrottleConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1140  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1141  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1142  /*-------------------------Global Function Prototypes-------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1143  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1144  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1145  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1146   * \param modamp modulation amplitude
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1147   * \param RGain_P RGain values
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1148   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1149   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1150  IFX_EXTERN void IfxScuCcu_calRGainParameters(IfxScuCcu_ModulationAmplitude modamp, IfxScuCcu_RGain_Values *RGain_P);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1151  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1152  /** \brief initialize modulation parameters
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1153   * \param Mod_Cfg modulation configuration
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1154   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1155   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1156  IFX_EXTERN void IfxScuCcu_modulation_init(const IfxScuCcu_Mod_Config *Mod_Cfg);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1157  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1158  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1159   * \return None
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1160   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1161  IFX_EXTERN void IfxScuCcu_throttleSysPllClock(IfxScuCcu_PllThrottleConfig *pllThrottleConfig);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1162  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1163  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1164  /*-------------------Global Exported Variables/Constants----------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1165  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1166  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1167  /** \brief maps to the IfxScuCcu_ModulationAmplitude enum
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1168   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1169  IFX_EXTERN IFX_CONST float32 IfxScuCcu_MA_percent[IfxScuCcu_ModulationAmplitude_count];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1170  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1171  /** \brief Configuration structure for SCU CCU driver.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1172   * The values of this structure are defined as # defined macros in the implementation of Scu
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1173   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1174  IFX_EXTERN IFX_CONST IfxScuCcu_Config     IfxScuCcu_defaultClockConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1176  /** \brief default modulation config
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1177   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1178  IFX_EXTERN IFX_CONST IfxScuCcu_Mod_Config IfxScuCcu_defaultModConfig;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1179  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1180  IFX_EXTERN uint32                         IfxScuCcu_xtalFrequency;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1181  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1182  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1183  /*---------------------Inline Function Implementations------------------------*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1184  /******************************************************************************/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1185  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1186  IFX_INLINE void IfxScuCcu_clearTrapStatusFlag(IfxScuCcu_Traprequest request)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1187  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1188      uint32 trapclear = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1189      SCU_TRAPCLR.U |= (trapclear << request);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1190  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1192  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1193  IFX_INLINE boolean IfxScuCcu_configureCcuInitialStep(const IfxScuCcu_InitialStepConfig *pllInitStepCfg)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1194  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1195      uint8                                initError = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1196      uint16                               endinitSfty_pw;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1197  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1198      uint32                               timeoutCycleCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1199      const IfxScuCcu_pllsParameterConfig *pllsParamCfg;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1200      pllsParamCfg   = &pllInitStepCfg->pllsParameters;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1201      /*get the watch-dog passwords for usage with this function*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1202      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1203  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1204      /* Reset Safety ENDINIT, SCU_CCUCON registers are protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1205      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1206  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1207      timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1208  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1209      while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1210      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1211          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1212      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1213  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1214      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1215          Ifx_SCU_CCUCON0 scuCcucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1216          scuCcucon0.U        = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1217          scuCcucon0.B.CLKSEL = 0; /*Select the EVR as fsource0/1/2 for the clock distribution */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1218          scuCcucon0.B.UP     = 1; /*Update the ccucon0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1219          SCU_CCUCON0.U       = scuCcucon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1220      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1221  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1222      timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1223  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1224      while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1225      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1226          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1227      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1228  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1229      /*Disable SMU Alarms */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1230      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1231          SMU_KEYS.U    = (uint32)0xBCU;        /* Enable access to SMU registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1232          SMU_AG8CF0.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1233          SMU_AG8CF1.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1234          SMU_AG8CF2.U &= ~IFXSCUCCU_SMUALARM_MASK;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1235          SMU_KEYS.U    = (uint32)0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1236      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1237  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1238      /* Power down the both the PLLs before configuring registers*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1239      /* Both the PLLs are powered down to be sure for asynchronous PLL registers update cause no glitches */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1240      SCU_SYSPLLCON0.B.PLLPWD = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1241      SCU_PERPLLCON0.B.PLLPWD = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1242  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1243      timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1244  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1245      while ((SCU_SYSPLLSTAT.B.PWDSTAT == 0) || (SCU_PERPLLSTAT.B.PWDSTAT == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1246      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1247          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1248      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1249  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1250      /* Now configure the oscillator, required oscillator mode is external crystal */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1251  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1252      if ((pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fOsc0) || (pllsParamCfg->pllInputClockSelection == IfxScuCcu_PllInputClockSelection_fSysclk))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1253  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1254      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1255          Ifx_SCU_OSCCON scuOsccon;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1256          scuOsccon.U      = SCU_OSCCON.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1257  #if (IFX_CFG_SCU_EXT_CLOCK == 1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1258          scuOsccon.B.MODE = 2U;   /* external clock selected */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1259  #else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1260          scuOsccon.B.MODE = 0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1261  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1262  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1263          scuOsccon.B.OSCVAL = (uint32)(pllsParamCfg->xtalFrequency / 1000000U) - 15; /*XTAL range 16MHz to 40MHz*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1264          /*Note: Oscillator Watchdog Reset (OSCRES) is not required when the PLLs are powered down*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1265          SCU_OSCCON.U       = scuOsccon.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1266      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1267  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1268      /* Configure the initial steps for the system PLL*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1269      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1270          Ifx_SCU_SYSPLLCON0 sysPllCon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1271          sysPllCon0.U       = SCU_SYSPLLCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1272          sysPllCon0.B.PDIV  = pllsParamCfg->sysPllConfig.pDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1273          sysPllCon0.B.NDIV  = pllsParamCfg->sysPllConfig.nDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1274          sysPllCon0.B.INSEL = pllsParamCfg->pllInputClockSelection;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1275          SCU_SYSPLLCON0.U   = sysPllCon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1276      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1277  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1278      /* Configure the initial steps for the peripheral PLL*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1279      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1280          Ifx_SCU_PERPLLCON0 scuPerPllCon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1281          scuPerPllCon0.U       = SCU_PERPLLCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1282          scuPerPllCon0.B.DIVBY = pllsParamCfg->perPllConfig.k3DividerBypass;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1283          scuPerPllCon0.B.PDIV  = pllsParamCfg->perPllConfig.pDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1284          scuPerPllCon0.B.NDIV  = pllsParamCfg->perPllConfig.nDivider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1285          SCU_PERPLLCON0.U      = scuPerPllCon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1286      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1288      /* Power up the both the PLLs before configuring registers*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1289      SCU_SYSPLLCON0.B.PLLPWD = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1290      SCU_PERPLLCON0.B.PLLPWD = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1291  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1292      timeoutCycleCount       = IFXSCUCCU_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1293  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1294      while ((SCU_SYSPLLSTAT.B.PWDSTAT == 1) || (SCU_PERPLLSTAT.B.PWDSTAT == 1))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1295      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1296          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1297      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1298  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1299      timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1300  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1301      while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1302             (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1303             (SCU_PERPLLSTAT.B.K3RDY == 0U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1304      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1305          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1306      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1307  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1308      SCU_SYSPLLCON1.B.K2DIV = pllsParamCfg->sysPllConfig.k2Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1309      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1310          Ifx_SCU_PERPLLCON1 scuPerPllCon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1311          scuPerPllCon1.U       = SCU_PERPLLCON1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1312          scuPerPllCon1.B.K2DIV = pllsParamCfg->perPllConfig.k2Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1313          scuPerPllCon1.B.K3DIV = pllsParamCfg->perPllConfig.k3Divider;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1314          SCU_PERPLLCON1.U      = scuPerPllCon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1315      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1316  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1317      timeoutCycleCount = IFXSCUCCU_PLL_KRDY_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1318  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1319      while ((SCU_SYSPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1320             (SCU_PERPLLSTAT.B.K2RDY == 0U) ||
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1321             (SCU_PERPLLSTAT.B.K3RDY == 0U))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1322      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1323          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1324      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1325  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1326      /*Check if the OSC frequencies are in the limit*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1327      timeoutCycleCount = IFXSCUCCU_OSCCON_PLLLV_OR_HV_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1329      while ((SCU_OSCCON.B.PLLLV == 0) && (SCU_OSCCON.B.PLLHV == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1330      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1331          IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1332      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1333  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1334      /* Now start PLL locking for latest set values*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1335      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1336          SCU_SYSPLLCON0.B.RESLD = 1;             /* Restart Sys PLL lock detection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1337          SCU_PERPLLCON0.B.RESLD = 1;             /* Restart Per PLL lock detection */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1338  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1339          timeoutCycleCount      = IFXSCUCCU_PLL_LOCK_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1340  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1341          while ((SCU_SYSPLLSTAT.B.LOCK == 0) || (SCU_PERPLLSTAT.B.LOCK == 0))
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1342          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1343              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1344          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1345      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1346      /*Enable SMU Alarms */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1347      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1348          SMU_KEYS.U = (uint32)0xBCU;           /* Enable access to SMU registers */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1349          SMU_CMD.U  = (uint32)0x00000005;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1350          SMU_AG8.U  = IFXSCUCCU_SMUALARM_MASK; /* Clear SMU Alarms*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1351          SMU_KEYS.U = (uint32)0U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1352      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1353      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1354          Ifx_SCU_CCUCON0 scu_ccucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1355          scu_ccucon0.U        = SCU_CCUCON0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1356          scu_ccucon0.B.CLKSEL = 1; /*Select the PLLs for fsource0/1/2 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1357          scu_ccucon0.B.UP     = 1; /*Update the ccucon0 register */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1358  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1359          timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1360  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1361          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1362          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1363              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1364          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1365  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1366          SCU_CCUCON0.U     = scu_ccucon0.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1367  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1368          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1369  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1370          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1371          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1372              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1373          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1374      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1375  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1376      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1377      return (boolean)initError;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1378  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1379  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1380  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1381  IFX_INLINE boolean IfxScuCcu_distributeClockInline(const IfxScuCcu_ClockDistributionConfig *clockDistributionConfig)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1382  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1383      uint16 endinitSfty_pw;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1384      uint32 timeoutCycleCount;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1385      uint32 initError = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1386  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1387      /*get the watch-dog passwords for usage with this function*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1388      endinitSfty_pw = IfxScuWdt_getSafetyWatchdogPasswordInline();
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1389  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1390      /* Reset Safety ENDINIT, SCU_CCUCON registers are protected*/
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1391      IfxScuWdt_clearSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1392  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1393      /*Configure the clock distribution */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1394      {                                                    /*Write CCUCON0 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1395          Ifx_SCU_CCUCON0 ccucon0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1396          ccucon0.U         = SCU_CCUCON0.U & ~clockDistributionConfig->ccucon0.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1397          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1398          ccucon0.U        |= (clockDistributionConfig->ccucon0.mask & clockDistributionConfig->ccucon0.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1399          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1400  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1401          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1402          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1403              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1404          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1405  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1406          SCU_CCUCON0.U     = ccucon0.U;      /*Set update bit explicitly to make above configurations effective */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1407          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1408  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1409          while (SCU_CCUCON0.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1410          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1411              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1412          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1413      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1414      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1415          /*Write CCUCON1 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1416          Ifx_SCU_CCUCON1 ccucon1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1417          ccucon1.U = SCU_CCUCON1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1418  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1419          if (ccucon1.B.CLKSELMCAN
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1420              || ccucon1.B.CLKSELMSC
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1421              || ccucon1.B.CLKSELQSPI)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1422          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1423              /* Non Zero ClockSel exists - set to Zero */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1424              /* CAUTION: this would briefly reset and set all clocks in CCUCON1! */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1425              ccucon1.U  = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1426              /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1427              ccucon1.U |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1428  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1429              /* set Clock selects to 0 */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1430              ccucon1.B.CLKSELMCAN = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1431              ccucon1.B.CLKSELMSC  = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1432              ccucon1.B.CLKSELQSPI = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1433  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1434              timeoutCycleCount    = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1435  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1436              while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1437              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1438                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1439              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1440  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1441              SCU_CCUCON1.U     = ccucon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1442  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1443              timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1444  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1445              while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1446              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1447                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1448              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1449          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1450  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1451          ccucon1.U         = SCU_CCUCON1.U & ~clockDistributionConfig->ccucon1.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1452          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1453          ccucon1.U        |= (clockDistributionConfig->ccucon1.mask & clockDistributionConfig->ccucon1.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1454  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1455          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1456  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1457          while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1458          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1459              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1460          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1461  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1462          SCU_CCUCON1.U     = ccucon1.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1463  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1464          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1465  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1466          while (SCU_CCUCON1.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1467          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1468              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1469          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1470      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1471  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1472      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1473          /*Write CCUCON2 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1474          Ifx_SCU_CCUCON2 ccucon2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1475          ccucon2.U = SCU_CCUCON2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1476  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1477          if (ccucon2.B.CLKSELASCLINS)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1478          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1479              /* Non Zero ClockSel exists - set to Zero */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1480              /* CAUTION: this would briefly reset and set ASCLINS clock in CCUCON2! */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1481              ccucon2.U               = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1482              /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1483              ccucon2.U              |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1484  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1485              ccucon2.B.CLKSELASCLINS = (uint32)0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1486  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1487              timeoutCycleCount       = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1488  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1489              while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1490              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1491                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1492              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1493  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1494              SCU_CCUCON2.U     = ccucon2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1495  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1496              timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1497  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1498              while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1499              {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1500                  IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1501              }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1502          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1503  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1504          ccucon2.U         = SCU_CCUCON2.U & ~clockDistributionConfig->ccucon2.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1505          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1506          ccucon2.U        |= (clockDistributionConfig->ccucon2.mask & clockDistributionConfig->ccucon2.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1507  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1508          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1509  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1510          while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1511          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1512              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1513          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1514  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1515          SCU_CCUCON2.U     = ccucon2.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1516  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1517          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1518  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1519          while (SCU_CCUCON2.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1520          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1521              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1522          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1523      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1524      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1525          /*Write CCUCON5 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1526          Ifx_SCU_CCUCON5 ccucon5;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1527          ccucon5.U         = SCU_CCUCON5.U & ~clockDistributionConfig->ccucon5.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1528          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1529          ccucon5.U        |= (clockDistributionConfig->ccucon5.mask & clockDistributionConfig->ccucon5.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1530          ccucon5.B.UP      = 1;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1531          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1532  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1533          while (SCU_CCUCON5.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1534          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1535              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1536          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1537  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1538          SCU_CCUCON5.U     = ccucon5.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1539          timeoutCycleCount = IFXSCUCCU_CCUCON_LCK_BIT_TIMEOUT_COUNT;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1540  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1541          while (SCU_CCUCON5.B.LCK != 0U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1542          {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1543              IFXSCUCCU_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1544          }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1545      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1546      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1547          /*Write CCUCON6 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1548          Ifx_SCU_CCUCON6 ccucon6;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1549          ccucon6.U     = SCU_CCUCON6.U & ~clockDistributionConfig->ccucon6.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1550          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1551          ccucon6.U    |= (clockDistributionConfig->ccucon6.mask & clockDistributionConfig->ccucon6.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1552          SCU_CCUCON6.U = ccucon6.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1553      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1554  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1555      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1556          /*Write CCUCON7 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1557          Ifx_SCU_CCUCON7 ccucon7;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1558          ccucon7.U     = SCU_CCUCON7.U & ~clockDistributionConfig->ccucon7.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1559          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1560          ccucon7.U    |= (clockDistributionConfig->ccucon7.mask & clockDistributionConfig->ccucon7.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1561          SCU_CCUCON7.U = ccucon7.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1562      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1563  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1564      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1565          /*Write CCUCON8 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1566          Ifx_SCU_CCUCON8 ccucon8;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1567          ccucon8.U     = SCU_CCUCON8.U & ~clockDistributionConfig->ccucon8.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1568          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1569          ccucon8.U    |= (clockDistributionConfig->ccucon8.mask & clockDistributionConfig->ccucon8.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1570          SCU_CCUCON8.U = ccucon8.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1571      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1572      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1573          /*Write CCUCON9 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1574          Ifx_SCU_CCUCON9 ccucon9;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1575          ccucon9.U     = SCU_CCUCON9.U & ~clockDistributionConfig->ccucon9.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1576          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1577          ccucon9.U    |= (clockDistributionConfig->ccucon9.mask & clockDistributionConfig->ccucon9.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1578          SCU_CCUCON9.U = ccucon9.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1579      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1580      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1581          /*Write CCUCON10 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1582          Ifx_SCU_CCUCON10 ccucon10;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1583          ccucon10.U     = SCU_CCUCON10.U & ~clockDistributionConfig->ccucon10.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1584          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1585          ccucon10.U    |= (clockDistributionConfig->ccucon10.mask & clockDistributionConfig->ccucon10.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1586          SCU_CCUCON10.U = ccucon10.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1587      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1588      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1589          /*Write CCUCON11 configuration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1590          Ifx_SCU_CCUCON11 ccucon11;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1591          ccucon11.U     = SCU_CCUCON11.U & ~clockDistributionConfig->ccucon11.mask;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1592          /*update with configured value */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1593          ccucon11.U    |= (clockDistributionConfig->ccucon11.mask & clockDistributionConfig->ccucon11.value);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1594          SCU_CCUCON11.U = ccucon11.U;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1595      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1596      IfxScuWdt_setSafetyEndinitInline(endinitSfty_pw);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1597      return (boolean)initError;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1598  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1599  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1600  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1601  IFX_INLINE float32 IfxScuCcu_getAdasFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1602  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1603      uint32 adasDiv = SCU_CCUCON5.B.ADASDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1604  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1605      return (adasDiv == (uint32)0) ? 0 : IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / adasDiv;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1606  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1607  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1608  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1609  IFX_INLINE float32 IfxScuCcu_getAdcFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1610  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1611      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1612  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1613  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1614  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1615  IFX_INLINE float32 IfxScuCcu_getAsclinFFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1616  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1617      float32 freq          = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1618  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1619      uint8   asclindiv[16] = {1, 1, 2, 3, 4, 5, 6, 6, 8, 8, 10, 10, 12, 12, 12, 15};
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1620  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1621      if (SCU_CCUCON2.B.ASCLINFDIV)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1622      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1623          freq = IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_2) / asclindiv[SCU_CCUCON2.B.ASCLINFDIV];
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1624      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1625  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1626      return freq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1627  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1628  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1629  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1630  IFX_INLINE float32 IfxScuCcu_getEbuFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1631  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1632      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_1);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1633  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1634  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1635  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1636  IFX_INLINE float32 IfxScuCcu_getEvrFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1637  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1638      return IFXSCU_EVR_OSC_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1639  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1640  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1641  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1642  IFX_INLINE float32 IfxScuCcu_getGethFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1643  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1644      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON5.B.GETHDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1645  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1646  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1647  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1648  IFX_INLINE float32 IfxScuCcu_getGtmFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1649  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1650      /* fGTM = fSOURCEGTM / GTMDIV ;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1651       * fSOURCEGTM = fSPB *2
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1652       */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1653      uint8   gtmDiv  = SCU_CCUCON0.B.GTMDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1654      float32 gtmFreq = 0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1655  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1656      if (gtmDiv == 0u)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1657      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1658          gtmFreq = 0.0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1659      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1660      else if (gtmDiv == 1U)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1661      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1662          gtmFreq = IfxScuCcu_getSpbFrequency() * 2;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1663      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1664      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1665  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1666      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1667          gtmFreq = IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / gtmDiv;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1668      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1669  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1670      return gtmFreq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1671  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1672  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1673  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1674  IFX_INLINE float32 IfxScuCcu_getI2cFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1675  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1676      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_2) / SCU_CCUCON1.B.I2CDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1677  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1678  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1679  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1680  IFX_INLINE float32 IfxScuCcu_getMcanhFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1681  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1682      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON5.B.MCANHDIV;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1683  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1684  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1685  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1686  IFX_INLINE float32 IfxScuCcu_getOsc0Frequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1687  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1688      return (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1689  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1690  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1691  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1692  IFX_INLINE float32 IfxScuCcu_getOscFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1693  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1694      float32 freq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1695  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1696      if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc1)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1697      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1698          freq = IFXSCU_EVR_OSC_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1699      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1700      else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fOsc0)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1701      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1702          freq = (float32)IFX_CFG_SCU_XTAL_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1703      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1704      else if (SCU_SYSPLLCON0.B.INSEL == IfxScuCcu_PllInputClockSelection_fSysclk)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1705      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1706          freq = IFX_CFG_SCU_SYSCLK_FREQUENCY;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1707      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1708      else
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1709      {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1710          /* Reserved values, this */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1711          freq = 0.0;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1712      }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1713  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1714      return freq;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1715  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1716  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1717  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1718  IFX_INLINE IfxScuCcu_PllInputClockSelection IfxScuCcu_getSourceSelection(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1719  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1720      return (IfxScuCcu_PllInputClockSelection)SCU_CCUCON0.B.CLKSEL;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1721  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1722  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1723  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1724  IFX_INLINE float32 IfxScuCcu_getStmFrequency(void)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1725  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\4_McHal\Tricore\Scu\Std\IfxScuCcu.h	  1726      return IfxScuCcu_getSourceFrequency(IfxScuCcu_Fsource_0) / SCU_CCUCON0.B.STMDIV;
	mov	d4,#0
	call	IfxScuCcu_getSourceFrequency
.L387:
	movh.a	a2,#61443
	ld.bu	d15,[a2]@los(0xf0036030)
	and	d15,#15
	itof	d15,d15
.L388:
	div.f	d15,d2,d15

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   299      g_AppCpu0.info.stmFreq = IfxStm_getFrequency(&MODULE_STM0);
	st.w	[a15]12,d15
.L201:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   300  }
	ret
.L188:
	
__get_clk_function_end:
	.size	get_clk,__get_clk_function_end-get_clk
.L84:
	; End of function
	
	.sdecl	'.text.cpuport.tricore_trap_yield_for_task',code,cluster('tricore_trap_yield_for_task')
	.sect	'.text.cpuport.tricore_trap_yield_for_task'
	.align	2
	
	.global	tricore_trap_yield_for_task

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   301  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   302  void tricore_trap_yield_for_task( int iTrapIdentification )
; Function tricore_trap_yield_for_task
.L45:
tricore_trap_yield_for_task:	.type	func

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   303  {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   304    switch( iTrapIdentification )
	jne	d4,#0,.L13
.L468:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   305    {
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   306      case 0:
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   307          trigger_scheduling();
	j	trigger_scheduling

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   308        break;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   309  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   310      default:
.L13:

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   311        /* Unimplemented trap called. */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   312        /* TODO */
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   313        break;
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   314    }
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   315  }
	ret
.L251:
	
__tricore_trap_yield_for_task_function_end:
	.size	tricore_trap_yield_for_task,__tricore_trap_yield_for_task_function_end-tricore_trap_yield_for_task
.L119:
	; End of function
	
	.sdecl	'.bss.cpuport.tricore_timers',data,cluster('tricore_timers')
	.sect	'.bss.cpuport.tricore_timers'
	.align	4
tricore_timers:	.type	object
	.size	tricore_timers,48
	.space	48
	.sdecl	'.zrodata.cpuport.STMs',data,rom,cluster('STMs')
	.sect	'.zrodata.cpuport.STMs'
	.align	4
STMs:	.type	object
	.size	STMs,8
	.word	-268431360,-268431104
	.sdecl	'.zrodata.cpuport.GPSR',data,rom,cluster('GPSR')
	.sect	'.zrodata.cpuport.GPSR'
	.align	4
GPSR:	.type	object
	.size	GPSR,8
	.word	-268203632,-268203600
	.sdecl	'.zdata.cpuport.rt_interrupt_from_thread',data,cluster('rt_interrupt_from_thread')
	.sect	'.zdata.cpuport.rt_interrupt_from_thread'
	.align	2
rt_interrupt_from_thread:	.type	object
	.size	rt_interrupt_from_thread,4
	.space	4
	.sdecl	'.zdata.cpuport.rt_interrupt_to_thread',data,cluster('rt_interrupt_to_thread')
	.sect	'.zdata.cpuport.rt_interrupt_to_thread'
	.align	2
rt_interrupt_to_thread:	.type	object
	.size	rt_interrupt_to_thread,4
	.space	4
	.sdecl	'.zdata.cpuport.rt_thread_switch_interrupt_flag',data,cluster('rt_thread_switch_interrupt_flag')
	.sect	'.zdata.cpuport.rt_thread_switch_interrupt_flag'
	.align	2
rt_thread_switch_interrupt_flag:	.type	object
	.size	rt_thread_switch_interrupt_flag,4
	.space	4
	.sdecl	'.bss.cpuport.g_AppCpu0',data,cluster('g_AppCpu0')
	.sect	'.bss.cpuport.g_AppCpu0'
	.global	g_AppCpu0
	.align	4
g_AppCpu0:	.type	object
	.size	g_AppCpu0,20
	.space	20
	.calls	'rt_hw_systick_init','IfxStm_Timer_initConfig'
	.calls	'rt_hw_systick_init','IfxStm_Timer_init'
	.calls	'rt_hw_systick_init','IfxStm_Timer_run'
	.calls	'rt_hw_usart_init','initUART'
	.calls	'KERNEL_INTERRUPT','rt_interrupt_enter'
	.calls	'KERNEL_INTERRUPT','IfxStm_Timer_acknowledgeTimerIrq'
	.calls	'KERNEL_INTERRUPT','rt_tick_increase'
	.calls	'KERNEL_INTERRUPT','rt_interrupt_leave'
	.calls	'KERNEL_YIELD','trigger_scheduling'
	.calls	'rt_hw_board_init','rt_hw_systick_init'
	.calls	'rt_hw_board_init','rt_hw_usart_init'
	.calls	'rt_hw_board_init','rt_components_board_init'
	.calls	'rt_hw_context_switch','rt_hw_interrupt_disable'
	.calls	'rt_hw_context_switch','rt_hw_interrupt_enable'
	.calls	'rt_hw_context_switch_interrupt','rt_hw_interrupt_disable'
	.calls	'rt_hw_context_switch_interrupt','rt_hw_interrupt_enable'
	.calls	'rt_hw_context_switch_to','rt_hw_interrupt_disable'
	.calls	'rt_hw_context_switch_to','rt_hw_interrupt_enable'
	.calls	'rt_hw_stack_init','rt_hw_interrupt_disable'
	.calls	'rt_hw_stack_init','rt_hw_interrupt_enable'
	.calls	'rt_hw_stack_init','memset'
	.calls	'get_clk','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'get_clk','IfxScuWdt_disableCpuWatchdog'
	.calls	'get_clk','IfxScuWdt_getSafetyWatchdogPassword'
	.calls	'get_clk','IfxScuWdt_disableSafetyWatchdog'
	.calls	'get_clk','IfxScuCcu_getPllFrequency'
	.calls	'get_clk','IfxScuCcu_getCpuFrequency'
	.calls	'get_clk','IfxScuCcu_getSpbFrequency'
	.calls	'get_clk','IfxScuCcu_getSourceFrequency'
	.calls	'tricore_trap_yield_for_task','trigger_scheduling'
	.calls	'KERNEL_YIELD','.cocofun_3'
	.calls	'rt_hw_context_switch','.cocofun_2'
	.calls	'rt_hw_context_switch_interrupt','.cocofun_2'
	.calls	'rt_hw_context_switch_interrupt','.cocofun_3'
	.calls	'rt_hw_interrupt_disable','',0
	.calls	'rt_hw_interrupt_enable','',0
	.calls	'rt_hw_systick_init','',48
	.calls	'rt_hw_usart_init','',0
	.calls	'trigger_scheduling','',0
	.calls	'KERNEL_INTERRUPT','',0
	.calls	'KERNEL_YIELD','',0
	.calls	'.cocofun_3','',0
	.calls	'rt_hw_board_init','',0
	.calls	'rt_hw_context_switch','',0
	.calls	'.cocofun_2','',0
	.calls	'rt_hw_context_switch_interrupt','',0
	.calls	'rt_hw_context_switch_to','',0
	.calls	'rt_hw_stack_init','',16
	.calls	'get_clk','',0
	.extern	rt_tick_increase
	.extern	rt_interrupt_enter
	.extern	rt_interrupt_leave
	.extern	rt_components_board_init
	.extern	IfxScuWdt_disableCpuWatchdog
	.extern	IfxScuWdt_disableSafetyWatchdog
	.extern	IfxScuWdt_getCpuWatchdogPassword
	.extern	IfxScuWdt_getSafetyWatchdogPassword
	.extern	IfxScuCcu_getCpuFrequency
	.extern	IfxScuCcu_getPllFrequency
	.extern	IfxScuCcu_getSourceFrequency
	.extern	IfxScuCcu_getSpbFrequency
	.extern	IfxStm_Timer_acknowledgeTimerIrq
	.extern	IfxStm_Timer_run
	.extern	IfxStm_Timer_init
	.extern	IfxStm_Timer_initConfig
	.extern	initUART
	.extern	memset
	.calls	'tricore_trap_yield_for_task','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L47:
	.word	191319
	.half	3
	.word	.L48
	.byte	4
.L46:
	.byte	1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L49
	.byte	2,1,1,3
	.word	174
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,58,17,1,1,5
	.byte	'fun',0,1,58,43
	.word	177
	.byte	6,0,7
	.byte	'__fract',0,4,128,1,7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,149,2,18
	.word	222
	.byte	1,1,5
	.byte	'a',0,1,149,2,44
	.word	234
	.byte	6,0,4
	.byte	'Ifx__stopPerfCounters',0,3,1,169,2,17,1,1,6,0,7
	.byte	'unsigned long long int',0,8,7,9
	.byte	'void',0
.L146:
	.byte	3
	.word	346
	.byte	8
	.byte	'__ld64',0,3,2,132,1,19
	.word	320
	.byte	1,1,5
	.byte	'addr',0,2,132,1,32
	.word	352
	.byte	6,0,4
	.byte	'__st64',0,3,2,140,1,17,1,1,5
	.byte	'addr',0,2,140,1,30
	.word	352
	.byte	5
	.byte	'value',0,2,140,1,43
	.word	320
	.byte	6,0,7
	.byte	'unsigned int',0,4,7
.L252:
	.byte	7
	.byte	'int',0,4,5,7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,4,238,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	461
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	461
	.byte	16,0,2,35,0,0,12,4,189,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	477
	.byte	4,2,35,0,0,7
	.byte	'unsigned char',0,1,8,7
	.byte	'unsigned short int',0,2,7,10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,4,247,9,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	613
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,12,4,197,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	652
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,4,135,10,16,4,11
	.byte	'AE',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	613
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	630
	.byte	16,0,2,35,2,0,12,4,205,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	918
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_SCU_WDTCPU',0,4,136,17,25,12,13
	.byte	'CON0',0
	.word	573
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	878
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	1109
	.byte	4,2,35,8,0,14
	.word	1149
	.byte	3
	.word	1212
	.byte	4
	.byte	'IfxScuWdt_clearCpuEndinitInline',0,3,3,164,4,17,1,1,5
	.byte	'watchdog',0,3,164,4,65
	.word	1217
	.byte	5
	.byte	'password',0,3,164,4,82
	.word	630
	.byte	6,0,4
	.byte	'IfxScuWdt_clearSafetyEndinitInline',0,3,3,197,4,17,1,1,5
	.byte	'password',0,3,197,4,59
	.word	630
	.byte	6,0,4
	.byte	'IfxScuWdt_setCpuEndinitInline',0,3,3,144,5,17,1,1,5
	.byte	'watchdog',0,3,144,5,63
	.word	1217
	.byte	5
	.byte	'password',0,3,144,5,80
	.word	630
	.byte	6,0,4
	.byte	'IfxScuWdt_setSafetyEndinitInline',0,3,3,177,5,17,1,1,5
	.byte	'password',0,3,177,5,57
	.word	630
	.byte	6,0,8
	.byte	'IfxScuWdt_getCpuWatchdogPasswordInline',0,3,3,220,4,19
	.word	630
	.byte	1,1,5
	.byte	'watchdog',0,3,220,4,74
	.word	1217
	.byte	6,0,8
	.byte	'IfxScuWdt_getSafetyWatchdogPasswordInline',0,3,3,129,5,19
	.word	630
	.byte	1,1,6,0,10
	.byte	'_Ifx_P_OUT_Bits',0,6,145,3,16,4,11
	.byte	'P0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,12,6,171,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1627
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMR_Bits',0,6,171,2,16,4,11
	.byte	'PS0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'PCL0',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	613
	.byte	1,0,2,35,3,0,12,6,251,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1943
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ID_Bits',0,6,133,1,16,4,11
	.byte	'MODREV',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	630
	.byte	16,0,2,35,2,0,12,6,155,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2514
	.byte	4,2,35,0,0,15,4
	.word	613
	.byte	16,3,0,10
	.byte	'_Ifx_P_IOCR0_Bits',0,6,163,1,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	3,5,2,35,0,11
	.byte	'PC0',0,1
	.word	613
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'PC1',0,1
	.word	613
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	613
	.byte	3,5,2,35,2,11
	.byte	'PC2',0,1
	.word	613
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	3,5,2,35,3,11
	.byte	'PC3',0,1
	.word	613
	.byte	5,0,2,35,3,0,12,6,171,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2643
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR4_Bits',0,6,189,1,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	3,5,2,35,0,11
	.byte	'PC4',0,1
	.word	613
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'PC5',0,1
	.word	613
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	613
	.byte	3,5,2,35,2,11
	.byte	'PC6',0,1
	.word	613
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	3,5,2,35,3,11
	.byte	'PC7',0,1
	.word	613
	.byte	5,0,2,35,3,0,12,6,187,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2858
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR8_Bits',0,6,202,1,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	3,5,2,35,0,11
	.byte	'PC8',0,1
	.word	613
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'PC9',0,1
	.word	613
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	613
	.byte	3,5,2,35,2,11
	.byte	'PC10',0,1
	.word	613
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	3,5,2,35,3,11
	.byte	'PC11',0,1
	.word	613
	.byte	5,0,2,35,3,0,12,6,195,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3073
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IOCR12_Bits',0,6,176,1,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	3,5,2,35,0,11
	.byte	'PC12',0,1
	.word	613
	.byte	5,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'PC13',0,1
	.word	613
	.byte	5,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	613
	.byte	3,5,2,35,2,11
	.byte	'PC14',0,1
	.word	613
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	3,5,2,35,3,11
	.byte	'PC15',0,1
	.word	613
	.byte	5,0,2,35,3,0,12,6,179,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3290
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_IN_Bits',0,6,141,1,16,4,11
	.byte	'P0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'P8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'P9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'P10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'P11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'P12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'P13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'P14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'P15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,12,6,163,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3510
	.byte	4,2,35,0,0,15,24
	.word	613
	.byte	16,23,0,10
	.byte	'_Ifx_P_PDR0_Bits',0,6,212,3,16,4,11
	.byte	'PD0',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	613
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'PD2',0,1
	.word	613
	.byte	2,6,2,35,1,11
	.byte	'PL2',0,1
	.word	613
	.byte	2,4,2,35,1,11
	.byte	'PD3',0,1
	.word	613
	.byte	2,2,2,35,1,11
	.byte	'PL3',0,1
	.word	613
	.byte	2,0,2,35,1,11
	.byte	'PD4',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'PL4',0,1
	.word	613
	.byte	2,4,2,35,2,11
	.byte	'PD5',0,1
	.word	613
	.byte	2,2,2,35,2,11
	.byte	'PL5',0,1
	.word	613
	.byte	2,0,2,35,2,11
	.byte	'PD6',0,1
	.word	613
	.byte	2,6,2,35,3,11
	.byte	'PL6',0,1
	.word	613
	.byte	2,4,2,35,3,11
	.byte	'PD7',0,1
	.word	613
	.byte	2,2,2,35,3,11
	.byte	'PL7',0,1
	.word	613
	.byte	2,0,2,35,3,0,12,6,195,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3834
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PDR1_Bits',0,6,233,3,16,4,11
	.byte	'PD8',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'PL8',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'PD9',0,1
	.word	613
	.byte	2,2,2,35,0,11
	.byte	'PL9',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'PD10',0,1
	.word	613
	.byte	2,6,2,35,1,11
	.byte	'PL10',0,1
	.word	613
	.byte	2,4,2,35,1,11
	.byte	'PD11',0,1
	.word	613
	.byte	2,2,2,35,1,11
	.byte	'PL11',0,1
	.word	613
	.byte	2,0,2,35,1,11
	.byte	'PD12',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'PL12',0,1
	.word	613
	.byte	2,4,2,35,2,11
	.byte	'PD13',0,1
	.word	613
	.byte	2,2,2,35,2,11
	.byte	'PL13',0,1
	.word	613
	.byte	2,0,2,35,2,11
	.byte	'PD14',0,1
	.word	613
	.byte	2,6,2,35,3,11
	.byte	'PL14',0,1
	.word	613
	.byte	2,4,2,35,3,11
	.byte	'PD15',0,1
	.word	613
	.byte	2,2,2,35,3,11
	.byte	'PL15',0,1
	.word	613
	.byte	2,0,2,35,3,0,12,6,203,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4138
	.byte	4,2,35,0,0,15,8
	.word	613
	.byte	16,7,0,10
	.byte	'_Ifx_P_ESR_Bits',0,6,111,16,4,11
	.byte	'EN0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,12,6,147,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4463
	.byte	4,2,35,0,0,15,12
	.word	613
	.byte	16,11,0,10
	.byte	'_Ifx_P_PDISC_Bits',0,6,190,3,16,4,11
	.byte	'PDIS0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'PDIS2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'PDIS3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'PDIS4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'PDIS5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'PDIS6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'PDIS7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'PDIS8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'PDIS9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'PDIS10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'PDIS11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'PDIS12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'PDIS13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'PDIS14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'PDIS15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,12,6,187,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4803
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_PCSR_Bits',0,6,167,3,16,4,11
	.byte	'SEL0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'SEL1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'SEL2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'SEL3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'SEL4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'SEL5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'SEL6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'SEL7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'SEL8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'SEL9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'SEL10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'SEL11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'SEL12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'SEL13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'SEL14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'SEL15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	15,1,2,35,2,11
	.byte	'LCK',0,1
	.word	613
	.byte	1,0,2,35,3,0,12,6,179,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5169
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR0_Bits',0,6,230,2,16,4,11
	.byte	'PS0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	438
	.byte	28,0,2,35,0,0,12,6,139,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5533
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR4_Bits',0,6,251,2,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'PS4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	438
	.byte	24,0,2,35,0,0,12,6,155,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5680
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR8_Bits',0,6,134,3,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'PS8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	438
	.byte	20,0,2,35,0,0,12,6,163,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5849
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR12_Bits',0,6,240,2,16,4,11
	.byte	'reserved_0',0,2
	.word	630
	.byte	12,4,2,35,0,11
	.byte	'PS12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,12,6,147,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6021
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR0_Bits',0,6,128,2,16,4,11
	.byte	'reserved_0',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	630
	.byte	12,0,2,35,2,0,12,6,219,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6196
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR4_Bits',0,6,149,2,16,4,11
	.byte	'reserved_0',0,4
	.word	438
	.byte	20,12,2,35,0,11
	.byte	'PCL4',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	8,0,2,35,3,0,12,6,235,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6370
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR8_Bits',0,6,160,2,16,4,11
	.byte	'reserved_0',0,4
	.word	438
	.byte	24,8,2,35,0,11
	.byte	'PCL8',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,12,6,243,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6544
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR12_Bits',0,6,139,2,16,4,11
	.byte	'reserved_0',0,4
	.word	438
	.byte	28,4,2,35,0,11
	.byte	'PCL12',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	613
	.byte	1,0,2,35,3,0,12,6,227,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6720
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMSR_Bits',0,6,208,2,16,4,11
	.byte	'PS0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'PS2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'PS3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'PS4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'PS5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'PS6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'PS7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'PS8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'PS9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'PS10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'PS11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'PS12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'PS13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'PS14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'PS15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,12,6,131,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6876
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_OMCR_Bits',0,6,234,1,16,4,11
	.byte	'reserved_0',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'PCL2',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'PCL3',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'PCL4',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'PCL5',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'PCL6',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'PCL7',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'PCL8',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'PCL9',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'PCL10',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'PCL11',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'PCL12',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'PCL13',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'PCL14',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'PCL15',0,1
	.word	613
	.byte	1,0,2,35,3,0,12,6,211,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7209
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_LPCR_Bits',0,6,215,1,16,4,11
	.byte	'REN_CTRL',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'RX_EN',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TERM',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'LRXTERM',0,1
	.word	613
	.byte	3,2,2,35,0,11
	.byte	'LVDSM',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'PS',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'TEN_CTRL',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'TX_EN',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'VDIFFADJ',0,1
	.word	613
	.byte	2,4,2,35,1,11
	.byte	'VOSDYN',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'VOSEXT',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'TX_PD',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'TX_PWDPD',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,12,6,203,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7557
	.byte	4,2,35,0,0,15,32
	.word	7837
	.byte	16,7,0,15,56
	.word	613
	.byte	16,55,0,10
	.byte	'_Ifx_P_ACCEN1_Bits',0,6,105,16,4,11
	.byte	'reserved_0',0,4
	.word	438
	.byte	32,0,2,35,0,0,12,6,139,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7895
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P_ACCEN0_Bits',0,6,68,16,4,11
	.byte	'EN0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	613
	.byte	1,0,2,35,3,0,12,6,131,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	7982
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_P',0,6,220,5,25,128,2,13
	.byte	'OUT',0
	.word	1903
	.byte	4,2,35,0,13
	.byte	'OMR',0
	.word	2474
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	2594
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2634
	.byte	4,2,35,12,13
	.byte	'IOCR0',0
	.word	2818
	.byte	4,2,35,16,13
	.byte	'IOCR4',0
	.word	3033
	.byte	4,2,35,20,13
	.byte	'IOCR8',0
	.word	3250
	.byte	4,2,35,24,13
	.byte	'IOCR12',0
	.word	3470
	.byte	4,2,35,28,13
	.byte	'reserved_20',0
	.word	2634
	.byte	4,2,35,32,13
	.byte	'IN',0
	.word	3785
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	3825
	.byte	24,2,35,40,13
	.byte	'PDR0',0
	.word	4098
	.byte	4,2,35,64,13
	.byte	'PDR1',0
	.word	4414
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	4454
	.byte	8,2,35,72,13
	.byte	'ESR',0
	.word	4754
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	4794
	.byte	12,2,35,84,13
	.byte	'PDISC',0
	.word	5129
	.byte	4,2,35,96,13
	.byte	'PCSR',0
	.word	5493
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	4454
	.byte	8,2,35,104,13
	.byte	'OMSR0',0
	.word	5640
	.byte	4,2,35,112,13
	.byte	'OMSR4',0
	.word	5809
	.byte	4,2,35,116,13
	.byte	'OMSR8',0
	.word	5981
	.byte	4,2,35,120,13
	.byte	'OMSR12',0
	.word	6156
	.byte	4,2,35,124,13
	.byte	'OMCR0',0
	.word	6330
	.byte	4,3,35,128,1,13
	.byte	'OMCR4',0
	.word	6504
	.byte	4,3,35,132,1,13
	.byte	'OMCR8',0
	.word	6680
	.byte	4,3,35,136,1,13
	.byte	'OMCR12',0
	.word	6836
	.byte	4,3,35,140,1,13
	.byte	'OMSR',0
	.word	7169
	.byte	4,3,35,144,1,13
	.byte	'OMCR',0
	.word	7517
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	4454
	.byte	8,3,35,152,1,13
	.byte	'LPCR',0
	.word	7877
	.byte	32,3,35,160,1,13
	.byte	'reserved_C0',0
	.word	7886
	.byte	56,3,35,192,1,13
	.byte	'ACCEN1',0
	.word	7942
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	8509
	.byte	4,3,35,252,1,0,14
	.word	8549
	.byte	3
	.word	9119
	.byte	17,5,187,1,9,4,18
	.byte	'IfxPort_State_notChanged',0,0,18
	.byte	'IfxPort_State_high',0,1,18
	.byte	'IfxPort_State_low',0,128,128,4,18
	.byte	'IfxPort_State_toggled',0,129,128,4,0,4
	.byte	'IfxPort_setPinState',0,3,5,169,5,17,1,1,5
	.byte	'port',0,5,169,5,44
	.word	9124
	.byte	5
	.byte	'pinIndex',0,5,169,5,56
	.word	613
	.byte	5
	.byte	'action',0,5,169,5,80
	.word	9129
	.byte	6,0,4
	.byte	'IfxScuCcu_wait',0,3,7,157,14,17,1,1,5
	.byte	'timeSec',0,7,157,14,40
	.word	234
	.byte	19,6,0,0
.L206:
	.byte	8
	.byte	'IfxScuCcu_getStmFrequency',0,3,7,188,13,20
	.word	234
	.byte	1,1
.L207:
	.byte	6,0,17,9,161,1,9,1,18
	.byte	'IfxCpu_ResourceCpu_0',0,0,18
	.byte	'IfxCpu_ResourceCpu_1',0,1,18
	.byte	'IfxCpu_ResourceCpu_2',0,2,18
	.byte	'IfxCpu_ResourceCpu_3',0,3,18
	.byte	'IfxCpu_ResourceCpu_4',0,4,18
	.byte	'IfxCpu_ResourceCpu_5',0,5,18
	.byte	'IfxCpu_ResourceCpu_none',0,6,0
.L194:
	.byte	8
	.byte	'IfxCpu_getCoreIndex',0,3,8,235,6,31
	.word	9394
	.byte	1,1
.L197:
	.byte	6,0
.L160:
	.byte	8
	.byte	'IfxCpu_areInterruptsEnabled',0,3,8,233,5,20
	.word	613
	.byte	1,1
.L162:
	.byte	6,0
.L157:
	.byte	8
	.byte	'IfxCpu_disableInterrupts',0,3,8,241,5,20
	.word	613
	.byte	1,1
.L159:
	.byte	19,6,0,0,4
	.byte	'IfxCpu_enableInterrupts',0,3,8,251,5,17,1,1,6,0,4
	.byte	'IfxCpu_forceDisableInterrupts',0,3,8,191,6,17,1,1,6,0
.L171:
	.byte	4
	.byte	'IfxCpu_restoreInterrupts',0,3,8,134,8,17,1,1
.L172:
	.byte	5
	.byte	'enabled',0,8,134,8,50
	.word	613
.L174:
	.byte	6,0
.L176:
	.byte	7
	.byte	'unsigned long int',0,4,7,8
	.byte	'IfxCpu_getPerformanceCounter',0,3,8,255,6,19
	.word	9808
	.byte	1,1,5
	.byte	'address',0,8,255,6,55
	.word	630
	.byte	6,0,8
	.byte	'IfxCpu_getPerformanceCounterStickyOverflow',0,3,8,156,7,20
	.word	613
	.byte	1,1,5
	.byte	'address',0,8,156,7,70
	.word	630
	.byte	6,0,4
	.byte	'IfxCpu_updatePerformanceCounter',0,3,8,138,9,17,1,1,5
	.byte	'address',0,8,138,9,56
	.word	9808
	.byte	5
	.byte	'count',0,8,138,9,72
	.word	9808
	.byte	19,6,0,0,10
	.byte	'_Ifx_SRC_SRCR_Bits',0,11,68,16,4,11
	.byte	'SRPN',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	613
	.byte	3,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	613
	.byte	2,0,2,35,1,11
	.byte	'ECC',0,1
	.word	613
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	613
	.byte	3,0,2,35,2,11
	.byte	'SRR',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	613
	.byte	1,0,2,35,3,0,12,11,93,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10039
	.byte	4,2,35,0,0,14
	.word	10329
	.byte	3
	.word	10368
.L240:
	.byte	4
	.byte	'IfxSrc_clearRequest',0,3,10,247,1,17,1,1
.L242:
	.byte	5
	.byte	'src',0,10,247,1,60
	.word	10373
.L244:
	.byte	6,0
.L245:
	.byte	4
	.byte	'IfxSrc_enable',0,3,10,137,2,17,1,1
.L248:
	.byte	5
	.byte	'src',0,10,137,2,54
	.word	10373
.L250:
	.byte	6,0,17,12,66,9,1,18
	.byte	'IfxSrc_Tos_cpu0',0,0,18
	.byte	'IfxSrc_Tos_dma',0,1,18
	.byte	'IfxSrc_Tos_cpu1',0,2,18
	.byte	'IfxSrc_Tos_cpu2',0,3,18
	.byte	'IfxSrc_Tos_cpu3',0,4,18
	.byte	'IfxSrc_Tos_cpu4',0,5,18
	.byte	'IfxSrc_Tos_cpu5',0,6,0
.L230:
	.byte	4
	.byte	'IfxSrc_init',0,3,10,143,2,17,1,1
.L233:
	.byte	5
	.byte	'src',0,10,143,2,52
	.word	10373
.L235:
	.byte	5
	.byte	'typOfService',0,10,143,2,68
	.word	10458
.L237:
	.byte	5
	.byte	'priority',0,10,143,2,95
	.word	630
.L239:
	.byte	19,6,0,0,10
	.byte	'_Ifx_STM_CLC_Bits',0,14,123,16,4,11
	.byte	'DISR',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	438
	.byte	28,0,2,35,0,0,12,14,173,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10666
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_ID_Bits',0,14,165,1,16,4,11
	.byte	'MODREV',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'MODNUM',0,2
	.word	630
	.byte	16,0,2,35,2,0,12,14,205,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10822
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_TIM0_Bits',0,14,216,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	438
	.byte	32,0,2,35,0,0,12,14,253,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	10941
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_TIM1_Bits',0,14,228,1,16,4,11
	.byte	'STM_35_4',0,4
	.word	438
	.byte	32,0,2,35,0,0,12,14,141,3,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11027
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_TIM2_Bits',0,14,234,1,16,4,11
	.byte	'STM_39_8',0,4
	.word	438
	.byte	32,0,2,35,0,0,12,14,149,3,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11113
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_TIM3_Bits',0,14,240,1,16,4,11
	.byte	'STM_43_12',0,4
	.word	438
	.byte	32,0,2,35,0,0,12,14,157,3,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11199
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_TIM4_Bits',0,14,246,1,16,4,11
	.byte	'STM_47_16',0,4
	.word	438
	.byte	32,0,2,35,0,0,12,14,165,3,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11286
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_TIM5_Bits',0,14,252,1,16,4,11
	.byte	'STM_51_20',0,4
	.word	438
	.byte	32,0,2,35,0,0,12,14,173,3,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11373
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_TIM6_Bits',0,14,130,2,16,4,11
	.byte	'STM_63_32',0,4
	.word	438
	.byte	32,0,2,35,0,0,12,14,181,3,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11460
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_CAP_Bits',0,14,111,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	438
	.byte	32,0,2,35,0,0,12,14,157,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11547
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_CMP_Bits',0,14,146,1,16,4,11
	.byte	'CMPVAL',0,4
	.word	438
	.byte	32,0,2,35,0,0,12,14,189,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11635
	.byte	4,2,35,0,0,15,8
	.word	11678
	.byte	16,1,0,10
	.byte	'_Ifx_STM_CMCON_Bits',0,14,133,1,16,4,11
	.byte	'MSIZE0',0,1
	.word	613
	.byte	5,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	613
	.byte	3,0,2,35,0,11
	.byte	'MSTART0',0,1
	.word	613
	.byte	5,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	613
	.byte	3,0,2,35,1,11
	.byte	'MSIZE1',0,1
	.word	613
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	613
	.byte	3,0,2,35,2,11
	.byte	'MSTART1',0,1
	.word	613
	.byte	5,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	613
	.byte	3,0,2,35,3,0,12,14,181,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11727
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_ICR_Bits',0,14,152,1,16,4,11
	.byte	'CMP0EN',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'CMP0IR',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'CMP0OS',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'CMP1EN',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'CMP1IR',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'CMP1OS',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	438
	.byte	25,0,2,35,0,0,12,14,197,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	11959
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_ISCR_Bits',0,14,173,1,16,4,11
	.byte	'CMP0IRR',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'CMP0IRS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'CMP1IRR',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'CMP1IRS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	438
	.byte	28,0,2,35,0,0,12,14,213,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12176
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_TIM0SV_Bits',0,14,222,1,16,4,11
	.byte	'STM_31_0',0,4
	.word	438
	.byte	32,0,2,35,0,0,12,14,133,3,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12340
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_CAPSV_Bits',0,14,117,16,4,11
	.byte	'STMCAP_63_32',0,4
	.word	438
	.byte	32,0,2,35,0,0,12,14,165,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12428
	.byte	4,2,35,0,0,15,144,1
	.word	613
	.byte	16,143,1,0,10
	.byte	'_Ifx_STM_OCS_Bits',0,14,205,1,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	438
	.byte	21,8,2,35,0,11
	.byte	'SUS',0,1
	.word	613
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	613
	.byte	2,0,2,35,3,0
.L228:
	.byte	12,14,245,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12529
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_KRSTCLR_Bits',0,14,198,1,16,4,11
	.byte	'CLR',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	438
	.byte	31,0,2,35,0,0,12,14,237,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12711
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_KRST1_Bits',0,14,191,1,16,4,11
	.byte	'RST',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	438
	.byte	31,0,2,35,0,0,12,14,229,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12817
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_KRST0_Bits',0,14,183,1,16,4,11
	.byte	'RST',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	438
	.byte	30,0,2,35,0,0,12,14,221,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	12921
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_ACCEN1_Bits',0,14,105,16,4,11
	.byte	'reserved_0',0,4
	.word	438
	.byte	32,0,2,35,0,0,12,14,149,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13044
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM_ACCEN0_Bits',0,14,68,16,4,11
	.byte	'EN0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	613
	.byte	1,0,2,35,3,0,12,14,141,2,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	13133
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_STM',0,14,198,3,25,128,2,13
	.byte	'CLC',0
	.word	10782
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	2634
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	10901
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2634
	.byte	4,2,35,12,13
	.byte	'TIM0',0
	.word	10987
	.byte	4,2,35,16,13
	.byte	'TIM1',0
	.word	11073
	.byte	4,2,35,20,13
	.byte	'TIM2',0
	.word	11159
	.byte	4,2,35,24,13
	.byte	'TIM3',0
	.word	11246
	.byte	4,2,35,28,13
	.byte	'TIM4',0
	.word	11333
	.byte	4,2,35,32,13
	.byte	'TIM5',0
	.word	11420
	.byte	4,2,35,36,13
	.byte	'TIM6',0
	.word	11507
	.byte	4,2,35,40,13
	.byte	'CAP',0
	.word	11595
	.byte	4,2,35,44,13
	.byte	'CMP',0
	.word	11718
	.byte	8,2,35,48,13
	.byte	'CMCON',0
	.word	11919
	.byte	4,2,35,56,13
	.byte	'ICR',0
	.word	12136
	.byte	4,2,35,60,13
	.byte	'ISCR',0
	.word	12300
	.byte	4,2,35,64,13
	.byte	'reserved_44',0
	.word	4794
	.byte	12,2,35,68,13
	.byte	'TIM0SV',0
	.word	12388
	.byte	4,2,35,80,13
	.byte	'CAPSV',0
	.word	12478
	.byte	4,2,35,84,13
	.byte	'reserved_58',0
	.word	12518
	.byte	144,1,2,35,88,13
	.byte	'OCS',0
	.word	12671
	.byte	4,3,35,232,1,13
	.byte	'KRSTCLR',0
	.word	12777
	.byte	4,3,35,236,1,13
	.byte	'KRST1',0
	.word	12881
	.byte	4,3,35,240,1,13
	.byte	'KRST0',0
	.word	13004
	.byte	4,3,35,244,1,13
	.byte	'ACCEN1',0
	.word	13093
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	13662
	.byte	4,3,35,252,1,0,14
	.word	13702
	.byte	3
	.word	14122
	.byte	8
	.byte	'IfxStm_get',0,3,13,192,4,19
	.word	320
	.byte	1,1,5
	.byte	'stm',0,13,192,4,39
	.word	14127
	.byte	6,0
.L199:
	.byte	8
	.byte	'IfxStm_getFrequency',0,3,13,209,4,20
	.word	234
	.byte	1,1
.L202:
	.byte	5
	.byte	'stm',0,13,209,4,49
	.word	14127
.L204:
	.byte	19
.L205:
	.byte	6,6,0,0,17,13,130,2,9,1,18
	.byte	'IfxStm_SuspendMode_none',0,0,18
	.byte	'IfxStm_SuspendMode_hard',0,1,18
	.byte	'IfxStm_SuspendMode_soft',0,2,0
.L218:
	.byte	4
	.byte	'IfxStm_setSuspendMode',0,3,13,185,5,17,1,1
.L221:
	.byte	5
	.byte	'stm',0,13,185,5,48
	.word	14127
.L223:
	.byte	5
	.byte	'mode',0,13,185,5,72
	.word	14220
.L225:
	.byte	6,0,8
	.byte	'IfxStm_getLower',0,3,13,220,4,19
	.word	9808
	.byte	1,1,5
	.byte	'stm',0,13,220,4,44
	.word	14127
	.byte	6,0,7
	.byte	'long long int',0,8,5,8
	.byte	'IfxStm_now',0,3,13,221,5,19
	.word	14407
	.byte	1,1,19,6,6,6,0,0,8
	.byte	'IfxStm_getDeadLine',0,3,13,234,5,19
	.word	14407
	.byte	1,1,5
	.byte	'timeout',0,13,234,5,45
	.word	14407
	.byte	19,6,0,0,8
	.byte	'IfxStm_isDeadLine',0,3,13,251,5,20
	.word	613
	.byte	1,1,5
	.byte	'deadLine',0,13,251,5,45
	.word	14407
	.byte	19,6,0,0
.L189:
	.byte	8
	.byte	'disableInterrupts',0,3,15,105,20
	.word	613
	.byte	1,1
.L191:
	.byte	19,6,0,0
.L167:
	.byte	4
	.byte	'restoreInterrupts',0,3,15,139,1,17,1,1
.L168:
	.byte	5
	.byte	'enabled',0,15,139,1,43
	.word	613
.L170:
	.byte	19,6,0,0,8
	.byte	'getDeadLine',0,3,15,131,2,25
	.word	14407
	.byte	1,1,5
	.byte	'timeout',0,15,131,2,50
	.word	14407
	.byte	19,6,0,0,8
	.byte	'isDeadLine',0,3,15,178,2,20
	.word	613
	.byte	1,1,5
	.byte	'deadLine',0,15,178,2,44
	.word	14407
	.byte	19,6,0,0,8
	.byte	'now',0,3,15,188,1,25
	.word	14407
	.byte	1,1,19,6,6,6,0,0,8
	.byte	'nowWithoutCriticalSection',0,3,15,207,1,25
	.word	14407
	.byte	1,1,19,6,0,0,20
	.byte	'IfxStdIf_InterfaceDriver',0,17,115,15
	.word	352
	.byte	21
	.word	234
	.byte	1,1,22
	.word	352
	.byte	0,3
	.word	14824
	.byte	20
	.byte	'IfxStdIf_Timer_GetFrequency',0,16,99,19
	.word	14837
	.byte	21
	.word	9808
	.byte	1,1,22
	.word	352
	.byte	0,3
	.word	14878
	.byte	20
	.byte	'IfxStdIf_Timer_GetPeriod',0,16,105,26
	.word	14891
	.byte	20
	.byte	'IfxStdIf_Timer_GetResolution',0,16,111,19
	.word	14837
	.byte	20
	.byte	'IfxStdIf_Timer_GetTrigger',0,16,117,26
	.word	14891
	.byte	21
	.word	613
	.byte	1,1,22
	.word	352
	.byte	22
	.word	234
	.byte	0,3
	.word	15000
	.byte	20
	.byte	'IfxStdIf_Timer_SetFrequency',0,16,125,19
	.word	15018
	.byte	23,1,1,22
	.word	352
	.byte	0,3
	.word	15059
	.byte	20
	.byte	'IfxStdIf_Timer_UpdateInputFrequency',0,16,131,1,16
	.word	15068
	.byte	20
	.byte	'IfxStdIf_Timer_ApplyUpdate',0,16,152,1,16
	.word	15068
	.byte	20
	.byte	'IfxStdIf_Timer_DisableUpdate',0,16,169,1,16
	.word	15068
	.byte	20
	.byte	'IfxStdIf_Timer_GetInputFrequency',0,16,175,1,19
	.word	14837
	.byte	20
	.byte	'IfxStdIf_Timer_Run',0,16,184,1,16
	.word	15068
	.byte	21
	.word	613
	.byte	1,1,22
	.word	352
	.byte	22
	.word	9808
	.byte	0,3
	.word	15262
	.byte	20
	.byte	'IfxStdIf_Timer_SetPeriod',0,16,194,1,19
	.word	15280
	.byte	23,1,1,22
	.word	352
	.byte	22
	.word	613
	.byte	0,3
	.word	15319
	.byte	20
	.byte	'IfxStdIf_Timer_SetSingleMode',0,16,203,1,16
	.word	15333
	.byte	23,1,1,22
	.word	352
	.byte	22
	.word	9808
	.byte	0,3
	.word	15376
	.byte	20
	.byte	'IfxStdIf_Timer_SetTrigger',0,16,215,1,16
	.word	15390
	.byte	20
	.byte	'IfxStdIf_Timer_Stop',0,16,221,1,16
	.word	15068
	.byte	21
	.word	613
	.byte	1,1,22
	.word	352
	.byte	0,3
	.word	15459
	.byte	20
	.byte	'IfxStdIf_Timer_AckTimerIrq',0,16,227,1,19
	.word	15472
	.byte	20
	.byte	'IfxStdIf_Timer_AckTriggerIrq',0,16,233,1,19
	.word	15472
	.byte	10
	.byte	'IfxStdIf_Timer_',0,16,237,1,8,68,13
	.byte	'driver',0
	.word	14791
	.byte	4,2,35,0,13
	.byte	'getFrequency',0
	.word	14842
	.byte	4,2,35,4,13
	.byte	'getPeriod',0
	.word	14896
	.byte	4,2,35,8,13
	.byte	'getResolution',0
	.word	14929
	.byte	4,2,35,12,13
	.byte	'getTrigger',0
	.word	14966
	.byte	4,2,35,16,13
	.byte	'setFrequency',0
	.word	15023
	.byte	4,2,35,20,13
	.byte	'updateInputFrequency',0
	.word	15073
	.byte	4,2,35,24,13
	.byte	'applyUpdate',0
	.word	15118
	.byte	4,2,35,28,13
	.byte	'disableUpdate',0
	.word	15154
	.byte	4,2,35,32,13
	.byte	'getInputFrequency',0
	.word	15192
	.byte	4,2,35,36,13
	.byte	'run',0
	.word	15234
	.byte	4,2,35,40,13
	.byte	'setPeriod',0
	.word	15285
	.byte	4,2,35,44,13
	.byte	'setSingleMode',0
	.word	15338
	.byte	4,2,35,48,13
	.byte	'setTrigger',0
	.word	15395
	.byte	4,2,35,52,13
	.byte	'stop',0
	.word	15430
	.byte	4,2,35,56,13
	.byte	'ackTimerIrq',0
	.word	15477
	.byte	4,2,35,60,13
	.byte	'ackTriggerIrq',0
	.word	15513
	.byte	4,2,35,64,0,3
	.word	15551
	.byte	8
	.byte	'IfxStdIf_Timer_getInputFrequency',0,3,16,233,2,20
	.word	234
	.byte	1,1,5
	.byte	'stdIf',0,16,233,2,69
	.word	15930
	.byte	6,0,3
	.word	346
	.byte	3
	.word	14824
	.byte	3
	.word	14878
	.byte	3
	.word	14824
	.byte	3
	.word	14878
	.byte	3
	.word	15000
	.byte	3
	.word	15059
	.byte	3
	.word	15059
	.byte	3
	.word	15059
	.byte	3
	.word	14824
	.byte	3
	.word	15059
	.byte	3
	.word	15262
	.byte	3
	.word	15319
	.byte	3
	.word	15376
	.byte	3
	.word	15059
	.byte	3
	.word	15459
	.byte	3
	.word	15459
	.byte	8
	.byte	'IfxStdIf_Timer_tickToS',0,3,16,179,3,20
	.word	234
	.byte	1,1,5
	.byte	'clockFreq',0,16,179,3,51
	.word	234
	.byte	5
	.byte	'ticks',0,16,179,3,77
	.word	9808
	.byte	6,0,24
	.word	454
	.byte	25
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,22
	.word	16153
	.byte	0,14
	.word	438
	.byte	3
	.word	438
	.byte	26
	.byte	'__cmpswapw',0
	.word	16195
	.byte	1,1,1,1,27
	.byte	'p',0
	.word	16200
	.byte	27
	.byte	'value',0
	.word	438
	.byte	27
	.byte	'compare',0
	.word	438
	.byte	0,26
	.byte	'__minu',0
	.word	438
	.byte	1,1,1,1,22
	.word	438
	.byte	22
	.word	438
	.byte	0,25
	.byte	'__mtcr',0,1,1,1,1,22
	.word	454
	.byte	22
	.word	454
	.byte	0,14
	.word	454
	.byte	26
	.byte	'__mfcr',0
	.word	16307
	.byte	1,1,1,1,22
	.word	454
	.byte	0,28
	.byte	'__nop',0,1,1,1,1,25
	.byte	'__syscall',0,1,1,1,1,22
	.word	454
	.byte	0,28
	.byte	'__svlcx',0,1,1,1,1,28
	.byte	'__isync',0,1,1,1,1,28
	.byte	'__dsync',0,1,1,1,1,28
	.byte	'__disable',0,1,1,1,1,28
	.byte	'__enable',0,1,1,1,1,29
	.byte	'rt_tick_increase',0,18,79,6,1,1,1,1,29
	.byte	'rt_interrupt_enter',0,18,215,3,6,1,1,1,1,29
	.byte	'rt_interrupt_leave',0,18,216,3,6,1,1,1,1,29
	.byte	'rt_components_board_init',0,18,244,3,6,1,1,1,1
.L144:
	.byte	3
	.word	613
	.byte	3
	.word	9808
	.byte	10
	.byte	'UpperCtxInfo',0,19,27,16,64,13
	.byte	'_PCXI',0
	.word	9808
	.byte	4,2,35,0,13
	.byte	'_PSW',0
	.word	9808
	.byte	4,2,35,4,13
	.byte	'_A10',0
	.word	16554
	.byte	4,2,35,8,13
	.byte	'_A11',0
	.word	16554
	.byte	4,2,35,12,13
	.byte	'_D8',0
	.word	9808
	.byte	4,2,35,16,13
	.byte	'_D9',0
	.word	9808
	.byte	4,2,35,20,13
	.byte	'_D10',0
	.word	9808
	.byte	4,2,35,24,13
	.byte	'_D11',0
	.word	9808
	.byte	4,2,35,28,13
	.byte	'_A12',0
	.word	16554
	.byte	4,2,35,32,13
	.byte	'_A13',0
	.word	16554
	.byte	4,2,35,36,13
	.byte	'_A14',0
	.word	16554
	.byte	4,2,35,40,13
	.byte	'_A15',0
	.word	16554
	.byte	4,2,35,44,13
	.byte	'_D12',0
	.word	9808
	.byte	4,2,35,48,13
	.byte	'_D13',0
	.word	9808
	.byte	4,2,35,52,13
	.byte	'_D14',0
	.word	9808
	.byte	4,2,35,56,13
	.byte	'_D15',0
	.word	9808
	.byte	4,2,35,60,0,3
	.word	16559
	.byte	3
	.word	16559
.L151:
	.byte	20
	.byte	'UpperCtx_Ptr',0,19,44,14
	.word	16806
	.byte	10
	.byte	'LowCtxInfo',0,19,46,16,64,13
	.byte	'_PCXI',0
	.word	9808
	.byte	4,2,35,0,13
	.byte	'_PC',0
	.word	16554
	.byte	4,2,35,4,13
	.byte	'_A2',0
	.word	16554
	.byte	4,2,35,8,13
	.byte	'_A3',0
	.word	16554
	.byte	4,2,35,12,13
	.byte	'_D0',0
	.word	9808
	.byte	4,2,35,16,13
	.byte	'_D1',0
	.word	9808
	.byte	4,2,35,20,13
	.byte	'_D2',0
	.word	9808
	.byte	4,2,35,24,13
	.byte	'_D3',0
	.word	9808
	.byte	4,2,35,28,13
	.byte	'_A4',0
	.word	16554
	.byte	4,2,35,32,13
	.byte	'_A5',0
	.word	16554
	.byte	4,2,35,36,13
	.byte	'_A6',0
	.word	16554
	.byte	4,2,35,40,13
	.byte	'_A7',0
	.word	16554
	.byte	4,2,35,44,13
	.byte	'_D4',0
	.word	9808
	.byte	4,2,35,48,13
	.byte	'_D5',0
	.word	9808
	.byte	4,2,35,52,13
	.byte	'_D6',0
	.word	9808
	.byte	4,2,35,56,13
	.byte	'_D7',0
	.word	9808
	.byte	4,2,35,60,0,3
	.word	16832
	.byte	3
	.word	16832
.L153:
	.byte	20
	.byte	'LowCtx_Ptr',0,19,63,12
	.word	17064
.L155:
	.byte	7
	.byte	'long int',0,4,5,10
	.byte	'_Ifx_CPU_ICR_Bits',0,20,143,5,16,4,11
	.byte	'CCPN',0,4
	.word	461
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	7,17,2,35,0,11
	.byte	'IE',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'PIPN',0,4
	.word	461
	.byte	8,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	461
	.byte	8,0,2,35,0,0
.L163:
	.byte	12,20,204,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17100
	.byte	4,2,35,0,0,30
	.word	182
	.byte	31
	.word	208
	.byte	6,0,30
	.word	243
	.byte	31
	.word	275
	.byte	6,0,30
	.word	288
	.byte	6,0,30
	.word	357
	.byte	31
	.word	376
	.byte	6,0,30
	.word	392
	.byte	31
	.word	407
	.byte	31
	.word	421
	.byte	6,0,30
	.word	1222
	.byte	31
	.word	1262
	.byte	31
	.word	1280
	.byte	6,0,30
	.word	1300
	.byte	31
	.word	1343
	.byte	6,0,30
	.word	1363
	.byte	31
	.word	1401
	.byte	31
	.word	1419
	.byte	6,0,30
	.word	1439
	.byte	31
	.word	1480
	.byte	6,0,30
	.word	1500
	.byte	31
	.word	1551
	.byte	6,0,30
	.word	1571
	.byte	6,0,32
	.byte	'IfxScuWdt_disableCpuWatchdog',0,3,176,3,17,1,1,1,1,5
	.byte	'password',0,3,176,3,53
	.word	630
	.byte	0,32
	.byte	'IfxScuWdt_disableSafetyWatchdog',0,3,186,3,17,1,1,1,1,5
	.byte	'password',0,3,186,3,56
	.word	630
	.byte	0,33
	.byte	'IfxScuWdt_getCpuWatchdogPassword',0,3,215,3,19
	.word	630
	.byte	1,1,1,1,33
	.byte	'IfxScuWdt_getSafetyWatchdogPassword',0,3,249,3,19
	.word	630
	.byte	1,1,1,1,30
	.word	9232
	.byte	31
	.word	9260
	.byte	31
	.word	9274
	.byte	31
	.word	9292
	.byte	6,0,30
	.word	9310
	.byte	31
	.word	9333
	.byte	19,34
	.word	9354
	.byte	35
	.word	9392
	.byte	0,6,0,0,30
	.word	9354
	.byte	6,0,24
	.word	9394
	.byte	36
	.byte	'IfxScuCcu_getCpuFrequency',0,7,202,6,20
	.word	234
	.byte	1,1,1,1,5
	.byte	'cpu',0,7,202,6,71
	.word	17659
	.byte	0,33
	.byte	'IfxScuCcu_getPllFrequency',0,7,253,6,20
	.word	234
	.byte	1,1,1,1,17,7,172,2,9,1,18
	.byte	'IfxScuCcu_Fsource_0',0,0,18
	.byte	'IfxScuCcu_Fsource_1',0,1,18
	.byte	'IfxScuCcu_Fsource_2',0,2,0,36
	.byte	'IfxScuCcu_getSourceFrequency',0,7,138,7,20
	.word	234
	.byte	1,1,1,1,5
	.byte	'fsource',0,7,138,7,67
	.word	17756
	.byte	0,33
	.byte	'IfxScuCcu_getSpbFrequency',0,7,144,7,20
	.word	234
	.byte	1,1,1,1,30
	.word	9565
	.byte	6,0,30
	.word	9599
	.byte	6,0,30
	.word	9641
	.byte	19,34
	.word	9599
	.byte	35
	.word	9639
	.byte	0,6,0,0,30
	.word	9682
	.byte	6,0,30
	.word	9716
	.byte	6,0,30
	.word	9756
	.byte	31
	.word	9789
	.byte	6,0,30
	.word	9829
	.byte	31
	.word	9870
	.byte	6,0,30
	.word	9889
	.byte	31
	.word	9944
	.byte	6,0,30
	.word	9963
	.byte	31
	.word	10003
	.byte	31
	.word	10020
	.byte	19,6,0,0,30
	.word	10378
	.byte	31
	.word	10406
	.byte	6,0,30
	.word	10421
	.byte	31
	.word	10443
	.byte	6,0,30
	.word	10589
	.byte	31
	.word	10609
	.byte	31
	.word	10622
	.byte	31
	.word	10644
	.byte	19,34
	.word	10378
	.byte	31
	.word	10406
	.byte	35
	.word	10419
	.byte	0,6,0,0,30
	.word	14132
	.byte	31
	.word	14155
	.byte	6,0,30
	.word	14170
	.byte	31
	.word	14202
	.byte	19,19,34
	.word	9354
	.byte	35
	.word	9392
	.byte	0,0,6,0,0,30
	.word	14305
	.byte	31
	.word	14335
	.byte	31
	.word	14348
	.byte	6,0,30
	.word	14364
	.byte	31
	.word	14392
	.byte	6,0,30
	.word	14424
	.byte	19,34
	.word	9756
	.byte	31
	.word	9789
	.byte	35
	.word	9806
	.byte	0,6,34
	.word	9641
	.byte	37
	.word	9678
	.byte	34
	.word	9599
	.byte	35
	.word	9639
	.byte	0,35
	.word	9679
	.byte	0,0,6,34
	.word	14132
	.byte	31
	.word	14155
	.byte	35
	.word	14168
	.byte	0,6,0,0,30
	.word	14453
	.byte	31
	.word	14484
	.byte	19,34
	.word	14424
	.byte	37
	.word	14447
	.byte	34
	.word	9756
	.byte	31
	.word	9789
	.byte	35
	.word	9806
	.byte	0,35
	.word	14448
	.byte	34
	.word	9641
	.byte	37
	.word	9678
	.byte	34
	.word	9599
	.byte	35
	.word	9639
	.byte	0,35
	.word	9679
	.byte	0,0,35
	.word	14449
	.byte	34
	.word	14132
	.byte	31
	.word	14155
	.byte	35
	.word	14168
	.byte	0,35
	.word	14450
	.byte	0,0,6,0,0,30
	.word	14505
	.byte	31
	.word	14535
	.byte	19,34
	.word	14424
	.byte	37
	.word	14447
	.byte	34
	.word	9756
	.byte	31
	.word	9789
	.byte	35
	.word	9806
	.byte	0,35
	.word	14448
	.byte	34
	.word	9641
	.byte	37
	.word	9678
	.byte	34
	.word	9599
	.byte	35
	.word	9639
	.byte	0,35
	.word	9679
	.byte	0,0,35
	.word	14449
	.byte	34
	.word	14132
	.byte	31
	.word	14155
	.byte	35
	.word	14168
	.byte	0,35
	.word	14450
	.byte	0,0,6,0,0,30
	.word	14557
	.byte	19,34
	.word	9641
	.byte	37
	.word	9678
	.byte	34
	.word	9599
	.byte	35
	.word	9639
	.byte	0,35
	.word	9679
	.byte	0,0,6,0,0,30
	.word	14590
	.byte	31
	.word	14616
	.byte	19,34
	.word	9756
	.byte	31
	.word	9789
	.byte	35
	.word	9806
	.byte	0,6,0,0,30
	.word	14637
	.byte	31
	.word	14661
	.byte	19,34
	.word	14727
	.byte	37
	.word	14743
	.byte	34
	.word	14557
	.byte	37
	.word	14586
	.byte	34
	.word	9641
	.byte	37
	.word	9678
	.byte	34
	.word	9599
	.byte	35
	.word	9639
	.byte	0,35
	.word	9679
	.byte	0,0,35
	.word	14587
	.byte	0,0,35
	.word	14744
	.byte	34
	.word	14590
	.byte	31
	.word	14616
	.byte	37
	.word	14633
	.byte	34
	.word	9756
	.byte	31
	.word	9789
	.byte	35
	.word	9806
	.byte	0,35
	.word	14634
	.byte	0,0,35
	.word	14745
	.byte	34
	.word	14132
	.byte	31
	.word	14155
	.byte	35
	.word	14168
	.byte	0,35
	.word	14746
	.byte	0,0,6,0,0,30
	.word	14682
	.byte	31
	.word	14705
	.byte	19,34
	.word	14727
	.byte	37
	.word	14743
	.byte	34
	.word	14557
	.byte	37
	.word	14586
	.byte	34
	.word	9641
	.byte	37
	.word	9678
	.byte	34
	.word	9599
	.byte	35
	.word	9639
	.byte	0,35
	.word	9679
	.byte	0,0,35
	.word	14587
	.byte	0,0,35
	.word	14744
	.byte	34
	.word	14590
	.byte	31
	.word	14616
	.byte	37
	.word	14633
	.byte	34
	.word	9756
	.byte	31
	.word	9789
	.byte	35
	.word	9806
	.byte	0,35
	.word	14634
	.byte	0,0,35
	.word	14745
	.byte	34
	.word	14132
	.byte	31
	.word	14155
	.byte	35
	.word	14168
	.byte	0,35
	.word	14746
	.byte	0,0,6,0,0,30
	.word	14727
	.byte	19,34
	.word	14557
	.byte	37
	.word	14586
	.byte	34
	.word	9641
	.byte	37
	.word	9678
	.byte	34
	.word	9599
	.byte	35
	.word	9639
	.byte	0,35
	.word	9679
	.byte	0,0,35
	.word	14587
	.byte	0,0,6,34
	.word	14590
	.byte	31
	.word	14616
	.byte	37
	.word	14633
	.byte	34
	.word	9756
	.byte	31
	.word	9789
	.byte	35
	.word	9806
	.byte	0,35
	.word	14634
	.byte	0,0,6,34
	.word	14132
	.byte	31
	.word	14155
	.byte	35
	.word	14168
	.byte	0,6,0,0,30
	.word	14749
	.byte	19,34
	.word	14132
	.byte	31
	.word	14155
	.byte	35
	.word	14168
	.byte	0,6,0,0,30
	.word	15935
	.byte	31
	.word	15980
	.byte	6,0,30
	.word	16082
	.byte	31
	.word	16117
	.byte	31
	.word	16136
	.byte	6,0,17,16,85,9,1,18
	.byte	'IfxStdIf_Timer_CountDir_up',0,0,18
	.byte	'IfxStdIf_Timer_CountDir_upAndDown',0,1,18
	.byte	'IfxStdIf_Timer_CountDir_down',0,2,0,38,21,126,9,12,13
	.byte	'period',0
	.word	9808
	.byte	4,2,35,0,13
	.byte	'triggerEnabled',0
	.word	613
	.byte	1,2,35,4,13
	.byte	'clockFreq',0
	.word	234
	.byte	4,2,35,6,13
	.byte	'countDir',0
	.word	18947
	.byte	1,2,35,10,13
	.byte	'singleShot',0
	.word	613
	.byte	1,2,35,11,0,17,13,157,1,9,1,18
	.byte	'IfxStm_Comparator_0',0,0,18
	.byte	'IfxStm_Comparator_1',0,1,0,38,21,141,1,9,24,13
	.byte	'base',0
	.word	19049
	.byte	12,2,35,0,13
	.byte	'stm',0
	.word	14127
	.byte	4,2,35,12,13
	.byte	'comparator',0
	.word	19152
	.byte	1,2,35,16,13
	.byte	'comparatorValue',0
	.word	9808
	.byte	4,2,35,18,13
	.byte	'comparatorShift',0
	.word	613
	.byte	1,2,35,22,0,3
	.word	19203
	.byte	36
	.byte	'IfxStm_Timer_acknowledgeTimerIrq',0,21,173,1,20
	.word	613
	.byte	1,1,1,1,5
	.byte	'driver',0,21,173,1,67
	.word	19307
	.byte	0,32
	.byte	'IfxStm_Timer_run',0,21,208,1,17,1,1,1,1,5
	.byte	'driver',0,21,208,1,48
	.word	19307
	.byte	0,17,5,140,1,9,1,18
	.byte	'IfxPort_OutputMode_none',0,0,18
	.byte	'IfxPort_OutputMode_pushPull',0,128,1,18
	.byte	'IfxPort_OutputMode_openDrain',0,192,1,0,17,5,151,1,9,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed1',0,0,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed2',0,1,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed3',0,2,18
	.byte	'IfxPort_PadDriver_cmosAutomotiveSpeed4',0,3,18
	.byte	'IfxPort_PadDriver_ttlSpeed1',0,8,18
	.byte	'IfxPort_PadDriver_ttlSpeed2',0,9,18
	.byte	'IfxPort_PadDriver_ttlSpeed3',0,10,18
	.byte	'IfxPort_PadDriver_ttlSpeed4',0,11,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed1',0,12,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed2',0,13,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed3',0,14,18
	.byte	'IfxPort_PadDriver_ttl3v3Speed4',0,15,0,38,16,131,2,9,16,13
	.byte	'enabled',0
	.word	613
	.byte	1,2,35,0,13
	.byte	'triggerPoint',0
	.word	9808
	.byte	4,2,35,2,13
	.byte	'isrPriority',0
	.word	630
	.byte	2,2,35,6,13
	.byte	'isrProvider',0
	.word	10458
	.byte	1,2,35,8,13
	.byte	'outputMode',0
	.word	19418
	.byte	1,2,35,9,13
	.byte	'outputDriver',0
	.word	19514
	.byte	1,2,35,10,13
	.byte	'risingEdgeAtPeriod',0
	.word	613
	.byte	1,2,35,11,13
	.byte	'outputEnabled',0
	.word	613
	.byte	1,2,35,12,0,38,16,144,2,9,36,13
	.byte	'frequency',0
	.word	234
	.byte	4,2,35,0,13
	.byte	'isrPriority',0
	.word	630
	.byte	2,2,35,4,13
	.byte	'isrProvider',0
	.word	10458
	.byte	1,2,35,6,13
	.byte	'minResolution',0
	.word	234
	.byte	4,2,35,8,13
	.byte	'trigger',0
	.word	19937
	.byte	16,2,35,12,13
	.byte	'countDir',0
	.word	18947
	.byte	1,2,35,28,13
	.byte	'startOffset',0
	.word	234
	.byte	4,2,35,30,0
.L209:
	.byte	38,21,152,1,9,44,13
	.byte	'base',0
	.word	20118
	.byte	36,2,35,0,13
	.byte	'stm',0
	.word	14127
	.byte	4,2,35,36,13
	.byte	'comparator',0
	.word	19152
	.byte	1,2,35,40,0,24
	.word	20265
	.byte	3
	.word	20319
	.byte	36
	.byte	'IfxStm_Timer_init',0,21,132,2,20
	.word	613
	.byte	1,1,1,1,5
	.byte	'driver',0,21,132,2,52
	.word	19307
	.byte	5
	.byte	'config',0,21,132,2,87
	.word	20324
	.byte	0,3
	.word	20265
	.byte	32
	.byte	'IfxStm_Timer_initConfig',0,21,139,2,17,1,1,1,1,5
	.byte	'config',0,21,139,2,62
	.word	20393
	.byte	5
	.byte	'stm',0,21,139,2,79
	.word	14127
	.byte	0,29
	.byte	'initUART',0,22,41,6,1,1,1,1,39
	.byte	'memset',0,19,137,2,5
	.word	454
	.byte	1,1,1,7
	.byte	'short int',0,2,5,20
	.byte	'__wchar_t',0,19,1,1
	.word	20497
	.byte	20
	.byte	'__size_t',0,19,1,1
	.word	438
	.byte	20
	.byte	'__ptrdiff_t',0,19,1,1
	.word	454
	.byte	40,1,3
	.word	20565
	.byte	20
	.byte	'__codeptr',0,19,1,1
	.word	20567
	.byte	20
	.byte	'__intptr_t',0,19,1,1
	.word	454
	.byte	20
	.byte	'__uintptr_t',0,19,1,1
	.word	438
	.byte	20
	.byte	'rt_uint8_t',0,23,69,41
	.word	613
	.byte	20
	.byte	'rt_uint16_t',0,23,70,41
	.word	630
	.byte	20
	.byte	'rt_uint32_t',0,23,71,41
	.word	438
	.byte	20
	.byte	'rt_base_t',0,23,83,41
	.word	17088
	.byte	20
	.byte	'rt_ubase_t',0,23,84,41
	.word	9808
	.byte	20
	.byte	'rt_err_t',0,23,86,41
	.word	17088
	.byte	20
	.byte	'rt_tick_t',0,23,88,41
	.word	438
	.byte	20
	.byte	'rt_size_t',0,23,90,41
	.word	9808
	.byte	3
	.word	.L317-.L47
.L317:
	.byte	10
	.byte	'rt_list_node',0,23,229,2,8,8,13
	.byte	'next',0
	.word	20778
	.byte	4,2,35,0,13
	.byte	'prev',0
	.word	20778
	.byte	4,2,35,4,0,20
	.byte	'rt_list_t',0,23,234,2,29
	.word	20783
	.byte	3
	.word	.L318-.L47
.L318:
	.byte	10
	.byte	'rt_slist_node',0,23,239,2,8,4,13
	.byte	'next',0
	.word	20850
	.byte	4,2,35,0,0,20
	.byte	'rt_slist_t',0,23,243,2,30
	.word	20855
	.byte	20
	.byte	'uint16_t',0,24,246,1,41
	.word	630
	.byte	20
	.byte	'uint32_t',0,24,254,1,41
	.word	438
	.byte	20
	.byte	'time_t',0,25,44,25
	.word	9808
	.byte	20
	.byte	'fd_mask',0,26,39,17
	.word	17088
	.byte	23,1,1,22
	.word	454
	.byte	22
	.word	352
	.byte	0,3
	.word	20977
	.byte	20
	.byte	'rt_isr_handler_t',0,27,73,16
	.word	20991
	.byte	20
	.byte	'boolean',0,28,104,29
	.word	613
	.byte	20
	.byte	'uint8',0,28,108,29
	.word	613
	.byte	20
	.byte	'uint16',0,28,112,29
	.word	630
	.byte	20
	.byte	'uint32',0,28,116,29
	.word	9808
	.byte	20
	.byte	'uint64',0,28,121,29
	.word	320
	.byte	20
	.byte	'sint16',0,28,129,1,29
	.word	20497
	.byte	20
	.byte	'sint32',0,28,134,1,29
	.word	17088
	.byte	20
	.byte	'sint64',0,28,141,1,29
	.word	14407
	.byte	20
	.byte	'float32',0,28,170,1,29
	.word	234
	.byte	20
	.byte	'pvoid',0,29,54,28
	.word	352
	.byte	20
	.byte	'Ifx_TickTime',0,29,76,28
	.word	14407
	.byte	20
	.byte	'Ifx_Priority',0,29,100,16
	.word	630
	.byte	20
	.byte	'Ifx_TimerValue',0,29,101,16
	.word	9808
	.byte	17,29,127,9,1,18
	.byte	'Ifx_RxSel_a',0,0,18
	.byte	'Ifx_RxSel_b',0,1,18
	.byte	'Ifx_RxSel_c',0,2,18
	.byte	'Ifx_RxSel_d',0,3,18
	.byte	'Ifx_RxSel_e',0,4,18
	.byte	'Ifx_RxSel_f',0,5,18
	.byte	'Ifx_RxSel_g',0,6,18
	.byte	'Ifx_RxSel_h',0,7,0,20
	.byte	'Ifx_RxSel',0,29,137,1,3
	.word	21240
	.byte	20
	.byte	'Ifx_UReg_8Bit',0,30,96,24
	.word	613
	.byte	20
	.byte	'Ifx_UReg_32Bit',0,30,98,24
	.word	438
	.byte	20
	.byte	'Ifx_SReg_32Bit',0,30,101,24
	.word	454
	.byte	10
	.byte	'_Ifx_CPU_A_Bits',0,20,68,16,4,11
	.byte	'ADDR',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CPU_A_Bits',0,20,71,3
	.word	21445
	.byte	10
	.byte	'_Ifx_CPU_BIV_Bits',0,20,74,16,4,11
	.byte	'VSS',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'BIV',0,4
	.word	461
	.byte	31,0,2,35,0,0,20
	.byte	'Ifx_CPU_BIV_Bits',0,20,78,3
	.word	21506
	.byte	10
	.byte	'_Ifx_CPU_BLK_OMASK_Bits',0,20,81,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	5,27,2,35,0,11
	.byte	'OMASK',0,4
	.word	461
	.byte	12,15,2,35,0,11
	.byte	'ONE',0,4
	.word	461
	.byte	11,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	461
	.byte	4,0,2,35,0,0,20
	.byte	'Ifx_CPU_BLK_OMASK_Bits',0,20,87,3
	.word	21585
	.byte	10
	.byte	'_Ifx_CPU_BLK_OTAR_Bits',0,20,90,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	5,27,2,35,0,11
	.byte	'TBASE',0,4
	.word	461
	.byte	23,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	461
	.byte	4,0,2,35,0,0,20
	.byte	'Ifx_CPU_BLK_OTAR_Bits',0,20,95,3
	.word	21723
	.byte	10
	.byte	'_Ifx_CPU_BLK_RABR_Bits',0,20,98,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	5,27,2,35,0,11
	.byte	'OBASE',0,4
	.word	461
	.byte	17,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	461
	.byte	2,8,2,35,0,11
	.byte	'OMEM',0,4
	.word	461
	.byte	4,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	461
	.byte	3,1,2,35,0,11
	.byte	'OVEN',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_BLK_RABR_Bits',0,20,106,3
	.word	21844
	.byte	10
	.byte	'_Ifx_CPU_BTV_Bits',0,20,109,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'BTV',0,4
	.word	461
	.byte	31,0,2,35,0,0,20
	.byte	'Ifx_CPU_BTV_Bits',0,20,113,3
	.word	22020
	.byte	10
	.byte	'_Ifx_CPU_CCNT_Bits',0,20,116,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	461
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_CCNT_Bits',0,20,120,3
	.word	22106
	.byte	10
	.byte	'_Ifx_CPU_CCTRL_Bits',0,20,123,16,4,11
	.byte	'CM',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'CE',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'M1',0,4
	.word	461
	.byte	3,27,2,35,0,11
	.byte	'M2',0,4
	.word	461
	.byte	3,24,2,35,0,11
	.byte	'M3',0,4
	.word	461
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	461
	.byte	21,0,2,35,0,0,20
	.byte	'Ifx_CPU_CCTRL_Bits',0,20,131,1,3
	.word	22195
	.byte	10
	.byte	'_Ifx_CPU_COMPAT_Bits',0,20,134,1,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	3,29,2,35,0,11
	.byte	'RM',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'SP',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	461
	.byte	27,0,2,35,0,0,20
	.byte	'Ifx_CPU_COMPAT_Bits',0,20,140,1,3
	.word	22342
	.byte	10
	.byte	'_Ifx_CPU_CORE_ID_Bits',0,20,143,1,16,4,11
	.byte	'CORE_ID',0,4
	.word	461
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	461
	.byte	29,0,2,35,0,0,20
	.byte	'Ifx_CPU_CORE_ID_Bits',0,20,147,1,3
	.word	22471
	.byte	10
	.byte	'_Ifx_CPU_CPR_L_Bits',0,20,150,1,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	5,27,2,35,0,11
	.byte	'LOWBND',0,4
	.word	461
	.byte	27,0,2,35,0,0,20
	.byte	'Ifx_CPU_CPR_L_Bits',0,20,154,1,3
	.word	22571
	.byte	10
	.byte	'_Ifx_CPU_CPR_U_Bits',0,20,157,1,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	5,27,2,35,0,11
	.byte	'UPPBND',0,4
	.word	461
	.byte	27,0,2,35,0,0,20
	.byte	'Ifx_CPU_CPR_U_Bits',0,20,161,1,3
	.word	22666
	.byte	10
	.byte	'_Ifx_CPU_CPU_ID_Bits',0,20,164,1,16,4,11
	.byte	'MOD_REV',0,4
	.word	461
	.byte	8,24,2,35,0,11
	.byte	'MOD_32B',0,4
	.word	461
	.byte	8,16,2,35,0,11
	.byte	'MOD',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_CPU_CPU_ID_Bits',0,20,169,1,3
	.word	22761
	.byte	10
	.byte	'_Ifx_CPU_CPXE_Bits',0,20,172,1,16,4,11
	.byte	'XE_N',0,4
	.word	461
	.byte	10,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	461
	.byte	22,0,2,35,0,0,20
	.byte	'Ifx_CPU_CPXE_Bits',0,20,176,1,3
	.word	22871
	.byte	10
	.byte	'_Ifx_CPU_CREVT_Bits',0,20,179,1,16,4,11
	.byte	'EVTA',0,4
	.word	461
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	461
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_CPU_CREVT_Bits',0,20,187,1,3
	.word	22963
	.byte	10
	.byte	'_Ifx_CPU_CUS_ID_Bits',0,20,190,1,16,4,11
	.byte	'CID',0,4
	.word	461
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	461
	.byte	29,0,2,35,0,0,20
	.byte	'Ifx_CPU_CUS_ID_Bits',0,20,194,1,3
	.word	23117
	.byte	10
	.byte	'_Ifx_CPU_D_Bits',0,20,197,1,16,4,11
	.byte	'DATA',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CPU_D_Bits',0,20,200,1,3
	.word	23211
	.byte	10
	.byte	'_Ifx_CPU_DATR_Bits',0,20,203,1,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	3,29,2,35,0,11
	.byte	'SBE',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	461
	.byte	5,23,2,35,0,11
	.byte	'CWE',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'CFE',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	461
	.byte	3,18,2,35,0,11
	.byte	'SOE',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_CPU_DATR_Bits',0,20,214,1,3
	.word	23274
	.byte	10
	.byte	'_Ifx_CPU_DBGSR_Bits',0,20,217,1,16,4,11
	.byte	'DE',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'HALT',0,4
	.word	461
	.byte	2,29,2,35,0,11
	.byte	'SIH',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'SUSP',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'PREVSUSP',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'PEVT',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EVTSRC',0,4
	.word	461
	.byte	5,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	461
	.byte	19,0,2,35,0,0,20
	.byte	'Ifx_CPU_DBGSR_Bits',0,20,228,1,3
	.word	23500
	.byte	10
	.byte	'_Ifx_CPU_DBGTCR_Bits',0,20,231,1,16,4,11
	.byte	'DTA',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	461
	.byte	31,0,2,35,0,0,20
	.byte	'Ifx_CPU_DBGTCR_Bits',0,20,235,1,3
	.word	23715
	.byte	10
	.byte	'_Ifx_CPU_DCON0_Bits',0,20,238,1,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'DCBYP',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	461
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_CPU_DCON0_Bits',0,20,243,1,3
	.word	23809
	.byte	10
	.byte	'_Ifx_CPU_DCON2_Bits',0,20,246,1,16,4,11
	.byte	'DCACHE_SZE',0,4
	.word	461
	.byte	16,16,2,35,0,11
	.byte	'DSCRATCH_SZE',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_CPU_DCON2_Bits',0,20,250,1,3
	.word	23925
	.byte	10
	.byte	'_Ifx_CPU_DCX_Bits',0,20,253,1,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	6,26,2,35,0,11
	.byte	'DCXVALUE',0,4
	.word	461
	.byte	26,0,2,35,0,0,20
	.byte	'Ifx_CPU_DCX_Bits',0,20,129,2,3
	.word	24026
	.byte	10
	.byte	'_Ifx_CPU_DEADD_Bits',0,20,132,2,16,4,11
	.byte	'ERROR_ADDRESS',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CPU_DEADD_Bits',0,20,135,2,3
	.word	24119
	.byte	10
	.byte	'_Ifx_CPU_DIEAR_Bits',0,20,138,2,16,4,11
	.byte	'TA',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CPU_DIEAR_Bits',0,20,141,2,3
	.word	24199
	.byte	10
	.byte	'_Ifx_CPU_DIETR_Bits',0,20,144,2,16,4,11
	.byte	'IED',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	461
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'IE_DLMU',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	461
	.byte	15,0,2,35,0,0,20
	.byte	'Ifx_CPU_DIETR_Bits',0,20,159,2,3
	.word	24268
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,20,162,2,16,4,11
	.byte	'EN0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R_Bits',0,20,196,2,3
	.word	24552
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,20,199,2,16,4,11
	.byte	'EN0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W_Bits',0,20,233,2,3
	.word	25143
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,20,236,2,16,4,11
	.byte	'EN32',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R_Bits',0,20,142,3,3
	.word	25734
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,20,145,3,16,4,11
	.byte	'EN32',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W_Bits',0,20,179,3,3
	.word	26335
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,20,182,3,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	461
	.byte	27,0,2,35,0,0,20
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA_Bits',0,20,186,3,3
	.word	26936
	.byte	10
	.byte	'_Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,20,189,3,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	461
	.byte	27,0,2,35,0,0,20
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA_Bits',0,20,193,3,3
	.word	27051
	.byte	10
	.byte	'_Ifx_CPU_DMS_Bits',0,20,196,3,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'DMSVALUE',0,4
	.word	461
	.byte	31,0,2,35,0,0,20
	.byte	'Ifx_CPU_DMS_Bits',0,20,200,3,3
	.word	27166
	.byte	10
	.byte	'_Ifx_CPU_DPRE_Bits',0,20,203,3,16,4,11
	.byte	'RE_N',0,4
	.word	461
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	461
	.byte	14,0,2,35,0,0,20
	.byte	'Ifx_CPU_DPRE_Bits',0,20,207,3,3
	.word	27259
	.byte	10
	.byte	'_Ifx_CPU_DPR_L_Bits',0,20,210,3,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	3,29,2,35,0,11
	.byte	'LOWBND',0,4
	.word	461
	.byte	29,0,2,35,0,0,20
	.byte	'Ifx_CPU_DPR_L_Bits',0,20,214,3,3
	.word	27351
	.byte	10
	.byte	'_Ifx_CPU_DPR_U_Bits',0,20,217,3,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	3,29,2,35,0,11
	.byte	'UPPBND',0,4
	.word	461
	.byte	29,0,2,35,0,0,20
	.byte	'Ifx_CPU_DPR_U_Bits',0,20,221,3,3
	.word	27446
	.byte	10
	.byte	'_Ifx_CPU_DPWE_Bits',0,20,224,3,16,4,11
	.byte	'WE_N',0,4
	.word	461
	.byte	18,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	461
	.byte	14,0,2,35,0,0,20
	.byte	'Ifx_CPU_DPWE_Bits',0,20,228,3,3
	.word	27541
	.byte	10
	.byte	'_Ifx_CPU_DSTR_Bits',0,20,231,3,16,4,11
	.byte	'SRE',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'GAE',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'LBE',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'DRE',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	461
	.byte	2,26,2,35,0,11
	.byte	'CRE',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	461
	.byte	7,18,2,35,0,11
	.byte	'DTME',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'LOE',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'SDE',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'SCE',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'CAC',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'MPE',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'CLE',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	461
	.byte	3,8,2,35,0,11
	.byte	'ALN',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	461
	.byte	7,0,2,35,0,0,20
	.byte	'Ifx_CPU_DSTR_Bits',0,20,250,3,3
	.word	27633
	.byte	10
	.byte	'_Ifx_CPU_EXEVT_Bits',0,20,253,3,16,4,11
	.byte	'EVTA',0,4
	.word	461
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	461
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_CPU_EXEVT_Bits',0,20,133,4,3
	.word	27972
	.byte	10
	.byte	'_Ifx_CPU_FCX_Bits',0,20,136,4,16,4,11
	.byte	'FCXO',0,4
	.word	461
	.byte	16,16,2,35,0,11
	.byte	'FCXS',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	461
	.byte	12,0,2,35,0,0,20
	.byte	'Ifx_CPU_FCX_Bits',0,20,141,4,3
	.word	28126
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON0_Bits',0,20,144,4,16,4,11
	.byte	'TAG1',0,4
	.word	461
	.byte	6,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	461
	.byte	2,24,2,35,0,11
	.byte	'TAG2',0,4
	.word	461
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	461
	.byte	2,16,2,35,0,11
	.byte	'TAG3',0,4
	.word	461
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	461
	.byte	2,8,2,35,0,11
	.byte	'TAG4',0,4
	.word	461
	.byte	6,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	461
	.byte	2,0,2,35,0,0,20
	.byte	'Ifx_CPU_FLASHCON0_Bits',0,20,154,4,3
	.word	28232
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON1_Bits',0,20,157,4,16,4,11
	.byte	'STALL',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	461
	.byte	15,16,2,35,0,11
	.byte	'MASKUECC',0,4
	.word	461
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	461
	.byte	6,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	461
	.byte	2,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	461
	.byte	6,0,2,35,0,0,20
	.byte	'Ifx_CPU_FLASHCON1_Bits',0,20,165,4,3
	.word	28450
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON2_Bits',0,20,168,4,16,4,11
	.byte	'RECDIS',0,4
	.word	461
	.byte	2,30,2,35,0,11
	.byte	'ECCCORDIS',0,4
	.word	461
	.byte	2,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'HMARGIN',0,4
	.word	461
	.byte	2,22,2,35,0,11
	.byte	'MSEL',0,4
	.word	461
	.byte	2,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	461
	.byte	4,16,2,35,0,11
	.byte	'ECCSCLR',0,4
	.word	461
	.byte	2,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	461
	.byte	6,8,2,35,0,11
	.byte	'SBABCLR',0,4
	.word	461
	.byte	2,6,2,35,0,11
	.byte	'DBABCLR',0,4
	.word	461
	.byte	2,4,2,35,0,11
	.byte	'MBABCLR',0,4
	.word	461
	.byte	2,2,2,35,0,11
	.byte	'ZBABCLR',0,4
	.word	461
	.byte	2,0,2,35,0,0,20
	.byte	'Ifx_CPU_FLASHCON2_Bits',0,20,182,4,3
	.word	28641
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON3_Bits',0,20,185,4,16,4,11
	.byte	'ECCERRINJ',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EDCERRINJ',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'SBABERRINJ',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'DBABERRINJ',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'MBABERRINJ',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'ZBABERRINJ',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'SBERERRINJ',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'DBERERRINJ',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'NVMCERRINJ',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'FLCONERRINJ',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	461
	.byte	22,0,2,35,0,0,20
	.byte	'Ifx_CPU_FLASHCON3_Bits',0,20,198,4,3
	.word	28941
	.byte	10
	.byte	'_Ifx_CPU_FLASHCON4_Bits',0,20,201,4,16,4,11
	.byte	'DDIS',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	461
	.byte	31,0,2,35,0,0,20
	.byte	'Ifx_CPU_FLASHCON4_Bits',0,20,205,4,3
	.word	29246
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_CON_Bits',0,20,208,4,16,4,11
	.byte	'TST',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'TCL',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	461
	.byte	6,24,2,35,0,11
	.byte	'RM',0,4
	.word	461
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	461
	.byte	8,14,2,35,0,11
	.byte	'FXE',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'FUE',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'FZE',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'FVE',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'FIE',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	461
	.byte	3,6,2,35,0,11
	.byte	'FX',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'FU',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'FZ',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'FV',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'FI',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_FPU_TRAP_CON_Bits',0,20,227,4,3
	.word	29347
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_OPC_Bits',0,20,230,4,16,4,11
	.byte	'OPC',0,4
	.word	461
	.byte	8,24,2,35,0,11
	.byte	'FMT',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	461
	.byte	7,16,2,35,0,11
	.byte	'DREG',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	461
	.byte	12,0,2,35,0,0,20
	.byte	'Ifx_CPU_FPU_TRAP_OPC_Bits',0,20,237,4,3
	.word	29696
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_PC_Bits',0,20,240,4,16,4,11
	.byte	'PC',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CPU_FPU_TRAP_PC_Bits',0,20,243,4,3
	.word	29856
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC1_Bits',0,20,246,4,16,4,11
	.byte	'SRC1',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CPU_FPU_TRAP_SRC1_Bits',0,20,249,4,3
	.word	29937
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC2_Bits',0,20,252,4,16,4,11
	.byte	'SRC2',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CPU_FPU_TRAP_SRC2_Bits',0,20,255,4,3
	.word	30024
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP_SRC3_Bits',0,20,130,5,16,4,11
	.byte	'SRC3',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CPU_FPU_TRAP_SRC3_Bits',0,20,133,5,3
	.word	30111
	.byte	10
	.byte	'_Ifx_CPU_ICNT_Bits',0,20,136,5,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	461
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_ICNT_Bits',0,20,140,5,3
	.word	30198
	.byte	20
	.byte	'Ifx_CPU_ICR_Bits',0,20,150,5,3
	.word	17100
	.byte	10
	.byte	'_Ifx_CPU_ISP_Bits',0,20,153,5,16,4,11
	.byte	'ISP',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CPU_ISP_Bits',0,20,156,5,3
	.word	30315
	.byte	10
	.byte	'_Ifx_CPU_KRST0_Bits',0,20,159,5,16,4,11
	.byte	'RST',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'RSTSTAT',0,4
	.word	461
	.byte	2,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	461
	.byte	29,0,2,35,0,0,20
	.byte	'Ifx_CPU_KRST0_Bits',0,20,164,5,3
	.word	30381
	.byte	10
	.byte	'_Ifx_CPU_KRST1_Bits',0,20,167,5,16,4,11
	.byte	'RST',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	461
	.byte	31,0,2,35,0,0,20
	.byte	'Ifx_CPU_KRST1_Bits',0,20,171,5,3
	.word	30492
	.byte	10
	.byte	'_Ifx_CPU_KRSTCLR_Bits',0,20,174,5,16,4,11
	.byte	'CLR',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	461
	.byte	31,0,2,35,0,0,20
	.byte	'Ifx_CPU_KRSTCLR_Bits',0,20,178,5,3
	.word	30584
	.byte	10
	.byte	'_Ifx_CPU_LCX_Bits',0,20,181,5,16,4,11
	.byte	'LCXO',0,4
	.word	461
	.byte	16,16,2,35,0,11
	.byte	'LCXS',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	461
	.byte	12,0,2,35,0,0,20
	.byte	'Ifx_CPU_LCX_Bits',0,20,186,5,3
	.word	30680
	.byte	10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,20,189,5,16,4,11
	.byte	'EN0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R_Bits',0,20,223,5,3
	.word	30786
	.byte	10
	.byte	'_Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,20,226,5,16,4,11
	.byte	'EN32',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R_Bits',0,20,132,6,3
	.word	31369
	.byte	10
	.byte	'_Ifx_CPU_M1CNT_Bits',0,20,135,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	461
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_M1CNT_Bits',0,20,139,6,3
	.word	31962
	.byte	10
	.byte	'_Ifx_CPU_M2CNT_Bits',0,20,142,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	461
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_M2CNT_Bits',0,20,146,6,3
	.word	32055
	.byte	10
	.byte	'_Ifx_CPU_M3CNT_Bits',0,20,149,6,16,4,11
	.byte	'COUNTVALUE',0,4
	.word	461
	.byte	31,1,2,35,0,11
	.byte	'SOVF',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_M3CNT_Bits',0,20,153,6,3
	.word	32148
	.byte	10
	.byte	'_Ifx_CPU_OSEL_Bits',0,20,156,6,16,4,11
	.byte	'SHOVEN_X',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CPU_OSEL_Bits',0,20,159,6,3
	.word	32241
	.byte	10
	.byte	'_Ifx_CPU_PC_Bits',0,20,162,6,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'PC',0,4
	.word	461
	.byte	31,0,2,35,0,0,20
	.byte	'Ifx_CPU_PC_Bits',0,20,166,6,3
	.word	32314
	.byte	10
	.byte	'_Ifx_CPU_PCON0_Bits',0,20,169,6,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'PCBYP',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	461
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_CPU_PCON0_Bits',0,20,174,6,3
	.word	32399
	.byte	10
	.byte	'_Ifx_CPU_PCON1_Bits',0,20,177,6,16,4,11
	.byte	'PCINV',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'PBINV',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	461
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_CPU_PCON1_Bits',0,20,182,6,3
	.word	32515
	.byte	10
	.byte	'_Ifx_CPU_PCON2_Bits',0,20,185,6,16,4,11
	.byte	'PCACHE_SZE',0,4
	.word	461
	.byte	16,16,2,35,0,11
	.byte	'PSCRATCH_SZE',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_CPU_PCON2_Bits',0,20,189,6,3
	.word	32626
	.byte	10
	.byte	'_Ifx_CPU_PCXI_Bits',0,20,192,6,16,4,11
	.byte	'PCXO',0,4
	.word	461
	.byte	16,16,2,35,0,11
	.byte	'PCXS',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'UL',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'PIE',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'PCPN',0,4
	.word	461
	.byte	8,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	461
	.byte	2,0,2,35,0,0,20
	.byte	'Ifx_CPU_PCXI_Bits',0,20,200,6,3
	.word	32727
	.byte	10
	.byte	'_Ifx_CPU_PIEAR_Bits',0,20,203,6,16,4,11
	.byte	'TA',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CPU_PIEAR_Bits',0,20,206,6,3
	.word	32880
	.byte	10
	.byte	'_Ifx_CPU_PIETR_Bits',0,20,209,6,16,4,11
	.byte	'IED',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'IE_T',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'IE_C',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'IE_S',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'IE_BI',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'E_INFO',0,4
	.word	461
	.byte	6,21,2,35,0,11
	.byte	'IE_UNC',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'IE_SP',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'IE_BS',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'IE_ADDR',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'IE_LPB',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'IE_MTMV',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	461
	.byte	15,0,2,35,0,0,20
	.byte	'Ifx_CPU_PIETR_Bits',0,20,224,6,3
	.word	32949
	.byte	10
	.byte	'_Ifx_CPU_PMA0_Bits',0,20,227,6,16,4,11
	.byte	'DAC',0,4
	.word	461
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_CPU_PMA0_Bits',0,20,231,6,3
	.word	33233
	.byte	10
	.byte	'_Ifx_CPU_PMA1_Bits',0,20,234,6,16,4,11
	.byte	'CAC',0,4
	.word	461
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_CPU_PMA1_Bits',0,20,238,6,3
	.word	33324
	.byte	10
	.byte	'_Ifx_CPU_PMA2_Bits',0,20,241,6,16,4,11
	.byte	'PSI',0,4
	.word	461
	.byte	16,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_CPU_PMA2_Bits',0,20,245,6,3
	.word	33415
	.byte	10
	.byte	'_Ifx_CPU_PSTR_Bits',0,20,248,6,16,4,11
	.byte	'FRE',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'reserved_1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'FBE',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	461
	.byte	9,20,2,35,0,11
	.byte	'FPE',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'FME',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	461
	.byte	17,0,2,35,0,0,20
	.byte	'Ifx_CPU_PSTR_Bits',0,20,130,7,3
	.word	33506
	.byte	10
	.byte	'_Ifx_CPU_PSW_Bits',0,20,133,7,16,4,11
	.byte	'CDC',0,4
	.word	461
	.byte	7,25,2,35,0,11
	.byte	'CDE',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'GW',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'IS',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'IO',0,4
	.word	461
	.byte	2,20,2,35,0,11
	.byte	'PRS',0,4
	.word	461
	.byte	2,18,2,35,0,11
	.byte	'S',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'PRS2',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	8,8,2,35,0,11
	.byte	'USB',0,4
	.word	461
	.byte	8,0,2,35,0,0,20
	.byte	'Ifx_CPU_PSW_Bits',0,20,145,7,3
	.word	33709
	.byte	10
	.byte	'_Ifx_CPU_RGN_ACCENA_Bits',0,20,148,7,16,4,11
	.byte	'EN0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_RGN_ACCENA_Bits',0,20,182,7,3
	.word	33914
	.byte	10
	.byte	'_Ifx_CPU_RGN_ACCENB_Bits',0,20,185,7,16,4,11
	.byte	'EN32',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_RGN_ACCENB_Bits',0,20,219,7,3
	.word	34481
	.byte	10
	.byte	'_Ifx_CPU_RGN_LA_Bits',0,20,222,7,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	461
	.byte	27,0,2,35,0,0,20
	.byte	'Ifx_CPU_RGN_LA_Bits',0,20,226,7,3
	.word	35058
	.byte	10
	.byte	'_Ifx_CPU_RGN_UA_Bits',0,20,229,7,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	5,27,2,35,0,11
	.byte	'ADDR',0,4
	.word	461
	.byte	27,0,2,35,0,0,20
	.byte	'Ifx_CPU_RGN_UA_Bits',0,20,233,7,3
	.word	35153
	.byte	10
	.byte	'_Ifx_CPU_SEGEN_Bits',0,20,236,7,16,4,11
	.byte	'ADFLIP',0,4
	.word	461
	.byte	8,24,2,35,0,11
	.byte	'ADTYPE',0,4
	.word	461
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	461
	.byte	21,1,2,35,0,11
	.byte	'AE',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_SEGEN_Bits',0,20,242,7,3
	.word	35248
	.byte	10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,20,245,7,16,4,11
	.byte	'EN0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W_Bits',0,20,151,8,3
	.word	35376
	.byte	10
	.byte	'_Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,20,154,8,16,4,11
	.byte	'EN32',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W_Bits',0,20,188,8,3
	.word	35959
	.byte	10
	.byte	'_Ifx_CPU_SMACON_Bits',0,20,191,8,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	24,8,2,35,0,11
	.byte	'IODT',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	461
	.byte	7,0,2,35,0,0,20
	.byte	'Ifx_CPU_SMACON_Bits',0,20,196,8,3
	.word	36552
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,20,199,8,16,4,11
	.byte	'EN0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EN1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EN2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'EN3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'EN4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'EN5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'EN6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'EN7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EN8',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'EN9',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'EN10',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'EN11',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'EN12',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'EN13',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'EN14',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'EN15',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'EN16',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'EN17',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'EN18',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'EN19',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'EN20',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'EN21',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'EN22',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'EN23',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'EN24',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'EN25',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'EN26',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'EN27',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'EN28',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'EN29',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'EN30',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'EN31',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R_Bits',0,20,233,8,3
	.word	36670
	.byte	10
	.byte	'_Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,20,236,8,16,4,11
	.byte	'EN32',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EN33',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EN34',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'EN35',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'EN36',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'EN37',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'EN38',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'EN39',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EN40',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'EN41',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'EN42',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'EN43',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'EN44',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'EN45',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'EN46',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'EN47',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'EN48',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'EN49',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'EN50',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'EN51',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'EN52',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'EN53',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'EN54',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'EN55',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'EN56',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'EN57',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'EN58',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'EN59',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'EN60',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'EN61',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'EN62',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'EN63',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R_Bits',0,20,142,9,3
	.word	37259
	.byte	10
	.byte	'_Ifx_CPU_SWEVT_Bits',0,20,145,9,16,4,11
	.byte	'EVTA',0,4
	.word	461
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	461
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_CPU_SWEVT_Bits',0,20,153,9,3
	.word	37858
	.byte	10
	.byte	'_Ifx_CPU_SYSCON_Bits',0,20,156,9,16,4,11
	.byte	'FCDSF',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'PROTEN',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'TPROTEN',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'IS',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'TS',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	461
	.byte	3,24,2,35,0,11
	.byte	'ESDIS',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	461
	.byte	7,16,2,35,0,11
	.byte	'U1_IED',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'U1_IOS',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	461
	.byte	6,8,2,35,0,11
	.byte	'BHALT',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	461
	.byte	7,0,2,35,0,0,20
	.byte	'Ifx_CPU_SYSCON_Bits',0,20,171,9,3
	.word	38012
	.byte	10
	.byte	'_Ifx_CPU_TASK_ASI_Bits',0,20,174,9,16,4,11
	.byte	'ASI',0,4
	.word	461
	.byte	5,27,2,35,0,11
	.byte	'reserved_5',0,4
	.word	461
	.byte	27,0,2,35,0,0,20
	.byte	'Ifx_CPU_TASK_ASI_Bits',0,20,178,9,3
	.word	38311
	.byte	10
	.byte	'_Ifx_CPU_TPS_CON_Bits',0,20,181,9,16,4,11
	.byte	'TEXP0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'TEXP1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'TEXP2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	461
	.byte	13,16,2,35,0,11
	.byte	'TTRAP',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	461
	.byte	15,0,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_CON_Bits',0,20,189,9,3
	.word	38409
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,20,192,9,16,4,11
	.byte	'EXTIM_CLASS_EN',0,4
	.word	461
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN_Bits',0,20,196,9,3
	.word	38581
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,20,199,9,16,4,11
	.byte	'ENTRY_CVAL',0,4
	.word	461
	.byte	12,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	461
	.byte	20,0,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL_Bits',0,20,203,9,3
	.word	38710
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,20,206,9,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'ENTRY_LVAL',0,4
	.word	461
	.byte	8,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	461
	.byte	20,0,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL_Bits',0,20,211,9,3
	.word	38840
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,20,214,9,16,4,11
	.byte	'EXIT_CVAL',0,4
	.word	461
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	461
	.byte	8,0,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL_Bits',0,20,218,9,3
	.word	38992
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,20,221,9,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'EXIT_LVAL',0,4
	.word	461
	.byte	20,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	461
	.byte	8,0,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL_Bits',0,20,226,9,3
	.word	39119
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_FCX_Bits',0,20,229,9,16,4,11
	.byte	'EXIT_FCX',0,4
	.word	461
	.byte	20,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	461
	.byte	12,0,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_FCX_Bits',0,20,233,9,3
	.word	39268
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM_STAT_Bits',0,20,236,9,16,4,11
	.byte	'EXIT_TIN',0,4
	.word	461
	.byte	8,24,2,35,0,11
	.byte	'EXIT_CLASS',0,4
	.word	461
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	461
	.byte	4,17,2,35,0,11
	.byte	'EXIT_AT',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'ENTRY_TIN',0,4
	.word	461
	.byte	8,8,2,35,0,11
	.byte	'ENTRY_CLASS',0,4
	.word	461
	.byte	3,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	461
	.byte	4,1,2,35,0,11
	.byte	'ENTRY_AT',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_STAT_Bits',0,20,246,9,3
	.word	39382
	.byte	10
	.byte	'_Ifx_CPU_TPS_TIMER_Bits',0,20,249,9,16,4,11
	.byte	'TIMER',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_TIMER_Bits',0,20,252,9,3
	.word	39626
	.byte	10
	.byte	'_Ifx_CPU_TRIG_ACC_Bits',0,20,255,9,16,4,11
	.byte	'T0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'T1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'T2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'T3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'T4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'T5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'T6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'T7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_CPU_TRIG_ACC_Bits',0,20,138,10,3
	.word	39706
	.byte	10
	.byte	'_Ifx_CPU_TR_ADR_Bits',0,20,141,10,16,4,11
	.byte	'ADDR',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CPU_TR_ADR_Bits',0,20,144,10,3
	.word	39901
	.byte	10
	.byte	'_Ifx_CPU_TR_EVT_Bits',0,20,147,10,16,4,11
	.byte	'EVTA',0,4
	.word	461
	.byte	3,29,2,35,0,11
	.byte	'BBM',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'BOD',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'SUSP',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'CNT',0,4
	.word	461
	.byte	2,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	4,20,2,35,0,11
	.byte	'TYP',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'RNG',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'ASI_EN',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'ASI',0,4
	.word	461
	.byte	5,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	461
	.byte	6,5,2,35,0,11
	.byte	'AST',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'ALD',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	461
	.byte	3,0,2,35,0,0,20
	.byte	'Ifx_CPU_TR_EVT_Bits',0,20,164,10,3
	.word	39974
	.byte	12,20,172,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21445
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_A',0,20,177,10,3
	.word	40292
	.byte	12,20,180,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21506
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_BIV',0,20,185,10,3
	.word	40351
	.byte	12,20,188,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21585
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_BLK_OMASK',0,20,193,10,3
	.word	40412
	.byte	12,20,196,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21723
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_BLK_OTAR',0,20,201,10,3
	.word	40479
	.byte	12,20,204,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21844
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_BLK_RABR',0,20,209,10,3
	.word	40545
	.byte	12,20,212,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22020
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_BTV',0,20,217,10,3
	.word	40611
	.byte	12,20,220,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22106
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_CCNT',0,20,225,10,3
	.word	40672
	.byte	12,20,228,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22195
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_CCTRL',0,20,233,10,3
	.word	40734
	.byte	12,20,236,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22342
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_COMPAT',0,20,241,10,3
	.word	40797
	.byte	12,20,244,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22471
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_CORE_ID',0,20,249,10,3
	.word	40861
	.byte	12,20,252,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22571
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_CPR_L',0,20,129,11,3
	.word	40926
	.byte	12,20,132,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22666
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_CPR_U',0,20,137,11,3
	.word	40989
	.byte	12,20,140,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22761
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_CPU_ID',0,20,145,11,3
	.word	41052
	.byte	12,20,148,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22871
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_CPXE',0,20,153,11,3
	.word	41116
	.byte	12,20,156,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22963
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_CREVT',0,20,161,11,3
	.word	41178
	.byte	12,20,164,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23117
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_CUS_ID',0,20,169,11,3
	.word	41241
	.byte	12,20,172,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23211
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_D',0,20,177,11,3
	.word	41305
	.byte	12,20,180,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23274
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DATR',0,20,185,11,3
	.word	41364
	.byte	12,20,188,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23500
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DBGSR',0,20,193,11,3
	.word	41426
	.byte	12,20,196,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23715
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DBGTCR',0,20,201,11,3
	.word	41489
	.byte	12,20,204,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23809
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DCON0',0,20,209,11,3
	.word	41553
	.byte	12,20,212,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23925
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DCON2',0,20,217,11,3
	.word	41616
	.byte	12,20,220,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24026
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DCX',0,20,225,11,3
	.word	41679
	.byte	12,20,228,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24119
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DEADD',0,20,233,11,3
	.word	41740
	.byte	12,20,236,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24199
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DIEAR',0,20,241,11,3
	.word	41803
	.byte	12,20,244,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24268
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DIETR',0,20,249,11,3
	.word	41866
	.byte	12,20,252,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24552
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_R',0,20,129,12,3
	.word	41929
	.byte	12,20,132,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25143
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENA_W',0,20,137,12,3
	.word	42009
	.byte	12,20,140,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25734
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_R',0,20,145,12,3
	.word	42089
	.byte	12,20,148,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26335
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DLMU_SPROT_RGNACCENB_W',0,20,153,12,3
	.word	42169
	.byte	12,20,156,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26936
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DLMU_SPROT_RGNLA',0,20,161,12,3
	.word	42249
	.byte	12,20,164,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27051
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DLMU_SPROT_RGNUA',0,20,169,12,3
	.word	42323
	.byte	12,20,172,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27166
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DMS',0,20,177,12,3
	.word	42397
	.byte	12,20,180,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27259
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DPRE',0,20,185,12,3
	.word	42458
	.byte	12,20,188,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27351
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DPR_L',0,20,193,12,3
	.word	42520
	.byte	12,20,196,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27446
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DPR_U',0,20,201,12,3
	.word	42583
	.byte	12,20,204,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27541
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DPWE',0,20,209,12,3
	.word	42646
	.byte	12,20,212,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27633
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_DSTR',0,20,217,12,3
	.word	42708
	.byte	12,20,220,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27972
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_EXEVT',0,20,225,12,3
	.word	42770
	.byte	12,20,228,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28126
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_FCX',0,20,233,12,3
	.word	42833
	.byte	12,20,236,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28232
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_FLASHCON0',0,20,241,12,3
	.word	42894
	.byte	12,20,244,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28450
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_FLASHCON1',0,20,249,12,3
	.word	42961
	.byte	12,20,252,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28641
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_FLASHCON2',0,20,129,13,3
	.word	43028
	.byte	12,20,132,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28941
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_FLASHCON3',0,20,137,13,3
	.word	43095
	.byte	12,20,140,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29246
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_FLASHCON4',0,20,145,13,3
	.word	43162
	.byte	12,20,148,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29347
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_FPU_TRAP_CON',0,20,153,13,3
	.word	43229
	.byte	12,20,156,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29696
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_FPU_TRAP_OPC',0,20,161,13,3
	.word	43299
	.byte	12,20,164,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29856
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_FPU_TRAP_PC',0,20,169,13,3
	.word	43369
	.byte	12,20,172,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29937
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_FPU_TRAP_SRC1',0,20,177,13,3
	.word	43438
	.byte	12,20,180,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30024
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_FPU_TRAP_SRC2',0,20,185,13,3
	.word	43509
	.byte	12,20,188,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30111
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_FPU_TRAP_SRC3',0,20,193,13,3
	.word	43580
	.byte	12,20,196,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30198
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_ICNT',0,20,201,13,3
	.word	43651
	.byte	20
	.byte	'Ifx_CPU_ICR',0,20,209,13,3
	.word	17216
	.byte	12,20,212,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30315
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_ISP',0,20,217,13,3
	.word	43734
	.byte	12,20,220,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30381
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_KRST0',0,20,225,13,3
	.word	43795
	.byte	12,20,228,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30492
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_KRST1',0,20,233,13,3
	.word	43858
	.byte	12,20,236,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30584
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_KRSTCLR',0,20,241,13,3
	.word	43921
	.byte	12,20,244,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30680
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_LCX',0,20,249,13,3
	.word	43986
	.byte	12,20,252,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30786
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_LPB_SPROT_ACCENA_R',0,20,129,14,3
	.word	44047
	.byte	12,20,132,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31369
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_LPB_SPROT_ACCENB_R',0,20,137,14,3
	.word	44123
	.byte	12,20,140,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31962
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_M1CNT',0,20,145,14,3
	.word	44199
	.byte	12,20,148,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32055
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_M2CNT',0,20,153,14,3
	.word	44262
	.byte	12,20,156,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32148
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_M3CNT',0,20,161,14,3
	.word	44325
	.byte	12,20,164,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32241
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_OSEL',0,20,169,14,3
	.word	44388
	.byte	12,20,172,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32314
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_PC',0,20,177,14,3
	.word	44450
	.byte	12,20,180,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32399
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_PCON0',0,20,185,14,3
	.word	44510
	.byte	12,20,188,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32515
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_PCON1',0,20,193,14,3
	.word	44573
	.byte	12,20,196,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32626
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_PCON2',0,20,201,14,3
	.word	44636
	.byte	12,20,204,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32727
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_PCXI',0,20,209,14,3
	.word	44699
	.byte	12,20,212,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32880
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_PIEAR',0,20,217,14,3
	.word	44761
	.byte	12,20,220,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32949
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_PIETR',0,20,225,14,3
	.word	44824
	.byte	12,20,228,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33233
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_PMA0',0,20,233,14,3
	.word	44887
	.byte	12,20,236,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33324
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_PMA1',0,20,241,14,3
	.word	44949
	.byte	12,20,244,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33415
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_PMA2',0,20,249,14,3
	.word	45011
	.byte	12,20,252,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33506
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_PSTR',0,20,129,15,3
	.word	45073
	.byte	12,20,132,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33709
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_PSW',0,20,137,15,3
	.word	45135
	.byte	12,20,140,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33914
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_RGN_ACCENA',0,20,145,15,3
	.word	45196
	.byte	12,20,148,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34481
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_RGN_ACCENB',0,20,153,15,3
	.word	45264
	.byte	12,20,156,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35058
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_RGN_LA',0,20,161,15,3
	.word	45332
	.byte	12,20,164,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35153
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_RGN_UA',0,20,169,15,3
	.word	45396
	.byte	12,20,172,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35248
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_SEGEN',0,20,177,15,3
	.word	45460
	.byte	12,20,180,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35376
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_SFR_SPROT_ACCENA_W',0,20,185,15,3
	.word	45523
	.byte	12,20,188,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35959
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_SFR_SPROT_ACCENB_W',0,20,193,15,3
	.word	45599
	.byte	12,20,196,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36552
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_SMACON',0,20,201,15,3
	.word	45675
	.byte	12,20,204,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36670
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENA_R',0,20,209,15,3
	.word	45739
	.byte	12,20,212,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37259
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_SPR_SPROT_RGNACCENB_R',0,20,217,15,3
	.word	45818
	.byte	12,20,220,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	37858
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_SWEVT',0,20,225,15,3
	.word	45897
	.byte	12,20,228,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38012
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_SYSCON',0,20,233,15,3
	.word	45960
	.byte	12,20,236,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38311
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_TASK_ASI',0,20,241,15,3
	.word	46024
	.byte	12,20,244,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38409
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_CON',0,20,249,15,3
	.word	46090
	.byte	12,20,252,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38581
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_CLASS_EN',0,20,129,16,3
	.word	46155
	.byte	12,20,132,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38710
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_CVAL',0,20,137,16,3
	.word	46231
	.byte	12,20,140,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38840
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_ENTRY_LVAL',0,20,145,16,3
	.word	46309
	.byte	12,20,148,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	38992
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_CVAL',0,20,153,16,3
	.word	46387
	.byte	12,20,156,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39119
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_EXIT_LVAL',0,20,161,16,3
	.word	46464
	.byte	12,20,164,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39268
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_FCX',0,20,169,16,3
	.word	46541
	.byte	12,20,172,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39382
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_EXTIM_STAT',0,20,177,16,3
	.word	46612
	.byte	12,20,180,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39626
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_TPS_TIMER',0,20,185,16,3
	.word	46684
	.byte	12,20,188,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39706
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_TRIG_ACC',0,20,193,16,3
	.word	46751
	.byte	12,20,196,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39901
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_TR_ADR',0,20,201,16,3
	.word	46817
	.byte	12,20,204,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	39974
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CPU_TR_EVT',0,20,209,16,3
	.word	46881
	.byte	10
	.byte	'_Ifx_CPU_RGN',0,20,221,16,25,16,13
	.byte	'LA',0
	.word	45332
	.byte	4,2,35,0,13
	.byte	'UA',0
	.word	45396
	.byte	4,2,35,4,13
	.byte	'ACCENA',0
	.word	45196
	.byte	4,2,35,8,13
	.byte	'ACCENB',0
	.word	45264
	.byte	4,2,35,12,0,14
	.word	46945
	.byte	20
	.byte	'Ifx_CPU_RGN',0,20,227,16,3
	.word	47021
	.byte	10
	.byte	'_Ifx_CPU_BLK',0,20,242,16,25,12,13
	.byte	'RABR',0
	.word	40545
	.byte	4,2,35,0,13
	.byte	'OTAR',0
	.word	40479
	.byte	4,2,35,4,13
	.byte	'OMASK',0
	.word	40412
	.byte	4,2,35,8,0,14
	.word	47047
	.byte	20
	.byte	'Ifx_CPU_BLK',0,20,247,16,3
	.word	47110
	.byte	10
	.byte	'_Ifx_CPU_FPU_TRAP',0,20,134,17,25,28,13
	.byte	'CON',0
	.word	43229
	.byte	4,2,35,0,13
	.byte	'PC',0
	.word	43369
	.byte	4,2,35,4,13
	.byte	'OPC',0
	.word	43299
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2634
	.byte	4,2,35,12,13
	.byte	'SRC1',0
	.word	43438
	.byte	4,2,35,16,13
	.byte	'SRC2',0
	.word	43509
	.byte	4,2,35,20,13
	.byte	'SRC3',0
	.word	43580
	.byte	4,2,35,24,0,14
	.word	47136
	.byte	20
	.byte	'Ifx_CPU_FPU_TRAP',0,20,143,17,3
	.word	47261
	.byte	10
	.byte	'_Ifx_CPU_DPR',0,20,158,17,25,8,13
	.byte	'L',0
	.word	42520
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	42583
	.byte	4,2,35,4,0,14
	.word	47292
	.byte	20
	.byte	'Ifx_CPU_DPR',0,20,162,17,3
	.word	47334
	.byte	10
	.byte	'_Ifx_CPU_CPR',0,20,177,17,25,8,13
	.byte	'L',0
	.word	40926
	.byte	4,2,35,0,13
	.byte	'U',0
	.word	40989
	.byte	4,2,35,4,0,14
	.word	47360
	.byte	20
	.byte	'Ifx_CPU_CPR',0,20,181,17,3
	.word	47402
	.byte	15,12
	.word	46684
	.byte	16,2,0,10
	.byte	'_Ifx_CPU_TPS',0,20,196,17,25,16,13
	.byte	'CON',0
	.word	46090
	.byte	4,2,35,0,13
	.byte	'TIMER',0
	.word	47428
	.byte	12,2,35,4,0,14
	.word	47437
	.byte	20
	.byte	'Ifx_CPU_TPS',0,20,200,17,3
	.word	47485
	.byte	10
	.byte	'_Ifx_CPU_TPS_EXTIM',0,20,215,17,25,28,13
	.byte	'ENTRY_LVAL',0
	.word	46309
	.byte	4,2,35,0,13
	.byte	'ENTRY_CVAL',0
	.word	46231
	.byte	4,2,35,4,13
	.byte	'EXIT_LVAL',0
	.word	46464
	.byte	4,2,35,8,13
	.byte	'EXIT_CVAL',0
	.word	46387
	.byte	4,2,35,12,13
	.byte	'CLASS_EN',0
	.word	46155
	.byte	4,2,35,16,13
	.byte	'STAT',0
	.word	46612
	.byte	4,2,35,20,13
	.byte	'FCX',0
	.word	46541
	.byte	4,2,35,24,0,14
	.word	47511
	.byte	20
	.byte	'Ifx_CPU_TPS_EXTIM',0,20,224,17,3
	.word	47660
	.byte	10
	.byte	'_Ifx_CPU_TR',0,20,239,17,25,8,13
	.byte	'EVT',0
	.word	46881
	.byte	4,2,35,0,13
	.byte	'ADR',0
	.word	46817
	.byte	4,2,35,4,0,14
	.word	47692
	.byte	20
	.byte	'Ifx_CPU_TR',0,20,243,17,3
	.word	47737
	.byte	15,128,34
	.word	613
	.byte	16,255,33,0,15,236,253,2
	.word	613
	.byte	16,235,253,2,0,15,244,31
	.word	613
	.byte	16,243,31,0,15,128,1
	.word	46945
	.byte	16,7,0,14
	.word	47797
	.byte	15,232,1
	.word	613
	.byte	16,231,1,0,15,128,48
	.word	613
	.byte	16,255,47,0,15,128,3
	.word	47047
	.byte	16,31,0,14
	.word	47834
	.byte	15,160,39
	.word	613
	.byte	16,159,39,0,15,208,223,1
	.word	613
	.byte	16,207,223,1,0,15,248,1
	.word	613
	.byte	16,247,1,0,15,244,29
	.word	613
	.byte	16,243,29,0,15,188,3
	.word	613
	.byte	16,187,3,0,15,232,3
	.word	613
	.byte	16,231,3,0,15,252,23
	.word	613
	.byte	16,251,23,0,14
	.word	47136
	.byte	15,228,63
	.word	613
	.byte	16,227,63,0,15,144,1
	.word	47292
	.byte	16,17,0,14
	.word	47944
	.byte	15,240,30
	.word	613
	.byte	16,239,30,0,15,80
	.word	47360
	.byte	16,9,0,14
	.word	47970
	.byte	15,176,31
	.word	613
	.byte	16,175,31,0,15,16
	.word	613
	.byte	16,15,0,15,152,7
	.word	613
	.byte	16,151,7,0,14
	.word	47437
	.byte	15,48
	.word	613
	.byte	16,47,0,14
	.word	47511
	.byte	15,164,23
	.word	613
	.byte	16,163,23,0,15,64
	.word	47692
	.byte	16,7,0,14
	.word	48045
	.byte	15,192,23
	.word	613
	.byte	16,191,23,0,15,28
	.word	613
	.byte	16,27,0,15,180,1
	.word	613
	.byte	16,179,1,0,15,172,1
	.word	613
	.byte	16,171,1,0,15,64
	.word	41305
	.byte	16,15,0,15,64
	.word	613
	.byte	16,63,0,15,64
	.word	40292
	.byte	16,15,0,10
	.byte	'_Ifx_CPU',0,20,130,18,25,128,128,8,13
	.byte	'reserved_0',0
	.word	47762
	.byte	128,34,2,35,0,13
	.byte	'FLASHCON0',0
	.word	42894
	.byte	4,3,35,128,34,13
	.byte	'FLASHCON1',0
	.word	42961
	.byte	4,3,35,132,34,13
	.byte	'FLASHCON2',0
	.word	43028
	.byte	4,3,35,136,34,13
	.byte	'FLASHCON3',0
	.word	43095
	.byte	4,3,35,140,34,13
	.byte	'FLASHCON4',0
	.word	43162
	.byte	4,3,35,144,34,13
	.byte	'reserved_1114',0
	.word	47773
	.byte	236,253,2,3,35,148,34,13
	.byte	'KRST0',0
	.word	43795
	.byte	4,4,35,128,160,3,13
	.byte	'KRST1',0
	.word	43858
	.byte	4,4,35,132,160,3,13
	.byte	'KRSTCLR',0
	.word	43921
	.byte	4,4,35,136,160,3,13
	.byte	'reserved_D00C',0
	.word	47786
	.byte	244,31,4,35,140,160,3,13
	.byte	'RGN',0
	.word	47807
	.byte	128,1,4,35,128,192,3,13
	.byte	'reserved_E080',0
	.word	4454
	.byte	8,4,35,128,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R0',0
	.word	45739
	.byte	4,4,35,136,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R0',0
	.word	45818
	.byte	4,4,35,140,193,3,13
	.byte	'reserved_E090',0
	.word	4454
	.byte	8,4,35,144,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R1',0
	.word	45739
	.byte	4,4,35,152,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R1',0
	.word	45818
	.byte	4,4,35,156,193,3,13
	.byte	'reserved_E0A0',0
	.word	4454
	.byte	8,4,35,160,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R2',0
	.word	45739
	.byte	4,4,35,168,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R2',0
	.word	45818
	.byte	4,4,35,172,193,3,13
	.byte	'reserved_E0B0',0
	.word	4454
	.byte	8,4,35,176,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R3',0
	.word	45739
	.byte	4,4,35,184,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R3',0
	.word	45818
	.byte	4,4,35,188,193,3,13
	.byte	'reserved_E0C0',0
	.word	4454
	.byte	8,4,35,192,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R4',0
	.word	45739
	.byte	4,4,35,200,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R4',0
	.word	45818
	.byte	4,4,35,204,193,3,13
	.byte	'reserved_E0D0',0
	.word	4454
	.byte	8,4,35,208,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R5',0
	.word	45739
	.byte	4,4,35,216,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R5',0
	.word	45818
	.byte	4,4,35,220,193,3,13
	.byte	'reserved_E0E0',0
	.word	4454
	.byte	8,4,35,224,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R6',0
	.word	45739
	.byte	4,4,35,232,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R6',0
	.word	45818
	.byte	4,4,35,236,193,3,13
	.byte	'reserved_E0F0',0
	.word	4454
	.byte	8,4,35,240,193,3,13
	.byte	'SPR_SPROT_RGNACCENA_R7',0
	.word	45739
	.byte	4,4,35,248,193,3,13
	.byte	'SPR_SPROT_RGNACCENB_R7',0
	.word	45818
	.byte	4,4,35,252,193,3,13
	.byte	'SFR_SPROT_ACCENA_W',0
	.word	45523
	.byte	4,4,35,128,194,3,13
	.byte	'SFR_SPROT_ACCENB_W',0
	.word	45599
	.byte	4,4,35,132,194,3,13
	.byte	'reserved_E108',0
	.word	4454
	.byte	8,4,35,136,194,3,13
	.byte	'LPB_SPROT_ACCENA_R',0
	.word	44047
	.byte	4,4,35,144,194,3,13
	.byte	'LPB_SPROT_ACCENB_R',0
	.word	44123
	.byte	4,4,35,148,194,3,13
	.byte	'reserved_E118',0
	.word	47812
	.byte	232,1,4,35,152,194,3,13
	.byte	'DLMU_SPROT_RGNLA0',0
	.word	42249
	.byte	4,4,35,128,196,3,13
	.byte	'DLMU_SPROT_RGNUA0',0
	.word	42323
	.byte	4,4,35,132,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W0',0
	.word	42009
	.byte	4,4,35,136,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W0',0
	.word	42169
	.byte	4,4,35,140,196,3,13
	.byte	'DLMU_SPROT_RGNLA1',0
	.word	42249
	.byte	4,4,35,144,196,3,13
	.byte	'DLMU_SPROT_RGNUA1',0
	.word	42323
	.byte	4,4,35,148,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W1',0
	.word	42009
	.byte	4,4,35,152,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W1',0
	.word	42169
	.byte	4,4,35,156,196,3,13
	.byte	'DLMU_SPROT_RGNLA2',0
	.word	42249
	.byte	4,4,35,160,196,3,13
	.byte	'DLMU_SPROT_RGNUA2',0
	.word	42323
	.byte	4,4,35,164,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W2',0
	.word	42009
	.byte	4,4,35,168,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W2',0
	.word	42169
	.byte	4,4,35,172,196,3,13
	.byte	'DLMU_SPROT_RGNLA3',0
	.word	42249
	.byte	4,4,35,176,196,3,13
	.byte	'DLMU_SPROT_RGNUA3',0
	.word	42323
	.byte	4,4,35,180,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W3',0
	.word	42009
	.byte	4,4,35,184,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W3',0
	.word	42169
	.byte	4,4,35,188,196,3,13
	.byte	'DLMU_SPROT_RGNLA4',0
	.word	42249
	.byte	4,4,35,192,196,3,13
	.byte	'DLMU_SPROT_RGNUA4',0
	.word	42323
	.byte	4,4,35,196,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W4',0
	.word	42009
	.byte	4,4,35,200,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W4',0
	.word	42169
	.byte	4,4,35,204,196,3,13
	.byte	'DLMU_SPROT_RGNLA5',0
	.word	42249
	.byte	4,4,35,208,196,3,13
	.byte	'DLMU_SPROT_RGNUA5',0
	.word	42323
	.byte	4,4,35,212,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W5',0
	.word	42009
	.byte	4,4,35,216,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W5',0
	.word	42169
	.byte	4,4,35,220,196,3,13
	.byte	'DLMU_SPROT_RGNLA6',0
	.word	42249
	.byte	4,4,35,224,196,3,13
	.byte	'DLMU_SPROT_RGNUA6',0
	.word	42323
	.byte	4,4,35,228,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W6',0
	.word	42009
	.byte	4,4,35,232,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W6',0
	.word	42169
	.byte	4,4,35,236,196,3,13
	.byte	'DLMU_SPROT_RGNLA7',0
	.word	42249
	.byte	4,4,35,240,196,3,13
	.byte	'DLMU_SPROT_RGNUA7',0
	.word	42323
	.byte	4,4,35,244,196,3,13
	.byte	'DLMU_SPROT_RGNACCENA_W7',0
	.word	42009
	.byte	4,4,35,248,196,3,13
	.byte	'DLMU_SPROT_RGNACCENB_W7',0
	.word	42169
	.byte	4,4,35,252,196,3,13
	.byte	'reserved_E280',0
	.word	4454
	.byte	8,4,35,128,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R0',0
	.word	41929
	.byte	4,4,35,136,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R0',0
	.word	42089
	.byte	4,4,35,140,197,3,13
	.byte	'reserved_E290',0
	.word	4454
	.byte	8,4,35,144,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R1',0
	.word	41929
	.byte	4,4,35,152,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R1',0
	.word	42089
	.byte	4,4,35,156,197,3,13
	.byte	'reserved_E2A0',0
	.word	4454
	.byte	8,4,35,160,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R2',0
	.word	41929
	.byte	4,4,35,168,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R2',0
	.word	42089
	.byte	4,4,35,172,197,3,13
	.byte	'reserved_E2B0',0
	.word	4454
	.byte	8,4,35,176,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R3',0
	.word	41929
	.byte	4,4,35,184,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R3',0
	.word	42089
	.byte	4,4,35,188,197,3,13
	.byte	'reserved_E2C0',0
	.word	4454
	.byte	8,4,35,192,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R4',0
	.word	41929
	.byte	4,4,35,200,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R4',0
	.word	42089
	.byte	4,4,35,204,197,3,13
	.byte	'reserved_E2D0',0
	.word	4454
	.byte	8,4,35,208,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R5',0
	.word	41929
	.byte	4,4,35,216,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R5',0
	.word	42089
	.byte	4,4,35,220,197,3,13
	.byte	'reserved_E2E0',0
	.word	4454
	.byte	8,4,35,224,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R6',0
	.word	41929
	.byte	4,4,35,232,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R6',0
	.word	42089
	.byte	4,4,35,236,197,3,13
	.byte	'reserved_E2F0',0
	.word	4454
	.byte	8,4,35,240,197,3,13
	.byte	'DLMU_SPROT_RGNACCENA_R7',0
	.word	41929
	.byte	4,4,35,248,197,3,13
	.byte	'DLMU_SPROT_RGNACCENB_R7',0
	.word	42089
	.byte	4,4,35,252,197,3,13
	.byte	'reserved_E300',0
	.word	47823
	.byte	128,48,4,35,128,198,3,13
	.byte	'OSEL',0
	.word	44388
	.byte	4,4,35,128,246,3,13
	.byte	'reserved_FB04',0
	.word	4794
	.byte	12,4,35,132,246,3,13
	.byte	'BLK',0
	.word	47844
	.byte	128,3,4,35,144,246,3,13
	.byte	'reserved_FC90',0
	.word	47849
	.byte	160,39,4,35,144,249,3,13
	.byte	'SEGEN',0
	.word	45460
	.byte	4,4,35,176,160,4,13
	.byte	'reserved_11034',0
	.word	47860
	.byte	208,223,1,4,35,180,160,4,13
	.byte	'TASK_ASI',0
	.word	46024
	.byte	4,4,35,132,128,6,13
	.byte	'reserved_18008',0
	.word	47873
	.byte	248,1,4,35,136,128,6,13
	.byte	'PMA0',0
	.word	44887
	.byte	4,4,35,128,130,6,13
	.byte	'PMA1',0
	.word	44949
	.byte	4,4,35,132,130,6,13
	.byte	'PMA2',0
	.word	45011
	.byte	4,4,35,136,130,6,13
	.byte	'reserved_1810C',0
	.word	47884
	.byte	244,29,4,35,140,130,6,13
	.byte	'DCON2',0
	.word	41616
	.byte	4,4,35,128,160,6,13
	.byte	'reserved_19004',0
	.word	4454
	.byte	8,4,35,132,160,6,13
	.byte	'SMACON',0
	.word	45675
	.byte	4,4,35,140,160,6,13
	.byte	'DSTR',0
	.word	42708
	.byte	4,4,35,144,160,6,13
	.byte	'reserved_19014',0
	.word	2634
	.byte	4,4,35,148,160,6,13
	.byte	'DATR',0
	.word	41364
	.byte	4,4,35,152,160,6,13
	.byte	'DEADD',0
	.word	41740
	.byte	4,4,35,156,160,6,13
	.byte	'DIEAR',0
	.word	41803
	.byte	4,4,35,160,160,6,13
	.byte	'DIETR',0
	.word	41866
	.byte	4,4,35,164,160,6,13
	.byte	'reserved_19028',0
	.word	3825
	.byte	24,4,35,168,160,6,13
	.byte	'DCON0',0
	.word	41553
	.byte	4,4,35,192,160,6,13
	.byte	'reserved_19044',0
	.word	47895
	.byte	188,3,4,35,196,160,6,13
	.byte	'PSTR',0
	.word	45073
	.byte	4,4,35,128,164,6,13
	.byte	'PCON1',0
	.word	44573
	.byte	4,4,35,132,164,6,13
	.byte	'PCON2',0
	.word	44636
	.byte	4,4,35,136,164,6,13
	.byte	'PCON0',0
	.word	44510
	.byte	4,4,35,140,164,6,13
	.byte	'PIEAR',0
	.word	44761
	.byte	4,4,35,144,164,6,13
	.byte	'PIETR',0
	.word	44824
	.byte	4,4,35,148,164,6,13
	.byte	'reserved_19218',0
	.word	47906
	.byte	232,3,4,35,152,164,6,13
	.byte	'COMPAT',0
	.word	40797
	.byte	4,4,35,128,168,6,13
	.byte	'reserved_19404',0
	.word	47917
	.byte	252,23,4,35,132,168,6,13
	.byte	'FPU_TRAP',0
	.word	47928
	.byte	28,4,35,128,192,6,13
	.byte	'reserved_1A01C',0
	.word	47933
	.byte	228,63,4,35,156,192,6,13
	.byte	'DPR',0
	.word	47954
	.byte	144,1,4,35,128,128,7,13
	.byte	'reserved_1C090',0
	.word	47959
	.byte	240,30,4,35,144,129,7,13
	.byte	'CPR',0
	.word	47979
	.byte	80,4,35,128,160,7,13
	.byte	'reserved_1D050',0
	.word	47984
	.byte	176,31,4,35,208,160,7,13
	.byte	'CPXE_0',0
	.word	41116
	.byte	4,4,35,128,192,7,13
	.byte	'CPXE_1',0
	.word	41116
	.byte	4,4,35,132,192,7,13
	.byte	'CPXE_2',0
	.word	41116
	.byte	4,4,35,136,192,7,13
	.byte	'CPXE_3',0
	.word	41116
	.byte	4,4,35,140,192,7,13
	.byte	'DPRE_0',0
	.word	42458
	.byte	4,4,35,144,192,7,13
	.byte	'DPRE_1',0
	.word	42458
	.byte	4,4,35,148,192,7,13
	.byte	'DPRE_2',0
	.word	42458
	.byte	4,4,35,152,192,7,13
	.byte	'DPRE_3',0
	.word	42458
	.byte	4,4,35,156,192,7,13
	.byte	'DPWE_0',0
	.word	42646
	.byte	4,4,35,160,192,7,13
	.byte	'DPWE_1',0
	.word	42646
	.byte	4,4,35,164,192,7,13
	.byte	'DPWE_2',0
	.word	42646
	.byte	4,4,35,168,192,7,13
	.byte	'DPWE_3',0
	.word	42646
	.byte	4,4,35,172,192,7,13
	.byte	'reserved_1E030',0
	.word	47995
	.byte	16,4,35,176,192,7,13
	.byte	'CPXE_4',0
	.word	41116
	.byte	4,4,35,192,192,7,13
	.byte	'CPXE_5',0
	.word	41116
	.byte	4,4,35,196,192,7,13
	.byte	'reserved_1E048',0
	.word	4454
	.byte	8,4,35,200,192,7,13
	.byte	'DPRE_4',0
	.word	42458
	.byte	4,4,35,208,192,7,13
	.byte	'DPRE_5',0
	.word	42458
	.byte	4,4,35,212,192,7,13
	.byte	'reserved_1E058',0
	.word	4454
	.byte	8,4,35,216,192,7,13
	.byte	'DPWE_4',0
	.word	42646
	.byte	4,4,35,224,192,7,13
	.byte	'DPWE_5',0
	.word	42646
	.byte	4,4,35,228,192,7,13
	.byte	'reserved_1E068',0
	.word	48004
	.byte	152,7,4,35,232,192,7,13
	.byte	'TPS',0
	.word	48015
	.byte	16,4,35,128,200,7,13
	.byte	'reserved_1E410',0
	.word	48020
	.byte	48,4,35,144,200,7,13
	.byte	'TPS_EXTIM',0
	.word	48029
	.byte	28,4,35,192,200,7,13
	.byte	'reserved_1E45C',0
	.word	48034
	.byte	164,23,4,35,220,200,7,13
	.byte	'TR',0
	.word	48054
	.byte	64,4,35,128,224,7,13
	.byte	'reserved_1F040',0
	.word	48059
	.byte	192,23,4,35,192,224,7,13
	.byte	'CCTRL',0
	.word	40734
	.byte	4,4,35,128,248,7,13
	.byte	'CCNT',0
	.word	40672
	.byte	4,4,35,132,248,7,13
	.byte	'ICNT',0
	.word	43651
	.byte	4,4,35,136,248,7,13
	.byte	'M1CNT',0
	.word	44199
	.byte	4,4,35,140,248,7,13
	.byte	'M2CNT',0
	.word	44262
	.byte	4,4,35,144,248,7,13
	.byte	'M3CNT',0
	.word	44325
	.byte	4,4,35,148,248,7,13
	.byte	'reserved_1FC18',0
	.word	47812
	.byte	232,1,4,35,152,248,7,13
	.byte	'DBGSR',0
	.word	41426
	.byte	4,4,35,128,250,7,13
	.byte	'reserved_1FD04',0
	.word	2634
	.byte	4,4,35,132,250,7,13
	.byte	'EXEVT',0
	.word	42770
	.byte	4,4,35,136,250,7,13
	.byte	'CREVT',0
	.word	41178
	.byte	4,4,35,140,250,7,13
	.byte	'SWEVT',0
	.word	45897
	.byte	4,4,35,144,250,7,13
	.byte	'reserved_1FD14',0
	.word	48070
	.byte	28,4,35,148,250,7,13
	.byte	'TRIG_ACC',0
	.word	46751
	.byte	4,4,35,176,250,7,13
	.byte	'reserved_1FD34',0
	.word	4794
	.byte	12,4,35,180,250,7,13
	.byte	'DMS',0
	.word	42397
	.byte	4,4,35,192,250,7,13
	.byte	'DCX',0
	.word	41679
	.byte	4,4,35,196,250,7,13
	.byte	'DBGTCR',0
	.word	41489
	.byte	4,4,35,200,250,7,13
	.byte	'reserved_1FD4C',0
	.word	48079
	.byte	180,1,4,35,204,250,7,13
	.byte	'PCXI',0
	.word	44699
	.byte	4,4,35,128,252,7,13
	.byte	'PSW',0
	.word	45135
	.byte	4,4,35,132,252,7,13
	.byte	'PC',0
	.word	44450
	.byte	4,4,35,136,252,7,13
	.byte	'reserved_1FE0C',0
	.word	4454
	.byte	8,4,35,140,252,7,13
	.byte	'SYSCON',0
	.word	45960
	.byte	4,4,35,148,252,7,13
	.byte	'CPU_ID',0
	.word	41052
	.byte	4,4,35,152,252,7,13
	.byte	'CORE_ID',0
	.word	40861
	.byte	4,4,35,156,252,7,13
	.byte	'BIV',0
	.word	40351
	.byte	4,4,35,160,252,7,13
	.byte	'BTV',0
	.word	40611
	.byte	4,4,35,164,252,7,13
	.byte	'ISP',0
	.word	43734
	.byte	4,4,35,168,252,7,13
	.byte	'ICR',0
	.word	17216
	.byte	4,4,35,172,252,7,13
	.byte	'reserved_1FE30',0
	.word	4454
	.byte	8,4,35,176,252,7,13
	.byte	'FCX',0
	.word	42833
	.byte	4,4,35,184,252,7,13
	.byte	'LCX',0
	.word	43986
	.byte	4,4,35,188,252,7,13
	.byte	'reserved_1FE40',0
	.word	47995
	.byte	16,4,35,192,252,7,13
	.byte	'CUS_ID',0
	.word	41241
	.byte	4,4,35,208,252,7,13
	.byte	'reserved_1FE54',0
	.word	48090
	.byte	172,1,4,35,212,252,7,13
	.byte	'D',0
	.word	48101
	.byte	64,4,35,128,254,7,13
	.byte	'reserved_1FF40',0
	.word	48110
	.byte	64,4,35,192,254,7,13
	.byte	'A',0
	.word	48119
	.byte	64,4,35,128,255,7,13
	.byte	'reserved_1FFC0',0
	.word	48110
	.byte	64,4,35,192,255,7,0,14
	.word	48128
	.byte	20
	.byte	'Ifx_CPU',0,20,210,19,3
	.word	53226
	.byte	17,9,124,9,1,18
	.byte	'IfxCpu_Id_0',0,0,18
	.byte	'IfxCpu_Id_1',0,1,18
	.byte	'IfxCpu_Id_2',0,2,18
	.byte	'IfxCpu_Id_3',0,3,18
	.byte	'IfxCpu_Id_4',0,4,18
	.byte	'IfxCpu_Id_6',0,6,18
	.byte	'IfxCpu_Id_none',0,7,0,20
	.byte	'IfxCpu_Id',0,9,133,1,3
	.word	53248
	.byte	20
	.byte	'IfxCpu_ResourceCpu',0,9,170,1,3
	.word	9394
	.byte	20
	.byte	'Ifx_SRC_SRCR_Bits',0,11,85,3
	.word	10039
	.byte	20
	.byte	'Ifx_SRC_SRCR',0,11,98,3
	.word	10329
	.byte	10
	.byte	'_Ifx_SRC_CPU_CPU',0,11,110,25,4,13
	.byte	'SB',0
	.word	10329
	.byte	4,2,35,0,0,14
	.word	53449
	.byte	20
	.byte	'Ifx_SRC_CPU_CPU',0,11,113,3
	.word	53484
	.byte	15,24
	.word	53449
	.byte	16,5,0,14
	.word	53513
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,11,128,1,25,24,13
	.byte	'CPU',0
	.word	53522
	.byte	24,2,35,0,0,14
	.word	53527
	.byte	20
	.byte	'Ifx_SRC_CPU',0,11,131,1,3
	.word	53560
	.byte	10
	.byte	'_Ifx_SRC_AGBT_AGBT',0,11,146,1,25,4,13
	.byte	'SR',0
	.word	10329
	.byte	4,2,35,0,0,14
	.word	53586
	.byte	20
	.byte	'Ifx_SRC_AGBT_AGBT',0,11,149,1,3
	.word	53624
	.byte	15,4
	.word	53586
	.byte	16,0,0,14
	.word	53656
	.byte	10
	.byte	'_Ifx_SRC_AGBT',0,11,164,1,25,4,13
	.byte	'AGBT',0
	.word	53665
	.byte	4,2,35,0,0,14
	.word	53670
	.byte	20
	.byte	'Ifx_SRC_AGBT',0,11,167,1,3
	.word	53705
	.byte	10
	.byte	'_Ifx_SRC_XBAR_XBAR',0,11,182,1,25,4,13
	.byte	'SR',0
	.word	10329
	.byte	4,2,35,0,0,14
	.word	53732
	.byte	20
	.byte	'Ifx_SRC_XBAR_XBAR',0,11,185,1,3
	.word	53770
	.byte	15,12
	.word	53732
	.byte	16,2,0,14
	.word	53802
	.byte	10
	.byte	'_Ifx_SRC_XBAR',0,11,200,1,25,12,13
	.byte	'XBAR',0
	.word	53811
	.byte	12,2,35,0,0,14
	.word	53816
	.byte	20
	.byte	'Ifx_SRC_XBAR',0,11,203,1,3
	.word	53851
	.byte	15,8
	.word	10329
	.byte	16,1,0,10
	.byte	'_Ifx_SRC_CERBERUS_CERBERUS',0,11,218,1,25,8,13
	.byte	'SR',0
	.word	53878
	.byte	8,2,35,0,0,14
	.word	53887
	.byte	20
	.byte	'Ifx_SRC_CERBERUS_CERBERUS',0,11,221,1,3
	.word	53933
	.byte	14
	.word	53887
	.byte	10
	.byte	'_Ifx_SRC_CERBERUS',0,11,236,1,25,8,13
	.byte	'CERBERUS',0
	.word	53973
	.byte	8,2,35,0,0,14
	.word	53978
	.byte	20
	.byte	'Ifx_SRC_CERBERUS',0,11,239,1,3
	.word	54021
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN_ASCLIN',0,11,254,1,25,12,13
	.byte	'TX',0
	.word	10329
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	10329
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	10329
	.byte	4,2,35,8,0,14
	.word	54052
	.byte	20
	.byte	'Ifx_SRC_ASCLIN_ASCLIN',0,11,131,2,3
	.word	54119
	.byte	15,144,1
	.word	54052
	.byte	16,11,0,14
	.word	54155
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,11,146,2,25,144,1,13
	.byte	'ASCLIN',0
	.word	54165
	.byte	144,1,2,35,0,0,14
	.word	54170
	.byte	20
	.byte	'Ifx_SRC_ASCLIN',0,11,149,2,3
	.word	54211
	.byte	10
	.byte	'_Ifx_SRC_QSPI_QSPI',0,11,164,2,25,20,13
	.byte	'TX',0
	.word	10329
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	10329
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	10329
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	10329
	.byte	4,2,35,12,13
	.byte	'U',0
	.word	10329
	.byte	4,2,35,16,0,14
	.word	54240
	.byte	20
	.byte	'Ifx_SRC_QSPI_QSPI',0,11,171,2,3
	.word	54326
	.byte	15,120
	.word	54240
	.byte	16,5,0,14
	.word	54358
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,11,186,2,25,120,13
	.byte	'QSPI',0
	.word	54367
	.byte	120,2,35,0,0,14
	.word	54372
	.byte	20
	.byte	'Ifx_SRC_QSPI',0,11,189,2,3
	.word	54407
	.byte	10
	.byte	'_Ifx_SRC_HSCT_HSCT',0,11,204,2,25,4,13
	.byte	'SR',0
	.word	10329
	.byte	4,2,35,0,0,14
	.word	54434
	.byte	20
	.byte	'Ifx_SRC_HSCT_HSCT',0,11,207,2,3
	.word	54472
	.byte	15,8
	.word	54434
	.byte	16,1,0,14
	.word	54504
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,11,222,2,25,8,13
	.byte	'HSCT',0
	.word	54513
	.byte	8,2,35,0,0,14
	.word	54518
	.byte	20
	.byte	'Ifx_SRC_HSCT',0,11,225,2,3
	.word	54553
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL_CH',0,11,240,2,25,16,13
	.byte	'COK',0
	.word	10329
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	10329
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	10329
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	10329
	.byte	4,2,35,12,0,14
	.word	54580
	.byte	20
	.byte	'Ifx_SRC_HSSL_HSSL_CH',0,11,246,2,3
	.word	54661
	.byte	15,64
	.word	54580
	.byte	16,3,0,14
	.word	54696
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL',0,11,133,3,25,68,13
	.byte	'CH',0
	.word	54705
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	10329
	.byte	4,2,35,64,0,14
	.word	54710
	.byte	20
	.byte	'Ifx_SRC_HSSL_HSSL',0,11,137,3,3
	.word	54761
	.byte	15,136,1
	.word	54710
	.byte	16,1,0,14
	.word	54793
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,11,152,3,25,136,1,13
	.byte	'HSSL',0
	.word	54803
	.byte	136,1,2,35,0,0,14
	.word	54808
	.byte	20
	.byte	'Ifx_SRC_HSSL',0,11,155,3,3
	.word	54845
	.byte	10
	.byte	'_Ifx_SRC_I2C_I2C',0,11,170,3,25,16,13
	.byte	'DTR',0
	.word	10329
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	10329
	.byte	4,2,35,4,13
	.byte	'P',0
	.word	10329
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2634
	.byte	4,2,35,12,0,14
	.word	54872
	.byte	20
	.byte	'Ifx_SRC_I2C_I2C',0,11,176,3,3
	.word	54953
	.byte	15,32
	.word	54872
	.byte	16,1,0,14
	.word	54983
	.byte	10
	.byte	'_Ifx_SRC_I2C',0,11,191,3,25,32,13
	.byte	'I2C',0
	.word	54992
	.byte	32,2,35,0,0,14
	.word	54997
	.byte	20
	.byte	'Ifx_SRC_I2C',0,11,194,3,3
	.word	55030
	.byte	10
	.byte	'_Ifx_SRC_SENT_SENT',0,11,209,3,25,4,13
	.byte	'SR',0
	.word	10329
	.byte	4,2,35,0,0,14
	.word	55056
	.byte	20
	.byte	'Ifx_SRC_SENT_SENT',0,11,212,3,3
	.word	55094
	.byte	15,40
	.word	55056
	.byte	16,9,0,14
	.word	55126
	.byte	10
	.byte	'_Ifx_SRC_SENT',0,11,227,3,25,40,13
	.byte	'SENT',0
	.word	55135
	.byte	40,2,35,0,0,14
	.word	55140
	.byte	20
	.byte	'Ifx_SRC_SENT',0,11,230,3,3
	.word	55175
	.byte	15,20
	.word	10329
	.byte	16,4,0,10
	.byte	'_Ifx_SRC_MSC_MSC',0,11,245,3,25,20,13
	.byte	'SR',0
	.word	55202
	.byte	20,2,35,0,0,14
	.word	55211
	.byte	20
	.byte	'Ifx_SRC_MSC_MSC',0,11,248,3,3
	.word	55247
	.byte	15,80
	.word	55211
	.byte	16,3,0,14
	.word	55277
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,11,135,4,25,80,13
	.byte	'MSC',0
	.word	55286
	.byte	80,2,35,0,0,14
	.word	55291
	.byte	20
	.byte	'Ifx_SRC_MSC',0,11,138,4,3
	.word	55324
	.byte	15,16
	.word	10329
	.byte	16,3,0,10
	.byte	'_Ifx_SRC_CCU6_CCU',0,11,153,4,25,16,13
	.byte	'SR',0
	.word	55350
	.byte	16,2,35,0,0,14
	.word	55359
	.byte	20
	.byte	'Ifx_SRC_CCU6_CCU',0,11,156,4,3
	.word	55396
	.byte	15,32
	.word	55359
	.byte	16,1,0,14
	.word	55427
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,11,171,4,25,32,13
	.byte	'CCU',0
	.word	55436
	.byte	32,2,35,0,0,14
	.word	55441
	.byte	20
	.byte	'Ifx_SRC_CCU6',0,11,174,4,3
	.word	55475
	.byte	10
	.byte	'_Ifx_SRC_GPT12_GPT12',0,11,189,4,25,24,13
	.byte	'CIRQ',0
	.word	10329
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	10329
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	10329
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	10329
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	10329
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	10329
	.byte	4,2,35,20,0,14
	.word	55502
	.byte	20
	.byte	'Ifx_SRC_GPT12_GPT12',0,11,197,4,3
	.word	55604
	.byte	15,24
	.word	55502
	.byte	16,0,0,14
	.word	55638
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,11,212,4,25,24,13
	.byte	'GPT12',0
	.word	55647
	.byte	24,2,35,0,0,14
	.word	55652
	.byte	20
	.byte	'Ifx_SRC_GPT12',0,11,215,4,3
	.word	55689
	.byte	10
	.byte	'_Ifx_SRC_STM_STM',0,11,230,4,25,8,13
	.byte	'SR',0
	.word	53878
	.byte	8,2,35,0,0,14
	.word	55717
	.byte	20
	.byte	'Ifx_SRC_STM_STM',0,11,233,4,3
	.word	55753
	.byte	15,48
	.word	55717
	.byte	16,5,0,14
	.word	55783
	.byte	10
	.byte	'_Ifx_SRC_STM',0,11,248,4,25,48,13
	.byte	'STM',0
	.word	55792
	.byte	48,2,35,0,0,14
	.word	55797
	.byte	20
	.byte	'Ifx_SRC_STM',0,11,251,4,3
	.word	55830
	.byte	10
	.byte	'_Ifx_SRC_FCE_FCE0',0,11,138,5,25,4,13
	.byte	'SR',0
	.word	10329
	.byte	4,2,35,0,0,14
	.word	55856
	.byte	20
	.byte	'Ifx_SRC_FCE_FCE0',0,11,141,5,3
	.word	55893
	.byte	14
	.word	55856
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,11,156,5,25,4,13
	.byte	'FCE0',0
	.word	55924
	.byte	4,2,35,0,0,14
	.word	55929
	.byte	20
	.byte	'Ifx_SRC_FCE',0,11,159,5,3
	.word	55963
	.byte	15,32
	.word	613
	.byte	16,31,0,15,128,4
	.word	10329
	.byte	16,127,0,10
	.byte	'_Ifx_SRC_DMA_DMA',0,11,174,5,25,176,4,13
	.byte	'ERR',0
	.word	55350
	.byte	16,2,35,0,13
	.byte	'reserved_10',0
	.word	55989
	.byte	32,2,35,16,13
	.byte	'CH',0
	.word	55998
	.byte	128,4,2,35,48,0,14
	.word	56008
	.byte	20
	.byte	'Ifx_SRC_DMA_DMA',0,11,179,5,3
	.word	56080
	.byte	15,176,4
	.word	56008
	.byte	16,0,0,14
	.word	56110
	.byte	10
	.byte	'_Ifx_SRC_DMA',0,11,194,5,25,176,4,13
	.byte	'DMA',0
	.word	56120
	.byte	176,4,2,35,0,0,14
	.word	56125
	.byte	20
	.byte	'Ifx_SRC_DMA',0,11,197,5,3
	.word	56160
	.byte	10
	.byte	'_Ifx_SRC_SDMMC_SDMMC',0,11,212,5,25,8,13
	.byte	'ERR',0
	.word	10329
	.byte	4,2,35,0,13
	.byte	'DMA',0
	.word	10329
	.byte	4,2,35,4,0,14
	.word	56186
	.byte	20
	.byte	'Ifx_SRC_SDMMC_SDMMC',0,11,216,5,3
	.word	56240
	.byte	15,8
	.word	56186
	.byte	16,0,0,14
	.word	56274
	.byte	10
	.byte	'_Ifx_SRC_SDMMC',0,11,231,5,25,8,13
	.byte	'SDMMC',0
	.word	56283
	.byte	8,2,35,0,0,14
	.word	56288
	.byte	20
	.byte	'Ifx_SRC_SDMMC',0,11,234,5,3
	.word	56325
	.byte	15,40
	.word	10329
	.byte	16,9,0,10
	.byte	'_Ifx_SRC_GETH_GETH',0,11,249,5,25,40,13
	.byte	'SR',0
	.word	56353
	.byte	40,2,35,0,0,14
	.word	56362
	.byte	20
	.byte	'Ifx_SRC_GETH_GETH',0,11,252,5,3
	.word	56400
	.byte	15,40
	.word	56362
	.byte	16,0,0,14
	.word	56432
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,11,139,6,25,40,13
	.byte	'GETH',0
	.word	56441
	.byte	40,2,35,0,0,14
	.word	56446
	.byte	20
	.byte	'Ifx_SRC_GETH',0,11,142,6,3
	.word	56481
	.byte	15,64
	.word	10329
	.byte	16,15,0,10
	.byte	'_Ifx_SRC_CAN_CAN',0,11,157,6,25,64,13
	.byte	'INT',0
	.word	56508
	.byte	64,2,35,0,0,14
	.word	56517
	.byte	20
	.byte	'Ifx_SRC_CAN_CAN',0,11,160,6,3
	.word	56554
	.byte	15,192,1
	.word	56517
	.byte	16,2,0,14
	.word	56584
	.byte	10
	.byte	'_Ifx_SRC_CAN',0,11,175,6,25,192,1,13
	.byte	'CAN',0
	.word	56594
	.byte	192,1,2,35,0,0,14
	.word	56599
	.byte	20
	.byte	'Ifx_SRC_CAN',0,11,178,6,3
	.word	56634
	.byte	10
	.byte	'_Ifx_SRC_VADC_G',0,11,193,6,25,16,13
	.byte	'SR0',0
	.word	10329
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	10329
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	10329
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	10329
	.byte	4,2,35,12,0,14
	.word	56660
	.byte	20
	.byte	'Ifx_SRC_VADC_G',0,11,199,6,3
	.word	56735
	.byte	10
	.byte	'_Ifx_SRC_VADC_FC',0,11,214,6,25,4,13
	.byte	'SR0',0
	.word	10329
	.byte	4,2,35,0,0,14
	.word	56764
	.byte	20
	.byte	'Ifx_SRC_VADC_FC',0,11,217,6,3
	.word	56801
	.byte	15,192,1
	.word	56660
	.byte	16,11,0,14
	.word	56831
	.byte	15,32
	.word	56764
	.byte	16,7,0,14
	.word	56846
	.byte	15,32
	.word	56660
	.byte	16,1,0,14
	.word	56860
	.byte	10
	.byte	'_Ifx_SRC_VADC',0,11,233,6,25,128,2,13
	.byte	'G',0
	.word	56841
	.byte	192,1,2,35,0,13
	.byte	'FC',0
	.word	56855
	.byte	32,3,35,192,1,13
	.byte	'CG',0
	.word	56869
	.byte	32,3,35,224,1,0,14
	.word	56874
	.byte	20
	.byte	'Ifx_SRC_VADC',0,11,238,6,3
	.word	56934
	.byte	10
	.byte	'_Ifx_SRC_DSADC_DSADC',0,11,253,6,25,8,13
	.byte	'SRM',0
	.word	10329
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	10329
	.byte	4,2,35,4,0,14
	.word	56961
	.byte	20
	.byte	'Ifx_SRC_DSADC_DSADC',0,11,129,7,3
	.word	57015
	.byte	15,112
	.word	56961
	.byte	16,13,0,14
	.word	57049
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,11,144,7,25,112,13
	.byte	'DSADC',0
	.word	57058
	.byte	112,2,35,0,0,14
	.word	57063
	.byte	20
	.byte	'Ifx_SRC_DSADC',0,11,147,7,3
	.word	57100
	.byte	10
	.byte	'_Ifx_SRC_ERAY_ERAY',0,11,162,7,25,48,13
	.byte	'INT0',0
	.word	10329
	.byte	4,2,35,0,13
	.byte	'INT1',0
	.word	10329
	.byte	4,2,35,4,13
	.byte	'TINT0',0
	.word	10329
	.byte	4,2,35,8,13
	.byte	'TINT1',0
	.word	10329
	.byte	4,2,35,12,13
	.byte	'NDAT0',0
	.word	10329
	.byte	4,2,35,16,13
	.byte	'NDAT1',0
	.word	10329
	.byte	4,2,35,20,13
	.byte	'MBSC0',0
	.word	10329
	.byte	4,2,35,24,13
	.byte	'MBSC1',0
	.word	10329
	.byte	4,2,35,28,13
	.byte	'OBUSY',0
	.word	10329
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	10329
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	4454
	.byte	8,2,35,40,0,14
	.word	57128
	.byte	20
	.byte	'Ifx_SRC_ERAY_ERAY',0,11,175,7,3
	.word	57323
	.byte	15,96
	.word	57128
	.byte	16,1,0,14
	.word	57355
	.byte	10
	.byte	'_Ifx_SRC_ERAY',0,11,190,7,25,96,13
	.byte	'ERAY',0
	.word	57364
	.byte	96,2,35,0,0,14
	.word	57369
	.byte	20
	.byte	'Ifx_SRC_ERAY',0,11,193,7,3
	.word	57404
	.byte	10
	.byte	'_Ifx_SRC_HSM_HSM',0,11,208,7,25,8,13
	.byte	'HSM',0
	.word	53878
	.byte	8,2,35,0,0,14
	.word	57431
	.byte	20
	.byte	'Ifx_SRC_HSM_HSM',0,11,211,7,3
	.word	57468
	.byte	15,8
	.word	57431
	.byte	16,0,0,14
	.word	57498
	.byte	10
	.byte	'_Ifx_SRC_HSM',0,11,226,7,25,8,13
	.byte	'HSM',0
	.word	57507
	.byte	8,2,35,0,0,14
	.word	57512
	.byte	20
	.byte	'Ifx_SRC_HSM',0,11,229,7,3
	.word	57545
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,11,244,7,25,16,13
	.byte	'SCUERU',0
	.word	55350
	.byte	16,2,35,0,0,14
	.word	57571
	.byte	20
	.byte	'Ifx_SRC_SCU',0,11,247,7,3
	.word	57607
	.byte	10
	.byte	'_Ifx_SRC_PMS_PMS',0,11,134,8,25,4,13
	.byte	'SR',0
	.word	10329
	.byte	4,2,35,0,0,14
	.word	57633
	.byte	20
	.byte	'Ifx_SRC_PMS_PMS',0,11,137,8,3
	.word	57669
	.byte	15,16
	.word	57633
	.byte	16,3,0,14
	.word	57699
	.byte	10
	.byte	'_Ifx_SRC_PMS',0,11,152,8,25,16,13
	.byte	'PMS',0
	.word	57708
	.byte	16,2,35,0,0,14
	.word	57713
	.byte	20
	.byte	'Ifx_SRC_PMS',0,11,155,8,3
	.word	57746
	.byte	15,12
	.word	10329
	.byte	16,2,0,10
	.byte	'_Ifx_SRC_SMU_SMU',0,11,170,8,25,12,13
	.byte	'SR',0
	.word	57772
	.byte	12,2,35,0,0,14
	.word	57781
	.byte	20
	.byte	'Ifx_SRC_SMU_SMU',0,11,173,8,3
	.word	57817
	.byte	15,12
	.word	57781
	.byte	16,0,0,14
	.word	57847
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,11,188,8,25,12,13
	.byte	'SMU',0
	.word	57856
	.byte	12,2,35,0,0,14
	.word	57861
	.byte	20
	.byte	'Ifx_SRC_SMU',0,11,191,8,3
	.word	57894
	.byte	15,32
	.word	10329
	.byte	16,7,0,10
	.byte	'_Ifx_SRC_PSI5_PSI5',0,11,206,8,25,32,13
	.byte	'SR',0
	.word	57920
	.byte	32,2,35,0,0,14
	.word	57929
	.byte	20
	.byte	'Ifx_SRC_PSI5_PSI5',0,11,209,8,3
	.word	57967
	.byte	15,32
	.word	57929
	.byte	16,0,0,14
	.word	57999
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,11,224,8,25,32,13
	.byte	'PSI5',0
	.word	58008
	.byte	32,2,35,0,0,14
	.word	58013
	.byte	20
	.byte	'Ifx_SRC_PSI5',0,11,227,8,3
	.word	58048
	.byte	10
	.byte	'_Ifx_SRC_HSPDM_HSPDM0',0,11,242,8,25,12,13
	.byte	'BFR',0
	.word	10329
	.byte	4,2,35,0,13
	.byte	'RAMP',0
	.word	10329
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	10329
	.byte	4,2,35,8,0,14
	.word	58075
	.byte	20
	.byte	'Ifx_SRC_HSPDM_HSPDM0',0,11,247,8,3
	.word	58144
	.byte	14
	.word	58075
	.byte	10
	.byte	'_Ifx_SRC_HSPDM',0,11,134,9,25,12,13
	.byte	'HSPDM0',0
	.word	58179
	.byte	12,2,35,0,0,14
	.word	58184
	.byte	20
	.byte	'Ifx_SRC_HSPDM',0,11,137,9,3
	.word	58222
	.byte	10
	.byte	'_Ifx_SRC_DAM_DAM',0,11,152,9,25,24,13
	.byte	'LI0',0
	.word	10329
	.byte	4,2,35,0,13
	.byte	'RI0',0
	.word	10329
	.byte	4,2,35,4,13
	.byte	'LI1',0
	.word	10329
	.byte	4,2,35,8,13
	.byte	'RI1',0
	.word	10329
	.byte	4,2,35,12,13
	.byte	'DR',0
	.word	10329
	.byte	4,2,35,16,13
	.byte	'ERR',0
	.word	10329
	.byte	4,2,35,20,0,14
	.word	58250
	.byte	20
	.byte	'Ifx_SRC_DAM_DAM',0,11,160,9,3
	.word	58351
	.byte	15,48
	.word	58250
	.byte	16,1,0,14
	.word	58381
	.byte	10
	.byte	'_Ifx_SRC_DAM',0,11,175,9,25,48,13
	.byte	'DAM',0
	.word	58390
	.byte	48,2,35,0,0,14
	.word	58395
	.byte	20
	.byte	'Ifx_SRC_DAM',0,11,178,9,3
	.word	58428
	.byte	10
	.byte	'_Ifx_SRC_PSI5S_PSI5S',0,11,193,9,25,32,13
	.byte	'SR',0
	.word	57920
	.byte	32,2,35,0,0,14
	.word	58454
	.byte	20
	.byte	'Ifx_SRC_PSI5S_PSI5S',0,11,196,9,3
	.word	58494
	.byte	15,32
	.word	58454
	.byte	16,0,0,14
	.word	58528
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,11,211,9,25,32,13
	.byte	'PSI5S',0
	.word	58537
	.byte	32,2,35,0,0,14
	.word	58542
	.byte	20
	.byte	'Ifx_SRC_PSI5S',0,11,214,9,3
	.word	58579
	.byte	10
	.byte	'_Ifx_SRC_RIF_RIF',0,11,229,9,25,8,13
	.byte	'ERR',0
	.word	10329
	.byte	4,2,35,0,13
	.byte	'INT',0
	.word	10329
	.byte	4,2,35,4,0,14
	.word	58607
	.byte	20
	.byte	'Ifx_SRC_RIF_RIF',0,11,233,9,3
	.word	58657
	.byte	15,16
	.word	58607
	.byte	16,1,0,14
	.word	58687
	.byte	10
	.byte	'_Ifx_SRC_RIF',0,11,248,9,25,16,13
	.byte	'RIF',0
	.word	58696
	.byte	16,2,35,0,0,14
	.word	58701
	.byte	20
	.byte	'Ifx_SRC_RIF',0,11,251,9,3
	.word	58734
	.byte	10
	.byte	'_Ifx_SRC_SPU_SPU',0,11,138,10,25,8,13
	.byte	'INT',0
	.word	10329
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	10329
	.byte	4,2,35,4,0,14
	.word	58760
	.byte	20
	.byte	'Ifx_SRC_SPU_SPU',0,11,142,10,3
	.word	58810
	.byte	15,16
	.word	58760
	.byte	16,1,0,14
	.word	58840
	.byte	10
	.byte	'_Ifx_SRC_SPU',0,11,157,10,25,16,13
	.byte	'SPU',0
	.word	58849
	.byte	16,2,35,0,0,14
	.word	58854
	.byte	20
	.byte	'Ifx_SRC_SPU',0,11,160,10,3
	.word	58887
	.byte	10
	.byte	'_Ifx_SRC_GPSR_GPSR',0,11,175,10,25,32,13
	.byte	'SR',0
	.word	57920
	.byte	32,2,35,0,0,14
	.word	58913
	.byte	20
	.byte	'Ifx_SRC_GPSR_GPSR',0,11,178,10,3
	.word	58951
	.byte	15,192,1
	.word	58913
	.byte	16,5,0,14
	.word	58983
	.byte	10
	.byte	'_Ifx_SRC_GPSR',0,11,193,10,25,192,1,13
	.byte	'GPSR',0
	.word	58993
	.byte	192,1,2,35,0,0,14
	.word	58998
	.byte	20
	.byte	'Ifx_SRC_GPSR',0,11,196,10,3
	.word	59035
	.byte	10
	.byte	'_Ifx_SCU_ACCEN00_Bits',0,4,68,16,4,11
	.byte	'EN0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_ACCEN00_Bits',0,4,102,3
	.word	59062
	.byte	10
	.byte	'_Ifx_SCU_ACCEN01_Bits',0,4,105,16,4,11
	.byte	'reserved_0',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_SCU_ACCEN01_Bits',0,4,108,3
	.word	59621
	.byte	10
	.byte	'_Ifx_SCU_ACCEN10_Bits',0,4,111,16,4,11
	.byte	'EN0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_ACCEN10_Bits',0,4,145,1,3
	.word	59700
	.byte	10
	.byte	'_Ifx_SCU_ACCEN11_Bits',0,4,148,1,16,4,11
	.byte	'reserved_0',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_SCU_ACCEN11_Bits',0,4,151,1,3
	.word	60260
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,4,154,1,16,4,11
	.byte	'STM0DIS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'STM3DIS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'STM4DIS',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'STM5DIS',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	438
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,4,164,1,3
	.word	60341
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,4,167,1,16,4,11
	.byte	'STMDIV',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	613
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	613
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	613
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	613
	.byte	4,4,2,35,2,11
	.byte	'BBBDIV',0,1
	.word	613
	.byte	4,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	613
	.byte	2,6,2,35,3,11
	.byte	'FSI2DIV',0,1
	.word	613
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	613
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_CCUCON0_Bits',0,4,181,1,3
	.word	60558
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,4,184,1,16,4,11
	.byte	'MCANDIV',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'CLKSELMCAN',0,1
	.word	613
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'PLL1DIVDIS',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'I2CDIV',0,1
	.word	613
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	613
	.byte	4,0,2,35,1,11
	.byte	'MSCDIV',0,1
	.word	613
	.byte	4,4,2,35,2,11
	.byte	'CLKSELMSC',0,1
	.word	613
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	613
	.byte	2,0,2,35,2,11
	.byte	'QSPIDIV',0,1
	.word	613
	.byte	4,4,2,35,3,11
	.byte	'CLKSELQSPI',0,1
	.word	613
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_CCUCON1_Bits',0,4,199,1,3
	.word	60831
	.byte	10
	.byte	'_Ifx_SCU_CCUCON10_Bits',0,4,202,1,16,4,11
	.byte	'CPU4DIV',0,1
	.word	613
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	438
	.byte	26,0,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON10_Bits',0,4,206,1,3
	.word	61157
	.byte	10
	.byte	'_Ifx_SCU_CCUCON11_Bits',0,4,209,1,16,4,11
	.byte	'CPU5DIV',0,1
	.word	613
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	438
	.byte	26,0,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON11_Bits',0,4,213,1,3
	.word	61259
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,4,216,1,16,4,11
	.byte	'ASCLINFDIV',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	4,0,2,35,0,11
	.byte	'ASCLINSDIV',0,1
	.word	613
	.byte	4,4,2,35,1,11
	.byte	'CLKSELASCLINS',0,1
	.word	613
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	438
	.byte	10,8,2,35,0,11
	.byte	'EBUPERON',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'ERAYPERON',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'HSPDMPERON',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	613
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_CCUCON2_Bits',0,4,228,1,3
	.word	61361
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,4,231,1,16,4,11
	.byte	'PLL0MONEN',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'PLL1MONEN',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'PLL2MONEN',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'SPBMONEN',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'BACKMONEN',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	613
	.byte	3,0,2,35,0,11
	.byte	'PLL0MONTST',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'PLL1MONTST',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'PLL2MONTST',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'SPBMONTST',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'BACKMONTST',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	438
	.byte	11,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	6,2,2,35,3,11
	.byte	'UP',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_CCUCON3_Bits',0,4,248,1,3
	.word	61635
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,4,251,1,16,4,11
	.byte	'LOTHR',0,2
	.word	630
	.byte	12,4,2,35,0,11
	.byte	'UPTHR',0,4
	.word	438
	.byte	12,8,2,35,0,11
	.byte	'MONEN',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'MONTST',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	613
	.byte	4,2,2,35,3,11
	.byte	'UP',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_CCUCON4_Bits',0,4,132,2,3
	.word	62004
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,4,135,2,16,4,11
	.byte	'GETHDIV',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'MCANHDIV',0,1
	.word	613
	.byte	4,0,2,35,0,11
	.byte	'ADASDIV',0,1
	.word	613
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	438
	.byte	18,2,2,35,0,11
	.byte	'UP',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_CCUCON5_Bits',0,4,143,2,3
	.word	62184
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,4,146,2,16,4,11
	.byte	'CPU0DIV',0,1
	.word	613
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	438
	.byte	26,0,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON6_Bits',0,4,150,2,3
	.word	62353
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,4,153,2,16,4,11
	.byte	'CPU1DIV',0,1
	.word	613
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	438
	.byte	26,0,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON7_Bits',0,4,157,2,3
	.word	62453
	.byte	10
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,4,160,2,16,4,11
	.byte	'CPU2DIV',0,1
	.word	613
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	438
	.byte	26,0,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON8_Bits',0,4,164,2,3
	.word	62553
	.byte	10
	.byte	'_Ifx_SCU_CCUCON9_Bits',0,4,167,2,16,4,11
	.byte	'CPU3DIV',0,1
	.word	613
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	438
	.byte	26,0,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON9_Bits',0,4,171,2,3
	.word	62653
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,4,174,2,16,4,11
	.byte	'CHREV',0,1
	.word	613
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'CHPK',0,1
	.word	613
	.byte	4,4,2,35,1,11
	.byte	'CHID',0,1
	.word	613
	.byte	4,0,2,35,1,11
	.byte	'EEA',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	613
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	613
	.byte	4,4,2,35,3,11
	.byte	'VART',0,1
	.word	613
	.byte	3,1,2,35,3,11
	.byte	'SEC',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_CHIPID_Bits',0,4,185,2,3
	.word	62753
	.byte	10
	.byte	'_Ifx_SCU_DTSCLIM_Bits',0,4,188,2,16,4,11
	.byte	'LOWER',0,2
	.word	630
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'BGPOK',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'EN',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'LLU',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	630
	.byte	12,4,2,35,2,11
	.byte	'INTEN',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'INT',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_DTSCLIM_Bits',0,4,200,2,3
	.word	62956
	.byte	10
	.byte	'_Ifx_SCU_DTSCSTAT_Bits',0,4,203,2,16,4,11
	.byte	'RESULT',0,2
	.word	630
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	438
	.byte	20,0,2,35,0,0,20
	.byte	'Ifx_SCU_DTSCSTAT_Bits',0,4,207,2,3
	.word	63188
	.byte	10
	.byte	'_Ifx_SCU_EICON0_Bits',0,4,210,2,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	461
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_SCU_EICON0_Bits',0,4,216,2,3
	.word	63290
	.byte	10
	.byte	'_Ifx_SCU_EICON1_Bits',0,4,219,2,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	438
	.byte	26,0,2,35,0,0,20
	.byte	'Ifx_SCU_EICON1_Bits',0,4,228,2,3
	.word	63418
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,4,231,2,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	613
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	613
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	438
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	613
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	613
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_EICR_Bits',0,4,250,2,3
	.word	63607
	.byte	10
	.byte	'_Ifx_SCU_EIFILT_Bits',0,4,253,2,16,4,11
	.byte	'FILRQ0A',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'FILRQ5A',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'FILRQ2A',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'FILRQ3A',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'FILRQ0C',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'FILRQ1C',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'FILRQ3C',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'FILRQ2C',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'FILRQ4A',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'FILRQ6A',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'FILRQ1A',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'FILRQ7A',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'FILRQ6D',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'FILRQ4D',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'FILRQ2B',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'FILRQ3B',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'FILRQ7C',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	613
	.byte	7,0,2,35,2,11
	.byte	'FILTDIV',0,1
	.word	613
	.byte	4,4,2,35,3,11
	.byte	'DEPTH',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_SCU_EIFILT_Bits',0,4,147,3,3
	.word	63971
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,4,150,3,16,4,11
	.byte	'INTF0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	438
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_SCU_EIFR_Bits',0,4,161,3,3
	.word	64410
	.byte	10
	.byte	'_Ifx_SCU_EISR_Bits',0,4,164,3,16,4,11
	.byte	'AE',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	630
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_EISR_Bits',0,4,174,3,3
	.word	64621
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,4,177,3,16,4,11
	.byte	'POL',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	630
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	630
	.byte	14,0,2,35,2,0,20
	.byte	'Ifx_SCU_EMSR_Bits',0,4,187,3,3
	.word	64797
	.byte	10
	.byte	'_Ifx_SCU_EMSSW_Bits',0,4,190,3,16,4,11
	.byte	'reserved_0',0,4
	.word	438
	.byte	24,8,2,35,0,11
	.byte	'EMSFM',0,1
	.word	613
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	613
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_SCU_EMSSW_Bits',0,4,196,3,3
	.word	64991
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,4,199,3,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	630
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	438
	.byte	23,0,2,35,0,0,20
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,4,204,3,3
	.word	65126
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,4,207,3,16,4,11
	.byte	'ARI',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	438
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_SCU_ESROCFG_Bits',0,4,212,3,3
	.word	65262
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,4,215,3,16,4,11
	.byte	'EN0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	613
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	630
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	613
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	613
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	613
	.byte	8,0,2,35,3,0,20
	.byte	'Ifx_SCU_EXTCON_Bits',0,4,226,3,3
	.word	65373
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,4,229,3,16,4,11
	.byte	'STEP',0,2
	.word	630
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	613
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	613
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	630
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	613
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_FDR_Bits',0,4,237,3,3
	.word	65591
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,4,240,3,16,4,11
	.byte	'FS0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	8,0,2,35,3,0,20
	.byte	'Ifx_SCU_FMR_Bits',0,4,132,4,3
	.word	65754
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,4,135,4,16,4,11
	.byte	'MODREV',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_ID_Bits',0,4,140,4,3
	.word	66090
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,4,143,4,16,4,11
	.byte	'IPEN00',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	613
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	613
	.byte	2,0,2,35,3,0,20
	.byte	'Ifx_SCU_IGCR_Bits',0,4,167,4,3
	.word	66197
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,4,170,4,16,4,11
	.byte	'P0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	438
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_SCU_IN_Bits',0,4,175,4,3
	.word	66649
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,4,178,4,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	613
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	613
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_IOCR_Bits',0,4,185,4,3
	.word	66748
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,4,188,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'LBISTRES',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,4
	.word	438
	.byte	18,12,2,35,0,11
	.byte	'reserved_20',0,2
	.word	630
	.byte	8,4,2,35,2,11
	.byte	'LBISTDONE',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'LBISTERRINJ',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'LBISTREQRED',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,4,198,4,3
	.word	66898
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,4,201,4,16,4,11
	.byte	'SEED',0,4
	.word	438
	.byte	19,13,2,35,0,11
	.byte	'reserved_19',0,1
	.word	613
	.byte	5,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	613
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,4,208,4,3
	.word	67136
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,4,211,4,16,4,11
	.byte	'LENGTH',0,2
	.word	630
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	438
	.byte	20,0,2,35,0,0,20
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,4,215,4,3
	.word	67297
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL3_Bits',0,4,218,4,16,4,11
	.byte	'SIGNATURE',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_SCU_LBISTCTRL3_Bits',0,4,221,4,3
	.word	67403
	.byte	10
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,4,224,4,16,4,11
	.byte	'LS2',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	630
	.byte	14,1,2,35,0,11
	.byte	'LSEN2',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'LS0',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	630
	.byte	14,1,2,35,2,11
	.byte	'LSEN0',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_LCLCON0_Bits',0,4,232,4,3
	.word	67489
	.byte	10
	.byte	'_Ifx_SCU_LCLCON1_Bits',0,4,235,4,16,4,11
	.byte	'LS3',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	630
	.byte	14,1,2,35,0,11
	.byte	'LSEN3',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'LS1',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	630
	.byte	14,1,2,35,2,11
	.byte	'LSEN1',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_LCLCON1_Bits',0,4,243,4,3
	.word	67657
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,4,246,4,16,4,11
	.byte	'LCLT0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'LCLT2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'LCLT3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'LCLT4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'LCLT5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	630
	.byte	10,0,2,35,0,11
	.byte	'PLCLT0',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'PLCLT1',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'PLCLT2',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'PLCLT3',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'PLCLT4',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'PLCLT5',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	630
	.byte	10,0,2,35,2,0,20
	.byte	'Ifx_SCU_LCLTEST_Bits',0,4,134,5,3
	.word	67825
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,4,137,5,16,4,11
	.byte	'DEPT',0,1
	.word	613
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	630
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_MANID_Bits',0,4,142,5,3
	.word	68139
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,4,145,5,16,4,11
	.byte	'PS0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	630
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	630
	.byte	14,0,2,35,2,0,20
	.byte	'Ifx_SCU_OMR_Bits',0,4,153,5,3
	.word	68250
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,4,156,5,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	613
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	613
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'HYSEN',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'HYSCTL',0,1
	.word	613
	.byte	2,4,2,35,1,11
	.byte	'AMPCTL',0,1
	.word	613
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	613
	.byte	2,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	613
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	613
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_SCU_OSCCON_Bits',0,4,177,5,3
	.word	68408
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,4,180,5,16,4,11
	.byte	'P0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	438
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_SCU_OUT_Bits',0,4,185,5,3
	.word	68819
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,4,188,5,16,4,11
	.byte	'CSEL0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'CSEL3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'CSEL4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'CSEL5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	630
	.byte	10,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	613
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	613
	.byte	6,0,2,35,3,0,20
	.byte	'Ifx_SCU_OVCCON_Bits',0,4,204,5,3
	.word	68920
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,4,207,5,16,4,11
	.byte	'OVEN0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'OVEN3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'OVEN4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'OVEN5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	438
	.byte	26,0,2,35,0,0,20
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,4,216,5,3
	.word	69238
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,4,219,5,16,4,11
	.byte	'PDIS0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	438
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_SCU_PDISC_Bits',0,4,224,5,3
	.word	69425
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,4,227,5,16,4,11
	.byte	'PD0',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	613
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	438
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_SCU_PDR_Bits',0,4,234,5,3
	.word	69536
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,4,237,5,16,4,11
	.byte	'PDR0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	438
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_SCU_PDRR_Bits',0,4,248,5,3
	.word	69669
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON0_Bits',0,4,251,5,16,4,11
	.byte	'DIVBY',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	630
	.byte	8,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	613
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	613
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	613
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	613
	.byte	5,0,2,35,3,0,20
	.byte	'Ifx_SCU_PERPLLCON0_Bits',0,4,134,6,3
	.word	69872
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON1_Bits',0,4,137,6,16,4,11
	.byte	'K2DIV',0,1
	.word	613
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	5,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	438
	.byte	21,0,2,35,0,0,20
	.byte	'Ifx_SCU_PERPLLCON1_Bits',0,4,143,6,3
	.word	70112
	.byte	10
	.byte	'_Ifx_SCU_PERPLLSTAT_Bits',0,4,146,6,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'K3RDY',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	438
	.byte	25,0,2,35,0,0,20
	.byte	'Ifx_SCU_PERPLLSTAT_Bits',0,4,156,6,3
	.word	70256
	.byte	10
	.byte	'_Ifx_SCU_PMCSR0_Bits',0,4,159,6,16,4,11
	.byte	'REQSLP',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	438
	.byte	21,0,2,35,0,0,20
	.byte	'Ifx_SCU_PMCSR0_Bits',0,4,165,6,3
	.word	70478
	.byte	10
	.byte	'_Ifx_SCU_PMCSR1_Bits',0,4,168,6,16,4,11
	.byte	'REQSLP',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	438
	.byte	21,0,2,35,0,0,20
	.byte	'Ifx_SCU_PMCSR1_Bits',0,4,174,6,3
	.word	70614
	.byte	10
	.byte	'_Ifx_SCU_PMCSR2_Bits',0,4,177,6,16,4,11
	.byte	'REQSLP',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	438
	.byte	21,0,2,35,0,0,20
	.byte	'Ifx_SCU_PMCSR2_Bits',0,4,183,6,3
	.word	70750
	.byte	10
	.byte	'_Ifx_SCU_PMCSR3_Bits',0,4,186,6,16,4,11
	.byte	'REQSLP',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	438
	.byte	21,0,2,35,0,0,20
	.byte	'Ifx_SCU_PMCSR3_Bits',0,4,192,6,3
	.word	70886
	.byte	10
	.byte	'_Ifx_SCU_PMCSR4_Bits',0,4,195,6,16,4,11
	.byte	'REQSLP',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	438
	.byte	21,0,2,35,0,0,20
	.byte	'Ifx_SCU_PMCSR4_Bits',0,4,201,6,3
	.word	71022
	.byte	10
	.byte	'_Ifx_SCU_PMCSR5_Bits',0,4,204,6,16,4,11
	.byte	'REQSLP',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	438
	.byte	21,0,2,35,0,0,20
	.byte	'Ifx_SCU_PMCSR5_Bits',0,4,210,6,3
	.word	71158
	.byte	10
	.byte	'_Ifx_SCU_PMSTAT0_Bits',0,4,213,6,16,4,11
	.byte	'CPU0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'CPU1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'CPU2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'CPU3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'CPU4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'CPU5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	630
	.byte	10,0,2,35,0,11
	.byte	'CPU0LS',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'CPU1LS',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'CPU2LS',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'CPU3LS',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	630
	.byte	12,0,2,35,2,0,20
	.byte	'Ifx_SCU_PMSTAT0_Bits',0,4,227,6,3
	.word	71294
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,4,230,6,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	438
	.byte	11,8,2,35,0,11
	.byte	'CPUSEL',0,1
	.word	613
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	613
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,4,241,6,3
	.word	71566
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR0_Bits',0,4,244,6,16,4,11
	.byte	'LJTEN',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'LJTOVEN',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'LJTOVIEN',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'LJTSTRT',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'LJTSTP',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'LJTCLR',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	630
	.byte	6,4,2,35,0,11
	.byte	'SDSTEP',0,1
	.word	613
	.byte	4,0,2,35,1,11
	.byte	'VDTEN',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'VDTOVEN',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'VDTOVIEN',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'VDTSTRT',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'VDTSTP',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'VDTCLR',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	630
	.byte	7,3,2,35,2,11
	.byte	'LPSLPEN',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	613
	.byte	2,0,2,35,3,0,20
	.byte	'Ifx_SCU_PMTRCSR0_Bits',0,4,135,7,3
	.word	71811
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR1_Bits',0,4,138,7,16,4,11
	.byte	'LJTCV',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'VDTCV',0,2
	.word	630
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	613
	.byte	6,0,2,35,3,0,20
	.byte	'Ifx_SCU_PMTRCSR1_Bits',0,4,143,7,3
	.word	72199
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR2_Bits',0,4,146,7,16,4,11
	.byte	'LDJMPREQ',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'LJTRUN',0,1
	.word	613
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'LJTOV',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	613
	.byte	3,4,2,35,1,11
	.byte	'LJTOVCLR',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	613
	.byte	3,0,2,35,1,11
	.byte	'LJTCNT',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_PMTRCSR2_Bits',0,4,157,7,3
	.word	72317
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR3_Bits',0,4,160,7,16,4,11
	.byte	'VDROOPREQ',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'VDTRUN',0,1
	.word	613
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'VDTOV',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	613
	.byte	3,4,2,35,1,11
	.byte	'VDTOVCLR',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	613
	.byte	3,0,2,35,1,11
	.byte	'VDTCNT',0,2
	.word	630
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	613
	.byte	6,0,2,35,3,0,20
	.byte	'Ifx_SCU_PMTRCSR3_Bits',0,4,172,7,3
	.word	72560
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,4,175,7,16,4,11
	.byte	'ESR0',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	613
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	613
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	613
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	613
	.byte	2,0,2,35,1,11
	.byte	'STM3',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'STM4',0,1
	.word	613
	.byte	2,4,2,35,2,11
	.byte	'STM5',0,1
	.word	613
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	630
	.byte	10,0,2,35,2,0,20
	.byte	'Ifx_SCU_RSTCON_Bits',0,4,189,7,3
	.word	72827
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,4,192,7,16,4,11
	.byte	'FRTO',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'CSSX',0,2
	.word	630
	.byte	6,3,2,35,0,11
	.byte	'reserved_13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_RSTCON2_Bits',0,4,206,7,3
	.word	73086
	.byte	10
	.byte	'_Ifx_SCU_RSTCON3_Bits',0,4,209,7,16,4,11
	.byte	'reserved_0',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_SCU_RSTCON3_Bits',0,4,212,7,3
	.word	73391
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,4,215,7,16,4,11
	.byte	'ESR0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'STM3',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'STM4',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'STM5',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	613
	.byte	5,0,2,35,1,11
	.byte	'PORST',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'EVRC',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'HSMS',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'HSMA',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'LBPORST',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'LBTERM',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,4,245,7,3
	.word	73472
	.byte	10
	.byte	'_Ifx_SCU_SEICON0_Bits',0,4,248,7,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	461
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_SCU_SEICON0_Bits',0,4,254,7,3
	.word	74021
	.byte	10
	.byte	'_Ifx_SCU_SEICON1_Bits',0,4,129,8,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	438
	.byte	26,0,2,35,0,0,20
	.byte	'Ifx_SCU_SEICON1_Bits',0,4,138,8,3
	.word	74151
	.byte	10
	.byte	'_Ifx_SCU_SEISR_Bits',0,4,141,8,16,4,11
	.byte	'AE',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	630
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_SEISR_Bits',0,4,151,8,3
	.word	74342
	.byte	10
	.byte	'_Ifx_SCU_STCON_Bits',0,4,154,8,16,4,11
	.byte	'reserved_0',0,2
	.word	630
	.byte	13,3,2,35,0,11
	.byte	'SFCBAE',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'CFCBAE',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'STP',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_STCON_Bits',0,4,161,8,3
	.word	74520
	.byte	10
	.byte	'_Ifx_SCU_STMEM1_Bits',0,4,164,8,16,4,11
	.byte	'MEM',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_SCU_STMEM1_Bits',0,4,167,8,3
	.word	74671
	.byte	10
	.byte	'_Ifx_SCU_STMEM2_Bits',0,4,170,8,16,4,11
	.byte	'MEM',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_SCU_STMEM2_Bits',0,4,173,8,3
	.word	74743
	.byte	10
	.byte	'_Ifx_SCU_STMEM3_Bits',0,4,176,8,16,4,11
	.byte	'MEM',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_SCU_STMEM3_Bits',0,4,179,8,3
	.word	74815
	.byte	10
	.byte	'_Ifx_SCU_STMEM4_Bits',0,4,182,8,16,4,11
	.byte	'MEM',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_SCU_STMEM4_Bits',0,4,185,8,3
	.word	74887
	.byte	10
	.byte	'_Ifx_SCU_STMEM5_Bits',0,4,188,8,16,4,11
	.byte	'MEM',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_SCU_STMEM5_Bits',0,4,191,8,3
	.word	74959
	.byte	10
	.byte	'_Ifx_SCU_STMEM6_Bits',0,4,194,8,16,4,11
	.byte	'MEM',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_SCU_STMEM6_Bits',0,4,197,8,3
	.word	75031
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,4,200,8,16,4,11
	.byte	'HWCFG',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	613
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	613
	.byte	3,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_SCU_STSTAT_Bits',0,4,216,8,3
	.word	75103
	.byte	10
	.byte	'_Ifx_SCU_SWAPCTRL_Bits',0,4,219,8,16,4,11
	.byte	'ADDRCFG',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'SPARE',0,2
	.word	630
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_SWAPCTRL_Bits',0,4,224,8,3
	.word	75432
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,4,227,8,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	6,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,4,234,8,3
	.word	75552
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,4,237,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'DDC',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	613
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_SYSCON_Bits',0,4,249,8,3
	.word	75722
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON0_Bits',0,4,252,8,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	630
	.byte	6,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	613
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	613
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	613
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	613
	.byte	3,2,2,35,3,11
	.byte	'INSEL',0,1
	.word	613
	.byte	2,0,2,35,3,0,20
	.byte	'Ifx_SCU_SYSPLLCON0_Bits',0,4,137,9,3
	.word	75985
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON1_Bits',0,4,140,9,16,4,11
	.byte	'K2DIV',0,1
	.word	613
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	438
	.byte	29,0,2,35,0,0,20
	.byte	'Ifx_SCU_SYSPLLCON1_Bits',0,4,144,9,3
	.word	76264
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON2_Bits',0,4,147,9,16,4,11
	.byte	'MODCFG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_SYSPLLCON2_Bits',0,4,151,9,3
	.word	76368
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLSTAT_Bits',0,4,154,9,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	2,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	438
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_SCU_SYSPLLSTAT_Bits',0,4,164,9,3
	.word	76474
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,4,167,9,16,4,11
	.byte	'ESR0T',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	438
	.byte	28,0,2,35,0,0,20
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,4,174,9,3
	.word	76697
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS0_Bits',0,4,177,9,16,4,11
	.byte	'CPU0ESR0T',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'CPU0ESR1T',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'CPU0TRAP2T',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'CPU0SMUT',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	4,0,2,35,0,11
	.byte	'CPU1ESR0T',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'CPU1ESR1T',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'CPU1TRAP2T',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'CPU1SMUT',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	613
	.byte	4,0,2,35,1,11
	.byte	'CPU2ESR0T',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'CPU2ESR1T',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'CPU2TRAP2T',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'CPU2SMUT',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	613
	.byte	4,0,2,35,2,11
	.byte	'CPU3ESR0T',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'CPU3ESR1T',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'CPU3TRAP2T',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'CPU3SMUT',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_SCU_TRAPDIS0_Bits',0,4,199,9,3
	.word	76845
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS1_Bits',0,4,202,9,16,4,11
	.byte	'CPU4ESR0T',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'CPU4ESR1T',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'CPU4TRAP2T',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'CPU4SMUT',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	4,0,2,35,0,11
	.byte	'CPU5ESR0T',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'CPU5ESR1T',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'CPU5TRAP2T',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'CPU5SMUT',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	613
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_TRAPDIS1_Bits',0,4,215,9,3
	.word	77333
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,4,218,9,16,4,11
	.byte	'ESR0T',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	438
	.byte	28,0,2,35,0,0,20
	.byte	'Ifx_SCU_TRAPSET_Bits',0,4,225,9,3
	.word	77630
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,4,228,9,16,4,11
	.byte	'ESR0T',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	438
	.byte	28,0,2,35,0,0,20
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,4,235,9,3
	.word	77778
	.byte	20
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,4,244,9,3
	.word	477
	.byte	20
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,4,132,10,3
	.word	652
	.byte	20
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,4,148,10,3
	.word	918
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,4,151,10,16,4,11
	.byte	'ENDINIT',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	461
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,4,157,10,3
	.word	78028
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,4,160,10,16,4,11
	.byte	'CLRIRF',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	613
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,4,173,10,3
	.word	78154
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,4,176,10,16,4,11
	.byte	'AE',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	613
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,4,189,10,3
	.word	78406
	.byte	12,4,197,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59062
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_ACCEN00',0,4,202,10,3
	.word	78625
	.byte	12,4,205,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59621
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_ACCEN01',0,4,210,10,3
	.word	78690
	.byte	12,4,213,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	59700
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_ACCEN10',0,4,218,10,3
	.word	78755
	.byte	12,4,221,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60260
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_ACCEN11',0,4,226,10,3
	.word	78820
	.byte	12,4,229,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60341
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_ARSTDIS',0,4,234,10,3
	.word	78885
	.byte	12,4,237,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60558
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON0',0,4,242,10,3
	.word	78950
	.byte	12,4,245,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	60831
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON1',0,4,250,10,3
	.word	79015
	.byte	12,4,253,10,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61157
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON10',0,4,130,11,3
	.word	79080
	.byte	12,4,133,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61259
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON11',0,4,138,11,3
	.word	79146
	.byte	12,4,141,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61361
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON2',0,4,146,11,3
	.word	79212
	.byte	12,4,149,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	61635
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON3',0,4,154,11,3
	.word	79277
	.byte	12,4,157,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62004
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON4',0,4,162,11,3
	.word	79342
	.byte	12,4,165,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62184
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON5',0,4,170,11,3
	.word	79407
	.byte	12,4,173,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62353
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON6',0,4,178,11,3
	.word	79472
	.byte	12,4,181,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62453
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON7',0,4,186,11,3
	.word	79537
	.byte	12,4,189,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62553
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON8',0,4,194,11,3
	.word	79602
	.byte	12,4,197,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62653
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_CCUCON9',0,4,202,11,3
	.word	79667
	.byte	12,4,205,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62753
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_CHIPID',0,4,210,11,3
	.word	79732
	.byte	12,4,213,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	62956
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_DTSCLIM',0,4,218,11,3
	.word	79796
	.byte	12,4,221,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63188
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_DTSCSTAT',0,4,226,11,3
	.word	79861
	.byte	12,4,229,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63290
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_EICON0',0,4,234,11,3
	.word	79927
	.byte	12,4,237,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63418
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_EICON1',0,4,242,11,3
	.word	79991
	.byte	12,4,245,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63607
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_EICR',0,4,250,11,3
	.word	80055
	.byte	12,4,253,11,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	63971
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_EIFILT',0,4,130,12,3
	.word	80117
	.byte	12,4,133,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64410
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_EIFR',0,4,138,12,3
	.word	80181
	.byte	12,4,141,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64621
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_EISR',0,4,146,12,3
	.word	80243
	.byte	12,4,149,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64797
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_EMSR',0,4,154,12,3
	.word	80305
	.byte	12,4,157,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	64991
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_EMSSW',0,4,162,12,3
	.word	80367
	.byte	12,4,165,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65126
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX',0,4,170,12,3
	.word	80430
	.byte	12,4,173,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65262
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_ESROCFG',0,4,178,12,3
	.word	80503
	.byte	12,4,181,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65373
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_EXTCON',0,4,186,12,3
	.word	80568
	.byte	12,4,189,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65591
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_FDR',0,4,194,12,3
	.word	80632
	.byte	12,4,197,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	65754
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_FMR',0,4,202,12,3
	.word	80693
	.byte	12,4,205,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66090
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_ID',0,4,210,12,3
	.word	80754
	.byte	12,4,213,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66197
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_IGCR',0,4,218,12,3
	.word	80814
	.byte	12,4,221,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66649
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_IN',0,4,226,12,3
	.word	80876
	.byte	12,4,229,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66748
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_IOCR',0,4,234,12,3
	.word	80936
	.byte	12,4,237,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	66898
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_LBISTCTRL0',0,4,242,12,3
	.word	80998
	.byte	12,4,245,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67136
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_LBISTCTRL1',0,4,250,12,3
	.word	81066
	.byte	12,4,253,12,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67297
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_LBISTCTRL2',0,4,130,13,3
	.word	81134
	.byte	12,4,133,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67403
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_LBISTCTRL3',0,4,138,13,3
	.word	81202
	.byte	12,4,141,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67489
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_LCLCON0',0,4,146,13,3
	.word	81270
	.byte	12,4,149,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67657
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_LCLCON1',0,4,154,13,3
	.word	81335
	.byte	12,4,157,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	67825
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_LCLTEST',0,4,162,13,3
	.word	81400
	.byte	12,4,165,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68139
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_MANID',0,4,170,13,3
	.word	81465
	.byte	12,4,173,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68250
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_OMR',0,4,178,13,3
	.word	81528
	.byte	12,4,181,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68408
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_OSCCON',0,4,186,13,3
	.word	81589
	.byte	12,4,189,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68819
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_OUT',0,4,194,13,3
	.word	81653
	.byte	12,4,197,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	68920
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_OVCCON',0,4,202,13,3
	.word	81714
	.byte	12,4,205,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69238
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_OVCENABLE',0,4,210,13,3
	.word	81778
	.byte	12,4,213,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69425
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PDISC',0,4,218,13,3
	.word	81845
	.byte	12,4,221,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69536
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PDR',0,4,226,13,3
	.word	81908
	.byte	12,4,229,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69669
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PDRR',0,4,234,13,3
	.word	81969
	.byte	12,4,237,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	69872
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PERPLLCON0',0,4,242,13,3
	.word	82031
	.byte	12,4,245,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70112
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PERPLLCON1',0,4,250,13,3
	.word	82099
	.byte	12,4,253,13,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70256
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PERPLLSTAT',0,4,130,14,3
	.word	82167
	.byte	12,4,133,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70478
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PMCSR0',0,4,138,14,3
	.word	82235
	.byte	12,4,141,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70614
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PMCSR1',0,4,146,14,3
	.word	82299
	.byte	12,4,149,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70750
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PMCSR2',0,4,154,14,3
	.word	82363
	.byte	12,4,157,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	70886
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PMCSR3',0,4,162,14,3
	.word	82427
	.byte	12,4,165,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71022
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PMCSR4',0,4,170,14,3
	.word	82491
	.byte	12,4,173,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71158
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PMCSR5',0,4,178,14,3
	.word	82555
	.byte	12,4,181,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71294
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PMSTAT0',0,4,186,14,3
	.word	82619
	.byte	12,4,189,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71566
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PMSWCR1',0,4,194,14,3
	.word	82684
	.byte	12,4,197,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	71811
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PMTRCSR0',0,4,202,14,3
	.word	82749
	.byte	12,4,205,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72199
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PMTRCSR1',0,4,210,14,3
	.word	82815
	.byte	12,4,213,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72317
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PMTRCSR2',0,4,218,14,3
	.word	82881
	.byte	12,4,221,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72560
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_PMTRCSR3',0,4,226,14,3
	.word	82947
	.byte	12,4,229,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	72827
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_RSTCON',0,4,234,14,3
	.word	83013
	.byte	12,4,237,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73086
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_RSTCON2',0,4,242,14,3
	.word	83077
	.byte	12,4,245,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73391
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_RSTCON3',0,4,250,14,3
	.word	83142
	.byte	12,4,253,14,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	73472
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_RSTSTAT',0,4,130,15,3
	.word	83207
	.byte	12,4,133,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74021
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_SEICON0',0,4,138,15,3
	.word	83272
	.byte	12,4,141,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74151
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_SEICON1',0,4,146,15,3
	.word	83337
	.byte	12,4,149,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74342
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_SEISR',0,4,154,15,3
	.word	83402
	.byte	12,4,157,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74520
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_STCON',0,4,162,15,3
	.word	83465
	.byte	12,4,165,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74671
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_STMEM1',0,4,170,15,3
	.word	83528
	.byte	12,4,173,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74743
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_STMEM2',0,4,178,15,3
	.word	83592
	.byte	12,4,181,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74815
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_STMEM3',0,4,186,15,3
	.word	83656
	.byte	12,4,189,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74887
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_STMEM4',0,4,194,15,3
	.word	83720
	.byte	12,4,197,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	74959
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_STMEM5',0,4,202,15,3
	.word	83784
	.byte	12,4,205,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75031
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_STMEM6',0,4,210,15,3
	.word	83848
	.byte	12,4,213,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75103
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_STSTAT',0,4,218,15,3
	.word	83912
	.byte	12,4,221,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75432
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_SWAPCTRL',0,4,226,15,3
	.word	83976
	.byte	12,4,229,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75552
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_SWRSTCON',0,4,234,15,3
	.word	84042
	.byte	12,4,237,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75722
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_SYSCON',0,4,242,15,3
	.word	84108
	.byte	12,4,245,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	75985
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_SYSPLLCON0',0,4,250,15,3
	.word	84172
	.byte	12,4,253,15,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76264
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_SYSPLLCON1',0,4,130,16,3
	.word	84240
	.byte	12,4,133,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76368
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_SYSPLLCON2',0,4,138,16,3
	.word	84308
	.byte	12,4,141,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76474
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_SYSPLLSTAT',0,4,146,16,3
	.word	84376
	.byte	12,4,149,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76697
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_TRAPCLR',0,4,154,16,3
	.word	84444
	.byte	12,4,157,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	76845
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_TRAPDIS0',0,4,162,16,3
	.word	84509
	.byte	12,4,165,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77333
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_TRAPDIS1',0,4,170,16,3
	.word	84575
	.byte	12,4,173,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77630
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_TRAPSET',0,4,178,16,3
	.word	84641
	.byte	12,4,181,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	77778
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_TRAPSTAT',0,4,186,16,3
	.word	84706
	.byte	20
	.byte	'Ifx_SCU_WDTCPU_CON0',0,4,194,16,3
	.word	573
	.byte	20
	.byte	'Ifx_SCU_WDTCPU_CON1',0,4,202,16,3
	.word	878
	.byte	20
	.byte	'Ifx_SCU_WDTCPU_SR',0,4,210,16,3
	.word	1109
	.byte	12,4,213,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78028
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_WDTS_CON0',0,4,218,16,3
	.word	84857
	.byte	12,4,221,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78154
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_WDTS_CON1',0,4,226,16,3
	.word	84924
	.byte	12,4,229,16,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	78406
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SCU_WDTS_SR',0,4,234,16,3
	.word	84991
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX',0,4,246,16,25,4,13
	.byte	'ESRCFGX',0
	.word	80430
	.byte	4,2,35,0,0,14
	.word	85056
	.byte	20
	.byte	'Ifx_SCU_ESRCFGX',0,4,249,16,3
	.word	85097
	.byte	14
	.word	1149
	.byte	20
	.byte	'Ifx_SCU_WDTCPU',0,4,141,17,3
	.word	85127
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,4,156,17,25,12,13
	.byte	'CON0',0
	.word	84857
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	84924
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	84991
	.byte	4,2,35,8,0,14
	.word	85156
	.byte	20
	.byte	'Ifx_SCU_WDTS',0,4,161,17,3
	.word	85217
	.byte	15,8
	.word	85056
	.byte	16,1,0,14
	.word	85244
	.byte	15,20
	.word	613
	.byte	16,19,0,15,36
	.word	613
	.byte	16,35,0,15,16
	.word	80055
	.byte	16,3,0,15,16
	.word	80814
	.byte	16,3,0,15,72
	.word	1149
	.byte	16,5,0,14
	.word	85294
	.byte	14
	.word	85156
	.byte	15,176,2
	.word	613
	.byte	16,175,2,0,10
	.byte	'_Ifx_SCU',0,4,176,17,25,128,8,13
	.byte	'reserved_0',0
	.word	4454
	.byte	8,2,35,0,13
	.byte	'ID',0
	.word	80754
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2634
	.byte	4,2,35,12,13
	.byte	'OSCCON',0
	.word	81589
	.byte	4,2,35,16,13
	.byte	'SYSPLLSTAT',0
	.word	84376
	.byte	4,2,35,20,13
	.byte	'SYSPLLCON0',0
	.word	84172
	.byte	4,2,35,24,13
	.byte	'SYSPLLCON1',0
	.word	84240
	.byte	4,2,35,28,13
	.byte	'SYSPLLCON2',0
	.word	84308
	.byte	4,2,35,32,13
	.byte	'PERPLLSTAT',0
	.word	82167
	.byte	4,2,35,36,13
	.byte	'PERPLLCON0',0
	.word	82031
	.byte	4,2,35,40,13
	.byte	'PERPLLCON1',0
	.word	82099
	.byte	4,2,35,44,13
	.byte	'CCUCON0',0
	.word	78950
	.byte	4,2,35,48,13
	.byte	'CCUCON1',0
	.word	79015
	.byte	4,2,35,52,13
	.byte	'FDR',0
	.word	80632
	.byte	4,2,35,56,13
	.byte	'EXTCON',0
	.word	80568
	.byte	4,2,35,60,13
	.byte	'CCUCON2',0
	.word	79212
	.byte	4,2,35,64,13
	.byte	'CCUCON3',0
	.word	79277
	.byte	4,2,35,68,13
	.byte	'CCUCON4',0
	.word	79342
	.byte	4,2,35,72,13
	.byte	'CCUCON5',0
	.word	79407
	.byte	4,2,35,76,13
	.byte	'RSTSTAT',0
	.word	83207
	.byte	4,2,35,80,13
	.byte	'reserved_54',0
	.word	2634
	.byte	4,2,35,84,13
	.byte	'RSTCON',0
	.word	83013
	.byte	4,2,35,88,13
	.byte	'ARSTDIS',0
	.word	78885
	.byte	4,2,35,92,13
	.byte	'SWRSTCON',0
	.word	84042
	.byte	4,2,35,96,13
	.byte	'RSTCON2',0
	.word	83077
	.byte	4,2,35,100,13
	.byte	'RSTCON3',0
	.word	83142
	.byte	4,2,35,104,13
	.byte	'reserved_6C',0
	.word	2634
	.byte	4,2,35,108,13
	.byte	'ESRCFGX',0
	.word	85253
	.byte	8,2,35,112,13
	.byte	'ESROCFG',0
	.word	80503
	.byte	4,2,35,120,13
	.byte	'SYSCON',0
	.word	84108
	.byte	4,2,35,124,13
	.byte	'CCUCON6',0
	.word	79472
	.byte	4,3,35,128,1,13
	.byte	'CCUCON7',0
	.word	79537
	.byte	4,3,35,132,1,13
	.byte	'CCUCON8',0
	.word	79602
	.byte	4,3,35,136,1,13
	.byte	'CCUCON9',0
	.word	79667
	.byte	4,3,35,140,1,13
	.byte	'CCUCON10',0
	.word	79080
	.byte	4,3,35,144,1,13
	.byte	'CCUCON11',0
	.word	79146
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	2634
	.byte	4,3,35,152,1,13
	.byte	'PDR',0
	.word	81908
	.byte	4,3,35,156,1,13
	.byte	'IOCR',0
	.word	80936
	.byte	4,3,35,160,1,13
	.byte	'OUT',0
	.word	81653
	.byte	4,3,35,164,1,13
	.byte	'OMR',0
	.word	81528
	.byte	4,3,35,168,1,13
	.byte	'IN',0
	.word	80876
	.byte	4,3,35,172,1,13
	.byte	'reserved_B0',0
	.word	47995
	.byte	16,3,35,176,1,13
	.byte	'STSTAT',0
	.word	83912
	.byte	4,3,35,192,1,13
	.byte	'STCON',0
	.word	83465
	.byte	4,3,35,196,1,13
	.byte	'PMCSR0',0
	.word	82235
	.byte	4,3,35,200,1,13
	.byte	'PMCSR1',0
	.word	82299
	.byte	4,3,35,204,1,13
	.byte	'PMCSR2',0
	.word	82363
	.byte	4,3,35,208,1,13
	.byte	'PMCSR3',0
	.word	82427
	.byte	4,3,35,212,1,13
	.byte	'PMCSR4',0
	.word	82491
	.byte	4,3,35,216,1,13
	.byte	'PMCSR5',0
	.word	82555
	.byte	4,3,35,220,1,13
	.byte	'reserved_E0',0
	.word	2634
	.byte	4,3,35,224,1,13
	.byte	'PMSTAT0',0
	.word	82619
	.byte	4,3,35,228,1,13
	.byte	'PMSWCR1',0
	.word	82684
	.byte	4,3,35,232,1,13
	.byte	'reserved_EC',0
	.word	47995
	.byte	16,3,35,236,1,13
	.byte	'EMSR',0
	.word	80305
	.byte	4,3,35,252,1,13
	.byte	'EMSSW',0
	.word	80367
	.byte	4,3,35,128,2,13
	.byte	'DTSCSTAT',0
	.word	79861
	.byte	4,3,35,132,2,13
	.byte	'DTSCLIM',0
	.word	79796
	.byte	4,3,35,136,2,13
	.byte	'reserved_10C',0
	.word	85258
	.byte	20,3,35,140,2,13
	.byte	'TRAPDIS1',0
	.word	84575
	.byte	4,3,35,160,2,13
	.byte	'TRAPSTAT',0
	.word	84706
	.byte	4,3,35,164,2,13
	.byte	'TRAPSET',0
	.word	84641
	.byte	4,3,35,168,2,13
	.byte	'TRAPCLR',0
	.word	84444
	.byte	4,3,35,172,2,13
	.byte	'TRAPDIS0',0
	.word	84509
	.byte	4,3,35,176,2,13
	.byte	'LCLCON0',0
	.word	81270
	.byte	4,3,35,180,2,13
	.byte	'LCLCON1',0
	.word	81335
	.byte	4,3,35,184,2,13
	.byte	'LCLTEST',0
	.word	81400
	.byte	4,3,35,188,2,13
	.byte	'CHIPID',0
	.word	79732
	.byte	4,3,35,192,2,13
	.byte	'MANID',0
	.word	81465
	.byte	4,3,35,196,2,13
	.byte	'reserved_148',0
	.word	2634
	.byte	4,3,35,200,2,13
	.byte	'SWAPCTRL',0
	.word	83976
	.byte	4,3,35,204,2,13
	.byte	'reserved_150',0
	.word	85258
	.byte	20,3,35,208,2,13
	.byte	'LBISTCTRL0',0
	.word	80998
	.byte	4,3,35,228,2,13
	.byte	'LBISTCTRL1',0
	.word	81066
	.byte	4,3,35,232,2,13
	.byte	'LBISTCTRL2',0
	.word	81134
	.byte	4,3,35,236,2,13
	.byte	'LBISTCTRL3',0
	.word	81202
	.byte	4,3,35,240,2,13
	.byte	'reserved_174',0
	.word	47995
	.byte	16,3,35,244,2,13
	.byte	'STMEM1',0
	.word	83528
	.byte	4,3,35,132,3,13
	.byte	'STMEM2',0
	.word	83592
	.byte	4,3,35,136,3,13
	.byte	'PDISC',0
	.word	81845
	.byte	4,3,35,140,3,13
	.byte	'reserved_190',0
	.word	4454
	.byte	8,3,35,144,3,13
	.byte	'PMTRCSR0',0
	.word	82749
	.byte	4,3,35,152,3,13
	.byte	'PMTRCSR1',0
	.word	82815
	.byte	4,3,35,156,3,13
	.byte	'PMTRCSR2',0
	.word	82881
	.byte	4,3,35,160,3,13
	.byte	'PMTRCSR3',0
	.word	82947
	.byte	4,3,35,164,3,13
	.byte	'reserved_1A8',0
	.word	3825
	.byte	24,3,35,168,3,13
	.byte	'STMEM3',0
	.word	83656
	.byte	4,3,35,192,3,13
	.byte	'STMEM4',0
	.word	83720
	.byte	4,3,35,196,3,13
	.byte	'STMEM5',0
	.word	83784
	.byte	4,3,35,200,3,13
	.byte	'STMEM6',0
	.word	83848
	.byte	4,3,35,204,3,13
	.byte	'reserved_1D0',0
	.word	47995
	.byte	16,3,35,208,3,13
	.byte	'OVCENABLE',0
	.word	81778
	.byte	4,3,35,224,3,13
	.byte	'OVCCON',0
	.word	81714
	.byte	4,3,35,228,3,13
	.byte	'reserved_1E8',0
	.word	85267
	.byte	36,3,35,232,3,13
	.byte	'EIFILT',0
	.word	80117
	.byte	4,3,35,140,4,13
	.byte	'EICR',0
	.word	85276
	.byte	16,3,35,144,4,13
	.byte	'EIFR',0
	.word	80181
	.byte	4,3,35,160,4,13
	.byte	'FMR',0
	.word	80693
	.byte	4,3,35,164,4,13
	.byte	'PDRR',0
	.word	81969
	.byte	4,3,35,168,4,13
	.byte	'IGCR',0
	.word	85285
	.byte	16,3,35,172,4,13
	.byte	'reserved_23C',0
	.word	47995
	.byte	16,3,35,188,4,13
	.byte	'WDTCPU',0
	.word	85303
	.byte	72,3,35,204,4,13
	.byte	'reserved_294',0
	.word	4454
	.byte	8,3,35,148,5,13
	.byte	'EICON0',0
	.word	79927
	.byte	4,3,35,156,5,13
	.byte	'EICON1',0
	.word	79991
	.byte	4,3,35,160,5,13
	.byte	'EISR',0
	.word	80243
	.byte	4,3,35,164,5,13
	.byte	'WDTS',0
	.word	85308
	.byte	12,3,35,168,5,13
	.byte	'SEICON0',0
	.word	83272
	.byte	4,3,35,180,5,13
	.byte	'SEICON1',0
	.word	83337
	.byte	4,3,35,184,5,13
	.byte	'SEISR',0
	.word	83402
	.byte	4,3,35,188,5,13
	.byte	'reserved_2C0',0
	.word	85313
	.byte	176,2,3,35,192,5,13
	.byte	'ACCEN11',0
	.word	78820
	.byte	4,3,35,240,7,13
	.byte	'ACCEN10',0
	.word	78755
	.byte	4,3,35,244,7,13
	.byte	'ACCEN01',0
	.word	78690
	.byte	4,3,35,248,7,13
	.byte	'ACCEN00',0
	.word	78625
	.byte	4,3,35,252,7,0,14
	.word	85324
	.byte	20
	.byte	'Ifx_SCU',0,4,166,18,3
	.word	87445
	.byte	20
	.byte	'Ifx_STM_ACCEN0_Bits',0,14,102,3
	.word	13133
	.byte	20
	.byte	'Ifx_STM_ACCEN1_Bits',0,14,108,3
	.word	13044
	.byte	20
	.byte	'Ifx_STM_CAP_Bits',0,14,114,3
	.word	11547
	.byte	20
	.byte	'Ifx_STM_CAPSV_Bits',0,14,120,3
	.word	12428
	.byte	20
	.byte	'Ifx_STM_CLC_Bits',0,14,130,1,3
	.word	10666
	.byte	20
	.byte	'Ifx_STM_CMCON_Bits',0,14,143,1,3
	.word	11727
	.byte	20
	.byte	'Ifx_STM_CMP_Bits',0,14,149,1,3
	.word	11635
	.byte	20
	.byte	'Ifx_STM_ICR_Bits',0,14,162,1,3
	.word	11959
	.byte	20
	.byte	'Ifx_STM_ID_Bits',0,14,170,1,3
	.word	10822
	.byte	20
	.byte	'Ifx_STM_ISCR_Bits',0,14,180,1,3
	.word	12176
	.byte	20
	.byte	'Ifx_STM_KRST0_Bits',0,14,188,1,3
	.word	12921
	.byte	20
	.byte	'Ifx_STM_KRST1_Bits',0,14,195,1,3
	.word	12817
	.byte	20
	.byte	'Ifx_STM_KRSTCLR_Bits',0,14,202,1,3
	.word	12711
	.byte	20
	.byte	'Ifx_STM_OCS_Bits',0,14,213,1,3
	.word	12529
	.byte	20
	.byte	'Ifx_STM_TIM0_Bits',0,14,219,1,3
	.word	10941
	.byte	20
	.byte	'Ifx_STM_TIM0SV_Bits',0,14,225,1,3
	.word	12340
	.byte	20
	.byte	'Ifx_STM_TIM1_Bits',0,14,231,1,3
	.word	11027
	.byte	20
	.byte	'Ifx_STM_TIM2_Bits',0,14,237,1,3
	.word	11113
	.byte	20
	.byte	'Ifx_STM_TIM3_Bits',0,14,243,1,3
	.word	11199
	.byte	20
	.byte	'Ifx_STM_TIM4_Bits',0,14,249,1,3
	.word	11286
	.byte	20
	.byte	'Ifx_STM_TIM5_Bits',0,14,255,1,3
	.word	11373
	.byte	20
	.byte	'Ifx_STM_TIM6_Bits',0,14,133,2,3
	.word	11460
	.byte	20
	.byte	'Ifx_STM_ACCEN0',0,14,146,2,3
	.word	13662
	.byte	20
	.byte	'Ifx_STM_ACCEN1',0,14,154,2,3
	.word	13093
	.byte	20
	.byte	'Ifx_STM_CAP',0,14,162,2,3
	.word	11595
	.byte	20
	.byte	'Ifx_STM_CAPSV',0,14,170,2,3
	.word	12478
	.byte	20
	.byte	'Ifx_STM_CLC',0,14,178,2,3
	.word	10782
	.byte	20
	.byte	'Ifx_STM_CMCON',0,14,186,2,3
	.word	11919
	.byte	20
	.byte	'Ifx_STM_CMP',0,14,194,2,3
	.word	11678
	.byte	20
	.byte	'Ifx_STM_ICR',0,14,202,2,3
	.word	12136
	.byte	20
	.byte	'Ifx_STM_ID',0,14,210,2,3
	.word	10901
	.byte	20
	.byte	'Ifx_STM_ISCR',0,14,218,2,3
	.word	12300
	.byte	20
	.byte	'Ifx_STM_KRST0',0,14,226,2,3
	.word	13004
	.byte	20
	.byte	'Ifx_STM_KRST1',0,14,234,2,3
	.word	12881
	.byte	20
	.byte	'Ifx_STM_KRSTCLR',0,14,242,2,3
	.word	12777
	.byte	20
	.byte	'Ifx_STM_OCS',0,14,250,2,3
	.word	12671
	.byte	20
	.byte	'Ifx_STM_TIM0',0,14,130,3,3
	.word	10987
	.byte	20
	.byte	'Ifx_STM_TIM0SV',0,14,138,3,3
	.word	12388
	.byte	20
	.byte	'Ifx_STM_TIM1',0,14,146,3,3
	.word	11073
	.byte	20
	.byte	'Ifx_STM_TIM2',0,14,154,3,3
	.word	11159
	.byte	20
	.byte	'Ifx_STM_TIM3',0,14,162,3,3
	.word	11246
	.byte	20
	.byte	'Ifx_STM_TIM4',0,14,170,3,3
	.word	11333
	.byte	20
	.byte	'Ifx_STM_TIM5',0,14,178,3,3
	.word	11420
	.byte	20
	.byte	'Ifx_STM_TIM6',0,14,186,3,3
	.word	11507
	.byte	14
	.word	13702
	.byte	20
	.byte	'Ifx_STM',0,14,226,3,3
	.word	88553
	.byte	17,31,162,11,9,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,18
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,20
	.byte	'IfxScu_WDTCON1_IR',0,31,167,11,3
	.word	88575
	.byte	20
	.byte	'Ifx_P_ACCEN0_Bits',0,6,102,3
	.word	7982
	.byte	20
	.byte	'Ifx_P_ACCEN1_Bits',0,6,108,3
	.word	7895
	.byte	20
	.byte	'Ifx_P_ESR_Bits',0,6,130,1,3
	.word	4463
	.byte	20
	.byte	'Ifx_P_ID_Bits',0,6,138,1,3
	.word	2514
	.byte	20
	.byte	'Ifx_P_IN_Bits',0,6,160,1,3
	.word	3510
	.byte	20
	.byte	'Ifx_P_IOCR0_Bits',0,6,173,1,3
	.word	2643
	.byte	20
	.byte	'Ifx_P_IOCR12_Bits',0,6,186,1,3
	.word	3290
	.byte	20
	.byte	'Ifx_P_IOCR4_Bits',0,6,199,1,3
	.word	2858
	.byte	20
	.byte	'Ifx_P_IOCR8_Bits',0,6,212,1,3
	.word	3073
	.byte	20
	.byte	'Ifx_P_LPCR_Bits',0,6,231,1,3
	.word	7557
	.byte	20
	.byte	'Ifx_P_OMCR_Bits',0,6,253,1,3
	.word	7209
	.byte	20
	.byte	'Ifx_P_OMCR0_Bits',0,6,136,2,3
	.word	6196
	.byte	20
	.byte	'Ifx_P_OMCR12_Bits',0,6,146,2,3
	.word	6720
	.byte	20
	.byte	'Ifx_P_OMCR4_Bits',0,6,157,2,3
	.word	6370
	.byte	20
	.byte	'Ifx_P_OMCR8_Bits',0,6,168,2,3
	.word	6544
	.byte	20
	.byte	'Ifx_P_OMR_Bits',0,6,205,2,3
	.word	1943
	.byte	20
	.byte	'Ifx_P_OMSR_Bits',0,6,227,2,3
	.word	6876
	.byte	20
	.byte	'Ifx_P_OMSR0_Bits',0,6,237,2,3
	.word	5533
	.byte	20
	.byte	'Ifx_P_OMSR12_Bits',0,6,248,2,3
	.word	6021
	.byte	20
	.byte	'Ifx_P_OMSR4_Bits',0,6,131,3,3
	.word	5680
	.byte	20
	.byte	'Ifx_P_OMSR8_Bits',0,6,142,3,3
	.word	5849
	.byte	20
	.byte	'Ifx_P_OUT_Bits',0,6,164,3,3
	.word	1627
	.byte	20
	.byte	'Ifx_P_PCSR_Bits',0,6,187,3,3
	.word	5169
	.byte	20
	.byte	'Ifx_P_PDISC_Bits',0,6,209,3,3
	.word	4803
	.byte	20
	.byte	'Ifx_P_PDR0_Bits',0,6,230,3,3
	.word	3834
	.byte	20
	.byte	'Ifx_P_PDR1_Bits',0,6,251,3,3
	.word	4138
	.byte	20
	.byte	'Ifx_P_ACCEN0',0,6,136,4,3
	.word	8509
	.byte	20
	.byte	'Ifx_P_ACCEN1',0,6,144,4,3
	.word	7942
	.byte	20
	.byte	'Ifx_P_ESR',0,6,152,4,3
	.word	4754
	.byte	20
	.byte	'Ifx_P_ID',0,6,160,4,3
	.word	2594
	.byte	20
	.byte	'Ifx_P_IN',0,6,168,4,3
	.word	3785
	.byte	20
	.byte	'Ifx_P_IOCR0',0,6,176,4,3
	.word	2818
	.byte	20
	.byte	'Ifx_P_IOCR12',0,6,184,4,3
	.word	3470
	.byte	20
	.byte	'Ifx_P_IOCR4',0,6,192,4,3
	.word	3033
	.byte	20
	.byte	'Ifx_P_IOCR8',0,6,200,4,3
	.word	3250
	.byte	20
	.byte	'Ifx_P_LPCR',0,6,208,4,3
	.word	7837
	.byte	20
	.byte	'Ifx_P_OMCR',0,6,216,4,3
	.word	7517
	.byte	20
	.byte	'Ifx_P_OMCR0',0,6,224,4,3
	.word	6330
	.byte	20
	.byte	'Ifx_P_OMCR12',0,6,232,4,3
	.word	6836
	.byte	20
	.byte	'Ifx_P_OMCR4',0,6,240,4,3
	.word	6504
	.byte	20
	.byte	'Ifx_P_OMCR8',0,6,248,4,3
	.word	6680
	.byte	20
	.byte	'Ifx_P_OMR',0,6,128,5,3
	.word	2474
	.byte	20
	.byte	'Ifx_P_OMSR',0,6,136,5,3
	.word	7169
	.byte	20
	.byte	'Ifx_P_OMSR0',0,6,144,5,3
	.word	5640
	.byte	20
	.byte	'Ifx_P_OMSR12',0,6,152,5,3
	.word	6156
	.byte	20
	.byte	'Ifx_P_OMSR4',0,6,160,5,3
	.word	5809
	.byte	20
	.byte	'Ifx_P_OMSR8',0,6,168,5,3
	.word	5981
	.byte	20
	.byte	'Ifx_P_OUT',0,6,176,5,3
	.word	1903
	.byte	20
	.byte	'Ifx_P_PCSR',0,6,184,5,3
	.word	5493
	.byte	20
	.byte	'Ifx_P_PDISC',0,6,192,5,3
	.word	5129
	.byte	20
	.byte	'Ifx_P_PDR0',0,6,200,5,3
	.word	4098
	.byte	20
	.byte	'Ifx_P_PDR1',0,6,208,5,3
	.word	4414
	.byte	14
	.word	8549
	.byte	20
	.byte	'Ifx_P',0,6,128,6,3
	.word	89891
	.byte	17,5,73,9,1,18
	.byte	'IfxPort_ControlledBy_port',0,0,18
	.byte	'IfxPort_ControlledBy_hsct',0,1,0,20
	.byte	'IfxPort_ControlledBy',0,5,77,3
	.word	89911
	.byte	17,5,81,9,1,18
	.byte	'IfxPort_InputMode_undefined',0,127,18
	.byte	'IfxPort_InputMode_noPullDevice',0,0,18
	.byte	'IfxPort_InputMode_pullDown',0,8,18
	.byte	'IfxPort_InputMode_pullUp',0,16,0,20
	.byte	'IfxPort_InputMode',0,5,87,3
	.word	90002
	.byte	17,5,91,9,1,18
	.byte	'IfxPort_LvdsMode_high',0,0,18
	.byte	'IfxPort_LvdsMode_medium',0,1,0,20
	.byte	'IfxPort_LvdsMode',0,5,95,3
	.word	90153
	.byte	17,5,126,9,1,18
	.byte	'IfxPort_OutputIdx_general',0,128,1,18
	.byte	'IfxPort_OutputIdx_alt1',0,136,1,18
	.byte	'IfxPort_OutputIdx_alt2',0,144,1,18
	.byte	'IfxPort_OutputIdx_alt3',0,152,1,18
	.byte	'IfxPort_OutputIdx_alt4',0,160,1,18
	.byte	'IfxPort_OutputIdx_alt5',0,168,1,18
	.byte	'IfxPort_OutputIdx_alt6',0,176,1,18
	.byte	'IfxPort_OutputIdx_alt7',0,184,1,0,20
	.byte	'IfxPort_OutputIdx',0,5,136,1,3
	.word	90234
	.byte	20
	.byte	'IfxPort_OutputMode',0,5,145,1,3
	.word	19418
	.byte	20
	.byte	'IfxPort_PadDriver',0,5,165,1,3
	.word	19514
	.byte	17,5,169,1,9,1,18
	.byte	'IfxPort_PadSupply_3v',0,0,18
	.byte	'IfxPort_PadSupply_5v',0,1,0,20
	.byte	'IfxPort_PadSupply',0,5,173,1,3
	.word	90533
	.byte	17,5,177,1,9,1,18
	.byte	'IfxPort_PinFunctionMode_digital',0,0,18
	.byte	'IfxPort_PinFunctionMode_analog',0,1,0,20
	.byte	'IfxPort_PinFunctionMode',0,5,181,1,3
	.word	90613
	.byte	20
	.byte	'IfxPort_State',0,5,193,1,3
	.word	9129
	.byte	38,5,246,1,9,8,13
	.byte	'port',0
	.word	9124
	.byte	4,2,35,0,13
	.byte	'pinIndex',0
	.word	613
	.byte	1,2,35,4,0,20
	.byte	'IfxPort_Pin',0,5,250,1,3
	.word	90743
	.byte	10
	.byte	'_Ifx_SMU_ACCEN0_Bits',0,32,68,16,4,11
	.byte	'EN0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SMU_ACCEN0_Bits',0,32,102,3
	.word	90803
	.byte	10
	.byte	'_Ifx_SMU_ACCEN1_Bits',0,32,105,16,4,11
	.byte	'reserved_0',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_SMU_ACCEN1_Bits',0,32,108,3
	.word	91360
	.byte	10
	.byte	'_Ifx_SMU_AD_Bits',0,32,111,16,4,11
	.byte	'DF0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'DF1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'DF2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'DF3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'DF4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'DF5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'DF6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'DF7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'DF8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'DF9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'DF10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'DF11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'DF12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'DF13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'DF14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'DF15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'DF16',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'DF17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'DF18',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'DF19',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'DF20',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'DF21',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'DF22',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'DF23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'DF24',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'DF25',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'DF26',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'DF27',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'DF28',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'DF29',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'DF30',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'DF31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SMU_AD_Bits',0,32,145,1,3
	.word	91437
	.byte	10
	.byte	'_Ifx_SMU_AEX_Bits',0,32,148,1,16,4,11
	.byte	'IRQ0STS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'IRQ1STS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'IRQ2STS',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'RST0STS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'RST1STS',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'RST2STS',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'RST3STS',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'RST4STS',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'RST5STS',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'NMISTS',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'EMSSTS',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	613
	.byte	4,0,2,35,1,11
	.byte	'IRQ0AEM',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'IRQ1AEM',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'IRQ2AEM',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'RST0AEM',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'RST1AEM',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'RST2AEM',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'RST3AEM',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'RST4AEM',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'RST5AEM',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'NMIAEM',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'EMSAEM',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_SMU_AEX_Bits',0,32,176,1,3
	.word	91987
	.byte	10
	.byte	'_Ifx_SMU_AEXCLR_Bits',0,32,179,1,16,4,11
	.byte	'IRQ0CLR',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'IRQ1CLR',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'IRQ2CLR',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'RST0CLR',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'RST1CLR',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'RST2CLR',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'RST3CLR',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'RST4CLR',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'RST5CLR',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'NMICLR',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'EMSCLR',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	461
	.byte	4,16,2,35,0,11
	.byte	'IRQ0AEMCLR',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'IRQ1AEMCLR',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'IRQ2AEMCLR',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'RST0AEMCLR',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'RST1AEMCLR',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'RST2AEMCLR',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'RST3AEMCLR',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'RST4AEMCLR',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'RST5AEMCLR',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'NMIAEMCLR',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'EMSAEMCLR',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	461
	.byte	4,0,2,35,0,0,20
	.byte	'Ifx_SMU_AEXCLR_Bits',0,32,207,1,3
	.word	92544
	.byte	10
	.byte	'_Ifx_SMU_AFCNT_Bits',0,32,210,1,16,4,11
	.byte	'FCNT',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'ACNT',0,2
	.word	630
	.byte	12,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	14,2,2,35,2,11
	.byte	'FCO',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'ACO',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_SMU_AFCNT_Bits',0,32,217,1,3
	.word	93140
	.byte	10
	.byte	'_Ifx_SMU_AG_Bits',0,32,220,1,16,4,11
	.byte	'SF0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'SF1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'SF2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'SF3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'SF4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'SF5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'SF6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'SF7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'SF8',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'SF9',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'SF10',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'SF11',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'SF12',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'SF13',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'SF14',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'SF15',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'SF16',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'SF17',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'SF18',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'SF19',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'SF20',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'SF21',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'SF22',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'SF23',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'SF24',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'SF25',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'SF26',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'SF27',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'SF28',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'SF29',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'SF30',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'SF31',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_SMU_AG_Bits',0,32,254,1,3
	.word	93280
	.byte	10
	.byte	'_Ifx_SMU_AGC_Bits',0,32,129,2,16,4,11
	.byte	'IGCS0',0,4
	.word	461
	.byte	3,29,2,35,0,11
	.byte	'reserved_3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'IGCS1',0,4
	.word	461
	.byte	3,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'IGCS2',0,4
	.word	461
	.byte	3,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	461
	.byte	5,16,2,35,0,11
	.byte	'RCS',0,4
	.word	461
	.byte	6,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	461
	.byte	2,8,2,35,0,11
	.byte	'PES',0,4
	.word	461
	.byte	5,3,2,35,0,11
	.byte	'EFRST',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	461
	.byte	2,0,2,35,0,0,20
	.byte	'Ifx_SMU_AGC_Bits',0,32,142,2,3
	.word	93831
	.byte	10
	.byte	'_Ifx_SMU_AGCF_Bits',0,32,145,2,16,4,11
	.byte	'CF0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'CF1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'CF2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'CF3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'CF4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'CF5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'CF6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'CF7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'CF8',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'CF9',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'CF10',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'CF11',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'CF12',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'CF13',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'CF14',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'CF15',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'CF16',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'CF17',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'CF18',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'CF19',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'CF20',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'CF21',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'CF22',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'CF23',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'CF24',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'CF25',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'CF26',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'CF27',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'CF28',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'CF29',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'CF30',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'CF31',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_SMU_AGCF_Bits',0,32,179,2,3
	.word	94093
	.byte	10
	.byte	'_Ifx_SMU_AGFSP_Bits',0,32,182,2,16,4,11
	.byte	'FE0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'FE1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'FE2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'FE3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'FE4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'FE5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'FE6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'FE7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'FE8',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'FE9',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'FE10',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'FE11',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'FE12',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'FE13',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'FE14',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'FE15',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'FE16',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'FE17',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'FE18',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'FE19',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'FE20',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'FE21',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'FE22',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'FE23',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'FE24',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'FE25',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'FE26',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'FE27',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'FE28',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'FE29',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'FE30',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'FE31',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_SMU_AGFSP_Bits',0,32,216,2,3
	.word	94648
	.byte	10
	.byte	'_Ifx_SMU_CLC_Bits',0,32,219,2,16,4,11
	.byte	'DISR',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	438
	.byte	28,0,2,35,0,0,20
	.byte	'Ifx_SMU_CLC_Bits',0,32,226,2,3
	.word	95205
	.byte	10
	.byte	'_Ifx_SMU_CMD_Bits',0,32,229,2,16,4,11
	.byte	'CMD',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_SMU_CMD_Bits',0,32,234,2,3
	.word	95348
	.byte	10
	.byte	'_Ifx_SMU_DBG_Bits',0,32,237,2,16,4,11
	.byte	'SSM',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	438
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_SMU_DBG_Bits',0,32,241,2,3
	.word	95451
	.byte	10
	.byte	'_Ifx_SMU_FSP_Bits',0,32,244,2,16,4,11
	.byte	'PRE1',0,4
	.word	461
	.byte	3,29,2,35,0,11
	.byte	'PRE2',0,4
	.word	461
	.byte	2,27,2,35,0,11
	.byte	'MODE',0,4
	.word	461
	.byte	2,25,2,35,0,11
	.byte	'PES',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'TFSP_LOW',0,4
	.word	461
	.byte	14,10,2,35,0,11
	.byte	'TFSP_HIGH',0,4
	.word	461
	.byte	10,0,2,35,0,0,20
	.byte	'Ifx_SMU_FSP_Bits',0,32,252,2,3
	.word	95539
	.byte	10
	.byte	'_Ifx_SMU_ID_Bits',0,32,255,2,16,4,11
	.byte	'MOD_REV',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_SMU_ID_Bits',0,32,132,3,3
	.word	95694
	.byte	10
	.byte	'_Ifx_SMU_KEYS_Bits',0,32,135,3,16,4,11
	.byte	'CFGLCK',0,4
	.word	461
	.byte	8,24,2,35,0,11
	.byte	'PERLCK',0,4
	.word	461
	.byte	8,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_SMU_KEYS_Bits',0,32,140,3,3
	.word	95804
	.byte	10
	.byte	'_Ifx_SMU_OCS_Bits',0,32,143,3,16,4,11
	.byte	'TGS',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'TGB',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'TG_P',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	438
	.byte	20,8,2,35,0,11
	.byte	'SUS',0,1
	.word	613
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	613
	.byte	2,0,2,35,3,0,20
	.byte	'Ifx_SMU_OCS_Bits',0,32,153,3,3
	.word	95916
	.byte	10
	.byte	'_Ifx_SMU_PCTL_Bits',0,32,156,3,16,4,11
	.byte	'HWDIR',0,4
	.word	461
	.byte	2,30,2,35,0,11
	.byte	'HWEN',0,4
	.word	461
	.byte	2,28,2,35,0,11
	.byte	'GFSCU_EN',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'GFSTS_EN',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'PCS',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	6,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	461
	.byte	9,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	461
	.byte	9,0,2,35,0,0,20
	.byte	'Ifx_SMU_PCTL_Bits',0,32,167,3,3
	.word	96108
	.byte	10
	.byte	'_Ifx_SMU_RMCTL_Bits',0,32,170,3,16,4,11
	.byte	'TE0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'TE1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'TE2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'TE3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'TE4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'TE5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'TE6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'TE7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'TE8',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'TE9',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'TE10',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_SMU_RMCTL_Bits',0,32,204,3,3
	.word	96339
	.byte	10
	.byte	'_Ifx_SMU_RMEF_Bits',0,32,207,3,16,4,11
	.byte	'EF0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'EF1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'EF2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'EF3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'EF4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'EF5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'EF6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'EF7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'EF8',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'EF9',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'EF10',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_SMU_RMEF_Bits',0,32,241,3,3
	.word	97043
	.byte	10
	.byte	'_Ifx_SMU_RMSTS_Bits',0,32,244,3,16,4,11
	.byte	'STS0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'STS1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'STS2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'STS3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'STS4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'STS5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'STS6',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'STS7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'STS8',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'STS9',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'STS10',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'reserved_11',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'reserved_18',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'reserved_19',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'reserved_21',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'reserved_22',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'reserved_27',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'reserved_29',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'reserved_30',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'reserved_31',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_SMU_RMSTS_Bits',0,32,150,4,3
	.word	97745
	.byte	10
	.byte	'_Ifx_SMU_RTAC00_Bits',0,32,153,4,16,4,11
	.byte	'GID0',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	461
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	461
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	461
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	461
	.byte	7,0,2,35,0,0,20
	.byte	'Ifx_SMU_RTAC00_Bits',0,32,161,4,3
	.word	98460
	.byte	10
	.byte	'_Ifx_SMU_RTAC01_Bits',0,32,164,4,16,4,11
	.byte	'GID2',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	461
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	461
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	461
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	461
	.byte	7,0,2,35,0,0,20
	.byte	'Ifx_SMU_RTAC01_Bits',0,32,172,4,3
	.word	98628
	.byte	10
	.byte	'_Ifx_SMU_RTAC10_Bits',0,32,175,4,16,4,11
	.byte	'GID0',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'ALID0',0,4
	.word	461
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	461
	.byte	7,16,2,35,0,11
	.byte	'GID1',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'ALID1',0,4
	.word	461
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	461
	.byte	7,0,2,35,0,0,20
	.byte	'Ifx_SMU_RTAC10_Bits',0,32,183,4,3
	.word	98796
	.byte	10
	.byte	'_Ifx_SMU_RTAC11_Bits',0,32,186,4,16,4,11
	.byte	'GID2',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'ALID2',0,4
	.word	461
	.byte	5,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	461
	.byte	7,16,2,35,0,11
	.byte	'GID3',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'ALID3',0,4
	.word	461
	.byte	5,7,2,35,0,11
	.byte	'reserved_25',0,4
	.word	461
	.byte	7,0,2,35,0,0,20
	.byte	'Ifx_SMU_RTAC11_Bits',0,32,194,4,3
	.word	98964
	.byte	10
	.byte	'_Ifx_SMU_RTC_Bits',0,32,197,4,16,4,11
	.byte	'RT0E',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'RT1E',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'reserved_2',0,4
	.word	461
	.byte	6,24,2,35,0,11
	.byte	'RTD',0,4
	.word	461
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_SMU_RTC_Bits',0,32,203,4,3
	.word	99132
	.byte	10
	.byte	'_Ifx_SMU_STS_Bits',0,32,206,4,16,4,11
	.byte	'CMD',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'ARG',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'RES',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'ASCE',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'FSP',0,4
	.word	461
	.byte	2,20,2,35,0,11
	.byte	'FSTS',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'reserved_13',0,4
	.word	461
	.byte	3,16,2,35,0,11
	.byte	'RTS0',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'RTME0',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'RTS1',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'RTME1',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	461
	.byte	12,0,2,35,0,0,20
	.byte	'Ifx_SMU_STS_Bits',0,32,220,4,3
	.word	99252
	.byte	12,32,228,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	90803
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_ACCEN0',0,32,233,4,3
	.word	99507
	.byte	12,32,236,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91360
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_ACCEN1',0,32,241,4,3
	.word	99571
	.byte	12,32,244,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91437
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_AD',0,32,249,4,3
	.word	99635
	.byte	12,32,252,4,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	91987
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_AEX',0,32,129,5,3
	.word	99695
	.byte	12,32,132,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	92544
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_AEXCLR',0,32,137,5,3
	.word	99756
	.byte	12,32,140,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93140
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_AFCNT',0,32,145,5,3
	.word	99820
	.byte	12,32,148,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93280
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_AG',0,32,153,5,3
	.word	99883
	.byte	12,32,156,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	93831
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_AGC',0,32,161,5,3
	.word	99943
	.byte	12,32,164,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94093
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_AGCF',0,32,169,5,3
	.word	100004
	.byte	12,32,172,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	94648
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_AGFSP',0,32,177,5,3
	.word	100066
	.byte	12,32,180,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95205
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_CLC',0,32,185,5,3
	.word	100129
	.byte	12,32,188,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95348
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_CMD',0,32,193,5,3
	.word	100190
	.byte	12,32,196,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95451
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_DBG',0,32,201,5,3
	.word	100251
	.byte	12,32,204,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95539
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_FSP',0,32,209,5,3
	.word	100312
	.byte	12,32,212,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95694
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_ID',0,32,217,5,3
	.word	100373
	.byte	12,32,220,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95804
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_KEYS',0,32,225,5,3
	.word	100433
	.byte	12,32,228,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	95916
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_OCS',0,32,233,5,3
	.word	100495
	.byte	12,32,236,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	96108
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_PCTL',0,32,241,5,3
	.word	100556
	.byte	12,32,244,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	96339
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_RMCTL',0,32,249,5,3
	.word	100618
	.byte	12,32,252,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97043
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_RMEF',0,32,129,6,3
	.word	100681
	.byte	12,32,132,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	97745
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_RMSTS',0,32,137,6,3
	.word	100743
	.byte	12,32,140,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98460
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_RTAC00',0,32,145,6,3
	.word	100806
	.byte	12,32,148,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98628
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_RTAC01',0,32,153,6,3
	.word	100870
	.byte	12,32,156,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98796
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_RTAC10',0,32,161,6,3
	.word	100934
	.byte	12,32,164,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	98964
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_RTAC11',0,32,169,6,3
	.word	100998
	.byte	12,32,172,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	99132
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_RTC',0,32,177,6,3
	.word	101062
	.byte	12,32,180,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	99252
	.byte	4,2,35,0,0,20
	.byte	'Ifx_SMU_STS',0,32,185,6,3
	.word	101123
	.byte	20
	.byte	'IfxScuCcu_Fsource',0,7,177,2,3
	.word	17756
	.byte	17,7,210,2,9,1,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy30',0,1,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy60',0,2,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy120',0,3,18
	.byte	'IfxScuCcu_LowPowerDivRatio_divBy240',0,4,0,20
	.byte	'IfxScuCcu_LowPowerDivRatio',0,7,216,2,3
	.word	101211
	.byte	17,7,220,2,9,1,18
	.byte	'IfxScuCcu_ModulationAmplitude_0p5',0,0,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p0',0,1,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p25',0,2,18
	.byte	'IfxScuCcu_ModulationAmplitude_1p5',0,3,18
	.byte	'IfxScuCcu_ModulationAmplitude_2p0',0,4,18
	.byte	'IfxScuCcu_ModulationAmplitude_2p5',0,5,18
	.byte	'IfxScuCcu_ModulationAmplitude_count',0,6,0,20
	.byte	'IfxScuCcu_ModulationAmplitude',0,7,229,2,3
	.word	101404
	.byte	17,7,254,3,9,1,18
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc1',0,0,18
	.byte	'IfxScuCcu_PllInputClockSelection_fOsc0',0,1,18
	.byte	'IfxScuCcu_PllInputClockSelection_fSysclk',0,2,0,20
	.byte	'IfxScuCcu_PllInputClockSelection',0,7,131,4,3
	.word	101705
	.byte	17,7,135,4,9,1,18
	.byte	'IfxScuCcu_Traprequest_esr0',0,0,18
	.byte	'IfxScuCcu_Traprequest_esr1',0,1,18
	.byte	'IfxScuCcu_Traprequest_trap2',0,2,18
	.byte	'IfxScuCcu_Traprequest_smu',0,3,0,20
	.byte	'IfxScuCcu_Traprequest',0,7,141,4,3
	.word	101879
	.byte	17,7,147,4,9,1,18
	.byte	'IfxScuCcu_ModEn_disabled',0,0,18
	.byte	'IfxScuCcu_ModEn_enabled',0,1,0,20
	.byte	'IfxScuCcu_ModEn',0,7,151,4,3
	.word	102033
	.byte	38,7,162,4,9,6,13
	.byte	'pDivider',0
	.word	613
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	613
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	613
	.byte	1,2,35,2,13
	.byte	'k3Divider',0
	.word	613
	.byte	1,2,35,3,13
	.byte	'k3DividerBypass',0
	.word	613
	.byte	1,2,35,4,0,20
	.byte	'IfxScuCcu_PerPllConfig',0,7,171,4,3
	.word	102118
	.byte	38,7,176,4,9,4,13
	.byte	'pDivider',0
	.word	613
	.byte	1,2,35,0,13
	.byte	'nDivider',0
	.word	613
	.byte	1,2,35,1,13
	.byte	'k2Divider',0
	.word	613
	.byte	1,2,35,2,0,20
	.byte	'IfxScuCcu_SysPllConfig',0,7,181,4,3
	.word	102256
	.byte	38,7,189,4,9,8,13
	.byte	'value',0
	.word	9808
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	9808
	.byte	4,2,35,4,0,20
	.byte	'IfxScuCcu_CcuconRegConfig',0,7,193,4,3
	.word	102350
	.byte	38,7,197,4,9,6,13
	.byte	'k2Step',0
	.word	613
	.byte	1,2,35,0,13
	.byte	'waitTime',0
	.word	234
	.byte	4,2,35,2,0,20
	.byte	'IfxScuCcu_PllStepConfig',0,7,201,4,3
	.word	102421
	.byte	38,7,205,4,9,16,13
	.byte	'xtalFrequency',0
	.word	9808
	.byte	4,2,35,0,13
	.byte	'pllInputClockSelection',0
	.word	101705
	.byte	1,2,35,4,13
	.byte	'sysPllConfig',0
	.word	102256
	.byte	4,2,35,6,13
	.byte	'perPllConfig',0
	.word	102118
	.byte	6,2,35,10,0,20
	.byte	'IfxScuCcu_pllsParameterConfig',0,7,211,4,3
	.word	102495
	.byte	38,7,219,4,9,8,13
	.byte	'value',0
	.word	9808
	.byte	4,2,35,0,13
	.byte	'mask',0
	.word	9808
	.byte	4,2,35,4,0,20
	.byte	'IfxScuCcu_FlashWaitstateConfig',0,7,223,4,3
	.word	102640
	.byte	38,7,231,4,9,80,13
	.byte	'ccucon0',0
	.word	102350
	.byte	8,2,35,0,13
	.byte	'ccucon1',0
	.word	102350
	.byte	8,2,35,8,13
	.byte	'ccucon2',0
	.word	102350
	.byte	8,2,35,16,13
	.byte	'ccucon5',0
	.word	102350
	.byte	8,2,35,24,13
	.byte	'ccucon6',0
	.word	102350
	.byte	8,2,35,32,13
	.byte	'ccucon7',0
	.word	102350
	.byte	8,2,35,40,13
	.byte	'ccucon8',0
	.word	102350
	.byte	8,2,35,48,13
	.byte	'ccucon9',0
	.word	102350
	.byte	8,2,35,56,13
	.byte	'ccucon10',0
	.word	102350
	.byte	8,2,35,64,13
	.byte	'ccucon11',0
	.word	102350
	.byte	8,2,35,72,0,20
	.byte	'IfxScuCcu_ClockDistributionConfig',0,7,243,4,3
	.word	102716
	.byte	38,7,247,4,9,20,13
	.byte	'pllsParameters',0
	.word	102495
	.byte	16,2,35,0,13
	.byte	'waitTime',0
	.word	234
	.byte	4,2,35,16,0,20
	.byte	'IfxScuCcu_InitialStepConfig',0,7,251,4,3
	.word	102938
	.byte	24
	.word	102421
	.byte	3
	.word	103024
	.byte	38,7,255,4,9,8,13
	.byte	'numOfSteps',0
	.word	613
	.byte	1,2,35,0,13
	.byte	'pllSteps',0
	.word	103029
	.byte	4,2,35,4,0,20
	.byte	'IfxScuCcu_PllThrottleConfig',0,7,131,5,3
	.word	103034
	.byte	38,7,137,5,9,2,13
	.byte	'Mod_Enable',0
	.word	102033
	.byte	1,2,35,0,13
	.byte	'Mod_Amp',0
	.word	101404
	.byte	1,2,35,1,0,20
	.byte	'IfxScuCcu_Mod_Config',0,7,141,5,3
	.word	103116
	.byte	17,8,141,1,9,1,18
	.byte	'IfxCpu_CounterMode_normal',0,0,18
	.byte	'IfxCpu_CounterMode_task',0,1,0,20
	.byte	'IfxCpu_CounterMode',0,8,145,1,3
	.word	103190
	.byte	38,8,198,1,9,6,13
	.byte	'counter',0
	.word	9808
	.byte	4,2,35,0,13
	.byte	'overlfow',0
	.word	613
	.byte	1,2,35,4,0,20
	.byte	'IfxCpu_Counter',0,8,202,1,3
	.word	103279
	.byte	38,8,210,1,9,32,13
	.byte	'instruction',0
	.word	103279
	.byte	6,2,35,0,13
	.byte	'clock',0
	.word	103279
	.byte	6,2,35,6,13
	.byte	'counter1',0
	.word	103279
	.byte	6,2,35,12,13
	.byte	'counter2',0
	.word	103279
	.byte	6,2,35,18,13
	.byte	'counter3',0
	.word	103279
	.byte	6,2,35,24,0,20
	.byte	'IfxCpu_Perf',0,8,217,1,3
	.word	103345
	.byte	20
	.byte	'IfxSrc_Tos',0,12,75,3
	.word	10458
	.byte	10
	.byte	'_Ifx_CBS_ACCEN0_Bits',0,33,68,16,4,11
	.byte	'EN0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_CBS_ACCEN0_Bits',0,33,102,3
	.word	103482
	.byte	10
	.byte	'_Ifx_CBS_ACCEN1_Bits',0,33,105,16,4,11
	.byte	'reserved_0',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CBS_ACCEN1_Bits',0,33,108,3
	.word	104039
	.byte	10
	.byte	'_Ifx_CBS_COMDATA_Bits',0,33,111,16,4,11
	.byte	'DATA',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CBS_COMDATA_Bits',0,33,114,3
	.word	104116
	.byte	10
	.byte	'_Ifx_CBS_ICTSA_Bits',0,33,117,16,4,11
	.byte	'ADDR',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CBS_ICTSA_Bits',0,33,120,3
	.word	104189
	.byte	10
	.byte	'_Ifx_CBS_ICTTA_Bits',0,33,123,16,4,11
	.byte	'ADDR',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CBS_ICTTA_Bits',0,33,126,3
	.word	104258
	.byte	10
	.byte	'_Ifx_CBS_IFSA_Bits',0,33,129,1,16,4,11
	.byte	'ADDR',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CBS_IFSA_Bits',0,33,132,1,3
	.word	104327
	.byte	10
	.byte	'_Ifx_CBS_IFSC_Bits',0,33,135,1,16,4,11
	.byte	'GO',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'OTGS',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'MODE',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'PRIO',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'RSREP',0,4
	.word	461
	.byte	4,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	461
	.byte	4,16,2,35,0,11
	.byte	'BM0',0,4
	.word	461
	.byte	2,14,2,35,0,11
	.byte	'BM1',0,4
	.word	461
	.byte	2,12,2,35,0,11
	.byte	'BM2',0,4
	.word	461
	.byte	2,10,2,35,0,11
	.byte	'BM3',0,4
	.word	461
	.byte	2,8,2,35,0,11
	.byte	'BM4',0,4
	.word	461
	.byte	2,6,2,35,0,11
	.byte	'BM5',0,4
	.word	461
	.byte	2,4,2,35,0,11
	.byte	'BM6',0,4
	.word	461
	.byte	2,2,2,35,0,11
	.byte	'BM7',0,4
	.word	461
	.byte	2,0,2,35,0,0,20
	.byte	'Ifx_CBS_IFSC_Bits',0,33,152,1,3
	.word	104396
	.byte	10
	.byte	'_Ifx_CBS_INTMOD_Bits',0,33,155,1,16,4,11
	.byte	'SET_CRS',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'SET_CWS',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'SET_CS',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'CLR_CS',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'CHANNEL_P',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'CHANNEL',0,4
	.word	461
	.byte	3,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	8,16,2,35,0,11
	.byte	'SET_INT_MOD',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'reserved_17',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'SET_INT_TRC',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'CLR_INT_TRC',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'TRC_MOD_P',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'TRC_MOD',0,4
	.word	461
	.byte	2,9,2,35,0,11
	.byte	'reserved_23',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'INT_MOD',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'INT_TRC',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'reserved_26',0,4
	.word	461
	.byte	6,0,2,35,0,0,20
	.byte	'Ifx_CBS_INTMOD_Bits',0,33,174,1,3
	.word	104693
	.byte	10
	.byte	'_Ifx_CBS_IOSR_Bits',0,33,177,1,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'CRSYNC',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'CWSYNC',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'CW_ACK',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'COM_SYNC',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'HOSTED',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	461
	.byte	3,20,2,35,0,11
	.byte	'CHANNEL',0,4
	.word	461
	.byte	3,17,2,35,0,11
	.byte	'reserved_15',0,4
	.word	461
	.byte	17,0,2,35,0,0,20
	.byte	'Ifx_CBS_IOSR_Bits',0,33,188,1,3
	.word	105102
	.byte	10
	.byte	'_Ifx_CBS_JDPID_Bits',0,33,191,1,16,4,11
	.byte	'MOD_REV',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'MOD_TYPE',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'MOD_NUMBER',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_CBS_JDPID_Bits',0,33,196,1,3
	.word	105333
	.byte	10
	.byte	'_Ifx_CBS_JTAGID_Bits',0,33,199,1,16,4,11
	.byte	'JTAG_ID',0,4
	.word	461
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_CBS_JTAGID_Bits',0,33,202,1,3
	.word	105449
	.byte	10
	.byte	'_Ifx_CBS_OCNTRL_Bits',0,33,205,1,16,4,11
	.byte	'OC0_P',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'OC0',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'OC1_P',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'OC1',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'OC2_P',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'OC2',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'OC3_P',0,4
	.word	461
	.byte	1,25,2,35,0,11
	.byte	'OC3',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'OC4_P',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'OC4',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'OC5_P',0,4
	.word	461
	.byte	1,21,2,35,0,11
	.byte	'OC5',0,4
	.word	461
	.byte	1,20,2,35,0,11
	.byte	'WDTSUS_P',0,4
	.word	461
	.byte	1,19,2,35,0,11
	.byte	'WDTSUS',0,4
	.word	461
	.byte	1,18,2,35,0,11
	.byte	'STABLE_P',0,4
	.word	461
	.byte	1,17,2,35,0,11
	.byte	'STABLE',0,4
	.word	461
	.byte	1,16,2,35,0,11
	.byte	'OJC0_P',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'OJC0',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'OJC1_P',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'OJC1',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'OJC2_P',0,4
	.word	461
	.byte	1,11,2,35,0,11
	.byte	'OJC2',0,4
	.word	461
	.byte	1,10,2,35,0,11
	.byte	'OJC3_P',0,4
	.word	461
	.byte	1,9,2,35,0,11
	.byte	'OJC3',0,4
	.word	461
	.byte	1,8,2,35,0,11
	.byte	'OJC4_P',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'OJC4',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'OJC5_P',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'OJC5',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'OJC6_P',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'OJC6',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'OJC7_P',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'OJC7',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CBS_OCNTRL_Bits',0,33,239,1,3
	.word	105525
	.byte	10
	.byte	'_Ifx_CBS_OEC_Bits',0,33,242,1,16,4,11
	.byte	'PAT',0,4
	.word	461
	.byte	8,24,2,35,0,11
	.byte	'DS',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'OCO',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	461
	.byte	6,16,2,35,0,11
	.byte	'IF_LCK_P',0,4
	.word	461
	.byte	1,15,2,35,0,11
	.byte	'IF_LCK',0,4
	.word	461
	.byte	1,14,2,35,0,11
	.byte	'AUT_OK_P',0,4
	.word	461
	.byte	1,13,2,35,0,11
	.byte	'AUT_OK',0,4
	.word	461
	.byte	1,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	461
	.byte	12,0,2,35,0,0,20
	.byte	'Ifx_CBS_OEC_Bits',0,33,253,1,3
	.word	106122
	.byte	10
	.byte	'_Ifx_CBS_OIFM_Bits',0,33,128,2,16,4,11
	.byte	'DAPMODE',0,4
	.word	461
	.byte	3,29,2,35,0,11
	.byte	'DAPRST',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'F_JTAG',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'N_JTAG',0,4
	.word	461
	.byte	1,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	461
	.byte	2,20,2,35,0,11
	.byte	'PADCTL',0,4
	.word	461
	.byte	2,18,2,35,0,11
	.byte	'PADCTLI',0,4
	.word	461
	.byte	2,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_CBS_OIFM_Bits',0,33,139,2,3
	.word	106339
	.byte	10
	.byte	'_Ifx_CBS_OSTATE_Bits',0,33,142,2,16,4,11
	.byte	'OEN',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'OC0',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'OC1',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'OC2',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'ENIDIS',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'EECTRC',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'EECDIS',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'WDTSUS',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'HARR',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'OJC1',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'OJC2',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'OJC3',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'RSTCL0',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'RSTCL1',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'OJC6',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'RSTCL3',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'IF_LCK',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'AUT_OK',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'STABLE',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'OCO',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	630
	.byte	12,0,2,35,2,0,20
	.byte	'Ifx_CBS_OSTATE_Bits',0,33,165,2,3
	.word	106570
	.byte	10
	.byte	'_Ifx_CBS_TCCB_Bits',0,33,168,2,16,4,11
	.byte	'C0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'C1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'C2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'C3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'C4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'C5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	438
	.byte	25,1,2,35,0,11
	.byte	'HSM',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_CBS_TCCB_Bits',0,33,178,2,3
	.word	106985
	.byte	10
	.byte	'_Ifx_CBS_TCCH_Bits',0,33,181,2,16,4,11
	.byte	'C0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'C1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'C2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'C3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'C4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'C5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	438
	.byte	25,1,2,35,0,11
	.byte	'HSM',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_CBS_TCCH_Bits',0,33,191,2,3
	.word	107159
	.byte	10
	.byte	'_Ifx_CBS_TCIP_Bits',0,33,194,2,16,4,11
	.byte	'P0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'P2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'P3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'P4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'P5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'P6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'P7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	438
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_CBS_TCIP_Bits',0,33,205,2,3
	.word	107333
	.byte	10
	.byte	'_Ifx_CBS_TCM_Bits',0,33,208,2,16,4,11
	.byte	'BRK',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'SUS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	6,0,2,35,0,11
	.byte	'T0',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'T1',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'T2',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'T3',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	438
	.byte	20,0,2,35,0,0,20
	.byte	'Ifx_CBS_TCM_Bits',0,33,218,2,3
	.word	107520
	.byte	10
	.byte	'_Ifx_CBS_TCTGB_Bits',0,33,221,2,16,4,11
	.byte	'OTGB0',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'OTGB1',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_CBS_TCTGB_Bits',0,33,225,2,3
	.word	107702
	.byte	10
	.byte	'_Ifx_CBS_TCTL_Bits',0,33,228,2,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TL1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TL2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'TL3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'TL4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'TL5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'TL6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'TL7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	438
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_CBS_TCTL_Bits',0,33,239,2,3
	.word	107791
	.byte	10
	.byte	'_Ifx_CBS_TIPR_Bits',0,33,242,2,16,4,11
	.byte	'PIN0',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'PIN1',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'PIN2',0,4
	.word	461
	.byte	4,20,2,35,0,11
	.byte	'PIN3',0,4
	.word	461
	.byte	4,16,2,35,0,11
	.byte	'PIN4',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'PIN5',0,4
	.word	461
	.byte	4,8,2,35,0,11
	.byte	'PIN6',0,4
	.word	461
	.byte	4,4,2,35,0,11
	.byte	'PIN7',0,4
	.word	461
	.byte	4,0,2,35,0,0,20
	.byte	'Ifx_CBS_TIPR_Bits',0,33,252,2,3
	.word	107993
	.byte	10
	.byte	'_Ifx_CBS_TL1ST_Bits',0,33,255,2,16,4,11
	.byte	'C0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'C1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'C2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'C3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'C4',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'C5',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	461
	.byte	18,8,2,35,0,11
	.byte	'M0',0,4
	.word	461
	.byte	1,7,2,35,0,11
	.byte	'M1',0,4
	.word	461
	.byte	1,6,2,35,0,11
	.byte	'M2',0,4
	.word	461
	.byte	1,5,2,35,0,11
	.byte	'HSS1',0,4
	.word	461
	.byte	1,4,2,35,0,11
	.byte	'HSS0',0,4
	.word	461
	.byte	1,3,2,35,0,11
	.byte	'DMA',0,4
	.word	461
	.byte	1,2,2,35,0,11
	.byte	'DMA1',0,4
	.word	461
	.byte	1,1,2,35,0,11
	.byte	'HSM',0,4
	.word	461
	.byte	1,0,2,35,0,0,20
	.byte	'Ifx_CBS_TL1ST_Bits',0,33,144,3,3
	.word	108174
	.byte	10
	.byte	'_Ifx_CBS_TLC_Bits',0,33,147,3,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'TLSP1',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'TLSP2',0,4
	.word	461
	.byte	4,20,2,35,0,11
	.byte	'TLSP3',0,4
	.word	461
	.byte	4,16,2,35,0,11
	.byte	'TLSP4',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'TLSP5',0,4
	.word	461
	.byte	4,8,2,35,0,11
	.byte	'TLSP6',0,4
	.word	461
	.byte	4,4,2,35,0,11
	.byte	'TLSP7',0,4
	.word	461
	.byte	4,0,2,35,0,0,20
	.byte	'Ifx_CBS_TLC_Bits',0,33,157,3,3
	.word	108455
	.byte	10
	.byte	'_Ifx_CBS_TLCC_Bits',0,33,160,3,16,4,11
	.byte	'TGL',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'LE',0,4
	.word	461
	.byte	3,25,2,35,0,11
	.byte	'reserved_7',0,4
	.word	461
	.byte	1,24,2,35,0,11
	.byte	'CLR',0,4
	.word	461
	.byte	2,22,2,35,0,11
	.byte	'reserved_10',0,4
	.word	461
	.byte	2,20,2,35,0,11
	.byte	'STOP',0,4
	.word	461
	.byte	2,18,2,35,0,11
	.byte	'reserved_14',0,4
	.word	461
	.byte	18,0,2,35,0,0,20
	.byte	'Ifx_CBS_TLCC_Bits',0,33,169,3,3
	.word	108647
	.byte	10
	.byte	'_Ifx_CBS_TLCHE_Bits',0,33,172,3,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'TL1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'TL2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'TL3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	461
	.byte	28,0,2,35,0,0,20
	.byte	'Ifx_CBS_TLCHE_Bits',0,33,179,3,3
	.word	108828
	.byte	10
	.byte	'_Ifx_CBS_TLCHS_Bits',0,33,182,3,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	1,31,2,35,0,11
	.byte	'TL1',0,4
	.word	461
	.byte	1,30,2,35,0,11
	.byte	'TL2',0,4
	.word	461
	.byte	1,29,2,35,0,11
	.byte	'TL3',0,4
	.word	461
	.byte	1,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	461
	.byte	28,0,2,35,0,0,20
	.byte	'Ifx_CBS_TLCHS_Bits',0,33,189,3,3
	.word	108972
	.byte	10
	.byte	'_Ifx_CBS_TLCV_Bits',0,33,192,3,16,4,11
	.byte	'CV',0,4
	.word	438
	.byte	31,1,2,35,0,11
	.byte	'SO',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_CBS_TLCV_Bits',0,33,196,3,3
	.word	109116
	.byte	10
	.byte	'_Ifx_CBS_TLS_Bits',0,33,199,3,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TL1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TL2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'TL3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'TL4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'TL5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'TL6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'TL7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	438
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_CBS_TLS_Bits',0,33,210,3,3
	.word	109197
	.byte	10
	.byte	'_Ifx_CBS_TLT_Bits',0,33,213,3,16,4,11
	.byte	'TGL',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'VTZ',0,4
	.word	461
	.byte	1,27,2,35,0,11
	.byte	'RL',0,4
	.word	461
	.byte	1,26,2,35,0,11
	.byte	'reserved_6',0,4
	.word	461
	.byte	10,16,2,35,0,11
	.byte	'TIM',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_CBS_TLT_Bits',0,33,220,3,3
	.word	109397
	.byte	10
	.byte	'_Ifx_CBS_TLTTH_Bits',0,33,223,3,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	2,30,2,35,0,11
	.byte	'TL1',0,4
	.word	461
	.byte	2,28,2,35,0,11
	.byte	'TL2',0,4
	.word	461
	.byte	2,26,2,35,0,11
	.byte	'TL3',0,4
	.word	461
	.byte	2,24,2,35,0,11
	.byte	'TL4',0,4
	.word	461
	.byte	2,22,2,35,0,11
	.byte	'TL5',0,4
	.word	461
	.byte	2,20,2,35,0,11
	.byte	'TL6',0,4
	.word	461
	.byte	2,18,2,35,0,11
	.byte	'TL7',0,4
	.word	461
	.byte	2,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_CBS_TLTTH_Bits',0,33,234,3,3
	.word	109529
	.byte	10
	.byte	'_Ifx_CBS_TOPPS_Bits',0,33,237,3,16,4,11
	.byte	'PIN0',0,4
	.word	461
	.byte	2,30,2,35,0,11
	.byte	'PIN1',0,4
	.word	461
	.byte	2,28,2,35,0,11
	.byte	'PIN2',0,4
	.word	461
	.byte	2,26,2,35,0,11
	.byte	'PIN3',0,4
	.word	461
	.byte	2,24,2,35,0,11
	.byte	'PIN4',0,4
	.word	461
	.byte	2,22,2,35,0,11
	.byte	'PIN5',0,4
	.word	461
	.byte	2,20,2,35,0,11
	.byte	'PIN6',0,4
	.word	461
	.byte	2,18,2,35,0,11
	.byte	'PIN7',0,4
	.word	461
	.byte	2,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_CBS_TOPPS_Bits',0,33,248,3,3
	.word	109734
	.byte	10
	.byte	'_Ifx_CBS_TOPR_Bits',0,33,251,3,16,4,11
	.byte	'PIN0',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'PIN1',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'PIN2',0,4
	.word	461
	.byte	4,20,2,35,0,11
	.byte	'PIN3',0,4
	.word	461
	.byte	4,16,2,35,0,11
	.byte	'PIN4',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'PIN5',0,4
	.word	461
	.byte	4,8,2,35,0,11
	.byte	'PIN6',0,4
	.word	461
	.byte	4,4,2,35,0,11
	.byte	'PIN7',0,4
	.word	461
	.byte	4,0,2,35,0,0,20
	.byte	'Ifx_CBS_TOPR_Bits',0,33,133,4,3
	.word	109940
	.byte	10
	.byte	'_Ifx_CBS_TRC_Bits',0,33,136,4,16,4,11
	.byte	'HALT',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'BRKOUT',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'BT1',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	461
	.byte	11,12,2,35,0,11
	.byte	'BRKIN',0,4
	.word	461
	.byte	4,8,2,35,0,11
	.byte	'SUSIN',0,4
	.word	461
	.byte	4,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	461
	.byte	4,0,2,35,0,0,20
	.byte	'Ifx_CBS_TRC_Bits',0,33,145,4,3
	.word	110121
	.byte	10
	.byte	'_Ifx_CBS_TREC_Bits',0,33,148,4,16,4,11
	.byte	'TR0EV',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'reserved_4',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'TR2EV',0,4
	.word	461
	.byte	4,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	461
	.byte	4,16,2,35,0,11
	.byte	'TR4EV',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'reserved_20',0,4
	.word	461
	.byte	4,8,2,35,0,11
	.byte	'TR6EV',0,4
	.word	461
	.byte	4,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	461
	.byte	4,0,2,35,0,0,20
	.byte	'Ifx_CBS_TREC_Bits',0,33,158,4,3
	.word	110300
	.byte	10
	.byte	'_Ifx_CBS_TRHSM_Bits',0,33,161,4,16,4,11
	.byte	'HALT',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'BRKOUT',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'BT1',0,4
	.word	461
	.byte	1,23,2,35,0,11
	.byte	'reserved_9',0,4
	.word	461
	.byte	11,12,2,35,0,11
	.byte	'BRKIN',0,4
	.word	461
	.byte	4,8,2,35,0,11
	.byte	'SUSIN',0,4
	.word	461
	.byte	4,4,2,35,0,11
	.byte	'reserved_28',0,4
	.word	461
	.byte	4,0,2,35,0,0,20
	.byte	'Ifx_CBS_TRHSM_Bits',0,33,170,4,3
	.word	110512
	.byte	10
	.byte	'_Ifx_CBS_TRIG_Bits',0,33,173,4,16,4,11
	.byte	'TRGX_0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TRGX_1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TRGX_2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'TRGX_3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'TRGX_4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'TRGX_5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'TRGX_6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'TRGX_7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'TRGX_8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'TRGX_9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'TRGX_10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'TRGX_11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'TRGX_12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'TRGX_13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'TRGX_14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'TRGX_15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	613
	.byte	8,0,2,35,2,11
	.byte	'X',0,1
	.word	613
	.byte	8,0,2,35,3,0,20
	.byte	'Ifx_CBS_TRIG_Bits',0,33,193,4,3
	.word	110695
	.byte	10
	.byte	'_Ifx_CBS_TRIGC_Bits',0,33,196,4,16,4,11
	.byte	'TRGX_0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TRGX_1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TRGX_2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'TRGX_3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'TRGX_4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'TRGX_5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'TRGX_6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'TRGX_7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'TRGX_8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'TRGX_9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'TRGX_10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'TRGX_11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'TRGX_12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'TRGX_13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'TRGX_14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'TRGX_15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	613
	.byte	8,0,2,35,2,11
	.byte	'X',0,1
	.word	613
	.byte	8,0,2,35,3,0,20
	.byte	'Ifx_CBS_TRIGC_Bits',0,33,216,4,3
	.word	111078
	.byte	10
	.byte	'_Ifx_CBS_TRIGS_Bits',0,33,219,4,16,4,11
	.byte	'BITNUM',0,4
	.word	461
	.byte	8,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_CBS_TRIGS_Bits',0,33,223,4,3
	.word	111463
	.byte	10
	.byte	'_Ifx_CBS_TRMC_Bits',0,33,226,4,16,4,11
	.byte	'reserved_0',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'BRKOUT',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'SUSOUT',0,4
	.word	461
	.byte	4,20,2,35,0,11
	.byte	'reserved_12',0,4
	.word	461
	.byte	4,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'BRKIN',0,4
	.word	461
	.byte	4,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	461
	.byte	8,0,2,35,0,0,20
	.byte	'Ifx_CBS_TRMC_Bits',0,33,235,4,3
	.word	111558
	.byte	10
	.byte	'_Ifx_CBS_TRMT_Bits',0,33,238,4,16,4,11
	.byte	'TG0',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'TG1',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'TG2',0,4
	.word	461
	.byte	4,20,2,35,0,11
	.byte	'TG3',0,4
	.word	461
	.byte	4,16,2,35,0,11
	.byte	'reserved_16',0,4
	.word	461
	.byte	16,0,2,35,0,0,20
	.byte	'Ifx_CBS_TRMT_Bits',0,33,245,4,3
	.word	111755
	.byte	10
	.byte	'_Ifx_CBS_TRSS_Bits',0,33,248,4,16,4,11
	.byte	'TT',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'IFS',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'reserved_8',0,4
	.word	461
	.byte	8,16,2,35,0,11
	.byte	'SRC0',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'SRC1',0,4
	.word	461
	.byte	4,8,2,35,0,11
	.byte	'reserved_24',0,4
	.word	461
	.byte	8,0,2,35,0,0,20
	.byte	'Ifx_CBS_TRSS_Bits',0,33,128,5,3
	.word	111891
	.byte	10
	.byte	'_Ifx_CBS_TRTGB_H_Bits',0,33,131,5,16,4,11
	.byte	'TG8',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'TG9',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'TG10',0,4
	.word	461
	.byte	4,20,2,35,0,11
	.byte	'TG11',0,4
	.word	461
	.byte	4,16,2,35,0,11
	.byte	'TG12',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'TG13',0,4
	.word	461
	.byte	4,8,2,35,0,11
	.byte	'TG14',0,4
	.word	461
	.byte	4,4,2,35,0,11
	.byte	'TG15',0,4
	.word	461
	.byte	4,0,2,35,0,0,20
	.byte	'Ifx_CBS_TRTGB_H_Bits',0,33,141,5,3
	.word	112050
	.byte	10
	.byte	'_Ifx_CBS_TRTGB_L_Bits',0,33,144,5,16,4,11
	.byte	'TG0',0,4
	.word	461
	.byte	4,28,2,35,0,11
	.byte	'TG1',0,4
	.word	461
	.byte	4,24,2,35,0,11
	.byte	'TG2',0,4
	.word	461
	.byte	4,20,2,35,0,11
	.byte	'TG3',0,4
	.word	461
	.byte	4,16,2,35,0,11
	.byte	'TG4',0,4
	.word	461
	.byte	4,12,2,35,0,11
	.byte	'TG5',0,4
	.word	461
	.byte	4,8,2,35,0,11
	.byte	'TG6',0,4
	.word	461
	.byte	4,4,2,35,0,11
	.byte	'TG7',0,4
	.word	461
	.byte	4,0,2,35,0,0,20
	.byte	'Ifx_CBS_TRTGB_L_Bits',0,33,154,5,3
	.word	112235
	.byte	12,33,162,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	103482
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_ACCEN0',0,33,167,5,3
	.word	112414
	.byte	12,33,170,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104039
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_ACCEN1',0,33,175,5,3
	.word	112478
	.byte	12,33,178,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104116
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_COMDATA',0,33,183,5,3
	.word	112542
	.byte	12,33,186,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104189
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_ICTSA',0,33,191,5,3
	.word	112607
	.byte	12,33,194,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104258
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_ICTTA',0,33,199,5,3
	.word	112670
	.byte	12,33,202,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104327
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_IFSA',0,33,207,5,3
	.word	112733
	.byte	12,33,210,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104396
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_IFSC',0,33,215,5,3
	.word	112795
	.byte	12,33,218,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	104693
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_INTMOD',0,33,223,5,3
	.word	112857
	.byte	12,33,226,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	105102
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_IOSR',0,33,231,5,3
	.word	112921
	.byte	12,33,234,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	105333
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_JDPID',0,33,239,5,3
	.word	112983
	.byte	12,33,242,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	105449
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_JTAGID',0,33,247,5,3
	.word	113046
	.byte	12,33,250,5,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	105525
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_OCNTRL',0,33,255,5,3
	.word	113110
	.byte	12,33,130,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	106122
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_OEC',0,33,135,6,3
	.word	113174
	.byte	12,33,138,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	106339
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_OIFM',0,33,143,6,3
	.word	113235
	.byte	12,33,146,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	106570
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_OSTATE',0,33,151,6,3
	.word	113297
	.byte	12,33,154,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	106985
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TCCB',0,33,159,6,3
	.word	113361
	.byte	12,33,162,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107159
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TCCH',0,33,167,6,3
	.word	113423
	.byte	12,33,170,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107333
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TCIP',0,33,175,6,3
	.word	113485
	.byte	12,33,178,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107520
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TCM',0,33,183,6,3
	.word	113547
	.byte	12,33,186,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107702
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TCTGB',0,33,191,6,3
	.word	113608
	.byte	12,33,194,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107791
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TCTL',0,33,199,6,3
	.word	113671
	.byte	12,33,202,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	107993
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TIPR',0,33,207,6,3
	.word	113733
	.byte	12,33,210,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108174
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TL1ST',0,33,215,6,3
	.word	113795
	.byte	12,33,218,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108455
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TLC',0,33,223,6,3
	.word	113858
	.byte	12,33,226,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108647
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TLCC',0,33,231,6,3
	.word	113919
	.byte	12,33,234,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108828
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TLCHE',0,33,239,6,3
	.word	113981
	.byte	12,33,242,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	108972
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TLCHS',0,33,247,6,3
	.word	114044
	.byte	12,33,250,6,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109116
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TLCV',0,33,255,6,3
	.word	114107
	.byte	12,33,130,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109197
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TLS',0,33,135,7,3
	.word	114169
	.byte	12,33,138,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109397
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TLT',0,33,143,7,3
	.word	114230
	.byte	12,33,146,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109529
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TLTTH',0,33,151,7,3
	.word	114291
	.byte	12,33,154,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109734
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TOPPS',0,33,159,7,3
	.word	114354
	.byte	12,33,162,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	109940
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TOPR',0,33,167,7,3
	.word	114417
	.byte	12,33,170,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110121
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TRC',0,33,175,7,3
	.word	114479
	.byte	12,33,178,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110300
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TREC',0,33,183,7,3
	.word	114540
	.byte	12,33,186,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110512
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TRHSM',0,33,191,7,3
	.word	114602
	.byte	12,33,194,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	110695
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TRIG',0,33,199,7,3
	.word	114665
	.byte	12,33,202,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111078
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TRIGC',0,33,207,7,3
	.word	114727
	.byte	12,33,210,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111463
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TRIGS',0,33,215,7,3
	.word	114790
	.byte	12,33,218,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111558
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TRMC',0,33,223,7,3
	.word	114853
	.byte	12,33,226,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111755
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TRMT',0,33,231,7,3
	.word	114915
	.byte	12,33,234,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	111891
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TRSS',0,33,239,7,3
	.word	114977
	.byte	12,33,242,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	112050
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TRTGB_H',0,33,247,7,3
	.word	115039
	.byte	12,33,250,7,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	112235
	.byte	4,2,35,0,0,20
	.byte	'Ifx_CBS_TRTGB_L',0,33,255,7,3
	.word	115104
	.byte	10
	.byte	'_Ifx_CBS_TRTGB',0,33,139,8,25,8,13
	.byte	'L',0
	.word	115104
	.byte	4,2,35,0,13
	.byte	'H',0
	.word	115039
	.byte	4,2,35,4,0,14
	.word	115169
	.byte	20
	.byte	'Ifx_CBS_TRTGB',0,33,143,8,3
	.word	115213
	.byte	20
	.byte	'IfxStm_Comparator',0,13,161,1,3
	.word	19152
	.byte	17,13,165,1,9,1,18
	.byte	'IfxStm_ComparatorInterrupt_ir0',0,0,18
	.byte	'IfxStm_ComparatorInterrupt_ir1',0,1,0,20
	.byte	'IfxStm_ComparatorInterrupt',0,13,169,1,3
	.word	115268
	.byte	17,13,173,1,9,1,18
	.byte	'IfxStm_ComparatorOffset_0',0,0,18
	.byte	'IfxStm_ComparatorOffset_1',0,1,18
	.byte	'IfxStm_ComparatorOffset_2',0,2,18
	.byte	'IfxStm_ComparatorOffset_3',0,3,18
	.byte	'IfxStm_ComparatorOffset_4',0,4,18
	.byte	'IfxStm_ComparatorOffset_5',0,5,18
	.byte	'IfxStm_ComparatorOffset_6',0,6,18
	.byte	'IfxStm_ComparatorOffset_7',0,7,18
	.byte	'IfxStm_ComparatorOffset_8',0,8,18
	.byte	'IfxStm_ComparatorOffset_9',0,9,18
	.byte	'IfxStm_ComparatorOffset_10',0,10,18
	.byte	'IfxStm_ComparatorOffset_11',0,11,18
	.byte	'IfxStm_ComparatorOffset_12',0,12,18
	.byte	'IfxStm_ComparatorOffset_13',0,13,18
	.byte	'IfxStm_ComparatorOffset_14',0,14,18
	.byte	'IfxStm_ComparatorOffset_15',0,15,18
	.byte	'IfxStm_ComparatorOffset_16',0,16,18
	.byte	'IfxStm_ComparatorOffset_17',0,17,18
	.byte	'IfxStm_ComparatorOffset_18',0,18,18
	.byte	'IfxStm_ComparatorOffset_19',0,19,18
	.byte	'IfxStm_ComparatorOffset_20',0,20,18
	.byte	'IfxStm_ComparatorOffset_21',0,21,18
	.byte	'IfxStm_ComparatorOffset_22',0,22,18
	.byte	'IfxStm_ComparatorOffset_23',0,23,18
	.byte	'IfxStm_ComparatorOffset_24',0,24,18
	.byte	'IfxStm_ComparatorOffset_25',0,25,18
	.byte	'IfxStm_ComparatorOffset_26',0,26,18
	.byte	'IfxStm_ComparatorOffset_27',0,27,18
	.byte	'IfxStm_ComparatorOffset_28',0,28,18
	.byte	'IfxStm_ComparatorOffset_29',0,29,18
	.byte	'IfxStm_ComparatorOffset_30',0,30,18
	.byte	'IfxStm_ComparatorOffset_31',0,31,0,20
	.byte	'IfxStm_ComparatorOffset',0,13,207,1,3
	.word	115377
	.byte	17,13,211,1,9,1,18
	.byte	'IfxStm_ComparatorSize_1Bit',0,0,18
	.byte	'IfxStm_ComparatorSize_2Bits',0,1,18
	.byte	'IfxStm_ComparatorSize_3Bits',0,2,18
	.byte	'IfxStm_ComparatorSize_4Bits',0,3,18
	.byte	'IfxStm_ComparatorSize_5Bits',0,4,18
	.byte	'IfxStm_ComparatorSize_6Bits',0,5,18
	.byte	'IfxStm_ComparatorSize_7Bits',0,6,18
	.byte	'IfxStm_ComparatorSize_8Bits',0,7,18
	.byte	'IfxStm_ComparatorSize_9Bits',0,8,18
	.byte	'IfxStm_ComparatorSize_10Bits',0,9,18
	.byte	'IfxStm_ComparatorSize_11Bits',0,10,18
	.byte	'IfxStm_ComparatorSize_12Bits',0,11,18
	.byte	'IfxStm_ComparatorSize_13Bits',0,12,18
	.byte	'IfxStm_ComparatorSize_14Bits',0,13,18
	.byte	'IfxStm_ComparatorSize_15Bits',0,14,18
	.byte	'IfxStm_ComparatorSize_16Bits',0,15,18
	.byte	'IfxStm_ComparatorSize_17Bits',0,16,18
	.byte	'IfxStm_ComparatorSize_18Bits',0,17,18
	.byte	'IfxStm_ComparatorSize_19Bits',0,18,18
	.byte	'IfxStm_ComparatorSize_20Bits',0,19,18
	.byte	'IfxStm_ComparatorSize_21Bits',0,20,18
	.byte	'IfxStm_ComparatorSize_22Bits',0,21,18
	.byte	'IfxStm_ComparatorSize_23Bits',0,22,18
	.byte	'IfxStm_ComparatorSize_24Bits',0,23,18
	.byte	'IfxStm_ComparatorSize_25Bits',0,24,18
	.byte	'IfxStm_ComparatorSize_26Bits',0,25,18
	.byte	'IfxStm_ComparatorSize_27Bits',0,26,18
	.byte	'IfxStm_ComparatorSize_28Bits',0,27,18
	.byte	'IfxStm_ComparatorSize_29Bits',0,28,18
	.byte	'IfxStm_ComparatorSize_30Bits',0,29,18
	.byte	'IfxStm_ComparatorSize_31Bits',0,30,18
	.byte	'IfxStm_ComparatorSize_32Bits',0,31,0,20
	.byte	'IfxStm_ComparatorSize',0,13,245,1,3
	.word	116335
	.byte	17,13,250,1,9,1,18
	.byte	'IfxStm_SleepMode_enable',0,0,18
	.byte	'IfxStm_SleepMode_disable',0,1,0,20
	.byte	'IfxStm_SleepMode',0,13,254,1,3
	.word	117355
	.byte	20
	.byte	'IfxStm_SuspendMode',0,13,135,2,3
	.word	14220
	.byte	20
	.byte	'IfxStdIf_Timer_CountDir',0,16,90,3
	.word	18947
	.byte	20
	.byte	'IfxStdIf_Timer',0,16,93,32
	.word	15551
	.byte	20
	.byte	'IfxStdIf_Timer_TrigConfig',0,16,141,2,3
	.word	19937
	.byte	20
	.byte	'IfxStdIf_Timer_Config',0,16,153,2,3
	.word	20118
	.byte	20
	.byte	'IfxStm_Timer_Base',0,21,133,1,3
	.word	19049
	.byte	20
	.byte	'IfxStm_Timer',0,21,148,1,3
	.word	19203
	.byte	20
	.byte	'IfxStm_Timer_Config',0,21,157,1,3
	.word	20265
	.byte	10
	.byte	'_Ifx_GETH_ACCEN0_Bits',0,34,73,16,4,11
	.byte	'EN0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_ACCEN0_Bits',0,34,107,3
	.word	117668
	.byte	10
	.byte	'_Ifx_GETH_ACCEN1_Bits',0,34,110,16,4,11
	.byte	'reserved_0',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_ACCEN1_Bits',0,34,113,3
	.word	118227
	.byte	10
	.byte	'_Ifx_GETH_ACCEND_ACCEN0D_Bits',0,34,116,16,4,11
	.byte	'EN0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_ACCEND_ACCEN0D_Bits',0,34,150,1,3
	.word	118306
	.byte	10
	.byte	'_Ifx_GETH_ACCEND_ACCEN1D_Bits',0,34,153,1,16,4,11
	.byte	'reserved_0',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_ACCEND_ACCEN1D_Bits',0,34,156,1,3
	.word	118882
	.byte	10
	.byte	'_Ifx_GETH_CLC_Bits',0,34,159,1,16,4,11
	.byte	'DISR',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	438
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_GETH_CLC_Bits',0,34,164,1,3
	.word	118979
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_CONTROL_Bits',0,34,167,1,16,4,11
	.byte	'reserved_0',0,2
	.word	630
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	613
	.byte	2,0,2,35,1,11
	.byte	'PBLX8',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'DSL',0,1
	.word	613
	.byte	3,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	613
	.byte	3,0,2,35,2,11
	.byte	'SPH',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	613
	.byte	7,0,2,35,3,0,20
	.byte	'Ifx_GETH_DMA_CH_CONTROL_Bits',0,34,177,1,3
	.word	119086
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_CURRENT_APP_RXBUFFER_Bits',0,34,180,1,16,4,11
	.byte	'CURRBUFAPTR',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_CURRENT_APP_RXBUFFER_Bits',0,34,183,1,3
	.word	119322
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_CURRENT_APP_RXDESC_Bits',0,34,186,1,16,4,11
	.byte	'CURRDESAPTR',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_CURRENT_APP_RXDESC_Bits',0,34,189,1,3
	.word	119446
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_CURRENT_APP_TXBUFFER_Bits',0,34,192,1,16,4,11
	.byte	'CURTBUFAPTR',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_CURRENT_APP_TXBUFFER_Bits',0,34,195,1,3
	.word	119566
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_CURRENT_APP_TXDESC_Bits',0,34,198,1,16,4,11
	.byte	'CURTDESAPTR',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_CURRENT_APP_TXDESC_Bits',0,34,201,1,3
	.word	119690
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_INTERRUPT_ENABLE_Bits',0,34,204,1,16,4,11
	.byte	'TIE',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TXSE',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TBUE',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	3,2,2,35,0,11
	.byte	'RIE',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'RBUE',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'RSE',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'RWTE',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'ETIE',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'ERIE',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'FBEE',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'CDEE',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'AIE',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'NIE',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_DMA_CH_INTERRUPT_ENABLE_Bits',0,34,221,1,3
	.word	119810
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_MISS_FRAME_CNT_Bits',0,34,224,1,16,4,11
	.byte	'MFC',0,2
	.word	630
	.byte	11,5,2,35,0,11
	.byte	'reserved_11',0,1
	.word	613
	.byte	4,1,2,35,1,11
	.byte	'MFCO',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_DMA_CH_MISS_FRAME_CNT_Bits',0,34,230,1,3
	.word	120151
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_RXDESC_LIST_ADDRESS_Bits',0,34,233,1,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'RDESLA',0,4
	.word	438
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_RXDESC_LIST_ADDRESS_Bits',0,34,237,1,3
	.word	120317
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_RXDESC_RING_LENGTH_Bits',0,34,240,1,16,4,11
	.byte	'RDRL',0,2
	.word	630
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,4
	.word	438
	.byte	22,0,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_RXDESC_RING_LENGTH_Bits',0,34,244,1,3
	.word	120456
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_RXDESC_TAIL_POINTER_Bits',0,34,247,1,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'RDTP',0,4
	.word	438
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_RXDESC_TAIL_POINTER_Bits',0,34,251,1,3
	.word	120592
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_RX_CONTROL_Bits',0,34,254,1,16,4,11
	.byte	'SR',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'RBSZ_X_0',0,1
	.word	613
	.byte	2,5,2,35,0,11
	.byte	'RBSZ_13_Y',0,2
	.word	630
	.byte	12,1,2,35,0,11
	.byte	'reserved_15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'RXPBL',0,1
	.word	613
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	613
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	3,1,2,35,3,11
	.byte	'RPF',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_DMA_CH_RX_CONTROL_Bits',0,34,137,2,3
	.word	120729
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_RX_INTERRUPT_WATCHDOG_TIMER_Bits',0,34,140,2,16,4,11
	.byte	'RWT',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'RWTU',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	630
	.byte	14,0,2,35,2,0,20
	.byte	'Ifx_GETH_DMA_CH_RX_INTERRUPT_WATCHDOG_TIMER_Bits',0,34,146,2,3
	.word	120989
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_SLOT_FUNCTION_CONTROL_STATUS_Bits',0,34,149,2,16,4,11
	.byte	'ESC',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'ASC',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'SIV',0,2
	.word	630
	.byte	12,0,2,35,0,11
	.byte	'RSN',0,1
	.word	613
	.byte	4,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	630
	.byte	12,0,2,35,2,0,20
	.byte	'Ifx_GETH_DMA_CH_SLOT_FUNCTION_CONTROL_STATUS_Bits',0,34,157,2,3
	.word	121180
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_STATUS_Bits',0,34,160,2,16,4,11
	.byte	'TI',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TPS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TBU',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	3,2,2,35,0,11
	.byte	'RI',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'RBU',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'RPS',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'RWT',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'ETI',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'ERI',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'FBE',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'CDE',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'AIS',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'NIS',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'TEB',0,1
	.word	613
	.byte	3,5,2,35,2,11
	.byte	'REB',0,1
	.word	613
	.byte	3,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	630
	.byte	10,0,2,35,2,0,20
	.byte	'Ifx_GETH_DMA_CH_STATUS_Bits',0,34,179,2,3
	.word	121402
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_TXDESC_LIST_ADDRESS_Bits',0,34,182,2,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'TDESLA',0,4
	.word	438
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_TXDESC_LIST_ADDRESS_Bits',0,34,186,2,3
	.word	121743
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_TXDESC_RING_LENGTH_Bits',0,34,189,2,16,4,11
	.byte	'TDRL',0,2
	.word	630
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,4
	.word	438
	.byte	22,0,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_TXDESC_RING_LENGTH_Bits',0,34,193,2,3
	.word	121882
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_TXDESC_TAIL_POINTER_Bits',0,34,196,2,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'TDTP',0,4
	.word	438
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_TXDESC_TAIL_POINTER_Bits',0,34,200,2,3
	.word	122018
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH_TX_CONTROL_Bits',0,34,203,2,16,4,11
	.byte	'ST',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TCW',0,1
	.word	613
	.byte	3,4,2,35,0,11
	.byte	'OSF',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,2
	.word	630
	.byte	7,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	613
	.byte	2,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'TXPBL',0,1
	.word	613
	.byte	6,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	613
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_GETH_DMA_CH_TX_CONTROL_Bits',0,34,216,2,3
	.word	122155
	.byte	10
	.byte	'_Ifx_GETH_DMA_DEBUG_STATUS0_Bits',0,34,219,2,16,4,11
	.byte	'AXWHSTS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	6,0,2,35,0,11
	.byte	'RPS0',0,1
	.word	613
	.byte	4,4,2,35,1,11
	.byte	'TPS0',0,1
	.word	613
	.byte	4,0,2,35,1,11
	.byte	'RPS1',0,1
	.word	613
	.byte	4,4,2,35,2,11
	.byte	'TPS1',0,1
	.word	613
	.byte	4,0,2,35,2,11
	.byte	'RPS2',0,1
	.word	613
	.byte	4,4,2,35,3,11
	.byte	'TPS2',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_GETH_DMA_DEBUG_STATUS0_Bits',0,34,230,2,3
	.word	122457
	.byte	10
	.byte	'_Ifx_GETH_DMA_DEBUG_STATUS1_Bits',0,34,233,2,16,4,11
	.byte	'RPS3',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'TPS3',0,1
	.word	613
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	438
	.byte	24,0,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_DEBUG_STATUS1_Bits',0,34,238,2,3
	.word	122697
	.byte	10
	.byte	'_Ifx_GETH_DMA_INTERRUPT_STATUS_Bits',0,34,241,2,16,4,11
	.byte	'DC0IS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'DC1IS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'DC2IS',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'DC3IS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'MTLIS',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'MACIS',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	630
	.byte	14,0,2,35,2,0,20
	.byte	'Ifx_GETH_DMA_INTERRUPT_STATUS_Bits',0,34,252,2,3
	.word	122832
	.byte	10
	.byte	'_Ifx_GETH_DMA_MODE_Bits',0,34,255,2,16,4,11
	.byte	'SWR',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'DA',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TAA',0,1
	.word	613
	.byte	3,3,2,35,0,11
	.byte	'reserved_5',0,2
	.word	630
	.byte	4,7,2,35,0,11
	.byte	'ARBC',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'TXPR',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'PR',0,1
	.word	613
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'INTM',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	630
	.byte	14,0,2,35,2,0,20
	.byte	'Ifx_GETH_DMA_MODE_Bits',0,34,140,3,3
	.word	123088
	.byte	10
	.byte	'_Ifx_GETH_DMA_SYSBUS_MODE_Bits',0,34,143,3,16,4,11
	.byte	'FB',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	613
	.byte	7,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	2,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	613
	.byte	2,4,2,35,1,11
	.byte	'AAL',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'MB',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'RB',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	613
	.byte	3,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	613
	.byte	5,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	613
	.byte	3,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	613
	.byte	2,0,2,35,3,0,20
	.byte	'Ifx_GETH_DMA_SYSBUS_MODE_Bits',0,34,158,3,3
	.word	123348
	.byte	10
	.byte	'_Ifx_GETH_GPCTL_Bits',0,34,161,3,16,4,11
	.byte	'ALTI0',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'ALTI1',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'ALTI2',0,1
	.word	613
	.byte	2,2,2,35,0,11
	.byte	'ALTI3',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'ALTI4',0,1
	.word	613
	.byte	2,6,2,35,1,11
	.byte	'ALTI5',0,1
	.word	613
	.byte	2,4,2,35,1,11
	.byte	'ALTI6',0,1
	.word	613
	.byte	2,2,2,35,1,11
	.byte	'ALTI7',0,1
	.word	613
	.byte	2,0,2,35,1,11
	.byte	'ALTI8',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'ALTI9',0,1
	.word	613
	.byte	2,4,2,35,2,11
	.byte	'ALTI10',0,1
	.word	613
	.byte	2,2,2,35,2,11
	.byte	'EPR',0,2
	.word	630
	.byte	3,7,2,35,2,11
	.byte	'reserved_25',0,1
	.word	613
	.byte	6,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_GPCTL_Bits',0,34,177,3,3
	.word	123687
	.byte	10
	.byte	'_Ifx_GETH_ID_Bits',0,34,180,3,16,4,11
	.byte	'MODREV',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'MODNUM',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_ID_Bits',0,34,185,3,3
	.word	123993
	.byte	10
	.byte	'_Ifx_GETH_KRST0_Bits',0,34,188,3,16,4,11
	.byte	'RST',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	438
	.byte	30,0,2,35,0,0,20
	.byte	'Ifx_GETH_KRST0_Bits',0,34,193,3,3
	.word	124099
	.byte	10
	.byte	'_Ifx_GETH_KRST1_Bits',0,34,196,3,16,4,11
	.byte	'RST',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	438
	.byte	31,0,2,35,0,0,20
	.byte	'Ifx_GETH_KRST1_Bits',0,34,200,3,3
	.word	124212
	.byte	10
	.byte	'_Ifx_GETH_KRSTCLR_Bits',0,34,203,3,16,4,11
	.byte	'CLR',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	438
	.byte	31,0,2,35,0,0,20
	.byte	'Ifx_GETH_KRSTCLR_Bits',0,34,207,3,3
	.word	124306
	.byte	10
	.byte	'_Ifx_GETH_MAC_1US_TIC_COUNTER_Bits',0,34,210,3,16,4,11
	.byte	'TIC_1US_CNTR',0,2
	.word	630
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	438
	.byte	20,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_1US_TIC_COUNTER_Bits',0,34,214,3,3
	.word	124404
	.byte	10
	.byte	'_Ifx_GETH_MAC_ADDRESS_HIGH_Bits',0,34,217,3,16,4,11
	.byte	'ADDRHI',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'DCS',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	613
	.byte	6,0,2,35,2,11
	.byte	'MBC',0,1
	.word	613
	.byte	6,2,2,35,3,11
	.byte	'SA',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'AE',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_ADDRESS_HIGH_Bits',0,34,225,3,3
	.word	124536
	.byte	10
	.byte	'_Ifx_GETH_MAC_ADDRESS_HIGH0_Bits',0,34,228,3,16,4,11
	.byte	'ADDRHI',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'DCS',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	630
	.byte	13,1,2,35,2,11
	.byte	'AE',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_ADDRESS_HIGH0_Bits',0,34,234,3,3
	.word	124714
	.byte	10
	.byte	'_Ifx_GETH_MAC_ADDRESS_LOW_Bits',0,34,237,3,16,4,11
	.byte	'ADDRLO',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_ADDRESS_LOW_Bits',0,34,240,3,3
	.word	124865
	.byte	10
	.byte	'_Ifx_GETH_MAC_ADDRESS_LOW0_Bits',0,34,243,3,16,4,11
	.byte	'ADDRLO',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_ADDRESS_LOW0_Bits',0,34,246,3,3
	.word	124960
	.byte	10
	.byte	'_Ifx_GETH_MAC_CONFIGURATION_Bits',0,34,249,3,16,4,11
	.byte	'RE',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TE',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'PRELEN',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'DC',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'BL',0,1
	.word	613
	.byte	2,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'DR',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'DCRS',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'DO',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'ECRSFD',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'LM',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'DM',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'FES',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'PS',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'JE',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'JD',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'BE',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'WD',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'ACS',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'CST',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'S2KP',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'GPSLCE',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'IPG',0,1
	.word	613
	.byte	3,5,2,35,3,11
	.byte	'IPC',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'SARC',0,1
	.word	613
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_CONFIGURATION_Bits',0,34,149,4,3
	.word	125057
	.byte	10
	.byte	'_Ifx_GETH_MAC_CSR_SW_CTRL_Bits',0,34,152,4,16,4,11
	.byte	'RCWE',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	613
	.byte	7,0,2,35,0,11
	.byte	'SEEN',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	438
	.byte	23,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_CSR_SW_CTRL_Bits',0,34,158,4,3
	.word	125542
	.byte	10
	.byte	'_Ifx_GETH_MAC_DEBUG_Bits',0,34,161,4,16,4,11
	.byte	'RPESTS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'RFCFCSTS',0,1
	.word	613
	.byte	2,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	630
	.byte	13,0,2,35,0,11
	.byte	'TPESTS',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'TFCSTS',0,1
	.word	613
	.byte	2,5,2,35,2,11
	.byte	'reserved_19',0,2
	.word	630
	.byte	13,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_DEBUG_Bits',0,34,169,4,3
	.word	125695
	.byte	10
	.byte	'_Ifx_GETH_MAC_EXT_CFG1_Bits',0,34,172,4,16,4,11
	.byte	'SPLOFST',0,1
	.word	613
	.byte	7,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'SPLM',0,1
	.word	613
	.byte	2,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	438
	.byte	22,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_EXT_CFG1_Bits',0,34,178,4,3
	.word	125879
	.byte	10
	.byte	'_Ifx_GETH_MAC_EXT_CONFIGURATION_Bits',0,34,181,4,16,4,11
	.byte	'GPSL',0,2
	.word	630
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,1
	.word	613
	.byte	2,0,2,35,1,11
	.byte	'DCRCC',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'SPEN',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'USP',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'HDSMS',0,1
	.word	613
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'EIPGEN',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'EIPG',0,1
	.word	613
	.byte	5,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'FHE',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_EXT_CONFIGURATION_Bits',0,34,195,4,3
	.word	126030
	.byte	10
	.byte	'_Ifx_GETH_MAC_HW_FEATURE0_Bits',0,34,198,4,16,4,11
	.byte	'MIISEL',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'GMIISEL',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'HDSEL',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'PCSSEL',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'VLHASH',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'SMASEL',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'RWKSEL',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'MGKSEL',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'MMCSEL',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'ARPOFFSEL',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	613
	.byte	2,4,2,35,1,11
	.byte	'TSSEL',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'EEESEL',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'TXCOESEL',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'RXCOESEL',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'ADDMACADRSEL',0,1
	.word	613
	.byte	5,1,2,35,2,11
	.byte	'MACADR32SEL',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'MACADR64SEL',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'TSSTSSEL',0,1
	.word	613
	.byte	2,5,2,35,3,11
	.byte	'SAVLANINS',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'ACTPHYSEL',0,1
	.word	613
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_HW_FEATURE0_Bits',0,34,224,4,3
	.word	126341
	.byte	10
	.byte	'_Ifx_GETH_MAC_HW_FEATURE1_Bits',0,34,227,4,16,4,11
	.byte	'RXFIFOSIZE',0,1
	.word	613
	.byte	5,3,2,35,0,11
	.byte	'SPRAM',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'TXFIFOSIZE',0,2
	.word	630
	.byte	5,5,2,35,0,11
	.byte	'OSTEN',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'PTOEN',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'ADVTHWORD',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'ADDR64',0,1
	.word	613
	.byte	2,0,2,35,1,11
	.byte	'DCBEN',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'SPHEN',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'TSOEN',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'DBGMEMA',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'AVSEL',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'RAVSEL',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'POUOST',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'HASHTBLSZ',0,1
	.word	613
	.byte	2,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'L3L4FNUM',0,1
	.word	613
	.byte	4,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_HW_FEATURE1_Bits',0,34,248,4,3
	.word	126900
	.byte	10
	.byte	'_Ifx_GETH_MAC_HW_FEATURE2_Bits',0,34,251,4,16,4,11
	.byte	'RXQCNT',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	2,2,2,35,0,11
	.byte	'TXQCNT',0,2
	.word	630
	.byte	4,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	613
	.byte	2,4,2,35,1,11
	.byte	'RXCHCNT',0,1
	.word	613
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'TXCHCNT',0,1
	.word	613
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	613
	.byte	2,0,2,35,2,11
	.byte	'PPSOUTNUM',0,1
	.word	613
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'AUXSNAPNUM',0,1
	.word	613
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_HW_FEATURE2_Bits',0,34,137,5,3
	.word	127344
	.byte	10
	.byte	'_Ifx_GETH_MAC_HW_FEATURE3_Bits',0,34,140,5,16,4,11
	.byte	'NRVF',0,1
	.word	613
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'CBTISEL',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'DVLAN',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	438
	.byte	26,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_HW_FEATURE3_Bits',0,34,147,5,3
	.word	127675
	.byte	10
	.byte	'_Ifx_GETH_MAC_INNER_VLAN_INCL_Bits',0,34,150,5,16,4,11
	.byte	'VLT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'VLC',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'VLP',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'CSVL',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'VLTI',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,2
	.word	630
	.byte	11,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_INNER_VLAN_INCL_Bits',0,34,158,5,3
	.word	127848
	.byte	10
	.byte	'_Ifx_GETH_MAC_INTERRUPT_ENABLE_Bits',0,34,161,5,16,4,11
	.byte	'RGSMIIIE',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	613
	.byte	2,5,2,35,0,11
	.byte	'PHYIE',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'PMTIE',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'LPIIE',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	630
	.byte	6,4,2,35,0,11
	.byte	'TSIE',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'TXSTSIE',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'RXSTSIE',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	438
	.byte	3,14,2,35,0,11
	.byte	'MDIOIE',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,2
	.word	630
	.byte	13,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_INTERRUPT_ENABLE_Bits',0,34,175,5,3
	.word	128033
	.byte	10
	.byte	'_Ifx_GETH_MAC_INTERRUPT_STATUS_Bits',0,34,178,5,16,4,11
	.byte	'RGSMIIIS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	613
	.byte	2,5,2,35,0,11
	.byte	'PHYIS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'PMTIS',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'LPIIS',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'MMCIS',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'MMCRXIS',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'MMCTXIS',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'MMCRXIPIS',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'TSIS',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'TXSTSIS',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'RXSTSIS',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	438
	.byte	3,14,2,35,0,11
	.byte	'MDIOIS',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,2
	.word	630
	.byte	13,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_INTERRUPT_STATUS_Bits',0,34,196,5,3
	.word	128353
	.byte	10
	.byte	'_Ifx_GETH_MAC_LPI_CONTROL_STATUS_Bits',0,34,199,5,16,4,11
	.byte	'TLPIEN',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TLPIEX',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'RLPIEN',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'RLPIEX',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	4,0,2,35,0,11
	.byte	'TLPIST',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'RLPIST',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	613
	.byte	6,0,2,35,1,11
	.byte	'LPIEN',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'PLS',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'PLSEN',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'LPITXA',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'LPIATE',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'LPITCSE',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	630
	.byte	10,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_LPI_CONTROL_STATUS_Bits',0,34,216,5,3
	.word	128749
	.byte	10
	.byte	'_Ifx_GETH_MAC_LPI_ENTRY_TIMER_Bits',0,34,219,5,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	3,5,2,35,0,11
	.byte	'LPIET',0,4
	.word	438
	.byte	17,12,2,35,0,11
	.byte	'reserved_20',0,2
	.word	630
	.byte	12,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_LPI_ENTRY_TIMER_Bits',0,34,224,5,3
	.word	129120
	.byte	10
	.byte	'_Ifx_GETH_MAC_LPI_TIMERS_CONTROL_Bits',0,34,227,5,16,4,11
	.byte	'TWT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'LST',0,2
	.word	630
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	613
	.byte	6,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_LPI_TIMERS_CONTROL_Bits',0,34,232,5,3
	.word	129267
	.byte	10
	.byte	'_Ifx_GETH_MAC_MDIO_ADDRESS_Bits',0,34,235,5,16,4,11
	.byte	'GB',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'C45E',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'GOC_0',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'GOC_1',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'SKAP',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	613
	.byte	3,0,2,35,0,11
	.byte	'CR',0,1
	.word	613
	.byte	4,4,2,35,1,11
	.byte	'NTC',0,1
	.word	613
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'RDA',0,1
	.word	613
	.byte	5,3,2,35,2,11
	.byte	'PA',0,2
	.word	630
	.byte	5,6,2,35,2,11
	.byte	'BTB',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'PSE',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_MDIO_ADDRESS_Bits',0,34,251,5,3
	.word	129411
	.byte	10
	.byte	'_Ifx_GETH_MAC_MDIO_DATA_Bits',0,34,254,5,16,4,11
	.byte	'GD',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'RA',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_MDIO_DATA_Bits',0,34,130,6,3
	.word	129726
	.byte	10
	.byte	'_Ifx_GETH_MAC_PACKET_FILTER_Bits',0,34,133,6,16,4,11
	.byte	'PR',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	613
	.byte	2,5,2,35,0,11
	.byte	'DAIF',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'PM',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'DBF',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'PCF',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'SAIF',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'SAF',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	613
	.byte	5,0,2,35,1,11
	.byte	'VTFE',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	613
	.byte	3,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	613
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	630
	.byte	9,1,2,35,2,11
	.byte	'RA',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_PACKET_FILTER_Bits',0,34,150,6,3
	.word	129827
	.byte	10
	.byte	'_Ifx_GETH_MAC_PHYIF_CONTROL_STATUS_Bits',0,34,153,6,16,4,11
	.byte	'TC',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'LUD',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,2
	.word	630
	.byte	11,0,2,35,0,11
	.byte	'LNKMOD',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'LNKSPEED',0,1
	.word	613
	.byte	2,5,2,35,2,11
	.byte	'LNKSTS',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	630
	.byte	10,2,2,35,2,11
	.byte	'reserved_30',0,1
	.word	613
	.byte	2,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_PHYIF_CONTROL_STATUS_Bits',0,34,166,6,3
	.word	130180
	.byte	10
	.byte	'_Ifx_GETH_MAC_PMT_CONTROL_STATUS_Bits',0,34,169,6,16,4,11
	.byte	'PWRDWN',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'MGKPKTEN',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'RWKPKTEN',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	2,3,2,35,0,11
	.byte	'MGKPRCVD',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'RWKPRCVD',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	630
	.byte	2,7,2,35,0,11
	.byte	'GLBLUCAST',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'RWKPFE',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	438
	.byte	13,8,2,35,0,11
	.byte	'RWKPTR',0,1
	.word	613
	.byte	5,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	613
	.byte	2,1,2,35,3,11
	.byte	'RWKFILTRST',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_PMT_CONTROL_STATUS_Bits',0,34,184,6,3
	.word	130494
	.byte	10
	.byte	'_Ifx_GETH_MAC_PPS0_INTERVAL_Bits',0,34,187,6,16,4,11
	.byte	'PPSINT0',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_PPS0_INTERVAL_Bits',0,34,190,6,3
	.word	130852
	.byte	10
	.byte	'_Ifx_GETH_MAC_PPS0_TARGET_TIME_NANOSECONDS_Bits',0,34,193,6,16,4,11
	.byte	'TTSL0',0,4
	.word	438
	.byte	31,1,2,35,0,11
	.byte	'TRGTBUSY0',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_PPS0_TARGET_TIME_NANOSECONDS_Bits',0,34,197,6,3
	.word	130952
	.byte	10
	.byte	'_Ifx_GETH_MAC_PPS0_TARGET_TIME_SECONDS_Bits',0,34,200,6,16,4,11
	.byte	'TSTRH0',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_PPS0_TARGET_TIME_SECONDS_Bits',0,34,203,6,3
	.word	131101
	.byte	10
	.byte	'_Ifx_GETH_MAC_PPS0_WIDTH_Bits',0,34,206,6,16,4,11
	.byte	'PPSWIDTH0',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_PPS0_WIDTH_Bits',0,34,209,6,3
	.word	131222
	.byte	10
	.byte	'_Ifx_GETH_MAC_PPS_CONTROL_Bits',0,34,212,6,16,4,11
	.byte	'PPSCTRL_PPSCMD',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'PPSEN0',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'TRGTMODSEL0',0,1
	.word	613
	.byte	2,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	613
	.byte	2,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	613
	.byte	2,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	613
	.byte	3,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	613
	.byte	2,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	613
	.byte	2,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	613
	.byte	2,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	613
	.byte	2,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_PPS_CONTROL_Bits',0,34,230,6,3
	.word	131318
	.byte	10
	.byte	'_Ifx_GETH_MAC_Q0_TX_FLOW_CTRL_Bits',0,34,233,6,16,4,11
	.byte	'FCB_BPA',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TFE',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'PLT',0,1
	.word	613
	.byte	3,1,2,35,0,11
	.byte	'DZPQ',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'PT',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_Q0_TX_FLOW_CTRL_Bits',0,34,242,6,3
	.word	131759
	.byte	10
	.byte	'_Ifx_GETH_MAC_RWK_PACKET_FILTER_Bits',0,34,245,6,16,4,11
	.byte	'WKUPFRMFTR',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_RWK_PACKET_FILTER_Bits',0,34,248,6,3
	.word	131967
	.byte	10
	.byte	'_Ifx_GETH_MAC_RXQ_CTRL0_Bits',0,34,251,6,16,4,11
	.byte	'RXQ0EN',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'RXQ1EN',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'RXQ2EN',0,1
	.word	613
	.byte	2,2,2,35,0,11
	.byte	'RXQ3EN',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_RXQ_CTRL0_Bits',0,34,131,7,3
	.word	132078
	.byte	10
	.byte	'_Ifx_GETH_MAC_RXQ_CTRL1_Bits',0,34,134,7,16,4,11
	.byte	'AVCPQ',0,1
	.word	613
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'PTPQ',0,1
	.word	613
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'UPQ',0,1
	.word	613
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'MCBCQ',0,1
	.word	613
	.byte	3,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'MCBCQEN',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'TACPQE',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'TPQC',0,1
	.word	613
	.byte	2,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	8,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_RXQ_CTRL1_Bits',0,34,150,7,3
	.word	132268
	.byte	10
	.byte	'_Ifx_GETH_MAC_RXQ_CTRL2_Bits',0,34,153,7,16,4,11
	.byte	'PSRQ0',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'PSRQ1',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'PSRQ2',0,1
	.word	613
	.byte	8,0,2,35,2,11
	.byte	'PSRQ3',0,1
	.word	613
	.byte	8,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_RXQ_CTRL2_Bits',0,34,159,7,3
	.word	132617
	.byte	10
	.byte	'_Ifx_GETH_MAC_RXQ_CTRL4_Bits',0,34,162,7,16,4,11
	.byte	'UFFQE',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'UFFQ',0,1
	.word	613
	.byte	2,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	5,0,2,35,0,11
	.byte	'MFFQE',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'MFFQ',0,1
	.word	613
	.byte	2,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	613
	.byte	5,0,2,35,1,11
	.byte	'VFFQE',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'VFFQ',0,1
	.word	613
	.byte	2,5,2,35,2,11
	.byte	'reserved_19',0,2
	.word	630
	.byte	13,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_RXQ_CTRL4_Bits',0,34,173,7,3
	.word	132758
	.byte	10
	.byte	'_Ifx_GETH_MAC_RX_FLOW_CTRL_Bits',0,34,176,7,16,4,11
	.byte	'RFE',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'UP',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	6,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	438
	.byte	23,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_RX_FLOW_CTRL_Bits',0,34,183,7,3
	.word	132998
	.byte	10
	.byte	'_Ifx_GETH_MAC_RX_TX_STATUS_Bits',0,34,186,7,16,4,11
	.byte	'TJT',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'NCARR',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'LCARR',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'EXDEF',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'LCOL',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'EXCOL',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'RWT',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	438
	.byte	23,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_RX_TX_STATUS_Bits',0,34,197,7,3
	.word	133172
	.byte	10
	.byte	'_Ifx_GETH_MAC_SUB_SECOND_INCREMENT_Bits',0,34,200,7,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'SNSINC',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'SSINC',0,1
	.word	613
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	8,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_SUB_SECOND_INCREMENT_Bits',0,34,206,7,3
	.word	133409
	.byte	10
	.byte	'_Ifx_GETH_MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS_Bits',0,34,209,7,16,4,11
	.byte	'TSHWR',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS_Bits',0,34,213,7,3
	.word	133584
	.byte	10
	.byte	'_Ifx_GETH_MAC_SYSTEM_TIME_NANOSECONDS_Bits',0,34,216,7,16,4,11
	.byte	'TSSS',0,4
	.word	438
	.byte	31,1,2,35,0,11
	.byte	'reserved_31',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_SYSTEM_TIME_NANOSECONDS_Bits',0,34,220,7,3
	.word	133741
	.byte	10
	.byte	'_Ifx_GETH_MAC_SYSTEM_TIME_NANOSECONDS_UPDATE_Bits',0,34,223,7,16,4,11
	.byte	'TSSS',0,4
	.word	438
	.byte	31,1,2,35,0,11
	.byte	'ADDSUB',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_SYSTEM_TIME_NANOSECONDS_UPDATE_Bits',0,34,227,7,3
	.word	133881
	.byte	10
	.byte	'_Ifx_GETH_MAC_SYSTEM_TIME_SECONDS_Bits',0,34,230,7,16,4,11
	.byte	'TSS',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_SYSTEM_TIME_SECONDS_Bits',0,34,233,7,3
	.word	134030
	.byte	10
	.byte	'_Ifx_GETH_MAC_SYSTEM_TIME_SECONDS_UPDATE_Bits',0,34,236,7,16,4,11
	.byte	'TSS',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_SYSTEM_TIME_SECONDS_UPDATE_Bits',0,34,239,7,3
	.word	134138
	.byte	10
	.byte	'_Ifx_GETH_MAC_TIMESTAMP_ADDEND_Bits',0,34,242,7,16,4,11
	.byte	'TSAR',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_ADDEND_Bits',0,34,245,7,3
	.word	134260
	.byte	10
	.byte	'_Ifx_GETH_MAC_TIMESTAMP_CONTROL_Bits',0,34,248,7,16,4,11
	.byte	'TSENA',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TSCFUPDT',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TSINIT',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'TSUPDT',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'TSADDREG',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'TSENALL',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'TSCTRLSSR',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'TSVER2ENA',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'TSIPENA',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'TSIPV6ENA',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'TSIPV4ENA',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'TSEVNTENA',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'TSMSTRENA',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'SNAPTYPSEL',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'TSENMACADDR',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'CSC',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	613
	.byte	3,0,2,35,2,11
	.byte	'TXTSSTSM',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	613
	.byte	3,4,2,35,3,11
	.byte	'AV8021ASMEN',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	613
	.byte	3,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_CONTROL_Bits',0,34,146,8,3
	.word	134363
	.byte	10
	.byte	'_Ifx_GETH_MAC_TIMESTAMP_EGRESS_ASYM_CORR_Bits',0,34,149,8,16,4,11
	.byte	'OSTEAC',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_EGRESS_ASYM_CORR_Bits',0,34,152,8,3
	.word	134948
	.byte	10
	.byte	'_Ifx_GETH_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND_Bits',0,34,155,8,16,4,11
	.byte	'TSEC',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND_Bits',0,34,158,8,3
	.word	135073
	.byte	10
	.byte	'_Ifx_GETH_MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSEC_Bits',0,34,161,8,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'TSECSNS',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSEC_Bits',0,34,166,8,3
	.word	135208
	.byte	10
	.byte	'_Ifx_GETH_MAC_TIMESTAMP_INGRESS_ASYM_CORR_Bits',0,34,169,8,16,4,11
	.byte	'OSTIAC',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_INGRESS_ASYM_CORR_Bits',0,34,172,8,3
	.word	135391
	.byte	10
	.byte	'_Ifx_GETH_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND_Bits',0,34,175,8,16,4,11
	.byte	'TSIC',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND_Bits',0,34,178,8,3
	.word	135518
	.byte	10
	.byte	'_Ifx_GETH_MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSEC_Bits',0,34,181,8,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'TSICSNS',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSEC_Bits',0,34,186,8,3
	.word	135655
	.byte	10
	.byte	'_Ifx_GETH_MAC_TIMESTAMP_STATUS_Bits',0,34,189,8,16,4,11
	.byte	'TSSOVF',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TSTARGT0',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'TSTRGTERR0',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'TSTARGT1',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'TSTRGTERR1',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'TSTARGT2',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'TSTRGTERR2',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'TSTARGT3',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'TSTRGTERR3',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	613
	.byte	5,1,2,35,1,11
	.byte	'TXTSSIS',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	613
	.byte	4,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	613
	.byte	4,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	6,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	613
	.byte	2,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_STATUS_Bits',0,34,207,8,3
	.word	135840
	.byte	10
	.byte	'_Ifx_GETH_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS_Bits',0,34,210,8,16,4,11
	.byte	'TXTSSLO',0,4
	.word	438
	.byte	31,1,2,35,0,11
	.byte	'TXTSSMIS',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS_Bits',0,34,214,8,3
	.word	136269
	.byte	10
	.byte	'_Ifx_GETH_MAC_TX_TIMESTAMP_STATUS_SECONDS_Bits',0,34,217,8,16,4,11
	.byte	'TXTSSHI',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TX_TIMESTAMP_STATUS_SECONDS_Bits',0,34,220,8,3
	.word	136425
	.byte	10
	.byte	'_Ifx_GETH_MAC_VERSION_Bits',0,34,223,8,16,4,11
	.byte	'SNPSVER',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'USERVER',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_VERSION_Bits',0,34,228,8,3
	.word	136553
	.byte	10
	.byte	'_Ifx_GETH_MAC_VLAN_HASH_TABLE_Bits',0,34,231,8,16,4,11
	.byte	'VLHT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_VLAN_HASH_TABLE_Bits',0,34,235,8,3
	.word	136683
	.byte	10
	.byte	'_Ifx_GETH_MAC_VLAN_INCL_Bits',0,34,238,8,16,4,11
	.byte	'VLT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'VLC',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'VLP',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'CSVL',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'VLTI',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'CBTI',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	613
	.byte	2,0,2,35,2,11
	.byte	'ADDR',0,1
	.word	613
	.byte	2,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	613
	.byte	4,2,2,35,3,11
	.byte	'RDWR',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'BUSY',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_VLAN_INCL_Bits',0,34,251,8,3
	.word	136807
	.byte	10
	.byte	'_Ifx_GETH_MAC_VLAN_INCL_Q_Bits',0,34,254,8,16,4,11
	.byte	'VLT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,1
	.word	613
	.byte	3,5,2,35,2,11
	.byte	'CSVL',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	630
	.byte	12,0,2,35,2,0,20
	.byte	'Ifx_GETH_MAC_VLAN_INCL_Q_Bits',0,34,132,9,3
	.word	137067
	.byte	10
	.byte	'_Ifx_GETH_MAC_VLAN_TAG_CTRL_Bits',0,34,135,9,16,4,11
	.byte	'OB',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'CT',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'OFS',0,1
	.word	613
	.byte	5,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	438
	.byte	10,15,2,35,0,11
	.byte	'VTIM',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'ESVL',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	613
	.byte	2,3,2,35,2,11
	.byte	'EVLS',0,1
	.word	613
	.byte	2,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'EVLRXS',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'VTHM',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'EDVLP',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'RES_27',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'EIVLS',0,1
	.word	613
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	613
	.byte	1,1,2,35,3,11
	.byte	'EIVLRXS',0,1
	.word	613
	.byte	1,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_VLAN_TAG_CTRL_Bits',0,34,153,9,3
	.word	137221
	.byte	10
	.byte	'_Ifx_GETH_MAC_VLAN_TAG_DATA_Bits',0,34,156,9,16,4,11
	.byte	'VID',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'VEN',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'ETV',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'DOVLTC',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'ERSVLM',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'ERIVLT',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	613
	.byte	3,0,2,35,2,11
	.byte	'DMACHEN',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'DMACHN',0,1
	.word	613
	.byte	2,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	613
	.byte	5,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_VLAN_TAG_DATA_Bits',0,34,168,9,3
	.word	137589
	.byte	10
	.byte	'_Ifx_GETH_MAC_VLAN_TAG_FILTER_Bits',0,34,171,9,16,4,11
	.byte	'VID',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'VEN',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'ETV',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'DOVLTC',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'ERSVLM',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'ERIVLT',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	613
	.byte	3,0,2,35,2,11
	.byte	'DMACHEN',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'DMACHN',0,1
	.word	613
	.byte	2,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	613
	.byte	5,0,2,35,3,0,20
	.byte	'Ifx_GETH_MAC_VLAN_TAG_FILTER_Bits',0,34,183,9,3
	.word	137852
	.byte	10
	.byte	'_Ifx_GETH_MAC_WATCHDOG_TIMEOUT_Bits',0,34,186,9,16,4,11
	.byte	'WTO',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	4,0,2,35,0,11
	.byte	'PWE',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	438
	.byte	23,0,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_WATCHDOG_TIMEOUT_Bits',0,34,192,9,3
	.word	138119
	.byte	10
	.byte	'_Ifx_GETH_MMC_CONTROL_Bits',0,34,195,9,16,4,11
	.byte	'CNTRST',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'CNTSTOPRO',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'RSTONRD',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'CNTFREEZ',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'CNTPRST',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'CNTPRSTLVL',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	613
	.byte	2,0,2,35,0,11
	.byte	'UCDBC',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,4
	.word	438
	.byte	23,0,2,35,0,0,20
	.byte	'Ifx_GETH_MMC_CONTROL_Bits',0,34,206,9,3
	.word	138280
	.byte	10
	.byte	'_Ifx_GETH_MMC_IPC_RX_INTERRUPT_Bits',0,34,209,9,16,4,11
	.byte	'RXIPV4GPIS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'RXIPV4HERPIS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'RXIPV4NOPAYPIS',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'RXIPV4FRAGPIS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'RXIPV4UDSBLPIS',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'RXIPV6GPIS',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'RXIPV6HERPIS',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'RXIPV6NOPAYPIS',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'RXUDPGPIS',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'RXUDPERPIS',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'RXTCPGPIS',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'RXTCPERPIS',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'RXICMPGPIS',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'RXICMPERPIS',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	613
	.byte	2,0,2,35,1,11
	.byte	'RXIPV4GOIS',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'RXIPV4HEROIS',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'RXIPV4NOPAYOIS',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'RXIPV4FRAGOIS',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'RXIPV4UDSBLOIS',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'RXIPV6GOIS',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'RXIPV6HEROIS',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'RXIPV6NOPAYOIS',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'RXUDPGOIS',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'RXUDPEROIS',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'RXTCPGOIS',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'RXTCPEROIS',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'RXICMPGOIS',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'RXICMPEROIS',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	613
	.byte	2,0,2,35,3,0,20
	.byte	'Ifx_GETH_MMC_IPC_RX_INTERRUPT_Bits',0,34,241,9,3
	.word	138529
	.byte	10
	.byte	'_Ifx_GETH_MMC_IPC_RX_INTERRUPT_MASK_Bits',0,34,244,9,16,4,11
	.byte	'RXIPV4GPIM',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'RXIPV4HERPIM',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'RXIPV4NOPAYPIM',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'RXIPV4FRAGPIM',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'RXIPV4UDSBLPIM',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'RXIPV6GPIM',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'RXIPV6HERPIM',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'RXIPV6NOPAYPIM',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'RXUDPGPIM',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'RXUDPERPIM',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'RXTCPGPIM',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'RXTCPERPIM',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'RXICMPGPIM',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'RXICMPERPIM',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	613
	.byte	2,0,2,35,1,11
	.byte	'RXIPV4GOIM',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'RXIPV4HEROIM',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'RXIPV4NOPAYOIM',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'RXIPV4FRAGOIM',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'RXIPV4UDSBLOIM',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'RXIPV6GOIM',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'RXIPV6HEROIM',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'RXIPV6NOPAYOIM',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'RXUDPGOIM',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'RXUDPEROIM',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'RXTCPGOIM',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'RXTCPEROIM',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'RXICMPGOIM',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'RXICMPEROIM',0,1
	.word	613
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	613
	.byte	2,0,2,35,3,0,20
	.byte	'Ifx_GETH_MMC_IPC_RX_INTERRUPT_MASK_Bits',0,34,148,10,3
	.word	139314
	.byte	10
	.byte	'_Ifx_GETH_MMC_RX_INTERRUPT_Bits',0,34,151,10,16,4,11
	.byte	'RXGBPKTIS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'RXGBOCTIS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'RXGOCTIS',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'RXBCGPIS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'RXMCGPIS',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'RXCRCERPIS',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'RXALGNERPIS',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'RXRUNTPIS',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'RXJABERPIS',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'RXUSIZEGPIS',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'RXOSIZEGPIS',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'RX64OCTGBPIS',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'RX65T127OCTGBPIS',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'RX128T255OCTGBPIS',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'RX256T511OCTGBPIS',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'RX512T1023OCTGBPIS',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'RX1024TMAXOCTGBPIS',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'RXUCGPIS',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'RXLENERPIS',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'RXORANGEPIS',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'RXPAUSPIS',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'RXFOVPIS',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'RXVLANGBPIS',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'RXWDOGPIS',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'RXRCVERRPIS',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'RXCTRLPIS',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'RXLPIUSCIS',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'RXLPITRCIS',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_GETH_MMC_RX_INTERRUPT_Bits',0,34,182,10,3
	.word	140109
	.byte	10
	.byte	'_Ifx_GETH_MMC_RX_INTERRUPT_MASK_Bits',0,34,185,10,16,4,11
	.byte	'RXGBPKTIM',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'RXGBOCTIM',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'RXGOCTIM',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'RXBCGPIM',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'RXMCGPIM',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'RXCRCERPIM',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'RXALGNERPIM',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'RXRUNTPIM',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'RXJABERPIM',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'RXUSIZEGPIM',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'RXOSIZEGPIM',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'RX64OCTGBPIM',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'RX65T127OCTGBPIM',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'RX128T255OCTGBPIM',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'RX256T511OCTGBPIM',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'RX512T1023OCTGBPIM',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'RX1024TMAXOCTGBPIM',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'RXUCGPIM',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'RXLENERPIM',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'RXORANGEPIM',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'RXPAUSPIM',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'RXFOVPIM',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'RXVLANGBPIM',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'RXWDOGPIM',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'RXRCVERRPIM',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'RXCTRLPIM',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'RXLPIUSCIM',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'RXLPITRCIM',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_GETH_MMC_RX_INTERRUPT_MASK_Bits',0,34,216,10,3
	.word	140855
	.byte	10
	.byte	'_Ifx_GETH_MMC_TX_INTERRUPT_Bits',0,34,219,10,16,4,11
	.byte	'TXGBOCTIS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TXGBPKTIS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TXBCGPIS',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'TXMCGPIS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'TX64OCTGBPIS',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'TX65T127OCTGBPIS',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'TX128T255OCTGBPIS',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'TX256T511OCTGBPIS',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'TX512T1023OCTGBPIS',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'TX1024TMAXOCTGBPIS',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'TXUCGBPIS',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'TXMCGBPIS',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'TXBCGBPIS',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'TXUFLOWERPIS',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'TXSCOLGPIS',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'TXMCOLGPIS',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'TXDEFPIS',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'TXLATCOLPIS',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'TXEXCOLPIS',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'TXCARERPIS',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'TXGOCTIS',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'TXGPKTIS',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'TXEXDEFPIS',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'TXPAUSPIS',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'TXVLANGPIS',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'TXOSIZEGPIS',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'TXLPIUSCIS',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'TXLPITRCIS',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_GETH_MMC_TX_INTERRUPT_Bits',0,34,250,10,3
	.word	141611
	.byte	10
	.byte	'_Ifx_GETH_MMC_TX_INTERRUPT_MASK_Bits',0,34,253,10,16,4,11
	.byte	'TXGBOCTIM',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TXGBPKTIM',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TXBCGPIM',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'TXMCGPIM',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'TX64OCTGBPIM',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'TX65T127OCTGBPIM',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'TX128T255OCTGBPIM',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'TX256T511OCTGBPIM',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'TX512T1023OCTGBPIM',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'TX1024TMAXOCTGBPIM',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'TXUCGBPIM',0,1
	.word	613
	.byte	1,5,2,35,1,11
	.byte	'TXMCGBPIM',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'TXBCGBPIM',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'TXUFLOWERPIM',0,1
	.word	613
	.byte	1,2,2,35,1,11
	.byte	'TXSCOLGPIM',0,1
	.word	613
	.byte	1,1,2,35,1,11
	.byte	'TXMCOLGPIM',0,1
	.word	613
	.byte	1,0,2,35,1,11
	.byte	'TXDEFPIM',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'TXLATCOLPIM',0,1
	.word	613
	.byte	1,6,2,35,2,11
	.byte	'TXEXCOLPIM',0,1
	.word	613
	.byte	1,5,2,35,2,11
	.byte	'TXCARERPIM',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'TXGOCTIM',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'TXGPKTIM',0,1
	.word	613
	.byte	1,2,2,35,2,11
	.byte	'TXEXDEFPIM',0,1
	.word	613
	.byte	1,1,2,35,2,11
	.byte	'TXPAUSPIM',0,1
	.word	613
	.byte	1,0,2,35,2,11
	.byte	'TXVLANGPIM',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'TXOSIZEGPIM',0,1
	.word	613
	.byte	1,6,2,35,3,11
	.byte	'TXLPIUSCIM',0,1
	.word	613
	.byte	1,5,2,35,3,11
	.byte	'TXLPITRCIM',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_GETH_MMC_TX_INTERRUPT_MASK_Bits',0,34,156,11,3
	.word	142355
	.byte	10
	.byte	'_Ifx_GETH_MTL_INTERRUPT_STATUS_Bits',0,34,159,11,16,4,11
	.byte	'Q0IS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'Q1IS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'Q2IS',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'Q3IS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	630
	.byte	14,0,2,35,2,0,20
	.byte	'Ifx_GETH_MTL_INTERRUPT_STATUS_Bits',0,34,169,11,3
	.word	143109
	.byte	10
	.byte	'_Ifx_GETH_MTL_OPERATION_MODE_Bits',0,34,172,11,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'DTXSTS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'RAA',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	2,3,2,35,0,11
	.byte	'SCHALG',0,1
	.word	613
	.byte	2,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'CNTPRST',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'CNTCLR',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,4
	.word	438
	.byte	22,0,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_OPERATION_MODE_Bits',0,34,183,11,3
	.word	143350
	.byte	10
	.byte	'_Ifx_GETH_MTL_Q0_INTERRUPT_CONTROL_STATUS_Bits',0,34,186,11,16,4,11
	.byte	'TXUNFIS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'ABPSIS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	6,0,2,35,0,11
	.byte	'TXUIE',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'ABPSIE',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	613
	.byte	6,0,2,35,1,11
	.byte	'RXOVFIS',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	613
	.byte	7,0,2,35,2,11
	.byte	'RXOIE',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	613
	.byte	7,0,2,35,3,0,20
	.byte	'Ifx_GETH_MTL_Q0_INTERRUPT_CONTROL_STATUS_Bits',0,34,198,11,3
	.word	143610
	.byte	10
	.byte	'_Ifx_GETH_MTL_Q_INTERRUPT_CONTROL_STATUS_Bits',0,34,201,11,16,4,11
	.byte	'TXUNFIS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'ABPSIS',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	6,0,2,35,0,11
	.byte	'TXUIE',0,1
	.word	613
	.byte	1,7,2,35,1,11
	.byte	'ABPSIE',0,1
	.word	613
	.byte	1,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	613
	.byte	6,0,2,35,1,11
	.byte	'RXOVFIS',0,1
	.word	613
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	613
	.byte	7,0,2,35,2,11
	.byte	'RXOIE',0,1
	.word	613
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	613
	.byte	7,0,2,35,3,0,20
	.byte	'Ifx_GETH_MTL_Q_INTERRUPT_CONTROL_STATUS_Bits',0,34,213,11,3
	.word	143918
	.byte	10
	.byte	'_Ifx_GETH_MTL_RXQ0_CONTROL_Bits',0,34,216,11,16,4,11
	.byte	'RXQ_WEGT',0,1
	.word	613
	.byte	3,5,2,35,0,11
	.byte	'RXQ_FRM_ARBIT',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	438
	.byte	28,0,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_RXQ0_CONTROL_Bits',0,34,221,11,3
	.word	144224
	.byte	10
	.byte	'_Ifx_GETH_MTL_RXQ0_DEBUG_Bits',0,34,224,11,16,4,11
	.byte	'RWCSTS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'RRCSTS',0,1
	.word	613
	.byte	2,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'RXQSTS',0,1
	.word	613
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	630
	.byte	10,0,2,35,0,11
	.byte	'PRXQ',0,2
	.word	630
	.byte	14,2,2,35,2,11
	.byte	'reserved_30',0,1
	.word	613
	.byte	2,0,2,35,3,0,20
	.byte	'Ifx_GETH_MTL_RXQ0_DEBUG_Bits',0,34,233,11,3
	.word	144370
	.byte	10
	.byte	'_Ifx_GETH_MTL_RXQ0_MISSED_PACKET_OVERFLOW_CNT_Bits',0,34,236,11,16,4,11
	.byte	'OVFPKTCNT',0,2
	.word	630
	.byte	11,5,2,35,0,11
	.byte	'OVFCNTOVF',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	613
	.byte	4,0,2,35,1,11
	.byte	'MISPKTCNT',0,2
	.word	630
	.byte	11,5,2,35,2,11
	.byte	'MISCNTOVF',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_GETH_MTL_RXQ0_MISSED_PACKET_OVERFLOW_CNT_Bits',0,34,244,11,3
	.word	144582
	.byte	10
	.byte	'_Ifx_GETH_MTL_RXQ0_OPERATION_MODE_Bits',0,34,247,11,16,4,11
	.byte	'RTC',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'FUP',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'FEP',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'RSF',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'DIS_TCP_EF',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'EHFC',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'RFA',0,1
	.word	613
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	613
	.byte	2,2,2,35,1,11
	.byte	'RFD',0,4
	.word	438
	.byte	4,14,2,35,0,11
	.byte	'reserved_18',0,1
	.word	613
	.byte	2,4,2,35,2,11
	.byte	'RQS',0,2
	.word	630
	.byte	5,7,2,35,2,11
	.byte	'reserved_25',0,1
	.word	613
	.byte	7,0,2,35,3,0,20
	.byte	'Ifx_GETH_MTL_RXQ0_OPERATION_MODE_Bits',0,34,134,12,3
	.word	144829
	.byte	10
	.byte	'_Ifx_GETH_MTL_RXQ_CONTROL_Bits',0,34,137,12,16,4,11
	.byte	'RXQ_WEGT',0,1
	.word	613
	.byte	3,5,2,35,0,11
	.byte	'RXQ_FRM_ARBIT',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	438
	.byte	28,0,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_RXQ_CONTROL_Bits',0,34,142,12,3
	.word	145156
	.byte	10
	.byte	'_Ifx_GETH_MTL_RXQ_DEBUG_Bits',0,34,145,12,16,4,11
	.byte	'RWCSTS',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'RRCSTS',0,1
	.word	613
	.byte	2,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'RXQSTS',0,1
	.word	613
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	630
	.byte	10,0,2,35,0,11
	.byte	'PRXQ',0,2
	.word	630
	.byte	14,2,2,35,2,11
	.byte	'reserved_30',0,1
	.word	613
	.byte	2,0,2,35,3,0,20
	.byte	'Ifx_GETH_MTL_RXQ_DEBUG_Bits',0,34,154,12,3
	.word	145300
	.byte	10
	.byte	'_Ifx_GETH_MTL_RXQ_DMA_MAP0_Bits',0,34,157,12,16,4,11
	.byte	'Q0MDMACH',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'Q0DDMACH',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	613
	.byte	3,0,2,35,0,11
	.byte	'Q1MDMACH',0,1
	.word	613
	.byte	2,6,2,35,1,11
	.byte	'reserved_10',0,1
	.word	613
	.byte	2,4,2,35,1,11
	.byte	'Q1DDMACH',0,1
	.word	613
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	613
	.byte	3,0,2,35,1,11
	.byte	'Q2MDMACH',0,1
	.word	613
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	613
	.byte	2,4,2,35,2,11
	.byte	'Q2DDMACH',0,1
	.word	613
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	613
	.byte	3,0,2,35,2,11
	.byte	'Q3MDMACH',0,1
	.word	613
	.byte	2,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	613
	.byte	2,4,2,35,3,11
	.byte	'Q3DDMACH',0,1
	.word	613
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	613
	.byte	3,0,2,35,3,0,20
	.byte	'Ifx_GETH_MTL_RXQ_DMA_MAP0_Bits',0,34,175,12,3
	.word	145510
	.byte	10
	.byte	'_Ifx_GETH_MTL_RXQ_MISSED_PACKET_OVERFLOW_CNT_Bits',0,34,178,12,16,4,11
	.byte	'OVFPKTCNT',0,2
	.word	630
	.byte	11,5,2,35,0,11
	.byte	'OVFCNTOVF',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	613
	.byte	4,0,2,35,1,11
	.byte	'MISPKTCNT',0,2
	.word	630
	.byte	11,5,2,35,2,11
	.byte	'MISCNTOVF',0,1
	.word	613
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_GETH_MTL_RXQ_MISSED_PACKET_OVERFLOW_CNT_Bits',0,34,186,12,3
	.word	145931
	.byte	10
	.byte	'_Ifx_GETH_MTL_RXQ_OPERATION_MODE_Bits',0,34,189,12,16,4,11
	.byte	'RTC',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'FUP',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'FEP',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'RSF',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'DIS_TCP_EF',0,1
	.word	613
	.byte	1,1,2,35,0,11
	.byte	'EHFC',0,1
	.word	613
	.byte	1,0,2,35,0,11
	.byte	'RFA',0,1
	.word	613
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	613
	.byte	2,2,2,35,1,11
	.byte	'RFD',0,4
	.word	438
	.byte	4,14,2,35,0,11
	.byte	'reserved_18',0,1
	.word	613
	.byte	2,4,2,35,2,11
	.byte	'RQS',0,2
	.word	630
	.byte	5,7,2,35,2,11
	.byte	'reserved_25',0,1
	.word	613
	.byte	7,0,2,35,3,0,20
	.byte	'Ifx_GETH_MTL_RXQ_OPERATION_MODE_Bits',0,34,204,12,3
	.word	146176
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ0_DEBUG_Bits',0,34,207,12,16,4,11
	.byte	'TXQPAUSED',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TRCSTS',0,1
	.word	613
	.byte	2,5,2,35,0,11
	.byte	'TWCSTS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'TXQSTS',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'TXSTSFSTS',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	630
	.byte	10,0,2,35,0,11
	.byte	'PTXQ',0,1
	.word	613
	.byte	3,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'STXSTSF',0,1
	.word	613
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	630
	.byte	9,0,2,35,2,0,20
	.byte	'Ifx_GETH_MTL_TXQ0_DEBUG_Bits',0,34,219,12,3
	.word	146501
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ0_ETS_STATUS_Bits',0,34,222,12,16,4,11
	.byte	'ABS',0,4
	.word	438
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	8,0,2,35,3,0,20
	.byte	'Ifx_GETH_MTL_TXQ0_ETS_STATUS_Bits',0,34,226,12,3
	.word	146775
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ0_OPERATION_MODE_Bits',0,34,229,12,16,4,11
	.byte	'FTQ',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TSF',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TXQEN',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'TTC',0,1
	.word	613
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	630
	.byte	9,0,2,35,0,11
	.byte	'TQS',0,1
	.word	613
	.byte	4,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	630
	.byte	12,0,2,35,2,0,20
	.byte	'Ifx_GETH_MTL_TXQ0_OPERATION_MODE_Bits',0,34,238,12,3
	.word	146898
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ0_QUANTUM_WEIGHT_Bits',0,34,241,12,16,4,11
	.byte	'ISCQW',0,4
	.word	438
	.byte	21,11,2,35,0,11
	.byte	'reserved_21',0,2
	.word	630
	.byte	11,0,2,35,2,0,20
	.byte	'Ifx_GETH_MTL_TXQ0_QUANTUM_WEIGHT_Bits',0,34,245,12,3
	.word	147113
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ0_UNDERFLOW_Bits',0,34,248,12,16,4,11
	.byte	'UFFRMCNT',0,2
	.word	630
	.byte	11,5,2,35,0,11
	.byte	'UFCNTOVF',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	438
	.byte	20,0,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ0_UNDERFLOW_Bits',0,34,253,12,3
	.word	147246
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ_DEBUG_Bits',0,34,128,13,16,4,11
	.byte	'TXQPAUSED',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TRCSTS',0,1
	.word	613
	.byte	2,5,2,35,0,11
	.byte	'TWCSTS',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'TXQSTS',0,1
	.word	613
	.byte	1,3,2,35,0,11
	.byte	'TXSTSFSTS',0,1
	.word	613
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	630
	.byte	10,0,2,35,0,11
	.byte	'PTXQ',0,1
	.word	613
	.byte	3,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	613
	.byte	1,4,2,35,2,11
	.byte	'STXSTSF',0,1
	.word	613
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	630
	.byte	9,0,2,35,2,0,20
	.byte	'Ifx_GETH_MTL_TXQ_DEBUG_Bits',0,34,140,13,3
	.word	147392
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ_ETS_CONTROL_Bits',0,34,143,13,16,4,11
	.byte	'reserved_0',0,1
	.word	613
	.byte	2,6,2,35,0,11
	.byte	'AVALG',0,1
	.word	613
	.byte	1,5,2,35,0,11
	.byte	'CC',0,1
	.word	613
	.byte	1,4,2,35,0,11
	.byte	'SLC',0,1
	.word	613
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	438
	.byte	25,0,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ_ETS_CONTROL_Bits',0,34,150,13,3
	.word	147664
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ_ETS_STATUS_Bits',0,34,153,13,16,4,11
	.byte	'ABS',0,4
	.word	438
	.byte	24,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	613
	.byte	8,0,2,35,3,0,20
	.byte	'Ifx_GETH_MTL_TXQ_ETS_STATUS_Bits',0,34,157,13,3
	.word	147839
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ_HICREDIT_Bits',0,34,160,13,16,4,11
	.byte	'HC',0,4
	.word	438
	.byte	29,3,2,35,0,11
	.byte	'reserved_29',0,1
	.word	613
	.byte	3,0,2,35,3,0,20
	.byte	'Ifx_GETH_MTL_TXQ_HICREDIT_Bits',0,34,164,13,3
	.word	147960
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ_LOCREDIT_Bits',0,34,167,13,16,4,11
	.byte	'LC',0,4
	.word	438
	.byte	29,3,2,35,0,11
	.byte	'reserved_29',0,1
	.word	613
	.byte	3,0,2,35,3,0,20
	.byte	'Ifx_GETH_MTL_TXQ_LOCREDIT_Bits',0,34,171,13,3
	.word	148076
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ_OPERATION_MODE_Bits',0,34,174,13,16,4,11
	.byte	'FTQ',0,1
	.word	613
	.byte	1,7,2,35,0,11
	.byte	'TSF',0,1
	.word	613
	.byte	1,6,2,35,0,11
	.byte	'TXQEN',0,1
	.word	613
	.byte	2,4,2,35,0,11
	.byte	'TTC',0,1
	.word	613
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,2
	.word	630
	.byte	9,0,2,35,0,11
	.byte	'TQS',0,1
	.word	613
	.byte	4,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	630
	.byte	12,0,2,35,2,0,20
	.byte	'Ifx_GETH_MTL_TXQ_OPERATION_MODE_Bits',0,34,183,13,3
	.word	148192
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ_QUANTUM_WEIGHT_Bits',0,34,186,13,16,4,11
	.byte	'ISCQW',0,4
	.word	438
	.byte	21,11,2,35,0,11
	.byte	'reserved_21',0,2
	.word	630
	.byte	11,0,2,35,2,0,20
	.byte	'Ifx_GETH_MTL_TXQ_QUANTUM_WEIGHT_Bits',0,34,190,13,3
	.word	148405
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ_SENDSLOPECREDIT_Bits',0,34,193,13,16,4,11
	.byte	'SSC',0,2
	.word	630
	.byte	14,2,2,35,0,11
	.byte	'reserved_14',0,4
	.word	438
	.byte	18,0,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ_SENDSLOPECREDIT_Bits',0,34,197,13,3
	.word	148536
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ_UNDERFLOW_Bits',0,34,200,13,16,4,11
	.byte	'UFFRMCNT',0,2
	.word	630
	.byte	11,5,2,35,0,11
	.byte	'UFCNTOVF',0,1
	.word	613
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	438
	.byte	20,0,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ_UNDERFLOW_Bits',0,34,205,13,3
	.word	148667
	.byte	10
	.byte	'_Ifx_GETH_RWK_FILTER_BYTE_MASK_Bits',0,34,208,13,16,4,11
	.byte	'FILTERI_BYTE_MASK',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RWK_FILTER_BYTE_MASK_Bits',0,34,211,13,3
	.word	148811
	.byte	10
	.byte	'_Ifx_GETH_RWK_FILTER_COMMAND_0_Bits',0,34,214,13,16,4,11
	.byte	'FILTER0_COMMAND',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	4,0,2,35,0,11
	.byte	'FILTER1_COMMAND',0,1
	.word	613
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	613
	.byte	4,0,2,35,1,11
	.byte	'FILTER2_COMMAND',0,1
	.word	613
	.byte	4,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	613
	.byte	4,0,2,35,2,11
	.byte	'FILTER3_COMMAND',0,1
	.word	613
	.byte	4,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	613
	.byte	4,0,2,35,3,0,20
	.byte	'Ifx_GETH_RWK_FILTER_COMMAND_0_Bits',0,34,224,13,3
	.word	148927
	.byte	10
	.byte	'_Ifx_GETH_RWK_FILTER_CRC_Bits',0,34,227,13,16,4,11
	.byte	'FILTER0_CRC',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'FILTER1_CRC',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RWK_FILTER_CRC_Bits',0,34,231,13,3
	.word	149213
	.byte	10
	.byte	'_Ifx_GETH_RWK_FILTER_OFFSET_0_Bits',0,34,234,13,16,4,11
	.byte	'FILTER0_OFFSET',0,1
	.word	613
	.byte	8,0,2,35,0,11
	.byte	'FILTER1_OFFSET',0,1
	.word	613
	.byte	8,0,2,35,1,11
	.byte	'FILTER2_OFFSET',0,1
	.word	613
	.byte	8,0,2,35,2,11
	.byte	'FILTER3_OFFSET',0,1
	.word	613
	.byte	8,0,2,35,3,0,20
	.byte	'Ifx_GETH_RWK_FILTER_OFFSET_0_Bits',0,34,240,13,3
	.word	149334
	.byte	10
	.byte	'_Ifx_GETH_RXICMP_ERROR_OCTETS_Bits',0,34,243,13,16,4,11
	.byte	'RXICMPERROCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXICMP_ERROR_OCTETS_Bits',0,34,246,13,3
	.word	149523
	.byte	10
	.byte	'_Ifx_GETH_RXICMP_ERROR_PACKETS_Bits',0,34,249,13,16,4,11
	.byte	'RXICMPERRPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXICMP_ERROR_PACKETS_Bits',0,34,253,13,3
	.word	149632
	.byte	10
	.byte	'_Ifx_GETH_RXICMP_GOOD_OCTETS_Bits',0,34,128,14,16,4,11
	.byte	'RXICMPGDOCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXICMP_GOOD_OCTETS_Bits',0,34,131,14,3
	.word	149766
	.byte	10
	.byte	'_Ifx_GETH_RXICMP_GOOD_PACKETS_Bits',0,34,134,14,16,4,11
	.byte	'RXICMPGDPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXICMP_GOOD_PACKETS_Bits',0,34,138,14,3
	.word	149872
	.byte	10
	.byte	'_Ifx_GETH_RXIPV4_FRAGMENTED_OCTETS_Bits',0,34,141,14,16,4,11
	.byte	'RXIPV4FRAGOCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_FRAGMENTED_OCTETS_Bits',0,34,144,14,3
	.word	150003
	.byte	10
	.byte	'_Ifx_GETH_RXIPV4_FRAGMENTED_PACKETS_Bits',0,34,147,14,16,4,11
	.byte	'RXIPV4FRAGPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXIPV4_FRAGMENTED_PACKETS_Bits',0,34,151,14,3
	.word	150123
	.byte	10
	.byte	'_Ifx_GETH_RXIPV4_GOOD_OCTETS_Bits',0,34,154,14,16,4,11
	.byte	'RXIPV4GDOCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_GOOD_OCTETS_Bits',0,34,157,14,3
	.word	150268
	.byte	10
	.byte	'_Ifx_GETH_RXIPV4_GOOD_PACKETS_Bits',0,34,160,14,16,4,11
	.byte	'RXIPV4GDPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXIPV4_GOOD_PACKETS_Bits',0,34,164,14,3
	.word	150374
	.byte	10
	.byte	'_Ifx_GETH_RXIPV4_HEADER_ERROR_OCTETS_Bits',0,34,167,14,16,4,11
	.byte	'RXIPV4HDRERROCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_HEADER_ERROR_OCTETS_Bits',0,34,170,14,3
	.word	150505
	.byte	10
	.byte	'_Ifx_GETH_RXIPV4_HEADER_ERROR_PACKETS_Bits',0,34,173,14,16,4,11
	.byte	'RXIPV4HDRERRPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXIPV4_HEADER_ERROR_PACKETS_Bits',0,34,177,14,3
	.word	150631
	.byte	10
	.byte	'_Ifx_GETH_RXIPV4_NO_PAYLOAD_OCTETS_Bits',0,34,180,14,16,4,11
	.byte	'RXIPV4NOPAYOCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_NO_PAYLOAD_OCTETS_Bits',0,34,183,14,3
	.word	150782
	.byte	10
	.byte	'_Ifx_GETH_RXIPV4_NO_PAYLOAD_PACKETS_Bits',0,34,186,14,16,4,11
	.byte	'RXIPV4NOPAYPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXIPV4_NO_PAYLOAD_PACKETS_Bits',0,34,190,14,3
	.word	150903
	.byte	10
	.byte	'_Ifx_GETH_RXIPV4_UDP_CHECKSUM_DISABLED_PACKETS_Bits',0,34,193,14,16,4,11
	.byte	'RXIPV4UDSBLPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXIPV4_UDP_CHECKSUM_DISABLED_PACKETS_Bits',0,34,197,14,3
	.word	151049
	.byte	10
	.byte	'_Ifx_GETH_RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS_Bits',0,34,200,14,16,4,11
	.byte	'RXIPV4UDSBLOCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS_Bits',0,34,203,14,3
	.word	151217
	.byte	10
	.byte	'_Ifx_GETH_RXIPV6_GOOD_OCTETS_Bits',0,34,206,14,16,4,11
	.byte	'RXIPV6GDOCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV6_GOOD_OCTETS_Bits',0,34,209,14,3
	.word	151358
	.byte	10
	.byte	'_Ifx_GETH_RXIPV6_GOOD_PACKETS_Bits',0,34,212,14,16,4,11
	.byte	'RXIPV6GDPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXIPV6_GOOD_PACKETS_Bits',0,34,216,14,3
	.word	151464
	.byte	10
	.byte	'_Ifx_GETH_RXIPV6_HEADER_ERROR_OCTETS_Bits',0,34,219,14,16,4,11
	.byte	'RXIPV6HDRERROCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV6_HEADER_ERROR_OCTETS_Bits',0,34,222,14,3
	.word	151595
	.byte	10
	.byte	'_Ifx_GETH_RXIPV6_HEADER_ERROR_PACKETS_Bits',0,34,225,14,16,4,11
	.byte	'RXIPV6HDRERRPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXIPV6_HEADER_ERROR_PACKETS_Bits',0,34,229,14,3
	.word	151721
	.byte	10
	.byte	'_Ifx_GETH_RXIPV6_NO_PAYLOAD_OCTETS_Bits',0,34,232,14,16,4,11
	.byte	'RXIPV6NOPAYOCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV6_NO_PAYLOAD_OCTETS_Bits',0,34,235,14,3
	.word	151872
	.byte	10
	.byte	'_Ifx_GETH_RXIPV6_NO_PAYLOAD_PACKETS_Bits',0,34,238,14,16,4,11
	.byte	'RXIPV6NOPAYPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXIPV6_NO_PAYLOAD_PACKETS_Bits',0,34,242,14,3
	.word	151993
	.byte	10
	.byte	'_Ifx_GETH_RXTCP_ERROR_OCTETS_Bits',0,34,245,14,16,4,11
	.byte	'RXTCPERROCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXTCP_ERROR_OCTETS_Bits',0,34,248,14,3
	.word	152139
	.byte	10
	.byte	'_Ifx_GETH_RXTCP_ERROR_PACKETS_Bits',0,34,251,14,16,4,11
	.byte	'RXTCPERRPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXTCP_ERROR_PACKETS_Bits',0,34,255,14,3
	.word	152245
	.byte	10
	.byte	'_Ifx_GETH_RXTCP_GOOD_OCTETS_Bits',0,34,130,15,16,4,11
	.byte	'RXTCPGDOCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXTCP_GOOD_OCTETS_Bits',0,34,133,15,3
	.word	152376
	.byte	10
	.byte	'_Ifx_GETH_RXTCP_GOOD_PACKETS_Bits',0,34,136,15,16,4,11
	.byte	'RXTCPGDPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXTCP_GOOD_PACKETS_Bits',0,34,140,15,3
	.word	152479
	.byte	10
	.byte	'_Ifx_GETH_RXUDP_ERROR_OCTETS_Bits',0,34,143,15,16,4,11
	.byte	'RXUDPERROCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXUDP_ERROR_OCTETS_Bits',0,34,146,15,3
	.word	152607
	.byte	10
	.byte	'_Ifx_GETH_RXUDP_ERROR_PACKETS_Bits',0,34,149,15,16,4,11
	.byte	'RXUDPERRPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXUDP_ERROR_PACKETS_Bits',0,34,153,15,3
	.word	152713
	.byte	10
	.byte	'_Ifx_GETH_RXUDP_GOOD_OCTETS_Bits',0,34,156,15,16,4,11
	.byte	'RXUDPGDOCT',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RXUDP_GOOD_OCTETS_Bits',0,34,159,15,3
	.word	152844
	.byte	10
	.byte	'_Ifx_GETH_RXUDP_GOOD_PACKETS_Bits',0,34,162,15,16,4,11
	.byte	'RXUDPGDPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RXUDP_GOOD_PACKETS_Bits',0,34,166,15,3
	.word	152947
	.byte	10
	.byte	'_Ifx_GETH_RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_Bits',0,34,169,15,16,4,11
	.byte	'RX1024_MAXOCTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_Bits',0,34,173,15,3
	.word	153075
	.byte	10
	.byte	'_Ifx_GETH_RX_128TO255OCTETS_PACKETS_GOOD_BAD_Bits',0,34,176,15,16,4,11
	.byte	'RX128_255OCTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_128TO255OCTETS_PACKETS_GOOD_BAD_Bits',0,34,180,15,3
	.word	153242
	.byte	10
	.byte	'_Ifx_GETH_RX_256TO511OCTETS_PACKETS_GOOD_BAD_Bits',0,34,183,15,16,4,11
	.byte	'RX256_511OCTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_256TO511OCTETS_PACKETS_GOOD_BAD_Bits',0,34,187,15,3
	.word	153406
	.byte	10
	.byte	'_Ifx_GETH_RX_512TO1023OCTETS_PACKETS_GOOD_BAD_Bits',0,34,190,15,16,4,11
	.byte	'RX512_1023OCTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_512TO1023OCTETS_PACKETS_GOOD_BAD_Bits',0,34,194,15,3
	.word	153570
	.byte	10
	.byte	'_Ifx_GETH_RX_64OCTETS_PACKETS_GOOD_BAD_Bits',0,34,197,15,16,4,11
	.byte	'RX64OCTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_64OCTETS_PACKETS_GOOD_BAD_Bits',0,34,201,15,3
	.word	153737
	.byte	10
	.byte	'_Ifx_GETH_RX_65TO127OCTETS_PACKETS_GOOD_BAD_Bits',0,34,204,15,16,4,11
	.byte	'RX65_127OCTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_65TO127OCTETS_PACKETS_GOOD_BAD_Bits',0,34,208,15,3
	.word	153884
	.byte	10
	.byte	'_Ifx_GETH_RX_ALIGNMENT_ERROR_PACKETS_Bits',0,34,211,15,16,4,11
	.byte	'RXALGNERR',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_ALIGNMENT_ERROR_PACKETS_Bits',0,34,215,15,3
	.word	154045
	.byte	10
	.byte	'_Ifx_GETH_RX_BROADCAST_PACKETS_GOOD_Bits',0,34,218,15,16,4,11
	.byte	'RXBCASTG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_BROADCAST_PACKETS_GOOD_Bits',0,34,222,15,3
	.word	154188
	.byte	10
	.byte	'_Ifx_GETH_RX_CONTROL_PACKETS_GOOD_Bits',0,34,225,15,16,4,11
	.byte	'RXCTRLG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_CONTROL_PACKETS_GOOD_Bits',0,34,229,15,3
	.word	154328
	.byte	10
	.byte	'_Ifx_GETH_RX_CRC_ERROR_PACKETS_Bits',0,34,232,15,16,4,11
	.byte	'RXCRCERR',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_CRC_ERROR_PACKETS_Bits',0,34,236,15,3
	.word	154463
	.byte	10
	.byte	'_Ifx_GETH_RX_FIFO_OVERFLOW_PACKETS_Bits',0,34,239,15,16,4,11
	.byte	'RXFIFOOVFL',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_FIFO_OVERFLOW_PACKETS_Bits',0,34,243,15,3
	.word	154593
	.byte	10
	.byte	'_Ifx_GETH_RX_JABBER_ERROR_PACKETS_Bits',0,34,246,15,16,4,11
	.byte	'RXJABERR',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_JABBER_ERROR_PACKETS_Bits',0,34,250,15,3
	.word	154733
	.byte	10
	.byte	'_Ifx_GETH_RX_LENGTH_ERROR_PACKETS_Bits',0,34,253,15,16,4,11
	.byte	'RXLENERR',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_LENGTH_ERROR_PACKETS_Bits',0,34,129,16,3
	.word	154869
	.byte	10
	.byte	'_Ifx_GETH_RX_LPI_TRAN_CNTR_Bits',0,34,132,16,16,4,11
	.byte	'RXLPITRC',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_LPI_TRAN_CNTR_Bits',0,34,136,16,3
	.word	155005
	.byte	10
	.byte	'_Ifx_GETH_RX_LPI_USEC_CNTR_Bits',0,34,139,16,16,4,11
	.byte	'RXLPIUSC',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_LPI_USEC_CNTR_Bits',0,34,143,16,3
	.word	155127
	.byte	10
	.byte	'_Ifx_GETH_RX_MULTICAST_PACKETS_GOOD_Bits',0,34,146,16,16,4,11
	.byte	'RXMCASTG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_MULTICAST_PACKETS_GOOD_Bits',0,34,150,16,3
	.word	155249
	.byte	10
	.byte	'_Ifx_GETH_RX_OCTET_COUNT_GOOD_Bits',0,34,153,16,16,4,11
	.byte	'RXOCTG',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RX_OCTET_COUNT_GOOD_Bits',0,34,156,16,3
	.word	155389
	.byte	10
	.byte	'_Ifx_GETH_RX_OCTET_COUNT_GOOD_BAD_Bits',0,34,159,16,16,4,11
	.byte	'RXOCTGB',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_RX_OCTET_COUNT_GOOD_BAD_Bits',0,34,162,16,3
	.word	155492
	.byte	10
	.byte	'_Ifx_GETH_RX_OUT_OF_RANGE_TYPE_PACKETS_Bits',0,34,165,16,16,4,11
	.byte	'RXOUTOFRNG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_OUT_OF_RANGE_TYPE_PACKETS_Bits',0,34,169,16,3
	.word	155604
	.byte	10
	.byte	'_Ifx_GETH_RX_OVERSIZE_PACKETS_GOOD_Bits',0,34,172,16,16,4,11
	.byte	'RXOVERSZG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_OVERSIZE_PACKETS_GOOD_Bits',0,34,176,16,3
	.word	155752
	.byte	10
	.byte	'_Ifx_GETH_RX_PACKETS_COUNT_GOOD_BAD_Bits',0,34,179,16,16,4,11
	.byte	'RXPKTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_PACKETS_COUNT_GOOD_BAD_Bits',0,34,183,16,3
	.word	155891
	.byte	10
	.byte	'_Ifx_GETH_RX_PAUSE_PACKETS_Bits',0,34,186,16,16,4,11
	.byte	'RXPAUSEPKT',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_PAUSE_PACKETS_Bits',0,34,190,16,3
	.word	156030
	.byte	10
	.byte	'_Ifx_GETH_RX_RECEIVE_ERROR_PACKETS_Bits',0,34,193,16,16,4,11
	.byte	'RXRCVERR',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_RECEIVE_ERROR_PACKETS_Bits',0,34,197,16,3
	.word	156154
	.byte	10
	.byte	'_Ifx_GETH_RX_RUNT_ERROR_PACKETS_Bits',0,34,200,16,16,4,11
	.byte	'RXRUNTERR',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_RUNT_ERROR_PACKETS_Bits',0,34,204,16,3
	.word	156292
	.byte	10
	.byte	'_Ifx_GETH_RX_UNDERSIZE_PACKETS_GOOD_Bits',0,34,207,16,16,4,11
	.byte	'RXUNDERSZG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_UNDERSIZE_PACKETS_GOOD_Bits',0,34,211,16,3
	.word	156425
	.byte	10
	.byte	'_Ifx_GETH_RX_UNICAST_PACKETS_GOOD_Bits',0,34,214,16,16,4,11
	.byte	'RXUCASTG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_UNICAST_PACKETS_GOOD_Bits',0,34,218,16,3
	.word	156567
	.byte	10
	.byte	'_Ifx_GETH_RX_VLAN_PACKETS_GOOD_BAD_Bits',0,34,221,16,16,4,11
	.byte	'RXVLANPKTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_VLAN_PACKETS_GOOD_BAD_Bits',0,34,225,16,3
	.word	156703
	.byte	10
	.byte	'_Ifx_GETH_RX_WATCHDOG_ERROR_PACKETS_Bits',0,34,228,16,16,4,11
	.byte	'RXWDGERR',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_RX_WATCHDOG_ERROR_PACKETS_Bits',0,34,232,16,3
	.word	156844
	.byte	10
	.byte	'_Ifx_GETH_SKEWCTL_Bits',0,34,235,16,16,4,11
	.byte	'TXCFG',0,1
	.word	613
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	613
	.byte	4,0,2,35,0,11
	.byte	'RXCFG',0,1
	.word	613
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	438
	.byte	20,0,2,35,0,0,20
	.byte	'Ifx_GETH_SKEWCTL_Bits',0,34,241,16,3
	.word	156984
	.byte	10
	.byte	'_Ifx_GETH_TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_Bits',0,34,244,16,16,4,11
	.byte	'TX1024_MAXOCTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_Bits',0,34,248,16,3
	.word	157124
	.byte	10
	.byte	'_Ifx_GETH_TX_128TO255OCTETS_PACKETS_GOOD_BAD_Bits',0,34,251,16,16,4,11
	.byte	'TX128_255OCTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_128TO255OCTETS_PACKETS_GOOD_BAD_Bits',0,34,255,16,3
	.word	157291
	.byte	10
	.byte	'_Ifx_GETH_TX_256TO511OCTETS_PACKETS_GOOD_BAD_Bits',0,34,130,17,16,4,11
	.byte	'TX256_511OCTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_256TO511OCTETS_PACKETS_GOOD_BAD_Bits',0,34,134,17,3
	.word	157455
	.byte	10
	.byte	'_Ifx_GETH_TX_512TO1023OCTETS_PACKETS_GOOD_BAD_Bits',0,34,137,17,16,4,11
	.byte	'TX512_1023OCTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_512TO1023OCTETS_PACKETS_GOOD_BAD_Bits',0,34,141,17,3
	.word	157619
	.byte	10
	.byte	'_Ifx_GETH_TX_64OCTETS_PACKETS_GOOD_BAD_Bits',0,34,144,17,16,4,11
	.byte	'TX64OCTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_64OCTETS_PACKETS_GOOD_BAD_Bits',0,34,148,17,3
	.word	157786
	.byte	10
	.byte	'_Ifx_GETH_TX_65TO127OCTETS_PACKETS_GOOD_BAD_Bits',0,34,151,17,16,4,11
	.byte	'TX65_127OCTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_65TO127OCTETS_PACKETS_GOOD_BAD_Bits',0,34,155,17,3
	.word	157933
	.byte	10
	.byte	'_Ifx_GETH_TX_BROADCAST_PACKETS_GOOD_Bits',0,34,158,17,16,4,11
	.byte	'TXBCASTG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_BROADCAST_PACKETS_GOOD_Bits',0,34,162,17,3
	.word	158094
	.byte	10
	.byte	'_Ifx_GETH_TX_BROADCAST_PACKETS_GOOD_BAD_Bits',0,34,165,17,16,4,11
	.byte	'TXBCASTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_BROADCAST_PACKETS_GOOD_BAD_Bits',0,34,169,17,3
	.word	158234
	.byte	10
	.byte	'_Ifx_GETH_TX_CARRIER_ERROR_PACKETS_Bits',0,34,172,17,16,4,11
	.byte	'TXCARR',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_CARRIER_ERROR_PACKETS_Bits',0,34,176,17,3
	.word	158383
	.byte	10
	.byte	'_Ifx_GETH_TX_DEFERRED_PACKETS_Bits',0,34,179,17,16,4,11
	.byte	'TXDEFRD',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_DEFERRED_PACKETS_Bits',0,34,183,17,3
	.word	158519
	.byte	10
	.byte	'_Ifx_GETH_TX_EXCESSIVE_COLLISION_PACKETS_Bits',0,34,186,17,16,4,11
	.byte	'TXEXSCOL',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_EXCESSIVE_COLLISION_PACKETS_Bits',0,34,190,17,3
	.word	158646
	.byte	10
	.byte	'_Ifx_GETH_TX_EXCESSIVE_DEFERRAL_ERROR_Bits',0,34,193,17,16,4,11
	.byte	'TXEXSDEF',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_EXCESSIVE_DEFERRAL_ERROR_Bits',0,34,197,17,3
	.word	158796
	.byte	10
	.byte	'_Ifx_GETH_TX_LATE_COLLISION_PACKETS_Bits',0,34,200,17,16,4,11
	.byte	'TXLATECOL',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_LATE_COLLISION_PACKETS_Bits',0,34,204,17,3
	.word	158940
	.byte	10
	.byte	'_Ifx_GETH_TX_LPI_TRAN_CNTR_Bits',0,34,207,17,16,4,11
	.byte	'TXLPITRC',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_LPI_TRAN_CNTR_Bits',0,34,211,17,3
	.word	159081
	.byte	10
	.byte	'_Ifx_GETH_TX_LPI_USEC_CNTR_Bits',0,34,214,17,16,4,11
	.byte	'TXLPIUSC',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_LPI_USEC_CNTR_Bits',0,34,218,17,3
	.word	159203
	.byte	10
	.byte	'_Ifx_GETH_TX_MULTICAST_PACKETS_GOOD_Bits',0,34,221,17,16,4,11
	.byte	'TXMCASTG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_MULTICAST_PACKETS_GOOD_Bits',0,34,225,17,3
	.word	159325
	.byte	10
	.byte	'_Ifx_GETH_TX_MULTICAST_PACKETS_GOOD_BAD_Bits',0,34,228,17,16,4,11
	.byte	'TXMCASTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_MULTICAST_PACKETS_GOOD_BAD_Bits',0,34,232,17,3
	.word	159465
	.byte	10
	.byte	'_Ifx_GETH_TX_MULTIPLE_COLLISION_GOOD_PACKETS_Bits',0,34,235,17,16,4,11
	.byte	'TXMULTCOLG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_MULTIPLE_COLLISION_GOOD_PACKETS_Bits',0,34,239,17,3
	.word	159614
	.byte	10
	.byte	'_Ifx_GETH_TX_OCTET_COUNT_GOOD_Bits',0,34,242,17,16,4,11
	.byte	'TXOCTG',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_TX_OCTET_COUNT_GOOD_Bits',0,34,245,17,3
	.word	159774
	.byte	10
	.byte	'_Ifx_GETH_TX_OCTET_COUNT_GOOD_BAD_Bits',0,34,248,17,16,4,11
	.byte	'TXOCTGB',0,4
	.word	438
	.byte	32,0,2,35,0,0,20
	.byte	'Ifx_GETH_TX_OCTET_COUNT_GOOD_BAD_Bits',0,34,251,17,3
	.word	159877
	.byte	10
	.byte	'_Ifx_GETH_TX_OSIZE_PACKETS_GOOD_Bits',0,34,254,17,16,4,11
	.byte	'TXOSIZG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_OSIZE_PACKETS_GOOD_Bits',0,34,130,18,3
	.word	159989
	.byte	10
	.byte	'_Ifx_GETH_TX_PACKET_COUNT_GOOD_Bits',0,34,133,18,16,4,11
	.byte	'TXPKTG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_PACKET_COUNT_GOOD_Bits',0,34,137,18,3
	.word	160120
	.byte	10
	.byte	'_Ifx_GETH_TX_PACKET_COUNT_GOOD_BAD_Bits',0,34,140,18,16,4,11
	.byte	'TXPKTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_PACKET_COUNT_GOOD_BAD_Bits',0,34,144,18,3
	.word	160248
	.byte	10
	.byte	'_Ifx_GETH_TX_PAUSE_PACKETS_Bits',0,34,147,18,16,4,11
	.byte	'TXPAUSE',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_PAUSE_PACKETS_Bits',0,34,151,18,3
	.word	160385
	.byte	10
	.byte	'_Ifx_GETH_TX_SINGLE_COLLISION_GOOD_PACKETS_Bits',0,34,154,18,16,4,11
	.byte	'TXSNGLCOLG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_SINGLE_COLLISION_GOOD_PACKETS_Bits',0,34,158,18,3
	.word	160506
	.byte	10
	.byte	'_Ifx_GETH_TX_UNDERFLOW_ERROR_PACKETS_Bits',0,34,161,18,16,4,11
	.byte	'TXUNDRFLW',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_UNDERFLOW_ERROR_PACKETS_Bits',0,34,165,18,3
	.word	160662
	.byte	10
	.byte	'_Ifx_GETH_TX_UNICAST_PACKETS_GOOD_BAD_Bits',0,34,168,18,16,4,11
	.byte	'TXUCASTGB',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_UNICAST_PACKETS_GOOD_BAD_Bits',0,34,172,18,3
	.word	160805
	.byte	10
	.byte	'_Ifx_GETH_TX_VLAN_PACKETS_GOOD_Bits',0,34,175,18,16,4,11
	.byte	'TXVLANG',0,2
	.word	630
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	630
	.byte	16,0,2,35,2,0,20
	.byte	'Ifx_GETH_TX_VLAN_PACKETS_GOOD_Bits',0,34,179,18,3
	.word	160950
	.byte	12,34,187,18,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	117668
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_ACCEN0',0,34,192,18,3
	.word	161079
	.byte	12,34,195,18,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	118227
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_ACCEN1',0,34,200,18,3
	.word	161144
	.byte	12,34,203,18,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	118306
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_ACCEND_ACCEN0D',0,34,208,18,3
	.word	161209
	.byte	12,34,211,18,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	118882
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_ACCEND_ACCEN1D',0,34,216,18,3
	.word	161282
	.byte	12,34,219,18,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	118979
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_CLC',0,34,224,18,3
	.word	161355
	.byte	12,34,227,18,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	119086
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_CONTROL',0,34,232,18,3
	.word	161417
	.byte	12,34,235,18,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	119322
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_CURRENT_APP_RXBUFFER',0,34,240,18,3
	.word	161490
	.byte	12,34,243,18,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	119446
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_CURRENT_APP_RXDESC',0,34,248,18,3
	.word	161576
	.byte	12,34,251,18,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	119566
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_CURRENT_APP_TXBUFFER',0,34,128,19,3
	.word	161660
	.byte	12,34,131,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	119690
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_CURRENT_APP_TXDESC',0,34,136,19,3
	.word	161746
	.byte	12,34,139,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	119810
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_INTERRUPT_ENABLE',0,34,144,19,3
	.word	161830
	.byte	12,34,147,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	120151
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_MISS_FRAME_CNT',0,34,152,19,3
	.word	161912
	.byte	12,34,155,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	120317
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_RXDESC_LIST_ADDRESS',0,34,160,19,3
	.word	161992
	.byte	12,34,163,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	120456
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_RXDESC_RING_LENGTH',0,34,168,19,3
	.word	162077
	.byte	12,34,171,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	120592
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_RXDESC_TAIL_POINTER',0,34,176,19,3
	.word	162161
	.byte	12,34,179,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	120729
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_RX_CONTROL',0,34,184,19,3
	.word	162246
	.byte	12,34,187,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	120989
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_RX_INTERRUPT_WATCHDOG_TIMER',0,34,192,19,3
	.word	162322
	.byte	12,34,195,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	121180
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_SLOT_FUNCTION_CONTROL_STATUS',0,34,200,19,3
	.word	162415
	.byte	12,34,203,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	121402
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_STATUS',0,34,208,19,3
	.word	162509
	.byte	12,34,211,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	121743
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_TXDESC_LIST_ADDRESS',0,34,216,19,3
	.word	162581
	.byte	12,34,219,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	121882
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_TXDESC_RING_LENGTH',0,34,224,19,3
	.word	162666
	.byte	12,34,227,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	122018
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_TXDESC_TAIL_POINTER',0,34,232,19,3
	.word	162750
	.byte	12,34,235,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	122155
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_CH_TX_CONTROL',0,34,240,19,3
	.word	162835
	.byte	12,34,243,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	122457
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_DEBUG_STATUS0',0,34,248,19,3
	.word	162911
	.byte	12,34,251,19,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	122697
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_DEBUG_STATUS1',0,34,128,20,3
	.word	162987
	.byte	12,34,131,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	122832
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_INTERRUPT_STATUS',0,34,136,20,3
	.word	163063
	.byte	12,34,139,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	123088
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_MODE',0,34,144,20,3
	.word	163142
	.byte	12,34,147,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	123348
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_DMA_SYSBUS_MODE',0,34,152,20,3
	.word	163209
	.byte	12,34,155,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	123687
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_GPCTL',0,34,160,20,3
	.word	163283
	.byte	12,34,163,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	123993
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_ID',0,34,168,20,3
	.word	163347
	.byte	12,34,171,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	124099
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_KRST0',0,34,176,20,3
	.word	163408
	.byte	12,34,179,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	124212
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_KRST1',0,34,184,20,3
	.word	163472
	.byte	12,34,187,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	124306
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_KRSTCLR',0,34,192,20,3
	.word	163536
	.byte	12,34,195,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	124404
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_1US_TIC_COUNTER',0,34,200,20,3
	.word	163602
	.byte	12,34,203,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	124536
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_ADDRESS_HIGH',0,34,208,20,3
	.word	163680
	.byte	12,34,211,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	124714
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_ADDRESS_HIGH0',0,34,216,20,3
	.word	163755
	.byte	12,34,219,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	124865
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_ADDRESS_LOW',0,34,224,20,3
	.word	163831
	.byte	12,34,227,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	124960
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_ADDRESS_LOW0',0,34,232,20,3
	.word	163905
	.byte	12,34,235,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	125057
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_CONFIGURATION',0,34,240,20,3
	.word	163980
	.byte	12,34,243,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	125542
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_CSR_SW_CTRL',0,34,248,20,3
	.word	164056
	.byte	12,34,251,20,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	125695
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_DEBUG',0,34,128,21,3
	.word	164130
	.byte	12,34,131,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	125879
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_EXT_CFG1',0,34,136,21,3
	.word	164198
	.byte	12,34,139,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	126030
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_EXT_CONFIGURATION',0,34,144,21,3
	.word	164269
	.byte	12,34,147,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	126341
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_HW_FEATURE0',0,34,152,21,3
	.word	164349
	.byte	12,34,155,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	126900
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_HW_FEATURE1',0,34,160,21,3
	.word	164423
	.byte	12,34,163,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	127344
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_HW_FEATURE2',0,34,168,21,3
	.word	164497
	.byte	12,34,171,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	127675
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_HW_FEATURE3',0,34,176,21,3
	.word	164571
	.byte	12,34,179,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	127848
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_INNER_VLAN_INCL',0,34,184,21,3
	.word	164645
	.byte	12,34,187,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	128033
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_INTERRUPT_ENABLE',0,34,192,21,3
	.word	164723
	.byte	12,34,195,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	128353
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_INTERRUPT_STATUS',0,34,200,21,3
	.word	164802
	.byte	12,34,203,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	128749
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_LPI_CONTROL_STATUS',0,34,208,21,3
	.word	164881
	.byte	12,34,211,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	129120
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_LPI_ENTRY_TIMER',0,34,216,21,3
	.word	164962
	.byte	12,34,219,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	129267
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_LPI_TIMERS_CONTROL',0,34,224,21,3
	.word	165040
	.byte	12,34,227,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	129411
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_MDIO_ADDRESS',0,34,232,21,3
	.word	165121
	.byte	12,34,235,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	129726
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_MDIO_DATA',0,34,240,21,3
	.word	165196
	.byte	12,34,243,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	129827
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_PACKET_FILTER',0,34,248,21,3
	.word	165268
	.byte	12,34,251,21,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	130180
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_PHYIF_CONTROL_STATUS',0,34,128,22,3
	.word	165344
	.byte	12,34,131,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	130494
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_PMT_CONTROL_STATUS',0,34,136,22,3
	.word	165427
	.byte	12,34,139,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	130852
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_PPS0_INTERVAL',0,34,144,22,3
	.word	165508
	.byte	12,34,147,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	130952
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_PPS0_TARGET_TIME_NANOSECONDS',0,34,152,22,3
	.word	165584
	.byte	12,34,155,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	131101
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_PPS0_TARGET_TIME_SECONDS',0,34,160,22,3
	.word	165675
	.byte	12,34,163,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	131222
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_PPS0_WIDTH',0,34,168,22,3
	.word	165762
	.byte	12,34,171,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	131318
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_PPS_CONTROL',0,34,176,22,3
	.word	165835
	.byte	12,34,179,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	131759
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_Q0_TX_FLOW_CTRL',0,34,184,22,3
	.word	165909
	.byte	12,34,187,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	131967
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_RWK_PACKET_FILTER',0,34,192,22,3
	.word	165987
	.byte	12,34,195,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	132078
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_RXQ_CTRL0',0,34,200,22,3
	.word	166067
	.byte	12,34,203,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	132268
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_RXQ_CTRL1',0,34,208,22,3
	.word	166139
	.byte	12,34,211,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	132617
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_RXQ_CTRL2',0,34,216,22,3
	.word	166211
	.byte	12,34,219,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	132758
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_RXQ_CTRL4',0,34,224,22,3
	.word	166283
	.byte	12,34,227,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	132998
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_RX_FLOW_CTRL',0,34,232,22,3
	.word	166355
	.byte	12,34,235,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	133172
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_RX_TX_STATUS',0,34,240,22,3
	.word	166430
	.byte	12,34,243,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	133409
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_SUB_SECOND_INCREMENT',0,34,248,22,3
	.word	166505
	.byte	12,34,251,22,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	133584
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS',0,34,128,23,3
	.word	166588
	.byte	12,34,131,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	133741
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_SYSTEM_TIME_NANOSECONDS',0,34,136,23,3
	.word	166682
	.byte	12,34,139,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	133881
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_SYSTEM_TIME_NANOSECONDS_UPDATE',0,34,144,23,3
	.word	166768
	.byte	12,34,147,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	134030
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_SYSTEM_TIME_SECONDS',0,34,152,23,3
	.word	166861
	.byte	12,34,155,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	134138
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_SYSTEM_TIME_SECONDS_UPDATE',0,34,160,23,3
	.word	166943
	.byte	12,34,163,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	134260
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_ADDEND',0,34,168,23,3
	.word	167032
	.byte	12,34,171,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	134363
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_CONTROL',0,34,176,23,3
	.word	167111
	.byte	12,34,179,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	134948
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_EGRESS_ASYM_CORR',0,34,184,23,3
	.word	167191
	.byte	12,34,187,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	135073
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND',0,34,192,23,3
	.word	167280
	.byte	12,34,195,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	135208
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSEC',0,34,200,23,3
	.word	167375
	.byte	12,34,203,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	135391
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_INGRESS_ASYM_CORR',0,34,208,23,3
	.word	167470
	.byte	12,34,211,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	135518
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND',0,34,216,23,3
	.word	167560
	.byte	12,34,219,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	135655
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSEC',0,34,224,23,3
	.word	167656
	.byte	12,34,227,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	135840
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TIMESTAMP_STATUS',0,34,232,23,3
	.word	167752
	.byte	12,34,235,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	136269
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS',0,34,240,23,3
	.word	167831
	.byte	12,34,243,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	136425
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_TX_TIMESTAMP_STATUS_SECONDS',0,34,248,23,3
	.word	167925
	.byte	12,34,251,23,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	136553
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_VERSION',0,34,128,24,3
	.word	168015
	.byte	12,34,131,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	136683
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_VLAN_HASH_TABLE',0,34,136,24,3
	.word	168085
	.byte	12,34,139,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	136807
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_VLAN_INCL',0,34,144,24,3
	.word	168163
	.byte	12,34,147,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	137067
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_VLAN_INCL_Q',0,34,152,24,3
	.word	168235
	.byte	12,34,155,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	137221
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_VLAN_TAG_CTRL',0,34,160,24,3
	.word	168309
	.byte	12,34,163,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	137589
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_VLAN_TAG_DATA',0,34,168,24,3
	.word	168385
	.byte	12,34,171,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	137852
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_VLAN_TAG_FILTER',0,34,176,24,3
	.word	168461
	.byte	12,34,179,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	138119
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MAC_WATCHDOG_TIMEOUT',0,34,184,24,3
	.word	168539
	.byte	12,34,187,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	138280
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MMC_CONTROL',0,34,192,24,3
	.word	168618
	.byte	12,34,195,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	138529
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MMC_IPC_RX_INTERRUPT',0,34,200,24,3
	.word	168688
	.byte	12,34,203,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	139314
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MMC_IPC_RX_INTERRUPT_MASK',0,34,208,24,3
	.word	168767
	.byte	12,34,211,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	140109
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MMC_RX_INTERRUPT',0,34,216,24,3
	.word	168851
	.byte	12,34,219,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	140855
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MMC_RX_INTERRUPT_MASK',0,34,224,24,3
	.word	168926
	.byte	12,34,227,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	141611
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MMC_TX_INTERRUPT',0,34,232,24,3
	.word	169006
	.byte	12,34,235,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	142355
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MMC_TX_INTERRUPT_MASK',0,34,240,24,3
	.word	169081
	.byte	12,34,243,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	143109
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_INTERRUPT_STATUS',0,34,248,24,3
	.word	169161
	.byte	12,34,251,24,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	143350
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_OPERATION_MODE',0,34,128,25,3
	.word	169240
	.byte	12,34,131,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	143610
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_Q0_INTERRUPT_CONTROL_STATUS',0,34,136,25,3
	.word	169317
	.byte	12,34,139,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	143918
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_Q_INTERRUPT_CONTROL_STATUS',0,34,144,25,3
	.word	169407
	.byte	12,34,147,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	144224
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_RXQ0_CONTROL',0,34,152,25,3
	.word	169496
	.byte	12,34,155,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	144370
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_RXQ0_DEBUG',0,34,160,25,3
	.word	169571
	.byte	12,34,163,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	144582
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_RXQ0_MISSED_PACKET_OVERFLOW_CNT',0,34,168,25,3
	.word	169644
	.byte	12,34,171,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	144829
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_RXQ0_OPERATION_MODE',0,34,176,25,3
	.word	169738
	.byte	12,34,179,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	145156
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_RXQ_CONTROL',0,34,184,25,3
	.word	169820
	.byte	12,34,187,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	145300
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_RXQ_DEBUG',0,34,192,25,3
	.word	169894
	.byte	12,34,195,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	145510
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_RXQ_DMA_MAP0',0,34,200,25,3
	.word	169966
	.byte	12,34,203,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	145931
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_RXQ_MISSED_PACKET_OVERFLOW_CNT',0,34,208,25,3
	.word	170041
	.byte	12,34,211,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	146176
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_RXQ_OPERATION_MODE',0,34,216,25,3
	.word	170134
	.byte	12,34,219,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	146501
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ0_DEBUG',0,34,224,25,3
	.word	170215
	.byte	12,34,227,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	146775
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ0_ETS_STATUS',0,34,232,25,3
	.word	170288
	.byte	12,34,235,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	146898
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ0_OPERATION_MODE',0,34,240,25,3
	.word	170366
	.byte	12,34,243,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	147113
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ0_QUANTUM_WEIGHT',0,34,248,25,3
	.word	170448
	.byte	12,34,251,25,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	147246
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ0_UNDERFLOW',0,34,128,26,3
	.word	170530
	.byte	12,34,131,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	147392
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ_DEBUG',0,34,136,26,3
	.word	170607
	.byte	12,34,139,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	147664
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ_ETS_CONTROL',0,34,144,26,3
	.word	170679
	.byte	12,34,147,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	147839
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ_ETS_STATUS',0,34,152,26,3
	.word	170757
	.byte	12,34,155,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	147960
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ_HICREDIT',0,34,160,26,3
	.word	170834
	.byte	12,34,163,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	148076
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ_LOCREDIT',0,34,168,26,3
	.word	170909
	.byte	12,34,171,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	148192
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ_OPERATION_MODE',0,34,176,26,3
	.word	170984
	.byte	12,34,179,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	148405
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ_QUANTUM_WEIGHT',0,34,184,26,3
	.word	171065
	.byte	12,34,187,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	148536
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ_SENDSLOPECREDIT',0,34,192,26,3
	.word	171146
	.byte	12,34,195,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	148667
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_MTL_TXQ_UNDERFLOW',0,34,200,26,3
	.word	171228
	.byte	12,34,203,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	148811
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RWK_FILTER_BYTE_MASK',0,34,208,26,3
	.word	171304
	.byte	12,34,211,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	148927
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RWK_FILTER_COMMAND_0',0,34,216,26,3
	.word	171383
	.byte	12,34,219,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	149213
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RWK_FILTER_CRC',0,34,224,26,3
	.word	171462
	.byte	12,34,227,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	149334
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RWK_FILTER_OFFSET_0',0,34,232,26,3
	.word	171535
	.byte	12,34,235,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	149523
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXICMP_ERROR_OCTETS',0,34,240,26,3
	.word	171613
	.byte	12,34,243,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	149632
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXICMP_ERROR_PACKETS',0,34,248,26,3
	.word	171691
	.byte	12,34,251,26,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	149766
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXICMP_GOOD_OCTETS',0,34,128,27,3
	.word	171770
	.byte	12,34,131,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	149872
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXICMP_GOOD_PACKETS',0,34,136,27,3
	.word	171847
	.byte	12,34,139,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	150003
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_FRAGMENTED_OCTETS',0,34,144,27,3
	.word	171925
	.byte	12,34,147,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	150123
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_FRAGMENTED_PACKETS',0,34,152,27,3
	.word	172008
	.byte	12,34,155,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	150268
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_GOOD_OCTETS',0,34,160,27,3
	.word	172092
	.byte	12,34,163,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	150374
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_GOOD_PACKETS',0,34,168,27,3
	.word	172169
	.byte	12,34,171,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	150505
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_HEADER_ERROR_OCTETS',0,34,176,27,3
	.word	172247
	.byte	12,34,179,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	150631
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_HEADER_ERROR_PACKETS',0,34,184,27,3
	.word	172332
	.byte	12,34,187,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	150782
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_NO_PAYLOAD_OCTETS',0,34,192,27,3
	.word	172418
	.byte	12,34,195,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	150903
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_NO_PAYLOAD_PACKETS',0,34,200,27,3
	.word	172501
	.byte	12,34,203,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	151049
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_UDP_CHECKSUM_DISABLED_PACKETS',0,34,208,27,3
	.word	172585
	.byte	12,34,211,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	151217
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS',0,34,216,27,3
	.word	172680
	.byte	12,34,219,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	151358
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV6_GOOD_OCTETS',0,34,224,27,3
	.word	172773
	.byte	12,34,227,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	151464
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV6_GOOD_PACKETS',0,34,232,27,3
	.word	172850
	.byte	12,34,235,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	151595
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV6_HEADER_ERROR_OCTETS',0,34,240,27,3
	.word	172928
	.byte	12,34,243,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	151721
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV6_HEADER_ERROR_PACKETS',0,34,248,27,3
	.word	173013
	.byte	12,34,251,27,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	151872
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV6_NO_PAYLOAD_OCTETS',0,34,128,28,3
	.word	173099
	.byte	12,34,131,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	151993
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXIPV6_NO_PAYLOAD_PACKETS',0,34,136,28,3
	.word	173182
	.byte	12,34,139,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	152139
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXTCP_ERROR_OCTETS',0,34,144,28,3
	.word	173266
	.byte	12,34,147,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	152245
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXTCP_ERROR_PACKETS',0,34,152,28,3
	.word	173343
	.byte	12,34,155,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	152376
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXTCP_GOOD_OCTETS',0,34,160,28,3
	.word	173421
	.byte	12,34,163,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	152479
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXTCP_GOOD_PACKETS',0,34,168,28,3
	.word	173497
	.byte	12,34,171,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	152607
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXUDP_ERROR_OCTETS',0,34,176,28,3
	.word	173574
	.byte	12,34,179,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	152713
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXUDP_ERROR_PACKETS',0,34,184,28,3
	.word	173651
	.byte	12,34,187,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	152844
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXUDP_GOOD_OCTETS',0,34,192,28,3
	.word	173729
	.byte	12,34,195,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	152947
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RXUDP_GOOD_PACKETS',0,34,200,28,3
	.word	173805
	.byte	12,34,203,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	153075
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD',0,34,208,28,3
	.word	173882
	.byte	12,34,211,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	153242
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_128TO255OCTETS_PACKETS_GOOD_BAD',0,34,216,28,3
	.word	173976
	.byte	12,34,219,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	153406
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_256TO511OCTETS_PACKETS_GOOD_BAD',0,34,224,28,3
	.word	174069
	.byte	12,34,227,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	153570
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_512TO1023OCTETS_PACKETS_GOOD_BAD',0,34,232,28,3
	.word	174162
	.byte	12,34,235,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	153737
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_64OCTETS_PACKETS_GOOD_BAD',0,34,240,28,3
	.word	174256
	.byte	12,34,243,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	153884
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_65TO127OCTETS_PACKETS_GOOD_BAD',0,34,248,28,3
	.word	174343
	.byte	12,34,251,28,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	154045
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_ALIGNMENT_ERROR_PACKETS',0,34,128,29,3
	.word	174435
	.byte	12,34,131,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	154188
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_BROADCAST_PACKETS_GOOD',0,34,136,29,3
	.word	174520
	.byte	12,34,139,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	154328
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_CONTROL_PACKETS_GOOD',0,34,144,29,3
	.word	174604
	.byte	12,34,147,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	154463
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_CRC_ERROR_PACKETS',0,34,152,29,3
	.word	174686
	.byte	12,34,155,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	154593
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_FIFO_OVERFLOW_PACKETS',0,34,160,29,3
	.word	174765
	.byte	12,34,163,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	154733
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_JABBER_ERROR_PACKETS',0,34,168,29,3
	.word	174848
	.byte	12,34,171,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	154869
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_LENGTH_ERROR_PACKETS',0,34,176,29,3
	.word	174930
	.byte	12,34,179,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	155005
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_LPI_TRAN_CNTR',0,34,184,29,3
	.word	175012
	.byte	12,34,187,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	155127
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_LPI_USEC_CNTR',0,34,192,29,3
	.word	175087
	.byte	12,34,195,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	155249
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_MULTICAST_PACKETS_GOOD',0,34,200,29,3
	.word	175162
	.byte	12,34,203,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	155389
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_OCTET_COUNT_GOOD',0,34,208,29,3
	.word	175246
	.byte	12,34,211,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	155492
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_OCTET_COUNT_GOOD_BAD',0,34,216,29,3
	.word	175324
	.byte	12,34,219,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	155604
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_OUT_OF_RANGE_TYPE_PACKETS',0,34,224,29,3
	.word	175406
	.byte	12,34,227,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	155752
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_OVERSIZE_PACKETS_GOOD',0,34,232,29,3
	.word	175493
	.byte	12,34,235,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	155891
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_PACKETS_COUNT_GOOD_BAD',0,34,240,29,3
	.word	175576
	.byte	12,34,243,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	156030
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_PAUSE_PACKETS',0,34,248,29,3
	.word	175660
	.byte	12,34,251,29,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	156154
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_RECEIVE_ERROR_PACKETS',0,34,128,30,3
	.word	175735
	.byte	12,34,131,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	156292
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_RUNT_ERROR_PACKETS',0,34,136,30,3
	.word	175818
	.byte	12,34,139,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	156425
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_UNDERSIZE_PACKETS_GOOD',0,34,144,30,3
	.word	175898
	.byte	12,34,147,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	156567
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_UNICAST_PACKETS_GOOD',0,34,152,30,3
	.word	175982
	.byte	12,34,155,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	156703
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_VLAN_PACKETS_GOOD_BAD',0,34,160,30,3
	.word	176064
	.byte	12,34,163,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	156844
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_RX_WATCHDOG_ERROR_PACKETS',0,34,168,30,3
	.word	176147
	.byte	12,34,171,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	156984
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_SKEWCTL',0,34,176,30,3
	.word	176231
	.byte	12,34,179,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	157124
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD',0,34,184,30,3
	.word	176297
	.byte	12,34,187,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	157291
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_128TO255OCTETS_PACKETS_GOOD_BAD',0,34,192,30,3
	.word	176391
	.byte	12,34,195,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	157455
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_256TO511OCTETS_PACKETS_GOOD_BAD',0,34,200,30,3
	.word	176484
	.byte	12,34,203,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	157619
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_512TO1023OCTETS_PACKETS_GOOD_BAD',0,34,208,30,3
	.word	176577
	.byte	12,34,211,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	157786
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_64OCTETS_PACKETS_GOOD_BAD',0,34,216,30,3
	.word	176671
	.byte	12,34,219,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	157933
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_65TO127OCTETS_PACKETS_GOOD_BAD',0,34,224,30,3
	.word	176758
	.byte	12,34,227,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	158094
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_BROADCAST_PACKETS_GOOD',0,34,232,30,3
	.word	176850
	.byte	12,34,235,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	158234
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_BROADCAST_PACKETS_GOOD_BAD',0,34,240,30,3
	.word	176934
	.byte	12,34,243,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	158383
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_CARRIER_ERROR_PACKETS',0,34,248,30,3
	.word	177022
	.byte	12,34,251,30,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	158519
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_DEFERRED_PACKETS',0,34,128,31,3
	.word	177105
	.byte	12,34,131,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	158646
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_EXCESSIVE_COLLISION_PACKETS',0,34,136,31,3
	.word	177183
	.byte	12,34,139,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	158796
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_EXCESSIVE_DEFERRAL_ERROR',0,34,144,31,3
	.word	177272
	.byte	12,34,147,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	158940
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_LATE_COLLISION_PACKETS',0,34,152,31,3
	.word	177358
	.byte	12,34,155,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	159081
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_LPI_TRAN_CNTR',0,34,160,31,3
	.word	177442
	.byte	12,34,163,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	159203
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_LPI_USEC_CNTR',0,34,168,31,3
	.word	177517
	.byte	12,34,171,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	159325
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_MULTICAST_PACKETS_GOOD',0,34,176,31,3
	.word	177592
	.byte	12,34,179,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	159465
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_MULTICAST_PACKETS_GOOD_BAD',0,34,184,31,3
	.word	177676
	.byte	12,34,187,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	159614
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_MULTIPLE_COLLISION_GOOD_PACKETS',0,34,192,31,3
	.word	177764
	.byte	12,34,195,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	159774
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_OCTET_COUNT_GOOD',0,34,200,31,3
	.word	177857
	.byte	12,34,203,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	159877
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_OCTET_COUNT_GOOD_BAD',0,34,208,31,3
	.word	177935
	.byte	12,34,211,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	159989
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_OSIZE_PACKETS_GOOD',0,34,216,31,3
	.word	178017
	.byte	12,34,219,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	160120
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_PACKET_COUNT_GOOD',0,34,224,31,3
	.word	178097
	.byte	12,34,227,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	160248
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_PACKET_COUNT_GOOD_BAD',0,34,232,31,3
	.word	178176
	.byte	12,34,235,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	160385
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_PAUSE_PACKETS',0,34,240,31,3
	.word	178259
	.byte	12,34,243,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	160506
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_SINGLE_COLLISION_GOOD_PACKETS',0,34,248,31,3
	.word	178334
	.byte	12,34,251,31,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	160662
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_UNDERFLOW_ERROR_PACKETS',0,34,128,32,3
	.word	178425
	.byte	12,34,131,32,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	160805
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_UNICAST_PACKETS_GOOD_BAD',0,34,136,32,3
	.word	178510
	.byte	12,34,139,32,9,4,13
	.byte	'U',0
	.word	438
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	454
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	160950
	.byte	4,2,35,0,0,20
	.byte	'Ifx_GETH_TX_VLAN_PACKETS_GOOD',0,34,144,32,3
	.word	178596
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ0',0,34,156,32,25,28,13
	.byte	'OPERATION_MODE',0
	.word	170366
	.byte	4,2,35,0,13
	.byte	'UNDERFLOW',0
	.word	170530
	.byte	4,2,35,4,13
	.byte	'DEBUG',0
	.word	170215
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	4454
	.byte	8,2,35,12,13
	.byte	'ETS_STATUS',0
	.word	170288
	.byte	4,2,35,20,13
	.byte	'QUANTUM_WEIGHT',0
	.word	170448
	.byte	4,2,35,24,0,14
	.word	178675
	.byte	20
	.byte	'Ifx_GETH_MTL_TXQ0',0,34,164,32,3
	.word	178823
	.byte	10
	.byte	'_Ifx_GETH_MTL_Q0',0,34,179,32,25,4,13
	.byte	'INTERRUPT_CONTROL_STATUS',0
	.word	169317
	.byte	4,2,35,0,0,14
	.word	178855
	.byte	20
	.byte	'Ifx_GETH_MTL_Q0',0,34,182,32,3
	.word	178913
	.byte	10
	.byte	'_Ifx_GETH_MTL_RXQ0',0,34,197,32,25,16,13
	.byte	'OPERATION_MODE',0
	.word	169738
	.byte	4,2,35,0,13
	.byte	'MISSED_PACKET_OVERFLOW_CNT',0
	.word	169644
	.byte	4,2,35,4,13
	.byte	'DEBUG',0
	.word	169571
	.byte	4,2,35,8,13
	.byte	'CONTROL',0
	.word	169496
	.byte	4,2,35,12,0,14
	.word	178943
	.byte	20
	.byte	'Ifx_GETH_MTL_RXQ0',0,34,203,32,3
	.word	179061
	.byte	10
	.byte	'_Ifx_GETH_MTL_TXQ',0,34,218,32,25,40,13
	.byte	'OPERATION_MODE',0
	.word	170984
	.byte	4,2,35,0,13
	.byte	'UNDERFLOW',0
	.word	171228
	.byte	4,2,35,4,13
	.byte	'DEBUG',0
	.word	170607
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	2634
	.byte	4,2,35,12,13
	.byte	'ETS_CONTROL',0
	.word	170679
	.byte	4,2,35,16,13
	.byte	'ETS_STATUS',0
	.word	170757
	.byte	4,2,35,20,13
	.byte	'QUANTUM_WEIGHT',0
	.word	171065
	.byte	4,2,35,24,13
	.byte	'SENDSLOPECREDIT',0
	.word	171146
	.byte	4,2,35,28,13
	.byte	'HICREDIT',0
	.word	170834
	.byte	4,2,35,32,13
	.byte	'LOCREDIT',0
	.word	170909
	.byte	4,2,35,36,0,14
	.word	179093
	.byte	20
	.byte	'Ifx_GETH_MTL_TXQ',0,34,230,32,3
	.word	179322
	.byte	10
	.byte	'_Ifx_GETH_MTL_Q',0,34,245,32,25,4,13
	.byte	'INTERRUPT_CONTROL_STATUS',0
	.word	169407
	.byte	4,2,35,0,0,14
	.word	179353
	.byte	20
	.byte	'Ifx_GETH_MTL_Q',0,34,248,32,3
	.word	179410
	.byte	10
	.byte	'_Ifx_GETH_MTL_RXQ',0,34,135,33,25,16,13
	.byte	'OPERATION_MODE',0
	.word	170134
	.byte	4,2,35,0,13
	.byte	'MISSED_PACKET_OVERFLOW_CNT',0
	.word	170041
	.byte	4,2,35,4,13
	.byte	'DEBUG',0
	.word	169894
	.byte	4,2,35,8,13
	.byte	'CONTROL',0
	.word	169820
	.byte	4,2,35,12,0,14
	.word	179439
	.byte	20
	.byte	'Ifx_GETH_MTL_RXQ',0,34,141,33,3
	.word	179556
	.byte	10
	.byte	'_Ifx_GETH_DMA_CH',0,34,156,33,25,128,1,13
	.byte	'CONTROL',0
	.word	161417
	.byte	4,2,35,0,13
	.byte	'TX_CONTROL',0
	.word	162835
	.byte	4,2,35,4,13
	.byte	'RX_CONTROL',0
	.word	162246
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	4454
	.byte	8,2,35,12,13
	.byte	'TXDESC_LIST_ADDRESS',0
	.word	162581
	.byte	4,2,35,20,13
	.byte	'reserved_18',0
	.word	2634
	.byte	4,2,35,24,13
	.byte	'RXDESC_LIST_ADDRESS',0
	.word	161992
	.byte	4,2,35,28,13
	.byte	'TXDESC_TAIL_POINTER',0
	.word	162750
	.byte	4,2,35,32,13
	.byte	'reserved_24',0
	.word	2634
	.byte	4,2,35,36,13
	.byte	'RXDESC_TAIL_POINTER',0
	.word	162161
	.byte	4,2,35,40,13
	.byte	'TXDESC_RING_LENGTH',0
	.word	162666
	.byte	4,2,35,44,13
	.byte	'RXDESC_RING_LENGTH',0
	.word	162077
	.byte	4,2,35,48,13
	.byte	'INTERRUPT_ENABLE',0
	.word	161830
	.byte	4,2,35,52,13
	.byte	'RX_INTERRUPT_WATCHDOG_TIMER',0
	.word	162322
	.byte	4,2,35,56,13
	.byte	'SLOT_FUNCTION_CONTROL_STATUS',0
	.word	162415
	.byte	4,2,35,60,13
	.byte	'reserved_40',0
	.word	2634
	.byte	4,2,35,64,13
	.byte	'CURRENT_APP_TXDESC',0
	.word	161746
	.byte	4,2,35,68,13
	.byte	'reserved_48',0
	.word	2634
	.byte	4,2,35,72,13
	.byte	'CURRENT_APP_RXDESC',0
	.word	161576
	.byte	4,2,35,76,13
	.byte	'reserved_50',0
	.word	2634
	.byte	4,2,35,80,13
	.byte	'CURRENT_APP_TXBUFFER',0
	.word	161660
	.byte	4,2,35,84,13
	.byte	'reserved_58',0
	.word	2634
	.byte	4,2,35,88,13
	.byte	'CURRENT_APP_RXBUFFER',0
	.word	161490
	.byte	4,2,35,92,13
	.byte	'STATUS',0
	.word	162509
	.byte	4,2,35,96,13
	.byte	'MISS_FRAME_CNT',0
	.word	161912
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	3825
	.byte	24,2,35,104,0,14
	.word	179587
	.byte	20
	.byte	'Ifx_GETH_DMA_CH',0,34,184,33,3
	.word	180265
	.byte	10
	.byte	'_Ifx_GETH_ACCEND',0,34,199,33,25,8,13
	.byte	'ACCEN0D',0
	.word	161209
	.byte	4,2,35,0,13
	.byte	'ACCEN1D',0
	.word	161282
	.byte	4,2,35,4,0,14
	.word	180295
	.byte	20
	.byte	'Ifx_GETH_ACCEND',0,34,203,33,3
	.word	180353
	.byte	12,34,226,33,8,4,13
	.byte	'MAC_VLAN_TAG_DATA',0
	.word	168385
	.byte	4,2,35,0,13
	.byte	'MAC_VLAN_TAG_FILTER',0
	.word	168461
	.byte	4,2,35,0,0,12,34,233,33,8,4,13
	.byte	'MAC_VLAN_INCL',0
	.word	168163
	.byte	4,2,35,0,13
	.byte	'MAC_VLAN_INCL_Q',0
	.word	168235
	.byte	4,2,35,0,0,12,34,254,33,8,4,13
	.byte	'MAC_RWK_PACKET_FILTER',0
	.word	165987
	.byte	4,2,35,0,13
	.byte	'RWK_FILTER_COMMAND_0',0
	.word	171383
	.byte	4,2,35,0,13
	.byte	'RWK_FILTER_OFFSET_0',0
	.word	171535
	.byte	4,2,35,0,13
	.byte	'RWK_FILTER_CRC',0
	.word	171462
	.byte	4,2,35,0,13
	.byte	'RWK_FILTER_BYTE_MASK',0
	.word	171304
	.byte	4,2,35,0,0,15,212,1
	.word	613
	.byte	16,211,1,0,15,40
	.word	613
	.byte	16,39,0,15,196,1
	.word	613
	.byte	16,195,1,0,15,128,6
	.word	613
	.byte	16,255,5,0,15,248,4
	.word	613
	.byte	16,247,4,0,15,112
	.word	613
	.byte	16,111,0,15,204,1
	.word	613
	.byte	16,203,1,0,14
	.word	178675
	.byte	14
	.word	178855
	.byte	14
	.word	178943
	.byte	14
	.word	179093
	.byte	14
	.word	179353
	.byte	14
	.word	179439
	.byte	14
	.word	179093
	.byte	14
	.word	179353
	.byte	14
	.word	179439
	.byte	14
	.word	179093
	.byte	14
	.word	179353
	.byte	14
	.word	179439
	.byte	15,128,4
	.word	613
	.byte	16,255,3,0,15,236,1
	.word	613
	.byte	16,235,1,0,15,128,4
	.word	179587
	.byte	16,3,0,14
	.word	180807
	.byte	15,128,26
	.word	613
	.byte	16,255,25,0,15,32
	.word	180295
	.byte	16,3,0,14
	.word	180833
	.byte	15,188,1
	.word	613
	.byte	16,187,1,0,10
	.byte	'_Ifx_GETH',0,34,218,33,25,128,66,13
	.byte	'MAC_CONFIGURATION',0
	.word	163980
	.byte	4,2,35,0,13
	.byte	'MAC_EXT_CONFIGURATION',0
	.word	164269
	.byte	4,2,35,4,13
	.byte	'MAC_PACKET_FILTER',0
	.word	165268
	.byte	4,2,35,8,13
	.byte	'MAC_WATCHDOG_TIMEOUT',0
	.word	168539
	.byte	4,2,35,12,13
	.byte	'reserved_10',0
	.word	48110
	.byte	64,2,35,16,13
	.byte	'MAC_VLAN_TAG_CTRL',0
	.word	168309
	.byte	4,2,35,80,41
	.word	180383
	.byte	4,2,35,84,13
	.byte	'MAC_VLAN_HASH_TABLE',0
	.word	168085
	.byte	4,2,35,88,13
	.byte	'reserved_5C',0
	.word	2634
	.byte	4,2,35,92,41
	.word	180446
	.byte	4,2,35,96,13
	.byte	'MAC_INNER_VLAN_INCL',0
	.word	164645
	.byte	4,2,35,100,13
	.byte	'reserved_68',0
	.word	4454
	.byte	8,2,35,104,13
	.byte	'MAC_Q0_TX_FLOW_CTRL',0
	.word	165909
	.byte	4,2,35,112,13
	.byte	'reserved_74',0
	.word	48070
	.byte	28,2,35,116,13
	.byte	'MAC_RX_FLOW_CTRL',0
	.word	166355
	.byte	4,3,35,144,1,13
	.byte	'MAC_RXQ_CTRL4',0
	.word	166283
	.byte	4,3,35,148,1,13
	.byte	'reserved_98',0
	.word	4454
	.byte	8,3,35,152,1,13
	.byte	'MAC_RXQ_CTRL0',0
	.word	166067
	.byte	4,3,35,160,1,13
	.byte	'MAC_RXQ_CTRL1',0
	.word	166139
	.byte	4,3,35,164,1,13
	.byte	'MAC_RXQ_CTRL2',0
	.word	166211
	.byte	4,3,35,168,1,13
	.byte	'reserved_AC',0
	.word	2634
	.byte	4,3,35,172,1,13
	.byte	'MAC_INTERRUPT_STATUS',0
	.word	164802
	.byte	4,3,35,176,1,13
	.byte	'MAC_INTERRUPT_ENABLE',0
	.word	164723
	.byte	4,3,35,180,1,13
	.byte	'MAC_RX_TX_STATUS',0
	.word	166430
	.byte	4,3,35,184,1,13
	.byte	'reserved_BC',0
	.word	2634
	.byte	4,3,35,188,1,13
	.byte	'MAC_PMT_CONTROL_STATUS',0
	.word	165427
	.byte	4,3,35,192,1,41
	.word	180501
	.byte	4,3,35,196,1,13
	.byte	'reserved_C8',0
	.word	4454
	.byte	8,3,35,200,1,13
	.byte	'MAC_LPI_CONTROL_STATUS',0
	.word	164881
	.byte	4,3,35,208,1,13
	.byte	'MAC_LPI_TIMERS_CONTROL',0
	.word	165040
	.byte	4,3,35,212,1,13
	.byte	'MAC_LPI_ENTRY_TIMER',0
	.word	164962
	.byte	4,3,35,216,1,13
	.byte	'MAC_1US_TIC_COUNTER',0
	.word	163602
	.byte	4,3,35,220,1,13
	.byte	'reserved_E0',0
	.word	3825
	.byte	24,3,35,224,1,13
	.byte	'MAC_PHYIF_CONTROL_STATUS',0
	.word	165344
	.byte	4,3,35,248,1,13
	.byte	'reserved_FC',0
	.word	85258
	.byte	20,3,35,252,1,13
	.byte	'MAC_VERSION',0
	.word	168015
	.byte	4,3,35,144,2,13
	.byte	'MAC_DEBUG',0
	.word	164130
	.byte	4,3,35,148,2,13
	.byte	'reserved_118',0
	.word	2634
	.byte	4,3,35,152,2,13
	.byte	'MAC_HW_FEATURE0',0
	.word	164349
	.byte	4,3,35,156,2,13
	.byte	'MAC_HW_FEATURE1',0
	.word	164423
	.byte	4,3,35,160,2,13
	.byte	'MAC_HW_FEATURE2',0
	.word	164497
	.byte	4,3,35,164,2,13
	.byte	'MAC_HW_FEATURE3',0
	.word	164571
	.byte	4,3,35,168,2,13
	.byte	'reserved_12C',0
	.word	180652
	.byte	212,1,3,35,172,2,13
	.byte	'MAC_MDIO_ADDRESS',0
	.word	165121
	.byte	4,3,35,128,4,13
	.byte	'MAC_MDIO_DATA',0
	.word	165196
	.byte	4,3,35,132,4,13
	.byte	'reserved_208',0
	.word	180663
	.byte	40,3,35,136,4,13
	.byte	'MAC_CSR_SW_CTRL',0
	.word	164056
	.byte	4,3,35,176,4,13
	.byte	'reserved_234',0
	.word	2634
	.byte	4,3,35,180,4,13
	.byte	'MAC_EXT_CFG1',0
	.word	164198
	.byte	4,3,35,184,4,13
	.byte	'reserved_23C',0
	.word	180672
	.byte	196,1,3,35,188,4,13
	.byte	'MAC_ADDRESS_HIGH0',0
	.word	163755
	.byte	4,3,35,128,6,13
	.byte	'MAC_ADDRESS_LOW0',0
	.word	163905
	.byte	4,3,35,132,6,13
	.byte	'MAC_ADDRESS_HIGH1',0
	.word	163680
	.byte	4,3,35,136,6,13
	.byte	'MAC_ADDRESS_LOW1',0
	.word	163831
	.byte	4,3,35,140,6,13
	.byte	'MAC_ADDRESS_HIGH2',0
	.word	163680
	.byte	4,3,35,144,6,13
	.byte	'MAC_ADDRESS_LOW2',0
	.word	163831
	.byte	4,3,35,148,6,13
	.byte	'MAC_ADDRESS_HIGH3',0
	.word	163680
	.byte	4,3,35,152,6,13
	.byte	'MAC_ADDRESS_LOW3',0
	.word	163831
	.byte	4,3,35,156,6,13
	.byte	'MAC_ADDRESS_HIGH4',0
	.word	163680
	.byte	4,3,35,160,6,13
	.byte	'MAC_ADDRESS_LOW4',0
	.word	163831
	.byte	4,3,35,164,6,13
	.byte	'MAC_ADDRESS_HIGH5',0
	.word	163680
	.byte	4,3,35,168,6,13
	.byte	'MAC_ADDRESS_LOW5',0
	.word	163831
	.byte	4,3,35,172,6,13
	.byte	'MAC_ADDRESS_HIGH6',0
	.word	163680
	.byte	4,3,35,176,6,13
	.byte	'MAC_ADDRESS_LOW6',0
	.word	163831
	.byte	4,3,35,180,6,13
	.byte	'MAC_ADDRESS_HIGH7',0
	.word	163680
	.byte	4,3,35,184,6,13
	.byte	'MAC_ADDRESS_LOW7',0
	.word	163831
	.byte	4,3,35,188,6,13
	.byte	'MAC_ADDRESS_HIGH8',0
	.word	163680
	.byte	4,3,35,192,6,13
	.byte	'MAC_ADDRESS_LOW8',0
	.word	163831
	.byte	4,3,35,196,6,13
	.byte	'MAC_ADDRESS_HIGH9',0
	.word	163680
	.byte	4,3,35,200,6,13
	.byte	'MAC_ADDRESS_LOW9',0
	.word	163831
	.byte	4,3,35,204,6,13
	.byte	'MAC_ADDRESS_HIGH10',0
	.word	163680
	.byte	4,3,35,208,6,13
	.byte	'MAC_ADDRESS_LOW10',0
	.word	163831
	.byte	4,3,35,212,6,13
	.byte	'MAC_ADDRESS_HIGH11',0
	.word	163680
	.byte	4,3,35,216,6,13
	.byte	'MAC_ADDRESS_LOW11',0
	.word	163831
	.byte	4,3,35,220,6,13
	.byte	'MAC_ADDRESS_HIGH12',0
	.word	163680
	.byte	4,3,35,224,6,13
	.byte	'MAC_ADDRESS_LOW12',0
	.word	163831
	.byte	4,3,35,228,6,13
	.byte	'MAC_ADDRESS_HIGH13',0
	.word	163680
	.byte	4,3,35,232,6,13
	.byte	'MAC_ADDRESS_LOW13',0
	.word	163831
	.byte	4,3,35,236,6,13
	.byte	'MAC_ADDRESS_HIGH14',0
	.word	163680
	.byte	4,3,35,240,6,13
	.byte	'MAC_ADDRESS_LOW14',0
	.word	163831
	.byte	4,3,35,244,6,13
	.byte	'MAC_ADDRESS_HIGH15',0
	.word	163680
	.byte	4,3,35,248,6,13
	.byte	'MAC_ADDRESS_LOW15',0
	.word	163831
	.byte	4,3,35,252,6,13
	.byte	'MAC_ADDRESS_HIGH16',0
	.word	163680
	.byte	4,3,35,128,7,13
	.byte	'MAC_ADDRESS_LOW16',0
	.word	163831
	.byte	4,3,35,132,7,13
	.byte	'MAC_ADDRESS_HIGH17',0
	.word	163680
	.byte	4,3,35,136,7,13
	.byte	'MAC_ADDRESS_LOW17',0
	.word	163831
	.byte	4,3,35,140,7,13
	.byte	'MAC_ADDRESS_HIGH18',0
	.word	163680
	.byte	4,3,35,144,7,13
	.byte	'MAC_ADDRESS_LOW18',0
	.word	163831
	.byte	4,3,35,148,7,13
	.byte	'MAC_ADDRESS_HIGH19',0
	.word	163680
	.byte	4,3,35,152,7,13
	.byte	'MAC_ADDRESS_LOW19',0
	.word	163831
	.byte	4,3,35,156,7,13
	.byte	'MAC_ADDRESS_HIGH20',0
	.word	163680
	.byte	4,3,35,160,7,13
	.byte	'MAC_ADDRESS_LOW20',0
	.word	163831
	.byte	4,3,35,164,7,13
	.byte	'MAC_ADDRESS_HIGH21',0
	.word	163680
	.byte	4,3,35,168,7,13
	.byte	'MAC_ADDRESS_LOW21',0
	.word	163831
	.byte	4,3,35,172,7,13
	.byte	'MAC_ADDRESS_HIGH22',0
	.word	163680
	.byte	4,3,35,176,7,13
	.byte	'MAC_ADDRESS_LOW22',0
	.word	163831
	.byte	4,3,35,180,7,13
	.byte	'MAC_ADDRESS_HIGH23',0
	.word	163680
	.byte	4,3,35,184,7,13
	.byte	'MAC_ADDRESS_LOW23',0
	.word	163831
	.byte	4,3,35,188,7,13
	.byte	'MAC_ADDRESS_HIGH24',0
	.word	163680
	.byte	4,3,35,192,7,13
	.byte	'MAC_ADDRESS_LOW24',0
	.word	163831
	.byte	4,3,35,196,7,13
	.byte	'MAC_ADDRESS_HIGH25',0
	.word	163680
	.byte	4,3,35,200,7,13
	.byte	'MAC_ADDRESS_LOW25',0
	.word	163831
	.byte	4,3,35,204,7,13
	.byte	'MAC_ADDRESS_HIGH26',0
	.word	163680
	.byte	4,3,35,208,7,13
	.byte	'MAC_ADDRESS_LOW26',0
	.word	163831
	.byte	4,3,35,212,7,13
	.byte	'MAC_ADDRESS_HIGH27',0
	.word	163680
	.byte	4,3,35,216,7,13
	.byte	'MAC_ADDRESS_LOW27',0
	.word	163831
	.byte	4,3,35,220,7,13
	.byte	'MAC_ADDRESS_HIGH28',0
	.word	163680
	.byte	4,3,35,224,7,13
	.byte	'MAC_ADDRESS_LOW28',0
	.word	163831
	.byte	4,3,35,228,7,13
	.byte	'MAC_ADDRESS_HIGH29',0
	.word	163680
	.byte	4,3,35,232,7,13
	.byte	'MAC_ADDRESS_LOW29',0
	.word	163831
	.byte	4,3,35,236,7,13
	.byte	'MAC_ADDRESS_HIGH30',0
	.word	163680
	.byte	4,3,35,240,7,13
	.byte	'MAC_ADDRESS_LOW30',0
	.word	163831
	.byte	4,3,35,244,7,13
	.byte	'MAC_ADDRESS_HIGH31',0
	.word	163680
	.byte	4,3,35,248,7,13
	.byte	'MAC_ADDRESS_LOW31',0
	.word	163831
	.byte	4,3,35,252,7,13
	.byte	'reserved_400',0
	.word	180683
	.byte	128,6,3,35,128,8,13
	.byte	'MMC_CONTROL',0
	.word	168618
	.byte	4,3,35,128,14,13
	.byte	'MMC_RX_INTERRUPT',0
	.word	168851
	.byte	4,3,35,132,14,13
	.byte	'MMC_TX_INTERRUPT',0
	.word	169006
	.byte	4,3,35,136,14,13
	.byte	'MMC_RX_INTERRUPT_MASK',0
	.word	168926
	.byte	4,3,35,140,14,13
	.byte	'MMC_TX_INTERRUPT_MASK',0
	.word	169081
	.byte	4,3,35,144,14,13
	.byte	'TX_OCTET_COUNT_GOOD_BAD',0
	.word	177935
	.byte	4,3,35,148,14,13
	.byte	'TX_PACKET_COUNT_GOOD_BAD',0
	.word	178176
	.byte	4,3,35,152,14,13
	.byte	'TX_BROADCAST_PACKETS_GOOD',0
	.word	176850
	.byte	4,3,35,156,14,13
	.byte	'TX_MULTICAST_PACKETS_GOOD',0
	.word	177592
	.byte	4,3,35,160,14,13
	.byte	'TX_64OCTETS_PACKETS_GOOD_BAD',0
	.word	176671
	.byte	4,3,35,164,14,13
	.byte	'TX_65TO127OCTETS_PACKETS_GOOD_BAD',0
	.word	176758
	.byte	4,3,35,168,14,13
	.byte	'TX_128TO255OCTETS_PACKETS_GOOD_BAD',0
	.word	176391
	.byte	4,3,35,172,14,13
	.byte	'TX_256TO511OCTETS_PACKETS_GOOD_BAD',0
	.word	176484
	.byte	4,3,35,176,14,13
	.byte	'TX_512TO1023OCTETS_PACKETS_GOOD_BAD',0
	.word	176577
	.byte	4,3,35,180,14,13
	.byte	'TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD',0
	.word	176297
	.byte	4,3,35,184,14,13
	.byte	'TX_UNICAST_PACKETS_GOOD_BAD',0
	.word	178510
	.byte	4,3,35,188,14,13
	.byte	'TX_MULTICAST_PACKETS_GOOD_BAD',0
	.word	177676
	.byte	4,3,35,192,14,13
	.byte	'TX_BROADCAST_PACKETS_GOOD_BAD',0
	.word	176934
	.byte	4,3,35,196,14,13
	.byte	'TX_UNDERFLOW_ERROR_PACKETS',0
	.word	178425
	.byte	4,3,35,200,14,13
	.byte	'TX_SINGLE_COLLISION_GOOD_PACKETS',0
	.word	178334
	.byte	4,3,35,204,14,13
	.byte	'TX_MULTIPLE_COLLISION_GOOD_PACKETS',0
	.word	177764
	.byte	4,3,35,208,14,13
	.byte	'TX_DEFERRED_PACKETS',0
	.word	177105
	.byte	4,3,35,212,14,13
	.byte	'TX_LATE_COLLISION_PACKETS',0
	.word	177358
	.byte	4,3,35,216,14,13
	.byte	'TX_EXCESSIVE_COLLISION_PACKETS',0
	.word	177183
	.byte	4,3,35,220,14,13
	.byte	'TX_CARRIER_ERROR_PACKETS',0
	.word	177022
	.byte	4,3,35,224,14,13
	.byte	'TX_OCTET_COUNT_GOOD',0
	.word	177857
	.byte	4,3,35,228,14,13
	.byte	'TX_PACKET_COUNT_GOOD',0
	.word	178097
	.byte	4,3,35,232,14,13
	.byte	'TX_EXCESSIVE_DEFERRAL_ERROR',0
	.word	177272
	.byte	4,3,35,236,14,13
	.byte	'TX_PAUSE_PACKETS',0
	.word	178259
	.byte	4,3,35,240,14,13
	.byte	'TX_VLAN_PACKETS_GOOD',0
	.word	178596
	.byte	4,3,35,244,14,13
	.byte	'TX_OSIZE_PACKETS_GOOD',0
	.word	178017
	.byte	4,3,35,248,14,13
	.byte	'reserved_77C',0
	.word	2634
	.byte	4,3,35,252,14,13
	.byte	'RX_PACKETS_COUNT_GOOD_BAD',0
	.word	175576
	.byte	4,3,35,128,15,13
	.byte	'RX_OCTET_COUNT_GOOD_BAD',0
	.word	175324
	.byte	4,3,35,132,15,13
	.byte	'RX_OCTET_COUNT_GOOD',0
	.word	175246
	.byte	4,3,35,136,15,13
	.byte	'RX_BROADCAST_PACKETS_GOOD',0
	.word	174520
	.byte	4,3,35,140,15,13
	.byte	'RX_MULTICAST_PACKETS_GOOD',0
	.word	175162
	.byte	4,3,35,144,15,13
	.byte	'RX_CRC_ERROR_PACKETS',0
	.word	174686
	.byte	4,3,35,148,15,13
	.byte	'RX_ALIGNMENT_ERROR_PACKETS',0
	.word	174435
	.byte	4,3,35,152,15,13
	.byte	'RX_RUNT_ERROR_PACKETS',0
	.word	175818
	.byte	4,3,35,156,15,13
	.byte	'RX_JABBER_ERROR_PACKETS',0
	.word	174848
	.byte	4,3,35,160,15,13
	.byte	'RX_UNDERSIZE_PACKETS_GOOD',0
	.word	175898
	.byte	4,3,35,164,15,13
	.byte	'RX_OVERSIZE_PACKETS_GOOD',0
	.word	175493
	.byte	4,3,35,168,15,13
	.byte	'RX_64OCTETS_PACKETS_GOOD_BAD',0
	.word	174256
	.byte	4,3,35,172,15,13
	.byte	'RX_65TO127OCTETS_PACKETS_GOOD_BAD',0
	.word	174343
	.byte	4,3,35,176,15,13
	.byte	'RX_128TO255OCTETS_PACKETS_GOOD_BAD',0
	.word	173976
	.byte	4,3,35,180,15,13
	.byte	'RX_256TO511OCTETS_PACKETS_GOOD_BAD',0
	.word	174069
	.byte	4,3,35,184,15,13
	.byte	'RX_512TO1023OCTETS_PACKETS_GOOD_BAD',0
	.word	174162
	.byte	4,3,35,188,15,13
	.byte	'RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD',0
	.word	173882
	.byte	4,3,35,192,15,13
	.byte	'RX_UNICAST_PACKETS_GOOD',0
	.word	175982
	.byte	4,3,35,196,15,13
	.byte	'RX_LENGTH_ERROR_PACKETS',0
	.word	174930
	.byte	4,3,35,200,15,13
	.byte	'RX_OUT_OF_RANGE_TYPE_PACKETS',0
	.word	175406
	.byte	4,3,35,204,15,13
	.byte	'RX_PAUSE_PACKETS',0
	.word	175660
	.byte	4,3,35,208,15,13
	.byte	'RX_FIFO_OVERFLOW_PACKETS',0
	.word	174765
	.byte	4,3,35,212,15,13
	.byte	'RX_VLAN_PACKETS_GOOD_BAD',0
	.word	176064
	.byte	4,3,35,216,15,13
	.byte	'RX_WATCHDOG_ERROR_PACKETS',0
	.word	176147
	.byte	4,3,35,220,15,13
	.byte	'RX_RECEIVE_ERROR_PACKETS',0
	.word	175735
	.byte	4,3,35,224,15,13
	.byte	'RX_CONTROL_PACKETS_GOOD',0
	.word	174604
	.byte	4,3,35,228,15,13
	.byte	'reserved_7E8',0
	.word	2634
	.byte	4,3,35,232,15,13
	.byte	'TX_LPI_USEC_CNTR',0
	.word	177517
	.byte	4,3,35,236,15,13
	.byte	'TX_LPI_TRAN_CNTR',0
	.word	177442
	.byte	4,3,35,240,15,13
	.byte	'RX_LPI_USEC_CNTR',0
	.word	175087
	.byte	4,3,35,244,15,13
	.byte	'RX_LPI_TRAN_CNTR',0
	.word	175012
	.byte	4,3,35,248,15,13
	.byte	'reserved_7FC',0
	.word	2634
	.byte	4,3,35,252,15,13
	.byte	'MMC_IPC_RX_INTERRUPT_MASK',0
	.word	168767
	.byte	4,3,35,128,16,13
	.byte	'reserved_804',0
	.word	2634
	.byte	4,3,35,132,16,13
	.byte	'MMC_IPC_RX_INTERRUPT',0
	.word	168688
	.byte	4,3,35,136,16,13
	.byte	'reserved_80C',0
	.word	2634
	.byte	4,3,35,140,16,13
	.byte	'RXIPV4_GOOD_PACKETS',0
	.word	172169
	.byte	4,3,35,144,16,13
	.byte	'RXIPV4_HEADER_ERROR_PACKETS',0
	.word	172332
	.byte	4,3,35,148,16,13
	.byte	'RXIPV4_NO_PAYLOAD_PACKETS',0
	.word	172501
	.byte	4,3,35,152,16,13
	.byte	'RXIPV4_FRAGMENTED_PACKETS',0
	.word	172008
	.byte	4,3,35,156,16,13
	.byte	'RXIPV4_UDP_CHECKSUM_DISABLED_PACKETS',0
	.word	172585
	.byte	4,3,35,160,16,13
	.byte	'RXIPV6_GOOD_PACKETS',0
	.word	172850
	.byte	4,3,35,164,16,13
	.byte	'RXIPV6_HEADER_ERROR_PACKETS',0
	.word	173013
	.byte	4,3,35,168,16,13
	.byte	'RXIPV6_NO_PAYLOAD_PACKETS',0
	.word	173182
	.byte	4,3,35,172,16,13
	.byte	'RXUDP_GOOD_PACKETS',0
	.word	173805
	.byte	4,3,35,176,16,13
	.byte	'RXUDP_ERROR_PACKETS',0
	.word	173651
	.byte	4,3,35,180,16,13
	.byte	'RXTCP_GOOD_PACKETS',0
	.word	173497
	.byte	4,3,35,184,16,13
	.byte	'RXTCP_ERROR_PACKETS',0
	.word	173343
	.byte	4,3,35,188,16,13
	.byte	'RXICMP_GOOD_PACKETS',0
	.word	171847
	.byte	4,3,35,192,16,13
	.byte	'RXICMP_ERROR_PACKETS',0
	.word	171691
	.byte	4,3,35,196,16,13
	.byte	'reserved_848',0
	.word	4454
	.byte	8,3,35,200,16,13
	.byte	'RXIPV4_GOOD_OCTETS',0
	.word	172092
	.byte	4,3,35,208,16,13
	.byte	'RXIPV4_HEADER_ERROR_OCTETS',0
	.word	172247
	.byte	4,3,35,212,16,13
	.byte	'RXIPV4_NO_PAYLOAD_OCTETS',0
	.word	172418
	.byte	4,3,35,216,16,13
	.byte	'RXIPV4_FRAGMENTED_OCTETS',0
	.word	171925
	.byte	4,3,35,220,16,13
	.byte	'RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS',0
	.word	172680
	.byte	4,3,35,224,16,13
	.byte	'RXIPV6_GOOD_OCTETS',0
	.word	172773
	.byte	4,3,35,228,16,13
	.byte	'RXIPV6_HEADER_ERROR_OCTETS',0
	.word	172928
	.byte	4,3,35,232,16,13
	.byte	'RXIPV6_NO_PAYLOAD_OCTETS',0
	.word	173099
	.byte	4,3,35,236,16,13
	.byte	'RXUDP_GOOD_OCTETS',0
	.word	173729
	.byte	4,3,35,240,16,13
	.byte	'RXUDP_ERROR_OCTETS',0
	.word	173574
	.byte	4,3,35,244,16,13
	.byte	'RXTCP_GOOD_OCTETS',0
	.word	173421
	.byte	4,3,35,248,16,13
	.byte	'RXTCP_ERROR_OCTETS',0
	.word	173266
	.byte	4,3,35,252,16,13
	.byte	'RXICMP_GOOD_OCTETS',0
	.word	171770
	.byte	4,3,35,128,17,13
	.byte	'RXICMP_ERROR_OCTETS',0
	.word	171613
	.byte	4,3,35,132,17,13
	.byte	'reserved_888',0
	.word	180694
	.byte	248,4,3,35,136,17,13
	.byte	'MAC_TIMESTAMP_CONTROL',0
	.word	167111
	.byte	4,3,35,128,22,13
	.byte	'MAC_SUB_SECOND_INCREMENT',0
	.word	166505
	.byte	4,3,35,132,22,13
	.byte	'MAC_SYSTEM_TIME_SECONDS',0
	.word	166861
	.byte	4,3,35,136,22,13
	.byte	'MAC_SYSTEM_TIME_NANOSECONDS',0
	.word	166682
	.byte	4,3,35,140,22,13
	.byte	'MAC_SYSTEM_TIME_SECONDS_UPDATE',0
	.word	166943
	.byte	4,3,35,144,22,13
	.byte	'MAC_SYSTEM_TIME_NANOSECONDS_UPDATE',0
	.word	166768
	.byte	4,3,35,148,22,13
	.byte	'MAC_TIMESTAMP_ADDEND',0
	.word	167032
	.byte	4,3,35,152,22,13
	.byte	'MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS',0
	.word	166588
	.byte	4,3,35,156,22,13
	.byte	'MAC_TIMESTAMP_STATUS',0
	.word	167752
	.byte	4,3,35,160,22,13
	.byte	'reserved_B24',0
	.word	4794
	.byte	12,3,35,164,22,13
	.byte	'MAC_TX_TIMESTAMP_STATUS_NANOSECONDS',0
	.word	167831
	.byte	4,3,35,176,22,13
	.byte	'MAC_TX_TIMESTAMP_STATUS_SECONDS',0
	.word	167925
	.byte	4,3,35,180,22,13
	.byte	'reserved_B38',0
	.word	3825
	.byte	24,3,35,184,22,13
	.byte	'MAC_TIMESTAMP_INGRESS_ASYM_CORR',0
	.word	167470
	.byte	4,3,35,208,22,13
	.byte	'MAC_TIMESTAMP_EGRESS_ASYM_CORR',0
	.word	167191
	.byte	4,3,35,212,22,13
	.byte	'MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND',0
	.word	167560
	.byte	4,3,35,216,22,13
	.byte	'MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND',0
	.word	167280
	.byte	4,3,35,220,22,13
	.byte	'MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSEC',0
	.word	167656
	.byte	4,3,35,224,22,13
	.byte	'MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSEC',0
	.word	167375
	.byte	4,3,35,228,22,13
	.byte	'reserved_B68',0
	.word	4454
	.byte	8,3,35,232,22,13
	.byte	'MAC_PPS_CONTROL',0
	.word	165835
	.byte	4,3,35,240,22,13
	.byte	'reserved_B74',0
	.word	4794
	.byte	12,3,35,244,22,13
	.byte	'MAC_PPS0_TARGET_TIME_SECONDS',0
	.word	165675
	.byte	4,3,35,128,23,13
	.byte	'MAC_PPS0_TARGET_TIME_NANOSECONDS',0
	.word	165584
	.byte	4,3,35,132,23,13
	.byte	'MAC_PPS0_INTERVAL',0
	.word	165508
	.byte	4,3,35,136,23,13
	.byte	'MAC_PPS0_WIDTH',0
	.word	165762
	.byte	4,3,35,140,23,13
	.byte	'reserved_B90',0
	.word	180705
	.byte	112,3,35,144,23,13
	.byte	'MTL_OPERATION_MODE',0
	.word	169240
	.byte	4,3,35,128,24,13
	.byte	'reserved_C04',0
	.word	48070
	.byte	28,3,35,132,24,13
	.byte	'MTL_INTERRUPT_STATUS',0
	.word	169161
	.byte	4,3,35,160,24,13
	.byte	'reserved_C24',0
	.word	4794
	.byte	12,3,35,164,24,13
	.byte	'MTL_RXQ_DMA_MAP0',0
	.word	169966
	.byte	4,3,35,176,24,13
	.byte	'reserved_C34',0
	.word	180714
	.byte	204,1,3,35,180,24,13
	.byte	'MTL_TXQ0',0
	.word	180725
	.byte	28,3,35,128,26,13
	.byte	'reserved_D1C',0
	.word	47995
	.byte	16,3,35,156,26,13
	.byte	'MTL_Q0',0
	.word	180730
	.byte	4,3,35,172,26,13
	.byte	'MTL_RXQ0',0
	.word	180735
	.byte	16,3,35,176,26,13
	.byte	'MTL_TXQ1',0
	.word	180740
	.byte	40,3,35,192,26,13
	.byte	'reserved_D68',0
	.word	2634
	.byte	4,3,35,232,26,13
	.byte	'MTL_Q1',0
	.word	180745
	.byte	4,3,35,236,26,13
	.byte	'MTL_RXQ1',0
	.word	180750
	.byte	16,3,35,240,26,13
	.byte	'MTL_TXQ2',0
	.word	180755
	.byte	40,3,35,128,27,13
	.byte	'reserved_DA8',0
	.word	2634
	.byte	4,3,35,168,27,13
	.byte	'MTL_Q2',0
	.word	180760
	.byte	4,3,35,172,27,13
	.byte	'MTL_RXQ2',0
	.word	180765
	.byte	16,3,35,176,27,13
	.byte	'MTL_TXQ3',0
	.word	180770
	.byte	40,3,35,192,27,13
	.byte	'reserved_DE8',0
	.word	2634
	.byte	4,3,35,232,27,13
	.byte	'MTL_Q3',0
	.word	180775
	.byte	4,3,35,236,27,13
	.byte	'MTL_RXQ3',0
	.word	180780
	.byte	16,3,35,240,27,13
	.byte	'reserved_E00',0
	.word	180785
	.byte	128,4,3,35,128,28,13
	.byte	'DMA_MODE',0
	.word	163142
	.byte	4,3,35,128,32,13
	.byte	'DMA_SYSBUS_MODE',0
	.word	163209
	.byte	4,3,35,132,32,13
	.byte	'DMA_INTERRUPT_STATUS',0
	.word	163063
	.byte	4,3,35,136,32,13
	.byte	'DMA_DEBUG_STATUS0',0
	.word	162911
	.byte	4,3,35,140,32,13
	.byte	'DMA_DEBUG_STATUS1',0
	.word	162987
	.byte	4,3,35,144,32,13
	.byte	'reserved_1014',0
	.word	180796
	.byte	236,1,3,35,148,32,13
	.byte	'DMA_CH',0
	.word	180817
	.byte	128,4,3,35,128,34,13
	.byte	'reserved_1300',0
	.word	180822
	.byte	128,26,3,35,128,38,13
	.byte	'CLC',0
	.word	161355
	.byte	4,3,35,128,64,13
	.byte	'ID',0
	.word	163347
	.byte	4,3,35,132,64,13
	.byte	'GPCTL',0
	.word	163283
	.byte	4,3,35,136,64,13
	.byte	'ACCEN0',0
	.word	161079
	.byte	4,3,35,140,64,13
	.byte	'ACCEN1',0
	.word	161144
	.byte	4,3,35,144,64,13
	.byte	'KRST0',0
	.word	163408
	.byte	4,3,35,148,64,13
	.byte	'KRST1',0
	.word	163472
	.byte	4,3,35,152,64,13
	.byte	'KRSTCLR',0
	.word	163536
	.byte	4,3,35,156,64,13
	.byte	'ACCEND',0
	.word	180842
	.byte	32,3,35,160,64,13
	.byte	'SKEWCTL',0
	.word	176231
	.byte	4,3,35,192,64,13
	.byte	'reserved_2044',0
	.word	180847
	.byte	188,1,3,35,196,64,0,14
	.word	180858
	.byte	20
	.byte	'Ifx_GETH',0,34,133,36,3
	.word	189129
	.byte	38,35,60,9,16,13
	.byte	'sysFreq',0
	.word	234
	.byte	4,2,35,0,13
	.byte	'cpuFreq',0
	.word	234
	.byte	4,2,35,4,13
	.byte	'pllFreq',0
	.word	234
	.byte	4,2,35,8,13
	.byte	'stmFreq',0
	.word	234
	.byte	4,2,35,12,0,20
	.byte	'AppInfo',0,35,66,3
	.word	189152
.L254:
	.byte	38,35,69,9,20,13
	.byte	'info',0
	.word	189152
	.byte	16,2,35,0,13
	.byte	'TickCount_1ms',0
	.word	9808
	.byte	4,2,35,16,0,20
	.byte	'App_Cpu',0,35,73,3
	.word	189242
	.byte	17,36,86,9,1,18
	.byte	'IfxCpu_Trap_MemoryManagement_Id_virtualAddressFill',0,0,18
	.byte	'IfxCpu_Trap_MemoryManagement_Id_virtualAddressProtection',0,1,0,20
	.byte	'IfxCpu_Trap_MemoryManagement_Id',0,36,90,3
	.word	189301
	.byte	17,36,95,9,1,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_privilegeViolation',0,1,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_memoryProtectionRead',0,2,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_memoryProtectionWrite',0,3,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_memoryProtectionExecute',0,4,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_memoryProtectionPeripheralAccess',0,5,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_memoryProtectionNullAddress',0,6,18
	.byte	'IfxCpu_Trap_InternalProtection_Id_globalRegisterWriteProtection',0,7,0,20
	.byte	'IfxCpu_Trap_InternalProtection_Id',0,36,104,3
	.word	189459
	.byte	17,36,109,9,1,18
	.byte	'IfxCpu_Trap_InstructionErrors_Id_illegalOpcode',0,1,18
	.byte	'IfxCpu_Trap_InstructionErrors_Id_unimplementedOpcode',0,2,18
	.byte	'IfxCpu_Trap_InstructionErrors_Id_invalidOperand',0,3,18
	.byte	'IfxCpu_Trap_InstructionErrors_Id_dataAddressAlignment',0,4,18
	.byte	'IfxCpu_Trap_InstructionErrors_Id_invalidMemoryAddress',0,5,0,20
	.byte	'IfxCpu_Trap_InstructionErrors_Id',0,36,116,3
	.word	189936
	.byte	17,36,121,9,1,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_freeContextListDepletion',0,1,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_callDepthOverflow',0,2,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_callDepthUnderflow',0,3,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_freeContextListUnderflow',0,4,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_callStackUnderflow',0,5,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_contextType',0,6,18
	.byte	'IfxCpu_Trap_ContextManagement_Id_nestingError',0,7,0,20
	.byte	'IfxCpu_Trap_ContextManagement_Id',0,36,130,1,3
	.word	190249
	.byte	17,36,135,1,9,1,18
	.byte	'IfxCpu_Trap_Bus_Id_programFetchSynchronousError',0,1,18
	.byte	'IfxCpu_Trap_Bus_Id_dataAccessSynchronousError',0,2,18
	.byte	'IfxCpu_Trap_Bus_Id_dataAccessAsynchronousError',0,3,18
	.byte	'IfxCpu_Trap_Bus_Id_CoprocessorTrapAsynchronousError',0,4,18
	.byte	'IfxCpu_Trap_Bus_Id_programMemoryIntegrityError',0,5,18
	.byte	'IfxCpu_Trap_Bus_Id_dataMemoryIntegrityError',0,6,18
	.byte	'IfxCpu_Trap_Bus_Id_temporalAsynchronousError',0,7,0,20
	.byte	'IfxCpu_Trap_Bus_Id',0,36,144,1,3
	.word	190673
	.byte	17,36,149,1,9,1,18
	.byte	'IfxCpu_Trap_Assertion_Id_arithmeticOverflow',0,1,18
	.byte	'IfxCpu_Trap_Assertion_Id_stickyArithmeticOverflow',0,2,0,20
	.byte	'IfxCpu_Trap_Assertion_Id',0,36,153,1,3
	.word	191051
	.byte	20
	.byte	'IfxCpu_Trap_SystemCall_Id',0,36,158,1,16
	.word	17088
	.byte	20
	.byte	'IfxCpu_Trap_NonMaskableInterrupt_Id',0,36,163,1,16
	.word	17088
.L255:
	.byte	15,48
	.word	19203
	.byte	16,1,0,15,8
	.word	14127
	.byte	16,1,0
.L256:
	.byte	24
	.word	191279
	.byte	15,8
	.word	10373
	.byte	16,1,0
.L257:
	.byte	24
	.word	191293
.L258:
	.byte	14
	.word	9808
.L259:
	.byte	14
	.word	9808
.L260:
	.byte	14
	.word	9808
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L48:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,1,1,11,15,73,19,0,0,16,33,0,47,15,0,0,17,4,1,58,15,59
	.byte	15,57,15,11,15,0,0,18,40,0,3,8,28,13,0,0,19,11,1,0,0,20,22,0,3,8,58,15,59,15,57,15,73,19,0,0,21,21,1,73
	.byte	19,54,15,39,12,0,0,22,5,0,73,19,0,0,23,21,1,54,15,39,12,0,0,24,38,0,73,19,0,0,25,46,1,3,8,54,15,39,12
	.byte	63,12,60,12,0,0,26,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,27,5,0,3,8,73,19,0,0,28,46,0,3,8,54,15,39
	.byte	12,63,12,60,12,0,0,29,46,0,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,30,46,1,49,19,0,0,31,5,0
	.byte	49,19,0,0,32,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,33,46,0,3,8,58,15,59,15,57,15,73,19
	.byte	54,15,39,12,63,12,60,12,0,0,34,29,1,49,19,0,0,35,11,0,49,19,0,0,36,46,1,3,8,58,15,59,15,57,15,73,19,54
	.byte	15,39,12,63,12,60,12,0,0,37,11,1,49,19,0,0,38,19,1,58,15,59,15,57,15,11,15,0,0,39,46,0,3,8,58,15,59,15
	.byte	57,15,73,19,54,15,63,12,60,12,0,0,40,21,0,54,15,0,0,41,13,0,73,19,11,15,56,9,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L49:
	.word	.L320-.L319
.L319:
	.half	3
	.word	.L322-.L321
.L321:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\UART',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include\\libc',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxScuWdt.h',0,2,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0
	.byte	'IfxPort.h',0,4,0,0
	.byte	'IfxPort_regdef.h',0,3,0,0
	.byte	'IfxScuCcu.h',0,2,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxCpu_cfg.h',0,5,0,0
	.byte	'IfxSrc.h',0,6,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'IfxSrc_cfg.h',0,5,0,0
	.byte	'IfxStm.h',0,7,0,0
	.byte	'IfxStm_regdef.h',0,3,0,0
	.byte	'Bsp.h',0,8,0,0
	.byte	'IfxStdIf_Timer.h',0,9,0,0
	.byte	'IfxStdIf.h',0,9,0,0
	.byte	'rtthread.h',0,10,0,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0
	.byte	'IfxCpu_regdef.h',0,3,0,0
	.byte	'IfxStm_Timer.h',0,11,0,0
	.byte	'UART_Logging.h',0,12,0,0
	.byte	'rtdef.h',0,10,0,0
	.byte	'stdint.h',0,13,0,0
	.byte	'time.h',0,13,0,0
	.byte	'libc_fdset.h',0,14,0,0
	.byte	'rthw.h',0,10,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'Ifx_TypesReg.h',0,3,0,0
	.byte	'IfxScu_cfg.h',0,5,0,0
	.byte	'IfxSmu_regdef.h',0,3,0,0
	.byte	'IfxCbs_regdef.h',0,3,0,0
	.byte	'IfxGeth_regdef.h',0,3,0,0
	.byte	'Cpu_Main.h',0,15,0,0
	.byte	'IfxCpu_Trap.h',0,16,0,0,0
.L322:
.L320:
	.sdecl	'.debug_info',debug,cluster('rt_hw_stack_init')
	.sect	'.debug_info'
.L50:
	.word	366
	.half	3
	.word	.L51
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L53,.L52
	.byte	2
	.word	.L46
	.byte	3
	.byte	'rt_hw_stack_init',0,1,225,1,13
	.word	.L144
	.byte	1,1,1
	.word	.L41,.L145,.L40
	.byte	4
	.byte	'tentry',0,1,225,1,42
	.word	.L146,.L147
	.byte	4
	.byte	'parameter',0,1,226,1,42
	.word	.L146,.L148
	.byte	4
	.byte	'stack_addr',0,1,227,1,42
	.word	.L144,.L149
	.byte	4
	.byte	'texit',0,1,228,1,42
	.word	.L146,.L150
	.byte	5
	.word	.L41,.L145
	.byte	6
	.byte	'upperCtxPtr',0,1,230,1,18
	.word	.L151,.L152
	.byte	6
	.byte	'lowCtxPtr',0,1,231,1,18
	.word	.L153,.L154
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('rt_hw_stack_init')
	.sect	'.debug_abbrev'
.L51:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('rt_hw_stack_init')
	.sect	'.debug_line'
.L52:
	.word	.L324-.L323
.L323:
	.half	3
	.word	.L326-.L325
.L325:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L326:
	.byte	5,13,7,0,5,2
	.word	.L41
	.byte	3,224,1,1,5,28,9
	.half	.L296-.L41
	.byte	3,6,1,9
	.half	.L297-.L296
	.byte	3,2,1,5,16,9
	.half	.L292-.L297
	.byte	3,3,1,5,23,9
	.half	.L327-.L292
	.byte	3,3,1,5,21,9
	.half	.L328-.L327
	.byte	1,5,13,9
	.half	.L300-.L328
	.byte	3,2,1,5,9,9
	.half	.L329-.L300
	.byte	1,5,25,7,9
	.half	.L330-.L329
	.byte	3,3,1,5,23,9
	.half	.L298-.L330
	.byte	1,5,25,9
	.half	.L8-.L298
	.byte	1,5,13,3,4,1,5,45,7,9
	.half	.L331-.L8
	.byte	1,5,22,7,9
	.half	.L332-.L331
	.byte	3,3,1,5,20,9
	.half	.L333-.L332
	.byte	3,1,1,5,39,9
	.half	.L334-.L333
	.byte	3,1,1,5,19,9
	.half	.L335-.L334
	.byte	1,5,20,9
	.half	.L336-.L335
	.byte	3,1,1,5,21,9
	.half	.L337-.L336
	.byte	3,1,1,5,24,9
	.half	.L338-.L337
	.byte	3,124,1,5,20,9
	.half	.L9-.L338
	.byte	3,9,1,5,28,9
	.half	.L11-.L9
	.byte	3,3,1,5,26,9
	.half	.L339-.L11
	.byte	3,2,1,5,54,1,5,23,9
	.half	.L304-.L339
	.byte	3,1,1,5,25,9
	.half	.L340-.L304
	.byte	3,4,1,5,23,3,126,1,5,24,9
	.half	.L341-.L340
	.byte	3,5,1,5,23,3,125,1,5,52,9
	.half	.L305-.L341
	.byte	3,3,1,5,20,9
	.half	.L307-.L305
	.byte	3,2,1,9
	.half	.L342-.L307
	.byte	3,2,1,5,86,9
	.half	.L343-.L342
	.byte	3,2,1,5,55,9
	.half	.L344-.L343
	.byte	3,2,1,5,66,9
	.half	.L313-.L344
	.byte	3,126,1,5,22,1,5,55,9
	.half	.L345-.L313
	.byte	3,2,1,5,37,9
	.half	.L346-.L345
	.byte	1,5,12,9
	.half	.L347-.L346
	.byte	3,2,1,5,5,9
	.half	.L348-.L347
	.byte	3,2,1,5,1,9
	.half	.L314-.L348
	.byte	3,1,1,7,9
	.half	.L54-.L314
	.byte	0,1,1
.L324:
	.sdecl	'.debug_ranges',debug,cluster('rt_hw_stack_init')
	.sect	'.debug_ranges'
.L53:
	.word	-1,.L41,0,.L54-.L41,0,0
	.sdecl	'.debug_info',debug,cluster('rt_hw_interrupt_disable')
	.sect	'.debug_info'
.L55:
	.word	311
	.half	3
	.word	.L56
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L58,.L57
	.byte	2
	.word	.L46
	.byte	3
	.byte	'rt_hw_interrupt_disable',0,1,67,11
	.word	.L155
	.byte	1,1,1
	.word	.L15,.L156,.L14
	.byte	4
	.word	.L15,.L156
	.byte	5
	.word	.L157,.L15,.L158
	.byte	6
	.word	.L159,.L15,.L158
	.byte	5
	.word	.L160,.L15,.L161
	.byte	6
	.word	.L162,.L15,.L161
	.byte	7
	.byte	'reg',0,2,235,5,17
	.word	.L163,.L164
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('rt_hw_interrupt_disable')
	.sect	'.debug_abbrev'
.L56:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,29,1,49,16,17,1,18,1,0,0,6,11,1,49,16,17,1
	.byte	18,1,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('rt_hw_interrupt_disable')
	.sect	'.debug_line'
.L57:
	.word	.L350-.L349
.L349:
	.half	3
	.word	.L352-.L351
.L351:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L352:
	.byte	4,2,5,19,7,0,5,2
	.word	.L15
	.byte	3,235,5,1,5,17,9
	.half	.L261-.L15
	.byte	3,1,1,5,21,9
	.half	.L262-.L261
	.byte	1,5,14,9
	.half	.L161-.L262
	.byte	3,8,1,5,10,9
	.half	.L353-.L161
	.byte	3,1,1,4,1,5,1,9
	.half	.L158-.L353
	.byte	3,210,122,1,7,9
	.half	.L59-.L158
	.byte	0,1,1
.L350:
	.sdecl	'.debug_ranges',debug,cluster('rt_hw_interrupt_disable')
	.sect	'.debug_ranges'
.L58:
	.word	-1,.L15,0,.L59-.L15,0,0
	.sdecl	'.debug_info',debug,cluster('rt_hw_interrupt_enable')
	.sect	'.debug_info'
.L60:
	.word	324
	.half	3
	.word	.L61
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L63,.L62
	.byte	2
	.word	.L46
	.byte	3
	.byte	'rt_hw_interrupt_enable',0,1,74,6,1,1,1
	.word	.L17,.L165,.L16
	.byte	4
	.byte	'level',0,1,74,39
	.word	.L155,.L166
	.byte	5
	.word	.L17,.L165
	.byte	6
	.word	.L167,.L17,.L3
	.byte	7
	.word	.L168,.L169
	.byte	8
	.word	.L170,.L17,.L3
	.byte	6
	.word	.L171,.L17,.L3
	.byte	7
	.word	.L172,.L173
	.byte	9
	.word	.L174,.L17,.L3
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('rt_hw_interrupt_enable')
	.sect	'.debug_abbrev'
.L61:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('rt_hw_interrupt_enable')
	.sect	'.debug_line'
.L62:
	.word	.L355-.L354
.L354:
	.half	3
	.word	.L357-.L356
.L356:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0
	.byte	'IfxCpu.h',0,1,0,0,0
.L357:
	.byte	5,23,7,0,5,2
	.word	.L17
	.byte	3,203,0,1,4,2,5,5,9
	.half	.L358-.L17
	.byte	3,188,7,1,5,17,7,9
	.half	.L359-.L358
	.byte	3,2,1,4,1,5,1,9
	.half	.L3-.L359
	.byte	3,195,120,1,7,9
	.half	.L64-.L3
	.byte	0,1,1
.L355:
	.sdecl	'.debug_ranges',debug,cluster('rt_hw_interrupt_enable')
	.sect	'.debug_ranges'
.L63:
	.word	-1,.L17,0,.L64-.L17,0,0
	.sdecl	'.debug_info',debug,cluster('rt_hw_context_switch')
	.sect	'.debug_info'
.L65:
	.word	281
	.half	3
	.word	.L66
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L68,.L67
	.byte	2
	.word	.L46
	.byte	3
	.byte	'rt_hw_context_switch',0,1,175,1,6,1,1,1
	.word	.L33,.L175,.L32
	.byte	4
	.byte	'from',0,1,175,1,38
	.word	.L176,.L177
	.byte	4
	.byte	'to',0,1,175,1,55
	.word	.L176,.L178
	.byte	5
	.word	.L179
	.byte	6
	.byte	'level',0,1,177,1,15
	.word	.L155,.L180
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('rt_hw_context_switch')
	.sect	'.debug_abbrev'
.L66:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('rt_hw_context_switch')
	.sect	'.debug_line'
.L67:
	.word	.L361-.L360
.L360:
	.half	3
	.word	.L363-.L362
.L362:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L363:
	.byte	5,6,7,0,5,2
	.word	.L33
	.byte	3,174,1,1,5,36,9
	.half	.L272-.L33
	.byte	3,4,1,9
	.half	.L271-.L272
	.byte	3,1,1,5,28,9
	.half	.L277-.L271
	.byte	3,3,1,5,8,9
	.half	.L278-.L277
	.byte	3,2,1,5,5,9
	.half	.L364-.L278
	.byte	1,5,18,7,9
	.half	.L365-.L364
	.byte	3,3,1,5,1,9
	.half	.L7-.L365
	.byte	3,2,1,7,9
	.half	.L69-.L7
	.byte	0,1,1
.L361:
	.sdecl	'.debug_ranges',debug,cluster('rt_hw_context_switch')
	.sect	'.debug_ranges'
.L68:
	.word	-1,.L33,0,.L69-.L33,0,0
.L179:
	.word	-1,.L33,0,.L175-.L33,-1,.L35,0,.L124-.L35,0,0
	.sdecl	'.debug_info',debug,cluster('rt_hw_context_switch_to')
	.sect	'.debug_info'
.L70:
	.word	270
	.half	3
	.word	.L71
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L73,.L72
	.byte	2
	.word	.L46
	.byte	3
	.byte	'rt_hw_context_switch_to',0,1,204,1,6,1,1,1
	.word	.L39,.L181,.L38
	.byte	4
	.byte	'to',0,1,204,1,41
	.word	.L176,.L182
	.byte	5
	.word	.L39,.L181
	.byte	6
	.byte	'level',0,1,206,1,15
	.word	.L155,.L183
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('rt_hw_context_switch_to')
	.sect	'.debug_abbrev'
.L71:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('rt_hw_context_switch_to')
	.sect	'.debug_line'
.L72:
	.word	.L367-.L366
.L366:
	.half	3
	.word	.L369-.L368
.L368:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L369:
	.byte	5,6,7,0,5,2
	.word	.L39
	.byte	3,203,1,1,5,36,3,4,1,5,33,9
	.half	.L285-.L39
	.byte	3,1,1,5,11,9
	.half	.L288-.L285
	.byte	3,127,1,5,31,9
	.half	.L289-.L288
	.byte	3,1,1,5,28,9
	.half	.L287-.L289
	.byte	1,5,14,9
	.half	.L370-.L287
	.byte	3,1,1,5,28,9
	.half	.L286-.L370
	.byte	3,1,1,5,1,9
	.half	.L74-.L286
	.byte	3,2,0,1,1
.L367:
	.sdecl	'.debug_ranges',debug,cluster('rt_hw_context_switch_to')
	.sect	'.debug_ranges'
.L73:
	.word	-1,.L39,0,.L74-.L39,0,0
	.sdecl	'.debug_info',debug,cluster('rt_hw_context_switch_interrupt')
	.sect	'.debug_info'
.L75:
	.word	295
	.half	3
	.word	.L76
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L78,.L77
	.byte	2
	.word	.L46
	.byte	3
	.byte	'rt_hw_context_switch_interrupt',0,1,192,1,6,1,1,1
	.word	.L37,.L184,.L36
	.byte	4
	.byte	'from',0,1,192,1,48
	.word	.L176,.L185
	.byte	4
	.byte	'to',0,1,192,1,65
	.word	.L176,.L186
	.byte	5
	.word	.L37,.L184
	.byte	6
	.byte	'level',0,1,194,1,15
	.word	.L155,.L187
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('rt_hw_context_switch_interrupt')
	.sect	'.debug_abbrev'
.L76:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('rt_hw_context_switch_interrupt')
	.sect	'.debug_line'
.L77:
	.word	.L372-.L371
.L371:
	.half	3
	.word	.L374-.L373
.L373:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L374:
	.byte	5,6,7,0,5,2
	.word	.L37
	.byte	3,191,1,1,5,36,9
	.half	.L280-.L37
	.byte	3,4,1,9
	.half	.L279-.L280
	.byte	3,1,1,5,28,9
	.half	.L281-.L279
	.byte	3,2,1,5,10,9
	.half	.L282-.L281
	.byte	3,2,1,5,34,9
	.half	.L283-.L282
	.byte	1,5,1,9
	.half	.L375-.L283
	.byte	3,1,1,7,9
	.half	.L79-.L375
	.byte	0,1,1
.L372:
	.sdecl	'.debug_ranges',debug,cluster('rt_hw_context_switch_interrupt')
	.sect	'.debug_ranges'
.L78:
	.word	-1,.L37,0,.L79-.L37,0,0
	.sdecl	'.debug_info',debug,cluster('get_clk')
	.sect	'.debug_info'
.L80:
	.word	443
	.half	3
	.word	.L81
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L83,.L82
	.byte	2
	.word	.L46
	.byte	3
	.byte	'get_clk',0,1,160,2,6,1,1,1
	.word	.L43,.L188,.L42
	.byte	4
	.word	.L43,.L188
	.byte	5
	.word	.L189,.L43,.L190
	.byte	6
	.word	.L191,.L43,.L190
	.byte	5
	.word	.L157,.L43,.L190
	.byte	6
	.word	.L159,.L43,.L190
	.byte	5
	.word	.L160,.L43,.L192
	.byte	6
	.word	.L162,.L43,.L192
	.byte	7
	.byte	'reg',0,2,235,5,17
	.word	.L163,.L193
	.byte	0,0,0,0,0,0,5
	.word	.L194,.L195,.L196
	.byte	6
	.word	.L197,.L195,.L196
	.byte	7
	.byte	'reg',0,2,237,6,12
	.word	.L176,.L198
	.byte	0,0,5
	.word	.L199,.L200,.L201
	.byte	8
	.word	.L202,.L203
	.byte	6
	.word	.L204,.L200,.L201
	.byte	6
	.word	.L205,.L200,.L201
	.byte	5
	.word	.L206,.L200,.L201
	.byte	9
	.word	.L207,.L200,.L201
	.byte	0,0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('get_clk')
	.sect	'.debug_abbrev'
.L81:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,29,1,49,16,17,1,18,1,0,0,6,11,1,49,16,17,1,18,1
	.byte	0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('get_clk')
	.sect	'.debug_line'
.L82:
	.word	.L377-.L376
.L376:
	.half	3
	.word	.L379-.L378
.L378:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0
	.byte	'IfxCpu.h',0,1,0,0
	.byte	'IfxScuCcu.h',0,2,0,0,0
.L379:
	.byte	4,2,5,19,7,0,5,2
	.word	.L43
	.byte	3,235,5,1,5,14,9
	.half	.L192-.L43
	.byte	3,9,1,5,10,9
	.half	.L380-.L192
	.byte	3,1,1,4,1,5,66,9
	.half	.L190-.L380
	.byte	3,174,124,1,5,72,9
	.half	.L381-.L190
	.byte	3,1,1,5,5,9
	.half	.L382-.L381
	.byte	3,3,1,5,55,9
	.half	.L383-.L382
	.byte	1,5,28,9
	.half	.L384-.L383
	.byte	1,4,2,5,17,9
	.half	.L195-.L384
	.byte	3,198,4,1,5,38,9
	.half	.L315-.L195
	.byte	3,1,1,5,12,9
	.half	.L316-.L315
	.byte	1,4,1,5,75,3,186,123,1,5,28,9
	.half	.L196-.L316
	.byte	1,5,55,9
	.half	.L385-.L196
	.byte	3,1,1,5,28,9
	.half	.L386-.L385
	.byte	1,4,3,5,41,9
	.half	.L200-.L386
	.byte	3,148,11,1,5,77,9
	.half	.L387-.L200
	.byte	1,5,62,9
	.half	.L388-.L387
	.byte	1,4,1,5,28,3,237,116,1,5,1,9
	.half	.L201-.L388
	.byte	3,1,1,7,9
	.half	.L84-.L201
	.byte	0,1,1
.L377:
	.sdecl	'.debug_ranges',debug,cluster('get_clk')
	.sect	'.debug_ranges'
.L83:
	.word	-1,.L43,0,.L84-.L43,0,0
	.sdecl	'.debug_info',debug,cluster('rt_hw_systick_init')
	.sect	'.debug_info'
.L85:
	.word	254
	.half	3
	.word	.L86
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L88,.L87
	.byte	2
	.word	.L46
	.byte	3
	.byte	'rt_hw_systick_init',0,1,79,6,1,1,1
	.word	.L19,.L208,.L18
	.byte	4
	.word	.L19,.L208
	.byte	5
	.byte	'timer_config',0,1,81,23
	.word	.L209,.L210
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('rt_hw_systick_init')
	.sect	'.debug_abbrev'
.L86:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('rt_hw_systick_init')
	.sect	'.debug_line'
.L87:
	.word	.L390-.L389
.L389:
	.half	3
	.word	.L392-.L391
.L391:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L392:
	.byte	5,6,7,0,5,2
	.word	.L19
	.byte	3,206,0,1,5,47,9
	.half	.L263-.L19
	.byte	3,3,1,5,42,9
	.half	.L393-.L263
	.byte	1,5,46,9
	.half	.L394-.L393
	.byte	1,5,28,9
	.half	.L395-.L394
	.byte	1,5,46,9
	.half	.L396-.L395
	.byte	1,5,33,9
	.half	.L397-.L396
	.byte	3,2,1,5,31,1,5,35,9
	.half	.L398-.L397
	.byte	3,1,1,5,33,1,5,22,9
	.half	.L399-.L398
	.byte	3,1,1,5,37,9
	.half	.L400-.L399
	.byte	1,5,36,9
	.half	.L401-.L400
	.byte	1,5,55,9
	.half	.L402-.L401
	.byte	1,5,36,9
	.half	.L403-.L402
	.byte	3,1,1,5,35,9
	.half	.L404-.L403
	.byte	1,5,1,9
	.half	.L89-.L404
	.byte	3,1,0,1,1
.L390:
	.sdecl	'.debug_ranges',debug,cluster('rt_hw_systick_init')
	.sect	'.debug_ranges'
.L88:
	.word	-1,.L19,0,.L89-.L19,0,0
	.sdecl	'.debug_info',debug,cluster('rt_hw_usart_init')
	.sect	'.debug_info'
.L90:
	.word	226
	.half	3
	.word	.L91
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L93,.L92
	.byte	2
	.word	.L46
	.byte	3
	.byte	'rt_hw_usart_init',0,1,90,6,1,1,1
	.word	.L21,.L211,.L20
	.byte	4
	.word	.L21,.L211
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('rt_hw_usart_init')
	.sect	'.debug_abbrev'
.L91:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('rt_hw_usart_init')
	.sect	'.debug_line'
.L92:
	.word	.L406-.L405
.L405:
	.half	3
	.word	.L408-.L407
.L407:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L408:
	.byte	5,13,7,0,5,2
	.word	.L21
	.byte	3,219,0,1,5,1,7,9
	.half	.L94-.L21
	.byte	3,1,0,1,1
.L406:
	.sdecl	'.debug_ranges',debug,cluster('rt_hw_usart_init')
	.sect	'.debug_ranges'
.L93:
	.word	-1,.L21,0,.L94-.L21,0,0
	.sdecl	'.debug_info',debug,cluster('trigger_scheduling')
	.sect	'.debug_info'
.L95:
	.word	252
	.half	3
	.word	.L96
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L98,.L97
	.byte	2
	.word	.L46
	.byte	3
	.byte	'trigger_scheduling',0,1,95,6,1,1,1
	.word	.L23,.L212,.L22
	.byte	4
	.word	.L23,.L212
	.byte	5
	.byte	'ptUpperCtx',0,1,97,18
	.word	.L151,.L213
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('trigger_scheduling')
	.sect	'.debug_abbrev'
.L96:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('trigger_scheduling')
	.sect	'.debug_line'
.L97:
	.word	.L410-.L409
.L409:
	.half	3
	.word	.L412-.L411
.L411:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L412:
	.byte	5,8,7,0,5,2
	.word	.L23
	.byte	3,227,0,1,5,5,9
	.half	.L413-.L23
	.byte	1,5,16,7,9
	.half	.L414-.L413
	.byte	3,2,1,5,22,9
	.half	.L415-.L414
	.byte	3,2,1,5,20,9
	.half	.L416-.L415
	.byte	1,5,12,9
	.half	.L266-.L416
	.byte	3,2,1,5,9,9
	.half	.L265-.L266
	.byte	1,5,33,7,9
	.half	.L417-.L265
	.byte	3,3,1,5,60,9
	.half	.L418-.L417
	.byte	1,5,72,9
	.half	.L419-.L418
	.byte	1,5,60,9
	.half	.L420-.L419
	.byte	1,5,49,9
	.half	.L5-.L420
	.byte	3,3,1,5,32,9
	.half	.L421-.L5
	.byte	1,5,29,9
	.half	.L422-.L421
	.byte	1,5,27,9
	.half	.L423-.L422
	.byte	1,5,16,9
	.half	.L424-.L423
	.byte	3,1,1,5,1,9
	.half	.L4-.L424
	.byte	3,2,1,7,9
	.half	.L99-.L4
	.byte	0,1,1
.L410:
	.sdecl	'.debug_ranges',debug,cluster('trigger_scheduling')
	.sect	'.debug_ranges'
.L98:
	.word	-1,.L23,0,.L99-.L23,0,0
	.sdecl	'.debug_info',debug,cluster('KERNEL_INTERRUPT')
	.sect	'.debug_info'
.L100:
	.word	226
	.half	3
	.word	.L101
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L103,.L102
	.byte	2
	.word	.L46
	.byte	3
	.byte	'KERNEL_INTERRUPT',0,1,118,1,1,1,1
	.word	.L25,.L214,.L24
	.byte	4
	.word	.L25,.L214
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('KERNEL_INTERRUPT')
	.sect	'.debug_abbrev'
.L101:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('KERNEL_INTERRUPT')
	.sect	'.debug_line'
.L102:
	.word	.L426-.L425
.L425:
	.half	3
	.word	.L428-.L427
.L427:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L428:
	.byte	5,1,7,0,5,2
	.word	.L25
	.byte	3,245,0,1,5,23,9
	.half	.L429-.L25
	.byte	3,2,1,5,54,9
	.half	.L430-.L429
	.byte	3,1,1,5,53,9
	.half	.L431-.L430
	.byte	1,5,39,1,5,53,9
	.half	.L432-.L431
	.byte	1,5,21,9
	.half	.L433-.L432
	.byte	3,1,1,5,23,9
	.half	.L434-.L433
	.byte	3,1,1,5,1,9
	.half	.L435-.L434
	.byte	3,1,1,9
	.half	.L104-.L435
	.byte	0,1,1
.L426:
	.sdecl	'.debug_ranges',debug,cluster('KERNEL_INTERRUPT')
	.sect	'.debug_ranges'
.L103:
	.word	-1,.L25,0,.L104-.L25,0,0
	.sdecl	'.debug_info',debug,cluster('KERNEL_YIELD')
	.sect	'.debug_info'
.L105:
	.word	219
	.half	3
	.word	.L106
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L108,.L107
	.byte	2
	.word	.L46
	.byte	3
	.byte	'KERNEL_YIELD',0,1,131,1,1,1,1,1
	.word	.L27,.L215,.L26
	.byte	4
	.word	.L216
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('KERNEL_YIELD')
	.sect	'.debug_abbrev'
.L106:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('KERNEL_YIELD')
	.sect	'.debug_line'
.L107:
	.word	.L437-.L436
.L436:
	.half	3
	.word	.L439-.L438
.L438:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L439:
	.byte	5,1,7,0,5,2
	.word	.L27
	.byte	3,130,1,1,5,10,9
	.half	.L440-.L27
	.byte	3,3,1,5,34,9
	.half	.L441-.L440
	.byte	1,5,23,9
	.half	.L442-.L441
	.byte	3,2,1,5,1,9
	.half	.L443-.L442
	.byte	3,1,1,9
	.half	.L109-.L443
	.byte	0,1,1
.L437:
	.sdecl	'.debug_ranges',debug,cluster('KERNEL_YIELD')
	.sect	'.debug_ranges'
.L108:
	.word	-1,.L27,0,.L109-.L27,0,0
.L216:
	.word	-1,.L27,0,.L215-.L27,-1,.L29,0,.L129-.L29,0,0
	.sdecl	'.debug_info',debug,cluster('rt_hw_board_init')
	.sect	'.debug_info'
.L110:
	.word	445
	.half	3
	.word	.L111
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L113,.L112
	.byte	2
	.word	.L46
	.byte	3
	.byte	'rt_hw_board_init',0,1,146,1,6,1,1
	.word	.L31,.L217,.L30
	.byte	4
	.word	.L31,.L217
	.byte	5
	.word	.L218,.L219,.L220
	.byte	6
	.word	.L221,.L222
	.byte	6
	.word	.L223,.L224
	.byte	7
	.word	.L225,.L226
	.byte	8
	.byte	'ocs',0,2,187,5,17
	.word	.L228,.L229
	.byte	0,0,5
	.word	.L218,.L227,.L6
	.byte	6
	.word	.L221,.L222
	.byte	6
	.word	.L223,.L224
	.byte	0,5
	.word	.L230,.L231,.L232
	.byte	6
	.word	.L233,.L234
	.byte	6
	.word	.L235,.L236
	.byte	6
	.word	.L237,.L238
	.byte	9
	.word	.L239,.L231,.L232
	.byte	5
	.word	.L240,.L241,.L232
	.byte	6
	.word	.L242,.L243
	.byte	10
	.word	.L244,.L241,.L232
	.byte	0,0,0,5
	.word	.L245,.L246,.L247
	.byte	6
	.word	.L248,.L249
	.byte	10
	.word	.L250,.L246,.L247
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('rt_hw_board_init')
	.sect	'.debug_abbrev'
.L111:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,29,1,49,16,17,1,18,1,0,0,6,5,0,49,16,2,6,0,0,7,11,1,49
	.byte	16,85,6,0,0,8,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,9,11,1,49,16,17,1,18,1,0,0,10,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('rt_hw_board_init')
	.sect	'.debug_line'
.L112:
	.word	.L445-.L444
.L444:
	.half	3
	.word	.L447-.L446
.L446:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std',0,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0
	.byte	'IfxStm.h',0,1,0,0
	.byte	'IfxSrc.h',0,2,0,0,0
.L447:
	.byte	5,32,7,0,5,2
	.word	.L31
	.byte	3,147,1,1,5,27,9
	.half	.L448-.L31
	.byte	1,5,32,9
	.half	.L449-.L448
	.byte	1,5,31,9
	.half	.L450-.L449
	.byte	1,4,2,5,28,9
	.half	.L219-.L450
	.byte	3,170,4,1,4,1,5,31,9
	.half	.L220-.L219
	.byte	3,214,123,1,4,2,5,5,9
	.half	.L227-.L220
	.byte	3,170,4,1,5,14,7,9
	.half	.L267-.L227
	.byte	3,3,1,5,26,9
	.half	.L268-.L267
	.byte	1,9
	.half	.L451-.L268
	.byte	3,1,1,9
	.half	.L269-.L451
	.byte	3,1,1,5,19,9
	.half	.L452-.L269
	.byte	3,1,1,5,26,9
	.half	.L270-.L452
	.byte	1,4,1,5,23,9
	.half	.L6-.L270
	.byte	3,215,123,1,5,21,9
	.half	.L453-.L6
	.byte	3,3,1,5,29,9
	.half	.L454-.L453
	.byte	3,10,1,5,22,9
	.half	.L455-.L454
	.byte	3,3,1,5,17,9
	.half	.L456-.L455
	.byte	1,5,21,9
	.half	.L457-.L456
	.byte	1,5,51,9
	.half	.L458-.L457
	.byte	1,4,3,5,19,9
	.half	.L231-.L458
	.byte	3,230,0,1,5,17,1,5,11,9
	.half	.L459-.L231
	.byte	3,1,1,5,17,9
	.half	.L460-.L459
	.byte	1,5,11,9
	.half	.L241-.L460
	.byte	3,103,1,5,17,9
	.half	.L461-.L241
	.byte	1,4,1,5,24,9
	.half	.L232-.L461
	.byte	3,179,127,1,5,23,9
	.half	.L462-.L232
	.byte	1,4,3,5,11,9
	.half	.L246-.L462
	.byte	3,223,0,1,5,16,9
	.half	.L463-.L246
	.byte	1,4,1,5,1,9
	.half	.L247-.L463
	.byte	3,162,127,1,7,9
	.half	.L114-.L247
	.byte	0,1,1
.L445:
	.sdecl	'.debug_ranges',debug,cluster('rt_hw_board_init')
	.sect	'.debug_ranges'
.L113:
	.word	-1,.L31,0,.L114-.L31,0,0
.L226:
	.word	-1,.L31,.L219-.L31,.L220-.L31,.L227-.L31,.L6-.L31,0,0
	.sdecl	'.debug_info',debug,cluster('tricore_trap_yield_for_task')
	.sect	'.debug_info'
.L115:
	.word	271
	.half	3
	.word	.L116
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L118,.L117
	.byte	2
	.word	.L46
	.byte	3
	.byte	'tricore_trap_yield_for_task',0,1,174,2,6,1,1,1
	.word	.L45,.L251,.L44
	.byte	4
	.byte	'iTrapIdentification',0,1,174,2,39
	.word	.L252,.L253
	.byte	5
	.word	.L45,.L251
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('tricore_trap_yield_for_task')
	.sect	'.debug_abbrev'
.L116:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('tricore_trap_yield_for_task')
	.sect	'.debug_line'
.L117:
	.word	.L465-.L464
.L464:
	.half	3
	.word	.L467-.L466
.L466:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L467:
	.byte	5,3,7,0,5,2
	.word	.L45
	.byte	3,175,2,1,5,27,7,9
	.half	.L468-.L45
	.byte	3,3,1,5,1,7,9
	.half	.L13-.L468
	.byte	3,8,1,7,9
	.half	.L119-.L13
	.byte	0,1,1
.L465:
	.sdecl	'.debug_ranges',debug,cluster('tricore_trap_yield_for_task')
	.sect	'.debug_ranges'
.L118:
	.word	-1,.L45,0,.L119-.L45,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_2')
	.sect	'.debug_info'
.L120:
	.word	209
	.half	3
	.word	.L121
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L123,.L122
	.byte	2
	.word	.L46
	.byte	3
	.byte	'.cocofun_2',0,1,175,1,6,1
	.word	.L35,.L124,.L34
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_2')
	.sect	'.debug_abbrev'
.L121:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_2')
	.sect	'.debug_line'
.L122:
	.word	.L470-.L469
.L469:
	.half	3
	.word	.L472-.L471
.L471:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L472:
	.byte	5,36,7,0,5,2
	.word	.L35
	.byte	3,179,1,1,5,28,9
	.half	.L274-.L35
	.byte	3,3,1,5,33,9
	.half	.L276-.L274
	.byte	3,125,1,9
	.half	.L273-.L276
	.byte	3,1,1,5,30,9
	.half	.L275-.L273
	.byte	3,127,1,5,31,9
	.half	.L473-.L275
	.byte	3,1,1,5,28,9
	.half	.L474-.L473
	.byte	1,9
	.half	.L475-.L474
	.byte	3,2,1,7,9
	.half	.L124-.L475
	.byte	0,1,1,5,36,0,5,2
	.word	.L35
	.byte	3,196,1,1,5,28,9
	.half	.L274-.L35
	.byte	3,2,1,5,33,9
	.half	.L276-.L274
	.byte	3,126,1,9
	.half	.L273-.L276
	.byte	3,1,1,5,30,9
	.half	.L275-.L273
	.byte	3,127,1,5,31,9
	.half	.L473-.L275
	.byte	3,1,1,5,28,9
	.half	.L474-.L473
	.byte	1,9
	.half	.L475-.L474
	.byte	3,113,1,7,9
	.half	.L124-.L475
	.byte	0,1,1
.L470:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_2')
	.sect	'.debug_ranges'
.L123:
	.word	-1,.L35,0,.L124-.L35,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_3')
	.sect	'.debug_info'
.L125:
	.word	209
	.half	3
	.word	.L126
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L128,.L127
	.byte	2
	.word	.L46
	.byte	3
	.byte	'.cocofun_3',0,1,131,1,1,1
	.word	.L29,.L129,.L28
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_3')
	.sect	'.debug_abbrev'
.L126:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_3')
	.sect	'.debug_line'
.L127:
	.word	.L477-.L476
.L476:
	.half	3
	.word	.L479-.L478
.L478:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0,0,0,0,0
.L479:
	.byte	5,10,7,0,5,2
	.word	.L29
	.byte	3,133,1,1,5,5,1,5,9,9
	.half	.L284-.L29
	.byte	1,5,34,9
	.half	.L480-.L284
	.byte	1,9
	.half	.L129-.L480
	.byte	0,1,1,5,10,0,5,2
	.word	.L29
	.byte	3,200,1,1,5,5,1,5,9,9
	.half	.L284-.L29
	.byte	1,5,34,9
	.half	.L480-.L284
	.byte	1,9
	.half	.L481-.L480
	.byte	3,189,127,1,7,9
	.half	.L129-.L481
	.byte	0,1,1
.L477:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_3')
	.sect	'.debug_ranges'
.L128:
	.word	-1,.L29,0,.L129-.L29,0,0
	.sdecl	'.debug_info',debug,cluster('g_AppCpu0')
	.sect	'.debug_info'
.L130:
	.word	197
	.half	3
	.word	.L131
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1,2
	.word	.L46
	.byte	3
	.byte	'g_AppCpu0',0,19,65,9
	.word	.L254
	.byte	1,5,3
	.word	g_AppCpu0
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('g_AppCpu0')
	.sect	'.debug_abbrev'
.L131:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_info',debug,cluster('tricore_timers')
	.sect	'.debug_info'
.L132:
	.word	201
	.half	3
	.word	.L133
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1,2
	.word	.L46
	.byte	3
	.byte	'tricore_timers',0,19,17,21
	.word	.L255
	.byte	5,3
	.word	tricore_timers
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('tricore_timers')
	.sect	'.debug_abbrev'
.L133:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('STMs')
	.sect	'.debug_info'
.L134:
	.word	191
	.half	3
	.word	.L135
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1,2
	.word	.L46
	.byte	3
	.byte	'STMs',0,19,18,32
	.word	.L256
	.byte	5,3
	.word	STMs
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('STMs')
	.sect	'.debug_abbrev'
.L135:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('GPSR')
	.sect	'.debug_info'
.L136:
	.word	191
	.half	3
	.word	.L137
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1,2
	.word	.L46
	.byte	3
	.byte	'GPSR',0,19,19,37
	.word	.L257
	.byte	5,3
	.word	GPSR
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('GPSR')
	.sect	'.debug_abbrev'
.L137:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('rt_interrupt_from_thread')
	.sect	'.debug_info'
.L138:
	.word	211
	.half	3
	.word	.L139
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1,2
	.word	.L46
	.byte	3
	.byte	'rt_interrupt_from_thread',0,19,21,28
	.word	.L258
	.byte	5,3
	.word	rt_interrupt_from_thread
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('rt_interrupt_from_thread')
	.sect	'.debug_abbrev'
.L139:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('rt_interrupt_to_thread')
	.sect	'.debug_info'
.L140:
	.word	209
	.half	3
	.word	.L141
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1,2
	.word	.L46
	.byte	3
	.byte	'rt_interrupt_to_thread',0,19,22,28
	.word	.L259
	.byte	5,3
	.word	rt_interrupt_to_thread
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('rt_interrupt_to_thread')
	.sect	'.debug_abbrev'
.L141:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('rt_thread_switch_interrupt_flag')
	.sect	'.debug_info'
.L142:
	.word	218
	.half	3
	.word	.L143
	.byte	4,1
	.byte	'..\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu\\cpuport.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1,2
	.word	.L46
	.byte	3
	.byte	'rt_thread_switch_interrupt_flag',0,19,25,28
	.word	.L260
	.byte	5,3
	.word	rt_thread_switch_interrupt_flag
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('rt_thread_switch_interrupt_flag')
	.sect	'.debug_abbrev'
.L143:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_2')
	.sect	'.debug_loc'
.L34:
	.word	-1,.L35,0,.L124-.L35
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_3')
	.sect	'.debug_loc'
.L28:
	.word	-1,.L29,0,.L129-.L29
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('KERNEL_INTERRUPT')
	.sect	'.debug_loc'
.L24:
	.word	-1,.L25,0,.L214-.L25
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('KERNEL_YIELD')
	.sect	'.debug_loc'
.L26:
	.word	-1,.L27,0,.L215-.L27
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('get_clk')
	.sect	'.debug_loc'
.L42:
	.word	-1,.L43,0,.L188-.L43
	.half	2
	.byte	138,0
	.word	0,0
.L193:
	.word	0,0
.L198:
	.word	-1,.L43,.L315-.L43,.L316-.L43
	.half	1
	.byte	95
	.word	0,0
.L203:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('rt_hw_board_init')
	.sect	'.debug_loc'
.L224:
	.word	0,0
.L229:
	.word	-1,.L31,.L267-.L31,.L268-.L31
	.half	1
	.byte	95
	.word	.L269-.L31,.L270-.L31
	.half	1
	.byte	95
	.word	0,0
.L238:
	.word	0,0
.L30:
	.word	-1,.L31,0,.L217-.L31
	.half	2
	.byte	138,0
	.word	0,0
.L243:
	.word	0,0
.L249:
	.word	0,0
.L234:
	.word	0,0
.L222:
	.word	0,0
.L236:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('rt_hw_context_switch')
	.sect	'.debug_loc'
.L177:
	.word	-1,.L33,0,.L271-.L33
	.half	1
	.byte	84
	.word	.L272-.L33,.L271-.L33
	.half	1
	.byte	95
	.word	.L35-.L33,.L273-.L33
	.half	1
	.byte	95
	.word	.L274-.L33,.L275-.L33
	.half	1
	.byte	111
	.word	0,0
.L180:
	.word	-1,.L33,.L272-.L33,.L271-.L33
	.half	1
	.byte	82
	.word	.L35-.L33,.L124-.L33
	.half	1
	.byte	82
	.word	.L276-.L33,.L124-.L33
	.half	1
	.byte	84
	.word	.L277-.L33,.L278-.L33
	.half	1
	.byte	82
	.word	.L277-.L33,.L278-.L33
	.half	1
	.byte	84
	.word	0,0
.L32:
	.word	-1,.L33,0,.L175-.L33
	.half	2
	.byte	138,0
	.word	0,0
.L178:
	.word	-1,.L33,0,.L271-.L33
	.half	1
	.byte	85
	.word	.L272-.L33,.L271-.L33
	.half	1
	.byte	88
	.word	.L35-.L33,.L124-.L33
	.half	1
	.byte	88
	.word	.L275-.L33,.L124-.L33
	.half	1
	.byte	111
	.word	.L277-.L33,.L175-.L33
	.half	1
	.byte	88
	.word	.L277-.L33,.L175-.L33
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('rt_hw_context_switch_interrupt')
	.sect	'.debug_loc'
.L185:
	.word	-1,.L37,0,.L279-.L37
	.half	1
	.byte	84
	.word	.L280-.L37,.L279-.L37
	.half	1
	.byte	95
	.word	.L35-.L37,.L273-.L37
	.half	1
	.byte	95
	.word	.L274-.L37,.L275-.L37
	.half	1
	.byte	111
	.word	0,0
.L187:
	.word	-1,.L37,.L280-.L37,.L279-.L37
	.half	1
	.byte	82
	.word	.L35-.L37,.L124-.L37
	.half	1
	.byte	82
	.word	.L276-.L37,.L124-.L37
	.half	1
	.byte	84
	.word	.L281-.L37,.L282-.L37
	.half	1
	.byte	82
	.word	.L281-.L37,.L282-.L37
	.half	1
	.byte	84
	.word	0,0
.L36:
	.word	-1,.L37,0,.L184-.L37
	.half	2
	.byte	138,0
	.word	0,0
.L186:
	.word	-1,.L37,0,.L279-.L37
	.half	1
	.byte	85
	.word	.L280-.L37,.L279-.L37
	.half	1
	.byte	88
	.word	.L35-.L37,.L124-.L37
	.half	1
	.byte	88
	.word	.L275-.L37,.L124-.L37
	.half	1
	.byte	111
	.word	.L281-.L37,.L283-.L37
	.half	1
	.byte	111
	.word	.L29-.L37,.L129-.L37
	.half	1
	.byte	88
	.word	.L29-.L37,.L284-.L37
	.half	1
	.byte	111
	.word	.L281-.L37,.L184-.L37
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('rt_hw_context_switch_to')
	.sect	'.debug_loc'
.L183:
	.word	-1,.L39,.L285-.L39,.L286-.L39
	.half	1
	.byte	82
	.word	.L289-.L39,.L181-.L39
	.half	1
	.byte	88
	.word	.L290-.L39,.L181-.L39
	.half	1
	.byte	84
	.word	0,0
.L38:
	.word	-1,.L39,0,.L181-.L39
	.half	2
	.byte	138,0
	.word	0,0
.L182:
	.word	-1,.L39,0,.L285-.L39
	.half	1
	.byte	84
	.word	.L285-.L39,.L287-.L39
	.half	1
	.byte	95
	.word	.L288-.L39,.L181-.L39
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('rt_hw_interrupt_disable')
	.sect	'.debug_loc'
.L164:
	.word	-1,.L15,.L261-.L15,.L262-.L15
	.half	1
	.byte	95
	.word	0,0
.L14:
	.word	-1,.L15,0,.L156-.L15
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('rt_hw_interrupt_enable')
	.sect	'.debug_loc'
.L169:
	.word	0,0
.L173:
	.word	0,0
.L166:
	.word	-1,.L17,0,.L165-.L17
	.half	1
	.byte	84
	.word	0,0
.L16:
	.word	-1,.L17,0,.L165-.L17
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('rt_hw_stack_init')
	.sect	'.debug_loc'
.L154:
	.word	-1,.L41,.L297-.L41,.L298-.L41
	.half	1
	.byte	110
	.word	.L303-.L41,.L8-.L41
	.half	1
	.byte	95
	.word	.L8-.L41,.L145-.L41
	.half	1
	.byte	110
	.word	.L306-.L41,.L307-.L41
	.half	1
	.byte	100
	.word	.L313-.L41,.L145-.L41
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L148:
	.word	-1,.L41,0,.L292-.L41
	.half	1
	.byte	101
	.word	.L294-.L41,.L145-.L41
	.half	2
	.byte	145,112
	.word	.L308-.L41,.L309-.L41
	.half	1
	.byte	111
	.word	0,0
.L40:
	.word	-1,.L41,0,.L291-.L41
	.half	2
	.byte	138,0
	.word	.L291-.L41,.L145-.L41
	.half	2
	.byte	138,16
	.word	.L145-.L41,.L145-.L41
	.half	2
	.byte	138,0
	.word	0,0
.L149:
	.word	-1,.L41,0,.L292-.L41
	.half	1
	.byte	102
	.word	.L295-.L41,.L145-.L41
	.half	1
	.byte	108
	.word	.L314-.L41,.L145-.L41
	.half	1
	.byte	98
	.word	0,0
.L147:
	.word	-1,.L41,0,.L292-.L41
	.half	1
	.byte	100
	.word	.L293-.L41,.L145-.L41
	.half	2
	.byte	145,116
	.word	.L309-.L41,.L310-.L41
	.half	1
	.byte	111
	.word	0,0
.L150:
	.word	-1,.L41,0,.L292-.L41
	.half	1
	.byte	103
	.word	.L296-.L41,.L145-.L41
	.half	1
	.byte	109
	.word	0,0
.L152:
	.word	-1,.L41,.L299-.L41,.L300-.L41
	.half	1
	.byte	95
	.word	.L301-.L41,.L302-.L41
	.half	1
	.byte	111
	.word	.L300-.L41,.L145-.L41
	.half	2
	.byte	145,120
	.word	.L302-.L41,.L304-.L41
	.half	1
	.byte	100
	.word	.L304-.L41,.L305-.L41
	.half	1
	.byte	111
	.word	.L310-.L41,.L145-.L41
	.half	1
	.byte	111
	.word	.L311-.L41,.L312-.L41
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('rt_hw_systick_init')
	.sect	'.debug_loc'
.L18:
	.word	-1,.L19,0,.L263-.L19
	.half	2
	.byte	138,0
	.word	.L263-.L19,.L208-.L19
	.half	2
	.byte	138,48
	.word	.L208-.L19,.L208-.L19
	.half	2
	.byte	138,0
	.word	0,0
.L210:
	.word	-1,.L19,0,.L208-.L19
	.half	2
	.byte	145,80
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('rt_hw_usart_init')
	.sect	'.debug_loc'
.L20:
	.word	-1,.L21,0,.L211-.L21
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('tricore_trap_yield_for_task')
	.sect	'.debug_loc'
.L253:
	.word	-1,.L45,0,.L251-.L45
	.half	1
	.byte	84
	.word	0,0
.L44:
	.word	-1,.L45,0,.L251-.L45
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('trigger_scheduling')
	.sect	'.debug_loc'
.L213:
	.word	-1,.L23,.L264-.L23,.L265-.L23
	.half	1
	.byte	95
	.word	.L266-.L23,.L4-.L23
	.half	1
	.byte	111
	.word	0,0
.L22:
	.word	-1,.L23,0,.L212-.L23
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L482:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('rt_hw_interrupt_disable')
	.sect	'.debug_frame'
	.word	24
	.word	.L482,.L15,.L156-.L15
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('rt_hw_interrupt_enable')
	.sect	'.debug_frame'
	.word	24
	.word	.L482,.L17,.L165-.L17
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('rt_hw_systick_init')
	.sect	'.debug_frame'
	.word	36
	.word	.L482,.L19,.L208-.L19
	.byte	4
	.word	(.L263-.L19)/2
	.byte	19,48,22,26,3,19,138,48,4
	.word	(.L208-.L263)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('rt_hw_usart_init')
	.sect	'.debug_frame'
	.word	12
	.word	.L482,.L21,.L211-.L21
	.sdecl	'.debug_frame',debug,cluster('trigger_scheduling')
	.sect	'.debug_frame'
	.word	24
	.word	.L482,.L23,.L212-.L23
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('KERNEL_INTERRUPT')
	.sect	'.debug_frame'
	.word	12
	.word	.L482,.L25,.L214-.L25
	.sdecl	'.debug_frame',debug,cluster('KERNEL_YIELD')
	.sect	'.debug_frame'
	.word	12
	.word	.L482,.L27,.L215-.L27
	.sdecl	'.debug_frame',debug,cluster('rt_hw_board_init')
	.sect	'.debug_frame'
	.word	12
	.word	.L482,.L31,.L217-.L31
	.sdecl	'.debug_frame',debug,cluster('rt_hw_context_switch')
	.sect	'.debug_frame'
	.word	12
	.word	.L482,.L33,.L175-.L33
	.sdecl	'.debug_frame',debug,cluster('rt_hw_context_switch_interrupt')
	.sect	'.debug_frame'
	.word	12
	.word	.L482,.L37,.L184-.L37
	.sdecl	'.debug_frame',debug,cluster('rt_hw_context_switch_to')
	.sect	'.debug_frame'
	.word	12
	.word	.L482,.L39,.L181-.L39
	.sdecl	'.debug_frame',debug,cluster('rt_hw_stack_init')
	.sect	'.debug_frame'
	.word	36
	.word	.L482,.L41,.L145-.L41
	.byte	4
	.word	(.L291-.L41)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L145-.L291)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('get_clk')
	.sect	'.debug_frame'
	.word	12
	.word	.L482,.L43,.L188-.L43
	.sdecl	'.debug_frame',debug,cluster('tricore_trap_yield_for_task')
	.sect	'.debug_frame'
	.word	12
	.word	.L482,.L45,.L251-.L45
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L483:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_3')
	.sect	'.debug_frame'
	.word	24
	.word	.L483,.L29,.L129-.L29
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_2')
	.sect	'.debug_frame'
	.word	24
	.word	.L483,.L35,.L124-.L35
	.byte	8,18,8,19,8,20,8,21,8,22,8,23

; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   316  
; ..\0_Src\0_AppSw\Tricore\rt-thread\libcpu\cpuport.c	   317  

	; Module end
