	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\1_SrvSw\\StdIf\\.IfxStdIf_DPipe.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include\\libc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\1_SrvSw\\StdIf\\IfxStdIf_DPipe.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\1_SrvSw\\StdIf\\IfxStdIf_DPipe.src ..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_DPipe.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_DPipe.c'

	
$TC162
	.sdecl	'.zrodata.IfxStdIf_DPipe..1.cnt',data,rom
	.sect	'.zrodata.IfxStdIf_DPipe..1.cnt'
	.align	4
.1.cnt:	.type	object
	.size	.1.cnt,8
	.word	-1,2147483647
	
	.sdecl	'.text.IfxStdIf_DPipe.IfxStdIf_DPipe_print',code,cluster('IfxStdIf_DPipe_print')
	.sect	'.text.IfxStdIf_DPipe.IfxStdIf_DPipe_print'
	.align	2
	
	.global	IfxStdIf_DPipe_print

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	     1  /**
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	     2   * \file IfxStdIf_DPipe.c
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	     3   * \brief Standard interface: Data Pipe
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	     4   * \ingroup IfxStdIf
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	     5   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	     6   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	     7   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	     8   * $Date: 2014-02-27 20:08:23 GMT$
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	     9   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    11   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    16   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    18   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    24   * do so, all subject to the following:
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    25   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    31   * language processor.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    32   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    40   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    41   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    42  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    43  #include "IfxStdIf_DPipe.h"
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    44  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    45  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    46  #include <string.h>
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    47  #include <stdio.h>
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    48  #include <stdarg.h>
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    49  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    50  void IfxStdIf_DPipe_print(IfxStdIf_DPipe *stdIf, pchar format, ...)
; Function IfxStdIf_DPipe_print
.L4:
IfxStdIf_DPipe_print:	.type	func
	mov.aa	a15,a4
.L41:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    51  {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    52      if (!stdIf->txDisabled)
	ld.bu	d15,[a15]4
.L50:
	lea	a10,[a10]-264
.L38:
	jne	d15,#0,.L2
.L19:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    53      {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    54          char      message[STDIF_DPIPE_MAX_PRINT_SIZE + 1];
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    55          Ifx_SizeT count;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    56          va_list   args;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    57          va_start(args, format);
	lea	a6,[a10]264
.L51:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    58          vsprintf((char *)message, format, args);
	mov.aa	a4,a10
.L40:
	call	vsprintf
.L39:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    59          va_end(args);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    60          count = (Ifx_SizeT)strlen(message);
	mov.aa	a4,a10
	call	strlen
.L25:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     1  /**
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     2   * \file IfxStdIf_DPipe.h
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     3   * \brief Standard interface: Data Pipe
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     4   * \ingroup IfxStdIf
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     5   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     6   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     7   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     8   * $Date: 2014-02-27 20:08:24 GMT$
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     9   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    11   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    16   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    18   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    24   * do so, all subject to the following:
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    25   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    31   * language processor.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    32   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    40   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    41   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    42   * \defgroup library_srvsw_stdif_dpipe Standard interface: Data Pipe
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    43   * \ingroup library_srvsw_stdif
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    44   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    45   * The standard interafce data pipe (DPipe) abstract the hardware used for data transfer. It provide, after proper initialization an hardware independant way to write
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    46   * and read data to/from as communciation channel.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    47   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    48   * \par Porting StandardIo to DPipe
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    49   * replace all
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    50   *  - StandardIo type with IfxStdIf_DPipe
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    51   *  - StandardIo_print with IfxStdIf_DPipe_print
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    52   * delete StandardIo.c and StandardIo.h
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    53   * Include "StdIf/IfxStdIf_DPipe.h" instead of "SysSe/Bsp/StandardIo.h"
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    54   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    55   * The following files are already ported: Ifx_Console, Ifx_Shell
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    56   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    57   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    58  #ifndef STDIF_DPIPE_H_
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    59  #define STDIF_DPIPE_H_ 1
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    60  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    61  #include "IfxStdIf.h"
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    62  //----------------------------------------------------------------------------------------
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    63  #ifndef ENDL
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    64  #    define ENDL       "\r\n"
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    65  #endif
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    66  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    67  /** \brief Forward declaration */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    68  typedef struct IfxStdIf_DPipe_ IfxStdIf_DPipe;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    69  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    70  typedef volatile boolean      *IfxStdIf_DPipe_WriteEvent;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    71  typedef volatile boolean      *IfxStdIf_DPipe_ReadEvent;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    72  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    73  /** \brief Size of the buffer allocated on the stack for the print function */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    74  #define STDIF_DPIPE_MAX_PRINT_SIZE (255)
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    75  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    76  /** \brief Write binary data into the \ref IfxStdIf_DPipe.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    77   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    78   * Initially the parameter 'count' specifies count of data to write.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    79   * After execution the data pointed by 'count' specifies the data actually written
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    80   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    81   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    82   * \param data Pointer to the start of data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    83   * \param count Pointer to the count of data (in bytes).
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    84   * \param timeout in system timer ticks
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    85   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    86   * \retval TRUE Returns TRUE if all items could be written
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    87   * \retval FALSE Returns FALSE if not all the items could be written
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    88   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    89  typedef boolean (*IfxStdIf_DPipe_Write)(IfxStdIf_InterfaceDriver stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    90  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    91  /** \brief Read data from the \ref IfxStdIf_DPipe object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    92   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    93   * Initially the parameter 'count' specifies count of data to read.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    94   * After execution the data pointed by 'count' specifies the data actually read.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    95   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    96   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    97   * \param data Pointer to the start of data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    98   * \param count Pointer to the count of data (in bytes).
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    99   * \param timeout in system timer ticks
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   100   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   101   * \retval TRUE Returns TRUE if all items could be read
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   102   * \retval FALSE Returns FALSE if not all the items could be read
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   103   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   104  typedef boolean (*IfxStdIf_DPipe_Read)(IfxStdIf_InterfaceDriver stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   105  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   106  /** \brief Returns the number of bytes in the rx buffer
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   107   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   108   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   109   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   110   * \return Returns the number of bytes in the rx buffer
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   111   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   112  typedef sint32 (*IfxStdIf_DPipe_GetReadCount)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   113  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   114  /** \brief Returns read event object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   115   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   116   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   117   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   118   * \return Returns read event object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   119   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   120  typedef IfxStdIf_DPipe_ReadEvent (*IfxStdIf_DPipe_GetReadEvent)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   121  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   122  /** \brief Returns number of bytes send
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   123   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   124   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   125   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   126   * \return Returns number of bytes send
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   127   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   128  typedef uint32 (*IfxStdIf_DPipe_GetSendCount)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   129  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   130  /** \brief Returns the time stamp of the last transmit data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   131   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   132   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   133   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   134   * \return Returns the time stamp of the last transmit data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   135   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   136  typedef Ifx_TickTime (*IfxStdIf_DPipe_GetTxTimeStamp)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   137  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   138  /** \brief Returns the number of free bytes (free space) in the tx buffer
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   139   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   140   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   141   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   142   * \return Returns the number of free bytes in the tx buffer
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   143   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   144  typedef sint32 (*IfxStdIf_DPipe_GetWriteCount)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   145  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   146  /** \brief Returns write event object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   147   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   148   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   149   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   150   * \return Returns write event object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   151   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   152  typedef IfxStdIf_DPipe_WriteEvent (*IfxStdIf_DPipe_GetWriteEvent)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   153  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   154  /** \brief Indicates if the required number of bytes are available for read in the buffer
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   155   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   156   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   157   * \param count Pointer to the count of data (in bytes).
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   158   * \param timeout in system timer ticks
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   159   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   160   * \return Returns TRUE if at least count bytes are available for read in the rx buffer,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   161   * if not the Event is armed to be set when the buffer count is bigger or equal to the requested count
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   162   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   163  typedef boolean (*IfxStdIf_DPipe_CanReadCount)(IfxStdIf_InterfaceDriver stdIf, Ifx_SizeT count, Ifx_TickTime timeout);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   164  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   165  /** \brief  Indicates if there is enough free space to write the data in the buffer
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   166   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   167   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   168   * \param count Pointer to the count of data (in bytes).
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   169   * \param timeout in system timer ticks
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   170   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   171   * \return Returns TRUE if at least count bytes can be written to the tx buffer,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   172   *  if not the Event is armed to be set when the buffer free count is bigger or equal to the requested count
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   173   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   174  typedef boolean (*IfxStdIf_DPipe_CanWriteCount)(IfxStdIf_InterfaceDriver stdIf, Ifx_SizeT count, Ifx_TickTime timeout);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   175  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   176  /** \brief Flush the transmit buffer by transmitting all data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   177   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   178   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   179   * \param timeout timeout for the flush operation
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   180   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   181   * \return Returns TRUE if the FIFO is empty
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   182   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   183  typedef boolean (*IfxStdIf_DPipe_FlushTx)(IfxStdIf_InterfaceDriver stdIf, Ifx_TickTime timeout);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   184  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   185  /** \brief Clears the RX buffer by removing all data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   186   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   187   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   188   * \return void
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   189   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   190  typedef void (*IfxStdIf_DPipe_ClearRx)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   191  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   192  /** \brief Clears the TX buffer by removing all data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   193   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   194   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   195   * \return void
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   196   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   197  typedef void (*IfxStdIf_DPipe_ClearTx)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   198  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   199  /** \brief handler called on reveive event
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   200   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   201   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   202   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   203   * \return none
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   204   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   205  typedef void (*IfxStdIf_DPipe_OnReceive)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   206  /** \brief handler called on transmit event
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   207   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   208   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   209   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   210   * \return none
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   211   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   212  typedef void (*IfxStdIf_DPipe_OnTransmit)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   213  /** \brief handler called on error event
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   214   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   215   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   216   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   217   * \return none
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   218   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   219  typedef void (*IfxStdIf_DPipe_OnError)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   220  /** \brief Reset the sendCount counter
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   221   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   222   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   223   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   224   * \return none
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   225   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   226  typedef void (*IfxStdIf_DPipe_ResetSendCount)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   227  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   228  /** \brief Standard interface object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   229   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   230  struct IfxStdIf_DPipe_
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   231  {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   232      IfxStdIf_InterfaceDriver driver;              /**< \brief Pointer to the specific driver object */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   233      boolean                  txDisabled;          /**< \brief If disabled is set to TRUE, the output is disabled, else enabled */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   234  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   235      /* Standard interface APIs */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   236      IfxStdIf_DPipe_Write          write;          /**< \brief \see IfxStdIf_DPipe_Write */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   237      IfxStdIf_DPipe_Read           read;           /**< \brief \see IfxStdIf_DPipe_Read */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   238      IfxStdIf_DPipe_GetReadCount   getReadCount;   /**< \brief \see IfxStdIf_DPipe_GetReadCount */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   239      IfxStdIf_DPipe_GetReadEvent   getReadEvent;   /**< \brief \see IfxStdIf_DPipe_GetReadEvent */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   240      IfxStdIf_DPipe_GetWriteCount  getWriteCount;  /**< \brief \see IfxStdIf_DPipe_GetWriteCount */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   241      IfxStdIf_DPipe_GetWriteEvent  getWriteEvent;  /**< \brief \see IfxStdIf_DPipe_GetWriteEvent */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   242      IfxStdIf_DPipe_CanReadCount   canReadCount;   /**< \brief \see IfxStdIf_DPipe_CanReadCount */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   243      IfxStdIf_DPipe_CanWriteCount  canWriteCount;  /**< \brief \see IfxStdIf_DPipe_CanWriteCount */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   244      IfxStdIf_DPipe_FlushTx        flushTx;        /**< \brief \see IfxStdIf_DPipe_FlushTx */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   245      IfxStdIf_DPipe_ClearTx        clearTx;        /**< \brief \see IfxStdIf_DPipe_ClearTx */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   246      IfxStdIf_DPipe_ClearRx        clearRx;        /**< \brief \see IfxStdIf_DPipe_ClearRx */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   247      IfxStdIf_DPipe_OnReceive      onReceive;      /**< \brief \see IfxStdIf_DPipe_OnReceive  */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   248      IfxStdIf_DPipe_OnTransmit     onTransmit;     /**< \brief \see IfxStdIf_DPipe_OnTransmit */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   249      IfxStdIf_DPipe_OnError        onError;        /**< \brief \see IfxStdIf_DPipe_OnError    */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   250  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   251      IfxStdIf_DPipe_GetSendCount   getSendCount;   /**< \brief \see IfxStdIf_DPipe_GetSendCount    */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   252      IfxStdIf_DPipe_GetTxTimeStamp getTxTimeStamp; /**< \brief \see IfxStdIf_DPipe_GetTxTimeStamp    */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   253      IfxStdIf_DPipe_ResetSendCount resetSendCount; /**< \brief \see IfxStdIf_DPipe_ResetSendCount    */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   254  };
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   255  /** \addtogroup library_srvsw_stdif_dpipe
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   256   * \{ */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   257  /** \copydoc IfxStdIf_DPipe_Write
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   258   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   259  IFX_INLINE boolean IfxStdIf_DPipe_write(IfxStdIf_DPipe *stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   260  {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   261      return stdIf->write(stdIf->driver, data, count, timeout);
	ld.a	a2,[a15]8
.L52:
	ld.a	a4,[a15]
.L53:
	ld.d	e4,.1.cnt
.L54:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    61          IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, count < STDIF_DPIPE_MAX_PRINT_SIZE);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    62          //return
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    63          IfxStdIf_DPipe_write(stdIf, (void *)message, &count, TIME_INFINITE);
	mov.aa	a5,a10
.L55:
	lea	a6,[a10]256
.L26:
	st.h	[a10]256,d2
.L37:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     1  /**
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     2   * \file IfxStdIf_DPipe.h
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     3   * \brief Standard interface: Data Pipe
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     4   * \ingroup IfxStdIf
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     5   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     6   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     7   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     8   * $Date: 2014-02-27 20:08:24 GMT$
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     9   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    11   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    16   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    18   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    24   * do so, all subject to the following:
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    25   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    31   * language processor.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    32   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    40   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    41   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    42   * \defgroup library_srvsw_stdif_dpipe Standard interface: Data Pipe
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    43   * \ingroup library_srvsw_stdif
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    44   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    45   * The standard interafce data pipe (DPipe) abstract the hardware used for data transfer. It provide, after proper initialization an hardware independant way to write
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    46   * and read data to/from as communciation channel.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    47   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    48   * \par Porting StandardIo to DPipe
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    49   * replace all
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    50   *  - StandardIo type with IfxStdIf_DPipe
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    51   *  - StandardIo_print with IfxStdIf_DPipe_print
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    52   * delete StandardIo.c and StandardIo.h
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    53   * Include "StdIf/IfxStdIf_DPipe.h" instead of "SysSe/Bsp/StandardIo.h"
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    54   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    55   * The following files are already ported: Ifx_Console, Ifx_Shell
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    56   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    57   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    58  #ifndef STDIF_DPIPE_H_
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    59  #define STDIF_DPIPE_H_ 1
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    60  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    61  #include "IfxStdIf.h"
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    62  //----------------------------------------------------------------------------------------
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    63  #ifndef ENDL
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    64  #    define ENDL       "\r\n"
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    65  #endif
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    66  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    67  /** \brief Forward declaration */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    68  typedef struct IfxStdIf_DPipe_ IfxStdIf_DPipe;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    69  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    70  typedef volatile boolean      *IfxStdIf_DPipe_WriteEvent;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    71  typedef volatile boolean      *IfxStdIf_DPipe_ReadEvent;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    72  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    73  /** \brief Size of the buffer allocated on the stack for the print function */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    74  #define STDIF_DPIPE_MAX_PRINT_SIZE (255)
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    75  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    76  /** \brief Write binary data into the \ref IfxStdIf_DPipe.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    77   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    78   * Initially the parameter 'count' specifies count of data to write.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    79   * After execution the data pointed by 'count' specifies the data actually written
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    80   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    81   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    82   * \param data Pointer to the start of data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    83   * \param count Pointer to the count of data (in bytes).
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    84   * \param timeout in system timer ticks
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    85   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    86   * \retval TRUE Returns TRUE if all items could be written
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    87   * \retval FALSE Returns FALSE if not all the items could be written
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    88   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    89  typedef boolean (*IfxStdIf_DPipe_Write)(IfxStdIf_InterfaceDriver stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    90  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    91  /** \brief Read data from the \ref IfxStdIf_DPipe object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    92   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    93   * Initially the parameter 'count' specifies count of data to read.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    94   * After execution the data pointed by 'count' specifies the data actually read.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    95   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    96   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    97   * \param data Pointer to the start of data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    98   * \param count Pointer to the count of data (in bytes).
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    99   * \param timeout in system timer ticks
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   100   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   101   * \retval TRUE Returns TRUE if all items could be read
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   102   * \retval FALSE Returns FALSE if not all the items could be read
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   103   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   104  typedef boolean (*IfxStdIf_DPipe_Read)(IfxStdIf_InterfaceDriver stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   105  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   106  /** \brief Returns the number of bytes in the rx buffer
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   107   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   108   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   109   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   110   * \return Returns the number of bytes in the rx buffer
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   111   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   112  typedef sint32 (*IfxStdIf_DPipe_GetReadCount)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   113  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   114  /** \brief Returns read event object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   115   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   116   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   117   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   118   * \return Returns read event object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   119   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   120  typedef IfxStdIf_DPipe_ReadEvent (*IfxStdIf_DPipe_GetReadEvent)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   121  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   122  /** \brief Returns number of bytes send
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   123   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   124   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   125   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   126   * \return Returns number of bytes send
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   127   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   128  typedef uint32 (*IfxStdIf_DPipe_GetSendCount)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   129  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   130  /** \brief Returns the time stamp of the last transmit data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   131   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   132   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   133   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   134   * \return Returns the time stamp of the last transmit data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   135   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   136  typedef Ifx_TickTime (*IfxStdIf_DPipe_GetTxTimeStamp)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   137  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   138  /** \brief Returns the number of free bytes (free space) in the tx buffer
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   139   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   140   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   141   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   142   * \return Returns the number of free bytes in the tx buffer
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   143   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   144  typedef sint32 (*IfxStdIf_DPipe_GetWriteCount)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   145  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   146  /** \brief Returns write event object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   147   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   148   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   149   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   150   * \return Returns write event object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   151   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   152  typedef IfxStdIf_DPipe_WriteEvent (*IfxStdIf_DPipe_GetWriteEvent)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   153  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   154  /** \brief Indicates if the required number of bytes are available for read in the buffer
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   155   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   156   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   157   * \param count Pointer to the count of data (in bytes).
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   158   * \param timeout in system timer ticks
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   159   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   160   * \return Returns TRUE if at least count bytes are available for read in the rx buffer,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   161   * if not the Event is armed to be set when the buffer count is bigger or equal to the requested count
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   162   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   163  typedef boolean (*IfxStdIf_DPipe_CanReadCount)(IfxStdIf_InterfaceDriver stdIf, Ifx_SizeT count, Ifx_TickTime timeout);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   164  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   165  /** \brief  Indicates if there is enough free space to write the data in the buffer
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   166   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   167   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   168   * \param count Pointer to the count of data (in bytes).
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   169   * \param timeout in system timer ticks
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   170   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   171   * \return Returns TRUE if at least count bytes can be written to the tx buffer,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   172   *  if not the Event is armed to be set when the buffer free count is bigger or equal to the requested count
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   173   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   174  typedef boolean (*IfxStdIf_DPipe_CanWriteCount)(IfxStdIf_InterfaceDriver stdIf, Ifx_SizeT count, Ifx_TickTime timeout);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   175  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   176  /** \brief Flush the transmit buffer by transmitting all data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   177   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   178   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   179   * \param timeout timeout for the flush operation
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   180   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   181   * \return Returns TRUE if the FIFO is empty
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   182   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   183  typedef boolean (*IfxStdIf_DPipe_FlushTx)(IfxStdIf_InterfaceDriver stdIf, Ifx_TickTime timeout);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   184  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   185  /** \brief Clears the RX buffer by removing all data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   186   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   187   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   188   * \return void
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   189   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   190  typedef void (*IfxStdIf_DPipe_ClearRx)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   191  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   192  /** \brief Clears the TX buffer by removing all data
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   193   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   194   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   195   * \return void
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   196   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   197  typedef void (*IfxStdIf_DPipe_ClearTx)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   198  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   199  /** \brief handler called on reveive event
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   200   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   201   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   202   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   203   * \return none
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   204   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   205  typedef void (*IfxStdIf_DPipe_OnReceive)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   206  /** \brief handler called on transmit event
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   207   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   208   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   209   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   210   * \return none
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   211   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   212  typedef void (*IfxStdIf_DPipe_OnTransmit)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   213  /** \brief handler called on error event
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   214   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   215   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   216   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   217   * \return none
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   218   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   219  typedef void (*IfxStdIf_DPipe_OnError)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   220  /** \brief Reset the sendCount counter
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   221   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   222   * \param stdif Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   223   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   224   * \return none
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   225   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   226  typedef void (*IfxStdIf_DPipe_ResetSendCount)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   227  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   228  /** \brief Standard interface object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   229   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   230  struct IfxStdIf_DPipe_
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   231  {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   232      IfxStdIf_InterfaceDriver driver;              /**< \brief Pointer to the specific driver object */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   233      boolean                  txDisabled;          /**< \brief If disabled is set to TRUE, the output is disabled, else enabled */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   234  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   235      /* Standard interface APIs */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   236      IfxStdIf_DPipe_Write          write;          /**< \brief \see IfxStdIf_DPipe_Write */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   237      IfxStdIf_DPipe_Read           read;           /**< \brief \see IfxStdIf_DPipe_Read */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   238      IfxStdIf_DPipe_GetReadCount   getReadCount;   /**< \brief \see IfxStdIf_DPipe_GetReadCount */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   239      IfxStdIf_DPipe_GetReadEvent   getReadEvent;   /**< \brief \see IfxStdIf_DPipe_GetReadEvent */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   240      IfxStdIf_DPipe_GetWriteCount  getWriteCount;  /**< \brief \see IfxStdIf_DPipe_GetWriteCount */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   241      IfxStdIf_DPipe_GetWriteEvent  getWriteEvent;  /**< \brief \see IfxStdIf_DPipe_GetWriteEvent */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   242      IfxStdIf_DPipe_CanReadCount   canReadCount;   /**< \brief \see IfxStdIf_DPipe_CanReadCount */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   243      IfxStdIf_DPipe_CanWriteCount  canWriteCount;  /**< \brief \see IfxStdIf_DPipe_CanWriteCount */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   244      IfxStdIf_DPipe_FlushTx        flushTx;        /**< \brief \see IfxStdIf_DPipe_FlushTx */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   245      IfxStdIf_DPipe_ClearTx        clearTx;        /**< \brief \see IfxStdIf_DPipe_ClearTx */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   246      IfxStdIf_DPipe_ClearRx        clearRx;        /**< \brief \see IfxStdIf_DPipe_ClearRx */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   247      IfxStdIf_DPipe_OnReceive      onReceive;      /**< \brief \see IfxStdIf_DPipe_OnReceive  */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   248      IfxStdIf_DPipe_OnTransmit     onTransmit;     /**< \brief \see IfxStdIf_DPipe_OnTransmit */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   249      IfxStdIf_DPipe_OnError        onError;        /**< \brief \see IfxStdIf_DPipe_OnError    */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   250  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   251      IfxStdIf_DPipe_GetSendCount   getSendCount;   /**< \brief \see IfxStdIf_DPipe_GetSendCount    */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   252      IfxStdIf_DPipe_GetTxTimeStamp getTxTimeStamp; /**< \brief \see IfxStdIf_DPipe_GetTxTimeStamp    */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   253      IfxStdIf_DPipe_ResetSendCount resetSendCount; /**< \brief \see IfxStdIf_DPipe_ResetSendCount    */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   254  };
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   255  /** \addtogroup library_srvsw_stdif_dpipe
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   256   * \{ */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   257  /** \copydoc IfxStdIf_DPipe_Write
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   258   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   259  IFX_INLINE boolean IfxStdIf_DPipe_write(IfxStdIf_DPipe *stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   260  {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   261      return stdIf->write(stdIf->driver, data, count, timeout);
	ji	a2
.L2:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    64      }
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    65      else
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    66      {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    67          //return TRUE;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    68      }
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.c	    69  }
	ret
.L14:
	
__IfxStdIf_DPipe_print_function_end:
	.size	IfxStdIf_DPipe_print,__IfxStdIf_DPipe_print_function_end-IfxStdIf_DPipe_print
.L13:
	; End of function
	
	.calls	'IfxStdIf_DPipe_print','vsprintf'
	.calls	'IfxStdIf_DPipe_print','strlen'
	.calls	'IfxStdIf_DPipe_print','__INDIRECT__'
	.extern	strlen
	.extern	vsprintf
	.extern	__printf_float
	.extern	__printf_llong
	.extern	__INDIRECT__
	.calls	'IfxStdIf_DPipe_print','',264
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L6:
	.word	2449
	.half	3
	.word	.L7
	.byte	4
.L5:
	.byte	1
	.byte	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_DPipe.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L8
	.byte	2
	.byte	'unsigned char',0,1,8,3
	.byte	'void',0,4
	.word	179
	.byte	5
	.byte	'IfxStdIf_InterfaceDriver',0,2,115,15
	.word	185
.L22:
	.byte	2
	.byte	'short int',0,2,5,4
	.word	223
	.byte	2
	.byte	'long long int',0,8,5,6
	.word	162
	.byte	1,1,7
	.word	185
	.byte	7
	.word	185
	.byte	7
	.word	236
	.byte	7
	.word	241
	.byte	0,4
	.word	258
	.byte	5
	.byte	'IfxStdIf_DPipe_Write',0,1,89,19
	.word	286
	.byte	5
	.byte	'IfxStdIf_DPipe_Read',0,1,104,19
	.word	286
	.byte	2
	.byte	'long int',0,4,5,6
	.word	348
	.byte	1,1,7
	.word	185
	.byte	0,4
	.word	360
	.byte	5
	.byte	'IfxStdIf_DPipe_GetReadCount',0,1,112,18
	.word	373
	.byte	8
	.word	162
	.byte	4
	.word	414
	.byte	6
	.word	419
	.byte	1,1,7
	.word	185
	.byte	0,4
	.word	424
	.byte	5
	.byte	'IfxStdIf_DPipe_GetReadEvent',0,1,120,36
	.word	437
	.byte	5
	.byte	'IfxStdIf_DPipe_GetWriteCount',0,1,144,1,18
	.word	373
	.byte	4
	.word	424
	.byte	5
	.byte	'IfxStdIf_DPipe_GetWriteEvent',0,1,152,1,37
	.word	516
	.byte	6
	.word	162
	.byte	1,1,7
	.word	185
	.byte	7
	.word	223
	.byte	7
	.word	241
	.byte	0,4
	.word	559
	.byte	5
	.byte	'IfxStdIf_DPipe_CanReadCount',0,1,163,1,19
	.word	582
	.byte	5
	.byte	'IfxStdIf_DPipe_CanWriteCount',0,1,174,1,19
	.word	582
	.byte	6
	.word	162
	.byte	1,1,7
	.word	185
	.byte	7
	.word	241
	.byte	0,4
	.word	662
	.byte	5
	.byte	'IfxStdIf_DPipe_FlushTx',0,1,183,1,19
	.word	680
	.byte	9,1,1,7
	.word	185
	.byte	0,4
	.word	717
	.byte	5
	.byte	'IfxStdIf_DPipe_ClearTx',0,1,197,1,16
	.word	726
	.byte	5
	.byte	'IfxStdIf_DPipe_ClearRx',0,1,190,1,16
	.word	726
	.byte	5
	.byte	'IfxStdIf_DPipe_OnReceive',0,1,205,1,16
	.word	726
	.byte	5
	.byte	'IfxStdIf_DPipe_OnTransmit',0,1,212,1,16
	.word	726
	.byte	5
	.byte	'IfxStdIf_DPipe_OnError',0,1,219,1,16
	.word	726
	.byte	2
	.byte	'unsigned long int',0,4,7,6
	.word	896
	.byte	1,1,7
	.word	185
	.byte	0,4
	.word	917
	.byte	5
	.byte	'IfxStdIf_DPipe_GetSendCount',0,1,128,1,18
	.word	930
	.byte	6
	.word	241
	.byte	1,1,7
	.word	185
	.byte	0,4
	.word	972
	.byte	5
	.byte	'IfxStdIf_DPipe_GetTxTimeStamp',0,1,136,1,24
	.word	985
	.byte	5
	.byte	'IfxStdIf_DPipe_ResetSendCount',0,1,226,1,16
	.word	726
	.byte	10
	.byte	'IfxStdIf_DPipe_',0,1,230,1,8,76,11
	.byte	'driver',0
	.word	190
	.byte	4,2,35,0,11
	.byte	'txDisabled',0
	.word	162
	.byte	1,2,35,4,11
	.byte	'write',0
	.word	291
	.byte	4,2,35,8,11
	.byte	'read',0
	.word	320
	.byte	4,2,35,12,11
	.byte	'getReadCount',0
	.word	378
	.byte	4,2,35,16,11
	.byte	'getReadEvent',0
	.word	442
	.byte	4,2,35,20,11
	.byte	'getWriteCount',0
	.word	478
	.byte	4,2,35,24,11
	.byte	'getWriteEvent',0
	.word	521
	.byte	4,2,35,28,11
	.byte	'canReadCount',0
	.word	587
	.byte	4,2,35,32,11
	.byte	'canWriteCount',0
	.word	624
	.byte	4,2,35,36,11
	.byte	'flushTx',0
	.word	685
	.byte	4,2,35,40,11
	.byte	'clearTx',0
	.word	731
	.byte	4,2,35,44,11
	.byte	'clearRx',0
	.word	763
	.byte	4,2,35,48,11
	.byte	'onReceive',0
	.word	795
	.byte	4,2,35,52,11
	.byte	'onTransmit',0
	.word	829
	.byte	4,2,35,56,11
	.byte	'onError',0
	.word	864
	.byte	4,2,35,60,11
	.byte	'getSendCount',0
	.word	935
	.byte	4,2,35,64,11
	.byte	'getTxTimeStamp',0
	.word	990
	.byte	4,2,35,68,11
	.byte	'resetSendCount',0
	.word	1029
	.byte	4,2,35,72,0
.L15:
	.byte	4
	.word	1068
	.byte	4
	.word	223
.L24:
	.byte	12
	.byte	'IfxStdIf_DPipe_write',0,3,1,131,2,20
	.word	162
	.byte	1,1
.L27:
	.byte	13
	.byte	'stdIf',0,1,131,2,57
	.word	1468
.L29:
	.byte	13
	.byte	'data',0,1,131,2,70
	.word	185
.L31:
	.byte	13
	.byte	'count',0,1,131,2,87
	.word	1473
.L33:
	.byte	13
	.byte	'timeout',0,1,131,2,107
	.word	241
.L35:
	.byte	14,0,4
	.word	179
	.byte	4
	.word	258
	.byte	4
	.word	258
	.byte	4
	.word	360
	.byte	4
	.word	424
	.byte	4
	.word	360
	.byte	4
	.word	424
	.byte	4
	.word	559
	.byte	4
	.word	559
	.byte	4
	.word	662
	.byte	4
	.word	717
	.byte	4
	.word	717
	.byte	4
	.word	717
	.byte	4
	.word	717
	.byte	4
	.word	717
	.byte	4
	.word	917
	.byte	4
	.word	972
	.byte	4
	.word	717
	.byte	2
	.byte	'int',0,4,5,15
	.word	1664
	.byte	16
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,7
	.word	1671
	.byte	0,2
	.byte	'unsigned int',0,4,7,8
	.word	1713
	.byte	4
	.word	1713
	.byte	17
	.byte	'__cmpswapw',0
	.word	1729
	.byte	1,1,1,1,18
	.byte	'p',0
	.word	1734
	.byte	18
	.byte	'value',0
	.word	1713
	.byte	18
	.byte	'compare',0
	.word	1713
	.byte	0,19
	.byte	'__dotdotdot__',0
	.word	185
	.byte	1,1,1,1,20
	.word	1478
	.byte	21
	.word	1511
	.byte	21
	.word	1526
	.byte	21
	.word	1540
	.byte	21
	.word	1555
	.byte	14,0,2
	.byte	'char',0,1,6,15
	.word	1841
	.byte	4
	.word	1849
	.byte	15
	.word	1841
	.byte	4
	.word	1859
.L17:
	.byte	5
	.byte	'pchar',0,3,53,28
	.word	1864
.L20:
	.byte	22,128,2
	.word	1841
	.byte	23,255,1,0,24
	.byte	'strlen',0,4,52,17
	.word	1713
	.byte	1,1,1,1,25,4,52,39
	.word	1864
	.byte	0,4
	.word	1841
	.byte	26
	.word	1922
	.byte	26
	.word	1864
	.byte	5
	.byte	'va_list',0,6,24,16
	.word	1922
	.byte	24
	.byte	'vsprintf',0,5,151,1,16
	.word	1664
	.byte	1,1,1,1,25,5,151,1,32
	.word	1927
	.byte	25,5,151,1,55
	.word	1932
	.byte	25,5,151,1,67
	.word	1937
	.byte	0,4
	.word	1841
	.byte	27
	.byte	'__INDIRECT__',0,7,1,1,1,1,1,5
	.byte	'__wchar_t',0,7,1,1
	.word	223
	.byte	5
	.byte	'__size_t',0,7,1,1
	.word	1713
	.byte	5
	.byte	'__ptrdiff_t',0,7,1,1
	.word	1664
	.byte	28,1,4
	.word	2083
	.byte	5
	.byte	'__codeptr',0,7,1,1
	.word	2085
	.byte	5
	.byte	'size_t',0,8,24,25
	.word	1713
	.byte	5
	.byte	'boolean',0,9,104,29
	.word	162
	.byte	5
	.byte	'uint8',0,9,108,29
	.word	162
	.byte	2
	.byte	'unsigned short int',0,2,7,5
	.byte	'uint16',0,9,112,29
	.word	2153
	.byte	5
	.byte	'uint32',0,9,116,29
	.word	896
	.byte	5
	.byte	'sint16',0,9,129,1,29
	.word	223
	.byte	5
	.byte	'sint32',0,9,134,1,29
	.word	348
	.byte	5
	.byte	'sint64',0,9,141,1,29
	.word	241
	.byte	2
	.byte	'float',0,4,4,5
	.byte	'float32',0,9,170,1,29
	.word	2253
	.byte	5
	.byte	'pvoid',0,3,54,28
	.word	185
	.byte	5
	.byte	'Ifx_TickTime',0,3,76,28
	.word	241
	.byte	5
	.byte	'Ifx_SizeT',0,3,89,16
	.word	223
	.byte	5
	.byte	'IfxStdIf_DPipe',0,1,68,32
	.word	1068
	.byte	8
	.word	162
	.byte	4
	.word	2355
	.byte	5
	.byte	'IfxStdIf_DPipe_WriteEvent',0,1,70,32
	.word	2360
	.byte	5
	.byte	'IfxStdIf_DPipe_ReadEvent',0,1,71,32
	.word	2360
	.byte	5
	.byte	'_iob_flag_t',0,5,82,25
	.word	2153
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L7:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,59,0,3,8,0,0,4,15,0,73,19,0
	.byte	0,5,22,0,3,8,58,15,59,15,57,15,73,19,0,0,6,21,1,73,19,54,15,39,12,0,0,7,5,0,73,19,0,0,8,53,0,73,19,0,0
	.byte	9,21,1,54,15,39,12,0,0,10,19,1,3,8,58,15,59,15,57,15,11,15,0,0,11,13,0,3,8,73,19,11,15,56,9,0,0,12,46
	.byte	1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,13,5,0,3,8,58,15,59,15,57,15,73,19,0,0,14,11,0,0,0
	.byte	15,38,0,73,19,0,0,16,46,1,3,8,54,15,39,12,63,12,60,12,0,0,17,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0
	.byte	0,18,5,0,3,8,73,19,0,0,19,46,0,3,8,73,19,54,15,39,12,63,12,60,12,0,0,20,46,1,49,19,0,0,21,5,0,49,19,0
	.byte	0,22,1,1,11,15,73,19,0,0,23,33,0,47,15,0,0,24,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12
	.byte	0,0,25,5,0,58,15,59,15,57,15,73,19,0,0,26,55,0,73,19,0,0,27,46,0,3,8,58,15,59,15,57,15,54,15,63,12,60
	.byte	12,0,0,28,21,0,54,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L8:
	.word	.L43-.L42
.L42:
	.half	3
	.word	.L45-.L44
.L44:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0,0
	.byte	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_DPipe.h',0,0,0,0
	.byte	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf.h',0,0,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'string.h',0,2,0,0
	.byte	'stdio.h',0,2,0,0
	.byte	'stdarg.h',0,2,0,0
	.byte	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_DPipe.c',0,0,0,0
	.byte	'stddef.h',0,2,0,0
	.byte	'Platform_Types.h',0,1,0,0,0
.L45:
.L43:
	.sdecl	'.debug_info',debug,cluster('IfxStdIf_DPipe_print')
	.sect	'.debug_info'
.L9:
	.word	417
	.half	3
	.word	.L10
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_DPipe.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L12,.L11
	.byte	2
	.word	.L5
	.byte	3
	.byte	'IfxStdIf_DPipe_print',0,1,50,6,1,1,1
	.word	.L4,.L14,.L3
	.byte	4
	.byte	'stdIf',0,1,50,43
	.word	.L15,.L16
	.byte	4
	.byte	'format',0,1,50,56
	.word	.L17,.L18
	.byte	5,1,50,64,6
	.word	.L4,.L14
	.byte	6
	.word	.L19,.L2
	.byte	7
	.byte	'message',0,1,54,19
	.word	.L20,.L21
	.byte	7
	.byte	'count',0,1,55,19
	.word	.L22,.L23
	.byte	8
	.word	.L24,.L25,.L26
	.byte	9
	.word	.L27,.L28
	.byte	9
	.word	.L29,.L30
	.byte	9
	.word	.L31,.L32
	.byte	9
	.word	.L33,.L34
	.byte	10
	.word	.L35,.L36
	.byte	0,8
	.word	.L24,.L37,.L2
	.byte	9
	.word	.L27,.L28
	.byte	9
	.word	.L29,.L30
	.byte	9
	.word	.L31,.L32
	.byte	9
	.word	.L33,.L34
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxStdIf_DPipe_print')
	.sect	'.debug_abbrev'
.L10:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,24,0,58,15,59,15,57,15,0,0
	.byte	6,11,1,17,1,18,1,0,0,7,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,8,29,1,49,16,17,1,18,1,0,0,9,5,0,49,16
	.byte	2,6,0,0,10,11,0,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxStdIf_DPipe_print')
	.sect	'.debug_line'
.L11:
	.word	.L47-.L46
.L46:
	.half	3
	.word	.L49-.L48
.L48:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_DPipe.c',0,0,0,0
	.byte	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_DPipe.h',0,0,0,0,0
.L49:
	.byte	5,6,7,0,5,2
	.word	.L4
	.byte	3,49,1,5,15,9
	.half	.L41-.L4
	.byte	3,2,1,5,6,9
	.half	.L50-.L41
	.byte	3,126,1,5,10,9
	.half	.L38-.L50
	.byte	3,2,1,5,9,7,9
	.half	.L19-.L38
	.byte	3,5,1,5,26,9
	.half	.L51-.L19
	.byte	3,1,1,5,9,9
	.half	.L40-.L51
	.byte	3,127,1,5,35,9
	.half	.L39-.L40
	.byte	3,3,1,4,2,5,17,9
	.half	.L25-.L39
	.byte	3,201,1,1,5,30,9
	.half	.L52-.L25
	.byte	1,5,53,9
	.half	.L53-.L52
	.byte	1,4,1,5,45,9
	.half	.L54-.L53
	.byte	3,186,126,1,5,55,9
	.half	.L55-.L54
	.byte	1,5,15,9
	.half	.L26-.L55
	.byte	3,125,1,4,2,5,53,9
	.half	.L37-.L26
	.byte	3,201,1,1,4,1,5,1,7,9
	.half	.L2-.L37
	.byte	3,192,126,1,7,9
	.half	.L13-.L2
	.byte	0,1,1
.L47:
	.sdecl	'.debug_ranges',debug,cluster('IfxStdIf_DPipe_print')
	.sect	'.debug_ranges'
.L12:
	.word	-1,.L4,0,.L13-.L4,0,0
.L36:
	.word	-1,.L4,.L25-.L4,.L26-.L4,.L37-.L4,.L2-.L4,0,0
	.sdecl	'.debug_loc',debug,cluster('IfxStdIf_DPipe_print')
	.sect	'.debug_loc'
.L3:
	.word	-1,.L4,0,.L38-.L4
	.half	2
	.byte	138,0
	.word	.L38-.L4,.L2-.L4
	.half	3
	.byte	138,136,2
	.word	.L2-.L4,.L2-.L4
	.half	2
	.byte	138,0
	.word	.L2-.L4,.L14-.L4
	.half	3
	.byte	138,136,2
	.word	.L14-.L4,.L14-.L4
	.half	2
	.byte	138,0
	.word	0,0
.L23:
	.word	-1,.L4,0,.L14-.L4
	.half	2
	.byte	145,120
	.word	0,0
.L32:
	.word	0,0
.L30:
	.word	0,0
.L18:
	.word	-1,.L4,0,.L39-.L4
	.half	1
	.byte	101
	.word	.L2-.L4,.L14-.L4
	.half	1
	.byte	101
	.word	0,0
.L21:
	.word	-1,.L4,0,.L14-.L4
	.half	3
	.byte	145,248,125
	.word	0,0
.L16:
	.word	-1,.L4,0,.L40-.L4
	.half	1
	.byte	100
	.word	.L41-.L4,.L14-.L4
	.half	1
	.byte	111
	.word	.L2-.L4,.L14-.L4
	.half	1
	.byte	100
	.word	0,0
.L28:
	.word	0,0
.L34:
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L56:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxStdIf_DPipe_print')
	.sect	'.debug_frame'
	.word	56
	.word	.L56,.L4,.L14-.L4
	.byte	4
	.word	(.L38-.L4)/2
	.byte	19,136,2,22,26,4,19,138,136,2,4
	.word	(.L2-.L38)/2
	.byte	19,0,8,26,19,136,2,22,26,4,19,138,136,2,4
	.word	(.L14-.L2)/2
	.byte	19,0,8,26,0


	; Module end
