	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\1_SrvSw\\StdIf\\.IfxStdIf_Pos.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include\\libc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\1_SrvSw\\StdIf\\IfxStdIf_Pos.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\1_SrvSw\\StdIf\\IfxStdIf_Pos.src ..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_Pos.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_Pos.c'

	
$TC162
	.sdecl	'.zrodata.IfxStdIf_Pos..8.cnt',data,rom
	.sect	'.zrodata.IfxStdIf_Pos..8.cnt'
	.align	2
.8.cnt:	.type	object
	.size	.8.cnt,4
	.word	981668463
	.sdecl	'.zrodata.IfxStdIf_Pos..9.cnt',data,rom
	.sect	'.zrodata.IfxStdIf_Pos..9.cnt'
	.align	2
.9.cnt:	.type	object
	.size	.9.cnt,4
	.word	1157817939
	
	.sdecl	'.text.IfxStdIf_Pos.IfxStdIf_Pos_initConfig',code,cluster('IfxStdIf_Pos_initConfig')
	.sect	'.text.IfxStdIf_Pos.IfxStdIf_Pos_initConfig'
	.align	2
	
	.global	IfxStdIf_Pos_initConfig

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	     1  /**
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	     2   * \file IfxStdIf_Pos.c
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	     3   * \brief Standard interface: Position interface
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	     4   * \ingroup IfxStdIf
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	     5   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	     6   * \version disabled
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	     8   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	     9   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    11   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    16   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    18   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    24   * do so, all subject to the following:
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    25   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    31   * language processor.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    32   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    40   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    41   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    42  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    43  #include "IfxStdIf_Pos.h"
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    44  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    45  void IfxStdIf_Pos_initConfig (IfxStdIf_Pos_Config * config)
; Function IfxStdIf_Pos_initConfig
.L10:
IfxStdIf_Pos_initConfig:	.type	func

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    46  {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    47      config->offset = 0;
	mov	d0,#0
	st.w	[a4],d0
.L60:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    48      config->reversed = FALSE;
	st.b	[a4]4,d0
.L61:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    49      config->resolution = 0;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    50      config->periodPerRotation = 1;
	mov	d15,#1
	st.w	[a4]6,d0
.L62:
	st.h	[a4]10,d15
.L63:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    51      config->resolutionFactor = IfxStdIf_Pos_ResolutionFactor_oneFold;
	st.b	[a4]12,d15
.L64:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    52      config->updatePeriod = 0.001;
	lea	a15,[a4]14
.L65:
	ld.w	d15,.8.cnt
.L66:
	st.w	[a15+],d15
.L67:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    53      config->speedModeThreshold = 0;
	st.w	[a15+],d0
.L68:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    54      config->minSpeed = 0;       // 0 rpm
	st.w	[a15+],d0
.L69:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    55      config->maxSpeed = 20000.0 / 60.0 * (2 * IFX_PI);   // 20000 rpm
	ld.w	d15,.9.cnt
.L70:
	st.w	[a4]26,d15
.L71:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    56      config->speedFilterEnabled = FALSE;
	st.b	[a4]30,d0
.L72:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    57      config->speedFilerCutOffFrequency = 0;
	st.w	[a4]32,d0
.L73:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    58  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    59  }
	ret
.L27:
	
__IfxStdIf_Pos_initConfig_function_end:
	.size	IfxStdIf_Pos_initConfig,__IfxStdIf_Pos_initConfig_function_end-IfxStdIf_Pos_initConfig
.L21:
	; End of function
	
	.sdecl	'.text.IfxStdIf_Pos.IfxStdIf_Pos_printStatus',code,cluster('IfxStdIf_Pos_printStatus')
	.sect	'.text.IfxStdIf_Pos.IfxStdIf_Pos_printStatus'
	.align	2
	
	.global	IfxStdIf_Pos_printStatus

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    60  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    61  void IfxStdIf_Pos_printStatus(IfxStdIf_Pos *driver, IfxStdIf_DPipe *io)
; Function IfxStdIf_Pos_printStatus
.L12:
IfxStdIf_Pos_printStatus:	.type	func
	mov.aa	a15,a5
.L38:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	     1  /**
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	     2   * \file IfxStdIf_Pos.h
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	     3   * \brief Standard interface: Position interface
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	     4   * \ingroup IfxStdIf
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	     5   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	     6   * \version disabled
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	     7   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	     8   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	     9   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    11   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    16   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    18   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    24   * do so, all subject to the following:
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    25   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    31   * language processor.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    32   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    40   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    41   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    42   * \defgroup library_srvsw_stdif_posif Standard interface: Position interface
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    43   * \ingroup library_srvsw_stdif
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    44   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    45   * The standard interface position interface (IfxStdIf_Pos) abstract the hardware used for position interface feature like encoder, hall, resolver, ... It provide, after proper initialization an hardware
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    46   * Independent way to interact with the position sensor like getting position, speed, direction, ...
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    47   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    48   * The figure below shows the standard position interface.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    49   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    50   * \image html "stdif_PosIf.png" "Standard position interface"
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    51   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    52   * This interface defines the following features:
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    53   * -
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    54   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    55   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    56   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    57  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    58  #ifndef IFXSTDIF_POSIF_H
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    59  #define IFXSTDIF_POSIF_H 1
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    60  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    61  #include "Cpu/Std/Ifx_Types.h"
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    62  #include "IfxStdIf.h"
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    63  #include "IfxStdIf_DPipe.h"
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    64  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    65  /** \brief Output event enable / disable */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    66  typedef enum
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    67  {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    68      IfxStdIf_Pos_MotionType_rotating,             /**< \brief Rotating sensor */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    69      IfxStdIf_Pos_MotionType_linear                /**< \brief Linear sensor */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    70  } IfxStdIf_Pos_MotionType;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    71  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    72  /** \brief Output event enable / disable */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    73  typedef enum
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    74  {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    75      IfxStdIf_Pos_ResolutionFactor_oneFold  = 1,             /**< \brief Default, no multipluication factor */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    76      IfxStdIf_Pos_ResolutionFactor_twoFold  = 2,             /**< \brief 2-fold resolution. Valid for encoder */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    77      IfxStdIf_Pos_ResolutionFactor_fourFold = 4              /**< \brief 4-fold resolution. Valid for encoder */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    78  } IfxStdIf_Pos_ResolutionFactor;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    79  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    80  /** \brief Position sensor Types */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    81  typedef enum
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    82  {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    83      IfxStdIf_Pos_SensorType_encoder,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    84      IfxStdIf_Pos_SensorType_hall,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    85      IfxStdIf_Pos_SensorType_resolver,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    86      IfxStdIf_Pos_SensorType_angletrk,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    87      IfxStdIf_Pos_SensorType_igmr,
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    88      IfxStdIf_Pos_SensorType_virtual
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    89  } IfxStdIf_Pos_SensorType;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    90  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    91  /** \brief Position sensor direction definition */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    92  typedef enum
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    93  {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    94      IfxStdIf_Pos_Dir_forward,         /**< \brief Forward direction. For rotating position sensor, forward is clockwise rotation */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    95      IfxStdIf_Pos_Dir_backward,        /**< \brief Backward direction. For rotating position sensor, fackward is counter-clockwise rotation */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    96      IfxStdIf_Pos_Dir_unknown          /**< \brief Unknown direction */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    97  } IfxStdIf_Pos_Dir;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    98  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	    99  /** \brief Position sensor status definition */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   100  typedef union
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   101  {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   102      uint32 status;                      /**< \brief Global status access */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   103      struct
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   104      {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   105          uint32 notSynchronised : 1;     /**< \brief Sensor is not synchronized */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   106          uint32 signalLoss : 1;          /**< \brief Loss of signal error */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   107          uint32 signalDegradation : 1;   /**< \brief Signal degradation warning */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   108          uint32 trackingLoss : 1;        /**< \brief Tracking loss error */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   109          uint32 commError : 1;           /**< \brief Communication error*/
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   110      } B;                                /**< \brief Bitfielf status access */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   111  } IfxStdIf_Pos_Status;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   112  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   113  typedef sint32 IfxStdIf_Pos_RawAngle;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   114  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   115  /** \brief Forward declaration */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   116  typedef struct IfxStdIf_Pos_ IfxStdIf_Pos;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   117  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   118  /** \brief Return the position, inclusive turns
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   119   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   120   * Return the sensor position in rad for rotating sensor inclusive turns, or in m for linear sensors.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   121   * For linear sensor the effect is the same as IfxStdIf_Pos_GetPosition.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   122   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   123   * \param stdIf Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   124   * \return Return the position inclusive turns in rad
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   125   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   126  typedef float32 (*IfxStdIf_Pos_GetAbsolutePosition)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   127  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   128  /** \brief Handles the zero interrupt
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   129   * \param stdIf Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   130   * \return none
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   131   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   132  typedef void (*IfxStdIf_Pos_OnZeroIrq)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   133  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   134  /** \brief Return the raw position sensor offset
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   135   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   136   * \param stdIf Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   137   * \return Return the raw position sensor offset sensor in ticks
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   138   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   139  typedef sint32 (*IfxStdIf_Pos_GetOffset)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   140  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   141  /** \brief Return the position
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   142   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   143   * Return the sensor position in rad for rotating sensor or in m for linear sensors.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   144   * For rotating sensor, the position is always between 0 and 2*IFX_PI.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   145   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   146   * \param stdIf Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   147   * \return Return the position in rad or m
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   148   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   149  typedef float32 (*IfxStdIf_Pos_GetPosition)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   150  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   151  /** \brief Return the direction
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   152   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   153   * Return the sensor direction.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   154   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   155   * \param stdIf Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   156   * \return Return the direction
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   157   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   158  typedef IfxStdIf_Pos_Dir (*IfxStdIf_Pos_GetDirection)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   159  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   160  /** \brief Return the sensor status
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   161   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   162   * \param stdIf Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   163   * \return Return the sensor status
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   164   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   165  typedef IfxStdIf_Pos_Status (*IfxStdIf_Pos_GetFault)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   166  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   167  /** \brief Return the period per rotation setting
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   168   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   169   * \param stdIf Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   170   * \return Return the period per rotation setting
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   171   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   172  typedef uint16 (*IfxStdIf_Pos_GetPeriodPerRotation)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   173  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   174  /** \brief Return the raw position in ticks
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   175   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   176   * Return the sensor raw position in ticks.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   177   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   178   * \param stdIf Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   179   * \return Return the raw position in ticks
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   180   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   181  typedef sint32 (*IfxStdIf_Pos_GetRawPosition)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   182  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   183  /** \brief Get the update period
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   184   * \param stdIf Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   185   * \return Return the update period in s
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   186   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   187  typedef float32 (*IfxStdIf_Pos_GetRefreshPeriod)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   188  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   189  /** \brief Get the resolution
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   190   * \param stdIf Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   191   * \return Return the resolution
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   192   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   193  typedef sint32 (*IfxStdIf_Pos_GetResolution)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   194  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   195  /** \brief Get the sensor type
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   196   * \param stdIf Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   197   * \return Return the sensor type
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   198   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   199  typedef IfxStdIf_Pos_SensorType (*IfxStdIf_Pos_GetSensorType)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   200  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   201  /** \brief Return the speed
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   202   * \param stdIf Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   203   * \return Return the speed in rad/s or m/s
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   204   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   205  typedef float32 (*IfxStdIf_Pos_GetSpeed)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   206  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   207  /** \brief Return position in turn
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   208   * \param stdIf Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   209   * \return Return position in turn
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   210   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   211  typedef sint32 (*IfxStdIf_Pos_GetTurn)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   212  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   213  /** \brief Handles the A sensor event
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   214   * Event A is a sensor defined event. it is optional.
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   215   * \param stdIf Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   216   * \return none
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   217   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   218  typedef void (*IfxStdIf_Pos_OnEventA)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   219  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   220  /** \brief Refresh the status
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   221   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   222   *  Update the stdIf state like speed, position, status, taking into account the updatePeriod
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   223   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   224   * \param stdIf Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   225   * \return None
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   226   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   227  typedef void (*IfxStdIf_Pos_Update)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   228  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   229  /** \brief Reset the driver
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   230   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   231   *  Clear faults, reset speed and position to 0
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   232   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   233   * \param stdIf Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   234   * \return None
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   235   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   236  typedef void (*IfxStdIf_Pos_Reset)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   237  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   238  /** \brief Reset the driver fault
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   239   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   240   *  Clear faults
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   241   *
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   242   * \param stdIf Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   243   * \return None
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   244   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   245  typedef void (*IfxStdIf_Pos_ResetFaults)(IfxStdIf_InterfaceDriver stdIf);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   246  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   247  /** \brief Set the sensor offset
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   248   * \param stdIf Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   249   * \param offset Offset in sensor ticks
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   250   * \return None
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   251   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   252  typedef void (*IfxStdIf_Pos_SetOffset)(IfxStdIf_InterfaceDriver stdIf, sint32 offset);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   253  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   254  /** \brief Set the sensor position (virtual sensor)
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   255   * \param stdIf Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   256   * \param position Position sensor rad
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   257   * \return None
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   258   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   259  typedef void (*IfxStdIf_Pos_SetPosition)(IfxStdIf_InterfaceDriver stdIf, float32 position);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   260  /** \brief Set the sensor position (virtual sensor)
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   261   * \param stdIf Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   262   * \param position Position sensor ticks
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   263   * \return None
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   264   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   265  typedef void (*IfxStdIf_Pos_SetRawPosition)(IfxStdIf_InterfaceDriver stdIf, sint32 position);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   266  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   267  /** \brief Set the sensor speed (virtual sensor)
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   268   * \param stdIf Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   269   * \param speed speed in rad/s
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   270   * \return None
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   271   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   272  typedef void (*IfxStdIf_Pos_SetSpeed)(IfxStdIf_InterfaceDriver stdIf, float32 speed);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   273  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   274  /** \brief Set the update period
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   275   * \param stdIf Pointer to the interface driver object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   276   * \param updatePeriod Refresh period in s
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   277   * \return None
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   278   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   279  typedef void (*IfxStdIf_Pos_SetRefreshPeriod)(IfxStdIf_InterfaceDriver stdIf, float32 updatePeriod);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   280  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   281  /** \brief Standard interface object
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   282   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   283  struct IfxStdIf_Pos_
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   284  {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   285      IfxStdIf_InterfaceDriver          driver;               /**< \brief Interface driver object                  */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   286      IfxStdIf_Pos_OnZeroIrq            onZeroIrq;            /**< \brief \see IfxStdIf_Pos_OnZeroIrq           */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   287      IfxStdIf_Pos_GetAbsolutePosition  getAbsolutePosition;  /**< \brief Return the absolute position     */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   288      IfxStdIf_Pos_GetOffset            getOffset;            /**< \brief \see IfxStdIf_Pos_GetOffset           */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   289      IfxStdIf_Pos_GetPosition          getPosition;          /**< \brief \see IfxStdIf_Pos_GetPosition           */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   290      IfxStdIf_Pos_GetDirection         getDirection;         /**< \brief \see IfxStdIf_Pos_GetDirection           */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   291      IfxStdIf_Pos_GetFault             getFault;             /**< \brief \see IfxStdIf_Pos_GetFault           */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   292      IfxStdIf_Pos_GetRawPosition       getRawPosition;       /**< \brief \see IfxStdIf_Pos_GetRawPosition           */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   293      IfxStdIf_Pos_GetPeriodPerRotation getPeriodPerRotation; /**< \brief \see IfxStdIf_Pos_GetPeriodPerRotation           */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   294      IfxStdIf_Pos_GetRefreshPeriod     getRefreshPeriod;     /**< \brief \see IfxStdIf_Pos_GetRefreshPeriod           */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   295      IfxStdIf_Pos_GetResolution        getResolution;        /**< \brief \see IfxStdIf_Pos_GetResolution           */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   296      IfxStdIf_Pos_GetSensorType        getSensorType;        /**< \brief \see IfxStdIf_Pos_GetSensorType           */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   297      IfxStdIf_Pos_GetTurn              getTurn;              /**< \brief \see IfxStdIf_Pos_GetTurn           */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   298      IfxStdIf_Pos_OnEventA             onEventA;             /**< \brief \see IfxStdIf_Pos_OnEventA           */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   299      IfxStdIf_Pos_Reset                reset;                /**< \brief \see IfxStdIf_Pos_Reset           */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   300      IfxStdIf_Pos_ResetFaults          resetFaults;          /**< \brief \see IfxStdIf_Pos_ResetFaults           */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   301      IfxStdIf_Pos_GetSpeed             getSpeed;             /**< \brief \see IfxStdIf_Pos_GetSpeed             */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   302      IfxStdIf_Pos_Update               update;               /**< \brief \see IfxStdIf_Pos_Update           */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   303      IfxStdIf_Pos_SetOffset            setOffset;            /**< \brief \see IfxStdIf_Pos_SetOffset           */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   304      IfxStdIf_Pos_SetPosition          setPosition;          /**< \brief \see IfxStdIf_Pos_SetPosition           */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   305      IfxStdIf_Pos_SetRawPosition       setRawPosition;       /**< \brief \see IfxStdIf_Pos_SetRawPosition           */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   306      IfxStdIf_Pos_SetSpeed             setSpeed;             /**< \brief \see IfxStdIf_Pos_SetSpeed           */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   307      IfxStdIf_Pos_SetRefreshPeriod     setRefreshPeriod;     /**< \brief \see IfxStdIf_Pos_SetRefreshPeriod           */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   308  };
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   309  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   310  /** \brief Position interface configuration */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   311  typedef struct
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   312  {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   313      sint32                        offset;                    /**< \brief Position sensor offset */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   314      boolean                       reversed;                  /**< \brief If true, the sensor direction is reversed */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   315      sint32                        resolution;                /**< \brief Sensor resolution. For encoder with 1024 pulse per revolution, the value should be 1024 */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   316      uint16                        periodPerRotation;         /**< \brief Number of period per rotation. Is usually 1 for encoder */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   317      IfxStdIf_Pos_ResolutionFactor resolutionFactor;          /**< \brief Resolution multiplier for encoder interface, valid is 2, 4. */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   318      float32                       updatePeriod;              /**< \brief period in seconds, at which the application calls IfxStdIf_Pos_update() */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   319      float32                       speedModeThreshold;        /**< \brief Speed threshold used for the speed calculation mode. For encoder, above the threshold the pulse count mode is used, below the threshold, the time delta is used */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   320      float32                       minSpeed;                  /**< \brief Absolute minimal allowed speed. below speed is recognized as 0rad/s */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   321      float32                       maxSpeed;                  /**< \brief Absolute maximal allowed speed. Above speed is recognized as error */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   322      boolean                       speedFilterEnabled;        /**< \brief Enable / disable the speed low pass filter */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   323      float32                       speedFilerCutOffFrequency; /**< \brief Speed low pass filter cut off frequency */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   324  } IfxStdIf_Pos_Config;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   325  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   326  /** \addtogroup library_srvsw_stdif_posif
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   327   *  \{
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   328   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   329  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   330  /** \copydoc IfxStdIf_Pos_OnZeroIrq
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   331   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   332  IFX_INLINE void IfxStdIf_Pos_onZeroIrq(IfxStdIf_Pos *stdIf)
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   333  {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   334      stdIf->onZeroIrq(stdIf->driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   335  }
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   336  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   337  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   338  /** \copydoc IfxStdIf_Pos_GetAbsolutePosition
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   339   * \param stdIf Standard interface pointer
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   340   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   341  IFX_INLINE float32 IfxStdIf_Pos_getAbsolutePosition(IfxStdIf_Pos *stdIf)
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   342  {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   343      return stdIf->getAbsolutePosition(stdIf->driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   344  }
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   345  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   346  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   347  /** \copydoc IfxStdIf_Pos_GetFault MCMETILLD-521
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   348   * \param stdIf Standard interface pointer
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   349   */
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   350  IFX_INLINE IfxStdIf_Pos_Status IfxStdIf_Pos_getFault(IfxStdIf_Pos *stdIf)
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   351  {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.h	   352      return stdIf->getFault(stdIf->driver);
	ld.a	a2,[a4]24
.L78:
	ld.a	a4,[a4]
.L43:
	calli	a2
.L39:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    62  {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    63      IfxStdIf_Pos_Status status;
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    64      status = IfxStdIf_Pos_getFault(driver);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    65  
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    66      IfxStdIf_DPipe_print(io, "DSADC RDC status:"ENDL);
	mov	d15,d2
	movh.a	a5,#@his(.1.str)
.L44:
	lea	a5,[a5]@los(.1.str)
	mov.aa	a4,a15
.L45:
	call	IfxStdIf_DPipe_print
.L46:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    67      if (status.status != 0)
	jeq	d15,#0,.L2
.L79:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    68      {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    69          if (status.B.commError)
	jz.t	d15:4,.L3
.L80:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    70          {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    71          	IfxStdIf_DPipe_print(io, "- Communication error"ENDL);
	movh.a	a5,#@his(.2.str)
	lea	a5,[a5]@los(.2.str)
	mov.aa	a4,a15
.L47:
	call	IfxStdIf_DPipe_print
.L3:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    72          }
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    73          if (status.B.notSynchronised)
	jz.t	d15:0,.L4
.L81:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    74          {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    75          	IfxStdIf_DPipe_print(io, "- Synchronization error"ENDL);
	movh.a	a5,#@his(.3.str)
	lea	a5,[a5]@los(.3.str)
	mov.aa	a4,a15
.L48:
	call	IfxStdIf_DPipe_print
.L4:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    76          }
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    77          if (status.B.signalDegradation)
	jz.t	d15:2,.L5
.L82:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    78          {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    79          	IfxStdIf_DPipe_print(io, "- Signal degradation error"ENDL);
	movh.a	a5,#@his(.4.str)
	lea	a5,[a5]@los(.4.str)
	mov.aa	a4,a15
.L49:
	call	IfxStdIf_DPipe_print
.L5:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    80          }
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    81          if (status.B.signalLoss)
	jz.t	d15:1,.L6
.L83:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    82          {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    83          	IfxStdIf_DPipe_print(io, "- Signal loss error"ENDL);
	movh.a	a5,#@his(.5.str)
	lea	a5,[a5]@los(.5.str)
	mov.aa	a4,a15
.L50:
	call	IfxStdIf_DPipe_print
.L6:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    84          }
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    85          if (status.B.trackingLoss)
	jz.t	d15:3,.L7
.L84:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    86          {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    87          	IfxStdIf_DPipe_print(io, "- Tracking error"ENDL);
	movh.a	a5,#@his(.6.str)
	lea	a5,[a5]@los(.6.str)
.L85:
	j	.L8
.L7:

; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    88          }
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    89      }
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    90      else
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    91      {
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    92      	IfxStdIf_DPipe_print(io, "- Ready"ENDL);
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    93      }
; ..\0_Src\1_SrvSw\StdIf\IfxStdIf_Pos.c	    94  }
	ret
.L2:
	movh.a	a5,#@his(.7.str)
	lea	a5,[a5]@los(.7.str)
.L8:
	mov.aa	a4,a15
.L51:
	j	IfxStdIf_DPipe_print
.L30:
	
__IfxStdIf_Pos_printStatus_function_end:
	.size	IfxStdIf_Pos_printStatus,__IfxStdIf_Pos_printStatus_function_end-IfxStdIf_Pos_printStatus
.L26:
	; End of function
	
	.sdecl	'.rodata.IfxStdIf_Pos..1.str',data,rom
	.sect	'.rodata.IfxStdIf_Pos..1.str'
.1.str:	.type	object
	.size	.1.str,20
	.byte	68,83,65,68
	.byte	67,32,82,68
	.byte	67,32,115,116
	.byte	97,116,117,115
	.byte	58,13,10
	.space	1
	.sdecl	'.rodata.IfxStdIf_Pos..2.str',data,rom
	.sect	'.rodata.IfxStdIf_Pos..2.str'
.2.str:	.type	object
	.size	.2.str,24
	.byte	45,32,67,111
	.byte	109,109,117,110
	.byte	105,99,97,116
	.byte	105,111,110,32
	.byte	101,114,114,111
	.byte	114,13,10
	.space	1
	.sdecl	'.rodata.IfxStdIf_Pos..3.str',data,rom
	.sect	'.rodata.IfxStdIf_Pos..3.str'
.3.str:	.type	object
	.size	.3.str,26
	.byte	45,32,83,121
	.byte	110,99,104,114
	.byte	111,110,105,122
	.byte	97,116,105,111
	.byte	110,32,101,114
	.byte	114,111,114,13
	.byte	10
	.space	1
	.sdecl	'.rodata.IfxStdIf_Pos..4.str',data,rom
	.sect	'.rodata.IfxStdIf_Pos..4.str'
.4.str:	.type	object
	.size	.4.str,29
	.byte	45,32,83,105
	.byte	103,110,97,108
	.byte	32,100,101,103
	.byte	114,97,100,97
	.byte	116,105,111,110
	.byte	32,101,114,114
	.byte	111,114,13,10
	.space	1
	.sdecl	'.rodata.IfxStdIf_Pos..5.str',data,rom
	.sect	'.rodata.IfxStdIf_Pos..5.str'
.5.str:	.type	object
	.size	.5.str,22
	.byte	45,32,83,105
	.byte	103,110,97,108
	.byte	32,108,111,115
	.byte	115,32,101,114
	.byte	114,111,114,13
	.byte	10
	.space	1
	.sdecl	'.rodata.IfxStdIf_Pos..6.str',data,rom
	.sect	'.rodata.IfxStdIf_Pos..6.str'
.6.str:	.type	object
	.size	.6.str,19
	.byte	45,32,84,114
	.byte	97,99,107,105
	.byte	110,103,32,101
	.byte	114,114,111,114
	.byte	13,10
	.space	1
	.sdecl	'.rodata.IfxStdIf_Pos..7.str',data,rom
	.sect	'.rodata.IfxStdIf_Pos..7.str'
.7.str:	.type	object
	.size	.7.str,10
	.byte	45,32,82,101
	.byte	97,100,121,13
	.byte	10
	.space	1
	.calls	'IfxStdIf_Pos_printStatus','__INDIRECT__'
	.calls	'IfxStdIf_Pos_printStatus','IfxStdIf_DPipe_print'
	.calls	'IfxStdIf_Pos_initConfig','',0
	.extern	IfxStdIf_DPipe_print
	.extern	__INDIRECT__
	.calls	'IfxStdIf_Pos_printStatus','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L14:
	.word	4789
	.half	3
	.word	.L15
	.byte	4
.L13:
	.byte	1
	.byte	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_Pos.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L16
	.byte	2
	.byte	'unsigned long int',0,4,7,2
	.byte	'unsigned char',0,1,8,3,1,103,5,1,4
	.byte	'notSynchronised',0,1
	.word	181
	.byte	1,7,2,35,0,4
	.byte	'signalLoss',0,1
	.word	181
	.byte	1,6,2,35,0,4
	.byte	'signalDegradation',0,1
	.word	181
	.byte	1,5,2,35,0,4
	.byte	'trackingLoss',0,1
	.word	181
	.byte	1,4,2,35,0,4
	.byte	'commError',0,1
	.word	181
	.byte	1,3,2,35,0,0
.L35:
	.byte	5,1,100,9,4,6
	.byte	'status',0
	.word	160
	.byte	4,2,35,0,6
	.byte	'B',0
	.word	198
	.byte	1,2,35,0,0,7
	.byte	'void',0,8
	.word	360
	.byte	9
	.byte	'IfxStdIf_InterfaceDriver',0,2,115,15
	.word	366
	.byte	10,1,1,11
	.word	366
	.byte	0,8
	.word	404
	.byte	9
	.byte	'IfxStdIf_Pos_OnZeroIrq',0,1,132,1,16
	.word	413
	.byte	2
	.byte	'float',0,4,4,12
	.word	450
	.byte	1,1,11
	.word	366
	.byte	0,8
	.word	459
	.byte	9
	.byte	'IfxStdIf_Pos_GetAbsolutePosition',0,1,126,19
	.word	472
	.byte	2
	.byte	'long int',0,4,5,12
	.word	518
	.byte	1,1,11
	.word	366
	.byte	0,8
	.word	530
	.byte	9
	.byte	'IfxStdIf_Pos_GetOffset',0,1,139,1,18
	.word	543
	.byte	9
	.byte	'IfxStdIf_Pos_GetPosition',0,1,149,1,19
	.word	472
	.byte	13,1,92,9,1,14
	.byte	'IfxStdIf_Pos_Dir_forward',0,0,14
	.byte	'IfxStdIf_Pos_Dir_backward',0,1,14
	.byte	'IfxStdIf_Pos_Dir_unknown',0,2,0,12
	.word	614
	.byte	1,1,11
	.word	366
	.byte	0,8
	.word	702
	.byte	9
	.byte	'IfxStdIf_Pos_GetDirection',0,1,158,1,28
	.word	715
	.byte	12
	.word	327
	.byte	1,1,11
	.word	366
	.byte	0,8
	.word	755
	.byte	9
	.byte	'IfxStdIf_Pos_GetFault',0,1,165,1,31
	.word	768
	.byte	9
	.byte	'IfxStdIf_Pos_GetRawPosition',0,1,181,1,18
	.word	543
	.byte	2
	.byte	'unsigned short int',0,2,7,12
	.word	841
	.byte	1,1,11
	.word	366
	.byte	0,8
	.word	863
	.byte	9
	.byte	'IfxStdIf_Pos_GetPeriodPerRotation',0,1,172,1,18
	.word	876
	.byte	9
	.byte	'IfxStdIf_Pos_GetRefreshPeriod',0,1,187,1,19
	.word	472
	.byte	9
	.byte	'IfxStdIf_Pos_GetResolution',0,1,193,1,18
	.word	543
	.byte	13,1,81,9,1,14
	.byte	'IfxStdIf_Pos_SensorType_encoder',0,0,14
	.byte	'IfxStdIf_Pos_SensorType_hall',0,1,14
	.byte	'IfxStdIf_Pos_SensorType_resolver',0,2,14
	.byte	'IfxStdIf_Pos_SensorType_angletrk',0,3,14
	.byte	'IfxStdIf_Pos_SensorType_igmr',0,4,14
	.byte	'IfxStdIf_Pos_SensorType_virtual',0,5,0,12
	.word	999
	.byte	1,1,11
	.word	366
	.byte	0,8
	.word	1205
	.byte	9
	.byte	'IfxStdIf_Pos_GetSensorType',0,1,199,1,35
	.word	1218
	.byte	9
	.byte	'IfxStdIf_Pos_GetTurn',0,1,211,1,18
	.word	543
	.byte	9
	.byte	'IfxStdIf_Pos_OnEventA',0,1,218,1,16
	.word	413
	.byte	9
	.byte	'IfxStdIf_Pos_Reset',0,1,236,1,16
	.word	413
	.byte	9
	.byte	'IfxStdIf_Pos_ResetFaults',0,1,245,1,16
	.word	413
	.byte	9
	.byte	'IfxStdIf_Pos_GetSpeed',0,1,205,1,19
	.word	472
	.byte	9
	.byte	'IfxStdIf_Pos_Update',0,1,227,1,16
	.word	413
	.byte	10,1,1,11
	.word	366
	.byte	11
	.word	518
	.byte	0,8
	.word	1442
	.byte	9
	.byte	'IfxStdIf_Pos_SetOffset',0,1,252,1,16
	.word	1456
	.byte	10,1,1,11
	.word	366
	.byte	11
	.word	450
	.byte	0,8
	.word	1493
	.byte	9
	.byte	'IfxStdIf_Pos_SetPosition',0,1,131,2,16
	.word	1507
	.byte	9
	.byte	'IfxStdIf_Pos_SetRawPosition',0,1,137,2,16
	.word	1456
	.byte	9
	.byte	'IfxStdIf_Pos_SetSpeed',0,1,144,2,16
	.word	1507
	.byte	9
	.byte	'IfxStdIf_Pos_SetRefreshPeriod',0,1,151,2,16
	.word	1507
	.byte	15
	.byte	'IfxStdIf_Pos_',0,1,155,2,8,92,6
	.byte	'driver',0
	.word	371
	.byte	4,2,35,0,6
	.byte	'onZeroIrq',0
	.word	418
	.byte	4,2,35,4,6
	.byte	'getAbsolutePosition',0
	.word	477
	.byte	4,2,35,8,6
	.byte	'getOffset',0
	.word	548
	.byte	4,2,35,12,6
	.byte	'getPosition',0
	.word	580
	.byte	4,2,35,16,6
	.byte	'getDirection',0
	.word	720
	.byte	4,2,35,20,6
	.byte	'getFault',0
	.word	773
	.byte	4,2,35,24,6
	.byte	'getRawPosition',0
	.word	804
	.byte	4,2,35,28,6
	.byte	'getPeriodPerRotation',0
	.word	881
	.byte	4,2,35,32,6
	.byte	'getRefreshPeriod',0
	.word	924
	.byte	4,2,35,36,6
	.byte	'getResolution',0
	.word	963
	.byte	4,2,35,40,6
	.byte	'getSensorType',0
	.word	1223
	.byte	4,2,35,44,6
	.byte	'getTurn',0
	.word	1259
	.byte	4,2,35,48,6
	.byte	'onEventA',0
	.word	1289
	.byte	4,2,35,52,6
	.byte	'reset',0
	.word	1320
	.byte	4,2,35,56,6
	.byte	'resetFaults',0
	.word	1348
	.byte	4,2,35,60,6
	.byte	'getSpeed',0
	.word	1382
	.byte	4,2,35,64,6
	.byte	'update',0
	.word	1413
	.byte	4,2,35,68,6
	.byte	'setOffset',0
	.word	1461
	.byte	4,2,35,72,6
	.byte	'setPosition',0
	.word	1512
	.byte	4,2,35,76,6
	.byte	'setRawPosition',0
	.word	1546
	.byte	4,2,35,80,6
	.byte	'setSpeed',0
	.word	1583
	.byte	4,2,35,84,6
	.byte	'setRefreshPeriod',0
	.word	1614
	.byte	4,2,35,88,0
.L31:
	.byte	8
	.word	1653
.L37:
	.byte	16
	.byte	'IfxStdIf_Pos_getFault',0,3,1,222,2,32
	.word	327
	.byte	1,1
.L40:
	.byte	17
	.byte	'stdIf',0,1,222,2,68
	.word	2157
.L42:
	.byte	18,0,8
	.word	360
	.byte	8
	.word	404
	.byte	8
	.word	459
	.byte	8
	.word	530
	.byte	8
	.word	459
	.byte	8
	.word	702
	.byte	8
	.word	755
	.byte	8
	.word	530
	.byte	8
	.word	863
	.byte	8
	.word	459
	.byte	8
	.word	530
	.byte	8
	.word	1205
	.byte	8
	.word	530
	.byte	8
	.word	404
	.byte	8
	.word	404
	.byte	8
	.word	404
	.byte	8
	.word	459
	.byte	8
	.word	404
	.byte	8
	.word	1442
	.byte	8
	.word	1493
	.byte	8
	.word	1442
	.byte	8
	.word	1493
	.byte	8
	.word	1493
	.byte	2
	.byte	'int',0,4,5,19
	.word	2328
	.byte	20
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,11
	.word	2335
	.byte	0,2
	.byte	'unsigned int',0,4,7,21
	.word	2377
	.byte	8
	.word	2377
	.byte	22
	.byte	'__cmpswapw',0
	.word	2393
	.byte	1,1,1,1,23
	.byte	'p',0
	.word	2398
	.byte	23
	.byte	'value',0
	.word	2377
	.byte	23
	.byte	'compare',0
	.word	2377
	.byte	0,2
	.byte	'short int',0,2,5,8
	.word	2455
	.byte	2
	.byte	'long long int',0,8,5,12
	.word	181
	.byte	1,1,11
	.word	366
	.byte	11
	.word	366
	.byte	11
	.word	2468
	.byte	11
	.word	2473
	.byte	0,8
	.word	2490
	.byte	9
	.byte	'IfxStdIf_DPipe_Write',0,3,89,19
	.word	2518
	.byte	9
	.byte	'IfxStdIf_DPipe_Read',0,3,104,19
	.word	2518
	.byte	9
	.byte	'IfxStdIf_DPipe_GetReadCount',0,3,112,18
	.word	543
	.byte	21
	.word	181
	.byte	8
	.word	2616
	.byte	12
	.word	2621
	.byte	1,1,11
	.word	366
	.byte	0,8
	.word	2626
	.byte	9
	.byte	'IfxStdIf_DPipe_GetReadEvent',0,3,120,36
	.word	2639
	.byte	9
	.byte	'IfxStdIf_DPipe_GetWriteCount',0,3,144,1,18
	.word	543
	.byte	8
	.word	2626
	.byte	9
	.byte	'IfxStdIf_DPipe_GetWriteEvent',0,3,152,1,37
	.word	2718
	.byte	12
	.word	181
	.byte	1,1,11
	.word	366
	.byte	11
	.word	2455
	.byte	11
	.word	2473
	.byte	0,8
	.word	2761
	.byte	9
	.byte	'IfxStdIf_DPipe_CanReadCount',0,3,163,1,19
	.word	2784
	.byte	9
	.byte	'IfxStdIf_DPipe_CanWriteCount',0,3,174,1,19
	.word	2784
	.byte	12
	.word	181
	.byte	1,1,11
	.word	366
	.byte	11
	.word	2473
	.byte	0,8
	.word	2864
	.byte	9
	.byte	'IfxStdIf_DPipe_FlushTx',0,3,183,1,19
	.word	2882
	.byte	9
	.byte	'IfxStdIf_DPipe_ClearTx',0,3,197,1,16
	.word	413
	.byte	9
	.byte	'IfxStdIf_DPipe_ClearRx',0,3,190,1,16
	.word	413
	.byte	9
	.byte	'IfxStdIf_DPipe_OnReceive',0,3,205,1,16
	.word	413
	.byte	9
	.byte	'IfxStdIf_DPipe_OnTransmit',0,3,212,1,16
	.word	413
	.byte	9
	.byte	'IfxStdIf_DPipe_OnError',0,3,219,1,16
	.word	413
	.byte	12
	.word	160
	.byte	1,1,11
	.word	366
	.byte	0,8
	.word	3084
	.byte	9
	.byte	'IfxStdIf_DPipe_GetSendCount',0,3,128,1,18
	.word	3097
	.byte	12
	.word	2473
	.byte	1,1,11
	.word	366
	.byte	0,8
	.word	3139
	.byte	9
	.byte	'IfxStdIf_DPipe_GetTxTimeStamp',0,3,136,1,24
	.word	3152
	.byte	9
	.byte	'IfxStdIf_DPipe_ResetSendCount',0,3,226,1,16
	.word	413
	.byte	15
	.byte	'IfxStdIf_DPipe_',0,3,230,1,8,76,6
	.byte	'driver',0
	.word	371
	.byte	4,2,35,0,6
	.byte	'txDisabled',0
	.word	181
	.byte	1,2,35,4,6
	.byte	'write',0
	.word	2523
	.byte	4,2,35,8,6
	.byte	'read',0
	.word	2552
	.byte	4,2,35,12,6
	.byte	'getReadCount',0
	.word	2580
	.byte	4,2,35,16,6
	.byte	'getReadEvent',0
	.word	2644
	.byte	4,2,35,20,6
	.byte	'getWriteCount',0
	.word	2680
	.byte	4,2,35,24,6
	.byte	'getWriteEvent',0
	.word	2723
	.byte	4,2,35,28,6
	.byte	'canReadCount',0
	.word	2789
	.byte	4,2,35,32,6
	.byte	'canWriteCount',0
	.word	2826
	.byte	4,2,35,36,6
	.byte	'flushTx',0
	.word	2887
	.byte	4,2,35,40,6
	.byte	'clearTx',0
	.word	2919
	.byte	4,2,35,44,6
	.byte	'clearRx',0
	.word	2951
	.byte	4,2,35,48,6
	.byte	'onReceive',0
	.word	2983
	.byte	4,2,35,52,6
	.byte	'onTransmit',0
	.word	3017
	.byte	4,2,35,56,6
	.byte	'onError',0
	.word	3052
	.byte	4,2,35,60,6
	.byte	'getSendCount',0
	.word	3102
	.byte	4,2,35,64,6
	.byte	'getTxTimeStamp',0
	.word	3157
	.byte	4,2,35,68,6
	.byte	'resetSendCount',0
	.word	3196
	.byte	4,2,35,72,0
.L33:
	.byte	8
	.word	3235
	.byte	2
	.byte	'char',0,1,6,19
	.word	3640
	.byte	8
	.word	3648
	.byte	9
	.byte	'pchar',0,4,53,28
	.word	3653
	.byte	24
	.byte	'IfxStdIf_DPipe_print',0,3,137,3,17,1,1,1,1,17
	.byte	'stdIf',0,3,137,3,54
	.word	3635
	.byte	17
	.byte	'format',0,3,137,3,67
	.word	3658
	.byte	25,3,137,3,75,0,8
	.word	2490
	.byte	8
	.word	2490
	.byte	8
	.word	530
	.byte	8
	.word	2626
	.byte	8
	.word	530
	.byte	8
	.word	2626
	.byte	8
	.word	2761
	.byte	8
	.word	2761
	.byte	8
	.word	2864
	.byte	8
	.word	404
	.byte	8
	.word	404
	.byte	8
	.word	404
	.byte	8
	.word	404
	.byte	8
	.word	404
	.byte	8
	.word	3084
	.byte	8
	.word	3139
	.byte	8
	.word	404
	.byte	19
	.word	3640
	.byte	8
	.word	3824
	.byte	26
	.word	2162
	.byte	27
	.word	2196
	.byte	18,0,13,1,73,9,1,14
	.byte	'IfxStdIf_Pos_ResolutionFactor_oneFold',0,1,14
	.byte	'IfxStdIf_Pos_ResolutionFactor_twoFold',0,2,14
	.byte	'IfxStdIf_Pos_ResolutionFactor_fourFold',0,4,0,3,1,183,2,9,36,6
	.byte	'offset',0
	.word	518
	.byte	4,2,35,0,6
	.byte	'reversed',0
	.word	181
	.byte	1,2,35,4,6
	.byte	'resolution',0
	.word	518
	.byte	4,2,35,6,6
	.byte	'periodPerRotation',0
	.word	841
	.byte	2,2,35,10,6
	.byte	'resolutionFactor',0
	.word	3846
	.byte	1,2,35,12,6
	.byte	'updatePeriod',0
	.word	450
	.byte	4,2,35,14,6
	.byte	'speedModeThreshold',0
	.word	450
	.byte	4,2,35,18,6
	.byte	'minSpeed',0
	.word	450
	.byte	4,2,35,22,6
	.byte	'maxSpeed',0
	.word	450
	.byte	4,2,35,26,6
	.byte	'speedFilterEnabled',0
	.word	181
	.byte	1,2,35,30,6
	.byte	'speedFilerCutOffFrequency',0
	.word	450
	.byte	4,2,35,32,0
.L28:
	.byte	8
	.word	3973
	.byte	28
	.byte	'__INDIRECT__',0,5,1,1,1,1,1,9
	.byte	'__wchar_t',0,5,1,1
	.word	2455
	.byte	9
	.byte	'__size_t',0,5,1,1
	.word	2377
	.byte	9
	.byte	'__ptrdiff_t',0,5,1,1
	.word	2328
	.byte	29,1,8
	.word	4316
	.byte	9
	.byte	'__codeptr',0,5,1,1
	.word	4318
	.byte	9
	.byte	'boolean',0,6,104,29
	.word	181
	.byte	9
	.byte	'uint8',0,6,108,29
	.word	181
	.byte	9
	.byte	'uint16',0,6,112,29
	.word	841
	.byte	9
	.byte	'uint32',0,6,116,29
	.word	160
	.byte	9
	.byte	'sint16',0,6,129,1,29
	.word	2455
	.byte	9
	.byte	'sint32',0,6,134,1,29
	.word	518
	.byte	9
	.byte	'sint64',0,6,141,1,29
	.word	2473
	.byte	9
	.byte	'float32',0,6,170,1,29
	.word	450
	.byte	9
	.byte	'pvoid',0,4,54,28
	.word	366
	.byte	9
	.byte	'Ifx_TickTime',0,4,76,28
	.word	2473
	.byte	9
	.byte	'Ifx_SizeT',0,4,89,16
	.word	2455
	.byte	9
	.byte	'IfxStdIf_DPipe',0,3,68,32
	.word	3235
	.byte	21
	.word	181
	.byte	8
	.word	4542
	.byte	9
	.byte	'IfxStdIf_DPipe_WriteEvent',0,3,70,32
	.word	4547
	.byte	9
	.byte	'IfxStdIf_DPipe_ReadEvent',0,3,71,32
	.word	4547
	.byte	9
	.byte	'IfxStdIf_Pos_ResolutionFactor',0,1,78,3
	.word	3846
	.byte	9
	.byte	'IfxStdIf_Pos_SensorType',0,1,89,3
	.word	999
	.byte	9
	.byte	'IfxStdIf_Pos_Dir',0,1,97,3
	.word	614
	.byte	9
	.byte	'IfxStdIf_Pos_Status',0,1,111,3
	.word	327
	.byte	9
	.byte	'IfxStdIf_Pos',0,1,116,30
	.word	1653
	.byte	9
	.byte	'IfxStdIf_Pos_Config',0,1,196,2,3
	.word	3973
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L15:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,19,1,58,15,59,15,57,15,11,15
	.byte	0,0,4,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,5,23,1,58,15,59,15,57,15,11,15,0,0,6,13,0,3,8,73,19,11
	.byte	15,56,9,0,0,7,59,0,3,8,0,0,8,15,0,73,19,0,0,9,22,0,3,8,58,15,59,15,57,15,73,19,0,0,10,21,1,54,15,39,12
	.byte	0,0,11,5,0,73,19,0,0,12,21,1,73,19,54,15,39,12,0,0,13,4,1,58,15,59,15,57,15,11,15,0,0,14,40,0,3,8,28,13
	.byte	0,0,15,19,1,3,8,58,15,59,15,57,15,11,15,0,0,16,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0
	.byte	17,5,0,3,8,58,15,59,15,57,15,73,19,0,0,18,11,0,0,0,19,38,0,73,19,0,0,20,46,1,3,8,54,15,39,12,63,12,60
	.byte	12,0,0,21,53,0,73,19,0,0,22,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,23,5,0,3,8,73,19,0,0,24,46,1,3
	.byte	8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,25,24,0,58,15,59,15,57,15,0,0,26,46,1,49,19,0,0,27,5,0
	.byte	49,19,0,0,28,46,0,3,8,58,15,59,15,57,15,54,15,63,12,60,12,0,0,29,21,0,54,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L16:
	.word	.L53-.L52
.L52:
	.half	3
	.word	.L55-.L54
.L54:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0,0
	.byte	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_Pos.h',0,0,0,0
	.byte	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf.h',0,0,0,0
	.byte	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_DPipe.h',0,0,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_Pos.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0,0
.L55:
.L53:
	.sdecl	'.debug_info',debug,cluster('IfxStdIf_Pos_initConfig')
	.sect	'.debug_info'
.L17:
	.word	238
	.half	3
	.word	.L18
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_Pos.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L20,.L19
	.byte	2
	.word	.L13
	.byte	3
	.byte	'IfxStdIf_Pos_initConfig',0,1,45,6,1,1,1
	.word	.L10,.L27,.L9
	.byte	4
	.byte	'config',0,1,45,53
	.word	.L28,.L29
	.byte	5
	.word	.L10,.L27
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxStdIf_Pos_initConfig')
	.sect	'.debug_abbrev'
.L18:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxStdIf_Pos_initConfig')
	.sect	'.debug_line'
.L19:
	.word	.L57-.L56
.L56:
	.half	3
	.word	.L59-.L58
.L58:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_Pos.c',0,0,0,0,0
.L59:
	.byte	5,22,7,0,5,2
	.word	.L10
	.byte	3,46,1,5,20,1,5,22,9
	.half	.L60-.L10
	.byte	3,1,1,5,33,9
	.half	.L61-.L60
	.byte	3,2,1,5,24,3,127,1,5,31,9
	.half	.L62-.L61
	.byte	3,1,1,5,30,9
	.half	.L63-.L62
	.byte	3,1,1,5,26,9
	.half	.L64-.L63
	.byte	3,1,1,5,28,9
	.half	.L65-.L64
	.byte	1,5,26,9
	.half	.L66-.L65
	.byte	1,5,32,9
	.half	.L67-.L66
	.byte	3,1,1,5,22,9
	.half	.L68-.L67
	.byte	3,1,1,5,39,9
	.half	.L69-.L68
	.byte	3,1,1,5,22,9
	.half	.L70-.L69
	.byte	1,5,32,9
	.half	.L71-.L70
	.byte	3,1,1,5,39,9
	.half	.L72-.L71
	.byte	3,1,1,5,1,9
	.half	.L73-.L72
	.byte	3,2,1,7,9
	.half	.L21-.L73
	.byte	0,1,1
.L57:
	.sdecl	'.debug_ranges',debug,cluster('IfxStdIf_Pos_initConfig')
	.sect	'.debug_ranges'
.L20:
	.word	-1,.L10,0,.L21-.L10,0,0
	.sdecl	'.debug_info',debug,cluster('IfxStdIf_Pos_printStatus')
	.sect	'.debug_info'
.L22:
	.word	310
	.half	3
	.word	.L23
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_Pos.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L25,.L24
	.byte	2
	.word	.L13
	.byte	3
	.byte	'IfxStdIf_Pos_printStatus',0,1,61,6,1,1,1
	.word	.L12,.L30,.L11
	.byte	4
	.byte	'driver',0,1,61,45
	.word	.L31,.L32
	.byte	4
	.byte	'io',0,1,61,69
	.word	.L33,.L34
	.byte	5
	.word	.L12,.L30
	.byte	6
	.byte	'status',0,1,63,25
	.word	.L35,.L36
	.byte	7
	.word	.L37,.L38,.L39
	.byte	8
	.word	.L40,.L41
	.byte	9
	.word	.L42,.L38,.L39
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxStdIf_Pos_printStatus')
	.sect	'.debug_abbrev'
.L23:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxStdIf_Pos_printStatus')
	.sect	'.debug_line'
.L24:
	.word	.L75-.L74
.L74:
	.half	3
	.word	.L77-.L76
.L76:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_Pos.c',0,0,0,0
	.byte	'..\\0_Src\\1_SrvSw\\StdIf\\IfxStdIf_Pos.h',0,0,0,0,0
.L77:
	.byte	5,6,7,0,5,2
	.word	.L12
	.byte	3,60,1,4,2,5,17,9
	.half	.L38-.L12
	.byte	3,163,2,1,5,33,9
	.half	.L78-.L38
	.byte	1,4,1,5,12,9
	.half	.L39-.L78
	.byte	3,224,125,1,5,30,3,2,1,5,5,9
	.half	.L46-.L39
	.byte	3,1,1,5,9,7,9
	.half	.L79-.L46
	.byte	3,2,1,5,35,7,9
	.half	.L80-.L79
	.byte	3,2,1,5,9,9
	.half	.L3-.L80
	.byte	3,2,1,5,35,7,9
	.half	.L81-.L3
	.byte	3,2,1,5,9,9
	.half	.L4-.L81
	.byte	3,2,1,5,35,7,9
	.half	.L82-.L4
	.byte	3,2,1,5,9,9
	.half	.L5-.L82
	.byte	3,2,1,5,35,7,9
	.half	.L83-.L5
	.byte	3,2,1,5,9,9
	.half	.L6-.L83
	.byte	3,2,1,5,35,7,9
	.half	.L84-.L6
	.byte	3,2,1,5,9,9
	.half	.L85-.L84
	.byte	3,126,1,5,1,9
	.half	.L7-.L85
	.byte	3,9,1,5,31,7,9
	.half	.L2-.L7
	.byte	3,126,1,5,1,9
	.half	.L26-.L2
	.byte	3,2,0,1,1
.L75:
	.sdecl	'.debug_ranges',debug,cluster('IfxStdIf_Pos_printStatus')
	.sect	'.debug_ranges'
.L25:
	.word	-1,.L12,0,.L26-.L12,0,0
	.sdecl	'.debug_loc',debug,cluster('IfxStdIf_Pos_initConfig')
	.sect	'.debug_loc'
.L9:
	.word	-1,.L10,0,.L27-.L10
	.half	2
	.byte	138,0
	.word	0,0
.L29:
	.word	-1,.L10,0,.L27-.L10
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxStdIf_Pos_printStatus')
	.sect	'.debug_loc'
.L11:
	.word	-1,.L12,0,.L30-.L12
	.half	2
	.byte	138,0
	.word	0,0
.L32:
	.word	-1,.L12,0,.L43-.L12
	.half	1
	.byte	100
	.word	0,0
.L34:
	.word	-1,.L12,0,.L39-.L12
	.half	1
	.byte	101
	.word	.L38-.L12,.L30-.L12
	.half	1
	.byte	111
	.word	.L45-.L12,.L46-.L12
	.half	1
	.byte	100
	.word	.L47-.L12,.L3-.L12
	.half	1
	.byte	100
	.word	.L48-.L12,.L4-.L12
	.half	1
	.byte	100
	.word	.L49-.L12,.L5-.L12
	.half	1
	.byte	100
	.word	.L50-.L12,.L6-.L12
	.half	1
	.byte	100
	.word	.L51-.L12,.L30-.L12
	.half	1
	.byte	100
	.word	0,0
.L36:
	.word	-1,.L12,.L44-.L12,.L30-.L12
	.half	1
	.byte	95
	.word	0,0
.L41:
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L86:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxStdIf_Pos_initConfig')
	.sect	'.debug_frame'
	.word	24
	.word	.L86,.L10,.L27-.L10
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxStdIf_Pos_printStatus')
	.sect	'.debug_frame'
	.word	12
	.word	.L86,.L12,.L30-.L12


	; Module end
