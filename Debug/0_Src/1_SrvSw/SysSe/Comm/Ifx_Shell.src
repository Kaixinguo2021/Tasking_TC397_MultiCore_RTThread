	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\1_SrvSw\\SysSe\\Comm\\.Ifx_Shell.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include\\libc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.src ..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c'

	
$TC162
	.sdecl	'.zrodata.IfxStdIf_DPipe..33.cnt',data,rom
	.sect	'.zrodata.IfxStdIf_DPipe..33.cnt'
	.align	4
.33.cnt:	.type	object
	.size	.33.cnt,8
	.word	-1,2147483647
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_isEndOfLine',code,cluster('Ifx_Shell_isEndOfLine')
	.sect	'.text.Ifx_Shell.Ifx_Shell_isEndOfLine'
	.align	2
	
	.global	Ifx_Shell_isEndOfLine

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	     1  /**
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	     2   * \file Ifx_Shell.c
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	     3   * \brief shell functions.
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	     4   *
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	     5   * \version disabled
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	     6   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	     7   *
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	     8   *
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	     9   *                                 IMPORTANT NOTICE
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    10   *
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    11   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    12   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    13   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    14   * of use are agreed, use of this file is subject to following:
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    15   *
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    16   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    17   *
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    18   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    19   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    20   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    21   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    22   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    23   * do so, all subject to the following:
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    24   *
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    25   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    26   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    27   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    28   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    29   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    30   * language processor.
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    31   *
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    32   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    33   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    34   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    35   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    36   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    37   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    38   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    39   *
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    40   */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    41  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    42  //---------------------------------------------------------------------------
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    43  #include "Ifx_Shell.h"
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    44  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    45  #include "Cpu/Std/IfxCpu_Intrinsics.h"
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    46  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    47  #include <string.h>
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    48  #include <stdlib.h>
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    49  #include <stdio.h>
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    50  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    51  #define IFX_SHELL_LLD              "%lld "
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    52  #define IFX_SHELL_LLX              "%llx "
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    53  #define IFX_SHELL_LLU              "%llu "
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    54  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    55  //---------------------------------------------------------------------------
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    56  #define IFX_SHELL_MAX_MESSAGE_SIZE 255
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    57  //---------------------------------------------------------------------------
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    58  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    59  /* Macro to detect space character */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    60  #define ISSPACE(c)           (((c) == ' ') || ((c) == '\t'))
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    61  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    62  /* Macro to only execute parameter if echo is enabled for this shell */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    63  #define IFX_SHELL_IF_ECHO(X) {if (shell->control.echo) {X; }}
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    64  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    65  /* Macro to write lots of spaces */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    66  #define IFX_SHELL_WRITE_SPACES(X) \ 
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    67      {int ii; for (ii = 0; ii < (X); ii++) {IfxStdIf_DPipe_print(shell->io, " "); }}
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    68  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    69  /* Macro to write lots of backspaces */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    70  #define IFX_SHELL_WRITE_BACKSPACES(X) \ 
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    71      {int ii; for (ii = 0; ii < (X); ii++) {IfxStdIf_DPipe_print(shell->io, "\b"); }}
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    72  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    73  //---------------------------------------------------------------------------
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    74  char Ifx_Shell_cmdBuffer[IFX_CFG_SHELL_CMD_LINE_SIZE * IFX_CFG_SHELL_CMD_HISTORY_SIZE];
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    75  //---------------------------------------------------------------------------
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    76  void                     Ifx_Shell_execute(Ifx_Shell *shell, pchar commandLine);
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    77  void                     Ifx_Shell_cmdEscapeProcess(Ifx_Shell *shell, char EscapeChar1, char EscapeChar2);
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    78  const Ifx_Shell_Command *Ifx_Shell_commandListFind(Ifx_Shell *shell, pchar commandLine, pchar *args, Ifx_Shell_CommandListConst *commandList);
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    79  static boolean           Ifx_Shell_matchCommand(pchar *argsPtr, pchar *match);
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    80  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    81  //---------------------------------------------------------------------------
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    82  /**
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    83   * \brief Check whether the args is already at the end.
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    84   * \param args The argument null-terminated string
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    85   */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    86  boolean Ifx_Shell_isEndOfLine(pchar args)
; Function Ifx_Shell_isEndOfLine
.L272:
Ifx_Shell_isEndOfLine:	.type	func

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    87  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    88      return ((args == NULL_PTR) || (*args == IFX_SHELL_NULL_CHAR)) ? TRUE : FALSE;
	jz.a	a4,.L2
.L1557:
	ld.bu	d15,[a4]
.L1558:
	jne	d15,#0,.L3
.L2:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    89  }
	mov	d2,#1
	ret
.L3:
	mov	d2,#0
	ret
.L743:
	
__Ifx_Shell_isEndOfLine_function_end:
	.size	Ifx_Shell_isEndOfLine,__Ifx_Shell_isEndOfLine_function_end-Ifx_Shell_isEndOfLine
.L471:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_writeResult',code,cluster('Ifx_Shell_writeResult')
	.sect	'.text.Ifx_Shell.Ifx_Shell_writeResult'
	.align	2
	

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    90  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    91  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    92  static boolean Ifx_Shell_writeResult(Ifx_Shell *shell, Ifx_SizeT Code)
; Function Ifx_Shell_writeResult
.L274:
Ifx_Shell_writeResult:	.type	func
	sub.a	a10,#8
.L761:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    93  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    94      Ifx_SizeT length = sizeof(Code);
	mov	d15,#2
	st.h	[a10],d4
.L1563:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    95      boolean   result = IfxStdIf_DPipe_write(shell->io, &Code, &length, TIME_INFINITE);
	ld.a	a15,[a4]
.L1564:
	st.h	[a10]2,d15
.L749:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     2   * \file IfxStdIf_DPipe.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     3   * \brief Standard interface: Data Pipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     4   * \ingroup IfxStdIf
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     6   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     7   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     8   * $Date: 2014-02-27 20:08:24 GMT$
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    42   * \defgroup library_srvsw_stdif_dpipe Standard interface: Data Pipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    43   * \ingroup library_srvsw_stdif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    44   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    45   * The standard interafce data pipe (DPipe) abstract the hardware used for data transfer. It provide, after proper initialization an hardware independant way to write
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    46   * and read data to/from as communciation channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    48   * \par Porting StandardIo to DPipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    49   * replace all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    50   *  - StandardIo type with IfxStdIf_DPipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    51   *  - StandardIo_print with IfxStdIf_DPipe_print
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    52   * delete StandardIo.c and StandardIo.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    53   * Include "StdIf/IfxStdIf_DPipe.h" instead of "SysSe/Bsp/StandardIo.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    54   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    55   * The following files are already ported: Ifx_Console, Ifx_Shell
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    56   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    57   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    58  #ifndef STDIF_DPIPE_H_
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    59  #define STDIF_DPIPE_H_ 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    61  #include "IfxStdIf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    62  //----------------------------------------------------------------------------------------
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    63  #ifndef ENDL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    64  #    define ENDL       "\r\n"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    65  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    67  /** \brief Forward declaration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    68  typedef struct IfxStdIf_DPipe_ IfxStdIf_DPipe;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    69  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    70  typedef volatile boolean      *IfxStdIf_DPipe_WriteEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    71  typedef volatile boolean      *IfxStdIf_DPipe_ReadEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    73  /** \brief Size of the buffer allocated on the stack for the print function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    74  #define STDIF_DPIPE_MAX_PRINT_SIZE (255)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    76  /** \brief Write binary data into the \ref IfxStdIf_DPipe.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    77   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    78   * Initially the parameter 'count' specifies count of data to write.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    79   * After execution the data pointed by 'count' specifies the data actually written
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    80   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    81   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    82   * \param data Pointer to the start of data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    83   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    84   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    85   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    86   * \retval TRUE Returns TRUE if all items could be written
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    87   * \retval FALSE Returns FALSE if not all the items could be written
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    88   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    89  typedef boolean (*IfxStdIf_DPipe_Write)(IfxStdIf_InterfaceDriver stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    91  /** \brief Read data from the \ref IfxStdIf_DPipe object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    92   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    93   * Initially the parameter 'count' specifies count of data to read.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    94   * After execution the data pointed by 'count' specifies the data actually read.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    95   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    96   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    97   * \param data Pointer to the start of data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    98   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    99   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   100   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   101   * \retval TRUE Returns TRUE if all items could be read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   102   * \retval FALSE Returns FALSE if not all the items could be read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   103   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   104  typedef boolean (*IfxStdIf_DPipe_Read)(IfxStdIf_InterfaceDriver stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   105  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   106  /** \brief Returns the number of bytes in the rx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   107   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   108   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   109   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   110   * \return Returns the number of bytes in the rx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   111   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   112  typedef sint32 (*IfxStdIf_DPipe_GetReadCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   114  /** \brief Returns read event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   115   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   116   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   117   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   118   * \return Returns read event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   119   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   120  typedef IfxStdIf_DPipe_ReadEvent (*IfxStdIf_DPipe_GetReadEvent)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   122  /** \brief Returns number of bytes send
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   123   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   124   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   126   * \return Returns number of bytes send
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   127   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   128  typedef uint32 (*IfxStdIf_DPipe_GetSendCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   129  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   130  /** \brief Returns the time stamp of the last transmit data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   131   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   132   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   133   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   134   * \return Returns the time stamp of the last transmit data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   135   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   136  typedef Ifx_TickTime (*IfxStdIf_DPipe_GetTxTimeStamp)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   138  /** \brief Returns the number of free bytes (free space) in the tx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   139   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   140   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   142   * \return Returns the number of free bytes in the tx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   143   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   144  typedef sint32 (*IfxStdIf_DPipe_GetWriteCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   145  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   146  /** \brief Returns write event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   147   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   148   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   149   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   150   * \return Returns write event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   151   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   152  typedef IfxStdIf_DPipe_WriteEvent (*IfxStdIf_DPipe_GetWriteEvent)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   154  /** \brief Indicates if the required number of bytes are available for read in the buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   155   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   156   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   157   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   158   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   159   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   160   * \return Returns TRUE if at least count bytes are available for read in the rx buffer,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   161   * if not the Event is armed to be set when the buffer count is bigger or equal to the requested count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   162   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   163  typedef boolean (*IfxStdIf_DPipe_CanReadCount)(IfxStdIf_InterfaceDriver stdIf, Ifx_SizeT count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   164  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   165  /** \brief  Indicates if there is enough free space to write the data in the buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   166   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   167   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   168   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   169   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   171   * \return Returns TRUE if at least count bytes can be written to the tx buffer,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   172   *  if not the Event is armed to be set when the buffer free count is bigger or equal to the requested count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   174  typedef boolean (*IfxStdIf_DPipe_CanWriteCount)(IfxStdIf_InterfaceDriver stdIf, Ifx_SizeT count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   176  /** \brief Flush the transmit buffer by transmitting all data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   177   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   178   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   179   * \param timeout timeout for the flush operation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   180   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   181   * \return Returns TRUE if the FIFO is empty
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   182   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   183  typedef boolean (*IfxStdIf_DPipe_FlushTx)(IfxStdIf_InterfaceDriver stdIf, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   184  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   185  /** \brief Clears the RX buffer by removing all data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   186   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   187   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   188   * \return void
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   189   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   190  typedef void (*IfxStdIf_DPipe_ClearRx)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   192  /** \brief Clears the TX buffer by removing all data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   193   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   194   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   195   * \return void
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   196   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   197  typedef void (*IfxStdIf_DPipe_ClearTx)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   198  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   199  /** \brief handler called on reveive event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   200   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   201   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   202   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   203   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   204   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   205  typedef void (*IfxStdIf_DPipe_OnReceive)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   206  /** \brief handler called on transmit event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   207   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   208   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   209   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   210   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   211   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   212  typedef void (*IfxStdIf_DPipe_OnTransmit)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   213  /** \brief handler called on error event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   214   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   215   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   216   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   217   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   218   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   219  typedef void (*IfxStdIf_DPipe_OnError)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   220  /** \brief Reset the sendCount counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   221   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   222   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   223   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   224   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   225   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   226  typedef void (*IfxStdIf_DPipe_ResetSendCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   228  /** \brief Standard interface object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   229   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   230  struct IfxStdIf_DPipe_
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   231  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   232      IfxStdIf_InterfaceDriver driver;              /**< \brief Pointer to the specific driver object */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   233      boolean                  txDisabled;          /**< \brief If disabled is set to TRUE, the output is disabled, else enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   235      /* Standard interface APIs */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   236      IfxStdIf_DPipe_Write          write;          /**< \brief \see IfxStdIf_DPipe_Write */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   237      IfxStdIf_DPipe_Read           read;           /**< \brief \see IfxStdIf_DPipe_Read */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   238      IfxStdIf_DPipe_GetReadCount   getReadCount;   /**< \brief \see IfxStdIf_DPipe_GetReadCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   239      IfxStdIf_DPipe_GetReadEvent   getReadEvent;   /**< \brief \see IfxStdIf_DPipe_GetReadEvent */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   240      IfxStdIf_DPipe_GetWriteCount  getWriteCount;  /**< \brief \see IfxStdIf_DPipe_GetWriteCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   241      IfxStdIf_DPipe_GetWriteEvent  getWriteEvent;  /**< \brief \see IfxStdIf_DPipe_GetWriteEvent */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   242      IfxStdIf_DPipe_CanReadCount   canReadCount;   /**< \brief \see IfxStdIf_DPipe_CanReadCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   243      IfxStdIf_DPipe_CanWriteCount  canWriteCount;  /**< \brief \see IfxStdIf_DPipe_CanWriteCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   244      IfxStdIf_DPipe_FlushTx        flushTx;        /**< \brief \see IfxStdIf_DPipe_FlushTx */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   245      IfxStdIf_DPipe_ClearTx        clearTx;        /**< \brief \see IfxStdIf_DPipe_ClearTx */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   246      IfxStdIf_DPipe_ClearRx        clearRx;        /**< \brief \see IfxStdIf_DPipe_ClearRx */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   247      IfxStdIf_DPipe_OnReceive      onReceive;      /**< \brief \see IfxStdIf_DPipe_OnReceive  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   248      IfxStdIf_DPipe_OnTransmit     onTransmit;     /**< \brief \see IfxStdIf_DPipe_OnTransmit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   249      IfxStdIf_DPipe_OnError        onError;        /**< \brief \see IfxStdIf_DPipe_OnError    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   250  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   251      IfxStdIf_DPipe_GetSendCount   getSendCount;   /**< \brief \see IfxStdIf_DPipe_GetSendCount    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   252      IfxStdIf_DPipe_GetTxTimeStamp getTxTimeStamp; /**< \brief \see IfxStdIf_DPipe_GetTxTimeStamp    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   253      IfxStdIf_DPipe_ResetSendCount resetSendCount; /**< \brief \see IfxStdIf_DPipe_ResetSendCount    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   254  };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   255  /** \addtogroup library_srvsw_stdif_dpipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   256   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   257  /** \copydoc IfxStdIf_DPipe_Write
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   259  IFX_INLINE boolean IfxStdIf_DPipe_write(IfxStdIf_DPipe *stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   261      return stdIf->write(stdIf->driver, data, count, timeout);
	ld.d	e4,.33.cnt
.L762:
	ld.a	a2,[a15]8
.L1565:
	ld.a	a4,[a15]
.L763:
	mov.aa	a5,a10
.L1566:
	lea	a6,[a10]2
.L1567:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     2   * \file IfxStdIf_DPipe.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     3   * \brief Standard interface: Data Pipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     4   * \ingroup IfxStdIf
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     6   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     7   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     8   * $Date: 2014-02-27 20:08:24 GMT$
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    42   * \defgroup library_srvsw_stdif_dpipe Standard interface: Data Pipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    43   * \ingroup library_srvsw_stdif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    44   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    45   * The standard interafce data pipe (DPipe) abstract the hardware used for data transfer. It provide, after proper initialization an hardware independant way to write
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    46   * and read data to/from as communciation channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    48   * \par Porting StandardIo to DPipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    49   * replace all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    50   *  - StandardIo type with IfxStdIf_DPipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    51   *  - StandardIo_print with IfxStdIf_DPipe_print
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    52   * delete StandardIo.c and StandardIo.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    53   * Include "StdIf/IfxStdIf_DPipe.h" instead of "SysSe/Bsp/StandardIo.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    54   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    55   * The following files are already ported: Ifx_Console, Ifx_Shell
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    56   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    57   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    58  #ifndef STDIF_DPIPE_H_
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    59  #define STDIF_DPIPE_H_ 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    61  #include "IfxStdIf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    62  //----------------------------------------------------------------------------------------
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    63  #ifndef ENDL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    64  #    define ENDL       "\r\n"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    65  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    67  /** \brief Forward declaration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    68  typedef struct IfxStdIf_DPipe_ IfxStdIf_DPipe;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    69  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    70  typedef volatile boolean      *IfxStdIf_DPipe_WriteEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    71  typedef volatile boolean      *IfxStdIf_DPipe_ReadEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    73  /** \brief Size of the buffer allocated on the stack for the print function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    74  #define STDIF_DPIPE_MAX_PRINT_SIZE (255)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    76  /** \brief Write binary data into the \ref IfxStdIf_DPipe.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    77   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    78   * Initially the parameter 'count' specifies count of data to write.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    79   * After execution the data pointed by 'count' specifies the data actually written
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    80   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    81   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    82   * \param data Pointer to the start of data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    83   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    84   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    85   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    86   * \retval TRUE Returns TRUE if all items could be written
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    87   * \retval FALSE Returns FALSE if not all the items could be written
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    88   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    89  typedef boolean (*IfxStdIf_DPipe_Write)(IfxStdIf_InterfaceDriver stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    91  /** \brief Read data from the \ref IfxStdIf_DPipe object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    92   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    93   * Initially the parameter 'count' specifies count of data to read.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    94   * After execution the data pointed by 'count' specifies the data actually read.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    95   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    96   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    97   * \param data Pointer to the start of data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    98   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    99   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   100   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   101   * \retval TRUE Returns TRUE if all items could be read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   102   * \retval FALSE Returns FALSE if not all the items could be read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   103   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   104  typedef boolean (*IfxStdIf_DPipe_Read)(IfxStdIf_InterfaceDriver stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   105  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   106  /** \brief Returns the number of bytes in the rx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   107   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   108   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   109   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   110   * \return Returns the number of bytes in the rx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   111   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   112  typedef sint32 (*IfxStdIf_DPipe_GetReadCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   114  /** \brief Returns read event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   115   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   116   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   117   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   118   * \return Returns read event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   119   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   120  typedef IfxStdIf_DPipe_ReadEvent (*IfxStdIf_DPipe_GetReadEvent)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   122  /** \brief Returns number of bytes send
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   123   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   124   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   126   * \return Returns number of bytes send
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   127   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   128  typedef uint32 (*IfxStdIf_DPipe_GetSendCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   129  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   130  /** \brief Returns the time stamp of the last transmit data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   131   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   132   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   133   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   134   * \return Returns the time stamp of the last transmit data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   135   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   136  typedef Ifx_TickTime (*IfxStdIf_DPipe_GetTxTimeStamp)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   138  /** \brief Returns the number of free bytes (free space) in the tx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   139   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   140   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   142   * \return Returns the number of free bytes in the tx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   143   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   144  typedef sint32 (*IfxStdIf_DPipe_GetWriteCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   145  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   146  /** \brief Returns write event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   147   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   148   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   149   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   150   * \return Returns write event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   151   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   152  typedef IfxStdIf_DPipe_WriteEvent (*IfxStdIf_DPipe_GetWriteEvent)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   154  /** \brief Indicates if the required number of bytes are available for read in the buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   155   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   156   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   157   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   158   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   159   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   160   * \return Returns TRUE if at least count bytes are available for read in the rx buffer,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   161   * if not the Event is armed to be set when the buffer count is bigger or equal to the requested count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   162   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   163  typedef boolean (*IfxStdIf_DPipe_CanReadCount)(IfxStdIf_InterfaceDriver stdIf, Ifx_SizeT count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   164  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   165  /** \brief  Indicates if there is enough free space to write the data in the buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   166   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   167   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   168   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   169   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   171   * \return Returns TRUE if at least count bytes can be written to the tx buffer,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   172   *  if not the Event is armed to be set when the buffer free count is bigger or equal to the requested count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   174  typedef boolean (*IfxStdIf_DPipe_CanWriteCount)(IfxStdIf_InterfaceDriver stdIf, Ifx_SizeT count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   176  /** \brief Flush the transmit buffer by transmitting all data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   177   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   178   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   179   * \param timeout timeout for the flush operation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   180   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   181   * \return Returns TRUE if the FIFO is empty
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   182   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   183  typedef boolean (*IfxStdIf_DPipe_FlushTx)(IfxStdIf_InterfaceDriver stdIf, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   184  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   185  /** \brief Clears the RX buffer by removing all data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   186   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   187   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   188   * \return void
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   189   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   190  typedef void (*IfxStdIf_DPipe_ClearRx)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   192  /** \brief Clears the TX buffer by removing all data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   193   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   194   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   195   * \return void
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   196   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   197  typedef void (*IfxStdIf_DPipe_ClearTx)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   198  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   199  /** \brief handler called on reveive event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   200   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   201   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   202   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   203   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   204   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   205  typedef void (*IfxStdIf_DPipe_OnReceive)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   206  /** \brief handler called on transmit event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   207   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   208   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   209   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   210   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   211   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   212  typedef void (*IfxStdIf_DPipe_OnTransmit)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   213  /** \brief handler called on error event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   214   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   215   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   216   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   217   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   218   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   219  typedef void (*IfxStdIf_DPipe_OnError)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   220  /** \brief Reset the sendCount counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   221   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   222   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   223   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   224   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   225   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   226  typedef void (*IfxStdIf_DPipe_ResetSendCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   228  /** \brief Standard interface object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   229   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   230  struct IfxStdIf_DPipe_
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   231  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   232      IfxStdIf_InterfaceDriver driver;              /**< \brief Pointer to the specific driver object */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   233      boolean                  txDisabled;          /**< \brief If disabled is set to TRUE, the output is disabled, else enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   235      /* Standard interface APIs */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   236      IfxStdIf_DPipe_Write          write;          /**< \brief \see IfxStdIf_DPipe_Write */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   237      IfxStdIf_DPipe_Read           read;           /**< \brief \see IfxStdIf_DPipe_Read */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   238      IfxStdIf_DPipe_GetReadCount   getReadCount;   /**< \brief \see IfxStdIf_DPipe_GetReadCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   239      IfxStdIf_DPipe_GetReadEvent   getReadEvent;   /**< \brief \see IfxStdIf_DPipe_GetReadEvent */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   240      IfxStdIf_DPipe_GetWriteCount  getWriteCount;  /**< \brief \see IfxStdIf_DPipe_GetWriteCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   241      IfxStdIf_DPipe_GetWriteEvent  getWriteEvent;  /**< \brief \see IfxStdIf_DPipe_GetWriteEvent */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   242      IfxStdIf_DPipe_CanReadCount   canReadCount;   /**< \brief \see IfxStdIf_DPipe_CanReadCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   243      IfxStdIf_DPipe_CanWriteCount  canWriteCount;  /**< \brief \see IfxStdIf_DPipe_CanWriteCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   244      IfxStdIf_DPipe_FlushTx        flushTx;        /**< \brief \see IfxStdIf_DPipe_FlushTx */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   245      IfxStdIf_DPipe_ClearTx        clearTx;        /**< \brief \see IfxStdIf_DPipe_ClearTx */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   246      IfxStdIf_DPipe_ClearRx        clearRx;        /**< \brief \see IfxStdIf_DPipe_ClearRx */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   247      IfxStdIf_DPipe_OnReceive      onReceive;      /**< \brief \see IfxStdIf_DPipe_OnReceive  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   248      IfxStdIf_DPipe_OnTransmit     onTransmit;     /**< \brief \see IfxStdIf_DPipe_OnTransmit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   249      IfxStdIf_DPipe_OnError        onError;        /**< \brief \see IfxStdIf_DPipe_OnError    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   250  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   251      IfxStdIf_DPipe_GetSendCount   getSendCount;   /**< \brief \see IfxStdIf_DPipe_GetSendCount    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   252      IfxStdIf_DPipe_GetTxTimeStamp getTxTimeStamp; /**< \brief \see IfxStdIf_DPipe_GetTxTimeStamp    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   253      IfxStdIf_DPipe_ResetSendCount resetSendCount; /**< \brief \see IfxStdIf_DPipe_ResetSendCount    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   254  };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   255  /** \addtogroup library_srvsw_stdif_dpipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   256   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   257  /** \copydoc IfxStdIf_DPipe_Write
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   259  IFX_INLINE boolean IfxStdIf_DPipe_write(IfxStdIf_DPipe *stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   261      return stdIf->write(stdIf->driver, data, count, timeout);
	ji	a2
.L745:
	
__Ifx_Shell_writeResult_function_end:
	.size	Ifx_Shell_writeResult,__Ifx_Shell_writeResult_function_end-Ifx_Shell_writeResult
.L476:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_showHelpSingle',code,cluster('Ifx_Shell_showHelpSingle')
	.sect	'.text.Ifx_Shell.Ifx_Shell_showHelpSingle'
	.align	2
	
	.global	Ifx_Shell_showHelpSingle

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    96  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    97      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, result != FALSE);
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    98  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	    99      return result;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   100  }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   101  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   102  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   103  //---------------------------------------------------------------------------
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   104  boolean Ifx_Shell_showHelpSingle(Ifx_Shell_CommandListConst commandList, IfxStdIf_DPipe *io, boolean briefOnly, boolean singleCommand)
; Function Ifx_Shell_showHelpSingle
.L276:
Ifx_Shell_showHelpSingle:	.type	func
	sub.a	a10,#32
.L764:
	mov.aa	a12,a5
.L765:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   105  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   106      const Ifx_Shell_Command *command          = commandList;
	mov	e8,d5,d4
	st.a	[a10]24,a4
.L766:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   107      uint32                   index            = 0;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   108      pchar                    space            = "";
	mov	d10,#0
	lea	a13,.1.str
.L767:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   109      pchar                    spaceParam       = "";
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   110  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   111      while (command->commandLine != NULL_PTR)
	j	.L7
.L8:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   112      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   113          pchar   help     = command->help;
	ld.a	a2,[a15]4
.L1342:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   114          pchar   chunk;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   115          boolean isParam  = FALSE;
	mov	d11,#0
	st.a	[a10]8,a2
.L769:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   116          boolean isSyntax = FALSE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   117          IfxStdIf_DPipe_print(io, "%s%s", space, command->commandLine);
	mov	d12,d11
	st.a	[a10],a13
.L770:
	ld.a	a15,[a15]
.L768:
	st.a	[a10]4,a15
.L1343:
	mov.aa	a4,a12
.L771:
	lea	a5,.2.str
	call	IfxStdIf_DPipe_print
.L772:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   118  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   119          while (*help != IFX_SHELL_NULL_CHAR)
	j	.L9
.L10:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   120          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   121              Ifx_SizeT count;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   122              pchar     matchp     = "/p";
	lea	a15,.3.str
.L1344:
	st.a	[a10]16,a15
.L1345:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   123              pchar     matchs     = "/s";
	lea	a15,.4.str
.L1346:
	st.a	[a10]20,a15
.L1347:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   124                   spaceParam = "";
	lea	a15,.1.str
.L773:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   125  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   126              if (Ifx_Shell_matchCommand(&help, &matchp))
	lea	a4,[a10]8
.L1348:
	lea	a5,[a10]16
	call	Ifx_Shell_matchCommand
.L1349:
	jeq	d2,#0,.L11
.L1350:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   127              {   /* Parameter description found */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   128                  isParam    = TRUE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   129                  isSyntax   = FALSE,
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   130                  spaceParam = "      ";
	mov	d11,#1
	lea	a15,.5.str
.L1351:
	mov	d12,#0
	j	.L12
.L11:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   131              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   132              else if (Ifx_Shell_matchCommand(&help, &matchs))
	lea	a4,[a10]8
.L1352:
	lea	a5,[a10]20
	call	Ifx_Shell_matchCommand
.L1353:
	jeq	d2,#0,.L13
.L1354:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   133              {   /* Parameter description found */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   134                  isParam    = FALSE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   135                  isSyntax   = TRUE,
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   136                  spaceParam = "    SYNTAX: ";
	mov	d11,#0
	movh.a	a15,#@his(.6.str)
.L1355:
	mov	d12,#1
	lea	a15,[a15]@los(.6.str)
.L1356:
	j	.L14
.L13:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   137              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   138              else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   139              {     /* Other text */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   140                  if (isParam)
	jeq	d11,#0,.L15
.L1357:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   141                  { /* Show param details*/
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   142                      spaceParam = "        ";
	movh.a	a15,#@his(.7.str)
	lea	a15,[a15]@los(.7.str)
.L1358:
	j	.L16
.L15:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   143                  }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   144                  else if (isSyntax)
	jeq	d12,#0,.L17
.L1359:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   145                  {   /* Show param details*/
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   146                      spaceParam = "            ";
	movh.a	a15,#@his(.8.str)
	lea	a15,[a15]@los(.8.str)
.L17:
.L16:
.L14:
.L12:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   147                  }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   148              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   149  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   150              /* Split print by ENDL */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   151              chunk = strstr(help, ENDL);
	ld.a	a4,[a10]8
.L1360:
	lea	a5,.9.str
	call	strstr
.L775:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   152  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   153              if (chunk == NULL_PTR)
	jnz.a	a2,.L18
.L1361:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   154              {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   155                  chunk = help + strlen(help);
	ld.a	a14,[a10]8
.L1362:
	mov.aa	a4,a14
	call	strlen
.L776:
	addsc.a	a2,a14,d2,#0
.L777:
	j	.L19
.L18:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   156              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   157              else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   158              {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   159                  if (!briefOnly)
	jne	d8,#0,.L20
.L779:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   160                  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   161                      chunk += strlen(ENDL);
	add.a	a2,#2
.L20:
.L19:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   162                  }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   163              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   164  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   165              count = chunk - help;
	ld.a	a4,[a10]8
.L1363:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   166              IfxStdIf_DPipe_print(io, "%s%s", space, spaceParam);
	lea	a5,.2.str
.L1364:
	sub.a	a2,a2,a4
.L778:
	mov.d	d15,a2
.L1365:
	st.h	[a10]12,d15
.L1366:
	st.a	[a10],a13
.L1367:
	st.a	[a10]4,a15
.L1368:
	mov.aa	a4,a12
.L780:
	call	IfxStdIf_DPipe_print
.L650:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     2   * \file IfxStdIf_DPipe.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     3   * \brief Standard interface: Data Pipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     4   * \ingroup IfxStdIf
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     6   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     7   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     8   * $Date: 2014-02-27 20:08:24 GMT$
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    42   * \defgroup library_srvsw_stdif_dpipe Standard interface: Data Pipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    43   * \ingroup library_srvsw_stdif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    44   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    45   * The standard interafce data pipe (DPipe) abstract the hardware used for data transfer. It provide, after proper initialization an hardware independant way to write
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    46   * and read data to/from as communciation channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    48   * \par Porting StandardIo to DPipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    49   * replace all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    50   *  - StandardIo type with IfxStdIf_DPipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    51   *  - StandardIo_print with IfxStdIf_DPipe_print
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    52   * delete StandardIo.c and StandardIo.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    53   * Include "StdIf/IfxStdIf_DPipe.h" instead of "SysSe/Bsp/StandardIo.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    54   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    55   * The following files are already ported: Ifx_Console, Ifx_Shell
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    56   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    57   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    58  #ifndef STDIF_DPIPE_H_
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    59  #define STDIF_DPIPE_H_ 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    61  #include "IfxStdIf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    62  //----------------------------------------------------------------------------------------
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    63  #ifndef ENDL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    64  #    define ENDL       "\r\n"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    65  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    67  /** \brief Forward declaration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    68  typedef struct IfxStdIf_DPipe_ IfxStdIf_DPipe;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    69  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    70  typedef volatile boolean      *IfxStdIf_DPipe_WriteEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    71  typedef volatile boolean      *IfxStdIf_DPipe_ReadEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    73  /** \brief Size of the buffer allocated on the stack for the print function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    74  #define STDIF_DPIPE_MAX_PRINT_SIZE (255)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    76  /** \brief Write binary data into the \ref IfxStdIf_DPipe.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    77   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    78   * Initially the parameter 'count' specifies count of data to write.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    79   * After execution the data pointed by 'count' specifies the data actually written
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    80   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    81   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    82   * \param data Pointer to the start of data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    83   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    84   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    85   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    86   * \retval TRUE Returns TRUE if all items could be written
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    87   * \retval FALSE Returns FALSE if not all the items could be written
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    88   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    89  typedef boolean (*IfxStdIf_DPipe_Write)(IfxStdIf_InterfaceDriver stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    91  /** \brief Read data from the \ref IfxStdIf_DPipe object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    92   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    93   * Initially the parameter 'count' specifies count of data to read.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    94   * After execution the data pointed by 'count' specifies the data actually read.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    95   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    96   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    97   * \param data Pointer to the start of data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    98   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    99   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   100   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   101   * \retval TRUE Returns TRUE if all items could be read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   102   * \retval FALSE Returns FALSE if not all the items could be read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   103   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   104  typedef boolean (*IfxStdIf_DPipe_Read)(IfxStdIf_InterfaceDriver stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   105  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   106  /** \brief Returns the number of bytes in the rx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   107   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   108   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   109   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   110   * \return Returns the number of bytes in the rx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   111   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   112  typedef sint32 (*IfxStdIf_DPipe_GetReadCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   114  /** \brief Returns read event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   115   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   116   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   117   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   118   * \return Returns read event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   119   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   120  typedef IfxStdIf_DPipe_ReadEvent (*IfxStdIf_DPipe_GetReadEvent)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   122  /** \brief Returns number of bytes send
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   123   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   124   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   126   * \return Returns number of bytes send
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   127   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   128  typedef uint32 (*IfxStdIf_DPipe_GetSendCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   129  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   130  /** \brief Returns the time stamp of the last transmit data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   131   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   132   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   133   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   134   * \return Returns the time stamp of the last transmit data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   135   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   136  typedef Ifx_TickTime (*IfxStdIf_DPipe_GetTxTimeStamp)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   138  /** \brief Returns the number of free bytes (free space) in the tx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   139   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   140   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   142   * \return Returns the number of free bytes in the tx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   143   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   144  typedef sint32 (*IfxStdIf_DPipe_GetWriteCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   145  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   146  /** \brief Returns write event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   147   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   148   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   149   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   150   * \return Returns write event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   151   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   152  typedef IfxStdIf_DPipe_WriteEvent (*IfxStdIf_DPipe_GetWriteEvent)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   154  /** \brief Indicates if the required number of bytes are available for read in the buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   155   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   156   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   157   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   158   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   159   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   160   * \return Returns TRUE if at least count bytes are available for read in the rx buffer,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   161   * if not the Event is armed to be set when the buffer count is bigger or equal to the requested count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   162   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   163  typedef boolean (*IfxStdIf_DPipe_CanReadCount)(IfxStdIf_InterfaceDriver stdIf, Ifx_SizeT count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   164  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   165  /** \brief  Indicates if there is enough free space to write the data in the buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   166   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   167   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   168   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   169   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   171   * \return Returns TRUE if at least count bytes can be written to the tx buffer,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   172   *  if not the Event is armed to be set when the buffer free count is bigger or equal to the requested count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   174  typedef boolean (*IfxStdIf_DPipe_CanWriteCount)(IfxStdIf_InterfaceDriver stdIf, Ifx_SizeT count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   176  /** \brief Flush the transmit buffer by transmitting all data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   177   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   178   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   179   * \param timeout timeout for the flush operation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   180   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   181   * \return Returns TRUE if the FIFO is empty
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   182   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   183  typedef boolean (*IfxStdIf_DPipe_FlushTx)(IfxStdIf_InterfaceDriver stdIf, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   184  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   185  /** \brief Clears the RX buffer by removing all data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   186   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   187   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   188   * \return void
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   189   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   190  typedef void (*IfxStdIf_DPipe_ClearRx)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   192  /** \brief Clears the TX buffer by removing all data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   193   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   194   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   195   * \return void
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   196   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   197  typedef void (*IfxStdIf_DPipe_ClearTx)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   198  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   199  /** \brief handler called on reveive event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   200   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   201   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   202   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   203   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   204   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   205  typedef void (*IfxStdIf_DPipe_OnReceive)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   206  /** \brief handler called on transmit event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   207   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   208   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   209   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   210   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   211   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   212  typedef void (*IfxStdIf_DPipe_OnTransmit)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   213  /** \brief handler called on error event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   214   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   215   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   216   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   217   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   218   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   219  typedef void (*IfxStdIf_DPipe_OnError)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   220  /** \brief Reset the sendCount counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   221   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   222   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   223   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   224   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   225   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   226  typedef void (*IfxStdIf_DPipe_ResetSendCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   228  /** \brief Standard interface object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   229   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   230  struct IfxStdIf_DPipe_
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   231  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   232      IfxStdIf_InterfaceDriver driver;              /**< \brief Pointer to the specific driver object */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   233      boolean                  txDisabled;          /**< \brief If disabled is set to TRUE, the output is disabled, else enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   235      /* Standard interface APIs */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   236      IfxStdIf_DPipe_Write          write;          /**< \brief \see IfxStdIf_DPipe_Write */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   237      IfxStdIf_DPipe_Read           read;           /**< \brief \see IfxStdIf_DPipe_Read */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   238      IfxStdIf_DPipe_GetReadCount   getReadCount;   /**< \brief \see IfxStdIf_DPipe_GetReadCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   239      IfxStdIf_DPipe_GetReadEvent   getReadEvent;   /**< \brief \see IfxStdIf_DPipe_GetReadEvent */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   240      IfxStdIf_DPipe_GetWriteCount  getWriteCount;  /**< \brief \see IfxStdIf_DPipe_GetWriteCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   241      IfxStdIf_DPipe_GetWriteEvent  getWriteEvent;  /**< \brief \see IfxStdIf_DPipe_GetWriteEvent */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   242      IfxStdIf_DPipe_CanReadCount   canReadCount;   /**< \brief \see IfxStdIf_DPipe_CanReadCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   243      IfxStdIf_DPipe_CanWriteCount  canWriteCount;  /**< \brief \see IfxStdIf_DPipe_CanWriteCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   244      IfxStdIf_DPipe_FlushTx        flushTx;        /**< \brief \see IfxStdIf_DPipe_FlushTx */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   245      IfxStdIf_DPipe_ClearTx        clearTx;        /**< \brief \see IfxStdIf_DPipe_ClearTx */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   246      IfxStdIf_DPipe_ClearRx        clearRx;        /**< \brief \see IfxStdIf_DPipe_ClearRx */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   247      IfxStdIf_DPipe_OnReceive      onReceive;      /**< \brief \see IfxStdIf_DPipe_OnReceive  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   248      IfxStdIf_DPipe_OnTransmit     onTransmit;     /**< \brief \see IfxStdIf_DPipe_OnTransmit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   249      IfxStdIf_DPipe_OnError        onError;        /**< \brief \see IfxStdIf_DPipe_OnError    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   250  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   251      IfxStdIf_DPipe_GetSendCount   getSendCount;   /**< \brief \see IfxStdIf_DPipe_GetSendCount    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   252      IfxStdIf_DPipe_GetTxTimeStamp getTxTimeStamp; /**< \brief \see IfxStdIf_DPipe_GetTxTimeStamp    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   253      IfxStdIf_DPipe_ResetSendCount resetSendCount; /**< \brief \see IfxStdIf_DPipe_ResetSendCount    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   254  };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   255  /** \addtogroup library_srvsw_stdif_dpipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   256   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   257  /** \copydoc IfxStdIf_DPipe_Write
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   259  IFX_INLINE boolean IfxStdIf_DPipe_write(IfxStdIf_DPipe *stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   261      return stdIf->write(stdIf->driver, data, count, timeout);
	ld.a	a15,[a12]8
.L774:
	ld.a	a4,[a12]
.L1369:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   167              IfxStdIf_DPipe_write(io, (void *)help, &count, TIME_INFINITE);
	ld.a	a5,[a10]8
.L1370:
	lea	a6,[a10]12
.L1371:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     2   * \file IfxStdIf_DPipe.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     3   * \brief Standard interface: Data Pipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     4   * \ingroup IfxStdIf
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     6   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     7   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     8   * $Date: 2014-02-27 20:08:24 GMT$
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    42   * \defgroup library_srvsw_stdif_dpipe Standard interface: Data Pipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    43   * \ingroup library_srvsw_stdif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    44   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    45   * The standard interafce data pipe (DPipe) abstract the hardware used for data transfer. It provide, after proper initialization an hardware independant way to write
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    46   * and read data to/from as communciation channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    48   * \par Porting StandardIo to DPipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    49   * replace all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    50   *  - StandardIo type with IfxStdIf_DPipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    51   *  - StandardIo_print with IfxStdIf_DPipe_print
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    52   * delete StandardIo.c and StandardIo.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    53   * Include "StdIf/IfxStdIf_DPipe.h" instead of "SysSe/Bsp/StandardIo.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    54   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    55   * The following files are already ported: Ifx_Console, Ifx_Shell
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    56   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    57   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    58  #ifndef STDIF_DPIPE_H_
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    59  #define STDIF_DPIPE_H_ 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    61  #include "IfxStdIf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    62  //----------------------------------------------------------------------------------------
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    63  #ifndef ENDL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    64  #    define ENDL       "\r\n"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    65  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    67  /** \brief Forward declaration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    68  typedef struct IfxStdIf_DPipe_ IfxStdIf_DPipe;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    69  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    70  typedef volatile boolean      *IfxStdIf_DPipe_WriteEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    71  typedef volatile boolean      *IfxStdIf_DPipe_ReadEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    73  /** \brief Size of the buffer allocated on the stack for the print function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    74  #define STDIF_DPIPE_MAX_PRINT_SIZE (255)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    76  /** \brief Write binary data into the \ref IfxStdIf_DPipe.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    77   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    78   * Initially the parameter 'count' specifies count of data to write.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    79   * After execution the data pointed by 'count' specifies the data actually written
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    80   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    81   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    82   * \param data Pointer to the start of data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    83   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    84   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    85   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    86   * \retval TRUE Returns TRUE if all items could be written
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    87   * \retval FALSE Returns FALSE if not all the items could be written
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    88   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    89  typedef boolean (*IfxStdIf_DPipe_Write)(IfxStdIf_InterfaceDriver stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    91  /** \brief Read data from the \ref IfxStdIf_DPipe object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    92   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    93   * Initially the parameter 'count' specifies count of data to read.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    94   * After execution the data pointed by 'count' specifies the data actually read.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    95   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    96   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    97   * \param data Pointer to the start of data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    98   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    99   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   100   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   101   * \retval TRUE Returns TRUE if all items could be read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   102   * \retval FALSE Returns FALSE if not all the items could be read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   103   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   104  typedef boolean (*IfxStdIf_DPipe_Read)(IfxStdIf_InterfaceDriver stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   105  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   106  /** \brief Returns the number of bytes in the rx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   107   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   108   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   109   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   110   * \return Returns the number of bytes in the rx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   111   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   112  typedef sint32 (*IfxStdIf_DPipe_GetReadCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   114  /** \brief Returns read event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   115   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   116   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   117   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   118   * \return Returns read event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   119   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   120  typedef IfxStdIf_DPipe_ReadEvent (*IfxStdIf_DPipe_GetReadEvent)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   122  /** \brief Returns number of bytes send
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   123   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   124   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   126   * \return Returns number of bytes send
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   127   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   128  typedef uint32 (*IfxStdIf_DPipe_GetSendCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   129  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   130  /** \brief Returns the time stamp of the last transmit data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   131   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   132   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   133   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   134   * \return Returns the time stamp of the last transmit data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   135   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   136  typedef Ifx_TickTime (*IfxStdIf_DPipe_GetTxTimeStamp)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   138  /** \brief Returns the number of free bytes (free space) in the tx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   139   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   140   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   142   * \return Returns the number of free bytes in the tx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   143   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   144  typedef sint32 (*IfxStdIf_DPipe_GetWriteCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   145  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   146  /** \brief Returns write event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   147   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   148   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   149   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   150   * \return Returns write event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   151   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   152  typedef IfxStdIf_DPipe_WriteEvent (*IfxStdIf_DPipe_GetWriteEvent)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   154  /** \brief Indicates if the required number of bytes are available for read in the buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   155   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   156   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   157   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   158   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   159   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   160   * \return Returns TRUE if at least count bytes are available for read in the rx buffer,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   161   * if not the Event is armed to be set when the buffer count is bigger or equal to the requested count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   162   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   163  typedef boolean (*IfxStdIf_DPipe_CanReadCount)(IfxStdIf_InterfaceDriver stdIf, Ifx_SizeT count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   164  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   165  /** \brief  Indicates if there is enough free space to write the data in the buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   166   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   167   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   168   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   169   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   171   * \return Returns TRUE if at least count bytes can be written to the tx buffer,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   172   *  if not the Event is armed to be set when the buffer free count is bigger or equal to the requested count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   174  typedef boolean (*IfxStdIf_DPipe_CanWriteCount)(IfxStdIf_InterfaceDriver stdIf, Ifx_SizeT count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   176  /** \brief Flush the transmit buffer by transmitting all data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   177   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   178   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   179   * \param timeout timeout for the flush operation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   180   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   181   * \return Returns TRUE if the FIFO is empty
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   182   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   183  typedef boolean (*IfxStdIf_DPipe_FlushTx)(IfxStdIf_InterfaceDriver stdIf, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   184  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   185  /** \brief Clears the RX buffer by removing all data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   186   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   187   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   188   * \return void
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   189   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   190  typedef void (*IfxStdIf_DPipe_ClearRx)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   192  /** \brief Clears the TX buffer by removing all data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   193   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   194   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   195   * \return void
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   196   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   197  typedef void (*IfxStdIf_DPipe_ClearTx)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   198  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   199  /** \brief handler called on reveive event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   200   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   201   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   202   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   203   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   204   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   205  typedef void (*IfxStdIf_DPipe_OnReceive)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   206  /** \brief handler called on transmit event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   207   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   208   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   209   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   210   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   211   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   212  typedef void (*IfxStdIf_DPipe_OnTransmit)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   213  /** \brief handler called on error event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   214   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   215   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   216   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   217   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   218   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   219  typedef void (*IfxStdIf_DPipe_OnError)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   220  /** \brief Reset the sendCount counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   221   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   222   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   223   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   224   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   225   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   226  typedef void (*IfxStdIf_DPipe_ResetSendCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   228  /** \brief Standard interface object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   229   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   230  struct IfxStdIf_DPipe_
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   231  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   232      IfxStdIf_InterfaceDriver driver;              /**< \brief Pointer to the specific driver object */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   233      boolean                  txDisabled;          /**< \brief If disabled is set to TRUE, the output is disabled, else enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   235      /* Standard interface APIs */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   236      IfxStdIf_DPipe_Write          write;          /**< \brief \see IfxStdIf_DPipe_Write */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   237      IfxStdIf_DPipe_Read           read;           /**< \brief \see IfxStdIf_DPipe_Read */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   238      IfxStdIf_DPipe_GetReadCount   getReadCount;   /**< \brief \see IfxStdIf_DPipe_GetReadCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   239      IfxStdIf_DPipe_GetReadEvent   getReadEvent;   /**< \brief \see IfxStdIf_DPipe_GetReadEvent */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   240      IfxStdIf_DPipe_GetWriteCount  getWriteCount;  /**< \brief \see IfxStdIf_DPipe_GetWriteCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   241      IfxStdIf_DPipe_GetWriteEvent  getWriteEvent;  /**< \brief \see IfxStdIf_DPipe_GetWriteEvent */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   242      IfxStdIf_DPipe_CanReadCount   canReadCount;   /**< \brief \see IfxStdIf_DPipe_CanReadCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   243      IfxStdIf_DPipe_CanWriteCount  canWriteCount;  /**< \brief \see IfxStdIf_DPipe_CanWriteCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   244      IfxStdIf_DPipe_FlushTx        flushTx;        /**< \brief \see IfxStdIf_DPipe_FlushTx */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   245      IfxStdIf_DPipe_ClearTx        clearTx;        /**< \brief \see IfxStdIf_DPipe_ClearTx */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   246      IfxStdIf_DPipe_ClearRx        clearRx;        /**< \brief \see IfxStdIf_DPipe_ClearRx */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   247      IfxStdIf_DPipe_OnReceive      onReceive;      /**< \brief \see IfxStdIf_DPipe_OnReceive  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   248      IfxStdIf_DPipe_OnTransmit     onTransmit;     /**< \brief \see IfxStdIf_DPipe_OnTransmit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   249      IfxStdIf_DPipe_OnError        onError;        /**< \brief \see IfxStdIf_DPipe_OnError    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   250  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   251      IfxStdIf_DPipe_GetSendCount   getSendCount;   /**< \brief \see IfxStdIf_DPipe_GetSendCount    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   252      IfxStdIf_DPipe_GetTxTimeStamp getTxTimeStamp; /**< \brief \see IfxStdIf_DPipe_GetTxTimeStamp    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   253      IfxStdIf_DPipe_ResetSendCount resetSendCount; /**< \brief \see IfxStdIf_DPipe_ResetSendCount    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   254  };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   255  /** \addtogroup library_srvsw_stdif_dpipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   256   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   257  /** \copydoc IfxStdIf_DPipe_Write
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   259  IFX_INLINE boolean IfxStdIf_DPipe_write(IfxStdIf_DPipe *stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   261      return stdIf->write(stdIf->driver, data, count, timeout);
	ld.d	e4,.33.cnt
	calli	a15
.L651:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   168  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   169              help += count;
	ld.a	a15,[a10]8
.L1372:
	ld.h	d15,[a10]12
.L1373:
	addsc.a	a15,a15,d15,#0
	st.a	[a10]8,a15
.L781:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   170  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   171              if (briefOnly)
	jne	d8,#0,.L21
.L9:
	ld.a	a15,[a10]8
.L1374:
	ld.bu	d15,[a15]
.L1375:
	jne	d15,#0,.L10

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   172              {   /* Print Brief only */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   173                  break;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   174              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   175          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   176  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   177          IfxStdIf_DPipe_print(io, ENDL);
.L21:
	lea	a5,.9.str
	mov.aa	a4,a12
.L782:
	call	IfxStdIf_DPipe_print
.L783:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   178  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   179          if ((command->call == NULL_PTR) && (index == 0))
	ld.a	a15,[a10]24
.L784:
	ld.w	d15,[a15]12
.L1376:
	jne	d15,#0,.L22
.L1377:
	jne	d10,#0,.L23
.L1378:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   180          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   181              index = 1;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   182              space = "  ";
	mov	d10,#1
	lea	a13,.10.str
.L23:
.L22:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   183          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   184  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   185          command = &command[1];
	lea	a15,[a15]16
	st.a	[a10]24,a15
.L785:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   186  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   187          if (singleCommand)
	jne	d9,#0,.L24
.L7:
	ld.a	a15,[a10]24
.L786:
	ld.w	d15,[a15]
.L1379:
	jne	d15,#0,.L8

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   188          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   189              break;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   190          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   191      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   192  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   193      return TRUE;
.L24:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   194  }
	mov	d2,#1
	ret
.L632:
	
__Ifx_Shell_showHelpSingle_function_end:
	.size	Ifx_Shell_showHelpSingle,__Ifx_Shell_showHelpSingle_function_end-Ifx_Shell_showHelpSingle
.L426:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_showHelpSingleCommand',code,cluster('Ifx_Shell_showHelpSingleCommand')
	.sect	'.text.Ifx_Shell.Ifx_Shell_showHelpSingleCommand'
	.align	2
	
	.global	Ifx_Shell_showHelpSingleCommand

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   195  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   196  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   197  boolean Ifx_Shell_showHelpSingleCommand(pchar args, void *shellPtr, IfxStdIf_DPipe *io)
; Function Ifx_Shell_showHelpSingleCommand
.L278:
Ifx_Shell_showHelpSingleCommand:	.type	func
	sub.a	a10,#16
.L787:
	st.a	[a10]4,a4
	mov.aa	a12,a6
.L791:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   198  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   199      Ifx_Shell_CommandListConst commandList;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   200      const Ifx_Shell_Command   *shellCommand = Ifx_Shell_commandListFind(shellPtr, args, &args, &commandList);
	mov.aa	a15,a4
.L1572:
	lea	a6,[a10]4
.L789:
	lea	a7,[a10]8
	mov.aa	a4,a5
.L788:
	mov.aa	a5,a15
.L790:
	call	Ifx_Shell_commandListFind
.L792:
	mov.aa	a15,a2
.L794:
	ld.a	a4,[a10]8
.L795:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   201  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   202      if (shellCommand != NULL_PTR)
	jz.a	a15,.L26
.L1573:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   203      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   204          if (shellCommand->call == NULL_PTR)
	ld.w	d15,[a15]12
.L1574:
	jne	d15,#0,.L27
.L1575:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   205          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   206              Ifx_Shell_showHelpSingle(commandList, io, FALSE, FALSE);
	mov	d4,#0
.L1576:
	mov	d5,d4
	j	.L28
.L27:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   207          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   208          else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   209          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   210              if (commandList->call == NULL_PTR)
	ld.w	d15,[a4]12
.L1577:
	jne	d15,#0,.L29
.L1578:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   211              {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   212                  IfxStdIf_DPipe_print(io, "%s ", commandList->commandLine);
	ld.a	a2,[a4]
.L793:
	st.a	[a10],a2
.L1579:
	lea	a5,.11.str
	mov.aa	a4,a12
.L796:
	call	IfxStdIf_DPipe_print
.L29:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   213              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   214  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   215              Ifx_Shell_showHelpSingle(shellCommand, io, FALSE, TRUE);
	mov	d4,#0
.L1580:
	mov	d5,#1
	mov.aa	a4,a15
.L28:
	mov.aa	a5,a12
.L797:
	call	Ifx_Shell_showHelpSingle
.L798:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   216          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   217  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   218          return TRUE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   219      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   220      else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   221      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   222          IfxStdIf_DPipe_print(io, "unknown command");
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   223          return FALSE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   224      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   225  }
	mov	d2,#1
	ret
.L26:
	movh.a	a5,#@his(.12.str)
	lea	a5,[a5]@los(.12.str)
	mov.aa	a4,a12
.L799:
	call	IfxStdIf_DPipe_print
.L800:
	mov	d2,#0
	ret
.L754:
	
__Ifx_Shell_showHelpSingleCommand_function_end:
	.size	Ifx_Shell_showHelpSingleCommand,__Ifx_Shell_showHelpSingleCommand_function_end-Ifx_Shell_showHelpSingleCommand
.L481:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_showHelp',code,cluster('Ifx_Shell_showHelp')
	.sect	'.text.Ifx_Shell.Ifx_Shell_showHelp'
	.align	2
	
	.global	Ifx_Shell_showHelp

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   226  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   227  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   228  boolean Ifx_Shell_showHelp(pchar args, void *shellPtr, IfxStdIf_DPipe *io)
; Function Ifx_Shell_showHelp
.L280:
Ifx_Shell_showHelp:	.type	func

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   229  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   230      sint32     i;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   231      Ifx_Shell *shell  = shellPtr;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   232      boolean    result = TRUE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   233  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   234      if (*args == IFX_SHELL_NULL_CHAR)
	ld.bu	d15,[a4]
.L1384:
	mov	d8,#1
.L804:
	jne	d15,#0,.L32
.L1385:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   235      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   236          for (i = 0; i < IFX_CFG_SHELL_COMMAND_LISTS; i++)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   237          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   238              if (shell->commandList[i] != NULL_PTR)
	ld.a	a4,[a5]324
.L801:
	jz.a	a4,.L33
.L1386:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   239              {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   240                  Ifx_Shell_showHelpSingle(shell->commandList[i], io, TRUE, FALSE);
	mov	d4,d8
	mov.aa	a5,a6
.L803:
	mov	d5,#0
	call	Ifx_Shell_showHelpSingle
.L802:
	j	.L34
.L32:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   241              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   242          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   243      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   244      else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   245      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   246          result = Ifx_Shell_showHelpSingleCommand(args, shellPtr, io);
	call	Ifx_Shell_showHelpSingleCommand
.L805:
	mov	d8,d2
.L34:
.L33:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   247      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   248  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   249      return result;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   250  }
	mov	d2,d8
	ret
.L661:
	
__Ifx_Shell_showHelp_function_end:
	.size	Ifx_Shell_showHelp,__Ifx_Shell_showHelp_function_end-Ifx_Shell_showHelp
.L431:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_protocolStart',code,cluster('Ifx_Shell_protocolStart')
	.sect	'.text.Ifx_Shell.Ifx_Shell_protocolStart'
	.align	2
	
	.global	Ifx_Shell_protocolStart

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   251  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   252  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   253  boolean Ifx_Shell_protocolStart(pchar args, void *data, IfxStdIf_DPipe *io)
; Function Ifx_Shell_protocolStart
.L282:
Ifx_Shell_protocolStart:	.type	func
	sub.a	a10,#8
.L806:
	st.a	[a10],a4
	mov.aa	a15,a5
.L810:
	mov.aa	a12,a6
.L811:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   254  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   255      Ifx_Shell *shell  = data;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   256      boolean    Result = TRUE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   257  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   258      if (Ifx_Shell_matchToken(&args, "?") != FALSE)
	mov	d15,#1
	mov.aa	a4,a10
.L807:
	lea	a5,.13.str
.L808:
	call	Ifx_Shell_matchToken
.L809:
	jeq	d2,#0,.L36
.L1399:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   259      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   260          IfxStdIf_DPipe_print(io, "Syntax     : protocol start" ENDL);
	movh.a	a5,#@his(.14.str)
	lea	a5,[a5]@los(.14.str)
	mov.aa	a4,a12
.L813:
	call	IfxStdIf_DPipe_print
.L814:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   261          IfxStdIf_DPipe_print(io, "           > start a protocol" ENDL);
	movh.a	a5,#@his(.15.str)
	lea	a5,[a5]@los(.15.str)
	mov.aa	a4,a12
.L815:
	call	IfxStdIf_DPipe_print
.L816:
	j	.L37
.L36:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   262      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   263      else if (Ifx_Shell_matchToken(&args, "start") != FALSE)
	mov.aa	a4,a10
.L1400:
	lea	a5,.16.str
	call	Ifx_Shell_matchToken
.L1401:
	jeq	d2,#0,.L38
.L1402:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   264      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   265          if ((shell->protocol.start != NULL_PTR) && (shell->protocol.object != NULL_PTR))
	ld.a	a2,[a15]328
.L1403:
	jz.a	a2,.L39
.L1404:
	ld.a	a4,[a15]344
.L1405:
	jz.a	a4,.L40
.L1406:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   266          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   267              Result                  = shell->protocol.start(shell->protocol.object, io);
	mov.aa	a5,a12
.L817:
	calli	a2
.L812:
	mov	d15,d2
.L819:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   268              shell->protocol.started = (Result != FALSE);
	ne	d0,d15,#0
	st.b	[a15]348,d0
.L1407:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   269  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   270              if (shell->protocol.onStart != NULL_PTR)
	ld.a	a2,[a15]336
.L1408:
	jz.a	a2,.L41
.L1409:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   271              {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   272                  shell->protocol.onStart(shell->protocol.object, shell->protocol.onStartData);
	ld.a	a4,[a15]344
.L1410:
	ld.a	a5,[a15]340
	calli	a2
.L818:
	j	.L42
.L40:
.L39:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   273              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   274          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   275          else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   276          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   277              Result = FALSE;
	mov	d15,#0
.L42:
.L41:
.L38:
.L37:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   278          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   279      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   280      else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   281      {}
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   282  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   283      return Result;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   284  }
	mov	d2,d15
	ret
.L673:
	
__Ifx_Shell_protocolStart_function_end:
	.size	Ifx_Shell_protocolStart,__Ifx_Shell_protocolStart_function_end-Ifx_Shell_protocolStart
.L441:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_bbProtocolStart',code,cluster('Ifx_Shell_bbProtocolStart')
	.sect	'.text.Ifx_Shell.Ifx_Shell_bbProtocolStart'
	.align	2
	
	.global	Ifx_Shell_bbProtocolStart

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   285  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   286  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   287  boolean Ifx_Shell_bbProtocolStart(pchar args, void *data, IfxStdIf_DPipe *io)
; Function Ifx_Shell_bbProtocolStart
.L284:
Ifx_Shell_bbProtocolStart:	.type	func
	sub.a	a10,#8
.L820:
	st.a	[a10],a4
	mov.aa	a15,a5
.L824:
	mov.aa	a12,a6
.L825:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   288  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   289      boolean result = TRUE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   290  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   291      if (Ifx_Shell_matchToken(&args, "?") != FALSE)
	mov	d15,#1
	mov.aa	a4,a10
.L821:
	lea	a5,.13.str
.L822:
	call	Ifx_Shell_matchToken
.L823:
	jeq	d2,#0,.L44
.L1415:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   292      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   293          IfxStdIf_DPipe_print(io, "Syntax     : protocol start" ENDL);
	movh.a	a5,#@his(.14.str)
	lea	a5,[a5]@los(.14.str)
	mov.aa	a4,a12
.L827:
	call	IfxStdIf_DPipe_print
.L828:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   294          IfxStdIf_DPipe_print(io, "           > start a protocol" ENDL);
	movh.a	a5,#@his(.15.str)
	lea	a5,[a5]@los(.15.str)
	mov.aa	a4,a12
.L829:
	call	IfxStdIf_DPipe_print
.L830:
	j	.L45
.L44:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   295      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   296      else if (Ifx_Shell_matchToken(&args, "protocol") != FALSE)
	mov.aa	a4,a10
.L1416:
	movh.a	a5,#@his(.17.str)
	lea	a5,[a5]@los(.17.str)
	call	Ifx_Shell_matchToken
.L1417:
	jeq	d2,#0,.L46
.L1418:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   297      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   298          result = Ifx_Shell_protocolStart(args, data, io);
	ld.a	a4,[a10]
.L1419:
	mov.aa	a5,a15
.L831:
	mov.aa	a6,a12
.L832:
	call	Ifx_Shell_protocolStart
.L826:
	mov	d15,d2
.L46:
.L45:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   299      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   300      else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   301      {}
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   302  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   303      return result;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   304  }
	mov	d2,d15
	ret
.L679:
	
__Ifx_Shell_bbProtocolStart_function_end:
	.size	Ifx_Shell_bbProtocolStart,__Ifx_Shell_bbProtocolStart_function_end-Ifx_Shell_bbProtocolStart
.L446:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_initConfig',code,cluster('Ifx_Shell_initConfig')
	.sect	'.text.Ifx_Shell.Ifx_Shell_initConfig'
	.align	2
	
	.global	Ifx_Shell_initConfig

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   305  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   306  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   307  //---------------------------------------------------------------------------
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   308  void Ifx_Shell_initConfig(Ifx_Shell_Config *config)
; Function Ifx_Shell_initConfig
.L286:
Ifx_Shell_initConfig:	.type	func

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   309  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   310      uint32 i;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   311  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   312      for (i = 0; i < IFX_CFG_SHELL_COMMAND_LISTS; i++)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   313      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   314          config->commandList[i] = NULL_PTR;
	mov.a	a15,#0
.L1020:
	st.a	[a4]8,a15
.L1021:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   315      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   316  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   317      config->standardIo           = NULL_PTR;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   318      config->echo                 = TRUE;
	mov	d15,#1
	st.b	[a4]4,d15
.L1022:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   319      config->protocol.execute     = NULL_PTR;
	st.a	[a4]16,a15
.L1023:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   320      config->protocol.object      = NULL_PTR;
	st.a	[a4]28,a15
.L1024:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   321      config->protocol.onStart     = NULL_PTR;
	st.a	[a4]20,a15
.L1025:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   322      config->protocol.onStartData = NULL_PTR;
	st.a	[a4]24,a15
.L1026:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   323      config->protocol.start       = NULL_PTR;
	st.a	[a4]12,a15
.L1027:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   324      config->protocol.started     = FALSE;
	mov	d0,#0
	st.b	[a4]32,d0
.L1028:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   325      config->sendResultCode       = FALSE;
	st.b	[a4]6,d0
.L1029:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   326      config->showPrompt           = TRUE;
	st.b	[a4]5,d15
.L1030:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   327      config->standardIo           = NULL_PTR;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   328  }
	st.a	[a4],a15
	ret
.L494:
	
__Ifx_Shell_initConfig_function_end:
	.size	Ifx_Shell_initConfig,__Ifx_Shell_initConfig_function_end-Ifx_Shell_initConfig
.L341:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_init',code,cluster('Ifx_Shell_init')
	.sect	'.text.Ifx_Shell.Ifx_Shell_init'
	.align	2
	
	.global	Ifx_Shell_init

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   329  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   330  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   331  boolean Ifx_Shell_init(Ifx_Shell *shell, const Ifx_Shell_Config *config)
; Function Ifx_Shell_init
.L288:
Ifx_Shell_init:	.type	func

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   332  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   333      sint32 i;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   334      char **CmdHistory = NULL_PTR;   /* Pointer to array of pointers for command history items */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   335  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   336      /* Ensure state variable is cleared */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   337      memset(shell, 0, sizeof(*shell));
	mov	d4,#0
	mov.aa	a15,a4
.L834:
	mov	d5,#352
	mov.aa	a12,a5
.L835:
	call	memset
.L833:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   338  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   339      shell->protocol               = config->protocol;
	lea	a2,[a12]12
.L1035:
	lea	a4,[a15]328
	mov.a	a5,#5
.L48:
	ld.w	d15,[a2+]
	st.w	[a4+],d15
	loop	a5,.L48
.L1036:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   340      shell->protocol.started       = FALSE;
	mov	d4,#0
	st.b	[a15]348,d4
.L1037:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   341  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   342      shell->io                     = config->standardIo;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   343      shell->control.showPrompt     = config->showPrompt;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   344      shell->control.sendResultCode = config->sendResultCode;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   345      shell->control.echo           = config->echo;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   346      shell->control.echoError      = TRUE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   347      shell->control.enabled        = TRUE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   348  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   349      shell->locals.escBracketNum   = IFX_SHELL_NULL_CHAR; /* Used to cache number in sequence "ESC [ 1/2/3/4 ~" */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   350      shell->locals.cmdState        = IFX_SHELL_CMD_STATE_NORMAL;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   351  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   352      /* Copy command line buffer pointer into state variable */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   353      shell->cmd.cmdStr = shell->locals.cmdStr;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   354  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   355      /* Initialize command history space and cache pointer */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   356      memset(Ifx_Shell_cmdBuffer, 0, sizeof(Ifx_Shell_cmdBuffer));
	movh.a	a13,#@his(Ifx_Shell_cmdBuffer)
.L1038:
	ld.a	a2,[a12]
.L1039:
	st.a	[a15],a2
.L1040:
	mov	d5,#1280
	lea	a2,[a15]191
.L1041:
	ld.bu	d15,[a15]4
.L1042:
	ld.bu	d0,[a12]5
.L1043:
	lea	a13,[a13]@los(Ifx_Shell_cmdBuffer)
.L1044:
	insert	d15,d15,d0,#0,#1
	st.b	[a15]4,d15
.L1045:
	mov.aa	a4,a13
.L1046:
	ld.bu	d0,[a12]6
.L1047:
	insert	d15,d15,d0,#2,#1
	st.b	[a15]4,d15
.L1048:
	ld.bu	d0,[a12]4
.L1049:
	insert	d15,d15,d0,#3,#1
.L1050:
	or	d15,#16
.L1051:
	or	d15,#2
	st.b	[a15]4,d15
.L1052:
	st.b	[a15]320,d4
.L1053:
	st.b	[a15]319,d4
.L1054:
	st.a	[a15]48,a2
.L1055:
	call	memset
.L1056:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   357      shell->cmdHistory[0] = &Ifx_Shell_cmdBuffer[0];
	st.a	[a15]8,a13
.L1057:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   358  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   359      for (i = 0; i < IFX_CFG_SHELL_COMMAND_LISTS; i++)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   360      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   361          shell->commandList[i] = config->commandList[i];
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   362      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   363  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   364      /* Initialize command history pointers */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   365      CmdHistory = shell->cmdHistory;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   366  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   367      for (i = 1; i < IFX_CFG_SHELL_CMD_HISTORY_SIZE; i++)
	mov.a	a5,#8
.L1058:
	ld.a	a2,[a12]8
.L1059:
	st.a	[a15]324,a2
.L1060:
	lea	a2,[a15]8
.L836:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   368      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   369          CmdHistory[i] = &CmdHistory[i - 1][IFX_CFG_SHELL_CMD_LINE_SIZE];    /* Items are just offsets into a large allocated area */
	lea	a4,[a2]4
.L49:
	ld.a	a6,[a4]-4
.L1061:
	lea	a6,[a6]128
.L1062:
	st.a	[a4+],a6
	loop	a5,.L49
.L1063:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   370      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   371  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   372      shell->cmd.historyItem = IFX_SHELL_CMD_HISTORY_NO_ITEM;
	mov	d15,#-1
	st.h	[a15]58,d15
.L1064:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   373  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   374      /* Pre-load useful commands into history buffer */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   375      strcpy(CmdHistory[0], "help");
	lea	a5,.18.str
.L1065:
	ld.a	a4,[a2]
.L1066:
	call	strcpy
.L837:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   376      //strcpy(CmdHistory[1], "protocol start");
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   377  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   378      if (shell->control.showPrompt != 0)
	ld.bu	d15,[a15]4
.L1067:
	jz.t	d15:0,.L50
.L1068:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   379      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   380          IfxStdIf_DPipe_print(shell->io, ENDL);
	ld.a	a4,[a15]
.L1069:
	lea	a5,.9.str
	call	IfxStdIf_DPipe_print
.L1070:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   381          IfxStdIf_DPipe_print(shell->io, IFX_CFG_SHELL_PROMPT);
	ld.a	a4,[a15]
.L1071:
	lea	a5,.19.str
	call	IfxStdIf_DPipe_print
.L50:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   382      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   383  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   384      return TRUE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   385  }
	mov	d2,#1
	ret
.L498:
	
__Ifx_Shell_init_function_end:
	.size	Ifx_Shell_init,__Ifx_Shell_init_function_end-Ifx_Shell_init
.L346:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_process',code,cluster('Ifx_Shell_process')
	.sect	'.text.Ifx_Shell.Ifx_Shell_process'
	.align	2
	
	.global	Ifx_Shell_process

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   386  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   387  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   388  void Ifx_Shell_process(Ifx_Shell *shell)
; Function Ifx_Shell_process
.L290:
Ifx_Shell_process:	.type	func
	mov.aa	a12,a4
.L840:
	sub.a	a10,#16
.L838:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   389  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   390      Ifx_SizeT          i, j;           /* Loop variables */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   391      Ifx_SizeT          count;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   392      Ifx_SizeT          readCount;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   393      boolean            NormalKeyPress; /* Indicates if this is a normal keypress, i.e. not part of an escape code */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   394  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   395      Ifx_Shell_CmdLine *Cmd         = &shell->cmd;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   396      char              *inputbuffer = shell->locals.inputbuffer;
	lea	a15,[a12]62
.L841:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   397      char              *cmdStr      = shell->locals.cmdStr;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   398      char             **CmdHistory  = shell->cmdHistory;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   399  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   400      if (shell->control.enabled == 0)
	ld.bu	d15,[a12]4
.L1093:
	st.a	[a10]8,a15
.L843:
	lea	a15,[a12]8
.L842:
	st.a	[a10]12,a15
.L845:
	lea	a13,[a12]191
.L846:
	jz.t	d15:1,.L52
.L1094:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   401      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   402          return;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   403      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   404  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   405      if ((shell->protocol.object != NULL_PTR) && (shell->protocol.started != FALSE))
	ld.a	a4,[a12]344
.L839:
	jz.a	a4,.L53
.L1095:
	ld.bu	d15,[a12]348
.L1096:
	jeq	d15,#0,.L54
.L1097:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   406      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   407          shell->protocol.execute(shell->protocol.object);
	ld.a	a15,[a12]332
.L844:
	ji	a15
.L54:
.L53:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   408      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   409      else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   410      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   411          /**** NORMAL MODE ****/
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   412  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   413          /********************************************************************************/
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   414          /* Read all characters until enter inclusive.                                   */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   415          /* If the command is bigger than IFX_SHELL_CMD_SIZE, the command is ignored.    */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   416          /*                                                                              */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   417          /* Escape sequences are handled by a state machine.                             */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   418          /* The following escape sequences (prefix "ESC [") are supported:               */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   419          /*                                                                              */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   420          /* A  - up      B - down       C - right     D - left                           */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   421          /* 1~ - HOME   2~ - INSERT    3~ - DELETE   5~ - END                            */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   422          /*                                                                              */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   423          /* Backspace ('\b') is also supported.                                          */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   424          /********************************************************************************/
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   425  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   426          count     = 0;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   427          readCount = IFX_CFG_SHELL_CMD_LINE_SIZE - count;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   428          IfxStdIf_DPipe_read(shell->io, &inputbuffer[count], &readCount, TIME_NULL);
	mov	d15,#128
	ld.a	a15,[a12]
.L847:
	st.h	[a10]4,d15
.L534:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     2   * \file IfxStdIf_DPipe.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     3   * \brief Standard interface: Data Pipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     4   * \ingroup IfxStdIf
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     6   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     7   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     8   * $Date: 2014-02-27 20:08:24 GMT$
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    42   * \defgroup library_srvsw_stdif_dpipe Standard interface: Data Pipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    43   * \ingroup library_srvsw_stdif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    44   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    45   * The standard interafce data pipe (DPipe) abstract the hardware used for data transfer. It provide, after proper initialization an hardware independant way to write
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    46   * and read data to/from as communciation channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    48   * \par Porting StandardIo to DPipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    49   * replace all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    50   *  - StandardIo type with IfxStdIf_DPipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    51   *  - StandardIo_print with IfxStdIf_DPipe_print
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    52   * delete StandardIo.c and StandardIo.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    53   * Include "StdIf/IfxStdIf_DPipe.h" instead of "SysSe/Bsp/StandardIo.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    54   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    55   * The following files are already ported: Ifx_Console, Ifx_Shell
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    56   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    57   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    58  #ifndef STDIF_DPIPE_H_
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    59  #define STDIF_DPIPE_H_ 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    61  #include "IfxStdIf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    62  //----------------------------------------------------------------------------------------
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    63  #ifndef ENDL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    64  #    define ENDL       "\r\n"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    65  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    67  /** \brief Forward declaration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    68  typedef struct IfxStdIf_DPipe_ IfxStdIf_DPipe;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    69  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    70  typedef volatile boolean      *IfxStdIf_DPipe_WriteEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    71  typedef volatile boolean      *IfxStdIf_DPipe_ReadEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    73  /** \brief Size of the buffer allocated on the stack for the print function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    74  #define STDIF_DPIPE_MAX_PRINT_SIZE (255)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    76  /** \brief Write binary data into the \ref IfxStdIf_DPipe.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    77   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    78   * Initially the parameter 'count' specifies count of data to write.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    79   * After execution the data pointed by 'count' specifies the data actually written
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    80   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    81   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    82   * \param data Pointer to the start of data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    83   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    84   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    85   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    86   * \retval TRUE Returns TRUE if all items could be written
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    87   * \retval FALSE Returns FALSE if not all the items could be written
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    88   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    89  typedef boolean (*IfxStdIf_DPipe_Write)(IfxStdIf_InterfaceDriver stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    91  /** \brief Read data from the \ref IfxStdIf_DPipe object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    92   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    93   * Initially the parameter 'count' specifies count of data to read.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    94   * After execution the data pointed by 'count' specifies the data actually read.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    95   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    96   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    97   * \param data Pointer to the start of data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    98   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    99   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   100   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   101   * \retval TRUE Returns TRUE if all items could be read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   102   * \retval FALSE Returns FALSE if not all the items could be read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   103   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   104  typedef boolean (*IfxStdIf_DPipe_Read)(IfxStdIf_InterfaceDriver stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   105  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   106  /** \brief Returns the number of bytes in the rx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   107   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   108   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   109   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   110   * \return Returns the number of bytes in the rx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   111   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   112  typedef sint32 (*IfxStdIf_DPipe_GetReadCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   114  /** \brief Returns read event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   115   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   116   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   117   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   118   * \return Returns read event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   119   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   120  typedef IfxStdIf_DPipe_ReadEvent (*IfxStdIf_DPipe_GetReadEvent)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   122  /** \brief Returns number of bytes send
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   123   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   124   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   126   * \return Returns number of bytes send
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   127   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   128  typedef uint32 (*IfxStdIf_DPipe_GetSendCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   129  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   130  /** \brief Returns the time stamp of the last transmit data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   131   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   132   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   133   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   134   * \return Returns the time stamp of the last transmit data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   135   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   136  typedef Ifx_TickTime (*IfxStdIf_DPipe_GetTxTimeStamp)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   138  /** \brief Returns the number of free bytes (free space) in the tx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   139   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   140   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   142   * \return Returns the number of free bytes in the tx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   143   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   144  typedef sint32 (*IfxStdIf_DPipe_GetWriteCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   145  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   146  /** \brief Returns write event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   147   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   148   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   149   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   150   * \return Returns write event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   151   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   152  typedef IfxStdIf_DPipe_WriteEvent (*IfxStdIf_DPipe_GetWriteEvent)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   154  /** \brief Indicates if the required number of bytes are available for read in the buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   155   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   156   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   157   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   158   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   159   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   160   * \return Returns TRUE if at least count bytes are available for read in the rx buffer,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   161   * if not the Event is armed to be set when the buffer count is bigger or equal to the requested count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   162   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   163  typedef boolean (*IfxStdIf_DPipe_CanReadCount)(IfxStdIf_InterfaceDriver stdIf, Ifx_SizeT count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   164  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   165  /** \brief  Indicates if there is enough free space to write the data in the buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   166   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   167   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   168   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   169   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   171   * \return Returns TRUE if at least count bytes can be written to the tx buffer,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   172   *  if not the Event is armed to be set when the buffer free count is bigger or equal to the requested count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   174  typedef boolean (*IfxStdIf_DPipe_CanWriteCount)(IfxStdIf_InterfaceDriver stdIf, Ifx_SizeT count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   176  /** \brief Flush the transmit buffer by transmitting all data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   177   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   178   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   179   * \param timeout timeout for the flush operation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   180   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   181   * \return Returns TRUE if the FIFO is empty
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   182   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   183  typedef boolean (*IfxStdIf_DPipe_FlushTx)(IfxStdIf_InterfaceDriver stdIf, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   184  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   185  /** \brief Clears the RX buffer by removing all data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   186   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   187   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   188   * \return void
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   189   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   190  typedef void (*IfxStdIf_DPipe_ClearRx)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   192  /** \brief Clears the TX buffer by removing all data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   193   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   194   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   195   * \return void
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   196   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   197  typedef void (*IfxStdIf_DPipe_ClearTx)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   198  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   199  /** \brief handler called on reveive event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   200   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   201   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   202   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   203   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   204   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   205  typedef void (*IfxStdIf_DPipe_OnReceive)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   206  /** \brief handler called on transmit event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   207   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   208   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   209   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   210   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   211   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   212  typedef void (*IfxStdIf_DPipe_OnTransmit)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   213  /** \brief handler called on error event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   214   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   215   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   216   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   217   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   218   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   219  typedef void (*IfxStdIf_DPipe_OnError)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   220  /** \brief Reset the sendCount counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   221   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   222   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   223   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   224   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   225   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   226  typedef void (*IfxStdIf_DPipe_ResetSendCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   228  /** \brief Standard interface object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   229   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   230  struct IfxStdIf_DPipe_
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   231  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   232      IfxStdIf_InterfaceDriver driver;              /**< \brief Pointer to the specific driver object */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   233      boolean                  txDisabled;          /**< \brief If disabled is set to TRUE, the output is disabled, else enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   235      /* Standard interface APIs */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   236      IfxStdIf_DPipe_Write          write;          /**< \brief \see IfxStdIf_DPipe_Write */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   237      IfxStdIf_DPipe_Read           read;           /**< \brief \see IfxStdIf_DPipe_Read */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   238      IfxStdIf_DPipe_GetReadCount   getReadCount;   /**< \brief \see IfxStdIf_DPipe_GetReadCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   239      IfxStdIf_DPipe_GetReadEvent   getReadEvent;   /**< \brief \see IfxStdIf_DPipe_GetReadEvent */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   240      IfxStdIf_DPipe_GetWriteCount  getWriteCount;  /**< \brief \see IfxStdIf_DPipe_GetWriteCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   241      IfxStdIf_DPipe_GetWriteEvent  getWriteEvent;  /**< \brief \see IfxStdIf_DPipe_GetWriteEvent */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   242      IfxStdIf_DPipe_CanReadCount   canReadCount;   /**< \brief \see IfxStdIf_DPipe_CanReadCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   243      IfxStdIf_DPipe_CanWriteCount  canWriteCount;  /**< \brief \see IfxStdIf_DPipe_CanWriteCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   244      IfxStdIf_DPipe_FlushTx        flushTx;        /**< \brief \see IfxStdIf_DPipe_FlushTx */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   245      IfxStdIf_DPipe_ClearTx        clearTx;        /**< \brief \see IfxStdIf_DPipe_ClearTx */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   246      IfxStdIf_DPipe_ClearRx        clearRx;        /**< \brief \see IfxStdIf_DPipe_ClearRx */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   247      IfxStdIf_DPipe_OnReceive      onReceive;      /**< \brief \see IfxStdIf_DPipe_OnReceive  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   248      IfxStdIf_DPipe_OnTransmit     onTransmit;     /**< \brief \see IfxStdIf_DPipe_OnTransmit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   249      IfxStdIf_DPipe_OnError        onError;        /**< \brief \see IfxStdIf_DPipe_OnError    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   250  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   251      IfxStdIf_DPipe_GetSendCount   getSendCount;   /**< \brief \see IfxStdIf_DPipe_GetSendCount    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   252      IfxStdIf_DPipe_GetTxTimeStamp getTxTimeStamp; /**< \brief \see IfxStdIf_DPipe_GetTxTimeStamp    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   253      IfxStdIf_DPipe_ResetSendCount resetSendCount; /**< \brief \see IfxStdIf_DPipe_ResetSendCount    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   254  };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   255  /** \addtogroup library_srvsw_stdif_dpipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   256   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   257  /** \copydoc IfxStdIf_DPipe_Write
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   259  IFX_INLINE boolean IfxStdIf_DPipe_write(IfxStdIf_DPipe *stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   261      return stdIf->write(stdIf->driver, data, count, timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   262  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   265  /** \copydoc IfxStdIf_DPipe_Read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   266   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   267  IFX_INLINE boolean IfxStdIf_DPipe_read(IfxStdIf_DPipe *stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   268  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   269      return stdIf->read(stdIf->driver, data, count, timeout);
	mov	e4,#0
	lea	a6,[a10]4
.L1098:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     2   * \file IfxStdIf_DPipe.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     3   * \brief Standard interface: Data Pipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     4   * \ingroup IfxStdIf
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     6   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     7   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     8   * $Date: 2014-02-27 20:08:24 GMT$
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    42   * \defgroup library_srvsw_stdif_dpipe Standard interface: Data Pipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    43   * \ingroup library_srvsw_stdif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    44   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    45   * The standard interafce data pipe (DPipe) abstract the hardware used for data transfer. It provide, after proper initialization an hardware independant way to write
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    46   * and read data to/from as communciation channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    48   * \par Porting StandardIo to DPipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    49   * replace all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    50   *  - StandardIo type with IfxStdIf_DPipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    51   *  - StandardIo_print with IfxStdIf_DPipe_print
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    52   * delete StandardIo.c and StandardIo.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    53   * Include "StdIf/IfxStdIf_DPipe.h" instead of "SysSe/Bsp/StandardIo.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    54   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    55   * The following files are already ported: Ifx_Console, Ifx_Shell
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    56   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    57   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    58  #ifndef STDIF_DPIPE_H_
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    59  #define STDIF_DPIPE_H_ 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    61  #include "IfxStdIf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    62  //----------------------------------------------------------------------------------------
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    63  #ifndef ENDL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    64  #    define ENDL       "\r\n"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    65  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    67  /** \brief Forward declaration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    68  typedef struct IfxStdIf_DPipe_ IfxStdIf_DPipe;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    69  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    70  typedef volatile boolean      *IfxStdIf_DPipe_WriteEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    71  typedef volatile boolean      *IfxStdIf_DPipe_ReadEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    73  /** \brief Size of the buffer allocated on the stack for the print function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    74  #define STDIF_DPIPE_MAX_PRINT_SIZE (255)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    76  /** \brief Write binary data into the \ref IfxStdIf_DPipe.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    77   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    78   * Initially the parameter 'count' specifies count of data to write.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    79   * After execution the data pointed by 'count' specifies the data actually written
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    80   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    81   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    82   * \param data Pointer to the start of data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    83   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    84   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    85   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    86   * \retval TRUE Returns TRUE if all items could be written
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    87   * \retval FALSE Returns FALSE if not all the items could be written
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    88   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    89  typedef boolean (*IfxStdIf_DPipe_Write)(IfxStdIf_InterfaceDriver stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    91  /** \brief Read data from the \ref IfxStdIf_DPipe object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    92   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    93   * Initially the parameter 'count' specifies count of data to read.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    94   * After execution the data pointed by 'count' specifies the data actually read.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    95   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    96   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    97   * \param data Pointer to the start of data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    98   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    99   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   100   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   101   * \retval TRUE Returns TRUE if all items could be read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   102   * \retval FALSE Returns FALSE if not all the items could be read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   103   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   104  typedef boolean (*IfxStdIf_DPipe_Read)(IfxStdIf_InterfaceDriver stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   105  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   106  /** \brief Returns the number of bytes in the rx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   107   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   108   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   109   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   110   * \return Returns the number of bytes in the rx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   111   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   112  typedef sint32 (*IfxStdIf_DPipe_GetReadCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   114  /** \brief Returns read event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   115   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   116   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   117   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   118   * \return Returns read event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   119   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   120  typedef IfxStdIf_DPipe_ReadEvent (*IfxStdIf_DPipe_GetReadEvent)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   122  /** \brief Returns number of bytes send
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   123   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   124   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   126   * \return Returns number of bytes send
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   127   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   128  typedef uint32 (*IfxStdIf_DPipe_GetSendCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   129  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   130  /** \brief Returns the time stamp of the last transmit data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   131   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   132   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   133   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   134   * \return Returns the time stamp of the last transmit data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   135   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   136  typedef Ifx_TickTime (*IfxStdIf_DPipe_GetTxTimeStamp)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   138  /** \brief Returns the number of free bytes (free space) in the tx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   139   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   140   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   142   * \return Returns the number of free bytes in the tx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   143   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   144  typedef sint32 (*IfxStdIf_DPipe_GetWriteCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   145  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   146  /** \brief Returns write event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   147   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   148   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   149   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   150   * \return Returns write event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   151   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   152  typedef IfxStdIf_DPipe_WriteEvent (*IfxStdIf_DPipe_GetWriteEvent)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   154  /** \brief Indicates if the required number of bytes are available for read in the buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   155   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   156   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   157   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   158   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   159   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   160   * \return Returns TRUE if at least count bytes are available for read in the rx buffer,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   161   * if not the Event is armed to be set when the buffer count is bigger or equal to the requested count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   162   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   163  typedef boolean (*IfxStdIf_DPipe_CanReadCount)(IfxStdIf_InterfaceDriver stdIf, Ifx_SizeT count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   164  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   165  /** \brief  Indicates if there is enough free space to write the data in the buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   166   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   167   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   168   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   169   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   171   * \return Returns TRUE if at least count bytes can be written to the tx buffer,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   172   *  if not the Event is armed to be set when the buffer free count is bigger or equal to the requested count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   174  typedef boolean (*IfxStdIf_DPipe_CanWriteCount)(IfxStdIf_InterfaceDriver stdIf, Ifx_SizeT count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   176  /** \brief Flush the transmit buffer by transmitting all data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   177   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   178   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   179   * \param timeout timeout for the flush operation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   180   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   181   * \return Returns TRUE if the FIFO is empty
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   182   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   183  typedef boolean (*IfxStdIf_DPipe_FlushTx)(IfxStdIf_InterfaceDriver stdIf, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   184  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   185  /** \brief Clears the RX buffer by removing all data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   186   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   187   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   188   * \return void
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   189   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   190  typedef void (*IfxStdIf_DPipe_ClearRx)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   192  /** \brief Clears the TX buffer by removing all data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   193   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   194   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   195   * \return void
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   196   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   197  typedef void (*IfxStdIf_DPipe_ClearTx)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   198  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   199  /** \brief handler called on reveive event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   200   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   201   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   202   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   203   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   204   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   205  typedef void (*IfxStdIf_DPipe_OnReceive)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   206  /** \brief handler called on transmit event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   207   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   208   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   209   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   210   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   211   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   212  typedef void (*IfxStdIf_DPipe_OnTransmit)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   213  /** \brief handler called on error event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   214   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   215   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   216   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   217   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   218   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   219  typedef void (*IfxStdIf_DPipe_OnError)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   220  /** \brief Reset the sendCount counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   221   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   222   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   223   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   224   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   225   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   226  typedef void (*IfxStdIf_DPipe_ResetSendCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   228  /** \brief Standard interface object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   229   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   230  struct IfxStdIf_DPipe_
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   231  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   232      IfxStdIf_InterfaceDriver driver;              /**< \brief Pointer to the specific driver object */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   233      boolean                  txDisabled;          /**< \brief If disabled is set to TRUE, the output is disabled, else enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   235      /* Standard interface APIs */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   236      IfxStdIf_DPipe_Write          write;          /**< \brief \see IfxStdIf_DPipe_Write */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   237      IfxStdIf_DPipe_Read           read;           /**< \brief \see IfxStdIf_DPipe_Read */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   238      IfxStdIf_DPipe_GetReadCount   getReadCount;   /**< \brief \see IfxStdIf_DPipe_GetReadCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   239      IfxStdIf_DPipe_GetReadEvent   getReadEvent;   /**< \brief \see IfxStdIf_DPipe_GetReadEvent */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   240      IfxStdIf_DPipe_GetWriteCount  getWriteCount;  /**< \brief \see IfxStdIf_DPipe_GetWriteCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   241      IfxStdIf_DPipe_GetWriteEvent  getWriteEvent;  /**< \brief \see IfxStdIf_DPipe_GetWriteEvent */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   242      IfxStdIf_DPipe_CanReadCount   canReadCount;   /**< \brief \see IfxStdIf_DPipe_CanReadCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   243      IfxStdIf_DPipe_CanWriteCount  canWriteCount;  /**< \brief \see IfxStdIf_DPipe_CanWriteCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   244      IfxStdIf_DPipe_FlushTx        flushTx;        /**< \brief \see IfxStdIf_DPipe_FlushTx */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   245      IfxStdIf_DPipe_ClearTx        clearTx;        /**< \brief \see IfxStdIf_DPipe_ClearTx */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   246      IfxStdIf_DPipe_ClearRx        clearRx;        /**< \brief \see IfxStdIf_DPipe_ClearRx */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   247      IfxStdIf_DPipe_OnReceive      onReceive;      /**< \brief \see IfxStdIf_DPipe_OnReceive  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   248      IfxStdIf_DPipe_OnTransmit     onTransmit;     /**< \brief \see IfxStdIf_DPipe_OnTransmit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   249      IfxStdIf_DPipe_OnError        onError;        /**< \brief \see IfxStdIf_DPipe_OnError    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   250  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   251      IfxStdIf_DPipe_GetSendCount   getSendCount;   /**< \brief \see IfxStdIf_DPipe_GetSendCount    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   252      IfxStdIf_DPipe_GetTxTimeStamp getTxTimeStamp; /**< \brief \see IfxStdIf_DPipe_GetTxTimeStamp    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   253      IfxStdIf_DPipe_ResetSendCount resetSendCount; /**< \brief \see IfxStdIf_DPipe_ResetSendCount    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   254  };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   255  /** \addtogroup library_srvsw_stdif_dpipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   256   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   257  /** \copydoc IfxStdIf_DPipe_Write
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   259  IFX_INLINE boolean IfxStdIf_DPipe_write(IfxStdIf_DPipe *stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   261      return stdIf->write(stdIf->driver, data, count, timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   262  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   265  /** \copydoc IfxStdIf_DPipe_Read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   266   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   267  IFX_INLINE boolean IfxStdIf_DPipe_read(IfxStdIf_DPipe *stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   268  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   269      return stdIf->read(stdIf->driver, data, count, timeout);
	ld.a	a5,[a10]8
.L848:
	ld.a	a2,[a15]12
.L1099:
	ld.a	a4,[a15]
.L1100:
	calli	a2
.L535:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   429          count    += readCount;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   430  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   431          for (i = 0; i < count; i++)
	mov	d10,#0
	ld.h	d8,[a10]4
.L849:
	mov	d9,d10
	j	.L56
.L57:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   432          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   433              /* By default, we assume character is part of escape sequence */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   434              NormalKeyPress = FALSE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   435  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   436              /* Process key pressed */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   437              switch (inputbuffer[i])
	ld.a	a15,[a10]8
.L851:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   438              {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   439              /* New line (ENTER) */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   440              case '\n':
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   441              case '\r':
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   442                  /* Print new line to terminal if requested */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   443                  IFX_SHELL_IF_ECHO(IfxStdIf_DPipe_print(shell->io, ENDL))
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   444  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   445                  /* Execute command if length is valid - i.e. not an over-full buffer
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   446                   * (prevents attempted execution of junk) */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   447                  if (Cmd->length < IFX_CFG_SHELL_CMD_LINE_SIZE)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   448                  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   449                      cmdStr[Cmd->length] = IFX_SHELL_NULL_CHAR;  /* Terminate cmdStr */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   450  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   451                      if (Cmd->historyAdd != FALSE)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   452                      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   453                          /* Shuffle history up */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   454                          for (j = IFX_CFG_SHELL_CMD_HISTORY_SIZE - 1; j > 0; j--)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   455                          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   456                              /* Copy text */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   457                              strncpy(CmdHistory[j], CmdHistory[j - 1], IFX_CFG_SHELL_CMD_LINE_SIZE);
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   458                          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   459  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   460                          /* Copy in new entry */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   461                          strncpy(CmdHistory[0], cmdStr, IFX_CFG_SHELL_CMD_LINE_SIZE);
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   462                      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   463  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   464                      /* Execute command */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   465                      Ifx_Shell_execute(shell, cmdStr);
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   466                  }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   467  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   468                  /* Show prompt if in main shell */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   469                  if (shell->control.showPrompt != 0)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   470                  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   471                      IfxStdIf_DPipe_print(shell->io, IFX_CFG_SHELL_PROMPT);
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   472                  }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   473  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   474                  /* Reset command line buffer length */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   475                  Cmd->length = 0;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   476  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   477                  /* Reset command line buffer cursor position */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   478                  Cmd->cursor = 0;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   479  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   480                  /* Clear flag */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   481                  Cmd->historyAdd = FALSE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   482  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   483                  /* Ensure we're not in command history list */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   484                  Cmd->historyItem = IFX_SHELL_CMD_HISTORY_NO_ITEM;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   485                  break;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   486  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   487              /* Backspace (may occur in middle of text if cursor location is not at end) */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   488              case '\b':
	mov	d15,#8
.L1101:
	mov	d11,#0
.L853:
	ld.b	d4,[a15]0
.L1102:
	jeq	d15,d4,.L58
.L1103:
	mov	d15,#10
	jeq	d15,d4,.L59
.L1104:
	mov	d15,#13
	jeq	d15,d4,.L60
.L1105:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   489  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   490                  if (Cmd->cursor > 0)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   491                  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   492                      /* Update on screen */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   493                      if (shell->control.echo != 0)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   494                      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   495                          /* Move left one character */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   496                          IfxStdIf_DPipe_print(shell->io, "\b");
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   497  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   498                          /* Update line with new characters */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   499                          for (j = Cmd->cursor; j < Cmd->length; j++)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   500                          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   501                              IfxStdIf_DPipe_print(shell->io, "%c", cmdStr[j]);
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   502                          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   503  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   504                          /* Write over duplicated character at end */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   505                          IfxStdIf_DPipe_print(shell->io, " ");
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   506                          IFX_SHELL_WRITE_BACKSPACES((Cmd->length - Cmd->cursor) + 1)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   507                      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   508  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   509                      /* Update in command line variable. Shuffle text left */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   510                      strncpy(&cmdStr[Cmd->cursor - 1], &cmdStr[Cmd->cursor], Cmd->length - Cmd->cursor);
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   511  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   512                      /* Terminate string at end of shorter string */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   513                      cmdStr[Cmd->length - 1] = IFX_SHELL_NULL_CHAR;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   514  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   515                      Cmd->length--;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   516                      Cmd->cursor--;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   517  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   518                      /* Command line has been modified */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   519                      Cmd->historyAdd = TRUE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   520                  }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   521  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   522                  break;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   523  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   524              /* Escape character */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   525              case '\x1B':       /*'\x1B': */
	mov	d15,#27
	jeq	d15,d4,.L61
.L1106:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   526                  shell->locals.cmdState = IFX_SHELL_CMD_STATE_ESCAPE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   527                  break;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   528  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   529              /* '[' - check to see if this is second part of an escape sequence */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   530              case '[':
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   531  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   532                  if (shell->locals.cmdState == IFX_SHELL_CMD_STATE_ESCAPE)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   533                  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   534                      /* ESC [ pressed */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   535                      shell->locals.cmdState = IFX_SHELL_CMD_STATE_ESCAPE_BRACKET;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   536                  }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   537                  else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   538                  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   539                      NormalKeyPress = TRUE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   540                  }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   541  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   542                  break;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   543  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   544              /* Check for supported characters in escape sequences ( ESC [ A/B/C/D ) */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   545              case 'A':
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   546              case 'B':
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   547              case 'C':
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   548              case 'D':
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   549  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   550                  if (shell->locals.cmdState == IFX_SHELL_CMD_STATE_ESCAPE_BRACKET)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   551                  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   552                      /* Process arrow keys */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   553                      Ifx_Shell_cmdEscapeProcess(shell, inputbuffer[i], 0);
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   554  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   555                      /* End of escape sequence */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   556                      shell->locals.cmdState = IFX_SHELL_CMD_STATE_NORMAL;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   557                  }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   558                  else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   559                  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   560                      NormalKeyPress = TRUE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   561                  }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   562  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   563                  break;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   564  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   565              /* Check for supported characters in escape sequences (ESC [ 2/4/5 ~) */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   566              case '1':
	mov	d15,#49
	jeq	d15,d4,.L62
.L1107:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   567              case '2':
	mov	d15,#50
	jeq	d15,d4,.L63
.L1108:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   568              case '3':
	mov	d15,#51
	jeq	d15,d4,.L64
.L1109:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   569              case '4':
	mov	d15,#52
	jeq	d15,d4,.L65
.L1110:
	mov	d15,#65
	jeq	d15,d4,.L66
.L1111:
	mov	d15,#66
	jeq	d15,d4,.L67
.L1112:
	mov	d15,#67
	jeq	d15,d4,.L68
.L1113:
	mov	d15,#68
	jeq	d15,d4,.L69
.L1114:
	mov	d15,#91
	jeq	d15,d4,.L70
.L1115:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   570  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   571                  if (shell->locals.cmdState == IFX_SHELL_CMD_STATE_ESCAPE_BRACKET)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   572                  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   573                      /* Store number for use once complete escape sequence is confirmed (below) */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   574                      shell->locals.escBracketNum = inputbuffer[i];
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   575                      shell->locals.cmdState      = IFX_SHELL_CMD_STATE_ESCAPE_BRACKET_NUMBER;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   576                  }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   577                  else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   578                  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   579                      NormalKeyPress = TRUE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   580                  }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   581  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   582                  break;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   583  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   584              /* Check for supported characters in escape sequences (ESC [ 2/4/5 ~) */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   585              case '~':
	mov	d15,#126
	jeq	d15,d4,.L71
	j	.L72
.L60:
.L59:
	ld.bu	d15,[a12]4
	jz.t	d15:3,.L73
	ld.a	a4,[a12]
	lea	a5,.9.str
	call	IfxStdIf_DPipe_print
.L73:
	ld.h	d0,[a12]54
.L1116:
	mov	d15,#128
.L1117:
	jge	d0,d15,.L74
.L1118:
	addsc.a	a15,a13,d0,#0
.L852:
	mov	d15,#0
.L1119:
	st.b	[a15],d15
.L1120:
	ld.bu	d15,[a12]56
.L1121:
	jeq	d15,#0,.L75
.L1122:
	lea	a15,[a12]44
.L1123:
	mov.a	a14,#8
.L76:
	ld.a	a4,[a15]
.L1124:
	ld.a	a5,[+a15]-4
.L1125:
	mov	d4,#128
	call	strncpy
.L1126:
	loop	a14,.L76
.L1127:
	ld.a	a15,[a10]12
.L854:
	mov	d4,#128
	mov.aa	a5,a13
.L855:
	ld.a	a4,[a15]
.L1128:
	call	strncpy
.L75:
	mov.aa	a4,a12
.L856:
	mov.aa	a5,a13
.L857:
	call	Ifx_Shell_execute
.L74:
	ld.bu	d15,[a12]4
.L1129:
	jz.t	d15:0,.L77
.L1130:
	ld.a	a4,[a12]
.L1131:
	lea	a5,.19.str
	call	IfxStdIf_DPipe_print
.L77:
	st.h	[a12]54,d10
.L1132:
	st.h	[a12]52,d10
.L1133:
	st.b	[a12]56,d10
.L1134:
	mov	d15,#-1
	st.h	[a12]58,d15
.L1135:
	j	.L78
.L58:
	ld.h	d15,[a12]52
.L1136:
	jlt	d15,#1,.L79
.L1137:
	ld.bu	d15,[a12]4
.L1138:
	jz.t	d15:3,.L80
.L1139:
	ld.a	a4,[a12]
.L1140:
	lea	a5,.20.str
	call	IfxStdIf_DPipe_print
.L1141:
	ld.h	d15,[a12]52
.L859:
	addsc.a	a15,a13,d15,#0
.L858:
	j	.L81
.L82:
	ld.b	d0,[a15+]1
	st.w	[a10],d0
.L1142:
	ld.a	a4,[a12]
.L1143:
	lea	a5,.21.str
	call	IfxStdIf_DPipe_print
.L1144:
	add	d15,#1
.L860:
	extr	d15,d15,#0,#16
.L81:
	ld.h	d0,[a12]54
.L1145:
	jlt	d15,d0,.L82
.L1146:
	lea	a5,.22.str
.L545:
	mov	d12,#0
	j	.L83
.L84:
	add	d12,#1
	lea	a5,.20.str
.L83:
	ld.a	a4,[a12]
	call	IfxStdIf_DPipe_print
	ld.h	d15,[a12]54
	ld.h	d0,[a12]52
	sub	d15,d0
	add	d15,#1
	jlt	d12,d15,.L84
.L80:
	ld.h	d15,[a12]52
.L1147:
	ld.h	d4,[a12]54
.L1148:
	addsc.a	a15,a12,d15,#0
.L1149:
	addsc.a	a5,a13,d15,#0
.L1150:
	sub	d4,d15
	lea	a4,[a15]190
.L1151:
	call	strncpy
.L1152:
	ld.h	d15,[a12]54
.L1153:
	addsc.a	a15,a12,d15,#0
.L1154:
	mov	d15,#0
.L1155:
	st.b	[a15]190,d15
.L1156:
	ld.h	d15,[a12]54
.L1157:
	add	d15,#-1
	st.h	[a12]54,d15
.L1158:
	ld.h	d15,[a12]52
.L1159:
	add	d15,#-1
	st.h	[a12]52,d15
.L1160:
	mov	d15,#1
	st.b	[a12]56,d15
.L1161:
	j	.L85
.L61:
	mov	d15,#1
	j	.L86
.L70:
	ld.bu	d15,[a12]319
.L1162:
	jne	d15,#1,.L87
.L1163:
	mov	d15,#2
	j	.L88
.L69:
.L68:
.L67:
.L66:
	ld.bu	d15,[a12]319
.L1164:
	jne	d15,#2,.L89
.L1165:
	mov	d5,#0
	j	.L90
.L65:
.L64:
.L63:
.L62:
	ld.bu	d15,[a12]319
.L1166:
	jne	d15,#2,.L91
.L1167:
	st.b	[a12]320,d4
.L1168:
	mov	d15,#3
	j	.L92
.L71:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   586  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   587                  if (shell->locals.cmdState == IFX_SHELL_CMD_STATE_ESCAPE_BRACKET_NUMBER)
	ld.bu	d15,[a12]319
.L1169:
	jne	d15,#3,.L93
.L1170:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   588                  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   589                      /* Process home/delete/end */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   590                      Ifx_Shell_cmdEscapeProcess(shell, shell->locals.escBracketNum, '~');
	mov	d5,#126
	ld.b	d4,[a12]320
.L90:
	mov.aa	a4,a12
.L861:
	call	Ifx_Shell_cmdEscapeProcess
.L862:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   591  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   592                      /* End of escape sequence */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   593                      shell->locals.cmdState = IFX_SHELL_CMD_STATE_NORMAL;
	mov	d15,#0
.L92:
.L88:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   594                  }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   595                  else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   596                  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   597                      NormalKeyPress = TRUE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   598                  }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   599  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   600                  break;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   601  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   602              /* Normal character - add to command string */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   603              default:
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   604                  NormalKeyPress = TRUE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   605                  break;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   606              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   607  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   608              IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, Cmd->length >= Cmd->cursor);    /* Sanity check */
.L86:
	st.b	[a12]319,d15
.L1171:
	j	.L94
.L93:
.L91:
.L89:
.L87:
.L72:
	mov	d11,#1
.L94:
.L85:
.L79:
.L78:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   609  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   610              /* If this was a normal key press (not part of an escape sequence),
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   611               * add it to the command string */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   612              if (NormalKeyPress != FALSE)
	jeq	d11,#0,.L95
.L1172:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   613              {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   614                  /* Ensure state machine is reset */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   615                  shell->locals.cmdState = IFX_SHELL_CMD_STATE_NORMAL;
	mov	d15,#0
	st.b	[a12]319,d15
.L1173:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   616  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   617                  /* If not filled buffer, add in this character */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   618                  if (Cmd->length < (IFX_CFG_SHELL_CMD_LINE_SIZE - 1))
	ld.h	d0,[a12]54
.L1174:
	mov	d15,#127
.L1175:
	jge	d0,d15,.L96
.L1176:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   619                  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   620                      /* Command line has been modified */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   621                      Cmd->historyAdd = TRUE;
	mov	d15,#1
	st.b	[a12]56,d15
.L1177:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   622  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   623                      /* Copy into command line */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   624                      cmdStr[Cmd->cursor] = inputbuffer[i];
	ld.a	a15,[a10]8
.L863:
	ld.h	d15,[a12]52
.L1178:
	addsc.a	a2,a13,d15,#0
.L1179:
	ld.bu	d15,[a15]
.L1180:
	st.b	[a2],d15
.L1181:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   625                      Cmd->cursor++;
	ld.h	d15,[a12]52
.L1182:
	add	d15,#1
	st.h	[a12]52,d15
.L1183:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   626  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   627                      /* Update length of buffer */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   628                      Cmd->length = __max(Cmd->length, Cmd->cursor);
	ld.h	d15,[a12]54
.L1184:
	ld.h	d0,[a12]52
.L1185:
	max	d15,d15,d0
	st.h	[a12]54,d15
.L1186:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   629  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   630                      if (shell->control.echo != 0)
	ld.bu	d15,[a12]4
.L1187:
	jz.t	d15:3,.L97
.L1188:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   631                      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   632                          /* echo character to shell output if requested */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   633                          shell->locals.echo[0] = inputbuffer[i];
	ld.bu	d15,[a15]
.L1189:
	st.b	[a12]60,d15
.L1190:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   634                          IfxStdIf_DPipe_print(shell->io, shell->locals.echo);
	lea	a5,[a12]60
.L1191:
	ld.a	a4,[a12]
.L1192:
	call	IfxStdIf_DPipe_print
.L1193:
	j	.L98
.L96:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   635                      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   636                  }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   637                  else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   638                  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   639                      /* Line too long - ignore further characters */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   640                      Cmd->historyAdd = FALSE;    /* Invalid command line */
	st.b	[a12]56,d10
.L98:
.L97:
.L95:
	ld.a	a15,[a10]8
.L864:
	add	d9,#1
.L850:
	extr	d9,d9,#0,#16
.L865:
	add.a	a15,#1
	st.a	[a10]8,a15
.L56:
	jlt	d9,d8,.L57

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   641                  }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   642              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   643          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   644      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   645  }
.L52:
	ret
.L519:
	
__Ifx_Shell_process_function_end:
	.size	Ifx_Shell_process,__Ifx_Shell_process_function_end-Ifx_Shell_process
.L366:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_deinit',code,cluster('Ifx_Shell_deinit')
	.sect	'.text.Ifx_Shell.Ifx_Shell_deinit'
	.align	2
	
	.global	Ifx_Shell_deinit

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   646  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   647  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   648  void Ifx_Shell_deinit(Ifx_Shell *shell)
; Function Ifx_Shell_deinit
.L292:
Ifx_Shell_deinit:	.type	func

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   649  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   650      (void)shell;                /* ignore compiler warning; */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   651      // tbd free necessary memory
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   652  }
	ret
.L507:
	
__Ifx_Shell_deinit_function_end:
	.size	Ifx_Shell_deinit,__Ifx_Shell_deinit_function_end-Ifx_Shell_deinit
.L351:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_skipWhitespace',code,cluster('Ifx_Shell_skipWhitespace')
	.sect	'.text.Ifx_Shell.Ifx_Shell_skipWhitespace'
	.align	2
	
	.global	Ifx_Shell_skipWhitespace

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   653  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   654  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   655  pchar Ifx_Shell_skipWhitespace(pchar args)
; Function Ifx_Shell_skipWhitespace
.L294:
Ifx_Shell_skipWhitespace:	.type	func

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   656  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   657      if (args != NULL_PTR)
	jz.a	a4,.L99
.L1198:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   658      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   659          while ((*args != IFX_SHELL_NULL_CHAR) && (ISSPACE(*args)))
	j	.L100
.L101:
.L102:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   660          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   661              args = &args[1];
	add.a	a4,#1
.L100:
	ld.b	d0,[a4]0
.L1199:
	jeq	d0,#0,.L103
.L1200:
	mov	d15,#32
	jeq	d15,d0,.L102
	mov	d15,#9
	jeq	d15,d0,.L101
.L103:
.L99:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   662          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   663      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   664  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   665      return args;
	mov.aa	a2,a4
.L866:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   666  }
	ret
.L549:
	
__Ifx_Shell_skipWhitespace_function_end:
	.size	Ifx_Shell_skipWhitespace,__Ifx_Shell_skipWhitespace_function_end-Ifx_Shell_skipWhitespace
.L371:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_matchToken',code,cluster('Ifx_Shell_matchToken')
	.sect	'.text.Ifx_Shell.Ifx_Shell_matchToken'
	.align	2
	
	.global	Ifx_Shell_matchToken

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   667  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   668  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   669  boolean Ifx_Shell_matchToken(pchar *argsPtr, pchar token)
; Function Ifx_Shell_matchToken
.L296:
Ifx_Shell_matchToken:	.type	func
	lea	a10,[a10]-256
.L867:
	mov.aa	a15,a4
.L870:
	mov.aa	a12,a5
.L871:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   670  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   671      pchar   savedArguments = *argsPtr;
	ld.a	a13,[a15]
.L872:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   672      char    buffer[256];
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   673      boolean result         = FALSE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   674  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   675      if (Ifx_Shell_parseToken(argsPtr, buffer, Ifx_COUNTOF(buffer)) != FALSE)
	mov	d15,#0
	mov.aa	a5,a10
.L869:
	mov	d4,#256
	call	Ifx_Shell_parseToken
.L868:
	jeq	d2,#0,.L105
.L1205:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   676      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   677          if (strcmp(token, buffer) == 0)
	mov.aa	a5,a10
	mov.aa	a4,a12
.L873:
	call	strcmp
.L874:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   678          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   679              result = TRUE;
	sel	d15,d2,d15,#1
.L105:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   680          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   681      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   682  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   683      if (result == FALSE)
	jne	d15,#0,.L107
.L1206:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   684      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   685          // No match: don't advance pointer
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   686          *argsPtr = savedArguments;
	st.a	[a15],a13
.L107:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   687      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   688  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   689      return result;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   690  }
	mov	d2,d15
	ret
.L551:
	
__Ifx_Shell_matchToken_function_end:
	.size	Ifx_Shell_matchToken,__Ifx_Shell_matchToken_function_end-Ifx_Shell_matchToken
.L376:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_matchCommand',code,cluster('Ifx_Shell_matchCommand')
	.sect	'.text.Ifx_Shell.Ifx_Shell_matchCommand'
	.align	2
	

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   691  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   692  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   693  static boolean Ifx_Shell_matchCommand(pchar *argsPtr, pchar *match)
; Function Ifx_Shell_matchCommand
.L298:
Ifx_Shell_matchCommand:	.type	func
	lea	a10,[a10]-512
.L875:
	mov.aa	a15,a4
.L878:
	mov.aa	a12,a5
.L879:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   694  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   695      boolean result         = FALSE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   696      pchar   savedArguments = *argsPtr;
	mov	d15,#0
	ld.a	a13,[a15]
.L880:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   697      pchar   savedMatch     = *match;
	ld.a	a14,[a12]
.L881:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   698      char    buffer0[256];
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   699      char    buffer1[256];
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   700  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   701      if ((Ifx_Shell_parseToken(argsPtr, buffer0, Ifx_COUNTOF(buffer0)) != FALSE)
	mov.aa	a5,a10
.L877:
	mov	d4,#256
	call	Ifx_Shell_parseToken
.L876:
	jeq	d2,#0,.L109
.L1546:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   702          && (Ifx_Shell_parseToken(match, buffer1, Ifx_COUNTOF(buffer1)) != FALSE))
	lea	a5,[a10]256
.L1547:
	mov.aa	a4,a12
.L882:
	mov	d4,#256
	call	Ifx_Shell_parseToken
.L883:
	jeq	d2,#0,.L110
.L1548:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   703      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   704          if (strcmp(buffer1, buffer0) == 0)
	lea	a4,[a10]256
.L1549:
	mov.aa	a5,a10
	call	strcmp
.L1550:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   705          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   706              result = TRUE;
	sel	d15,d2,d15,#1
.L110:
.L109:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   707          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   708      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   709  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   710      if (result == FALSE)
	jne	d15,#0,.L112
.L1551:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   711      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   712          // No match: don't advance pointer
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   713          *argsPtr = savedArguments;
	st.a	[a15],a13
.L1552:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   714          *match   = savedMatch;
	st.a	[a12],a14
.L112:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   715      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   716  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   717      return result;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   718  }
	mov	d2,d15
	ret
.L735:
	
__Ifx_Shell_matchCommand_function_end:
	.size	Ifx_Shell_matchCommand,__Ifx_Shell_matchCommand_function_end-Ifx_Shell_matchCommand
.L466:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_parseToken',code,cluster('Ifx_Shell_parseToken')
	.sect	'.text.Ifx_Shell.Ifx_Shell_parseToken'
	.align	2
	
	.global	Ifx_Shell_parseToken

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   719  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   720  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   721  boolean Ifx_Shell_parseToken(pchar *argsPtr, char *tokenBuffer, int bufferLength)
; Function Ifx_Shell_parseToken
.L300:
Ifx_Shell_parseToken:	.type	func
	mov	d8,d4
	mov.aa	a12,a4
.L886:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   722  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   723      int   mindex = 0;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   724      pchar args   = Ifx_Shell_skipWhitespace(*argsPtr);
	mov	d9,#0
	ld.a	a4,[a12]
.L884:
	mov.aa	a15,a5
.L888:
	call	Ifx_Shell_skipWhitespace
.L885:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   725  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   726      tokenBuffer[0] = IFX_SHELL_NULL_CHAR;
	mov	d15,#0
	st.b	[a15],d15
.L1211:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   727  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   728      if (args == NULL_PTR)
	jz.a	a2,.L114
.L1212:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   729      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   730          return FALSE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   731      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   732  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   733      if (*args == '\"')
	ld.b	d15,[a2]0
.L1213:
	mov	d0,#34
.L1214:
	jne	d15,d0,.L115
.L1215:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   734      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   735          args = &args[1];
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   736  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   737          while ((*args != IFX_SHELL_NULL_CHAR) && (*args != '\"'))
	mov.aa	a4,a15
	j	.L116
.L117:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   738          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   739              if (mindex < bufferLength)
	jge	d9,d8,.L118
.L1216:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   740              {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   741                  tokenBuffer[mindex] = *args;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   742                  mindex++;
	add	d9,#1
	ld.bu	d15,[a2]
.L1217:
	st.b	[a4+],d15
.L118:
.L116:
	ld.b	d0,[+a2]1
.L1218:
	jeq	d0,#0,.L119
.L1219:
	mov	d15,#34
.L1220:
	jne	d15,d0,.L117
.L119:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   743              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   744  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   745              args = &args[1];
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   746          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   747  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   748          // error if no closing quote
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   749          if (*args != '\"')
	mov	d15,#34
.L1221:
	jne	d15,d0,.L120
.L1222:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   750          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   751              return FALSE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   752          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   753  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   754          args = &args[1];
	add.a	a2,#1
.L1223:
	j	.L121
.L115:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   755      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   756      else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   757      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   758          // don't allow unquoted empty tokens
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   759          if (*args == IFX_SHELL_NULL_CHAR)
	jne	d15,#0,.L122

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   760          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   761              return FALSE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   762          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   763  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   764          while ((*args != IFX_SHELL_NULL_CHAR) && (!ISSPACE(*args)))
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   765          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   766              if (mindex < bufferLength)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   767              {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   768                  tokenBuffer[mindex] = *args;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   769                  mindex++;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   770              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   771  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   772              args = &args[1];
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   773          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   774      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   775  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   776      // make sure string is zero terminated
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   777      if (bufferLength > 0)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   778      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   779          tokenBuffer[__min(mindex, bufferLength - 1)] = IFX_SHELL_NULL_CHAR;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   780      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   781  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   782      *argsPtr = Ifx_Shell_skipWhitespace(args);
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   783  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   784      return TRUE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   785  }
.L120:
.L114:
	mov	d2,#0
	ret
.L122:
	mov.aa	a4,a15
	j	.L124
.L125:
	jge	d9,d8,.L126
.L1224:
	add	d9,#1
	ld.bu	d15,[a2]
.L1225:
	st.b	[a4+],d15
.L126:
	add.a	a2,#1
.L124:
	ld.b	d0,[a2]0
.L1226:
	jeq	d0,#0,.L127
.L1227:
	mov	d15,#32
	jeq	d15,d0,.L128
	mov	d15,#9
	jne	d15,d0,.L125
.L128:
.L127:
.L121:
	jlt	d8,#1,.L129
.L1228:
	add	d8,#-1
.L887:
	min	d15,d9,d8
.L1229:
	addsc.a	a15,a15,d15,#0
.L889:
	mov	d15,#0
.L1230:
	st.b	[a15],d15
.L129:
	mov.aa	a4,a2
.L891:
	call	Ifx_Shell_skipWhitespace
.L890:
	st.a	[a12],a2
.L1231:
	mov	d2,#1
	ret
.L559:
	
__Ifx_Shell_parseToken_function_end:
	.size	Ifx_Shell_parseToken,__Ifx_Shell_parseToken_function_end-Ifx_Shell_parseToken
.L381:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_parseAddress',code,cluster('Ifx_Shell_parseAddress')
	.sect	'.text.Ifx_Shell.Ifx_Shell_parseAddress'
	.align	2
	
	.global	Ifx_Shell_parseAddress

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   786  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   787  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   788  boolean Ifx_Shell_parseAddress(pchar *argsPtr, void **address)
; Function Ifx_Shell_parseAddress
.L302:
Ifx_Shell_parseAddress:	.type	func
	sub.a	a10,#40
.L892:
	mov.aa	a15,a5
.L895:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   789  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   790      char    buffer[32];
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   791      boolean result;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   792  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   793      *address = 0;
	mov.a	a2,#0
.L1236:
	st.a	[a15],a2
.L1237:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   794  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   795      if (Ifx_Shell_parseToken(argsPtr, buffer, Ifx_COUNTOF(buffer)) == FALSE)
	lea	a5,[a10]4
.L893:
	mov	d4,#32
	call	Ifx_Shell_parseToken
.L894:
	jne	d2,#0,.L131
.L1238:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   796      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   797          result = FALSE;
	mov	d8,#0
	j	.L132
.L131:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   798      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   799      else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   800      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   801          result = (buffer[0] != IFX_SHELL_NULL_CHAR) && (sscanf(buffer, "%x ", (unsigned int *)address) == 1);
	ld.bu	d15,[a10]4
.L1239:
	mov	d8,#0
.L896:
	jeq	d15,#0,.L133
.L1240:
	st.a	[a10],a15
.L1241:
	lea	a4,[a10]4
.L1242:
	lea	a5,.23.str
	call	sscanf
.L1243:
	eq	d15,d2,#1
.L1244:
	cmov	d8,d15,#1
.L133:
.L132:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   802      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   803  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   804      return result;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   805  }
	mov	d2,d8
	ret
.L565:
	
__Ifx_Shell_parseAddress_function_end:
	.size	Ifx_Shell_parseAddress,__Ifx_Shell_parseAddress_function_end-Ifx_Shell_parseAddress
.L386:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_parseSInt32',code,cluster('Ifx_Shell_parseSInt32')
	.sect	'.text.Ifx_Shell.Ifx_Shell_parseSInt32'
	.align	2
	
	.global	Ifx_Shell_parseSInt32

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   806  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   807  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   808  boolean Ifx_Shell_parseSInt32(pchar *argsPtr, sint32 *value)
; Function Ifx_Shell_parseSInt32
.L304:
Ifx_Shell_parseSInt32:	.type	func
	sub.a	a10,#8
.L897:
	mov.aa	a15,a5
.L900:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   809  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   810      sint64  value64;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   811      boolean result;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   812  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   813      *value = 0;
	mov	d15,#0
	st.w	[a15],d15
.L1249:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   814  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   815      if (Ifx_Shell_parseSInt64(argsPtr, &value64) == FALSE)
	mov.aa	a5,a10
.L899:
	call	Ifx_Shell_parseSInt64
.L898:
	jne	d2,#0,.L136
.L1250:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   816      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   817          result = FALSE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   818      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   819      else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   820      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   821          *value = (sint32)value64;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   822          result = TRUE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   823      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   824  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   825      return result;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   826  }
	ret
.L136:
	ld.d	e0,[a10]0
.L1251:
	st.w	[a15],d0
.L1252:
	mov	d2,#1
	ret
.L572:
	
__Ifx_Shell_parseSInt32_function_end:
	.size	Ifx_Shell_parseSInt32,__Ifx_Shell_parseSInt32_function_end-Ifx_Shell_parseSInt32
.L391:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_parseUInt32',code,cluster('Ifx_Shell_parseUInt32')
	.sect	'.text.Ifx_Shell.Ifx_Shell_parseUInt32'
	.align	2
	
	.global	Ifx_Shell_parseUInt32

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   827  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   828  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   829  boolean Ifx_Shell_parseUInt32(pchar *argsPtr, uint32 *value, boolean hex)
; Function Ifx_Shell_parseUInt32
.L306:
Ifx_Shell_parseUInt32:	.type	func
	sub.a	a10,#8
.L901:
	mov.aa	a15,a5
.L904:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   830  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   831      uint64  value64;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   832      boolean result;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   833  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   834      *value = 0;
	mov	d15,#0
	st.w	[a15],d15
.L1257:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   835  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   836      if (Ifx_Shell_parseUInt64(argsPtr, &value64, hex) == FALSE)
	mov.aa	a5,a10
.L903:
	call	Ifx_Shell_parseUInt64
.L902:
	jne	d2,#0,.L139
.L1258:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   837      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   838          result = FALSE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   839      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   840      else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   841      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   842          *value = (uint32)value64;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   843          result = TRUE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   844      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   845  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   846      return result;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   847  }
	ret
.L139:
	ld.d	e0,[a10]0
.L1259:
	st.w	[a15],d0
.L1260:
	mov	d2,#1
	ret
.L579:
	
__Ifx_Shell_parseUInt32_function_end:
	.size	Ifx_Shell_parseUInt32,__Ifx_Shell_parseUInt32_function_end-Ifx_Shell_parseUInt32
.L396:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_parseSInt64',code,cluster('Ifx_Shell_parseSInt64')
	.sect	'.text.Ifx_Shell.Ifx_Shell_parseSInt64'
	.align	2
	
	.global	Ifx_Shell_parseSInt64

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   848  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   849  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   850  boolean Ifx_Shell_parseSInt64(pchar *argsPtr, sint64 *value)
; Function Ifx_Shell_parseSInt64
.L308:
Ifx_Shell_parseSInt64:	.type	func
	sub.a	a10,#72
.L905:
	mov.aa	a15,a5
.L908:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   851  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   852      char    buffer[64];
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   853      boolean result;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   854  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   855      *value = 0;
	mov	e0,#0
	st.d	[a15]0,e0
.L1265:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   856  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   857      if (Ifx_Shell_parseToken(argsPtr, buffer, Ifx_COUNTOF(buffer)) == FALSE)
	lea	a5,[a10]4
.L907:
	mov	d4,#64
	call	Ifx_Shell_parseToken
.L906:
	jne	d2,#0,.L142
.L1266:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   858      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   859          result = FALSE;
	mov	d8,#0
	j	.L143
.L142:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   860      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   861      else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   862      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   863          result = (buffer[0] != IFX_SHELL_NULL_CHAR) && (sscanf(buffer, IFX_SHELL_LLD, value) == 1);
	ld.bu	d15,[a10]4
.L1267:
	mov	d8,#0
.L909:
	jeq	d15,#0,.L144
.L1268:
	st.a	[a10],a15
.L1269:
	lea	a4,[a10]4
.L1270:
	lea	a5,.24.str
	call	sscanf
.L1271:
	eq	d15,d2,#1
.L1272:
	cmov	d8,d15,#1
.L144:
.L143:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   864      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   865  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   866      return result;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   867  }
	mov	d2,d8
	ret
.L587:
	
__Ifx_Shell_parseSInt64_function_end:
	.size	Ifx_Shell_parseSInt64,__Ifx_Shell_parseSInt64_function_end-Ifx_Shell_parseSInt64
.L401:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_parseUInt64',code,cluster('Ifx_Shell_parseUInt64')
	.sect	'.text.Ifx_Shell.Ifx_Shell_parseUInt64'
	.align	2
	
	.global	Ifx_Shell_parseUInt64

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   868  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   869  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   870  boolean Ifx_Shell_parseUInt64(pchar *argsPtr, uint64 *value, boolean hex)
; Function Ifx_Shell_parseUInt64
.L310:
Ifx_Shell_parseUInt64:	.type	func
	mov	d8,d4
	sub.a	a10,#72
.L910:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   871  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   872      char    buffer[64];
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   873      boolean result;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   874  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   875      *value = 0;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   876  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   877      if (Ifx_Shell_parseToken(argsPtr, buffer, Ifx_COUNTOF(buffer)) == FALSE)
	mov	d4,#64
	mov.aa	a15,a5
.L912:
	mov	e0,#0
	st.d	[a15]0,e0
.L1277:
	lea	a5,[a10]4
.L913:
	call	Ifx_Shell_parseToken
.L911:
	jne	d2,#0,.L147
.L1278:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   878      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   879          result = FALSE;
	mov	d8,#0
	j	.L148
.L147:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   880      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   881      else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   882      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   883          char *bufferPointer = buffer;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   884  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   885          if ((buffer[0] == '0') && (buffer[1] == 'x'))
	mov	d15,#48
	ld.b	d0,[a10]4
.L1279:
	lea	a4,[a10]4
.L915:
	jne	d15,d0,.L149
.L1280:
	ld.b	d0,[a10]5
.L1281:
	mov	d15,#120
.L1282:
	jne	d15,d0,.L150
.L1283:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   886          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   887              bufferPointer = &bufferPointer[2];
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   888              hex           = TRUE;
	mov	d8,#1
	lea	a4,[a10]6
.L150:
.L149:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   889          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   890  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   891          if (hex != FALSE)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   892          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   893              result = (bufferPointer[0] != IFX_SHELL_NULL_CHAR) && (sscanf(bufferPointer, IFX_SHELL_LLX, value) == 1);
	ld.b	d15,[a4]0
.L1284:
	jeq	d8,#0,.L151
.L1285:
	mov	d8,#0
.L914:
	jeq	d15,#0,.L154
.L1286:
	st.a	[a10],a15
.L1287:
	lea	a5,.25.str
	call	sscanf
.L916:
	eq	d15,d2,#1
.L1288:
	cmov	d8,d15,#1
	j	.L154
.L151:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   894          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   895          else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   896          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   897              result = (bufferPointer[0] != IFX_SHELL_NULL_CHAR) && (sscanf(bufferPointer, IFX_SHELL_LLU, value) == 1);
	jeq	d15,#0,.L155
.L1289:
	st.a	[a10],a15
.L1290:
	lea	a5,.26.str
	call	sscanf
.L917:
	eq	d15,d2,#1
.L918:
	cmov	d8,d15,#1
.L155:
.L154:
.L148:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   898          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   899      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   900  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   901      return result;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   902  }
	mov	d2,d8
	ret
.L594:
	
__Ifx_Shell_parseUInt64_function_end:
	.size	Ifx_Shell_parseUInt64,__Ifx_Shell_parseUInt64_function_end-Ifx_Shell_parseUInt64
.L406:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_parseFloat64',code,cluster('Ifx_Shell_parseFloat64')
	.sect	'.text.Ifx_Shell.Ifx_Shell_parseFloat64'
	.align	2
	
	.global	Ifx_Shell_parseFloat64

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   903  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   904  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   905  boolean Ifx_Shell_parseFloat64(pchar *argsPtr, float64 *value)
; Function Ifx_Shell_parseFloat64
.L312:
Ifx_Shell_parseFloat64:	.type	func
	sub.a	a10,#72
.L919:
	mov.aa	a15,a5
.L922:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   906  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   907      char    buffer[64];
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   908      boolean result;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   909  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   910      *value = 0;
	mov	d15,#0
	st.w	[a15],d15
.L1295:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   911  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   912      if (Ifx_Shell_parseToken(argsPtr, buffer, Ifx_COUNTOF(buffer)) == FALSE)
	lea	a5,[a10]4
.L921:
	mov	d4,#64
	call	Ifx_Shell_parseToken
.L920:
	jne	d2,#0,.L158
.L1296:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   913      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   914          result = FALSE;
	mov	d8,#0
	j	.L159
.L158:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   915      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   916      else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   917      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   918          result = (buffer[0] != IFX_SHELL_NULL_CHAR) && (sscanf(buffer, "%lf ", value) == 1);
	ld.bu	d15,[a10]4
.L1297:
	mov	d8,#0
.L923:
	jeq	d15,#0,.L160
.L1298:
	st.a	[a10],a15
.L1299:
	lea	a4,[a10]4
.L1300:
	lea	a5,.27.str
	call	sscanf
.L1301:
	eq	d15,d2,#1
.L1302:
	cmov	d8,d15,#1
.L160:
.L159:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   919      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   920  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   921      return result;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   922  }
	mov	d2,d8
	ret
.L602:
	
__Ifx_Shell_parseFloat64_function_end:
	.size	Ifx_Shell_parseFloat64,__Ifx_Shell_parseFloat64_function_end-Ifx_Shell_parseFloat64
.L411:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_parseFloat32',code,cluster('Ifx_Shell_parseFloat32')
	.sect	'.text.Ifx_Shell.Ifx_Shell_parseFloat32'
	.align	2
	
	.global	Ifx_Shell_parseFloat32

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   923  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   924  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   925  boolean Ifx_Shell_parseFloat32(pchar *argsPtr, float32 *value)
; Function Ifx_Shell_parseFloat32
.L314:
Ifx_Shell_parseFloat32:	.type	func
	sub.a	a10,#72
.L924:
	mov.aa	a15,a5
.L927:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   926  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   927      char    buffer[64];
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   928      boolean result;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   929  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   930      *value = 0;
	mov	d15,#0
	st.w	[a15],d15
.L1307:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   931  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   932      if (Ifx_Shell_parseToken(argsPtr, buffer, Ifx_COUNTOF(buffer)) == FALSE)
	lea	a5,[a10]4
.L926:
	mov	d4,#64
	call	Ifx_Shell_parseToken
.L925:
	jne	d2,#0,.L163
.L1308:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   933      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   934          result = FALSE;
	mov	d8,#0
	j	.L164
.L163:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   935      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   936      else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   937      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   938          result = (buffer[0] != IFX_SHELL_NULL_CHAR) && (sscanf(buffer, "%f ", value) == 1);
	ld.bu	d15,[a10]4
.L1309:
	mov	d8,#0
.L928:
	jeq	d15,#0,.L165
.L1310:
	st.a	[a10],a15
.L1311:
	lea	a4,[a10]4
.L1312:
	lea	a5,.28.str
	call	sscanf
.L1313:
	eq	d15,d2,#1
.L1314:
	cmov	d8,d15,#1
.L165:
.L164:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   939      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   940  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   941      return result;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   942  }
	mov	d2,d8
	ret
.L608:
	
__Ifx_Shell_parseFloat32_function_end:
	.size	Ifx_Shell_parseFloat32,__Ifx_Shell_parseFloat32_function_end-Ifx_Shell_parseFloat32
.L416:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_commandFind',code,cluster('Ifx_Shell_commandFind')
	.sect	'.text.Ifx_Shell.Ifx_Shell_commandFind'
	.align	2
	
	.global	Ifx_Shell_commandFind

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   943  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   944  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   945  const Ifx_Shell_Command *Ifx_Shell_commandFind(Ifx_Shell_CommandListConst commandList, pchar commandLine, pchar *args, uint32 *match)
; Function Ifx_Shell_commandFind
.L316:
Ifx_Shell_commandFind:	.type	func

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   946  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   947      const Ifx_Shell_Command *command     = commandList;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   948      const Ifx_Shell_Command *result      = NULL_PTR;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   949      pchar                    cmdLineTemp = commandLine;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   950      uint32                   matchInit   = 0;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   951      uint32                   index       = 0;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   952  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   953      boolean                  hasPrefix;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   954  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   955      hasPrefix = (command->commandLine != NULL_PTR) && (command->call == NULL_PTR);
	mov	d9,#0
	ld.w	d15,[a4]
.L930:
	mov	e10,d9,d9
	lea	a10,[a10]-272
.L929:
	st.a	[a10]264,a6
.L931:
	mov.aa	a12,a7
.L932:
	mov.aa	a13,a4
.L933:
	mov.aa	a15,a5
.L934:
	mov.a	a14,#0
.L935:
	jeq	d15,#0,.L168
.L1319:
	ld.w	d15,[a4]12
.L936:
	cmovn	d11,d15,#1
.L168:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   956      *match    = 0;
	mov	d0,d9
	st.w	[a12],d0
.L937:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   957  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   958      while (command->commandLine != NULL_PTR)
	j	.L170
.L171:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   959      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   960          pchar  commandTemp     = command->commandLine;
	ld.a	a2,[a13]
.L1320:
	st.a	[a10],a2
.L1321:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   961          pchar  commandLineTemp = cmdLineTemp;
	st.a	[a10]4,a15
.L1322:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   962          char   buffer[256];
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   963          uint32 matchCount      = matchInit;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   964  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   965          while (Ifx_Shell_matchCommand(&commandLineTemp, &commandTemp) != FALSE)
	mov	d8,d9
	j	.L172
.L173:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   966          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   967              matchCount++;
	add	d8,#1
.L172:
	lea	a4,[a10]4
.L1323:
	mov.aa	a5,a10
	call	Ifx_Shell_matchCommand
.L1324:
	jne	d2,#0,.L173
.L1325:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   968          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   969  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   970          if ((matchCount > *match) && (Ifx_Shell_parseToken(&commandTemp, buffer, Ifx_COUNTOF(buffer)) == FALSE))
	ld.w	d0,[a12]
.L1326:
	jge.u	d0,d8,.L174
.L1327:
	mov.aa	a4,a10
.L1328:
	lea	a5,[a10]8
.L1329:
	mov	d4,#256
	call	Ifx_Shell_parseToken
.L1330:
	jne	d2,#0,.L175
.L938:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   971          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   972              if ((index == 0) && (command->call == NULL_PTR))
	jne	d10,#0,.L176
.L939:
	ld.w	d15,[a13]12
.L1331:
	jne	d15,#0,.L177
.L1332:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   973              {   /* List has a prefix */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   974                  cmdLineTemp = commandLineTemp;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   975                  matchInit   = matchCount;
	mov	d9,d8
	ld.a	a15,[a10]4
.L177:
.L176:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   976              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   977  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   978              *match = matchCount;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   979              *args  = commandLineTemp;
	ld.a	a2,[a10]264
.L940:
	st.w	[a12],d8
.L1333:
	ld.a	a4,[a10]4
.L1334:
	st.a	[a2],a4
.L1335:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   980              result = command;
	mov.aa	a14,a13
.L1336:
	j	.L178
.L175:
.L174:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   981          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   982          else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   983          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   984              if ((index == 0) && hasPrefix)
	jne	d10,#0,.L179
.L941:
	jne	d11,#0,.L180
.L179:
.L178:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   985              {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   986                  /* Prefix does not match */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   987                  break;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   988              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   989          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   990  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   991          command = &command[1];
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   992  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   993          index++;
	add	d10,#1
	lea	a13,[a13]16
.L170:
	ld.w	d15,[a13]
.L1337:
	jne	d15,#0,.L171

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   994      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   995  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   996      return result;
.L180:
	mov.aa	a2,a14
.L942:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   997  }
	ret
.L615:
	
__Ifx_Shell_commandFind_function_end:
	.size	Ifx_Shell_commandFind,__Ifx_Shell_commandFind_function_end-Ifx_Shell_commandFind
.L421:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_commandListFind',code,cluster('Ifx_Shell_commandListFind')
	.sect	'.text.Ifx_Shell.Ifx_Shell_commandListFind'
	.align	2
	
	.global	Ifx_Shell_commandListFind

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   998  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	   999  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1000  const Ifx_Shell_Command *Ifx_Shell_commandListFind(Ifx_Shell *shell, pchar commandLine, pchar *args, Ifx_Shell_CommandListConst *commandList)
; Function Ifx_Shell_commandListFind
.L318:
Ifx_Shell_commandListFind:	.type	func
	mov.aa	a15,a4
.L947:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1001  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1002      int                      i;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1003      const Ifx_Shell_Command *shellCommand = NULL_PTR;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1004      const Ifx_Shell_Command *Command      = NULL_PTR;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1005      uint32                   matchMax     = 0;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1006      uint32                   match;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1007  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1008      for (i = 0; i < IFX_CFG_SHELL_COMMAND_LISTS; i++)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1009      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1010          if (shell->commandList[i] != NULL_PTR)
	ld.a	a4,[a15]324
.L946:
	mov.aa	a12,a7
.L949:
	sub.a	a10,#8
.L943:
	mov.a	a13,#0
.L950:
	jz.a	a4,.L182
.L1537:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1011          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1012              shellCommand = Ifx_Shell_commandFind(shell->commandList[i], commandLine, args, &match);
	mov.aa	a7,a10
.L945:
	call	Ifx_Shell_commandFind
.L944:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1013  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1014              if ((shellCommand != NULL_PTR) && (match > matchMax))
	jz.a	a2,.L183
.L1538:
	ld.w	d15,[a10]
.L1539:
	jeq	d15,#0,.L184
.L1540:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1015              {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1016                  matchMax     = match;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1017                  Command      = shellCommand;
	mov.aa	a13,a2
.L1541:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1018                  *commandList = shell->commandList[i];
	ld.a	a15,[a15]324
.L948:
	st.a	[a12],a15
.L184:
.L183:
.L182:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1019              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1020          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1021      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1022  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1023      return Command;
	mov.aa	a2,a13
.L951:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1024  }
	ret
.L726:
	
__Ifx_Shell_commandListFind_function_end:
	.size	Ifx_Shell_commandListFind,__Ifx_Shell_commandListFind_function_end-Ifx_Shell_commandListFind
.L461:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_execute',code,cluster('Ifx_Shell_execute')
	.sect	'.text.Ifx_Shell.Ifx_Shell_execute'
	.align	2
	
	.global	Ifx_Shell_execute

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1025  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1026  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1027  void Ifx_Shell_execute(Ifx_Shell *shell, pchar commandLine)
; Function Ifx_Shell_execute
.L320:
Ifx_Shell_execute:	.type	func
	sub.a	a10,#16
.L952:
	mov.aa	a15,a4
.L954:
	mov.aa	a12,a5
.L955:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1028  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1029      pchar                      args         = NULL_PTR;
	mov.a	a2,#0
.L1424:
	st.a	[a10]4,a2
.L1425:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1030      Ifx_Shell_CommandListConst commandList;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1031      const Ifx_Shell_Command   *shellCommand = Ifx_Shell_commandListFind(shell, commandLine, &args, &commandList);
	lea	a6,[a10]4
.L1426:
	lea	a7,[a10]8
	call	Ifx_Shell_commandListFind
.L953:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1032  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1033      if (shellCommand != NULL_PTR)
	jz.a	a2,.L186
.L1427:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1034      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1035          if (shellCommand->call == NULL_PTR)
	ld.a	a7,[a2]12
.L1428:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1036          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1037              Ifx_Shell_showHelp(commandLine, shell, shell->io);
	ld.a	a6,[a15]
.L1429:
	jnz.a	a7,.L187
.L1430:
	mov.aa	a4,a12
.L957:
	mov.aa	a5,a15
.L958:
	j	Ifx_Shell_showHelp
.L187:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1038          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1039          else if (shellCommand->call(args, shellCommand->data, shell->io) != FALSE)
	ld.a	a4,[a10]4
.L1431:
	ld.a	a5,[a2]8
.L1432:
	calli	a7
.L956:
	jeq	d2,#0,.L189
.L1433:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1040          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1041              if (shell->control.sendResultCode != 0)
	ld.bu	d15,[a15]4
.L1434:
	jz.t	d15:2,.L190
.L1435:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1042              {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1043                  Ifx_Shell_writeResult(shell, Ifx_Shell_ResultCode_ok);
	mov	d4,#255
	j	.L191
.L189:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1044              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1045          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1046          else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1047          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1048              if (shell->control.sendResultCode != 0)
	ld.bu	d15,[a15]4
.L1436:
	jz.t	d15:2,.L192
.L1437:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1049              {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1050                  Ifx_Shell_writeResult(shell, Ifx_Shell_ResultCode_nok);
	mov	d4,#129
	j	.L193
.L192:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1051              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1052              else if (shell->control.echoError != 0)
	jz.t	d15:4,.L194
.L1438:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1053              {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1054                  IfxStdIf_DPipe_print(shell->io, "\r\nShell command error: %s" ENDL, commandLine);
	movh.a	a5,#@his(.29.str)
	lea	a5,[a5]@los(.29.str)
.L1439:
	j	.L195
.L186:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1055              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1056              else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1057              {}
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1058          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1059      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1060      else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1061      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1062          if (commandLine[0] != IFX_SHELL_NULL_CHAR)
	ld.bu	d15,[a12]
.L1440:
	jeq	d15,#0,.L196
.L1441:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1063          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1064              if (shell->control.sendResultCode != 0)
	ld.bu	d15,[a15]4
.L1442:
	jz.t	d15:2,.L197
.L1443:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1065              {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1066                  Ifx_Shell_writeResult(shell, Ifx_Shell_ResultCode_unknown);
	mov	d4,#128
.L191:
.L193:
	mov.aa	a4,a15
.L959:
	j	Ifx_Shell_writeResult
.L197:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1067              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1068              else if (shell->control.echoError != 0)
	jz.t	d15:4,.L199
.L1444:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1069              {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1070                  IfxStdIf_DPipe_print(shell->io, "\r\nUnknown command: %s" ENDL, commandLine);
	movh.a	a5,#@his(.30.str)
	lea	a5,[a5]@los(.30.str)
.L195:
	ld.a	a4,[a15]
.L1445:
	st.a	[a10],a12
.L1446:
	j	IfxStdIf_DPipe_print
.L199:
.L196:
.L194:
.L190:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1071              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1072              else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1073              {}
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1074          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1075      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1076  }
	ret
.L684:
	
__Ifx_Shell_execute_function_end:
	.size	Ifx_Shell_execute,__Ifx_Shell_execute_function_end-Ifx_Shell_execute
.L451:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_cmdEscapeProcess',code,cluster('Ifx_Shell_cmdEscapeProcess')
	.sect	'.text.Ifx_Shell.Ifx_Shell_cmdEscapeProcess'
	.align	2
	
	.global	Ifx_Shell_cmdEscapeProcess

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1077  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1078  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1079  /****************************************************************************************/
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1080  /* Processes escape sequences, including handling command history.                      */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1081  /* The following escape sequences (prefix "ESC [") are supported:                       */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1082  /* A - up     B - down      C - right     D - left                                      */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1083  /* 1~ - HOME  2~ - INSERT   3~ - DELETE   4~ - END                                      */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1084  /*                                                                                      */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1085  /* Parameters:                                                                          */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1086  /*      EscapeChar1 - First character to follow ESC [                                   */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1087  /*      EscapeChar2 - Second character following ESC [ , if applicable                  */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1088  /*                                                                                      */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1089  /****************************************************************************************/
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1090  void Ifx_Shell_cmdEscapeProcess(Ifx_Shell *shell, char EscapeChar1, char EscapeChar2)
; Function Ifx_Shell_cmdEscapeProcess
.L322:
Ifx_Shell_cmdEscapeProcess:	.type	func
	sub.a	a10,#8
.L960:
	mov.aa	a15,a4
.L961:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1091  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1092      Ifx_Shell_CmdLine *Cmd    = NULL_PTR; /* Command line editing state */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1093      char              *cmdStr = NULL_PTR; /* Cached pointer to command line being edited */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1094      sint32             i      = 0;        /* Loop variable */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1095  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1096      /* Validate parameters */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1097      boolean            result = (shell != NULL_PTR);
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1098  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1099      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, result != FALSE);
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1100  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1101      if (result == FALSE)
	mov	e8,d5,d4
	jz.a	a15,.L200
.L1451:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1102      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1103          return;                 /* ERROR CASE - no thread data available! */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1104      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1105  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1106      /* Cache command state and command line pointer */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1107      Cmd    = &shell->cmd;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1108      cmdStr = Cmd->cmdStr;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1109  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1110      /* Validate command line state */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1111      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, cmdStr != NULL_PTR);
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1112      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, Cmd->cursor < IFX_CFG_SHELL_CMD_LINE_SIZE);
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1113      IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, Cmd->length < IFX_CFG_SHELL_CMD_LINE_SIZE);
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1114  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1115      /* Switch on first character after ESC [ */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1116      switch (EscapeChar1)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1117      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1118      case 'A':                  /* Up arrow */
	mov	d15,#65
	ld.a	a12,[a15]48
.L962:
	jeq	d15,d8,.L201
.L963:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1119  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1120          if (Cmd->historyItem == IFX_SHELL_CMD_HISTORY_NO_ITEM)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1121          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1122              /* Not using list at the moment - take most recent item [0] */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1123              Cmd->historyItem = 0;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1124          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1125          else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1126          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1127              if (Cmd->historyItem < (IFX_CFG_SHELL_CMD_HISTORY_SIZE - 1))
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1128              {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1129                  /* If not already at oldest, go back one in list */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1130                  Cmd->historyItem++;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1131              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1132          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1133  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1134          /* Copy text into buffer */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1135          strncpy(cmdStr, shell->cmdHistory[Cmd->historyItem], IFX_CFG_SHELL_CMD_LINE_SIZE);
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1136  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1137          /* echo to screen if requested */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1138          if (shell->control.echo != 0)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1139          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1140              IFX_SHELL_WRITE_BACKSPACES(Cmd->cursor)  /* Move cursor back to start */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1141              IFX_SHELL_WRITE_SPACES(Cmd->length)      /* Overwrite text with spaces */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1142              IFX_SHELL_WRITE_BACKSPACES(Cmd->length)  /* Move cursor back to start */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1143              IfxStdIf_DPipe_print(shell->io, cmdStr); /* Copy buffer to screen */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1144          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1145  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1146          Cmd->cursor     = (Ifx_SizeT)strlen(cmdStr); /* Store cursor position */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1147          Cmd->length     = Cmd->cursor;               /* Store command line length */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1148          Cmd->historyAdd = FALSE;                     /* Don't add back to history unless modified */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1149          break;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1150  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1151      case 'B':                                        /* Down arrow */
	mov	d15,#66
.L964:
	jeq	d15,d8,.L202
.L965:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1152  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1153          if ((Cmd->historyItem == IFX_SHELL_CMD_HISTORY_NO_ITEM) || (Cmd->historyItem == 0))
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1154          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1155              /* Not using list at the moment, or have dropped off the end - just clear command line */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1156              if (shell->control.echo != 0)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1157              {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1158                  IFX_SHELL_WRITE_BACKSPACES(Cmd->cursor)       /* Move cursor back to start */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1159                  IFX_SHELL_WRITE_SPACES(Cmd->length)           /* Overwrite text with spaces */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1160                  IFX_SHELL_WRITE_BACKSPACES(Cmd->length)       /* Move cursor back to start */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1161              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1162  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1163              Cmd->length      = 0;                             /* Reset command line length */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1164              Cmd->cursor      = 0;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1165              Cmd->historyItem = IFX_SHELL_CMD_HISTORY_NO_ITEM; /* Ensure we are not using list */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1166          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1167          else
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1168          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1169              /* Within list - move to more recent entry */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1170              Cmd->historyItem--;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1171  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1172              /* Copy text into buffer */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1173              strncpy(cmdStr, shell->cmdHistory[Cmd->historyItem], IFX_CFG_SHELL_CMD_LINE_SIZE);
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1174  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1175              if (shell->control.echo != 0)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1176              {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1177                  IFX_SHELL_WRITE_BACKSPACES(Cmd->cursor)  /* Move cursor back to start */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1178                  IFX_SHELL_WRITE_SPACES(Cmd->length)      /* Overwrite text with spaces */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1179                  IFX_SHELL_WRITE_BACKSPACES(Cmd->length)  /* Move cursor back to start */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1180                  IfxStdIf_DPipe_print(shell->io, cmdStr); /* Copy buffer to screen */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1181              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1182  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1183              Cmd->cursor = (Ifx_SizeT)strlen(cmdStr);     /* Store cursor position */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1184              Cmd->length = Cmd->cursor;                   /* Store command line length */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1185          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1186  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1187          Cmd->historyAdd = FALSE;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1188          break;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1189  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1190      case 'C':                  /* Right arrow */
	mov	d15,#67
.L966:
	jeq	d15,d8,.L203
.L967:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1191  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1192          if (Cmd->cursor < Cmd->length)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1193          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1194              /* Move cursor one place to right */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1195              IFX_SHELL_IF_ECHO(IfxStdIf_DPipe_print(shell->io, "%c", cmdStr[Cmd->cursor])) Cmd->cursor++;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1196          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1197  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1198          break;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1199  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1200      case 'D':                  /* Left arrow */
	mov	d15,#68
.L968:
	jeq	d15,d8,.L204
.L969:
	j	.L205
.L201:
	ld.h	d15,[a15]58
.L1452:
	jne	d15,#-1,.L206
.L1453:
	mov	d0,#0
	st.h	[a15]58,d0
.L1454:
	j	.L207
.L206:
	mov	d0,#9
.L1455:
	jge	d15,d0,.L208
.L1456:
	add	d15,#1
	st.h	[a15]58,d15
.L208:
.L207:
	fcall	.cocofun_35
.L971:
	call	strncpy
.L972:
	ld.bu	d15,[a15]4
.L1457:
	jz.t	d15:3,.L209
.L700:
	mov	d15,#0
	j	.L210
.L211:
	fcall	.cocofun_34
.L973:
	call	IfxStdIf_DPipe_print
	add	d15,#1
.L210:
	ld.h	d0,[a15]52
	jlt	d15,d0,.L211
.L701:
	mov	d15,#0
	j	.L212
.L213:
	ld.a	a4,[a15]
	lea	a5,.22.str
	call	IfxStdIf_DPipe_print
	add	d15,#1
.L212:
	ld.h	d0,[a15]54
	jlt	d15,d0,.L213
.L703:
	mov	d15,#0
	j	.L214
.L215:
	fcall	.cocofun_34
.L974:
	call	IfxStdIf_DPipe_print
	add	d15,#1
.L214:
	ld.h	d0,[a15]54
	jlt	d15,d0,.L215
.L705:
	j	.L216
.L202:
	ld.h	d15,[a15]58
.L1458:
	jeq	d15,#-1,.L217
.L1459:
	jne	d15,#0,.L218
.L217:
	ld.bu	d15,[a15]4
.L1460:
	jz.t	d15:3,.L219
.L707:
	mov	d15,#0
	j	.L220
.L221:
	fcall	.cocofun_34
.L975:
	call	IfxStdIf_DPipe_print
	add	d15,#1
.L220:
	ld.h	d0,[a15]52
	jlt	d15,d0,.L221
.L708:
	mov	d15,#0
	j	.L222
.L223:
	ld.a	a4,[a15]
	lea	a5,.22.str
	call	IfxStdIf_DPipe_print
	add	d15,#1
.L222:
	ld.h	d0,[a15]54
	jlt	d15,d0,.L223
.L710:
	mov	d15,#0
	j	.L224
.L225:
	fcall	.cocofun_34
.L976:
	call	IfxStdIf_DPipe_print
	add	d15,#1
.L224:
	ld.h	d0,[a15]54
	jlt	d15,d0,.L225
.L219:
	mov	d15,#0
	st.h	[a15]54,d15
.L1461:
	st.h	[a15]52,d15
.L1462:
	mov	d15,#-1
	st.h	[a15]58,d15
.L1463:
	j	.L226
.L218:
	add	d15,#-1
	st.h	[a15]58,d15
.L977:
	fcall	.cocofun_35
.L979:
	call	strncpy
.L980:
	ld.bu	d15,[a15]4
.L1464:
	jz.t	d15:3,.L227
.L713:
	mov	d15,#0
	j	.L228
.L229:
	fcall	.cocofun_34
.L981:
	call	IfxStdIf_DPipe_print
	add	d15,#1
.L228:
	ld.h	d0,[a15]52
	jlt	d15,d0,.L229
.L714:
	mov	d15,#0
	j	.L230
.L231:
	ld.a	a4,[a15]
	lea	a5,.22.str
	call	IfxStdIf_DPipe_print
	add	d15,#1
.L230:
	ld.h	d0,[a15]54
	jlt	d15,d0,.L231
.L716:
	mov	d15,#0
	j	.L232
.L233:
	fcall	.cocofun_34
.L982:
	call	IfxStdIf_DPipe_print
	add	d15,#1
.L232:
	ld.h	d0,[a15]54
	jlt	d15,d0,.L233

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1201  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1202          if (Cmd->cursor > 0)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1203          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1204              /* Move cursor one place to left */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1205              IFX_SHELL_IF_ECHO(IfxStdIf_DPipe_print(shell->io, "\b")) Cmd->cursor--;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1206          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1207  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1208          break;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1209  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1210      default:
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1211          break;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1212      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1213  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1214      /* If second character after ESC [ is ~ then switch on number */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1215      if (EscapeChar2 == '~')
.L216:
	ld.a	a4,[a15]
.L1465:
	mov.aa	a5,a12
.L983:
	call	IfxStdIf_DPipe_print
.L227:
.L209:
	mov.aa	a4,a12
.L984:
	call	strlen
.L985:
	st.h	[a15]52,d2
.L1466:
	ld.h	d15,[a15]52
.L1467:
	st.h	[a15]54,d15
.L226:
	mov	d15,#0
	st.b	[a15]56,d15
.L1468:
	j	.L234
.L203:
	ld.h	d0,[a15]52
.L1469:
	ld.h	d15,[a15]54
.L1470:
	jge	d0,d15,.L235
.L1471:
	ld.bu	d15,[a15]4
	jz.t	d15:3,.L236
	addsc.a	a2,a12,d0,#0
	ld.a	a4,[a15]
.L986:
	ld.b	d15,[a2]0
	st.w	[a10],d15
	lea	a5,.21.str
	call	IfxStdIf_DPipe_print
.L236:
	ld.h	d15,[a15]52
.L1472:
	add	d15,#1
	j	.L237
.L204:
	ld.h	d15,[a15]52
.L1473:
	jlt	d15,#1,.L238
.L1474:
	ld.bu	d15,[a15]4
	jz.t	d15:3,.L239
	fcall	.cocofun_34
.L987:
	call	IfxStdIf_DPipe_print
.L239:
	ld.h	d15,[a15]52
.L1475:
	add	d15,#-1
.L237:
	st.h	[a15]52,d15
.L238:
.L235:
.L234:
.L205:
	mov	d15,#126
.L989:
	jne	d15,d9,.L240
.L990:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1216      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1217          switch (EscapeChar1)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1218          {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1219          case '1':              /* HOME - move to start of buffer */
	mov	d15,#49
.L991:
	jeq	d15,d8,.L241
.L992:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1220  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1221              if (Cmd->cursor > 0)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1222              {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1223                  IFX_SHELL_WRITE_BACKSPACES(Cmd->cursor) Cmd->cursor = 0;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1224              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1225  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1226              break;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1227  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1228          case '2':              /* INSERT - insert blank character at cursor and move all remaining characters right one */
	mov	d15,#50
.L993:
	jeq	d15,d8,.L242
.L994:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1229  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1230              if ((Cmd->cursor < Cmd->length) && (Cmd->length < (IFX_CFG_SHELL_CMD_LINE_SIZE - 1)))
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1231              {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1232                  /* Update on screen */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1233                  if (shell->control.echo != FALSE)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1234                  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1235                      /* write over duplicated character at cursor */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1236                      IfxStdIf_DPipe_print(shell->io, " ");
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1237  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1238                      /* Update line with new characters */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1239                      for (i = Cmd->cursor; i < Cmd->length; i++)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1240                      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1241                          IfxStdIf_DPipe_print(shell->io, "%c", cmdStr[i]);
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1242                      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1243  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1244                      /* Move cursor back to new place */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1245                      IFX_SHELL_WRITE_BACKSPACES((Cmd->length + 1) - Cmd->cursor)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1246                  }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1247  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1248                  /* Update in command line variable */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1249                  for (i = Cmd->length; i > Cmd->cursor; i--)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1250                  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1251                      cmdStr[i] = cmdStr[i - 1];                 /* Shuffle text right */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1252                  }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1253  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1254                  cmdStr[Cmd->length + 1] = IFX_SHELL_NULL_CHAR; /* Terminate string at end of longer string */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1255                  cmdStr[Cmd->cursor]     = ' ';                 /* Blank character at cursor */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1256  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1257                  Cmd->length++;                                 /* Now one character longer */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1258              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1259  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1260              break;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1261  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1262          case '3':              /* DELETE - delete character to right and move all remaining characters left one */
	mov	d15,#51
.L995:
	jeq	d15,d8,.L243
.L996:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1263  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1264              if (Cmd->cursor < Cmd->length)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1265              {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1266                  /* Update on screen */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1267                  if (shell->control.echo != 0)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1268                  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1269                      for (i = Cmd->cursor; i < (Cmd->length - 1); i++)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1270                      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1271                          /* Update line with new characters */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1272                          IfxStdIf_DPipe_print(shell->io, "%c", cmdStr[i + 1]);
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1273                      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1274  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1275                      /* write over duplicated character at end */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1276                      IfxStdIf_DPipe_print(shell->io, " ");
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1277  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1278                      /* Move cursor back to right place */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1279                      IFX_SHELL_WRITE_BACKSPACES(Cmd->length - Cmd->cursor)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1280                  }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1281  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1282                  /* Update in command line variable. Shuffle text left */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1283                  strncpy(&cmdStr[Cmd->cursor], &cmdStr[Cmd->cursor + 1], Cmd->length - Cmd->cursor - 1);
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1284  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1285                  cmdStr[Cmd->length - 1] = IFX_SHELL_NULL_CHAR; /* Terminate string at end of shorter string */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1286                  Cmd->length--;                                 /* Now one character shorter */
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1287              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1288  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1289              break;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1290  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1291          case '4':              /* END - ensure cursor is at end */
	mov	d15,#52
.L997:
	jeq	d15,d8,.L266
.L240:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1292  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1293              while (Cmd->cursor < Cmd->length)
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1294              {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1295                  IFX_SHELL_IF_ECHO(IfxStdIf_DPipe_print(shell->io, "%c", cmdStr[Cmd->cursor])) Cmd->cursor++;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1296              }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1297  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1298              break;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1299  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1300          default:
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1301              break;
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1302          }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1303      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1304  }
.L200:
	ret
.L241:
	ld.h	d15,[a15]52
.L1476:
	jlt	d15,#1,.L246
.L719:
	mov	d15,#0
.L247:
	fcall	.cocofun_34
	call	IfxStdIf_DPipe_print
	add	d15,#1
	ld.h	d0,[a15]52
	jlt	d15,d0,.L247
.L720:
	mov	d15,#0
	st.h	[a15]52,d15
.L246:
	ret
.L242:
	ld.h	d0,[a15]54
.L1477:
	ld.h	d15,[a15]52
.L1478:
	jge	d15,d0,.L249
.L1479:
	mov	d15,#127
.L1480:
	jge	d0,d15,.L250
.L1481:
	ld.bu	d15,[a15]4
.L1482:
	jz.t	d15:3,.L251
.L1483:
	ld.a	a4,[a15]
.L1484:
	lea	a5,.22.str
	call	IfxStdIf_DPipe_print
.L1485:
	ld.h	d15,[a15]52
.L998:
	addsc.a	a13,a12,d15,#0
.L1486:
	j	.L252
.L253:
	ld.b	d0,[a13+]1
	st.w	[a10],d0
.L1487:
	ld.a	a4,[a15]
.L1488:
	lea	a5,.21.str
	call	IfxStdIf_DPipe_print
.L1489:
	add	d15,#1
.L252:
	ld.h	d0,[a15]54
.L1490:
	jlt	d15,d0,.L253
.L722:
	mov	d8,#0
	j	.L254
.L255:
	fcall	.cocofun_34
.L999:
	call	IfxStdIf_DPipe_print
	add	d8,#1
.L254:
	ld.h	d15,[a15]54
	ld.h	d0,[a15]52
	sub	d15,d0
	add	d15,#1
	jlt	d8,d15,.L255
.L251:
	ld.h	d15,[a15]54
.L1000:
	addsc.a	a2,a12,d15,#0
.L1491:
	j	.L256
.L257:
	add	d15,#-1
	lea	a4,[a2]-1
.L1492:
	ld.b	d0,[a2]-1
.L1493:
	st.b	[a2],d0
.L1494:
	mov.aa	a2,a4
.L256:
	ld.h	d0,[a15]52
.L1495:
	jlt	d0,d15,.L257
.L1496:
	ld.h	d15,[a15]54
.L1001:
	addsc.a	a2,a12,d15,#0
.L1497:
	mov	d15,#0
.L1498:
	st.b	[a2]1,d15
.L1499:
	ld.h	d15,[a15]52
.L1500:
	addsc.a	a2,a12,d15,#0
.L1501:
	mov	d15,#32
.L1502:
	st.b	[a2],d15
.L1503:
	ld.h	d15,[a15]54
.L1504:
	add	d15,#1
	j	.L258
.L243:
	ld.h	d0,[a15]54
.L1505:
	ld.h	d8,[a15]52
.L1002:
	jge	d8,d0,.L259
.L1506:
	ld.bu	d15,[a15]4
.L1507:
	jz.t	d15:3,.L260
.L1508:
	addsc.a	a2,a12,d8,#0
.L1509:
	add	d0,#-1
.L1510:
	lea	a13,[a2]1
.L1511:
	jge	d8,d0,.L261
.L262:
	ld.b	d15,[a13+]1
	st.w	[a10],d15
.L1512:
	ld.a	a4,[a15]
.L1513:
	lea	a5,.21.str
	call	IfxStdIf_DPipe_print
.L1514:
	ld.h	d15,[a15]54
.L1515:
	add	d8,#1
.L1516:
	add	d15,#-1
.L1517:
	jlt	d8,d15,.L262
.L261:
	lea	a5,.22.str
.L724:
	mov	d8,#0
	j	.L263
.L264:
	add	d8,#1
	lea	a5,.20.str
.L263:
	ld.a	a4,[a15]
	call	IfxStdIf_DPipe_print
	ld.h	d15,[a15]54
	ld.h	d0,[a15]52
	sub	d15,d0
	jlt	d8,d15,.L264
.L260:
	ld.h	d15,[a15]52
.L1518:
	ld.h	d0,[a15]54
.L1519:
	addsc.a	a4,a12,d15,#0
.L1520:
	sub	d0,d15
.L1521:
	lea	a5,[a4]1
.L1522:
	add	d4,d0,#-1
	call	strncpy
.L1523:
	ld.h	d15,[a15]54
.L1524:
	addsc.a	a2,a12,d15,#0
.L1525:
	mov	d15,#0
.L1526:
	st.b	[a2]-1,d15
.L1527:
	ld.h	d15,[a15]54
.L1528:
	add	d15,#-1
.L258:
	st.h	[a15]54,d15
.L259:
.L250:
.L249:
	ret
.L267:
	ld.bu	d15,[a15]4
	jz.t	d15:3,.L268
	ld.h	d15,[a15]52
	ld.a	a4,[a15]
	addsc.a	a2,a12,d15,#0
	lea	a5,.21.str
	ld.b	d15,[a2]0
	st.w	[a10],d15
	call	IfxStdIf_DPipe_print
.L268:
	ld.h	d15,[a15]52
.L1529:
	add	d15,#1
	st.h	[a15]52,d15
.L266:
	ld.h	d15,[a15]52
.L1530:
	ld.h	d0,[a15]54
.L1531:
	jlt	d15,d0,.L267
.L1532:
	ret
.L690:
	
__Ifx_Shell_cmdEscapeProcess_function_end:
	.size	Ifx_Shell_cmdEscapeProcess,__Ifx_Shell_cmdEscapeProcess_function_end-Ifx_Shell_cmdEscapeProcess
.L456:
	; End of function
	
	.sdecl	'.text.Ifx_Shell..cocofun_35',code,cluster('.cocofun_35')
	.sect	'.text.Ifx_Shell..cocofun_35'
	.align	2
; Function .cocofun_35
.L324:
.cocofun_35:	.type	func
; Function body .cocofun_35, coco_iter:0
	ld.h	d15,[a15]58
.L978:
	mov	d4,#128
	mov.aa	a4,a12
.L970:
	addsc.a	a2,a15,d15,#2
	ld.a	a5,[a2]8
.L1590:
	fret
.L491:
	; End of function
	.sdecl	'.text.Ifx_Shell..cocofun_34',code,cluster('.cocofun_34')
	.sect	'.text.Ifx_Shell..cocofun_34'
	.align	2
; Function .cocofun_34
.L326:
.cocofun_34:	.type	func
; Function body .cocofun_34, coco_iter:0
	ld.a	a4,[a15]
.L988:
	lea	a5,.20.str
.L1585:
	fret
.L486:
	; End of function
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_enable',code,cluster('Ifx_Shell_enable')
	.sect	'.text.Ifx_Shell.Ifx_Shell_enable'
	.align	2
	
	.global	Ifx_Shell_enable

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1305  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1306  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1307  void Ifx_Shell_enable(Ifx_Shell *shell)
; Function Ifx_Shell_enable
.L328:
Ifx_Shell_enable:	.type	func
	mov.aa	a15,a4
.L1004:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1308  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1309      // Clear the Rx buffer!
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1310      IfxStdIf_DPipe_clearRx(shell->io);
	ld.a	a2,[a15]
.L512:

; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     1  /**
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     2   * \file IfxStdIf_DPipe.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     3   * \brief Standard interface: Data Pipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     4   * \ingroup IfxStdIf
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     5   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     6   * \copyright Copyright (c) 2013 Infineon Technologies AG. All rights reserved.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     7   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     8   * $Date: 2014-02-27 20:08:24 GMT$
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	     9   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    10   *                                 IMPORTANT NOTICE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    11   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    13   * the company in which ordinary course of business you are acting and (ii)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    15   * of use are agreed, use of this file is subject to following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    16   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    18   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    24   * do so, all subject to the following:
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    25   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    26   * The copyright notices in the Software and this entire statement, including
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    27   * the above license grant, this restriction and the following disclaimer, must
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    28   * be included in all copies of the Software, in whole or in part, and all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    29   * derivative works of the Software, unless such copies or derivative works are
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    30   * solely in the form of machine-executable object code generated by a source
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    31   * language processor.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    32   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    39   * DEALINGS IN THE SOFTWARE.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    40   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    41   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    42   * \defgroup library_srvsw_stdif_dpipe Standard interface: Data Pipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    43   * \ingroup library_srvsw_stdif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    44   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    45   * The standard interafce data pipe (DPipe) abstract the hardware used for data transfer. It provide, after proper initialization an hardware independant way to write
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    46   * and read data to/from as communciation channel.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    47   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    48   * \par Porting StandardIo to DPipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    49   * replace all
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    50   *  - StandardIo type with IfxStdIf_DPipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    51   *  - StandardIo_print with IfxStdIf_DPipe_print
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    52   * delete StandardIo.c and StandardIo.h
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    53   * Include "StdIf/IfxStdIf_DPipe.h" instead of "SysSe/Bsp/StandardIo.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    54   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    55   * The following files are already ported: Ifx_Console, Ifx_Shell
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    56   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    57   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    58  #ifndef STDIF_DPIPE_H_
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    59  #define STDIF_DPIPE_H_ 1
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    60  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    61  #include "IfxStdIf.h"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    62  //----------------------------------------------------------------------------------------
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    63  #ifndef ENDL
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    64  #    define ENDL       "\r\n"
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    65  #endif
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    66  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    67  /** \brief Forward declaration */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    68  typedef struct IfxStdIf_DPipe_ IfxStdIf_DPipe;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    69  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    70  typedef volatile boolean      *IfxStdIf_DPipe_WriteEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    71  typedef volatile boolean      *IfxStdIf_DPipe_ReadEvent;
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    72  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    73  /** \brief Size of the buffer allocated on the stack for the print function */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    74  #define STDIF_DPIPE_MAX_PRINT_SIZE (255)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    75  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    76  /** \brief Write binary data into the \ref IfxStdIf_DPipe.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    77   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    78   * Initially the parameter 'count' specifies count of data to write.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    79   * After execution the data pointed by 'count' specifies the data actually written
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    80   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    81   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    82   * \param data Pointer to the start of data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    83   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    84   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    85   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    86   * \retval TRUE Returns TRUE if all items could be written
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    87   * \retval FALSE Returns FALSE if not all the items could be written
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    88   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    89  typedef boolean (*IfxStdIf_DPipe_Write)(IfxStdIf_InterfaceDriver stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    90  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    91  /** \brief Read data from the \ref IfxStdIf_DPipe object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    92   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    93   * Initially the parameter 'count' specifies count of data to read.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    94   * After execution the data pointed by 'count' specifies the data actually read.
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    95   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    96   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    97   * \param data Pointer to the start of data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    98   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	    99   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   100   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   101   * \retval TRUE Returns TRUE if all items could be read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   102   * \retval FALSE Returns FALSE if not all the items could be read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   103   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   104  typedef boolean (*IfxStdIf_DPipe_Read)(IfxStdIf_InterfaceDriver stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   105  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   106  /** \brief Returns the number of bytes in the rx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   107   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   108   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   109   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   110   * \return Returns the number of bytes in the rx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   111   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   112  typedef sint32 (*IfxStdIf_DPipe_GetReadCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   113  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   114  /** \brief Returns read event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   115   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   116   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   117   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   118   * \return Returns read event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   119   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   120  typedef IfxStdIf_DPipe_ReadEvent (*IfxStdIf_DPipe_GetReadEvent)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   121  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   122  /** \brief Returns number of bytes send
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   123   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   124   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   125   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   126   * \return Returns number of bytes send
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   127   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   128  typedef uint32 (*IfxStdIf_DPipe_GetSendCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   129  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   130  /** \brief Returns the time stamp of the last transmit data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   131   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   132   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   133   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   134   * \return Returns the time stamp of the last transmit data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   135   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   136  typedef Ifx_TickTime (*IfxStdIf_DPipe_GetTxTimeStamp)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   137  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   138  /** \brief Returns the number of free bytes (free space) in the tx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   139   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   140   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   141   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   142   * \return Returns the number of free bytes in the tx buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   143   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   144  typedef sint32 (*IfxStdIf_DPipe_GetWriteCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   145  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   146  /** \brief Returns write event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   147   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   148   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   149   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   150   * \return Returns write event object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   151   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   152  typedef IfxStdIf_DPipe_WriteEvent (*IfxStdIf_DPipe_GetWriteEvent)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   153  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   154  /** \brief Indicates if the required number of bytes are available for read in the buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   155   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   156   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   157   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   158   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   159   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   160   * \return Returns TRUE if at least count bytes are available for read in the rx buffer,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   161   * if not the Event is armed to be set when the buffer count is bigger or equal to the requested count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   162   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   163  typedef boolean (*IfxStdIf_DPipe_CanReadCount)(IfxStdIf_InterfaceDriver stdIf, Ifx_SizeT count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   164  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   165  /** \brief  Indicates if there is enough free space to write the data in the buffer
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   166   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   167   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   168   * \param count Pointer to the count of data (in bytes).
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   169   * \param timeout in system timer ticks
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   170   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   171   * \return Returns TRUE if at least count bytes can be written to the tx buffer,
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   172   *  if not the Event is armed to be set when the buffer free count is bigger or equal to the requested count
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   173   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   174  typedef boolean (*IfxStdIf_DPipe_CanWriteCount)(IfxStdIf_InterfaceDriver stdIf, Ifx_SizeT count, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   175  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   176  /** \brief Flush the transmit buffer by transmitting all data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   177   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   178   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   179   * \param timeout timeout for the flush operation
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   180   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   181   * \return Returns TRUE if the FIFO is empty
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   182   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   183  typedef boolean (*IfxStdIf_DPipe_FlushTx)(IfxStdIf_InterfaceDriver stdIf, Ifx_TickTime timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   184  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   185  /** \brief Clears the RX buffer by removing all data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   186   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   187   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   188   * \return void
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   189   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   190  typedef void (*IfxStdIf_DPipe_ClearRx)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   191  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   192  /** \brief Clears the TX buffer by removing all data
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   193   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   194   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   195   * \return void
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   196   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   197  typedef void (*IfxStdIf_DPipe_ClearTx)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   198  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   199  /** \brief handler called on reveive event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   200   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   201   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   202   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   203   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   204   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   205  typedef void (*IfxStdIf_DPipe_OnReceive)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   206  /** \brief handler called on transmit event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   207   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   208   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   209   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   210   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   211   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   212  typedef void (*IfxStdIf_DPipe_OnTransmit)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   213  /** \brief handler called on error event
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   214   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   215   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   216   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   217   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   218   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   219  typedef void (*IfxStdIf_DPipe_OnError)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   220  /** \brief Reset the sendCount counter
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   221   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   222   * \param stdif Pointer to the interface driver object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   223   *
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   224   * \return none
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   225   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   226  typedef void (*IfxStdIf_DPipe_ResetSendCount)(IfxStdIf_InterfaceDriver stdIf);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   227  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   228  /** \brief Standard interface object
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   229   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   230  struct IfxStdIf_DPipe_
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   231  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   232      IfxStdIf_InterfaceDriver driver;              /**< \brief Pointer to the specific driver object */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   233      boolean                  txDisabled;          /**< \brief If disabled is set to TRUE, the output is disabled, else enabled */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   234  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   235      /* Standard interface APIs */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   236      IfxStdIf_DPipe_Write          write;          /**< \brief \see IfxStdIf_DPipe_Write */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   237      IfxStdIf_DPipe_Read           read;           /**< \brief \see IfxStdIf_DPipe_Read */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   238      IfxStdIf_DPipe_GetReadCount   getReadCount;   /**< \brief \see IfxStdIf_DPipe_GetReadCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   239      IfxStdIf_DPipe_GetReadEvent   getReadEvent;   /**< \brief \see IfxStdIf_DPipe_GetReadEvent */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   240      IfxStdIf_DPipe_GetWriteCount  getWriteCount;  /**< \brief \see IfxStdIf_DPipe_GetWriteCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   241      IfxStdIf_DPipe_GetWriteEvent  getWriteEvent;  /**< \brief \see IfxStdIf_DPipe_GetWriteEvent */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   242      IfxStdIf_DPipe_CanReadCount   canReadCount;   /**< \brief \see IfxStdIf_DPipe_CanReadCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   243      IfxStdIf_DPipe_CanWriteCount  canWriteCount;  /**< \brief \see IfxStdIf_DPipe_CanWriteCount */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   244      IfxStdIf_DPipe_FlushTx        flushTx;        /**< \brief \see IfxStdIf_DPipe_FlushTx */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   245      IfxStdIf_DPipe_ClearTx        clearTx;        /**< \brief \see IfxStdIf_DPipe_ClearTx */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   246      IfxStdIf_DPipe_ClearRx        clearRx;        /**< \brief \see IfxStdIf_DPipe_ClearRx */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   247      IfxStdIf_DPipe_OnReceive      onReceive;      /**< \brief \see IfxStdIf_DPipe_OnReceive  */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   248      IfxStdIf_DPipe_OnTransmit     onTransmit;     /**< \brief \see IfxStdIf_DPipe_OnTransmit */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   249      IfxStdIf_DPipe_OnError        onError;        /**< \brief \see IfxStdIf_DPipe_OnError    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   250  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   251      IfxStdIf_DPipe_GetSendCount   getSendCount;   /**< \brief \see IfxStdIf_DPipe_GetSendCount    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   252      IfxStdIf_DPipe_GetTxTimeStamp getTxTimeStamp; /**< \brief \see IfxStdIf_DPipe_GetTxTimeStamp    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   253      IfxStdIf_DPipe_ResetSendCount resetSendCount; /**< \brief \see IfxStdIf_DPipe_ResetSendCount    */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   254  };
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   255  /** \addtogroup library_srvsw_stdif_dpipe
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   256   * \{ */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   257  /** \copydoc IfxStdIf_DPipe_Write
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   258   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   259  IFX_INLINE boolean IfxStdIf_DPipe_write(IfxStdIf_DPipe *stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   260  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   261      return stdIf->write(stdIf->driver, data, count, timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   262  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   263  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   264  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   265  /** \copydoc IfxStdIf_DPipe_Read
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   266   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   267  IFX_INLINE boolean IfxStdIf_DPipe_read(IfxStdIf_DPipe *stdIf, void *data, Ifx_SizeT *count, Ifx_TickTime timeout)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   268  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   269      return stdIf->read(stdIf->driver, data, count, timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   270  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   271  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   272  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   273  /** \copydoc IfxStdIf_DPipe_GetReadCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   274   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   275  IFX_INLINE sint32 IfxStdIf_DPipe_getReadCount(IfxStdIf_DPipe *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   276  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   277      return stdIf->getReadCount(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   278  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   279  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   280  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   281  /** \copydoc IfxStdIf_DPipe_GetWriteCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   282   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   283  IFX_INLINE sint32 IfxStdIf_DPipe_getWriteCount(IfxStdIf_DPipe *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   284  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   285      return stdIf->getWriteCount(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   286  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   287  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   288  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   289  /** \copydoc IfxStdIf_DPipe_CanReadCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   290   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   291  IFX_INLINE boolean IfxStdIf_DPipe_canReadCount(IfxStdIf_DPipe *stdIf, Ifx_SizeT count, Ifx_TickTime timeout)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   292  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   293      return stdIf->canReadCount(stdIf->driver, count, timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   294  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   295  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   296  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   297  /** \copydoc IfxStdIf_DPipe_CanWriteCount
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   298   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   299  IFX_INLINE boolean IfxStdIf_DPipe_canWriteCount(IfxStdIf_DPipe *stdIf, Ifx_SizeT count, Ifx_TickTime timeout)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   300  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   301      return stdIf->canWriteCount(stdIf->driver, count, timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   302  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   303  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   304  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   305  /** \copydoc IfxStdIf_DPipe_GetReadEvent
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   306   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   307  IFX_INLINE IfxStdIf_DPipe_ReadEvent IfxStdIf_DPipe_getReadEvent(IfxStdIf_DPipe *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   308  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   309      return stdIf->getReadEvent(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   310  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   311  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   312  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   313  /** \copydoc IfxStdIf_DPipe_GetWriteEvent
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   314   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   315  IFX_INLINE IfxStdIf_DPipe_WriteEvent IfxStdIf_DPipe_getWriteEvent(IfxStdIf_DPipe *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   316  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   317      return stdIf->getWriteEvent(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   318  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   319  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   320  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   321  /** \copydoc IfxStdIf_DPipe_FlushTx
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   322   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   323  IFX_INLINE boolean IfxStdIf_DPipe_flushTx(IfxStdIf_DPipe *stdIf, Ifx_TickTime timeout)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   324  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   325      return stdIf->flushTx(stdIf->driver, timeout);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   326  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   327  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   328  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   329  /** \copydoc IfxStdIf_DPipe_ClearTx
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   330   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   331  IFX_INLINE void IfxStdIf_DPipe_clearTx(IfxStdIf_DPipe *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   332  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   333      stdIf->clearTx(stdIf->driver);
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   334  }
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   335  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   336  
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   337  /** \copydoc IfxStdIf_DPipe_ClearRx
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   338   */
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   339  IFX_INLINE void IfxStdIf_DPipe_clearRx(IfxStdIf_DPipe *stdIf)
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   340  {
; D:\WorkSpace\Tasking\Tasking_TC397_MultiCore_RTThread\0_Src\1_SrvSw\StdIf\IfxStdIf_DPipe.h	   341      stdIf->clearRx(stdIf->driver);
	ld.a	a5,[a2]48
.L1080:
	ld.a	a4,[a2]
.L1003:
	calli	a5
.L513:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1311      // Enable the shell
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1312      shell->control.enabled = 1;
	ld.bu	d15,[a15]4
.L1081:
	or	d15,#2
	st.b	[a15]4,d15
.L1082:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1313  }
	ret
.L509:
	
__Ifx_Shell_enable_function_end:
	.size	Ifx_Shell_enable,__Ifx_Shell_enable_function_end-Ifx_Shell_enable
.L356:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_disable',code,cluster('Ifx_Shell_disable')
	.sect	'.text.Ifx_Shell.Ifx_Shell_disable'
	.align	2
	
	.global	Ifx_Shell_disable

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1314  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1315  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1316  void Ifx_Shell_disable(Ifx_Shell *shell)
; Function Ifx_Shell_disable
.L330:
Ifx_Shell_disable:	.type	func

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1317  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1318      shell->control.enabled = 0;
	ld.bu	d15,[a4]4
.L1087:
	insert	d15,d15,#0,#1,#1
	st.b	[a4]4,d15
.L1088:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1319  }
	ret
.L517:
	
__Ifx_Shell_disable_function_end:
	.size	Ifx_Shell_disable,__Ifx_Shell_disable_function_end-Ifx_Shell_disable
.L361:
	; End of function
	
	.sdecl	'.text.Ifx_Shell.Ifx_Shell_printSyntax',code,cluster('Ifx_Shell_printSyntax')
	.sect	'.text.Ifx_Shell.Ifx_Shell_printSyntax'
	.align	2
	
	.global	Ifx_Shell_printSyntax

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1320  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1321  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1322  void Ifx_Shell_printSyntax(const Ifx_Shell_Syntax *syntaxList, IfxStdIf_DPipe *io)
; Function Ifx_Shell_printSyntax
.L332:
Ifx_Shell_printSyntax:	.type	func
	sub.a	a10,#8
.L1005:
	mov.aa	a12,a5
.L1006:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1323  {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1324      const Ifx_Shell_Syntax *syntax = syntaxList;
	mov.aa	a15,a4
.L1007:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1325  
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1326      while (syntax->syntax != NULL_PTR)
	j	.L269
.L270:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1327      {
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1328          IfxStdIf_DPipe_print(io, "Syntax     : %s" ENDL, syntax->syntax);
	ld.a	a2,[a15]
	st.a	[a10],a2
.L1391:
	movh.a	a5,#@his(.31.str)
	lea	a5,[a5]@los(.31.str)
	mov.aa	a4,a12
.L1008:
	call	IfxStdIf_DPipe_print
.L1009:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1329          IfxStdIf_DPipe_print(io, "           > %s" ENDL, syntax->description);
	ld.a	a2,[a15]4
	st.a	[a10],a2
.L1392:
	movh.a	a5,#@his(.32.str)
	lea	a5,[a5]@los(.32.str)
	mov.aa	a4,a12
.L1010:
	call	IfxStdIf_DPipe_print
.L1011:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1330          syntax = &syntax[1];
	lea	a15,[a15]8
.L269:
	ld.w	d15,[a15]
.L1393:
	jne	d15,#0,.L270
.L1394:

; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1331      }
; ..\0_Src\1_SrvSw\SysSe\Comm\Ifx_Shell.c	  1332  }
	ret
.L668:
	
__Ifx_Shell_printSyntax_function_end:
	.size	Ifx_Shell_printSyntax,__Ifx_Shell_printSyntax_function_end-Ifx_Shell_printSyntax
.L436:
	; End of function
	
	.sdecl	'.bss.Ifx_Shell.Ifx_Shell_cmdBuffer',data,cluster('Ifx_Shell_cmdBuffer')
	.sect	'.bss.Ifx_Shell.Ifx_Shell_cmdBuffer'
	.global	Ifx_Shell_cmdBuffer
Ifx_Shell_cmdBuffer:	.type	object
	.size	Ifx_Shell_cmdBuffer,1280
	.space	1280
	.sdecl	'.zrodata.Ifx_Shell..1.str',data,rom
	.sect	'.zrodata.Ifx_Shell..1.str'
.1.str:	.type	object
	.size	.1.str,1
	.space	1
	.sdecl	'.zrodata.Ifx_Shell..2.str',data,rom
	.sect	'.zrodata.Ifx_Shell..2.str'
.2.str:	.type	object
	.size	.2.str,5
	.byte	37,115,37,115
	.space	1
	.sdecl	'.zrodata.Ifx_Shell..3.str',data,rom
	.sect	'.zrodata.Ifx_Shell..3.str'
.3.str:	.type	object
	.size	.3.str,3
	.byte	47,112
	.space	1
	.sdecl	'.zrodata.Ifx_Shell..4.str',data,rom
	.sect	'.zrodata.Ifx_Shell..4.str'
.4.str:	.type	object
	.size	.4.str,3
	.byte	47,115
	.space	1
	.sdecl	'.zrodata.Ifx_Shell..5.str',data,rom
	.sect	'.zrodata.Ifx_Shell..5.str'
.5.str:	.type	object
	.size	.5.str,7
	.byte	32,32,32,32
	.byte	32,32
	.space	1
	.sdecl	'.rodata.Ifx_Shell..6.str',data,rom
	.sect	'.rodata.Ifx_Shell..6.str'
.6.str:	.type	object
	.size	.6.str,13
	.byte	32,32,32,32
	.byte	83,89,78,84
	.byte	65,88,58,32
	.space	1
	.sdecl	'.rodata.Ifx_Shell..7.str',data,rom
	.sect	'.rodata.Ifx_Shell..7.str'
.7.str:	.type	object
	.size	.7.str,9
	.byte	32,32,32,32
	.byte	32,32,32,32
	.space	1
	.sdecl	'.rodata.Ifx_Shell..8.str',data,rom
	.sect	'.rodata.Ifx_Shell..8.str'
.8.str:	.type	object
	.size	.8.str,13
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.space	1
	.sdecl	'.zrodata.Ifx_Shell..9.str',data,rom
	.sect	'.zrodata.Ifx_Shell..9.str'
.9.str:	.type	object
	.size	.9.str,3
	.byte	13,10
	.space	1
	.sdecl	'.zrodata.Ifx_Shell..10.str',data,rom
	.sect	'.zrodata.Ifx_Shell..10.str'
.10.str:	.type	object
	.size	.10.str,3
	.byte	32,32
	.space	1
	.sdecl	'.zrodata.Ifx_Shell..11.str',data,rom
	.sect	'.zrodata.Ifx_Shell..11.str'
.11.str:	.type	object
	.size	.11.str,4
	.byte	37,115,32
	.space	1
	.sdecl	'.rodata.Ifx_Shell..12.str',data,rom
	.sect	'.rodata.Ifx_Shell..12.str'
.12.str:	.type	object
	.size	.12.str,16
	.byte	117,110,107,110
	.byte	111,119,110,32
	.byte	99,111,109,109
	.byte	97,110,100
	.space	1
	.sdecl	'.zrodata.Ifx_Shell..13.str',data,rom
	.sect	'.zrodata.Ifx_Shell..13.str'
.13.str:	.type	object
	.size	.13.str,2
	.byte	63
	.space	1
	.sdecl	'.rodata.Ifx_Shell..14.str',data,rom
	.sect	'.rodata.Ifx_Shell..14.str'
.14.str:	.type	object
	.size	.14.str,30
	.byte	83,121,110,116
	.byte	97,120,32,32
	.byte	32,32,32,58
	.byte	32,112,114,111
	.byte	116,111,99,111
	.byte	108,32,115,116
	.byte	97,114,116,13
	.byte	10
	.space	1
	.sdecl	'.rodata.Ifx_Shell..15.str',data,rom
	.sect	'.rodata.Ifx_Shell..15.str'
.15.str:	.type	object
	.size	.15.str,32
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,62
	.byte	32,115,116,97
	.byte	114,116,32,97
	.byte	32,112,114,111
	.byte	116,111,99,111
	.byte	108,13,10
	.space	1
	.sdecl	'.zrodata.Ifx_Shell..16.str',data,rom
	.sect	'.zrodata.Ifx_Shell..16.str'
.16.str:	.type	object
	.size	.16.str,6
	.byte	115,116,97,114
	.byte	116
	.space	1
	.sdecl	'.rodata.Ifx_Shell..17.str',data,rom
	.sect	'.rodata.Ifx_Shell..17.str'
.17.str:	.type	object
	.size	.17.str,9
	.byte	112,114,111,116
	.byte	111,99,111,108
	.space	1
	.sdecl	'.zrodata.Ifx_Shell..18.str',data,rom
	.sect	'.zrodata.Ifx_Shell..18.str'
.18.str:	.type	object
	.size	.18.str,5
	.byte	104,101,108,112
	.space	1
	.sdecl	'.zrodata.Ifx_Shell..19.str',data,rom
	.sect	'.zrodata.Ifx_Shell..19.str'
.19.str:	.type	object
	.size	.19.str,7
	.byte	83,104,101,108
	.byte	108,62
	.space	1
	.sdecl	'.zrodata.Ifx_Shell..20.str',data,rom
	.sect	'.zrodata.Ifx_Shell..20.str'
.20.str:	.type	object
	.size	.20.str,2
	.byte	8
	.space	1
	.sdecl	'.zrodata.Ifx_Shell..21.str',data,rom
	.sect	'.zrodata.Ifx_Shell..21.str'
.21.str:	.type	object
	.size	.21.str,3
	.byte	37,99
	.space	1
	.sdecl	'.zrodata.Ifx_Shell..22.str',data,rom
	.sect	'.zrodata.Ifx_Shell..22.str'
.22.str:	.type	object
	.size	.22.str,2
	.byte	32
	.space	1
	.sdecl	'.zrodata.Ifx_Shell..23.str',data,rom
	.sect	'.zrodata.Ifx_Shell..23.str'
.23.str:	.type	object
	.size	.23.str,4
	.byte	37,120,32
	.space	1
	.sdecl	'.zrodata.Ifx_Shell..24.str',data,rom
	.sect	'.zrodata.Ifx_Shell..24.str'
.24.str:	.type	object
	.size	.24.str,6
	.byte	37,108,108,100
	.byte	32
	.space	1
	.sdecl	'.zrodata.Ifx_Shell..25.str',data,rom
	.sect	'.zrodata.Ifx_Shell..25.str'
.25.str:	.type	object
	.size	.25.str,6
	.byte	37,108,108,120
	.byte	32
	.space	1
	.sdecl	'.zrodata.Ifx_Shell..26.str',data,rom
	.sect	'.zrodata.Ifx_Shell..26.str'
.26.str:	.type	object
	.size	.26.str,6
	.byte	37,108,108,117
	.byte	32
	.space	1
	.sdecl	'.zrodata.Ifx_Shell..27.str',data,rom
	.sect	'.zrodata.Ifx_Shell..27.str'
.27.str:	.type	object
	.size	.27.str,5
	.byte	37,108,102,32
	.space	1
	.sdecl	'.zrodata.Ifx_Shell..28.str',data,rom
	.sect	'.zrodata.Ifx_Shell..28.str'
.28.str:	.type	object
	.size	.28.str,4
	.byte	37,102,32
	.space	1
	.sdecl	'.rodata.Ifx_Shell..29.str',data,rom
	.sect	'.rodata.Ifx_Shell..29.str'
.29.str:	.type	object
	.size	.29.str,28
	.byte	13,10,83,104
	.byte	101,108,108,32
	.byte	99,111,109,109
	.byte	97,110,100,32
	.byte	101,114,114,111
	.byte	114,58,32,37
	.byte	115,13,10
	.space	1
	.sdecl	'.rodata.Ifx_Shell..30.str',data,rom
	.sect	'.rodata.Ifx_Shell..30.str'
.30.str:	.type	object
	.size	.30.str,24
	.byte	13,10,85,110
	.byte	107,110,111,119
	.byte	110,32,99,111
	.byte	109,109,97,110
	.byte	100,58,32,37
	.byte	115,13,10
	.space	1
	.sdecl	'.rodata.Ifx_Shell..31.str',data,rom
	.sect	'.rodata.Ifx_Shell..31.str'
.31.str:	.type	object
	.size	.31.str,18
	.byte	83,121,110,116
	.byte	97,120,32,32
	.byte	32,32,32,58
	.byte	32,37,115,13
	.byte	10
	.space	1
	.sdecl	'.rodata.Ifx_Shell..32.str',data,rom
	.sect	'.rodata.Ifx_Shell..32.str'
.32.str:	.type	object
	.size	.32.str,18
	.byte	32,32,32,32
	.byte	32,32,32,32
	.byte	32,32,32,62
	.byte	32,37,115,13
	.byte	10
	.space	1
	.calls	'Ifx_Shell_writeResult','__INDIRECT__'
	.calls	'Ifx_Shell_showHelpSingle','IfxStdIf_DPipe_print'
	.calls	'Ifx_Shell_showHelpSingle','Ifx_Shell_matchCommand'
	.calls	'Ifx_Shell_showHelpSingle','strstr'
	.calls	'Ifx_Shell_showHelpSingle','strlen'
	.calls	'Ifx_Shell_showHelpSingle','__INDIRECT__'
	.calls	'Ifx_Shell_showHelpSingleCommand','Ifx_Shell_commandListFind'
	.calls	'Ifx_Shell_showHelpSingleCommand','Ifx_Shell_showHelpSingle'
	.calls	'Ifx_Shell_showHelpSingleCommand','IfxStdIf_DPipe_print'
	.calls	'Ifx_Shell_showHelp','Ifx_Shell_showHelpSingle'
	.calls	'Ifx_Shell_showHelp','Ifx_Shell_showHelpSingleCommand'
	.calls	'Ifx_Shell_protocolStart','Ifx_Shell_matchToken'
	.calls	'Ifx_Shell_protocolStart','IfxStdIf_DPipe_print'
	.calls	'Ifx_Shell_protocolStart','__INDIRECT__'
	.calls	'Ifx_Shell_bbProtocolStart','Ifx_Shell_matchToken'
	.calls	'Ifx_Shell_bbProtocolStart','IfxStdIf_DPipe_print'
	.calls	'Ifx_Shell_bbProtocolStart','Ifx_Shell_protocolStart'
	.calls	'Ifx_Shell_init','memset'
	.calls	'Ifx_Shell_init','strcpy'
	.calls	'Ifx_Shell_init','IfxStdIf_DPipe_print'
	.calls	'Ifx_Shell_process','__INDIRECT__'
	.calls	'Ifx_Shell_process','IfxStdIf_DPipe_print'
	.calls	'Ifx_Shell_process','strncpy'
	.calls	'Ifx_Shell_process','Ifx_Shell_execute'
	.calls	'Ifx_Shell_process','Ifx_Shell_cmdEscapeProcess'
	.calls	'Ifx_Shell_matchToken','Ifx_Shell_parseToken'
	.calls	'Ifx_Shell_matchToken','strcmp'
	.calls	'Ifx_Shell_matchCommand','Ifx_Shell_parseToken'
	.calls	'Ifx_Shell_matchCommand','strcmp'
	.calls	'Ifx_Shell_parseToken','Ifx_Shell_skipWhitespace'
	.calls	'Ifx_Shell_parseAddress','Ifx_Shell_parseToken'
	.calls	'Ifx_Shell_parseAddress','sscanf'
	.calls	'Ifx_Shell_parseSInt32','Ifx_Shell_parseSInt64'
	.calls	'Ifx_Shell_parseUInt32','Ifx_Shell_parseUInt64'
	.calls	'Ifx_Shell_parseSInt64','Ifx_Shell_parseToken'
	.calls	'Ifx_Shell_parseSInt64','sscanf'
	.calls	'Ifx_Shell_parseUInt64','Ifx_Shell_parseToken'
	.calls	'Ifx_Shell_parseUInt64','sscanf'
	.calls	'Ifx_Shell_parseFloat64','Ifx_Shell_parseToken'
	.calls	'Ifx_Shell_parseFloat64','sscanf'
	.calls	'Ifx_Shell_parseFloat32','Ifx_Shell_parseToken'
	.calls	'Ifx_Shell_parseFloat32','sscanf'
	.calls	'Ifx_Shell_commandFind','Ifx_Shell_matchCommand'
	.calls	'Ifx_Shell_commandFind','Ifx_Shell_parseToken'
	.calls	'Ifx_Shell_commandListFind','Ifx_Shell_commandFind'
	.calls	'Ifx_Shell_execute','Ifx_Shell_commandListFind'
	.calls	'Ifx_Shell_execute','Ifx_Shell_showHelp'
	.calls	'Ifx_Shell_execute','__INDIRECT__'
	.calls	'Ifx_Shell_execute','Ifx_Shell_writeResult'
	.calls	'Ifx_Shell_execute','IfxStdIf_DPipe_print'
	.calls	'Ifx_Shell_cmdEscapeProcess','strncpy'
	.calls	'Ifx_Shell_cmdEscapeProcess','IfxStdIf_DPipe_print'
	.calls	'Ifx_Shell_cmdEscapeProcess','strlen'
	.calls	'Ifx_Shell_enable','__INDIRECT__'
	.calls	'Ifx_Shell_printSyntax','IfxStdIf_DPipe_print'
	.calls	'Ifx_Shell_cmdEscapeProcess','.cocofun_35'
	.calls	'Ifx_Shell_cmdEscapeProcess','.cocofun_34'
	.calls	'Ifx_Shell_isEndOfLine','',0
	.calls	'Ifx_Shell_writeResult','',8
	.calls	'Ifx_Shell_showHelpSingle','',32
	.calls	'Ifx_Shell_showHelpSingleCommand','',16
	.calls	'Ifx_Shell_showHelp','',0
	.calls	'Ifx_Shell_protocolStart','',8
	.calls	'Ifx_Shell_bbProtocolStart','',8
	.calls	'Ifx_Shell_initConfig','',0
	.calls	'Ifx_Shell_init','',0
	.calls	'Ifx_Shell_process','',16
	.calls	'Ifx_Shell_deinit','',0
	.calls	'Ifx_Shell_skipWhitespace','',0
	.calls	'Ifx_Shell_matchToken','',256
	.calls	'Ifx_Shell_matchCommand','',512
	.calls	'Ifx_Shell_parseToken','',0
	.calls	'Ifx_Shell_parseAddress','',40
	.calls	'Ifx_Shell_parseSInt32','',8
	.calls	'Ifx_Shell_parseUInt32','',8
	.calls	'Ifx_Shell_parseSInt64','',72
	.calls	'Ifx_Shell_parseUInt64','',72
	.calls	'Ifx_Shell_parseFloat64','',72
	.calls	'Ifx_Shell_parseFloat32','',72
	.calls	'Ifx_Shell_commandFind','',272
	.calls	'Ifx_Shell_commandListFind','',8
	.calls	'Ifx_Shell_execute','',16
	.calls	'Ifx_Shell_cmdEscapeProcess','',8
	.calls	'.cocofun_35','',0
	.calls	'.cocofun_34','',0
	.calls	'Ifx_Shell_enable','',0
	.calls	'Ifx_Shell_disable','',0
	.extern	IfxStdIf_DPipe_print
	.extern	strcpy
	.extern	strncpy
	.extern	strstr
	.extern	strcmp
	.extern	strlen
	.extern	memset
	.extern	sscanf
	.extern	__scanf_float
	.extern	__scanf_llong
	.extern	__INDIRECT__
	.calls	'Ifx_Shell_printSyntax','',8
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L334:
	.word	4703
	.half	3
	.word	.L335
	.byte	4
.L333:
	.byte	1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L336
.L497:
	.byte	2
	.byte	'unsigned char',0,1,8,3
	.byte	'void',0
.L663:
	.byte	4
	.word	179
	.byte	5
	.byte	'IfxStdIf_InterfaceDriver',0,2,115,15
	.word	185
.L521:
	.byte	2
	.byte	'short int',0,2,5,4
	.word	223
.L576:
	.byte	2
	.byte	'long long int',0,8,5,6
	.word	162
	.byte	1,1,7
	.word	185
	.byte	7
	.word	185
	.byte	7
	.word	236
	.byte	7
	.word	241
	.byte	0,4
	.word	258
	.byte	5
	.byte	'IfxStdIf_DPipe_Write',0,1,89,19
	.word	286
	.byte	5
	.byte	'IfxStdIf_DPipe_Read',0,1,104,19
	.word	286
.L503:
	.byte	2
	.byte	'long int',0,4,5,6
	.word	348
	.byte	1,1,7
	.word	185
	.byte	0,4
	.word	360
	.byte	5
	.byte	'IfxStdIf_DPipe_GetReadCount',0,1,112,18
	.word	373
	.byte	8
	.word	162
	.byte	4
	.word	414
	.byte	6
	.word	419
	.byte	1,1,7
	.word	185
	.byte	0,4
	.word	424
	.byte	5
	.byte	'IfxStdIf_DPipe_GetReadEvent',0,1,120,36
	.word	437
	.byte	5
	.byte	'IfxStdIf_DPipe_GetWriteCount',0,1,144,1,18
	.word	373
	.byte	4
	.word	424
	.byte	5
	.byte	'IfxStdIf_DPipe_GetWriteEvent',0,1,152,1,37
	.word	516
	.byte	6
	.word	162
	.byte	1,1,7
	.word	185
	.byte	7
	.word	223
	.byte	7
	.word	241
	.byte	0,4
	.word	559
	.byte	5
	.byte	'IfxStdIf_DPipe_CanReadCount',0,1,163,1,19
	.word	582
	.byte	5
	.byte	'IfxStdIf_DPipe_CanWriteCount',0,1,174,1,19
	.word	582
	.byte	6
	.word	162
	.byte	1,1,7
	.word	185
	.byte	7
	.word	241
	.byte	0,4
	.word	662
	.byte	5
	.byte	'IfxStdIf_DPipe_FlushTx',0,1,183,1,19
	.word	680
	.byte	9,1,1,7
	.word	185
	.byte	0,4
	.word	717
	.byte	5
	.byte	'IfxStdIf_DPipe_ClearTx',0,1,197,1,16
	.word	726
	.byte	5
	.byte	'IfxStdIf_DPipe_ClearRx',0,1,190,1,16
	.word	726
	.byte	5
	.byte	'IfxStdIf_DPipe_OnReceive',0,1,205,1,16
	.word	726
	.byte	5
	.byte	'IfxStdIf_DPipe_OnTransmit',0,1,212,1,16
	.word	726
	.byte	5
	.byte	'IfxStdIf_DPipe_OnError',0,1,219,1,16
	.word	726
.L624:
	.byte	2
	.byte	'unsigned long int',0,4,7,6
	.word	896
	.byte	1,1,7
	.word	185
	.byte	0,4
	.word	917
	.byte	5
	.byte	'IfxStdIf_DPipe_GetSendCount',0,1,128,1,18
	.word	930
	.byte	6
	.word	241
	.byte	1,1,7
	.word	185
	.byte	0,4
	.word	972
	.byte	5
	.byte	'IfxStdIf_DPipe_GetTxTimeStamp',0,1,136,1,24
	.word	985
	.byte	5
	.byte	'IfxStdIf_DPipe_ResetSendCount',0,1,226,1,16
	.word	726
	.byte	10
	.byte	'IfxStdIf_DPipe_',0,1,230,1,8,76,11
	.byte	'driver',0
	.word	190
	.byte	4,2,35,0,11
	.byte	'txDisabled',0
	.word	162
	.byte	1,2,35,4,11
	.byte	'write',0
	.word	291
	.byte	4,2,35,8,11
	.byte	'read',0
	.word	320
	.byte	4,2,35,12,11
	.byte	'getReadCount',0
	.word	378
	.byte	4,2,35,16,11
	.byte	'getReadEvent',0
	.word	442
	.byte	4,2,35,20,11
	.byte	'getWriteCount',0
	.word	478
	.byte	4,2,35,24,11
	.byte	'getWriteEvent',0
	.word	521
	.byte	4,2,35,28,11
	.byte	'canReadCount',0
	.word	587
	.byte	4,2,35,32,11
	.byte	'canWriteCount',0
	.word	624
	.byte	4,2,35,36,11
	.byte	'flushTx',0
	.word	685
	.byte	4,2,35,40,11
	.byte	'clearTx',0
	.word	731
	.byte	4,2,35,44,11
	.byte	'clearRx',0
	.word	763
	.byte	4,2,35,48,11
	.byte	'onReceive',0
	.word	795
	.byte	4,2,35,52,11
	.byte	'onTransmit',0
	.word	829
	.byte	4,2,35,56,11
	.byte	'onError',0
	.word	864
	.byte	4,2,35,60,11
	.byte	'getSendCount',0
	.word	935
	.byte	4,2,35,64,11
	.byte	'getTxTimeStamp',0
	.word	990
	.byte	4,2,35,68,11
	.byte	'resetSendCount',0
	.word	1029
	.byte	4,2,35,72,0
.L634:
	.byte	4
	.word	1068
	.byte	4
	.word	223
.L649:
	.byte	12
	.byte	'IfxStdIf_DPipe_write',0,3,1,131,2,20
	.word	162
	.byte	1,1
.L652:
	.byte	13
	.byte	'stdIf',0,1,131,2,57
	.word	1468
.L654:
	.byte	13
	.byte	'data',0,1,131,2,70
	.word	185
.L656:
	.byte	13
	.byte	'count',0,1,131,2,87
	.word	1473
.L658:
	.byte	13
	.byte	'timeout',0,1,131,2,107
	.word	241
.L660:
	.byte	14,0,4
	.word	179
	.byte	4
	.word	258
	.byte	4
	.word	258
	.byte	4
	.word	360
	.byte	4
	.word	424
	.byte	4
	.word	360
	.byte	4
	.word	424
	.byte	4
	.word	559
	.byte	4
	.word	559
	.byte	4
	.word	662
	.byte	4
	.word	717
	.byte	4
	.word	717
	.byte	4
	.word	717
	.byte	4
	.word	717
	.byte	4
	.word	717
	.byte	4
	.word	917
	.byte	4
	.word	972
	.byte	4
	.word	717
.L533:
	.byte	12
	.byte	'IfxStdIf_DPipe_read',0,3,1,139,2,20
	.word	162
	.byte	1,1
.L536:
	.byte	13
	.byte	'stdIf',0,1,139,2,56
	.word	1468
.L538:
	.byte	13
	.byte	'data',0,1,139,2,69
	.word	185
.L540:
	.byte	13
	.byte	'count',0,1,139,2,86
	.word	1473
.L542:
	.byte	13
	.byte	'timeout',0,1,139,2,106
	.word	241
.L544:
	.byte	14,0
.L511:
	.byte	15
	.byte	'IfxStdIf_DPipe_clearRx',0,3,1,211,2,17,1,1
.L514:
	.byte	13
	.byte	'stdIf',0,1,211,2,56
	.word	1468
.L516:
	.byte	14,0,16,1,1,4
	.word	1807
	.byte	15
	.byte	'Ifx__jump_and_link',0,3,3,58,17,1,1,13
	.byte	'fun',0,3,58,43
	.word	1810
	.byte	14,0,2
	.byte	'__fract',0,4,128,1,2
	.byte	'float',0,4,4,12
	.byte	'Ifx__float_to_fract',0,3,3,149,2,18
	.word	1855
	.byte	1,1,13
	.byte	'a',0,3,149,2,44
	.word	1867
	.byte	14,0
.L584:
	.byte	2
	.byte	'unsigned long long int',0,8,7,12
	.byte	'__ld64',0,3,4,132,1,19
	.word	1921
	.byte	1,1,13
	.byte	'addr',0,4,132,1,32
	.word	185
	.byte	14,0,15
	.byte	'__st64',0,3,4,140,1,17,1,1,13
	.byte	'addr',0,4,140,1,30
	.word	185
	.byte	13
	.byte	'value',0,4,140,1,43
	.word	1921
	.byte	14,0
.L546:
	.byte	2
	.byte	'int',0,4,5,17
	.word	2028
	.byte	18
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,7
	.word	2035
	.byte	0,2
	.byte	'unsigned int',0,4,7,8
	.word	2077
	.byte	4
	.word	2077
	.byte	19
	.byte	'__cmpswapw',0
	.word	2093
	.byte	1,1,1,1,20
	.byte	'p',0
	.word	2098
	.byte	20
	.byte	'value',0
	.word	2077
	.byte	20
	.byte	'compare',0
	.word	2077
	.byte	0,19
	.byte	'__max',0
	.word	2028
	.byte	1,1,1,1,7
	.word	2028
	.byte	7
	.word	2028
	.byte	0,19
	.byte	'__min',0
	.word	2028
	.byte	1,1,1,1,7
	.word	2028
	.byte	7
	.word	2028
	.byte	0,21
	.word	1478
	.byte	22
	.word	1511
	.byte	22
	.word	1526
	.byte	22
	.word	1540
	.byte	22
	.word	1555
	.byte	14,0,21
	.word	1664
	.byte	22
	.word	1696
	.byte	22
	.word	1711
	.byte	22
	.word	1725
	.byte	22
	.word	1740
	.byte	14,0,21
	.word	1759
	.byte	22
	.word	1790
	.byte	14,0
.L692:
	.byte	2
	.byte	'char',0,1,6,17
	.word	2273
	.byte	4
	.word	2281
.L548:
	.byte	5
	.byte	'pchar',0,5,53,28
	.word	2286
	.byte	23
	.byte	'IfxStdIf_DPipe_print',0,1,137,3,17,1,1,1,1,13
	.byte	'stdIf',0,1,137,3,54
	.word	1468
	.byte	13
	.byte	'format',0,1,137,3,67
	.word	2291
	.byte	24,1,137,3,75,0,17
	.word	2273
	.byte	4
	.word	2372
	.byte	4
	.word	1068
	.byte	6
	.word	162
	.byte	1,1,7
	.word	2286
	.byte	7
	.word	185
	.byte	7
	.word	2382
	.byte	0,4
	.word	2387
	.byte	5
	.byte	'Ifx_Shell_Call',0,6,166,1,19
	.word	2410
	.byte	25,6,169,1,9,16,11
	.byte	'commandLine',0
	.word	2291
	.byte	4,2,35,0,11
	.byte	'help',0
	.word	2291
	.byte	4,2,35,4,11
	.byte	'data',0
	.word	185
	.byte	4,2,35,8,11
	.byte	'call',0
	.word	2415
	.byte	4,2,35,12,0,17
	.word	2439
.L614:
	.byte	4
	.word	2509
.L616:
	.byte	5
	.byte	'Ifx_Shell_CommandListConst',0,6,228,1,34
	.word	2514
	.byte	26,4
	.word	2519
	.byte	27,0,0,6
	.word	162
	.byte	1,1,7
	.word	185
	.byte	7
	.word	2382
	.byte	0,4
	.word	2564
	.byte	9,1,1,7
	.word	185
	.byte	7
	.word	185
	.byte	0,4
	.word	2587
	.byte	25,6,197,1,9,24,11
	.byte	'start',0
	.word	2582
	.byte	4,2,35,0,11
	.byte	'execute',0
	.word	726
	.byte	4,2,35,4,11
	.byte	'onStart',0
	.word	2601
	.byte	4,2,35,8,11
	.byte	'onStartData',0
	.word	185
	.byte	4,2,35,12,11
	.byte	'object',0
	.word	185
	.byte	4,2,35,16,11
	.byte	'started',0
	.word	162
	.byte	1,2,35,20,0,25,6,133,2,9,36,11
	.byte	'standardIo',0
	.word	1468
	.byte	4,2,35,0,11
	.byte	'echo',0
	.word	162
	.byte	1,2,35,4,11
	.byte	'showPrompt',0
	.word	162
	.byte	1,2,35,5,11
	.byte	'sendResultCode',0
	.word	162
	.byte	1,2,35,6,11
	.byte	'commandList',0
	.word	2555
	.byte	4,2,35,8,11
	.byte	'protocol',0
	.word	2606
	.byte	24,2,35,12,0
.L495:
	.byte	4
	.word	2716
	.byte	17
	.word	2439
	.byte	4
	.word	2845
	.byte	4
	.word	2387
	.byte	25,6,208,1,9,1,28
	.byte	'showPrompt',0,1
	.word	162
	.byte	1,7,2,35,0,28
	.byte	'enabled',0,1
	.word	162
	.byte	1,6,2,35,0,28
	.byte	'sendResultCode',0,1
	.word	162
	.byte	1,5,2,35,0,28
	.byte	'echo',0,1
	.word	162
	.byte	1,4,2,35,0,28
	.byte	'echoError',0,1
	.word	162
	.byte	1,3,2,35,0,0
.L529:
	.byte	4
	.word	2273
	.byte	26,40
	.word	2971
	.byte	27,9,0,25,6,178,1,9,12,11
	.byte	'cmdStr',0
	.word	2971
	.byte	4,2,35,0,11
	.byte	'cursor',0
	.word	223
	.byte	2,2,35,4,11
	.byte	'length',0
	.word	223
	.byte	2,2,35,6,11
	.byte	'historyAdd',0
	.word	162
	.byte	1,2,35,8,11
	.byte	'historyItem',0
	.word	223
	.byte	2,2,35,10,0,26,2
	.word	2273
	.byte	27,1,0,26,129,1
	.word	2273
	.byte	27,128,1,0,26,128,1
	.word	2273
	.byte	27,127,0,29,6,188,1,9,1,30
	.byte	'IFX_SHELL_CMD_STATE_NORMAL',0,0,30
	.byte	'IFX_SHELL_CMD_STATE_ESCAPE',0,1,30
	.byte	'IFX_SHELL_CMD_STATE_ESCAPE_BRACKET',0,2,30
	.byte	'IFX_SHELL_CMD_STATE_ESCAPE_BRACKET_NUMBER',0,3,0,25,6,218,1,9,136,2,11
	.byte	'echo',0
	.word	3081
	.byte	2,2,35,0,11
	.byte	'inputbuffer',0
	.word	3090
	.byte	129,1,2,35,2,11
	.byte	'cmdStr',0
	.word	3101
	.byte	128,1,3,35,131,1,11
	.byte	'cmdState',0
	.word	3111
	.byte	1,3,35,131,2,11
	.byte	'escBracketNum',0
	.word	2273
	.byte	1,3,35,132,2,0,25,6,232,1,9,224,2,11
	.byte	'io',0
	.word	1468
	.byte	4,2,35,0,11
	.byte	'control',0
	.word	2860
	.byte	1,2,35,4,11
	.byte	'cmdHistory',0
	.word	2976
	.byte	40,2,35,8,11
	.byte	'cmd',0
	.word	2985
	.byte	12,2,35,48,11
	.byte	'locals',0
	.word	3257
	.byte	136,2,2,35,60,11
	.byte	'commandList',0
	.word	2555
	.byte	4,3,35,196,2,11
	.byte	'protocol',0
	.word	2606
	.byte	24,3,35,200,2,0
.L499:
	.byte	4
	.word	3362
	.byte	17
	.word	2716
.L501:
	.byte	4
	.word	3495
.L505:
	.byte	4
	.word	2971
.L527:
	.byte	4
	.word	2985
.L552:
	.byte	4
	.word	2291
.L556:
	.byte	26,128,2
	.word	2273
	.byte	27,255,1,0
.L567:
	.byte	4
	.word	185
.L569:
	.byte	26,32
	.word	2273
	.byte	27,31,0
.L574:
	.byte	4
	.word	348
.L581:
	.byte	4
	.word	896
.L589:
	.byte	4
	.word	241
.L591:
	.byte	26,64
	.word	2273
	.byte	27,63,0
.L596:
	.byte	4
	.word	1921
.L604:
	.byte	4
	.word	1867
.L610:
	.byte	4
	.word	1867
	.byte	25,6,146,2,9,8,11
	.byte	'syntax',0
	.word	2291
	.byte	4,2,35,0,11
	.byte	'description',0
	.word	2291
	.byte	4,2,35,4,0,17
	.word	3584
.L669:
	.byte	4
	.word	3628
	.byte	21
	.word	1815
	.byte	22
	.word	1841
	.byte	14,0,21
	.word	1876
	.byte	22
	.word	1908
	.byte	14,0,21
	.word	1947
	.byte	22
	.word	1966
	.byte	14,0,21
	.word	1982
	.byte	22
	.word	1997
	.byte	22
	.word	2011
	.byte	14,0,31
	.word	2971
	.byte	31
	.word	2286
	.byte	32
	.byte	'strcpy',0,7,39,17
	.word	2971
	.byte	1,1,1,1,33,7,39,33
	.word	3691
	.byte	33,7,39,56
	.word	3696
	.byte	0,31
	.word	2971
	.byte	31
	.word	2286
	.byte	32
	.byte	'strncpy',0,7,40,17
	.word	2971
	.byte	1,1,1,1,33,7,40,33
	.word	3737
	.byte	33,7,40,56
	.word	3742
	.byte	33,7,40,68
	.word	2077
	.byte	0,32
	.byte	'strstr',0,7,48,17
	.word	2971
	.byte	1,1,1,1,33,7,48,39
	.word	2286
	.byte	33,7,48,53
	.word	2286
	.byte	0,32
	.byte	'strcmp',0,7,50,17
	.word	2028
	.byte	1,1,1,1,33,7,50,39
	.word	2286
	.byte	33,7,50,53
	.word	2286
	.byte	0,32
	.byte	'strlen',0,7,52,17
	.word	2077
	.byte	1,1,1,1,33,7,52,39
	.word	2286
	.byte	0,32
	.byte	'memset',0,7,56,17
	.word	185
	.byte	1,1,1,1,33,7,56,33
	.word	185
	.byte	33,7,56,36
	.word	2028
	.byte	33,7,56,41
	.word	2077
	.byte	0,31
	.word	2286
	.byte	31
	.word	2286
	.byte	32
	.byte	'sscanf',0,8,145,1,16
	.word	2028
	.byte	1,1,1,1,33,8,145,1,38
	.word	3936
	.byte	33,8,145,1,61
	.word	3941
	.byte	24,8,145,1,73,0
.L730:
	.byte	4
	.word	2519
	.byte	34
	.byte	'__INDIRECT__',0,9,1,1,1,1,1,5
	.byte	'__wchar_t',0,9,1,1
	.word	223
	.byte	5
	.byte	'__size_t',0,9,1,1
	.word	2077
	.byte	5
	.byte	'__ptrdiff_t',0,9,1,1
	.word	2028
	.byte	35,1,4
	.word	4070
	.byte	5
	.byte	'__codeptr',0,9,1,1
	.word	4072
	.byte	5
	.byte	'size_t',0,10,24,25
	.word	2077
	.byte	5
	.byte	'boolean',0,11,104,29
	.word	162
	.byte	5
	.byte	'uint8',0,11,108,29
	.word	162
	.byte	2
	.byte	'unsigned short int',0,2,7,5
	.byte	'uint16',0,11,112,29
	.word	4140
	.byte	5
	.byte	'uint32',0,11,116,29
	.word	896
	.byte	5
	.byte	'uint64',0,11,121,29
	.word	1921
	.byte	5
	.byte	'sint16',0,11,129,1,29
	.word	223
	.byte	5
	.byte	'sint32',0,11,134,1,29
	.word	348
	.byte	5
	.byte	'sint64',0,11,141,1,29
	.word	241
	.byte	5
	.byte	'float32',0,11,170,1,29
	.word	1867
	.byte	5
	.byte	'float64',0,11,175,1,29
	.word	1867
	.byte	5
	.byte	'pvoid',0,5,54,28
	.word	185
	.byte	5
	.byte	'Ifx_TickTime',0,5,76,28
	.word	241
	.byte	5
	.byte	'Ifx_SizeT',0,5,89,16
	.word	223
	.byte	5
	.byte	'IfxStdIf_DPipe',0,1,68,32
	.word	1068
	.byte	8
	.word	162
	.byte	4
	.word	4365
	.byte	5
	.byte	'IfxStdIf_DPipe_WriteEvent',0,1,70,32
	.word	4370
	.byte	5
	.byte	'IfxStdIf_DPipe_ReadEvent',0,1,71,32
	.word	4370
	.byte	5
	.byte	'Ifx_Shell_Command',0,6,175,1,3
	.word	2439
	.byte	5
	.byte	'Ifx_Shell_CmdLine',0,6,185,1,3
	.word	2985
	.byte	5
	.byte	'Ifx_Shell_CmdState',0,6,194,1,3
	.word	3111
	.byte	5
	.byte	'Ifx_Shell_Protocol',0,6,205,1,3
	.word	2606
	.byte	5
	.byte	'Ifx_Shell_Flags',0,6,215,1,3
	.word	2860
	.byte	5
	.byte	'Ifx_Shell_Runtime',0,6,225,1,3
	.word	3257
	.byte	5
	.byte	'Ifx_Shell',0,6,128,2,3
	.word	3362
	.byte	5
	.byte	'Ifx_Shell_Config',0,6,141,2,3
	.word	2716
	.byte	5
	.byte	'Ifx_Shell_Syntax',0,6,150,2,3
	.word	3584
	.byte	5
	.byte	'_iob_flag_t',0,8,82,25
	.word	4140
.L760:
	.byte	26,128,10
	.word	2273
	.byte	27,255,9,0,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L335:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,36,0,3,8,11,15,62,15,0,0,3,59,0,3,8,0,0,4,15,0,73,19,0
	.byte	0,5,22,0,3,8,58,15,59,15,57,15,73,19,0,0,6,21,1,73,19,54,15,39,12,0,0,7,5,0,73,19,0,0,8,53,0,73,19,0,0
	.byte	9,21,1,54,15,39,12,0,0,10,19,1,3,8,58,15,59,15,57,15,11,15,0,0,11,13,0,3,8,73,19,11,15,56,9,0,0,12,46
	.byte	1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,13,5,0,3,8,58,15,59,15,57,15,73,19,0,0,14,11,0,0,0
	.byte	15,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,16,21,0,54,15,39,12,0,0,17,38,0,73,19,0,0,18,46,1
	.byte	3,8,54,15,39,12,63,12,60,12,0,0,19,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,20,5,0,3,8,73,19,0,0,21
	.byte	46,1,49,19,0,0,22,5,0,49,19,0,0,23,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,24,24,0,58,15
	.byte	59,15,57,15,0,0,25,19,1,58,15,59,15,57,15,11,15,0,0,26,1,1,11,15,73,19,0,0,27,33,0,47,15,0,0,28,13,0,3
	.byte	8,11,15,73,19,13,15,12,15,56,9,0,0,29,4,1,58,15,59,15,57,15,11,15,0,0,30,40,0,3,8,28,13,0,0,31,55,0,73
	.byte	19,0,0,32,46,1,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,33,5,0,58,15,59,15,57,15,73,19
	.byte	0,0,34,46,0,3,8,58,15,59,15,57,15,54,15,63,12,60,12,0,0,35,21,0,54,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L336:
	.word	.L1013-.L1012
.L1012:
	.half	3
	.word	.L1015-.L1014
.L1014:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\App\\Tasking6_3_Install\\ctc\\include\\',0,0
	.byte	'IfxStdIf_DPipe.h',0,1,0,0
	.byte	'IfxStdIf.h',0,1,0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,2,0,0
	.byte	'IfxCpu_Intrinsics.h',0,2,0,0
	.byte	'Ifx_Types.h',0,2,0,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.h',0,0,0,0
	.byte	'string.h',0,3,0,0
	.byte	'stdio.h',0,3,0,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0
	.byte	'stddef.h',0,3,0,0
	.byte	'Platform_Types.h',0,2,0,0,0
.L1015:
.L1013:
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_initConfig')
	.sect	'.debug_info'
.L337:
	.word	239
	.half	3
	.word	.L338
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L340,.L339
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_initConfig',0,1,180,2,6,1,1,1
	.word	.L286,.L494,.L285
	.byte	4
	.byte	'config',0,1,180,2,45
	.word	.L495,.L496
	.byte	5
	.word	.L286,.L494
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_initConfig')
	.sect	'.debug_abbrev'
.L338:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_initConfig')
	.sect	'.debug_line'
.L339:
	.word	.L1017-.L1016
.L1016:
	.half	3
	.word	.L1019-.L1018
.L1018:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1019:
	.byte	5,34,7,0,5,2
	.word	.L286
	.byte	3,185,2,1,5,32,9
	.half	.L1020-.L286
	.byte	1,5,36,9
	.half	.L1021-.L1020
	.byte	3,4,1,5,34,1,9
	.half	.L1022-.L1021
	.byte	3,1,1,9
	.half	.L1023-.L1022
	.byte	3,1,1,9
	.half	.L1024-.L1023
	.byte	3,1,1,9
	.half	.L1025-.L1024
	.byte	3,1,1,9
	.half	.L1026-.L1025
	.byte	3,1,1,5,36,9
	.half	.L1027-.L1026
	.byte	3,1,1,5,34,1,9
	.half	.L1028-.L1027
	.byte	3,1,1,9
	.half	.L1029-.L1028
	.byte	3,1,1,5,1,9
	.half	.L1030-.L1029
	.byte	3,2,1,9
	.half	.L341-.L1030
	.byte	0,1,1
.L1017:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_initConfig')
	.sect	'.debug_ranges'
.L340:
	.word	-1,.L286,0,.L341-.L286,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_init')
	.sect	'.debug_info'
.L342:
	.word	296
	.half	3
	.word	.L343
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L345,.L344
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_init',0,1,203,2,9
	.word	.L497
	.byte	1,1,1
	.word	.L288,.L498,.L287
	.byte	4
	.byte	'shell',0,1,203,2,35
	.word	.L499,.L500
	.byte	4
	.byte	'config',0,1,203,2,66
	.word	.L501,.L502
	.byte	5
	.word	.L288,.L498
	.byte	6
	.byte	'i',0,1,205,2,12
	.word	.L503,.L504
	.byte	6
	.byte	'CmdHistory',0,1,206,2,12
	.word	.L505,.L506
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_init')
	.sect	'.debug_abbrev'
.L343:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_init')
	.sect	'.debug_line'
.L344:
	.word	.L1032-.L1031
.L1031:
	.half	3
	.word	.L1034-.L1033
.L1033:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1034:
	.byte	5,19,7,0,5,2
	.word	.L288
	.byte	3,208,2,1,5,9,3,122,1,5,22,9
	.half	.L834-.L288
	.byte	3,6,1,5,9,3,122,1,5,22,9
	.half	.L835-.L834
	.byte	3,6,1,5,43,9
	.half	.L833-.L835
	.byte	3,2,1,5,35,9
	.half	.L1035-.L833
	.byte	1,5,37,9
	.half	.L1036-.L1035
	.byte	3,1,1,5,35,1,5,12,9
	.half	.L1037-.L1036
	.byte	3,16,1,5,43,9
	.half	.L1038-.L1037
	.byte	3,114,1,5,35,9
	.half	.L1039-.L1038
	.byte	1,5,36,9
	.half	.L1040-.L1039
	.byte	3,14,1,5,30,3,125,1,5,19,9
	.half	.L1041-.L1040
	.byte	3,118,1,5,43,9
	.half	.L1042-.L1041
	.byte	1,5,12,9
	.half	.L1043-.L1042
	.byte	3,13,1,5,35,9
	.half	.L1044-.L1043
	.byte	3,115,1,5,36,9
	.half	.L1045-.L1044
	.byte	3,13,1,5,43,9
	.half	.L1046-.L1045
	.byte	3,116,1,5,35,9
	.half	.L1047-.L1046
	.byte	1,5,43,9
	.half	.L1048-.L1047
	.byte	3,1,1,5,35,9
	.half	.L1049-.L1048
	.byte	1,9
	.half	.L1050-.L1049
	.byte	3,1,1,9
	.half	.L1051-.L1050
	.byte	3,1,1,9
	.half	.L1052-.L1051
	.byte	3,2,1,9
	.half	.L1053-.L1052
	.byte	3,1,1,5,23,9
	.half	.L1054-.L1053
	.byte	3,3,1,5,36,9
	.half	.L1055-.L1054
	.byte	3,3,1,5,26,9
	.half	.L1056-.L1055
	.byte	3,1,1,5,51,9
	.half	.L1057-.L1056
	.byte	3,10,1,5,52,9
	.half	.L1058-.L1057
	.byte	3,122,1,5,31,9
	.half	.L1059-.L1058
	.byte	1,5,23,9
	.half	.L1060-.L1059
	.byte	3,4,1,5,39,9
	.half	.L836-.L1060
	.byte	3,4,1,5,36,9
	.half	.L49-.L836
	.byte	1,5,43,9
	.half	.L1061-.L49
	.byte	1,5,23,9
	.half	.L1062-.L1061
	.byte	1,5,51,3,126,1,5,30,7,9
	.half	.L1063-.L1062
	.byte	3,5,1,5,28,1,5,27,9
	.half	.L1064-.L1063
	.byte	3,3,1,5,22,9
	.half	.L1065-.L1064
	.byte	1,5,27,9
	.half	.L1066-.L1065
	.byte	1,5,23,9
	.half	.L837-.L1066
	.byte	3,3,1,5,5,9
	.half	.L1067-.L837
	.byte	1,5,35,7,9
	.half	.L1068-.L1067
	.byte	3,2,1,5,41,9
	.half	.L1069-.L1068
	.byte	1,5,35,9
	.half	.L1070-.L1069
	.byte	3,1,1,5,41,9
	.half	.L1071-.L1070
	.byte	1,5,12,9
	.half	.L50-.L1071
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L346-.L50
	.byte	0,1,1
.L1032:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_init')
	.sect	'.debug_ranges'
.L345:
	.word	-1,.L288,0,.L346-.L288,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_deinit')
	.sect	'.debug_info'
.L347:
	.word	234
	.half	3
	.word	.L348
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L350,.L349
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_deinit',0,1,136,5,6,1,1,1
	.word	.L292,.L507,.L291
	.byte	4
	.byte	'shell',0,1,136,5,34
	.word	.L499,.L508
	.byte	5
	.word	.L292,.L507
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_deinit')
	.sect	'.debug_abbrev'
.L348:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_deinit')
	.sect	'.debug_line'
.L349:
	.word	.L1073-.L1072
.L1072:
	.half	3
	.word	.L1075-.L1074
.L1074:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1075:
	.byte	5,1,7,0,5,2
	.word	.L292
	.byte	3,139,5,1,7,9
	.half	.L351-.L292
	.byte	0,1,1
.L1073:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_deinit')
	.sect	'.debug_ranges'
.L350:
	.word	-1,.L292,0,.L351-.L292,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_enable')
	.sect	'.debug_info'
.L352:
	.word	271
	.half	3
	.word	.L353
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L355,.L354
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_enable',0,1,155,10,6,1,1,1
	.word	.L328,.L509,.L327
	.byte	4
	.byte	'shell',0,1,155,10,34
	.word	.L499,.L510
	.byte	5
	.word	.L328,.L509
	.byte	6
	.word	.L511,.L512,.L513
	.byte	7
	.word	.L514,.L515
	.byte	8
	.word	.L516,.L512,.L513
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_enable')
	.sect	'.debug_abbrev'
.L353:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_enable')
	.sect	'.debug_line'
.L354:
	.word	.L1077-.L1076
.L1076:
	.half	3
	.word	.L1079-.L1078
.L1078:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf',0,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0
	.byte	'IfxStdIf_DPipe.h',0,1,0,0,0
.L1079:
	.byte	5,6,7,0,5,2
	.word	.L328
	.byte	3,154,10,1,5,33,9
	.half	.L1004-.L328
	.byte	3,3,1,4,2,5,10,9
	.half	.L512-.L1004
	.byte	3,183,120,1,5,25,9
	.half	.L1080-.L512
	.byte	1,4,1,5,19,9
	.half	.L513-.L1080
	.byte	3,203,7,1,5,28,9
	.half	.L1081-.L513
	.byte	1,5,1,9
	.half	.L1082-.L1081
	.byte	3,1,1,7,9
	.half	.L356-.L1082
	.byte	0,1,1
.L1077:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_enable')
	.sect	'.debug_ranges'
.L355:
	.word	-1,.L328,0,.L356-.L328,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_disable')
	.sect	'.debug_info'
.L357:
	.word	235
	.half	3
	.word	.L358
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L360,.L359
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_disable',0,1,164,10,6,1,1,1
	.word	.L330,.L517,.L329
	.byte	4
	.byte	'shell',0,1,164,10,35
	.word	.L499,.L518
	.byte	5
	.word	.L330,.L517
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_disable')
	.sect	'.debug_abbrev'
.L358:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_disable')
	.sect	'.debug_line'
.L359:
	.word	.L1084-.L1083
.L1083:
	.half	3
	.word	.L1086-.L1085
.L1085:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1086:
	.byte	5,19,7,0,5,2
	.word	.L330
	.byte	3,165,10,1,5,28,9
	.half	.L1087-.L330
	.byte	1,5,1,9
	.half	.L1088-.L1087
	.byte	3,1,1,7,9
	.half	.L361-.L1088
	.byte	0,1,1
.L1084:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_disable')
	.sect	'.debug_ranges'
.L360:
	.word	-1,.L330,0,.L361-.L330,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_process')
	.sect	'.debug_info'
.L362:
	.word	511
	.half	3
	.word	.L363
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L365,.L364
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_process',0,1,132,3,6,1,1,1
	.word	.L290,.L519,.L289
	.byte	4
	.byte	'shell',0,1,132,3,35
	.word	.L499,.L520
	.byte	5
	.word	.L290,.L519
	.byte	6
	.byte	'i',0,1,134,3,24
	.word	.L521,.L522
	.byte	6
	.byte	'j',0,1,134,3,27
	.word	.L521,.L523
	.byte	6
	.byte	'count',0,1,135,3,24
	.word	.L521,.L524
	.byte	6
	.byte	'readCount',0,1,136,3,24
	.word	.L521,.L525
	.byte	6
	.byte	'NormalKeyPress',0,1,137,3,24
	.word	.L497,.L526
	.byte	6
	.byte	'Cmd',0,1,139,3,24
	.word	.L527,.L528
	.byte	6
	.byte	'inputbuffer',0,1,140,3,24
	.word	.L529,.L530
	.byte	6
	.byte	'cmdStr',0,1,141,3,24
	.word	.L529,.L531
	.byte	6
	.byte	'CmdHistory',0,1,142,3,24
	.word	.L505,.L532
	.byte	7
	.word	.L533,.L534,.L535
	.byte	8
	.word	.L536,.L537
	.byte	8
	.word	.L538,.L539
	.byte	8
	.word	.L540,.L541
	.byte	8
	.word	.L542,.L543
	.byte	9
	.word	.L544,.L534,.L535
	.byte	0,5
	.word	.L545,.L80
	.byte	6
	.byte	'ii',0,1,250,3,25
	.word	.L546,.L547
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_process')
	.sect	'.debug_abbrev'
.L363:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_process')
	.sect	'.debug_line'
.L364:
	.word	.L1090-.L1089
.L1089:
	.half	3
	.word	.L1092-.L1091
.L1091:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf',0,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0
	.byte	'IfxStdIf_DPipe.h',0,1,0,0,0
.L1092:
	.byte	5,6,7,0,5,2
	.word	.L290
	.byte	3,131,3,1,5,43,9
	.half	.L838-.L290
	.byte	3,8,1,5,23,9
	.half	.L841-.L838
	.byte	3,4,1,5,43,9
	.half	.L1093-.L841
	.byte	3,124,1,9
	.half	.L843-.L1093
	.byte	3,2,1,9
	.half	.L845-.L843
	.byte	3,127,1,5,5,9
	.half	.L846-.L845
	.byte	3,3,1,5,25,7,9
	.half	.L1094-.L846
	.byte	3,5,1,5,9,9
	.half	.L839-.L1094
	.byte	1,5,65,7,9
	.half	.L1095-.L839
	.byte	1,5,74,9
	.half	.L1096-.L1095
	.byte	1,5,24,7,9
	.half	.L1097-.L1096
	.byte	3,2,1,5,48,9
	.half	.L844-.L1097
	.byte	1,5,49,7,9
	.half	.L53-.L844
	.byte	3,20,1,5,34,3,1,1,5,19,9
	.half	.L847-.L53
	.byte	3,127,1,4,2,5,52,9
	.half	.L534-.L847
	.byte	3,226,126,1,4,1,5,62,3,159,1,1,4,2,5,52,9
	.half	.L1098-.L534
	.byte	3,225,126,1,5,17,9
	.half	.L848-.L1098
	.byte	1,5,29,9
	.half	.L1099-.L848
	.byte	1,5,52,9
	.half	.L1100-.L1099
	.byte	1,4,1,5,18,9
	.half	.L535-.L1100
	.byte	3,162,1,1,5,21,3,126,1,5,16,9
	.half	.L849-.L535
	.byte	3,2,1,5,30,1,5,32,9
	.half	.L57-.L849
	.byte	3,6,1,5,18,9
	.half	.L851-.L57
	.byte	3,51,1,5,28,9
	.half	.L1101-.L851
	.byte	3,74,1,5,32,9
	.half	.L853-.L1101
	.byte	3,3,1,5,18,9
	.half	.L1102-.L853
	.byte	3,51,1,7,9
	.half	.L1103-.L1102
	.byte	3,80,1,9
	.half	.L1104-.L1103
	.byte	3,1,1,9
	.half	.L1105-.L1104
	.byte	3,212,0,1,9
	.half	.L1106-.L1105
	.byte	3,41,1,9
	.half	.L1107-.L1106
	.byte	3,1,1,9
	.half	.L1108-.L1107
	.byte	3,1,1,9
	.half	.L1109-.L1108
	.byte	3,1,1,9
	.half	.L1110-.L1109
	.byte	3,104,1,9
	.half	.L1111-.L1110
	.byte	3,1,1,9
	.half	.L1112-.L1111
	.byte	3,1,1,9
	.half	.L1113-.L1112
	.byte	3,1,1,9
	.half	.L1114-.L1113
	.byte	3,110,1,9
	.half	.L1115-.L1114
	.byte	3,55,1,5,17,9
	.half	.L59-.L1115
	.byte	3,242,126,1,5,24,9
	.half	.L73-.L59
	.byte	3,4,1,5,35,9
	.half	.L1116-.L73
	.byte	1,5,17,9
	.half	.L1117-.L1116
	.byte	1,5,27,7,9
	.half	.L1118-.L1117
	.byte	3,2,1,5,43,9
	.half	.L852-.L1118
	.byte	1,5,41,9
	.half	.L1119-.L852
	.byte	1,5,28,9
	.half	.L1120-.L1119
	.byte	3,2,1,5,21,9
	.half	.L1121-.L1120
	.byte	1,5,62,7,9
	.half	.L1122-.L1121
	.byte	3,6,1,5,75,9
	.half	.L1123-.L1122
	.byte	3,125,1,5,47,9
	.half	.L76-.L1123
	.byte	3,3,1,5,62,9
	.half	.L1124-.L76
	.byte	1,5,71,9
	.half	.L1125-.L1124
	.byte	1,5,75,9
	.half	.L1126-.L1125
	.byte	3,125,1,5,43,7,9
	.half	.L1127-.L1126
	.byte	3,7,1,5,56,9
	.half	.L854-.L1127
	.byte	1,5,43,9
	.half	.L855-.L854
	.byte	1,5,56,9
	.half	.L1128-.L855
	.byte	1,5,46,9
	.half	.L75-.L1128
	.byte	3,4,1,5,35,9
	.half	.L74-.L75
	.byte	3,4,1,5,17,9
	.half	.L1129-.L74
	.byte	1,5,47,7,9
	.half	.L1130-.L1129
	.byte	3,2,1,5,53,9
	.half	.L1131-.L1130
	.byte	1,5,29,9
	.half	.L77-.L1131
	.byte	3,4,1,9
	.half	.L1132-.L77
	.byte	3,3,1,5,33,9
	.half	.L1133-.L1132
	.byte	3,3,1,5,36,9
	.half	.L1134-.L1133
	.byte	3,3,1,5,34,1,5,17,9
	.half	.L1135-.L1134
	.byte	3,1,1,5,24,9
	.half	.L58-.L1135
	.byte	3,5,1,5,17,9
	.half	.L1136-.L58
	.byte	1,5,39,7,9
	.half	.L1137-.L1136
	.byte	3,3,1,5,21,9
	.half	.L1138-.L1137
	.byte	1,5,51,7,9
	.half	.L1139-.L1138
	.byte	3,3,1,5,57,9
	.half	.L1140-.L1139
	.byte	1,5,37,9
	.half	.L1141-.L1140
	.byte	3,3,1,5,73,9
	.half	.L859-.L1141
	.byte	3,2,1,5,62,9
	.half	.L858-.L859
	.byte	3,126,1,5,73,9
	.half	.L82-.L858
	.byte	3,2,1,5,55,9
	.half	.L1142-.L82
	.byte	1,5,61,9
	.half	.L1143-.L1142
	.byte	1,5,65,9
	.half	.L1144-.L1143
	.byte	3,126,1,5,54,9
	.half	.L81-.L1144
	.byte	1,5,62,9
	.half	.L1145-.L81
	.byte	1,5,57,7,9
	.half	.L1146-.L1145
	.byte	3,6,1,5,25,9
	.half	.L545-.L1146
	.byte	3,1,1,5,40,9
	.half	.L80-.L545
	.byte	3,4,1,5,80,9
	.half	.L1147-.L80
	.byte	1,5,36,9
	.half	.L1148-.L1147
	.byte	1,5,62,9
	.half	.L1149-.L1148
	.byte	1,5,89,9
	.half	.L1150-.L1149
	.byte	1,5,36,1,5,89,9
	.half	.L1151-.L1150
	.byte	1,5,31,9
	.half	.L1152-.L1151
	.byte	3,3,1,5,27,9
	.half	.L1153-.L1152
	.byte	1,5,47,9
	.half	.L1154-.L1153
	.byte	1,5,45,9
	.half	.L1155-.L1154
	.byte	1,5,24,9
	.half	.L1156-.L1155
	.byte	3,2,1,5,32,9
	.half	.L1157-.L1156
	.byte	1,5,24,9
	.half	.L1158-.L1157
	.byte	3,1,1,5,32,9
	.half	.L1159-.L1158
	.byte	1,5,39,9
	.half	.L1160-.L1159
	.byte	3,3,1,5,37,1,5,17,9
	.half	.L1161-.L1160
	.byte	3,3,1,5,42,9
	.half	.L61-.L1161
	.byte	3,4,1,5,17,3,1,1,5,34,9
	.half	.L70-.L61
	.byte	3,5,1,5,17,9
	.half	.L1162-.L70
	.byte	1,5,46,7,9
	.half	.L1163-.L1162
	.byte	3,3,1,5,80,1,5,34,9
	.half	.L66-.L1163
	.byte	3,15,1,5,17,9
	.half	.L1164-.L66
	.byte	1,5,71,7,9
	.half	.L1165-.L1164
	.byte	3,3,1,5,73,1,5,34,9
	.half	.L62-.L1165
	.byte	3,18,1,5,17,9
	.half	.L1166-.L62
	.byte	1,5,49,7,9
	.half	.L1167-.L1166
	.byte	3,3,1,5,51,9
	.half	.L1168-.L1167
	.byte	3,1,1,5,65,3,127,1,5,34,9
	.half	.L71-.L1168
	.byte	3,13,1,5,17,9
	.half	.L1169-.L71
	.byte	1,5,84,7,9
	.half	.L1170-.L1169
	.byte	3,3,1,5,68,1,5,84,9
	.half	.L90-.L1170
	.byte	1,5,46,9
	.half	.L862-.L90
	.byte	3,3,1,5,44,9
	.half	.L86-.L862
	.byte	1,5,88,9
	.half	.L1171-.L86
	.byte	3,125,1,5,32,9
	.half	.L72-.L1171
	.byte	3,14,1,5,13,9
	.half	.L78-.L72
	.byte	3,8,1,5,42,7,9
	.half	.L1172-.L78
	.byte	3,3,1,5,40,1,5,24,9
	.half	.L1173-.L1172
	.byte	3,3,1,5,64,9
	.half	.L1174-.L1173
	.byte	1,5,17,9
	.half	.L1175-.L1174
	.byte	1,5,39,7,9
	.half	.L1176-.L1175
	.byte	3,3,1,5,37,1,5,54,9
	.half	.L1177-.L1176
	.byte	3,3,1,5,31,9
	.half	.L863-.L1177
	.byte	1,5,27,9
	.half	.L1178-.L863
	.byte	1,5,54,9
	.half	.L1179-.L1178
	.byte	1,5,41,9
	.half	.L1180-.L1179
	.byte	1,5,24,9
	.half	.L1181-.L1180
	.byte	3,1,1,5,32,9
	.half	.L1182-.L1181
	.byte	1,5,44,9
	.half	.L1183-.L1182
	.byte	3,3,1,5,57,9
	.half	.L1184-.L1183
	.byte	1,5,40,9
	.half	.L1185-.L1184
	.byte	1,5,33,1,5,39,9
	.half	.L1186-.L1185
	.byte	3,2,1,5,21,9
	.half	.L1187-.L1186
	.byte	1,5,60,7,9
	.half	.L1188-.L1187
	.byte	3,3,1,5,47,9
	.half	.L1189-.L1188
	.byte	1,5,62,9
	.half	.L1190-.L1189
	.byte	3,1,1,5,51,9
	.half	.L1191-.L1190
	.byte	1,5,70,9
	.half	.L1192-.L1191
	.byte	1,5,21,9
	.half	.L1193-.L1192
	.byte	3,124,1,5,37,9
	.half	.L96-.L1193
	.byte	3,10,1,5,33,9
	.half	.L95-.L96
	.byte	3,175,126,1,5,30,9
	.half	.L56-.L95
	.byte	1,5,1,7,9
	.half	.L52-.L56
	.byte	3,214,1,1,7,9
	.half	.L366-.L52
	.byte	0,1,1
.L1090:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_process')
	.sect	'.debug_ranges'
.L365:
	.word	-1,.L290,0,.L366-.L290,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_skipWhitespace')
	.sect	'.debug_info'
.L367:
	.word	245
	.half	3
	.word	.L368
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L370,.L369
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_skipWhitespace',0,1,143,5,7
	.word	.L548
	.byte	1,1,1
	.word	.L294,.L549,.L293
	.byte	4
	.byte	'args',0,1,143,5,38
	.word	.L548,.L550
	.byte	5
	.word	.L294,.L549
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_skipWhitespace')
	.sect	'.debug_abbrev'
.L368:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_skipWhitespace')
	.sect	'.debug_line'
.L369:
	.word	.L1195-.L1194
.L1194:
	.half	3
	.word	.L1197-.L1196
.L1196:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1197:
	.byte	5,5,7,0,5,2
	.word	.L294
	.byte	3,144,5,1,5,66,7,9
	.half	.L1198-.L294
	.byte	3,2,1,5,25,9
	.half	.L102-.L1198
	.byte	3,2,1,5,17,9
	.half	.L100-.L102
	.byte	3,126,1,5,16,9
	.half	.L1199-.L100
	.byte	1,5,51,7,9
	.half	.L1200-.L1199
	.byte	1,5,5,9
	.half	.L99-.L1200
	.byte	3,6,1,5,1,9
	.half	.L866-.L99
	.byte	3,1,1,7,9
	.half	.L371-.L866
	.byte	0,1,1
.L1195:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_skipWhitespace')
	.sect	'.debug_ranges'
.L370:
	.word	-1,.L294,0,.L371-.L294,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_matchToken')
	.sect	'.debug_info'
.L372:
	.word	332
	.half	3
	.word	.L373
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L375,.L374
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_matchToken',0,1,157,5,9
	.word	.L497
	.byte	1,1,1
	.word	.L296,.L551,.L295
	.byte	4
	.byte	'argsPtr',0,1,157,5,37
	.word	.L552,.L553
	.byte	4
	.byte	'token',0,1,157,5,52
	.word	.L548,.L554
	.byte	5
	.word	.L296,.L551
	.byte	6
	.byte	'savedArguments',0,1,159,5,13
	.word	.L548,.L555
	.byte	6
	.byte	'buffer',0,1,160,5,13
	.word	.L556,.L557
	.byte	6
	.byte	'result',0,1,161,5,13
	.word	.L497,.L558
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_matchToken')
	.sect	'.debug_abbrev'
.L373:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_matchToken')
	.sect	'.debug_line'
.L374:
	.word	.L1202-.L1201
.L1201:
	.half	3
	.word	.L1204-.L1203
.L1203:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1204:
	.byte	5,9,7,0,5,2
	.word	.L296
	.byte	3,156,5,1,5,30,9
	.half	.L871-.L296
	.byte	3,2,1,5,28,9
	.half	.L872-.L871
	.byte	3,2,1,5,39,3,2,1,5,47,9
	.half	.L869-.L872
	.byte	1,5,5,9
	.half	.L868-.L869
	.byte	1,5,27,7,9
	.half	.L1205-.L868
	.byte	3,2,1,5,20,9
	.half	.L874-.L1205
	.byte	3,2,1,5,5,9
	.half	.L105-.L874
	.byte	3,4,1,5,18,7,9
	.half	.L1206-.L105
	.byte	3,3,1,5,5,9
	.half	.L107-.L1206
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L376-.L107
	.byte	0,1,1
.L1202:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_matchToken')
	.sect	'.debug_ranges'
.L375:
	.word	-1,.L296,0,.L376-.L296,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_parseToken')
	.sect	'.debug_info'
.L377:
	.word	334
	.half	3
	.word	.L378
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L380,.L379
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_parseToken',0,1,209,5,9
	.word	.L497
	.byte	1,1,1
	.word	.L300,.L559,.L299
	.byte	4
	.byte	'argsPtr',0,1,209,5,37
	.word	.L552,.L560
	.byte	4
	.byte	'tokenBuffer',0,1,209,5,52
	.word	.L529,.L561
	.byte	4
	.byte	'bufferLength',0,1,209,5,69
	.word	.L546,.L562
	.byte	5
	.word	.L300,.L559
	.byte	6
	.byte	'mindex',0,1,211,5,11
	.word	.L546,.L563
	.byte	6
	.byte	'args',0,1,212,5,11
	.word	.L548,.L564
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_parseToken')
	.sect	'.debug_abbrev'
.L378:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_parseToken')
	.sect	'.debug_line'
.L379:
	.word	.L1208-.L1207
.L1207:
	.half	3
	.word	.L1210-.L1209
.L1209:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1210:
	.byte	5,9,7,0,5,2
	.word	.L300
	.byte	3,208,5,1,5,18,9
	.half	.L886-.L300
	.byte	3,2,1,5,45,3,1,1,5,9,9
	.half	.L884-.L886
	.byte	3,125,1,5,45,9
	.half	.L888-.L884
	.byte	3,3,1,5,22,9
	.half	.L885-.L888
	.byte	3,2,1,5,20,1,5,5,9
	.half	.L1211-.L885
	.byte	3,2,1,5,9,7,9
	.half	.L1212-.L1211
	.byte	3,5,1,5,18,9
	.half	.L1213-.L1212
	.byte	1,5,5,9
	.half	.L1214-.L1213
	.byte	1,5,65,7,9
	.half	.L1215-.L1214
	.byte	3,4,1,5,13,9
	.half	.L117-.L1215
	.byte	3,2,1,5,23,7,9
	.half	.L1216-.L117
	.byte	3,3,1,5,39,3,127,1,5,37,9
	.half	.L1217-.L1216
	.byte	1,5,17,9
	.half	.L116-.L1217
	.byte	3,124,1,5,16,9
	.half	.L1218-.L116
	.byte	1,5,60,7,9
	.half	.L1219-.L1218
	.byte	1,5,57,9
	.half	.L1220-.L1219
	.byte	1,5,22,7,9
	.half	.L119-.L1220
	.byte	3,12,1,5,9,9
	.half	.L1221-.L119
	.byte	1,5,21,7,9
	.half	.L1222-.L1221
	.byte	3,5,1,5,24,9
	.half	.L1223-.L1222
	.byte	1,5,9,9
	.half	.L115-.L1223
	.byte	3,5,1,5,20,7,9
	.half	.L114-.L115
	.byte	3,2,1,5,1,3,24,1,5,67,7,9
	.half	.L122-.L114
	.byte	3,107,1,5,13,9
	.half	.L125-.L122
	.byte	3,2,1,5,23,7,9
	.half	.L1224-.L125
	.byte	3,3,1,5,39,3,127,1,5,37,9
	.half	.L1225-.L1224
	.byte	1,5,25,9
	.half	.L126-.L1225
	.byte	3,4,1,5,17,9
	.half	.L124-.L126
	.byte	3,120,1,5,16,9
	.half	.L1226-.L124
	.byte	1,5,52,7,9
	.half	.L1227-.L1226
	.byte	1,5,5,9
	.half	.L121-.L1227
	.byte	3,13,1,5,48,7,9
	.half	.L1228-.L121
	.byte	3,2,1,5,26,9
	.half	.L887-.L1228
	.byte	1,5,20,9
	.half	.L1229-.L887
	.byte	1,5,56,9
	.half	.L889-.L1229
	.byte	1,5,54,9
	.half	.L1230-.L889
	.byte	1,5,41,9
	.half	.L129-.L1230
	.byte	3,3,1,5,14,9
	.half	.L890-.L129
	.byte	1,5,12,9
	.half	.L1231-.L890
	.byte	3,2,1,5,1,3,1,1,7,9
	.half	.L381-.L1231
	.byte	0,1,1
.L1208:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_parseToken')
	.sect	'.debug_ranges'
.L380:
	.word	-1,.L300,0,.L381-.L300,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_parseAddress')
	.sect	'.debug_info'
.L382:
	.word	308
	.half	3
	.word	.L383
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L385,.L384
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_parseAddress',0,1,148,6,9
	.word	.L497
	.byte	1,1,1
	.word	.L302,.L565,.L301
	.byte	4
	.byte	'argsPtr',0,1,148,6,39
	.word	.L552,.L566
	.byte	4
	.byte	'address',0,1,148,6,55
	.word	.L567,.L568
	.byte	5
	.word	.L302,.L565
	.byte	6
	.byte	'buffer',0,1,150,6,13
	.word	.L569,.L570
	.byte	6
	.byte	'result',0,1,151,6,13
	.word	.L497,.L571
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_parseAddress')
	.sect	'.debug_abbrev'
.L383:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_parseAddress')
	.sect	'.debug_line'
.L384:
	.word	.L1233-.L1232
.L1232:
	.half	3
	.word	.L1235-.L1234
.L1234:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1235:
	.byte	5,9,7,0,5,2
	.word	.L302
	.byte	3,147,6,1,5,16,9
	.half	.L895-.L302
	.byte	3,5,1,5,14,9
	.half	.L1236-.L895
	.byte	1,5,39,9
	.half	.L1237-.L1236
	.byte	3,2,1,5,47,9
	.half	.L893-.L1237
	.byte	1,5,5,9
	.half	.L894-.L893
	.byte	1,5,16,7,9
	.half	.L1238-.L894
	.byte	3,2,1,5,23,1,5,25,9
	.half	.L131-.L1238
	.byte	3,4,1,5,53,9
	.half	.L1239-.L131
	.byte	1,5,18,9
	.half	.L896-.L1239
	.byte	1,5,79,7,9
	.half	.L1240-.L896
	.byte	1,5,64,9
	.half	.L1241-.L1240
	.byte	1,5,72,9
	.half	.L1242-.L1241
	.byte	1,5,104,9
	.half	.L1243-.L1242
	.byte	1,5,53,9
	.half	.L1244-.L1243
	.byte	1,5,5,9
	.half	.L132-.L1244
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L386-.L132
	.byte	0,1,1
.L1233:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_parseAddress')
	.sect	'.debug_ranges'
.L385:
	.word	-1,.L302,0,.L386-.L302,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_parseSInt32')
	.sect	'.debug_info'
.L387:
	.word	306
	.half	3
	.word	.L388
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L390,.L389
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_parseSInt32',0,1,168,6,9
	.word	.L497
	.byte	1,1,1
	.word	.L304,.L572,.L303
	.byte	4
	.byte	'argsPtr',0,1,168,6,38
	.word	.L552,.L573
	.byte	4
	.byte	'value',0,1,168,6,55
	.word	.L574,.L575
	.byte	5
	.word	.L304,.L572
	.byte	6
	.byte	'value64',0,1,170,6,13
	.word	.L576,.L577
	.byte	6
	.byte	'result',0,1,171,6,13
	.word	.L497,.L578
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_parseSInt32')
	.sect	'.debug_abbrev'
.L388:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_parseSInt32')
	.sect	'.debug_line'
.L389:
	.word	.L1246-.L1245
.L1245:
	.half	3
	.word	.L1248-.L1247
.L1247:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1248:
	.byte	5,9,7,0,5,2
	.word	.L304
	.byte	3,167,6,1,5,14,9
	.half	.L900-.L304
	.byte	3,5,1,5,12,1,5,41,9
	.half	.L1249-.L900
	.byte	3,2,1,5,5,9
	.half	.L898-.L1249
	.byte	1,5,1,7,9
	.half	.L1250-.L898
	.byte	3,11,1,5,26,7,9
	.half	.L136-.L1250
	.byte	3,123,1,5,16,9
	.half	.L1251-.L136
	.byte	1,9
	.half	.L1252-.L1251
	.byte	3,1,1,5,1,3,4,1,7,9
	.half	.L391-.L1252
	.byte	0,1,1
.L1246:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_parseSInt32')
	.sect	'.debug_ranges'
.L390:
	.word	-1,.L304,0,.L391-.L304,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_parseUInt32')
	.sect	'.debug_info'
.L392:
	.word	323
	.half	3
	.word	.L393
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L395,.L394
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_parseUInt32',0,1,189,6,9
	.word	.L497
	.byte	1,1,1
	.word	.L306,.L579,.L305
	.byte	4
	.byte	'argsPtr',0,1,189,6,38
	.word	.L552,.L580
	.byte	4
	.byte	'value',0,1,189,6,55
	.word	.L581,.L582
	.byte	4
	.byte	'hex',0,1,189,6,70
	.word	.L497,.L583
	.byte	5
	.word	.L306,.L579
	.byte	6
	.byte	'value64',0,1,191,6,13
	.word	.L584,.L585
	.byte	6
	.byte	'result',0,1,192,6,13
	.word	.L497,.L586
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_parseUInt32')
	.sect	'.debug_abbrev'
.L393:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_parseUInt32')
	.sect	'.debug_line'
.L394:
	.word	.L1254-.L1253
.L1253:
	.half	3
	.word	.L1256-.L1255
.L1255:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1256:
	.byte	5,9,7,0,5,2
	.word	.L306
	.byte	3,188,6,1,5,14,9
	.half	.L904-.L306
	.byte	3,5,1,5,12,1,5,41,9
	.half	.L1257-.L904
	.byte	3,2,1,5,50,9
	.half	.L903-.L1257
	.byte	1,5,5,9
	.half	.L902-.L903
	.byte	1,5,1,7,9
	.half	.L1258-.L902
	.byte	3,11,1,5,26,7,9
	.half	.L139-.L1258
	.byte	3,123,1,5,16,9
	.half	.L1259-.L139
	.byte	1,9
	.half	.L1260-.L1259
	.byte	3,1,1,5,1,3,4,1,7,9
	.half	.L396-.L1260
	.byte	0,1,1
.L1254:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_parseUInt32')
	.sect	'.debug_ranges'
.L395:
	.word	-1,.L306,0,.L396-.L306,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_parseSInt64')
	.sect	'.debug_info'
.L397:
	.word	305
	.half	3
	.word	.L398
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L400,.L399
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_parseSInt64',0,1,210,6,9
	.word	.L497
	.byte	1,1,1
	.word	.L308,.L587,.L307
	.byte	4
	.byte	'argsPtr',0,1,210,6,38
	.word	.L552,.L588
	.byte	4
	.byte	'value',0,1,210,6,55
	.word	.L589,.L590
	.byte	5
	.word	.L308,.L587
	.byte	6
	.byte	'buffer',0,1,212,6,13
	.word	.L591,.L592
	.byte	6
	.byte	'result',0,1,213,6,13
	.word	.L497,.L593
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_parseSInt64')
	.sect	'.debug_abbrev'
.L398:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_parseSInt64')
	.sect	'.debug_line'
.L399:
	.word	.L1262-.L1261
.L1261:
	.half	3
	.word	.L1264-.L1263
.L1263:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1264:
	.byte	5,9,7,0,5,2
	.word	.L308
	.byte	3,209,6,1,5,14,9
	.half	.L908-.L308
	.byte	3,5,1,5,12,1,5,39,9
	.half	.L1265-.L908
	.byte	3,2,1,5,47,9
	.half	.L907-.L1265
	.byte	1,5,5,9
	.half	.L906-.L907
	.byte	1,5,16,7,9
	.half	.L1266-.L906
	.byte	3,2,1,5,23,1,5,25,9
	.half	.L142-.L1266
	.byte	3,4,1,5,53,9
	.half	.L1267-.L142
	.byte	1,5,18,9
	.half	.L909-.L1267
	.byte	1,5,87,7,9
	.half	.L1268-.L909
	.byte	1,5,64,9
	.half	.L1269-.L1268
	.byte	1,5,72,9
	.half	.L1270-.L1269
	.byte	1,5,94,9
	.half	.L1271-.L1270
	.byte	1,5,53,9
	.half	.L1272-.L1271
	.byte	1,5,5,9
	.half	.L143-.L1272
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L401-.L143
	.byte	0,1,1
.L1262:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_parseSInt64')
	.sect	'.debug_ranges'
.L400:
	.word	-1,.L308,0,.L401-.L308,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_parseUInt64')
	.sect	'.debug_info'
.L402:
	.word	359
	.half	3
	.word	.L403
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L405,.L404
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_parseUInt64',0,1,230,6,9
	.word	.L497
	.byte	1,1,1
	.word	.L310,.L594,.L309
	.byte	4
	.byte	'argsPtr',0,1,230,6,38
	.word	.L552,.L595
	.byte	4
	.byte	'value',0,1,230,6,55
	.word	.L596,.L597
	.byte	4
	.byte	'hex',0,1,230,6,70
	.word	.L497,.L598
	.byte	5
	.word	.L310,.L594
	.byte	6
	.byte	'buffer',0,1,232,6,13
	.word	.L591,.L599
	.byte	6
	.byte	'result',0,1,233,6,13
	.word	.L497,.L600
	.byte	5
	.word	.L147,.L148
	.byte	6
	.byte	'bufferPointer',0,1,243,6,15
	.word	.L529,.L601
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_parseUInt64')
	.sect	'.debug_abbrev'
.L403:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_parseUInt64')
	.sect	'.debug_line'
.L404:
	.word	.L1274-.L1273
.L1273:
	.half	3
	.word	.L1276-.L1275
.L1275:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1276:
	.byte	5,9,7,0,5,2
	.word	.L310
	.byte	3,229,6,1,5,47,9
	.half	.L910-.L310
	.byte	3,7,1,5,9,3,121,1,5,14,9
	.half	.L912-.L910
	.byte	3,5,1,5,12,1,5,39,9
	.half	.L1277-.L912
	.byte	3,2,1,5,47,9
	.half	.L913-.L1277
	.byte	1,5,5,9
	.half	.L911-.L913
	.byte	1,5,16,7,9
	.half	.L1278-.L911
	.byte	3,2,1,5,23,1,5,27,9
	.half	.L147-.L1278
	.byte	3,6,1,5,20,1,5,31,9
	.half	.L1279-.L147
	.byte	3,126,1,5,13,9
	.half	.L915-.L1279
	.byte	3,2,1,5,42,7,9
	.half	.L1280-.L915
	.byte	1,5,49,9
	.half	.L1281-.L1280
	.byte	1,5,46,9
	.half	.L1282-.L1281
	.byte	1,5,27,7,9
	.half	.L1283-.L1282
	.byte	3,3,1,5,43,3,127,1,5,36,9
	.half	.L149-.L1283
	.byte	3,6,1,5,9,9
	.half	.L1284-.L149
	.byte	3,126,1,5,64,7,9
	.half	.L1285-.L1284
	.byte	3,2,1,5,22,9
	.half	.L914-.L1285
	.byte	1,5,105,7,9
	.half	.L1286-.L914
	.byte	1,5,90,9
	.half	.L1287-.L1286
	.byte	1,5,112,9
	.half	.L916-.L1287
	.byte	1,5,64,9
	.half	.L1288-.L916
	.byte	1,5,117,1,5,22,9
	.half	.L151-.L1288
	.byte	3,4,1,5,105,7,9
	.half	.L1289-.L151
	.byte	1,5,90,9
	.half	.L1290-.L1289
	.byte	1,5,112,9
	.half	.L917-.L1290
	.byte	1,5,64,9
	.half	.L918-.L917
	.byte	1,5,5,9
	.half	.L148-.L918
	.byte	3,4,1,5,1,3,1,1,7,9
	.half	.L406-.L148
	.byte	0,1,1
.L1274:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_parseUInt64')
	.sect	'.debug_ranges'
.L405:
	.word	-1,.L310,0,.L406-.L310,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_parseFloat64')
	.sect	'.debug_info'
.L407:
	.word	306
	.half	3
	.word	.L408
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L410,.L409
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_parseFloat64',0,1,137,7,9
	.word	.L497
	.byte	1,1,1
	.word	.L312,.L602,.L311
	.byte	4
	.byte	'argsPtr',0,1,137,7,39
	.word	.L552,.L603
	.byte	4
	.byte	'value',0,1,137,7,57
	.word	.L604,.L605
	.byte	5
	.word	.L312,.L602
	.byte	6
	.byte	'buffer',0,1,139,7,13
	.word	.L591,.L606
	.byte	6
	.byte	'result',0,1,140,7,13
	.word	.L497,.L607
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_parseFloat64')
	.sect	'.debug_abbrev'
.L408:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_parseFloat64')
	.sect	'.debug_line'
.L409:
	.word	.L1292-.L1291
.L1291:
	.half	3
	.word	.L1294-.L1293
.L1293:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1294:
	.byte	5,9,7,0,5,2
	.word	.L312
	.byte	3,136,7,1,5,14,9
	.half	.L922-.L312
	.byte	3,5,1,5,12,1,5,39,9
	.half	.L1295-.L922
	.byte	3,2,1,5,47,9
	.half	.L921-.L1295
	.byte	1,5,5,9
	.half	.L920-.L921
	.byte	1,5,16,7,9
	.half	.L1296-.L920
	.byte	3,2,1,5,23,1,5,25,9
	.half	.L158-.L1296
	.byte	3,4,1,5,53,9
	.half	.L1297-.L158
	.byte	1,5,18,9
	.half	.L923-.L1297
	.byte	1,5,80,7,9
	.half	.L1298-.L923
	.byte	1,5,64,9
	.half	.L1299-.L1298
	.byte	1,5,72,9
	.half	.L1300-.L1299
	.byte	1,5,87,9
	.half	.L1301-.L1300
	.byte	1,5,53,9
	.half	.L1302-.L1301
	.byte	1,5,5,9
	.half	.L159-.L1302
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L411-.L159
	.byte	0,1,1
.L1292:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_parseFloat64')
	.sect	'.debug_ranges'
.L410:
	.word	-1,.L312,0,.L411-.L312,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_parseFloat32')
	.sect	'.debug_info'
.L412:
	.word	306
	.half	3
	.word	.L413
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L415,.L414
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_parseFloat32',0,1,157,7,9
	.word	.L497
	.byte	1,1,1
	.word	.L314,.L608,.L313
	.byte	4
	.byte	'argsPtr',0,1,157,7,39
	.word	.L552,.L609
	.byte	4
	.byte	'value',0,1,157,7,57
	.word	.L610,.L611
	.byte	5
	.word	.L314,.L608
	.byte	6
	.byte	'buffer',0,1,159,7,13
	.word	.L591,.L612
	.byte	6
	.byte	'result',0,1,160,7,13
	.word	.L497,.L613
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_parseFloat32')
	.sect	'.debug_abbrev'
.L413:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_parseFloat32')
	.sect	'.debug_line'
.L414:
	.word	.L1304-.L1303
.L1303:
	.half	3
	.word	.L1306-.L1305
.L1305:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1306:
	.byte	5,9,7,0,5,2
	.word	.L314
	.byte	3,156,7,1,5,14,9
	.half	.L927-.L314
	.byte	3,5,1,5,12,1,5,39,9
	.half	.L1307-.L927
	.byte	3,2,1,5,47,9
	.half	.L926-.L1307
	.byte	1,5,5,9
	.half	.L925-.L926
	.byte	1,5,16,7,9
	.half	.L1308-.L925
	.byte	3,2,1,5,23,1,5,25,9
	.half	.L163-.L1308
	.byte	3,4,1,5,53,9
	.half	.L1309-.L163
	.byte	1,5,18,9
	.half	.L928-.L1309
	.byte	1,5,79,7,9
	.half	.L1310-.L928
	.byte	1,5,64,9
	.half	.L1311-.L1310
	.byte	1,5,72,9
	.half	.L1312-.L1311
	.byte	1,5,86,9
	.half	.L1313-.L1312
	.byte	1,5,53,9
	.half	.L1314-.L1313
	.byte	1,5,5,9
	.half	.L164-.L1314
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L416-.L164
	.byte	0,1,1
.L1304:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_parseFloat32')
	.sect	'.debug_ranges'
.L415:
	.word	-1,.L314,0,.L416-.L314,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_commandFind')
	.sect	'.debug_info'
.L417:
	.word	552
	.half	3
	.word	.L418
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L420,.L419
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_commandFind',0,1,177,7,26
	.word	.L614
	.byte	1,1,1
	.word	.L316,.L615,.L315
	.byte	4
	.byte	'commandList',0,1,177,7,75
	.word	.L616,.L617
	.byte	4
	.byte	'commandLine',0,1,177,7,94
	.word	.L548,.L618
	.byte	4
	.byte	'args',0,1,177,7,114
	.word	.L552,.L619
	.byte	4
	.byte	'match',0,1,177,7,128,1
	.word	.L581,.L620
	.byte	5
	.word	.L316,.L615
	.byte	6
	.byte	'command',0,1,179,7,30
	.word	.L614,.L621
	.byte	6
	.byte	'result',0,1,180,7,30
	.word	.L614,.L622
	.byte	6
	.byte	'cmdLineTemp',0,1,181,7,30
	.word	.L548,.L623
	.byte	6
	.byte	'matchInit',0,1,182,7,30
	.word	.L624,.L625
	.byte	6
	.byte	'index',0,1,183,7,30
	.word	.L624,.L626
	.byte	6
	.byte	'hasPrefix',0,1,185,7,30
	.word	.L497,.L627
	.byte	5
	.word	.L171,.L170
	.byte	6
	.byte	'commandTemp',0,1,192,7,16
	.word	.L548,.L628
	.byte	6
	.byte	'commandLineTemp',0,1,193,7,16
	.word	.L548,.L629
	.byte	6
	.byte	'buffer',0,1,194,7,16
	.word	.L556,.L630
	.byte	6
	.byte	'matchCount',0,1,195,7,16
	.word	.L624,.L631
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_commandFind')
	.sect	'.debug_abbrev'
.L418:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_commandFind')
	.sect	'.debug_line'
.L419:
	.word	.L1316-.L1315
.L1315:
	.half	3
	.word	.L1318-.L1317
.L1317:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1318:
	.byte	5,42,7,0,5,2
	.word	.L316
	.byte	3,181,7,1,5,25,3,5,1,5,42,9
	.half	.L930-.L316
	.byte	3,124,1,5,26,3,122,1,5,42,9
	.half	.L932-.L930
	.byte	3,2,1,9
	.half	.L933-.L932
	.byte	3,2,1,9
	.half	.L934-.L933
	.byte	3,127,1,5,17,9
	.half	.L935-.L934
	.byte	3,7,1,5,63,7,9
	.half	.L1319-.L935
	.byte	1,5,52,9
	.half	.L936-.L1319
	.byte	1,5,17,9
	.half	.L168-.L936
	.byte	3,1,1,5,15,1,5,44,9
	.half	.L937-.L168
	.byte	3,2,1,5,41,9
	.half	.L171-.L937
	.byte	3,2,1,5,32,9
	.half	.L1320-.L171
	.byte	1,9
	.half	.L1321-.L1320
	.byte	3,1,1,9
	.half	.L1322-.L1321
	.byte	3,2,1,5,79,3,2,1,5,23,9
	.half	.L173-.L1322
	.byte	3,2,1,5,40,9
	.half	.L172-.L173
	.byte	3,126,1,5,58,9
	.half	.L1323-.L172
	.byte	1,5,79,9
	.half	.L1324-.L1323
	.byte	1,5,27,7,9
	.half	.L1325-.L1324
	.byte	3,5,1,5,13,9
	.half	.L1326-.L1325
	.byte	1,5,61,7,9
	.half	.L1327-.L1326
	.byte	1,5,74,9
	.half	.L1328-.L1327
	.byte	1,5,82,9
	.half	.L1329-.L1328
	.byte	1,5,103,9
	.half	.L1330-.L1329
	.byte	1,5,17,7,9
	.half	.L938-.L1330
	.byte	3,2,1,5,41,7,9
	.half	.L939-.L938
	.byte	1,5,48,9
	.half	.L1331-.L939
	.byte	1,5,29,7,9
	.half	.L1332-.L1331
	.byte	3,3,1,5,31,3,127,1,5,20,9
	.half	.L176-.L1332
	.byte	3,5,1,9
	.half	.L940-.L176
	.byte	3,127,1,5,22,9
	.half	.L1333-.L940
	.byte	3,1,1,5,20,9
	.half	.L1334-.L1333
	.byte	1,9
	.half	.L1335-.L1334
	.byte	3,1,1,5,32,9
	.half	.L1336-.L1335
	.byte	3,126,1,5,17,9
	.half	.L174-.L1336
	.byte	3,6,1,5,33,7,9
	.half	.L941-.L174
	.byte	1,5,14,7,9
	.half	.L178-.L941
	.byte	3,9,1,5,27,3,126,1,5,19,9
	.half	.L170-.L178
	.byte	3,95,1,5,44,9
	.half	.L1337-.L170
	.byte	1,5,5,7,9
	.half	.L180-.L1337
	.byte	3,38,1,5,1,9
	.half	.L942-.L180
	.byte	3,1,1,7,9
	.half	.L421-.L942
	.byte	0,1,1
.L1316:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_commandFind')
	.sect	'.debug_ranges'
.L420:
	.word	-1,.L316,0,.L421-.L316,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_showHelpSingle')
	.sect	'.debug_info'
.L422:
	.word	608
	.half	3
	.word	.L423
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L425,.L424
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_showHelpSingle',0,1,104,9
	.word	.L497
	.byte	1,1,1
	.word	.L276,.L632,.L275
	.byte	4
	.byte	'commandList',0,1,104,61
	.word	.L616,.L633
	.byte	4
	.byte	'io',0,1,104,90
	.word	.L634,.L635
	.byte	4
	.byte	'briefOnly',0,1,104,102
	.word	.L497,.L636
	.byte	4
	.byte	'singleCommand',0,1,104,121
	.word	.L497,.L637
	.byte	5
	.word	.L276,.L632
	.byte	6
	.byte	'command',0,1,106,30
	.word	.L614,.L638
	.byte	6
	.byte	'index',0,1,107,30
	.word	.L624,.L639
	.byte	6
	.byte	'space',0,1,108,30
	.word	.L548,.L640
	.byte	6
	.byte	'spaceParam',0,1,109,30
	.word	.L548,.L641
	.byte	5
	.word	.L8,.L7
	.byte	6
	.byte	'help',0,1,113,17
	.word	.L548,.L642
	.byte	6
	.byte	'chunk',0,1,114,17
	.word	.L548,.L643
	.byte	6
	.byte	'isParam',0,1,115,17
	.word	.L497,.L644
	.byte	6
	.byte	'isSyntax',0,1,116,17
	.word	.L497,.L645
	.byte	5
	.word	.L10,.L9
	.byte	6
	.byte	'count',0,1,121,23
	.word	.L521,.L646
	.byte	6
	.byte	'matchp',0,1,122,23
	.word	.L548,.L647
	.byte	6
	.byte	'matchs',0,1,123,23
	.word	.L548,.L648
	.byte	7
	.word	.L649,.L650,.L651
	.byte	8
	.word	.L652,.L653
	.byte	8
	.word	.L654,.L655
	.byte	8
	.word	.L656,.L657
	.byte	8
	.word	.L658,.L659
	.byte	9
	.word	.L660,.L650,.L651
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_showHelpSingle')
	.sect	'.debug_abbrev'
.L423:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17
	.byte	1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_showHelpSingle')
	.sect	'.debug_line'
.L424:
	.word	.L1339-.L1338
.L1338:
	.half	3
	.word	.L1341-.L1340
.L1340:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf',0,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0
	.byte	'IfxStdIf_DPipe.h',0,1,0,0,0
.L1341:
	.byte	5,9,7,0,5,2
	.word	.L276
	.byte	3,231,0,1,5,47,9
	.half	.L765-.L276
	.byte	3,2,1,9
	.half	.L766-.L765
	.byte	3,1,1,5,49,3,1,1,5,44,9
	.half	.L767-.L766
	.byte	3,3,1,5,35,9
	.half	.L8-.L767
	.byte	3,2,1,5,26,9
	.half	.L1342-.L8
	.byte	3,2,1,3,126,1,9
	.half	.L769-.L1342
	.byte	3,3,1,5,42,3,1,1,5,56,9
	.half	.L770-.L769
	.byte	1,5,34,9
	.half	.L1343-.L770
	.byte	1,5,44,9
	.half	.L772-.L1343
	.byte	3,2,1,5,36,9
	.half	.L10-.L772
	.byte	3,3,1,5,34,9
	.half	.L1344-.L10
	.byte	1,5,36,9
	.half	.L1345-.L1344
	.byte	3,1,1,5,34,9
	.half	.L1346-.L1345
	.byte	1,5,31,9
	.half	.L1347-.L1346
	.byte	3,1,1,5,41,9
	.half	.L773-.L1347
	.byte	3,2,1,5,48,9
	.half	.L1348-.L773
	.byte	1,5,13,9
	.half	.L1349-.L1348
	.byte	1,5,28,7,9
	.half	.L1350-.L1349
	.byte	3,2,1,5,30,3,2,1,5,28,9
	.half	.L1351-.L1350
	.byte	3,127,1,5,34,3,127,1,5,46,9
	.half	.L11-.L1351
	.byte	3,4,1,5,53,9
	.half	.L1352-.L11
	.byte	1,5,18,9
	.half	.L1353-.L1352
	.byte	1,5,28,7,9
	.half	.L1354-.L1353
	.byte	3,2,1,5,30,3,2,1,5,28,9
	.half	.L1355-.L1354
	.byte	3,127,1,5,30,3,1,1,5,35,9
	.half	.L1356-.L1355
	.byte	3,126,1,5,17,9
	.half	.L13-.L1356
	.byte	3,6,1,5,34,7,9
	.half	.L1357-.L13
	.byte	3,2,1,5,44,9
	.half	.L1358-.L1357
	.byte	1,5,22,9
	.half	.L15-.L1358
	.byte	3,2,1,5,34,7,9
	.half	.L1359-.L15
	.byte	3,2,1,5,28,9
	.half	.L12-.L1359
	.byte	3,5,1,5,34,9
	.half	.L1360-.L12
	.byte	1,5,13,9
	.half	.L775-.L1360
	.byte	3,2,1,5,25,7,9
	.half	.L1361-.L775
	.byte	3,2,1,5,39,9
	.half	.L1362-.L1361
	.byte	1,5,30,9
	.half	.L776-.L1362
	.byte	1,5,44,9
	.half	.L777-.L776
	.byte	1,5,22,9
	.half	.L18-.L777
	.byte	3,4,1,5,27,7,9
	.half	.L779-.L18
	.byte	3,2,1,5,29,9
	.half	.L19-.L779
	.byte	3,4,1,5,38,9
	.half	.L1363-.L19
	.byte	3,1,1,5,27,9
	.half	.L1364-.L1363
	.byte	3,127,1,5,19,9
	.half	.L1365-.L1364
	.byte	1,5,46,9
	.half	.L1366-.L1365
	.byte	3,1,1,5,53,9
	.half	.L1367-.L1366
	.byte	1,5,38,9
	.half	.L1368-.L1367
	.byte	1,4,2,5,17,9
	.half	.L650-.L1368
	.byte	3,223,0,1,5,30,9
	.half	.L774-.L650
	.byte	1,4,1,5,46,9
	.half	.L1369-.L774
	.byte	3,162,127,1,5,53,9
	.half	.L1370-.L1369
	.byte	1,4,2,9
	.half	.L1371-.L1370
	.byte	3,222,0,1,4,1,5,13,9
	.half	.L651-.L1371
	.byte	3,164,127,1,5,21,9
	.half	.L1372-.L651
	.byte	1,5,18,9
	.half	.L1373-.L1372
	.byte	1,5,13,9
	.half	.L781-.L1373
	.byte	3,2,1,5,17,7,9
	.half	.L9-.L781
	.byte	3,76,1,5,16,9
	.half	.L1374-.L9
	.byte	1,5,44,9
	.half	.L1375-.L1374
	.byte	1,5,34,7,9
	.half	.L21-.L1375
	.byte	3,58,1,5,21,9
	.half	.L783-.L21
	.byte	3,2,1,5,13,9
	.half	.L1376-.L783
	.byte	1,5,51,7,9
	.half	.L1377-.L1376
	.byte	1,5,19,7,9
	.half	.L1378-.L1377
	.byte	3,2,1,5,21,3,1,1,5,27,9
	.half	.L22-.L1378
	.byte	3,3,1,5,9,9
	.half	.L785-.L22
	.byte	3,2,1,5,19,7,9
	.half	.L7-.L785
	.byte	3,180,127,1,5,44,9
	.half	.L1379-.L7
	.byte	1,5,12,7,9
	.half	.L24-.L1379
	.byte	3,210,0,1,5,1,3,1,1,7,9
	.half	.L426-.L24
	.byte	0,1,1
.L1339:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_showHelpSingle')
	.sect	'.debug_ranges'
.L425:
	.word	-1,.L276,0,.L426-.L276,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_showHelp')
	.sect	'.debug_info'
.L427:
	.word	317
	.half	3
	.word	.L428
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L430,.L429
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_showHelp',0,1,228,1,9
	.word	.L497
	.byte	1,1,1
	.word	.L280,.L661,.L279
	.byte	4
	.byte	'args',0,1,228,1,34
	.word	.L548,.L662
	.byte	4
	.byte	'shellPtr',0,1,228,1,46
	.word	.L663,.L664
	.byte	4
	.byte	'io',0,1,228,1,72
	.word	.L634,.L665
	.byte	5
	.word	.L280,.L661
	.byte	6
	.byte	'shell',0,1,231,1,16
	.word	.L499,.L666
	.byte	6
	.byte	'result',0,1,232,1,16
	.word	.L497,.L667
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_showHelp')
	.sect	'.debug_abbrev'
.L428:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_showHelp')
	.sect	'.debug_line'
.L429:
	.word	.L1381-.L1380
.L1380:
	.half	3
	.word	.L1383-.L1382
.L1382:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1383:
	.byte	5,9,7,0,5,2
	.word	.L280
	.byte	3,233,1,1,5,23,9
	.half	.L1384-.L280
	.byte	3,126,1,5,5,9
	.half	.L804-.L1384
	.byte	3,2,1,5,35,7,9
	.half	.L1385-.L804
	.byte	3,4,1,5,13,9
	.half	.L801-.L1385
	.byte	1,5,69,7,9
	.half	.L1386-.L801
	.byte	3,2,1,5,75,1,5,52,9
	.half	.L802-.L1386
	.byte	3,124,1,5,66,9
	.half	.L32-.L802
	.byte	3,10,1,5,16,9
	.half	.L805-.L32
	.byte	1,5,5,9
	.half	.L33-.L805
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L431-.L33
	.byte	0,1,1
.L1381:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_showHelp')
	.sect	'.debug_ranges'
.L430:
	.word	-1,.L280,0,.L431-.L280,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_printSyntax')
	.sect	'.debug_info'
.L432:
	.word	281
	.half	3
	.word	.L433
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L435,.L434
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_printSyntax',0,1,170,10,6,1,1,1
	.word	.L332,.L668,.L331
	.byte	4
	.byte	'syntaxList',0,1,170,10,52
	.word	.L669,.L670
	.byte	4
	.byte	'io',0,1,170,10,80
	.word	.L634,.L671
	.byte	5
	.word	.L332,.L668
	.byte	6
	.byte	'syntax',0,1,172,10,29
	.word	.L669,.L672
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_printSyntax')
	.sect	'.debug_abbrev'
.L433:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_printSyntax')
	.sect	'.debug_line'
.L434:
	.word	.L1388-.L1387
.L1387:
	.half	3
	.word	.L1390-.L1389
.L1389:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1390:
	.byte	5,6,7,0,5,2
	.word	.L332
	.byte	3,169,10,1,5,36,9
	.half	.L1006-.L332
	.byte	3,2,1,5,38,9
	.half	.L1007-.L1006
	.byte	3,2,1,5,64,9
	.half	.L270-.L1007
	.byte	3,2,1,5,34,9
	.half	.L1391-.L270
	.byte	1,5,64,9
	.half	.L1009-.L1391
	.byte	3,1,1,5,34,9
	.half	.L1392-.L1009
	.byte	1,5,25,9
	.half	.L1011-.L1392
	.byte	3,1,1,5,18,9
	.half	.L269-.L1011
	.byte	3,124,1,5,38,9
	.half	.L1393-.L269
	.byte	1,5,1,7,9
	.half	.L1394-.L1393
	.byte	3,6,1,7,9
	.half	.L436-.L1394
	.byte	0,1,1
.L1388:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_printSyntax')
	.sect	'.debug_ranges'
.L435:
	.word	-1,.L332,0,.L436-.L332,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_protocolStart')
	.sect	'.debug_info'
.L437:
	.word	318
	.half	3
	.word	.L438
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L440,.L439
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_protocolStart',0,1,253,1,9
	.word	.L497
	.byte	1,1,1
	.word	.L282,.L673,.L281
	.byte	4
	.byte	'args',0,1,253,1,39
	.word	.L548,.L674
	.byte	4
	.byte	'data',0,1,253,1,51
	.word	.L663,.L675
	.byte	4
	.byte	'io',0,1,253,1,73
	.word	.L634,.L676
	.byte	5
	.word	.L282,.L673
	.byte	6
	.byte	'shell',0,1,255,1,16
	.word	.L499,.L677
	.byte	6
	.byte	'Result',0,1,128,2,16
	.word	.L497,.L678
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_protocolStart')
	.sect	'.debug_abbrev'
.L438:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_protocolStart')
	.sect	'.debug_line'
.L439:
	.word	.L1396-.L1395
.L1395:
	.half	3
	.word	.L1398-.L1397
.L1397:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1398:
	.byte	5,9,7,0,5,2
	.word	.L282
	.byte	3,252,1,1,5,23,9
	.half	.L811-.L282
	.byte	3,3,1,5,31,3,2,1,5,37,9
	.half	.L807-.L811
	.byte	1,5,5,9
	.half	.L809-.L807
	.byte	1,5,34,7,9
	.half	.L1399-.L809
	.byte	3,2,1,9
	.half	.L814-.L1399
	.byte	3,1,1,5,69,9
	.half	.L816-.L814
	.byte	3,127,1,5,36,9
	.half	.L36-.L816
	.byte	3,3,1,5,42,9
	.half	.L1400-.L36
	.byte	1,5,10,9
	.half	.L1401-.L1400
	.byte	1,5,29,7,9
	.half	.L1402-.L1401
	.byte	3,2,1,5,13,9
	.half	.L1403-.L1402
	.byte	1,5,68,7,9
	.half	.L1404-.L1403
	.byte	1,5,76,9
	.half	.L1405-.L1404
	.byte	1,5,85,7,9
	.half	.L1406-.L1405
	.byte	3,2,1,5,37,9
	.half	.L812-.L1406
	.byte	1,5,47,9
	.half	.L819-.L812
	.byte	3,1,1,5,37,1,5,32,9
	.half	.L1407-.L819
	.byte	3,2,1,5,13,9
	.half	.L1408-.L1407
	.byte	1,5,56,7,9
	.half	.L1409-.L1408
	.byte	3,2,1,5,80,9
	.half	.L1410-.L1409
	.byte	1,5,13,9
	.half	.L818-.L1410
	.byte	3,126,1,5,20,9
	.half	.L39-.L818
	.byte	3,7,1,5,5,9
	.half	.L37-.L39
	.byte	3,6,1,5,1,3,1,1,7,9
	.half	.L441-.L37
	.byte	0,1,1
.L1396:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_protocolStart')
	.sect	'.debug_ranges'
.L440:
	.word	-1,.L282,0,.L441-.L282,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_bbProtocolStart')
	.sect	'.debug_info'
.L442:
	.word	301
	.half	3
	.word	.L443
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L445,.L444
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_bbProtocolStart',0,1,159,2,9
	.word	.L497
	.byte	1,1,1
	.word	.L284,.L679,.L283
	.byte	4
	.byte	'args',0,1,159,2,41
	.word	.L548,.L680
	.byte	4
	.byte	'data',0,1,159,2,53
	.word	.L663,.L681
	.byte	4
	.byte	'io',0,1,159,2,75
	.word	.L634,.L682
	.byte	5
	.word	.L284,.L679
	.byte	6
	.byte	'result',0,1,161,2,13
	.word	.L497,.L683
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_bbProtocolStart')
	.sect	'.debug_abbrev'
.L443:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_bbProtocolStart')
	.sect	'.debug_line'
.L444:
	.word	.L1412-.L1411
.L1411:
	.half	3
	.word	.L1414-.L1413
.L1413:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1414:
	.byte	5,9,7,0,5,2
	.word	.L284
	.byte	3,158,2,1,5,20,9
	.half	.L825-.L284
	.byte	3,2,1,5,31,3,2,1,5,37,9
	.half	.L821-.L825
	.byte	1,5,5,9
	.half	.L823-.L821
	.byte	1,5,34,7,9
	.half	.L1415-.L823
	.byte	3,2,1,9
	.half	.L828-.L1415
	.byte	3,1,1,5,69,9
	.half	.L830-.L828
	.byte	3,127,1,5,36,9
	.half	.L44-.L830
	.byte	3,3,1,5,42,9
	.half	.L1416-.L44
	.byte	1,5,10,9
	.half	.L1417-.L1416
	.byte	1,5,42,7,9
	.half	.L1418-.L1417
	.byte	3,2,1,5,54,9
	.half	.L1419-.L1418
	.byte	1,5,16,9
	.half	.L826-.L1419
	.byte	1,5,5,9
	.half	.L45-.L826
	.byte	3,5,1,5,1,3,1,1,7,9
	.half	.L446-.L45
	.byte	0,1,1
.L1412:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_bbProtocolStart')
	.sect	'.debug_ranges'
.L445:
	.word	-1,.L284,0,.L446-.L284,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_execute')
	.sect	'.debug_info'
.L447:
	.word	330
	.half	3
	.word	.L448
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L450,.L449
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_execute',0,1,131,8,6,1,1,1
	.word	.L320,.L684,.L319
	.byte	4
	.byte	'shell',0,1,131,8,35
	.word	.L499,.L685
	.byte	4
	.byte	'commandLine',0,1,131,8,48
	.word	.L548,.L686
	.byte	5
	.word	.L320,.L684
	.byte	6
	.byte	'args',0,1,133,8,32
	.word	.L548,.L687
	.byte	6
	.byte	'commandList',0,1,134,8,32
	.word	.L616,.L688
	.byte	6
	.byte	'shellCommand',0,1,135,8,32
	.word	.L614,.L689
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_execute')
	.sect	'.debug_abbrev'
.L448:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_execute')
	.sect	'.debug_line'
.L449:
	.word	.L1421-.L1420
.L1420:
	.half	3
	.word	.L1423-.L1422
.L1422:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1423:
	.byte	5,6,7,0,5,2
	.word	.L320
	.byte	3,130,8,1,5,47,9
	.half	.L955-.L320
	.byte	3,2,1,5,45,9
	.half	.L1424-.L955
	.byte	1,5,94,9
	.half	.L1425-.L1424
	.byte	3,2,1,5,101,9
	.half	.L1426-.L1425
	.byte	1,5,5,9
	.half	.L953-.L1426
	.byte	3,2,1,5,25,7,9
	.half	.L1427-.L953
	.byte	3,2,1,5,57,9
	.half	.L1428-.L1427
	.byte	3,2,1,5,9,9
	.half	.L1429-.L1428
	.byte	3,126,1,5,57,7,9
	.half	.L1430-.L1429
	.byte	3,2,1,5,37,9
	.half	.L187-.L1430
	.byte	3,2,1,5,55,9
	.half	.L1431-.L187
	.byte	1,5,68,9
	.half	.L1432-.L1431
	.byte	1,5,14,9
	.half	.L956-.L1432
	.byte	1,5,31,7,9
	.half	.L1433-.L956
	.byte	3,2,1,5,13,9
	.half	.L1434-.L1433
	.byte	1,5,46,7,9
	.half	.L1435-.L1434
	.byte	3,2,1,5,13,3,126,1,5,31,9
	.half	.L189-.L1435
	.byte	3,7,1,5,13,9
	.half	.L1436-.L189
	.byte	1,5,46,7,9
	.half	.L1437-.L1436
	.byte	3,2,1,5,71,1,5,18,9
	.half	.L192-.L1437
	.byte	3,2,1,5,49,7,9
	.half	.L1438-.L192
	.byte	3,2,1,5,9,9
	.half	.L1439-.L1438
	.byte	3,113,1,5,24,9
	.half	.L186-.L1439
	.byte	3,23,1,5,9,9
	.half	.L1440-.L186
	.byte	1,5,31,7,9
	.half	.L1441-.L1440
	.byte	3,2,1,5,13,9
	.half	.L1442-.L1441
	.byte	1,5,46,7,9
	.half	.L1443-.L1442
	.byte	3,2,1,5,18,9
	.half	.L197-.L1443
	.byte	3,2,1,5,49,7,9
	.half	.L1444-.L197
	.byte	3,2,1,5,43,9
	.half	.L195-.L1444
	.byte	1,5,81,9
	.half	.L1445-.L195
	.byte	1,5,49,9
	.half	.L1446-.L1445
	.byte	1,5,1,7,9
	.half	.L190-.L1446
	.byte	3,6,1,7,9
	.half	.L451-.L190
	.byte	0,1,1
.L1421:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_execute')
	.sect	'.debug_ranges'
.L450:
	.word	-1,.L320,0,.L451-.L320,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_cmdEscapeProcess')
	.sect	'.debug_info'
.L452:
	.word	651
	.half	3
	.word	.L453
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L455,.L454
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_cmdEscapeProcess',0,1,194,8,6,1,1,1
	.word	.L322,.L690,.L321
	.byte	4
	.byte	'shell',0,1,194,8,44
	.word	.L499,.L691
	.byte	4
	.byte	'EscapeChar1',0,1,194,8,56
	.word	.L692,.L693
	.byte	4
	.byte	'EscapeChar2',0,1,194,8,74
	.word	.L692,.L694
	.byte	5
	.word	.L695
	.byte	6
	.byte	'Cmd',0,1,196,8,24
	.word	.L527,.L696
	.byte	6
	.byte	'cmdStr',0,1,197,8,24
	.word	.L529,.L697
	.byte	6
	.byte	'i',0,1,198,8,24
	.word	.L503,.L698
	.byte	5
	.word	.L699
	.byte	6
	.byte	'ii',0,1,244,8,13
	.word	.L546,.L702
	.byte	0,7
	.word	.L701,.L703
	.byte	6
	.byte	'ii',0,1,245,8,13
	.word	.L546,.L704
	.byte	0,7
	.word	.L703,.L705
	.byte	6
	.byte	'ii',0,1,246,8,13
	.word	.L546,.L706
	.byte	0,7
	.word	.L707,.L708
	.byte	6
	.byte	'ii',0,1,134,9,17
	.word	.L546,.L709
	.byte	0,7
	.word	.L708,.L710
	.byte	6
	.byte	'ii',0,1,135,9,17
	.word	.L546,.L711
	.byte	0,7
	.word	.L710,.L219
	.byte	6
	.byte	'ii',0,1,136,9,17
	.word	.L546,.L712
	.byte	0,7
	.word	.L713,.L714
	.byte	6
	.byte	'ii',0,1,153,9,17
	.word	.L546,.L715
	.byte	0,7
	.word	.L714,.L716
	.byte	6
	.byte	'ii',0,1,154,9,17
	.word	.L546,.L717
	.byte	0,7
	.word	.L716,.L216
	.byte	6
	.byte	'ii',0,1,155,9,17
	.word	.L546,.L718
	.byte	0,7
	.word	.L719,.L720
	.byte	6
	.byte	'ii',0,1,199,9,17
	.word	.L546,.L721
	.byte	0,7
	.word	.L722,.L251
	.byte	6
	.byte	'ii',0,1,221,9,21
	.word	.L546,.L723
	.byte	0,7
	.word	.L724,.L260
	.byte	6
	.byte	'ii',0,1,255,9,21
	.word	.L546,.L725
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_cmdEscapeProcess')
	.sect	'.debug_abbrev'
.L453:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,85,6,0,0,6,52,0,3,8,58
	.byte	15,59,15,57,15,73,16,2,6,0,0,7,11,1,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_cmdEscapeProcess')
	.sect	'.debug_line'
.L454:
	.word	.L1448-.L1447
.L1447:
	.half	3
	.word	.L1450-.L1449
.L1449:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1450:
	.byte	5,6,7,0,5,2
	.word	.L322
	.byte	3,193,8,1,5,5,9
	.half	.L961-.L322
	.byte	3,11,1,5,10,7,9
	.half	.L1451-.L961
	.byte	3,17,1,5,17,3,118,1,5,10,9
	.half	.L962-.L1451
	.byte	3,10,1,7,9
	.half	.L963-.L962
	.byte	3,33,1,9
	.half	.L965-.L963
	.byte	3,39,1,9
	.half	.L967-.L965
	.byte	3,10,1,5,16,9
	.half	.L201-.L967
	.byte	3,176,127,1,5,9,9
	.half	.L1452-.L201
	.byte	1,5,32,7,9
	.half	.L1453-.L1452
	.byte	3,3,1,5,30,1,5,33,9
	.half	.L1454-.L1453
	.byte	1,5,68,9
	.half	.L206-.L1454
	.byte	3,4,1,5,13,9
	.half	.L1455-.L206
	.byte	1,5,33,7,9
	.half	.L1456-.L1455
	.byte	3,3,1,5,46,9
	.half	.L207-.L1456
	.byte	3,5,1,5,62,9
	.half	.L971-.L207
	.byte	1,5,27,9
	.half	.L972-.L971
	.byte	3,3,1,5,9,9
	.half	.L1457-.L972
	.byte	1,5,13,7,9
	.half	.L700-.L1457
	.byte	3,2,1,9
	.half	.L701-.L700
	.byte	3,1,1,9
	.half	.L703-.L701
	.byte	3,1,1,5,9,9
	.half	.L705-.L703
	.byte	3,7,1,5,17,9
	.half	.L202-.L705
	.byte	3,4,1,5,13,9
	.half	.L1458-.L202
	.byte	1,5,86,7,9
	.half	.L1459-.L1458
	.byte	1,5,31,7,9
	.half	.L217-.L1459
	.byte	3,3,1,5,13,9
	.half	.L1460-.L217
	.byte	1,5,17,7,9
	.half	.L707-.L1460
	.byte	3,2,1,9
	.half	.L708-.L707
	.byte	3,1,1,9
	.half	.L710-.L708
	.byte	3,1,1,5,32,9
	.half	.L219-.L710
	.byte	3,3,1,5,30,1,9
	.half	.L1461-.L219
	.byte	3,1,1,5,32,9
	.half	.L1462-.L1461
	.byte	3,1,1,5,30,1,5,33,9
	.half	.L1463-.L1462
	.byte	3,126,1,5,29,9
	.half	.L218-.L1463
	.byte	3,7,1,5,50,9
	.half	.L977-.L218
	.byte	3,3,1,5,66,9
	.half	.L979-.L977
	.byte	1,5,31,9
	.half	.L980-.L979
	.byte	3,2,1,5,13,9
	.half	.L1464-.L980
	.byte	1,5,17,7,9
	.half	.L713-.L1464
	.byte	3,2,1,9
	.half	.L714-.L713
	.byte	3,1,1,9
	.half	.L716-.L714
	.byte	3,1,1,5,43,9
	.half	.L216-.L716
	.byte	3,1,1,5,49,9
	.half	.L1465-.L216
	.byte	1,5,45,9
	.half	.L209-.L1465
	.byte	3,3,1,5,25,9
	.half	.L985-.L209
	.byte	1,5,30,9
	.half	.L1466-.L985
	.byte	3,1,1,5,25,9
	.half	.L1467-.L1466
	.byte	1,5,27,9
	.half	.L226-.L1467
	.byte	3,3,1,5,25,1,5,9,9
	.half	.L1468-.L226
	.byte	3,1,1,5,16,9
	.half	.L203-.L1468
	.byte	3,4,1,5,30,9
	.half	.L1469-.L203
	.byte	1,5,9,9
	.half	.L1470-.L1469
	.byte	1,5,13,7,9
	.half	.L1471-.L1470
	.byte	3,3,1,5,94,9
	.half	.L236-.L1471
	.byte	1,5,102,9
	.half	.L1472-.L236
	.byte	1,5,9,3,3,1,5,16,9
	.half	.L204-.L1472
	.byte	3,4,1,5,9,9
	.half	.L1473-.L204
	.byte	1,5,13,7,9
	.half	.L1474-.L1473
	.byte	3,3,1,5,73,9
	.half	.L239-.L1474
	.byte	1,5,81,9
	.half	.L1475-.L239
	.byte	1,5,24,9
	.half	.L205-.L1475
	.byte	3,10,1,5,5,9
	.half	.L989-.L205
	.byte	1,5,14,7,9
	.half	.L990-.L989
	.byte	3,4,1,9
	.half	.L992-.L990
	.byte	3,9,1,9
	.half	.L994-.L992
	.byte	3,34,1,9
	.half	.L996-.L994
	.byte	3,29,1,5,1,9
	.half	.L200-.L996
	.byte	3,13,1,5,20,7,9
	.half	.L241-.L200
	.byte	3,173,127,1,5,13,9
	.half	.L1476-.L241
	.byte	1,5,17,7,9
	.half	.L719-.L1476
	.byte	3,2,1,5,71,9
	.half	.L720-.L719
	.byte	1,5,69,1,5,1,9
	.half	.L246-.L720
	.byte	3,209,0,1,5,35,7,9
	.half	.L242-.L246
	.byte	3,182,127,1,5,21,9
	.half	.L1477-.L242
	.byte	1,5,17,9
	.half	.L1478-.L1477
	.byte	1,5,92,7,9
	.half	.L1479-.L1478
	.byte	1,5,61,9
	.half	.L1480-.L1479
	.byte	1,5,35,7,9
	.half	.L1481-.L1480
	.byte	3,3,1,5,17,9
	.half	.L1482-.L1481
	.byte	1,5,47,7,9
	.half	.L1483-.L1482
	.byte	3,3,1,5,53,9
	.half	.L1484-.L1483
	.byte	1,5,33,9
	.half	.L1485-.L1484
	.byte	3,3,1,5,69,9
	.half	.L998-.L1485
	.byte	3,2,1,5,58,9
	.half	.L1486-.L998
	.byte	3,126,1,5,69,9
	.half	.L253-.L1486
	.byte	3,2,1,5,51,9
	.half	.L1487-.L253
	.byte	1,5,57,9
	.half	.L1488-.L1487
	.byte	1,5,61,9
	.half	.L1489-.L1488
	.byte	3,126,1,5,50,9
	.half	.L252-.L1489
	.byte	1,5,58,9
	.half	.L1490-.L252
	.byte	1,5,21,7,9
	.half	.L722-.L1490
	.byte	3,6,1,5,29,9
	.half	.L251-.L722
	.byte	3,4,1,5,39,9
	.half	.L1000-.L251
	.byte	3,2,1,5,54,9
	.half	.L1491-.L1000
	.byte	3,126,1,5,57,9
	.half	.L257-.L1491
	.byte	1,5,44,3,2,1,5,39,9
	.half	.L1492-.L257
	.byte	1,5,31,9
	.half	.L1493-.L1492
	.byte	1,5,57,9
	.half	.L1494-.L1493
	.byte	3,126,1,5,46,9
	.half	.L256-.L1494
	.byte	1,5,54,9
	.half	.L1495-.L256
	.byte	1,5,27,7,9
	.half	.L1496-.L1495
	.byte	3,5,1,5,23,9
	.half	.L1001-.L1496
	.byte	1,5,43,9
	.half	.L1497-.L1001
	.byte	1,5,41,9
	.half	.L1498-.L1497
	.byte	1,5,27,9
	.half	.L1499-.L1498
	.byte	3,1,1,5,23,9
	.half	.L1500-.L1499
	.byte	1,5,43,9
	.half	.L1501-.L1500
	.byte	1,5,41,9
	.half	.L1502-.L1501
	.byte	1,5,20,9
	.half	.L1503-.L1502
	.byte	3,2,1,5,28,9
	.half	.L1504-.L1503
	.byte	1,5,13,3,3,1,5,34,9
	.half	.L243-.L1504
	.byte	3,4,1,5,20,9
	.half	.L1505-.L243
	.byte	1,5,13,9
	.half	.L1002-.L1505
	.byte	1,5,35,7,9
	.half	.L1506-.L1002
	.byte	3,3,1,5,17,9
	.half	.L1507-.L1506
	.byte	1,5,69,7,9
	.half	.L1508-.L1507
	.byte	3,5,1,5,60,9
	.half	.L1509-.L1508
	.byte	3,125,1,5,69,9
	.half	.L1510-.L1509
	.byte	3,3,1,5,64,9
	.half	.L1511-.L1510
	.byte	3,125,1,5,69,7,9
	.half	.L262-.L1511
	.byte	3,3,1,5,51,9
	.half	.L1512-.L262
	.byte	1,5,57,9
	.half	.L1513-.L1512
	.byte	1,5,51,9
	.half	.L1514-.L1513
	.byte	3,125,1,5,67,9
	.half	.L1515-.L1514
	.byte	1,5,60,9
	.half	.L1516-.L1515
	.byte	1,5,64,9
	.half	.L1517-.L1516
	.byte	1,5,53,7,9
	.half	.L261-.L1517
	.byte	3,7,1,5,21,9
	.half	.L724-.L261
	.byte	3,3,1,5,36,9
	.half	.L260-.L724
	.byte	3,4,1,5,76,9
	.half	.L1518-.L260
	.byte	1,5,32,9
	.half	.L1519-.L1518
	.byte	1,5,85,9
	.half	.L1520-.L1519
	.byte	1,5,54,9
	.half	.L1521-.L1520
	.byte	1,5,99,9
	.half	.L1522-.L1521
	.byte	1,5,27,9
	.half	.L1523-.L1522
	.byte	3,2,1,5,23,9
	.half	.L1524-.L1523
	.byte	1,5,43,9
	.half	.L1525-.L1524
	.byte	1,5,41,9
	.half	.L1526-.L1525
	.byte	1,5,20,9
	.half	.L1527-.L1526
	.byte	3,1,1,5,28,9
	.half	.L1528-.L1527
	.byte	1,5,1,9
	.half	.L249-.L1528
	.byte	3,18,1,5,17,7,9
	.half	.L267-.L249
	.byte	3,119,1,5,98,9
	.half	.L268-.L267
	.byte	1,5,106,9
	.half	.L1529-.L268
	.byte	1,5,23,9
	.half	.L266-.L1529
	.byte	3,126,1,5,37,9
	.half	.L1530-.L266
	.byte	1,5,45,9
	.half	.L1531-.L1530
	.byte	1,5,1,7,9
	.half	.L1532-.L1531
	.byte	3,11,1,7,9
	.half	.L456-.L1532
	.byte	0,1,1
.L1448:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_cmdEscapeProcess')
	.sect	'.debug_ranges'
.L455:
	.word	-1,.L322,0,.L456-.L322,0,0
.L695:
	.word	-1,.L322,0,.L690-.L322,-1,.L324,0,.L491-.L324,0,0
.L699:
	.word	-1,.L322,.L700-.L322,.L701-.L322,-1,.L326,0,.L486-.L326,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_commandListFind')
	.sect	'.debug_info'
.L457:
	.word	383
	.half	3
	.word	.L458
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L460,.L459
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_commandListFind',0,1,232,7,26
	.word	.L614
	.byte	1,1,1
	.word	.L318,.L726,.L317
	.byte	4
	.byte	'shell',0,1,232,7,63
	.word	.L499,.L727
	.byte	4
	.byte	'commandLine',0,1,232,7,76
	.word	.L548,.L728
	.byte	4
	.byte	'args',0,1,232,7,96
	.word	.L552,.L729
	.byte	4
	.byte	'commandList',0,1,232,7,130,1
	.word	.L730,.L731
	.byte	5
	.word	.L318,.L726
	.byte	6
	.byte	'shellCommand',0,1,235,7,30
	.word	.L614,.L732
	.byte	6
	.byte	'Command',0,1,236,7,30
	.word	.L614,.L733
	.byte	6
	.byte	'match',0,1,238,7,30
	.word	.L624,.L734
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_commandListFind')
	.sect	'.debug_abbrev'
.L458:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_commandListFind')
	.sect	'.debug_line'
.L459:
	.word	.L1534-.L1533
.L1533:
	.half	3
	.word	.L1536-.L1535
.L1535:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1536:
	.byte	5,26,7,0,5,2
	.word	.L318
	.byte	3,231,7,1,5,31,9
	.half	.L947-.L318
	.byte	3,10,1,5,26,9
	.half	.L946-.L947
	.byte	3,118,1,5,43,9
	.half	.L943-.L946
	.byte	3,4,1,5,9,9
	.half	.L950-.L943
	.byte	3,6,1,5,93,7,9
	.half	.L1537-.L950
	.byte	3,2,1,5,17,9
	.half	.L944-.L1537
	.byte	3,2,1,5,48,7,9
	.half	.L1538-.L944
	.byte	1,5,54,9
	.half	.L1539-.L1538
	.byte	1,5,30,7,9
	.half	.L1540-.L1539
	.byte	3,3,1,5,50,9
	.half	.L1541-.L1540
	.byte	3,1,1,5,30,9
	.half	.L948-.L1541
	.byte	1,5,5,9
	.half	.L182-.L948
	.byte	3,5,1,5,1,9
	.half	.L951-.L182
	.byte	3,1,1,7,9
	.half	.L461-.L951
	.byte	0,1,1
.L1534:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_commandListFind')
	.sect	'.debug_ranges'
.L460:
	.word	-1,.L318,0,.L461-.L318,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_matchCommand')
	.sect	'.debug_info'
.L462:
	.word	379
	.half	3
	.word	.L463
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L465,.L464
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_matchCommand',0,1,181,5,16
	.word	.L497
	.byte	1,1
	.word	.L298,.L735,.L297
	.byte	4
	.byte	'argsPtr',0,1,181,5,46
	.word	.L552,.L736
	.byte	4
	.byte	'match',0,1,181,5,62
	.word	.L552,.L737
	.byte	5
	.word	.L298,.L735
	.byte	6
	.byte	'result',0,1,183,5,13
	.word	.L497,.L738
	.byte	6
	.byte	'savedArguments',0,1,184,5,13
	.word	.L548,.L739
	.byte	6
	.byte	'savedMatch',0,1,185,5,13
	.word	.L548,.L740
	.byte	6
	.byte	'buffer0',0,1,186,5,13
	.word	.L556,.L741
	.byte	6
	.byte	'buffer1',0,1,187,5,13
	.word	.L556,.L742
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_matchCommand')
	.sect	'.debug_abbrev'
.L463:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_matchCommand')
	.sect	'.debug_line'
.L464:
	.word	.L1543-.L1542
.L1542:
	.half	3
	.word	.L1545-.L1544
.L1544:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1545:
	.byte	5,16,7,0,5,2
	.word	.L298
	.byte	3,180,5,1,5,28,9
	.half	.L879-.L298
	.byte	3,2,1,5,30,3,1,1,9
	.half	.L880-.L879
	.byte	3,1,1,5,40,9
	.half	.L881-.L880
	.byte	3,4,1,5,49,9
	.half	.L877-.L881
	.byte	1,5,9,9
	.half	.L876-.L877
	.byte	1,5,41,7,9
	.half	.L1546-.L876
	.byte	3,1,1,5,50,9
	.half	.L1547-.L1546
	.byte	1,5,49,9
	.half	.L882-.L1547
	.byte	3,127,1,5,50,3,1,1,5,72,9
	.half	.L883-.L882
	.byte	1,5,20,7,9
	.half	.L1548-.L883
	.byte	3,2,1,5,29,9
	.half	.L1549-.L1548
	.byte	1,5,20,9
	.half	.L1550-.L1549
	.byte	3,2,1,5,5,9
	.half	.L109-.L1550
	.byte	3,4,1,5,18,7,9
	.half	.L1551-.L109
	.byte	3,3,1,9
	.half	.L1552-.L1551
	.byte	3,1,1,5,5,9
	.half	.L112-.L1552
	.byte	3,3,1,5,1,3,1,1,7,9
	.half	.L466-.L112
	.byte	0,1,1
.L1543:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_matchCommand')
	.sect	'.debug_ranges'
.L465:
	.word	-1,.L298,0,.L466-.L298,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_isEndOfLine')
	.sect	'.debug_info'
.L467:
	.word	240
	.half	3
	.word	.L468
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L470,.L469
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_isEndOfLine',0,1,86,9
	.word	.L497
	.byte	1,1,1
	.word	.L272,.L743,.L271
	.byte	4
	.byte	'args',0,1,86,37
	.word	.L548,.L744
	.byte	5
	.word	.L272,.L743
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_isEndOfLine')
	.sect	'.debug_abbrev'
.L468:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_isEndOfLine')
	.sect	'.debug_line'
.L469:
	.word	.L1554-.L1553
.L1553:
	.half	3
	.word	.L1556-.L1555
.L1555:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1556:
	.byte	5,13,7,0,5,2
	.word	.L272
	.byte	3,215,0,1,5,36,7,9
	.half	.L1557-.L272
	.byte	1,5,42,9
	.half	.L1558-.L1557
	.byte	1,5,67,7,9
	.half	.L2-.L1558
	.byte	1,5,1,3,1,1,5,67,7,9
	.half	.L3-.L2
	.byte	3,127,1,5,1,3,1,1,7,9
	.half	.L471-.L3
	.byte	0,1,1
.L1554:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_isEndOfLine')
	.sect	'.debug_ranges'
.L470:
	.word	-1,.L272,0,.L471-.L272,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_writeResult')
	.sect	'.debug_info'
.L472:
	.word	340
	.half	3
	.word	.L473
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L475,.L474
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_writeResult',0,1,92,16
	.word	.L497
	.byte	1,1
	.word	.L274,.L745,.L273
	.byte	4
	.byte	'shell',0,1,92,49
	.word	.L499,.L746
	.byte	4
	.byte	'Code',0,1,92,66
	.word	.L521,.L747
	.byte	5
	.word	.L274,.L745
	.byte	6
	.byte	'length',0,1,94,15
	.word	.L521,.L748
	.byte	7
	.word	.L649,.L749,.L745
	.byte	8
	.word	.L652,.L750
	.byte	8
	.word	.L654,.L751
	.byte	8
	.word	.L656,.L752
	.byte	8
	.word	.L658,.L753
	.byte	9
	.word	.L660,.L749,.L745
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_writeResult')
	.sect	'.debug_abbrev'
.L473:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_writeResult')
	.sect	'.debug_line'
.L474:
	.word	.L1560-.L1559
.L1559:
	.half	3
	.word	.L1562-.L1561
.L1561:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf',0,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0
	.byte	'IfxStdIf_DPipe.h',0,1,0,0,0
.L1562:
	.byte	5,16,7,0,5,2
	.word	.L274
	.byte	3,219,0,1,5,24,9
	.half	.L761-.L274
	.byte	3,2,1,5,16,3,126,1,5,50,9
	.half	.L1563-.L761
	.byte	3,3,1,5,22,9
	.half	.L1564-.L1563
	.byte	3,127,1,4,2,5,53,9
	.half	.L749-.L1564
	.byte	3,167,1,1,5,17,9
	.half	.L762-.L749
	.byte	1,5,30,9
	.half	.L1565-.L762
	.byte	1,4,1,5,57,9
	.half	.L763-.L1565
	.byte	3,218,126,1,5,64,9
	.half	.L1566-.L763
	.byte	1,4,2,5,53,9
	.half	.L1567-.L1566
	.byte	3,166,1,1,4,1,5,1,7,9
	.half	.L476-.L1567
	.byte	3,223,126,0,1,1
.L1560:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_writeResult')
	.sect	'.debug_ranges'
.L475:
	.word	-1,.L274,0,.L476-.L274,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_showHelpSingleCommand')
	.sect	'.debug_info'
.L477:
	.word	342
	.half	3
	.word	.L478
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L480,.L479
	.byte	2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_showHelpSingleCommand',0,1,197,1,9
	.word	.L497
	.byte	1,1,1
	.word	.L278,.L754,.L277
	.byte	4
	.byte	'args',0,1,197,1,47
	.word	.L548,.L755
	.byte	4
	.byte	'shellPtr',0,1,197,1,59
	.word	.L663,.L756
	.byte	4
	.byte	'io',0,1,197,1,85
	.word	.L634,.L757
	.byte	5
	.word	.L278,.L754
	.byte	6
	.byte	'commandList',0,1,199,1,32
	.word	.L616,.L758
	.byte	6
	.byte	'shellCommand',0,1,200,1,32
	.word	.L614,.L759
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_showHelpSingleCommand')
	.sect	'.debug_abbrev'
.L478:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Ifx_Shell_showHelpSingleCommand')
	.sect	'.debug_line'
.L479:
	.word	.L1569-.L1568
.L1568:
	.half	3
	.word	.L1571-.L1570
.L1570:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1571:
	.byte	5,9,7,0,5,2
	.word	.L278
	.byte	3,196,1,1,5,83,9
	.half	.L791-.L278
	.byte	3,3,1,5,90,9
	.half	.L1572-.L791
	.byte	1,5,97,9
	.half	.L789-.L1572
	.byte	1,5,45,9
	.half	.L792-.L789
	.byte	1,5,97,9
	.half	.L794-.L792
	.byte	1,5,5,9
	.half	.L795-.L794
	.byte	3,2,1,5,25,7,9
	.half	.L1573-.L795
	.byte	3,2,1,5,9,9
	.half	.L1574-.L1573
	.byte	1,5,55,7,9
	.half	.L1575-.L1574
	.byte	3,2,1,5,62,9
	.half	.L1576-.L1575
	.byte	1,5,68,1,5,28,9
	.half	.L27-.L1576
	.byte	3,4,1,5,13,9
	.half	.L1577-.L27
	.byte	1,5,60,7,9
	.half	.L1578-.L1577
	.byte	3,2,1,5,42,9
	.half	.L1579-.L1578
	.byte	1,5,56,9
	.half	.L29-.L1579
	.byte	3,3,1,5,63,9
	.half	.L1580-.L29
	.byte	1,5,16,9
	.half	.L798-.L1580
	.byte	3,3,1,5,1,3,7,1,5,34,7,9
	.half	.L26-.L798
	.byte	3,125,1,5,16,9
	.half	.L800-.L26
	.byte	3,1,1,5,1,3,2,1,7,9
	.half	.L481-.L800
	.byte	0,1,1
.L1569:
	.sdecl	'.debug_ranges',debug,cluster('Ifx_Shell_showHelpSingleCommand')
	.sect	'.debug_ranges'
.L480:
	.word	-1,.L278,0,.L481-.L278,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_34')
	.sect	'.debug_info'
.L482:
	.word	198
	.half	3
	.word	.L483
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L485,.L484
	.byte	2
	.word	.L333
	.byte	3
	.byte	'.cocofun_34',0,1,194,8,6,1
	.word	.L326,.L486,.L325
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_34')
	.sect	'.debug_abbrev'
.L483:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_34')
	.sect	'.debug_line'
.L484:
	.word	.L1582-.L1581
.L1581:
	.half	3
	.word	.L1584-.L1583
.L1583:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1584:
	.byte	5,13,7,0,5,2
	.word	.L326
	.byte	3,243,8,1,9
	.half	.L486-.L326
	.byte	0,1,1,5,13,0,5,2
	.word	.L326
	.byte	3,245,8,1,9
	.half	.L1585-.L326
	.byte	3,126,1,7,9
	.half	.L486-.L1585
	.byte	0,1,1,5,17,0,5,2
	.word	.L326
	.byte	3,133,9,1,5,13,9
	.half	.L1585-.L326
	.byte	3,110,1,7,9
	.half	.L486-.L1585
	.byte	0,1,1,5,17,0,5,2
	.word	.L326
	.byte	3,135,9,1,5,13,9
	.half	.L1585-.L326
	.byte	3,108,1,7,9
	.half	.L486-.L1585
	.byte	0,1,1,5,17,0,5,2
	.word	.L326
	.byte	3,152,9,1,5,13,9
	.half	.L1585-.L326
	.byte	3,91,1,7,9
	.half	.L486-.L1585
	.byte	0,1,1,5,17,0,5,2
	.word	.L326
	.byte	3,154,9,1,5,13,9
	.half	.L1585-.L326
	.byte	3,89,1,7,9
	.half	.L486-.L1585
	.byte	0,1,1,5,13,0,5,2
	.word	.L326
	.byte	3,180,9,1,9
	.half	.L1585-.L326
	.byte	3,191,127,1,7,9
	.half	.L486-.L1585
	.byte	0,1,1,5,17,0,5,2
	.word	.L326
	.byte	3,198,9,1,5,13,9
	.half	.L1585-.L326
	.byte	3,173,127,1,7,9
	.half	.L486-.L1585
	.byte	0,1,1,5,21,0,5,2
	.word	.L326
	.byte	3,220,9,1,5,13,9
	.half	.L1585-.L326
	.byte	3,151,127,1,7,9
	.half	.L486-.L1585
	.byte	0,1,1
.L1582:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_34')
	.sect	'.debug_ranges'
.L485:
	.word	-1,.L326,0,.L486-.L326,0,0
	.sdecl	'.debug_info',debug,cluster('.cocofun_35')
	.sect	'.debug_info'
.L487:
	.word	198
	.half	3
	.word	.L488
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L490,.L489
	.byte	2
	.word	.L333
	.byte	3
	.byte	'.cocofun_35',0,1,194,8,6,1
	.word	.L324,.L491,.L323
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('.cocofun_35')
	.sect	'.debug_abbrev'
.L488:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,0,3,8,58,15,59,15,57,15,54,15
	.byte	17,1,18,1,64,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('.cocofun_35')
	.sect	'.debug_line'
.L489:
	.word	.L1587-.L1586
.L1586:
	.half	3
	.word	.L1589-.L1588
.L1588:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0,0,0,0,0
.L1589:
	.byte	5,46,7,0,5,2
	.word	.L324
	.byte	3,238,8,1,5,62,9
	.half	.L978-.L324
	.byte	1,5,42,9
	.half	.L970-.L978
	.byte	1,5,62,9
	.half	.L1590-.L970
	.byte	1,7,9
	.half	.L491-.L1590
	.byte	0,1,1,5,50,0,5,2
	.word	.L324
	.byte	3,148,9,1,5,66,9
	.half	.L978-.L324
	.byte	1,5,46,9
	.half	.L970-.L978
	.byte	1,5,62,9
	.half	.L1590-.L970
	.byte	3,90,1,7,9
	.half	.L491-.L1590
	.byte	0,1,1
.L1587:
	.sdecl	'.debug_ranges',debug,cluster('.cocofun_35')
	.sect	'.debug_ranges'
.L490:
	.word	-1,.L324,0,.L491-.L324,0,0
	.sdecl	'.debug_info',debug,cluster('Ifx_Shell_cmdBuffer')
	.sect	'.debug_info'
.L492:
	.word	195
	.half	3
	.word	.L493
	.byte	4,1
	.byte	'..\\0_Src\\1_SrvSw\\SysSe\\Comm\\Ifx_Shell.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1,2
	.word	.L333
	.byte	3
	.byte	'Ifx_Shell_cmdBuffer',0,9,74,6
	.word	.L760
	.byte	1,5,3
	.word	Ifx_Shell_cmdBuffer
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Ifx_Shell_cmdBuffer')
	.sect	'.debug_abbrev'
.L493:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,63,12,2,9
	.byte	0,0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_34')
	.sect	'.debug_loc'
.L325:
	.word	-1,.L326,0,.L486-.L326
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('.cocofun_35')
	.sect	'.debug_loc'
.L323:
	.word	-1,.L324,0,.L491-.L324
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_bbProtocolStart')
	.sect	'.debug_loc'
.L283:
	.word	-1,.L284,0,.L820-.L284
	.half	2
	.byte	138,0
	.word	.L820-.L284,.L679-.L284
	.half	2
	.byte	138,8
	.word	.L679-.L284,.L679-.L284
	.half	2
	.byte	138,0
	.word	0,0
.L680:
	.word	-1,.L284,0,.L821-.L284
	.half	1
	.byte	100
	.word	0,.L679-.L284
	.half	2
	.byte	145,120
	.word	0,0
.L681:
	.word	-1,.L284,0,.L822-.L284
	.half	1
	.byte	101
	.word	.L824-.L284,.L679-.L284
	.half	1
	.byte	111
	.word	.L831-.L284,.L826-.L284
	.half	1
	.byte	101
	.word	0,0
.L682:
	.word	-1,.L284,0,.L823-.L284
	.half	1
	.byte	102
	.word	.L825-.L284,.L679-.L284
	.half	1
	.byte	108
	.word	.L827-.L284,.L828-.L284
	.half	1
	.byte	100
	.word	.L829-.L284,.L830-.L284
	.half	1
	.byte	100
	.word	.L832-.L284,.L826-.L284
	.half	1
	.byte	102
	.word	0,0
.L683:
	.word	-1,.L284,.L821-.L284,.L826-.L284
	.half	1
	.byte	95
	.word	.L826-.L284,.L45-.L284
	.half	1
	.byte	82
	.word	.L45-.L284,.L679-.L284
	.half	1
	.byte	95
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_cmdEscapeProcess')
	.sect	'.debug_loc'
.L696:
	.word	0,0
.L693:
	.word	-1,.L322,0,.L207-.L322
	.half	1
	.byte	84
	.word	.L962-.L322,.L963-.L322
	.half	1
	.byte	88
	.word	.L964-.L322,.L965-.L322
	.half	1
	.byte	88
	.word	.L966-.L322,.L967-.L322
	.half	1
	.byte	88
	.word	.L968-.L322,.L969-.L322
	.half	1
	.byte	88
	.word	.L324-.L322,.L970-.L322
	.half	1
	.byte	84
	.word	.L202-.L322,.L221-.L322
	.half	1
	.byte	84
	.word	.L218-.L322,.L977-.L322
	.half	1
	.byte	84
	.word	.L324-.L322,.L978-.L322
	.half	1
	.byte	84
	.word	.L203-.L322,.L236-.L322
	.half	1
	.byte	84
	.word	.L326-.L322,.L486-.L322
	.half	1
	.byte	84
	.word	.L204-.L322,.L239-.L322
	.half	1
	.byte	84
	.word	.L991-.L322,.L992-.L322
	.half	1
	.byte	88
	.word	.L993-.L322,.L994-.L322
	.half	1
	.byte	88
	.word	.L995-.L322,.L996-.L322
	.half	1
	.byte	88
	.word	.L997-.L322,.L200-.L322
	.half	1
	.byte	88
	.word	0,0
.L694:
	.word	-1,.L322,0,.L207-.L322
	.half	1
	.byte	85
	.word	.L324-.L322,.L491-.L322
	.half	1
	.byte	85
	.word	.L971-.L322,.L972-.L322
	.half	1
	.byte	85
	.word	.L202-.L322,.L221-.L322
	.half	1
	.byte	85
	.word	.L218-.L322,.L977-.L322
	.half	1
	.byte	85
	.word	.L979-.L322,.L980-.L322
	.half	1
	.byte	85
	.word	.L203-.L322,.L236-.L322
	.half	1
	.byte	85
	.word	.L326-.L322,.L486-.L322
	.half	1
	.byte	85
	.word	.L204-.L322,.L239-.L322
	.half	1
	.byte	85
	.word	.L989-.L322,.L990-.L322
	.half	1
	.byte	89
	.word	0,0
.L321:
	.word	-1,.L322,0,.L960-.L322
	.half	2
	.byte	138,0
	.word	.L960-.L322,.L241-.L322
	.half	2
	.byte	138,8
	.word	.L241-.L322,.L241-.L322
	.half	2
	.byte	138,0
	.word	.L241-.L322,.L242-.L322
	.half	2
	.byte	138,8
	.word	.L242-.L322,.L242-.L322
	.half	2
	.byte	138,0
	.word	.L242-.L322,.L267-.L322
	.half	2
	.byte	138,8
	.word	.L267-.L322,.L267-.L322
	.half	2
	.byte	138,0
	.word	.L267-.L322,.L690-.L322
	.half	2
	.byte	138,8
	.word	.L690-.L322,.L690-.L322
	.half	2
	.byte	138,0
	.word	0,0
.L697:
	.word	-1,.L322,.L962-.L322,.L207-.L322
	.half	1
	.byte	108
	.word	.L324-.L322,.L491-.L322
	.half	1
	.byte	108
	.word	.L970-.L322,.L491-.L322
	.half	1
	.byte	100
	.word	.L971-.L322,.L211-.L322
	.half	1
	.byte	108
	.word	.L971-.L322,.L972-.L322
	.half	1
	.byte	100
	.word	.L326-.L322,.L486-.L322
	.half	1
	.byte	108
	.word	.L973-.L322,.L215-.L322
	.half	1
	.byte	108
	.word	.L974-.L322,.L221-.L322
	.half	1
	.byte	108
	.word	.L975-.L322,.L225-.L322
	.half	1
	.byte	108
	.word	.L976-.L322,.L977-.L322
	.half	1
	.byte	108
	.word	.L979-.L322,.L229-.L322
	.half	1
	.byte	108
	.word	.L979-.L322,.L980-.L322
	.half	1
	.byte	100
	.word	.L981-.L322,.L233-.L322
	.half	1
	.byte	108
	.word	.L983-.L322,.L209-.L322
	.half	1
	.byte	101
	.word	.L984-.L322,.L985-.L322
	.half	1
	.byte	100
	.word	.L982-.L322,.L200-.L322
	.half	1
	.byte	108
	.word	.L241-.L322,.L255-.L322
	.half	1
	.byte	108
	.word	.L999-.L322,.L690-.L322
	.half	1
	.byte	108
	.word	0,0
.L698:
	.word	-1,.L322,.L998-.L322,.L255-.L322
	.half	1
	.byte	95
	.word	.L1000-.L322,.L1001-.L322
	.half	1
	.byte	95
	.word	.L1002-.L322,.L264-.L322
	.half	1
	.byte	88
	.word	0,0
.L702:
	.word	-1,.L322,.L326-.L322,.L486-.L322
	.half	1
	.byte	95
	.word	.L973-.L322,.L213-.L322
	.half	1
	.byte	95
	.word	0,0
.L704:
	.word	-1,.L322,.L213-.L322,.L215-.L322
	.half	1
	.byte	95
	.word	0,0
.L706:
	.word	-1,.L322,.L326-.L322,.L486-.L322
	.half	1
	.byte	95
	.word	.L974-.L322,.L202-.L322
	.half	1
	.byte	95
	.word	0,0
.L709:
	.word	-1,.L322,.L326-.L322,.L486-.L322
	.half	1
	.byte	95
	.word	.L975-.L322,.L223-.L322
	.half	1
	.byte	95
	.word	0,0
.L711:
	.word	-1,.L322,.L223-.L322,.L225-.L322
	.half	1
	.byte	95
	.word	0,0
.L712:
	.word	-1,.L322,.L326-.L322,.L486-.L322
	.half	1
	.byte	95
	.word	.L976-.L322,.L219-.L322
	.half	1
	.byte	95
	.word	0,0
.L715:
	.word	-1,.L322,.L326-.L322,.L486-.L322
	.half	1
	.byte	95
	.word	.L981-.L322,.L231-.L322
	.half	1
	.byte	95
	.word	0,0
.L717:
	.word	-1,.L322,.L231-.L322,.L233-.L322
	.half	1
	.byte	95
	.word	0,0
.L718:
	.word	-1,.L322,.L326-.L322,.L486-.L322
	.half	1
	.byte	95
	.word	.L982-.L322,.L216-.L322
	.half	1
	.byte	95
	.word	0,0
.L721:
	.word	-1,.L322,.L326-.L322,.L486-.L322
	.half	1
	.byte	95
	.word	.L247-.L322,.L246-.L322
	.half	1
	.byte	95
	.word	0,0
.L723:
	.word	-1,.L322,.L326-.L322,.L486-.L322
	.half	1
	.byte	88
	.word	.L999-.L322,.L251-.L322
	.half	1
	.byte	88
	.word	0,0
.L725:
	.word	-1,.L322,.L264-.L322,.L260-.L322
	.half	1
	.byte	88
	.word	0,0
.L691:
	.word	-1,.L322,0,.L207-.L322
	.half	1
	.byte	100
	.word	.L961-.L322,.L207-.L322
	.half	1
	.byte	111
	.word	.L324-.L322,.L970-.L322
	.half	1
	.byte	100
	.word	.L324-.L322,.L491-.L322
	.half	1
	.byte	111
	.word	.L971-.L322,.L211-.L322
	.half	1
	.byte	111
	.word	.L326-.L322,.L486-.L322
	.half	1
	.byte	111
	.word	.L973-.L322,.L215-.L322
	.half	1
	.byte	111
	.word	.L974-.L322,.L221-.L322
	.half	1
	.byte	111
	.word	.L202-.L322,.L221-.L322
	.half	1
	.byte	100
	.word	.L975-.L322,.L225-.L322
	.half	1
	.byte	111
	.word	.L976-.L322,.L977-.L322
	.half	1
	.byte	111
	.word	.L218-.L322,.L977-.L322
	.half	1
	.byte	100
	.word	.L979-.L322,.L229-.L322
	.half	1
	.byte	111
	.word	.L981-.L322,.L233-.L322
	.half	1
	.byte	111
	.word	.L203-.L322,.L986-.L322
	.half	1
	.byte	100
	.word	.L204-.L322,.L987-.L322
	.half	1
	.byte	100
	.word	.L326-.L322,.L988-.L322
	.half	1
	.byte	100
	.word	.L982-.L322,.L255-.L322
	.half	1
	.byte	111
	.word	.L999-.L322,.L690-.L322
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_commandFind')
	.sect	'.debug_loc'
.L315:
	.word	-1,.L316,0,.L929-.L316
	.half	2
	.byte	138,0
	.word	.L929-.L316,.L615-.L316
	.half	3
	.byte	138,144,2
	.word	.L615-.L316,.L615-.L316
	.half	2
	.byte	138,0
	.word	0,0
.L619:
	.word	-1,.L316,0,.L171-.L316
	.half	1
	.byte	102
	.word	.L931-.L316,.L615-.L316
	.half	2
	.byte	145,120
	.word	.L940-.L316,.L174-.L316
	.half	1
	.byte	98
	.word	0,0
.L630:
	.word	-1,.L316,0,.L615-.L316
	.half	3
	.byte	145,248,125
	.word	0,0
.L623:
	.word	-1,.L316,.L934-.L316,.L615-.L316
	.half	1
	.byte	111
	.word	0,0
.L621:
	.word	-1,.L316,.L933-.L316,.L615-.L316
	.half	1
	.byte	109
	.word	0,0
.L618:
	.word	-1,.L316,0,.L171-.L316
	.half	1
	.byte	101
	.word	0,0
.L629:
	.word	-1,.L316,0,.L615-.L316
	.half	3
	.byte	145,244,125
	.word	0,0
.L617:
	.word	-1,.L316,0,.L171-.L316
	.half	1
	.byte	100
	.word	0,0
.L628:
	.word	-1,.L316,0,.L615-.L316
	.half	3
	.byte	145,240,125
	.word	0,0
.L627:
	.word	-1,.L316,.L936-.L316,.L168-.L316
	.half	1
	.byte	91
	.word	.L941-.L316,.L178-.L316
	.half	1
	.byte	91
	.word	0,0
.L626:
	.word	-1,.L316,.L938-.L316,.L939-.L316
	.half	1
	.byte	90
	.word	.L174-.L316,.L941-.L316
	.half	1
	.byte	90
	.word	.L178-.L316,.L170-.L316
	.half	1
	.byte	90
	.word	0,0
.L620:
	.word	-1,.L316,0,.L171-.L316
	.half	1
	.byte	103
	.word	.L932-.L316,.L615-.L316
	.half	1
	.byte	108
	.word	0,0
.L631:
	.word	-1,.L316,.L173-.L316,.L170-.L316
	.half	1
	.byte	88
	.word	0,0
.L625:
	.word	-1,.L316,.L930-.L316,.L615-.L316
	.half	1
	.byte	89
	.word	.L937-.L316,.L171-.L316
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L622:
	.word	-1,.L316,.L935-.L316,.L615-.L316
	.half	1
	.byte	110
	.word	.L942-.L316,.L615-.L316
	.half	1
	.byte	98
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_commandListFind')
	.sect	'.debug_loc'
.L733:
	.word	-1,.L318,.L950-.L318,.L726-.L318
	.half	1
	.byte	109
	.word	.L951-.L318,.L726-.L318
	.half	1
	.byte	98
	.word	0,0
.L317:
	.word	-1,.L318,0,.L943-.L318
	.half	2
	.byte	138,0
	.word	.L943-.L318,.L726-.L318
	.half	2
	.byte	138,8
	.word	.L726-.L318,.L726-.L318
	.half	2
	.byte	138,0
	.word	0,0
.L729:
	.word	-1,.L318,0,.L944-.L318
	.half	1
	.byte	102
	.word	0,0
.L728:
	.word	-1,.L318,0,.L944-.L318
	.half	1
	.byte	101
	.word	0,0
.L731:
	.word	-1,.L318,0,.L945-.L318
	.half	1
	.byte	103
	.word	.L949-.L318,.L726-.L318
	.half	1
	.byte	108
	.word	0,0
.L734:
	.word	-1,.L318,0,.L726-.L318
	.half	2
	.byte	145,120
	.word	0,0
.L727:
	.word	-1,.L318,0,.L946-.L318
	.half	1
	.byte	100
	.word	.L947-.L318,.L948-.L318
	.half	1
	.byte	111
	.word	0,0
.L732:
	.word	-1,.L318,.L944-.L318,.L182-.L318
	.half	1
	.byte	98
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_deinit')
	.sect	'.debug_loc'
.L291:
	.word	-1,.L292,0,.L507-.L292
	.half	2
	.byte	138,0
	.word	0,0
.L508:
	.word	-1,.L292,0,.L507-.L292
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_disable')
	.sect	'.debug_loc'
.L329:
	.word	-1,.L330,0,.L517-.L330
	.half	2
	.byte	138,0
	.word	0,0
.L518:
	.word	-1,.L330,0,.L517-.L330
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_enable')
	.sect	'.debug_loc'
.L327:
	.word	-1,.L328,0,.L509-.L328
	.half	2
	.byte	138,0
	.word	0,0
.L510:
	.word	-1,.L328,0,.L1003-.L328
	.half	1
	.byte	100
	.word	.L1004-.L328,.L509-.L328
	.half	1
	.byte	111
	.word	0,0
.L515:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_execute')
	.sect	'.debug_loc'
.L319:
	.word	-1,.L320,0,.L952-.L320
	.half	2
	.byte	138,0
	.word	.L952-.L320,.L187-.L320
	.half	2
	.byte	138,16
	.word	.L187-.L320,.L187-.L320
	.half	2
	.byte	138,0
	.word	.L187-.L320,.L197-.L320
	.half	2
	.byte	138,16
	.word	.L197-.L320,.L197-.L320
	.half	2
	.byte	138,0
	.word	.L197-.L320,.L199-.L320
	.half	2
	.byte	138,16
	.word	.L199-.L320,.L199-.L320
	.half	2
	.byte	138,0
	.word	.L199-.L320,.L684-.L320
	.half	2
	.byte	138,16
	.word	.L684-.L320,.L684-.L320
	.half	2
	.byte	138,0
	.word	0,0
.L687:
	.word	-1,.L320,0,.L684-.L320
	.half	2
	.byte	145,116
	.word	0,0
.L686:
	.word	-1,.L320,0,.L953-.L320
	.half	1
	.byte	101
	.word	.L955-.L320,.L684-.L320
	.half	1
	.byte	108
	.word	.L957-.L320,.L187-.L320
	.half	1
	.byte	100
	.word	0,0
.L688:
	.word	-1,.L320,0,.L684-.L320
	.half	2
	.byte	145,120
	.word	0,0
.L685:
	.word	-1,.L320,0,.L953-.L320
	.half	1
	.byte	100
	.word	.L954-.L320,.L684-.L320
	.half	1
	.byte	111
	.word	.L958-.L320,.L187-.L320
	.half	1
	.byte	101
	.word	.L959-.L320,.L197-.L320
	.half	1
	.byte	100
	.word	0,0
.L689:
	.word	-1,.L320,.L953-.L320,.L956-.L320
	.half	1
	.byte	98
	.word	.L186-.L320,.L193-.L320
	.half	1
	.byte	98
	.word	.L197-.L320,.L195-.L320
	.half	1
	.byte	98
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_init')
	.sect	'.debug_loc'
.L506:
	.word	-1,.L288,.L836-.L288,.L837-.L288
	.half	1
	.byte	98
	.word	0,0
.L287:
	.word	-1,.L288,0,.L498-.L288
	.half	2
	.byte	138,0
	.word	0,0
.L502:
	.word	-1,.L288,0,.L833-.L288
	.half	1
	.byte	101
	.word	.L835-.L288,.L498-.L288
	.half	1
	.byte	108
	.word	0,0
.L504:
	.word	0,0
.L500:
	.word	-1,.L288,0,.L833-.L288
	.half	1
	.byte	100
	.word	.L834-.L288,.L498-.L288
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_initConfig')
	.sect	'.debug_loc'
.L285:
	.word	-1,.L286,0,.L494-.L286
	.half	2
	.byte	138,0
	.word	0,0
.L496:
	.word	-1,.L286,0,.L494-.L286
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_isEndOfLine')
	.sect	'.debug_loc'
.L271:
	.word	-1,.L272,0,.L743-.L272
	.half	2
	.byte	138,0
	.word	0,0
.L744:
	.word	-1,.L272,0,.L743-.L272
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_matchCommand')
	.sect	'.debug_loc'
.L297:
	.word	-1,.L298,0,.L875-.L298
	.half	2
	.byte	138,0
	.word	.L875-.L298,.L735-.L298
	.half	3
	.byte	138,128,4
	.word	.L735-.L298,.L735-.L298
	.half	2
	.byte	138,0
	.word	0,0
.L736:
	.word	-1,.L298,0,.L876-.L298
	.half	1
	.byte	100
	.word	.L878-.L298,.L735-.L298
	.half	1
	.byte	111
	.word	0,0
.L741:
	.word	-1,.L298,0,.L735-.L298
	.half	3
	.byte	145,128,124
	.word	0,0
.L742:
	.word	-1,.L298,0,.L735-.L298
	.half	3
	.byte	145,128,126
	.word	0,0
.L737:
	.word	-1,.L298,0,.L877-.L298
	.half	1
	.byte	101
	.word	.L879-.L298,.L735-.L298
	.half	1
	.byte	108
	.word	.L882-.L298,.L883-.L298
	.half	1
	.byte	100
	.word	0,0
.L738:
	.word	-1,.L298,.L880-.L298,.L735-.L298
	.half	1
	.byte	95
	.word	0,0
.L739:
	.word	-1,.L298,.L880-.L298,.L735-.L298
	.half	1
	.byte	109
	.word	0,0
.L740:
	.word	-1,.L298,.L881-.L298,.L735-.L298
	.half	1
	.byte	110
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_matchToken')
	.sect	'.debug_loc'
.L295:
	.word	-1,.L296,0,.L867-.L296
	.half	2
	.byte	138,0
	.word	.L867-.L296,.L551-.L296
	.half	3
	.byte	138,128,2
	.word	.L551-.L296,.L551-.L296
	.half	2
	.byte	138,0
	.word	0,0
.L553:
	.word	-1,.L296,0,.L868-.L296
	.half	1
	.byte	100
	.word	.L870-.L296,.L551-.L296
	.half	1
	.byte	111
	.word	0,0
.L557:
	.word	-1,.L296,0,.L551-.L296
	.half	3
	.byte	145,128,126
	.word	0,0
.L558:
	.word	-1,.L296,.L869-.L296,.L551-.L296
	.half	1
	.byte	95
	.word	0,0
.L555:
	.word	-1,.L296,.L872-.L296,.L551-.L296
	.half	1
	.byte	109
	.word	0,0
.L554:
	.word	-1,.L296,0,.L869-.L296
	.half	1
	.byte	101
	.word	.L871-.L296,.L551-.L296
	.half	1
	.byte	108
	.word	.L873-.L296,.L874-.L296
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_parseAddress')
	.sect	'.debug_loc'
.L301:
	.word	-1,.L302,0,.L892-.L302
	.half	2
	.byte	138,0
	.word	.L892-.L302,.L565-.L302
	.half	2
	.byte	138,40
	.word	.L565-.L302,.L565-.L302
	.half	2
	.byte	138,0
	.word	0,0
.L568:
	.word	-1,.L302,0,.L893-.L302
	.half	1
	.byte	101
	.word	.L895-.L302,.L565-.L302
	.half	1
	.byte	111
	.word	0,0
.L566:
	.word	-1,.L302,0,.L894-.L302
	.half	1
	.byte	100
	.word	0,0
.L570:
	.word	-1,.L302,0,.L565-.L302
	.half	2
	.byte	145,92
	.word	0,0
.L571:
	.word	-1,.L302,.L896-.L302,.L565-.L302
	.half	1
	.byte	88
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_parseFloat32')
	.sect	'.debug_loc'
.L313:
	.word	-1,.L314,0,.L924-.L314
	.half	2
	.byte	138,0
	.word	.L924-.L314,.L608-.L314
	.half	3
	.byte	138,200,0
	.word	.L608-.L314,.L608-.L314
	.half	2
	.byte	138,0
	.word	0,0
.L609:
	.word	-1,.L314,0,.L925-.L314
	.half	1
	.byte	100
	.word	0,0
.L612:
	.word	-1,.L314,0,.L608-.L314
	.half	3
	.byte	145,188,127
	.word	0,0
.L613:
	.word	-1,.L314,.L928-.L314,.L608-.L314
	.half	1
	.byte	88
	.word	0,0
.L611:
	.word	-1,.L314,0,.L926-.L314
	.half	1
	.byte	101
	.word	.L927-.L314,.L608-.L314
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_parseFloat64')
	.sect	'.debug_loc'
.L311:
	.word	-1,.L312,0,.L919-.L312
	.half	2
	.byte	138,0
	.word	.L919-.L312,.L602-.L312
	.half	3
	.byte	138,200,0
	.word	.L602-.L312,.L602-.L312
	.half	2
	.byte	138,0
	.word	0,0
.L603:
	.word	-1,.L312,0,.L920-.L312
	.half	1
	.byte	100
	.word	0,0
.L606:
	.word	-1,.L312,0,.L602-.L312
	.half	3
	.byte	145,188,127
	.word	0,0
.L607:
	.word	-1,.L312,.L923-.L312,.L602-.L312
	.half	1
	.byte	88
	.word	0,0
.L605:
	.word	-1,.L312,0,.L921-.L312
	.half	1
	.byte	101
	.word	.L922-.L312,.L602-.L312
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_parseSInt32')
	.sect	'.debug_loc'
.L303:
	.word	-1,.L304,0,.L897-.L304
	.half	2
	.byte	138,0
	.word	.L897-.L304,.L136-.L304
	.half	2
	.byte	138,8
	.word	.L136-.L304,.L136-.L304
	.half	2
	.byte	138,0
	.word	.L136-.L304,.L572-.L304
	.half	2
	.byte	138,8
	.word	.L572-.L304,.L572-.L304
	.half	2
	.byte	138,0
	.word	0,0
.L573:
	.word	-1,.L304,0,.L898-.L304
	.half	1
	.byte	100
	.word	0,0
.L578:
	.word	0,0
.L575:
	.word	-1,.L304,0,.L899-.L304
	.half	1
	.byte	101
	.word	.L900-.L304,.L572-.L304
	.half	1
	.byte	111
	.word	0,0
.L577:
	.word	-1,.L304,0,.L572-.L304
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_parseSInt64')
	.sect	'.debug_loc'
.L307:
	.word	-1,.L308,0,.L905-.L308
	.half	2
	.byte	138,0
	.word	.L905-.L308,.L587-.L308
	.half	3
	.byte	138,200,0
	.word	.L587-.L308,.L587-.L308
	.half	2
	.byte	138,0
	.word	0,0
.L588:
	.word	-1,.L308,0,.L906-.L308
	.half	1
	.byte	100
	.word	0,0
.L592:
	.word	-1,.L308,0,.L587-.L308
	.half	3
	.byte	145,188,127
	.word	0,0
.L593:
	.word	-1,.L308,.L909-.L308,.L587-.L308
	.half	1
	.byte	88
	.word	0,0
.L590:
	.word	-1,.L308,0,.L907-.L308
	.half	1
	.byte	101
	.word	.L908-.L308,.L587-.L308
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_parseToken')
	.sect	'.debug_loc'
.L299:
	.word	-1,.L300,0,.L559-.L300
	.half	2
	.byte	138,0
	.word	0,0
.L564:
	.word	-1,.L300,.L885-.L300,.L890-.L300
	.half	1
	.byte	98
	.word	.L891-.L300,.L890-.L300
	.half	1
	.byte	100
	.word	0,0
.L560:
	.word	-1,.L300,0,.L884-.L300
	.half	1
	.byte	100
	.word	.L886-.L300,.L559-.L300
	.half	1
	.byte	108
	.word	0,0
.L562:
	.word	-1,.L300,0,.L885-.L300
	.half	1
	.byte	84
	.word	.L886-.L300,.L887-.L300
	.half	1
	.byte	88
	.word	0,0
.L563:
	.word	-1,.L300,.L884-.L300,.L559-.L300
	.half	1
	.byte	89
	.word	0,0
.L561:
	.word	-1,.L300,0,.L885-.L300
	.half	1
	.byte	101
	.word	.L888-.L300,.L889-.L300
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_parseUInt32')
	.sect	'.debug_loc'
.L305:
	.word	-1,.L306,0,.L901-.L306
	.half	2
	.byte	138,0
	.word	.L901-.L306,.L139-.L306
	.half	2
	.byte	138,8
	.word	.L139-.L306,.L139-.L306
	.half	2
	.byte	138,0
	.word	.L139-.L306,.L579-.L306
	.half	2
	.byte	138,8
	.word	.L579-.L306,.L579-.L306
	.half	2
	.byte	138,0
	.word	0,0
.L580:
	.word	-1,.L306,0,.L902-.L306
	.half	1
	.byte	100
	.word	0,0
.L583:
	.word	-1,.L306,0,.L902-.L306
	.half	1
	.byte	84
	.word	0,0
.L586:
	.word	0,0
.L582:
	.word	-1,.L306,0,.L903-.L306
	.half	1
	.byte	101
	.word	.L904-.L306,.L579-.L306
	.half	1
	.byte	111
	.word	0,0
.L585:
	.word	-1,.L306,0,.L579-.L306
	.half	2
	.byte	145,120
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_parseUInt64')
	.sect	'.debug_loc'
.L309:
	.word	-1,.L310,0,.L910-.L310
	.half	2
	.byte	138,0
	.word	.L910-.L310,.L594-.L310
	.half	3
	.byte	138,200,0
	.word	.L594-.L310,.L594-.L310
	.half	2
	.byte	138,0
	.word	0,0
.L595:
	.word	-1,.L310,0,.L911-.L310
	.half	1
	.byte	100
	.word	0,0
.L599:
	.word	-1,.L310,0,.L594-.L310
	.half	3
	.byte	145,188,127
	.word	0,0
.L601:
	.word	-1,.L310,.L915-.L310,.L916-.L310
	.half	1
	.byte	100
	.word	.L151-.L310,.L917-.L310
	.half	1
	.byte	100
	.word	0,0
.L598:
	.word	-1,.L310,0,.L912-.L310
	.half	1
	.byte	84
	.word	.L910-.L310,.L914-.L310
	.half	1
	.byte	88
	.word	.L151-.L310,.L148-.L310
	.half	1
	.byte	88
	.word	0,0
.L600:
	.word	-1,.L310,.L914-.L310,.L151-.L310
	.half	1
	.byte	88
	.word	.L918-.L310,.L594-.L310
	.half	1
	.byte	88
	.word	0,0
.L597:
	.word	-1,.L310,0,.L913-.L310
	.half	1
	.byte	101
	.word	.L912-.L310,.L594-.L310
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_printSyntax')
	.sect	'.debug_loc'
.L331:
	.word	-1,.L332,0,.L1005-.L332
	.half	2
	.byte	138,0
	.word	.L1005-.L332,.L668-.L332
	.half	2
	.byte	138,8
	.word	.L668-.L332,.L668-.L332
	.half	2
	.byte	138,0
	.word	0,0
.L671:
	.word	-1,.L332,0,.L270-.L332
	.half	1
	.byte	101
	.word	.L1006-.L332,.L668-.L332
	.half	1
	.byte	108
	.word	.L1008-.L332,.L1009-.L332
	.half	1
	.byte	100
	.word	.L1010-.L332,.L1011-.L332
	.half	1
	.byte	100
	.word	0,0
.L672:
	.word	-1,.L332,.L1007-.L332,.L668-.L332
	.half	1
	.byte	111
	.word	0,0
.L670:
	.word	-1,.L332,0,.L270-.L332
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_process')
	.sect	'.debug_loc'
.L528:
	.word	0,0
.L532:
	.word	-1,.L290,.L842-.L290,.L844-.L290
	.half	1
	.byte	111
	.word	.L845-.L290,.L519-.L290
	.half	2
	.byte	145,124
	.word	.L53-.L290,.L847-.L290
	.half	1
	.byte	111
	.word	.L854-.L290,.L75-.L290
	.half	1
	.byte	111
	.word	0,0
.L289:
	.word	-1,.L290,0,.L838-.L290
	.half	2
	.byte	138,0
	.word	.L838-.L290,.L54-.L290
	.half	2
	.byte	138,16
	.word	.L54-.L290,.L54-.L290
	.half	2
	.byte	138,0
	.word	.L54-.L290,.L519-.L290
	.half	2
	.byte	138,16
	.word	.L519-.L290,.L519-.L290
	.half	2
	.byte	138,0
	.word	0,0
.L526:
	.word	-1,.L290,.L853-.L290,.L56-.L290
	.half	1
	.byte	91
	.word	0,0
.L531:
	.word	-1,.L290,.L846-.L290,.L519-.L290
	.half	1
	.byte	109
	.word	.L855-.L290,.L75-.L290
	.half	1
	.byte	101
	.word	.L857-.L290,.L74-.L290
	.half	1
	.byte	101
	.word	0,0
.L541:
	.word	0,0
.L524:
	.word	-1,.L290,.L849-.L290,.L52-.L290
	.half	1
	.byte	88
	.word	0,0
.L539:
	.word	0,0
.L522:
	.word	-1,.L290,.L57-.L290,.L850-.L290
	.half	1
	.byte	89
	.word	.L865-.L290,.L52-.L290
	.half	1
	.byte	89
	.word	0,0
.L547:
	.word	-1,.L290,.L84-.L290,.L80-.L290
	.half	1
	.byte	92
	.word	0,0
.L530:
	.word	-1,.L290,.L841-.L290,.L842-.L290
	.half	1
	.byte	111
	.word	.L843-.L290,.L519-.L290
	.half	2
	.byte	145,120
	.word	.L848-.L290,.L535-.L290
	.half	1
	.byte	101
	.word	.L851-.L290,.L852-.L290
	.half	1
	.byte	111
	.word	.L58-.L290,.L858-.L290
	.half	1
	.byte	111
	.word	.L61-.L290,.L78-.L290
	.half	1
	.byte	111
	.word	.L863-.L290,.L96-.L290
	.half	1
	.byte	111
	.word	.L864-.L290,.L56-.L290
	.half	1
	.byte	111
	.word	0,0
.L523:
	.word	-1,.L290,.L859-.L290,.L860-.L290
	.half	1
	.byte	95
	.word	.L81-.L290,.L84-.L290
	.half	1
	.byte	95
	.word	0,0
.L525:
	.word	-1,.L290,0,.L519-.L290
	.half	2
	.byte	145,116
	.word	0,0
.L520:
	.word	-1,.L290,0,.L839-.L290
	.half	1
	.byte	100
	.word	.L840-.L290,.L519-.L290
	.half	1
	.byte	108
	.word	.L856-.L290,.L74-.L290
	.half	1
	.byte	100
	.word	.L861-.L290,.L862-.L290
	.half	1
	.byte	100
	.word	0,0
.L537:
	.word	0,0
.L543:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_protocolStart')
	.sect	'.debug_loc'
.L281:
	.word	-1,.L282,0,.L806-.L282
	.half	2
	.byte	138,0
	.word	.L806-.L282,.L673-.L282
	.half	2
	.byte	138,8
	.word	.L673-.L282,.L673-.L282
	.half	2
	.byte	138,0
	.word	0,0
.L678:
	.word	-1,.L282,.L807-.L282,.L812-.L282
	.half	1
	.byte	95
	.word	.L812-.L282,.L818-.L282
	.half	1
	.byte	82
	.word	.L819-.L282,.L673-.L282
	.half	1
	.byte	95
	.word	0,0
.L674:
	.word	-1,.L282,0,.L807-.L282
	.half	1
	.byte	100
	.word	0,.L673-.L282
	.half	2
	.byte	145,120
	.word	0,0
.L675:
	.word	-1,.L282,0,.L808-.L282
	.half	1
	.byte	101
	.word	.L810-.L282,.L673-.L282
	.half	1
	.byte	111
	.word	0,0
.L676:
	.word	-1,.L282,0,.L809-.L282
	.half	1
	.byte	102
	.word	.L811-.L282,.L673-.L282
	.half	1
	.byte	108
	.word	.L813-.L282,.L814-.L282
	.half	1
	.byte	100
	.word	.L815-.L282,.L816-.L282
	.half	1
	.byte	100
	.word	.L817-.L282,.L812-.L282
	.half	1
	.byte	101
	.word	0,0
.L677:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_showHelp')
	.sect	'.debug_loc'
.L279:
	.word	-1,.L280,0,.L661-.L280
	.half	2
	.byte	138,0
	.word	0,0
.L662:
	.word	-1,.L280,0,.L801-.L280
	.half	1
	.byte	100
	.word	.L32-.L280,.L805-.L280
	.half	1
	.byte	100
	.word	0,0
.L665:
	.word	-1,.L280,0,.L802-.L280
	.half	1
	.byte	102
	.word	.L803-.L280,.L802-.L280
	.half	1
	.byte	101
	.word	.L32-.L280,.L805-.L280
	.half	1
	.byte	102
	.word	0,0
.L667:
	.word	-1,.L280,.L804-.L280,.L805-.L280
	.half	1
	.byte	88
	.word	.L803-.L280,.L802-.L280
	.half	1
	.byte	84
	.word	.L805-.L280,.L33-.L280
	.half	1
	.byte	82
	.word	.L33-.L280,.L661-.L280
	.half	1
	.byte	88
	.word	0,0
.L666:
	.word	0,0
.L664:
	.word	-1,.L280,0,.L803-.L280
	.half	1
	.byte	101
	.word	.L32-.L280,.L805-.L280
	.half	1
	.byte	101
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_showHelpSingle')
	.sect	'.debug_loc'
.L275:
	.word	-1,.L276,0,.L764-.L276
	.half	2
	.byte	138,0
	.word	.L764-.L276,.L632-.L276
	.half	2
	.byte	138,32
	.word	.L632-.L276,.L632-.L276
	.half	2
	.byte	138,0
	.word	0,0
.L636:
	.word	-1,.L276,0,.L8-.L276
	.half	1
	.byte	84
	.word	.L18-.L276,.L779-.L276
	.half	1
	.byte	88
	.word	.L781-.L276,.L9-.L276
	.half	1
	.byte	88
	.word	0,0
.L643:
	.word	-1,.L276,.L775-.L276,.L776-.L276
	.half	1
	.byte	98
	.word	.L777-.L276,.L778-.L276
	.half	1
	.byte	98
	.word	0,0
.L638:
	.word	-1,.L276,0,.L8-.L276
	.half	1
	.byte	100
	.word	.L766-.L276,.L632-.L276
	.half	2
	.byte	145,120
	.word	.L8-.L276,.L768-.L276
	.half	1
	.byte	111
	.word	.L784-.L276,.L7-.L276
	.half	1
	.byte	111
	.word	.L786-.L276,.L24-.L276
	.half	1
	.byte	111
	.word	0,0
.L633:
	.word	-1,.L276,0,.L8-.L276
	.half	1
	.byte	100
	.word	0,0
.L646:
	.word	-1,.L276,0,.L632-.L276
	.half	2
	.byte	145,108
	.word	0,0
.L657:
	.word	0,0
.L655:
	.word	0,0
.L642:
	.word	-1,.L276,0,.L632-.L276
	.half	2
	.byte	145,104
	.word	0,0
.L639:
	.word	-1,.L276,.L767-.L276,.L632-.L276
	.half	1
	.byte	90
	.word	0,0
.L635:
	.word	-1,.L276,0,.L8-.L276
	.half	1
	.byte	101
	.word	.L765-.L276,.L632-.L276
	.half	1
	.byte	108
	.word	.L771-.L276,.L772-.L276
	.half	1
	.byte	100
	.word	.L780-.L276,.L650-.L276
	.half	1
	.byte	100
	.word	.L782-.L276,.L783-.L276
	.half	1
	.byte	100
	.word	0,0
.L644:
	.word	-1,.L276,.L769-.L276,.L7-.L276
	.half	1
	.byte	91
	.word	0,0
.L645:
	.word	-1,.L276,.L770-.L276,.L7-.L276
	.half	1
	.byte	92
	.word	0,0
.L647:
	.word	-1,.L276,0,.L632-.L276
	.half	2
	.byte	145,112
	.word	0,0
.L648:
	.word	-1,.L276,0,.L632-.L276
	.half	2
	.byte	145,116
	.word	0,0
.L637:
	.word	-1,.L276,0,.L8-.L276
	.half	1
	.byte	85
	.word	.L785-.L276,.L7-.L276
	.half	1
	.byte	89
	.word	0,0
.L640:
	.word	-1,.L276,.L767-.L276,.L632-.L276
	.half	1
	.byte	109
	.word	0,0
.L641:
	.word	-1,.L276,.L773-.L276,.L774-.L276
	.half	1
	.byte	111
	.word	0,0
.L653:
	.word	0,0
.L659:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_showHelpSingleCommand')
	.sect	'.debug_loc'
.L277:
	.word	-1,.L278,0,.L787-.L278
	.half	2
	.byte	138,0
	.word	.L787-.L278,.L26-.L278
	.half	2
	.byte	138,16
	.word	.L26-.L278,.L26-.L278
	.half	2
	.byte	138,0
	.word	.L26-.L278,.L754-.L278
	.half	2
	.byte	138,16
	.word	.L754-.L278,.L754-.L278
	.half	2
	.byte	138,0
	.word	0,0
.L755:
	.word	-1,.L278,0,.L754-.L278
	.half	2
	.byte	145,116
	.word	0,.L788-.L278
	.half	1
	.byte	100
	.word	0,0
.L758:
	.word	-1,.L278,.L795-.L278,.L796-.L278
	.half	1
	.byte	100
	.word	.L26-.L278,.L799-.L278
	.half	1
	.byte	100
	.word	0,0
.L757:
	.word	-1,.L278,0,.L789-.L278
	.half	1
	.byte	102
	.word	.L791-.L278,.L754-.L278
	.half	1
	.byte	108
	.word	.L796-.L278,.L29-.L278
	.half	1
	.byte	100
	.word	.L797-.L278,.L798-.L278
	.half	1
	.byte	101
	.word	.L799-.L278,.L800-.L278
	.half	1
	.byte	100
	.word	0,0
.L759:
	.word	-1,.L278,.L792-.L278,.L793-.L278
	.half	1
	.byte	98
	.word	.L794-.L278,.L754-.L278
	.half	1
	.byte	111
	.word	.L797-.L278,.L798-.L278
	.half	1
	.byte	100
	.word	.L26-.L278,.L800-.L278
	.half	1
	.byte	98
	.word	0,0
.L756:
	.word	-1,.L278,0,.L790-.L278
	.half	1
	.byte	101
	.word	.L788-.L278,.L792-.L278
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_skipWhitespace')
	.sect	'.debug_loc'
.L293:
	.word	-1,.L294,0,.L549-.L294
	.half	2
	.byte	138,0
	.word	0,0
.L550:
	.word	-1,.L294,0,.L549-.L294
	.half	1
	.byte	100
	.word	.L866-.L294,.L549-.L294
	.half	1
	.byte	98
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Ifx_Shell_writeResult')
	.sect	'.debug_loc'
.L747:
	.word	-1,.L274,0,.L762-.L274
	.half	1
	.byte	84
	.word	0,.L745-.L274
	.half	2
	.byte	145,120
	.word	0,0
.L273:
	.word	-1,.L274,0,.L761-.L274
	.half	2
	.byte	138,0
	.word	.L761-.L274,.L745-.L274
	.half	2
	.byte	138,8
	.word	.L745-.L274,.L745-.L274
	.half	2
	.byte	138,0
	.word	0,0
.L752:
	.word	0,0
.L751:
	.word	0,0
.L748:
	.word	-1,.L274,0,.L745-.L274
	.half	2
	.byte	145,122
	.word	0,0
.L746:
	.word	-1,.L274,0,.L763-.L274
	.half	1
	.byte	100
	.word	0,0
.L750:
	.word	0,0
.L753:
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1591:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_isEndOfLine')
	.sect	'.debug_frame'
	.word	24
	.word	.L1591,.L272,.L743-.L272
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_writeResult')
	.sect	'.debug_frame'
	.word	36
	.word	.L1591,.L274,.L745-.L274
	.byte	4
	.word	(.L761-.L274)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L745-.L761)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_showHelpSingle')
	.sect	'.debug_frame'
	.word	36
	.word	.L1591,.L276,.L632-.L276
	.byte	4
	.word	(.L764-.L276)/2
	.byte	19,32,22,26,3,19,138,32,4
	.word	(.L632-.L764)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_showHelpSingleCommand')
	.sect	'.debug_frame'
	.word	52
	.word	.L1591,.L278,.L754-.L278
	.byte	4
	.word	(.L787-.L278)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L26-.L787)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L754-.L26)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_showHelp')
	.sect	'.debug_frame'
	.word	12
	.word	.L1591,.L280,.L661-.L280
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_protocolStart')
	.sect	'.debug_frame'
	.word	36
	.word	.L1591,.L282,.L673-.L282
	.byte	4
	.word	(.L806-.L282)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L673-.L806)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_bbProtocolStart')
	.sect	'.debug_frame'
	.word	36
	.word	.L1591,.L284,.L679-.L284
	.byte	4
	.word	(.L820-.L284)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L679-.L820)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_initConfig')
	.sect	'.debug_frame'
	.word	24
	.word	.L1591,.L286,.L494-.L286
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_init')
	.sect	'.debug_frame'
	.word	12
	.word	.L1591,.L288,.L498-.L288
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_process')
	.sect	'.debug_frame'
	.word	52
	.word	.L1591,.L290,.L519-.L290
	.byte	4
	.word	(.L838-.L290)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L54-.L838)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L519-.L54)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_deinit')
	.sect	'.debug_frame'
	.word	24
	.word	.L1591,.L292,.L507-.L292
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_skipWhitespace')
	.sect	'.debug_frame'
	.word	20
	.word	.L1591,.L294,.L549-.L294
	.byte	8,19,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_matchToken')
	.sect	'.debug_frame'
	.word	36
	.word	.L1591,.L296,.L551-.L296
	.byte	4
	.word	(.L867-.L296)/2
	.byte	19,128,2,22,26,4,19,138,128,2,4
	.word	(.L551-.L867)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_matchCommand')
	.sect	'.debug_frame'
	.word	36
	.word	.L1591,.L298,.L735-.L298
	.byte	4
	.word	(.L875-.L298)/2
	.byte	19,128,4,22,26,4,19,138,128,4,4
	.word	(.L735-.L875)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_parseToken')
	.sect	'.debug_frame'
	.word	12
	.word	.L1591,.L300,.L559-.L300
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_parseAddress')
	.sect	'.debug_frame'
	.word	36
	.word	.L1591,.L302,.L565-.L302
	.byte	4
	.word	(.L892-.L302)/2
	.byte	19,40,22,26,3,19,138,40,4
	.word	(.L565-.L892)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_parseSInt32')
	.sect	'.debug_frame'
	.word	52
	.word	.L1591,.L304,.L572-.L304
	.byte	4
	.word	(.L897-.L304)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L136-.L897)/2
	.byte	19,0,8,26,19,8,22,26,3,19,138,8,4
	.word	(.L572-.L136)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_parseUInt32')
	.sect	'.debug_frame'
	.word	52
	.word	.L1591,.L306,.L579-.L306
	.byte	4
	.word	(.L901-.L306)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L139-.L901)/2
	.byte	19,0,8,26,19,8,22,26,3,19,138,8,4
	.word	(.L579-.L139)/2
	.byte	19,0,8,26,0
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_parseSInt64')
	.sect	'.debug_frame'
	.word	36
	.word	.L1591,.L308,.L587-.L308
	.byte	4
	.word	(.L905-.L308)/2
	.byte	19,200,0,22,26,4,19,138,200,0,4
	.word	(.L587-.L905)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_parseUInt64')
	.sect	'.debug_frame'
	.word	36
	.word	.L1591,.L310,.L594-.L310
	.byte	4
	.word	(.L910-.L310)/2
	.byte	19,200,0,22,26,4,19,138,200,0,4
	.word	(.L594-.L910)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_parseFloat64')
	.sect	'.debug_frame'
	.word	36
	.word	.L1591,.L312,.L602-.L312
	.byte	4
	.word	(.L919-.L312)/2
	.byte	19,200,0,22,26,4,19,138,200,0,4
	.word	(.L602-.L919)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_parseFloat32')
	.sect	'.debug_frame'
	.word	36
	.word	.L1591,.L314,.L608-.L314
	.byte	4
	.word	(.L924-.L314)/2
	.byte	19,200,0,22,26,4,19,138,200,0,4
	.word	(.L608-.L924)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_commandFind')
	.sect	'.debug_frame'
	.word	36
	.word	.L1591,.L316,.L615-.L316
	.byte	4
	.word	(.L929-.L316)/2
	.byte	19,144,2,22,26,4,19,138,144,2,4
	.word	(.L615-.L929)/2
	.byte	19,0,8,26
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_commandListFind')
	.sect	'.debug_frame'
	.word	36
	.word	.L1591,.L318,.L726-.L318
	.byte	4
	.word	(.L943-.L318)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L726-.L943)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_execute')
	.sect	'.debug_frame'
	.word	88
	.word	.L1591,.L320,.L684-.L320
	.byte	4
	.word	(.L952-.L320)/2
	.byte	19,16,22,26,3,19,138,16,4
	.word	(.L187-.L952)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L197-.L187)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L199-.L197)/2
	.byte	19,0,8,26,19,16,22,26,3,19,138,16,4
	.word	(.L684-.L199)/2
	.byte	19,0,8,26,0,0,0
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_cmdEscapeProcess')
	.sect	'.debug_frame'
	.word	88
	.word	.L1591,.L322,.L690-.L322
	.byte	4
	.word	(.L960-.L322)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L241-.L960)/2
	.byte	19,0,8,26,19,8,22,26,3,19,138,8,4
	.word	(.L242-.L241)/2
	.byte	19,0,8,26,19,8,22,26,3,19,138,8,4
	.word	(.L267-.L242)/2
	.byte	19,0,8,26,19,8,22,26,3,19,138,8,4
	.word	(.L690-.L267)/2
	.byte	19,0,8,26,0,0,0
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_enable')
	.sect	'.debug_frame'
	.word	12
	.word	.L1591,.L328,.L509-.L328
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_disable')
	.sect	'.debug_frame'
	.word	24
	.word	.L1591,.L330,.L517-.L330
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('Ifx_Shell_printSyntax')
	.sect	'.debug_frame'
	.word	36
	.word	.L1591,.L332,.L668-.L332
	.byte	4
	.word	(.L1005-.L332)/2
	.byte	19,8,22,26,3,19,138,8,4
	.word	(.L668-.L1005)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1592:
	.word	52
	.word	-1
	.byte	3,0,2,1,40,12,26,0,9,40,27,155,0,7,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36
	.byte	8,37,8,38,8,39,0
	.sdecl	'.debug_frame',debug,cluster('.cocofun_35')
	.sect	'.debug_frame'
	.word	24
	.word	.L1592,.L324,.L491-.L324
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('.cocofun_34')
	.sect	'.debug_frame'
	.word	24
	.word	.L1592,.L326,.L486-.L326
	.byte	8,18,8,19,8,20,8,21,8,22,8,23


	; Module end
