	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v6.3r1 Build 19041558 SN 09003382"
	.compiler_invocation	"ctc --dep-file=0_Src\\4_McHal\\Tricore\\Rif\\Std\\.IfxRif.o.d --fp-model=c,l,f,z,n,r,S,T -D__CPU__=tc39x -D__CPU_TC39X__ --core=tc1.6.2 --iso=99 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\UART -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\include\\libc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\libcpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\rt-thread\\src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Asc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Icu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmBc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TimerWithTrigger -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6\\TPwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSpansion -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\BFlashSt -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Dram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Sram -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ebu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Adc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Crc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\IncrEnc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Atom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\In -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tim\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Dtm_PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Pwm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\PwmHl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Tom\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm\\Trig -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hspdm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Driver -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiMaster -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\SpiSlave -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Rif -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Rif\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Emmc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Sd -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sdmmc\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Spu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Lin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Spi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Eth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Config\\Common -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\_Utilities -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If\\Ccu6If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Bsp -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Comm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\General -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Math -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe\\Time -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\2_CDrv -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Build -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\DataHandling -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib\\InternalMux -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Asclin -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Can -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Can\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Ccu6 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Convctrl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\CStart -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Irq -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Trap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dma -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Dts -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Edsadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Emem -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Eray -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Evadc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Fce -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Flash -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Geth -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gpt12 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Gtm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Hssl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\I2c -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Iom -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Msc -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Mtu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Pms -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Io -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Port\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5 -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Psi5s -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Qspi -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Sent -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Smu -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Std -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Stm\\Timer -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\0_AppSw\\Tricore\\Main -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\If -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\StdIf -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\SysSe -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\1_SrvSw\\Tricore\\Compilers -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Lib -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_PinMap -ID:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg -g2 --make-target=0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.o -t4 --language=-gcc,-volatile,+strings,-kanji --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto --error-limit=42 -o 0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.src ..\\0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.c"
	.compiler_name		"ctc"
	;source	'..\\0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.c'

	
$TC162
	.sdecl	'.zrodata.IfxRif..1.cnt',data,rom
	.sect	'.zrodata.IfxRif..1.cnt'
	.align	2
.1.cnt:	.type	object
	.size	.1.cnt,4
	.word	-268203664
	
	.sdecl	'.text.IfxRif.IfxRif_disableModule',code,cluster('IfxRif_disableModule')
	.sect	'.text.IfxRif.IfxRif_disableModule'
	.align	2
	
	.global	IfxRif_disableModule

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	     1  /**
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	     2   * \file IfxRif.c
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	     3   * \brief RIF  basic functionality
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	     4   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	     5   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	     6   * \copyright Copyright (c) 2018 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	     7   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	     8   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	     9   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    10   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    11   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    12   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    13   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    14   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    15   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    16   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    17   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    18   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    19   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    20   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    21   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    22   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    23   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    24   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    25   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    26   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    27   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    28   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    29   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    30   * language processor.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    31   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    32   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    33   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    34   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    35   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    36   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    37   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    38   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    39   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    40   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    41  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    42  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    43  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    44  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    45  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    46  #include "IfxRif.h"
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    47  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    48  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    49  /*-------------------------Function Implementations---------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    50  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    51  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    52  void IfxRif_disableModule(Ifx_RIF *rif)
; Function IfxRif_disableModule
.L20:
IfxRif_disableModule:	.type	func
	mov.aa	a15,a4
.L135:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    53  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    54      uint16 password = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L134:
	mov	d8,d2
.L137:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    55      IfxScuWdt_clearCpuEndinit(password);
	mov	d4,d8
	call	IfxScuWdt_clearCpuEndinit
.L136:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    56      rif->CLC.B.DISR = 1U;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    57      IfxScuWdt_setCpuEndinit(password);
	mov	d4,d8
	ld.bu	d15,[a15]
.L138:
	or	d15,#1
	st.b	[a15],d15
.L186:
	j	IfxScuWdt_setCpuEndinit
.L107:
	
__IfxRif_disableModule_function_end:
	.size	IfxRif_disableModule,__IfxRif_disableModule_function_end-IfxRif_disableModule
.L60:
	; End of function
	
	.sdecl	'.text.IfxRif.IfxRif_enableFifos',code,cluster('IfxRif_enableFifos')
	.sect	'.text.IfxRif.IfxRif_enableFifos'
	.align	2
	
	.global	IfxRif_enableFifos

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    58  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    59  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    60  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    61  void IfxRif_enableFifos(Ifx_RIF *rif, uint8 count)
; Function IfxRif_enableFifos
.L22:
IfxRif_enableFifos:	.type	func
	mov.aa	a15,a4
.L140:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    62  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    63      IfxRif_disableAllFifos(rif);
	mov	d15,d4
	call	IfxRif_disableAllFifos
.L139:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    64  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    65      switch (count)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    66      {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    67      case 0:     /*All FIFOs disabled*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    68          break;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    69      case 1:
	jeq	d15,#1,.L2
.L161:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    70          IfxRif_enableFifo(rif, IfxRif_FifoId_0);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    71          break;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    72      case 2:
	jeq	d15,#2,.L3
.L162:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    73          IfxRif_enableFifo(rif, IfxRif_FifoId_0);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    74          IfxRif_enableFifo(rif, IfxRif_FifoId_1);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    75          break;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    76      case 3:
	jeq	d15,#3,.L4
.L163:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    77      case 4:
	jeq	d15,#4,.L5
.L164:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    78          IfxRif_enableFifo(rif, IfxRif_FifoId_0);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    79          IfxRif_enableFifo(rif, IfxRif_FifoId_1);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    80          IfxRif_enableFifo(rif, IfxRif_FifoId_2);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    81          IfxRif_enableFifo(rif, IfxRif_FifoId_3);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    82          break;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    83      default:
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    84          IFX_ASSERT(IFX_VERBOSE_LEVEL_ERROR, FALSE); /* wrong selection  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    85          break;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    86      }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    87  }
	ret
.L2:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     2   * \file IfxRif.h
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     3   * \brief RIF  basic functionality
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     4   * \ingroup IfxLld_Rif
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     5   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     8   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     9   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    11   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    16   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    18   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    25   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    32   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    40   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    41   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    42   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    43   * \defgroup IfxLld_Rif_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    44   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    45   * \defgroup IfxLld_Rif_Std_Deserializer Deserializer Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    46   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    47   * \defgroup IfxLld_Rif_Std_FLM Fifo and Line Management Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    48   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    49   * \defgroup IfxLld_Rif_Std_DFU Data Formating Unit Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    50   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    51   * \defgroup IfxLld_Rif_Std_RSM Radar State Machine Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    52   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    53   * \defgroup IfxLld_Rif_Std_Interrupt Interrupt Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    54   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    55   * \defgroup IfxLld_Rif_Std_Monitor Monitoring Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    56   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    57   * \defgroup IfxLld_Rif_Std_Module Module Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    58   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    59   * \defgroup IfxLld_Rif_Std_LVDS LDVS Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    60   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    61   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    62  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    63  #ifndef IFXRIF_H
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    64  #define IFXRIF_H 1
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    65  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    66  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    67  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    68  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    69  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    70  #include "_Impl/IfxRif_cfg.h"
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    71  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    72  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    73  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    74  #include "IfxRif_reg.h"
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    75  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    76  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    77  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    78  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    79  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    80  /** \addtogroup IfxLld_Rif_Std_Enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    81   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    82  /** \brief Defines the Type of ADCs used for radar cycle internal /external
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    83   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    84  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    85  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    86      IfxRif_Adc_external,  /**< \brief External ADCs (deserializer enabled) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    87      IfxRif_Adc_internal   /**< \brief Internal ADCs (deserializer disabled) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    88  } IfxRif_Adc;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    89  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    90  /** \brief Defines the current state of the deserializer\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    91   * Definition in Ifx_RIF.ESI.B.CALBSY
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    92   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    93  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    94  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    95      IfxRif_CalibrationState_done,  /**< \brief Calibration is finished (no calibration ongoing) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    96      IfxRif_CalibrationState_busy   /**< \brief Calibration is ongoing */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    97  } IfxRif_CalibrationState;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    98  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    99  /** \brief Defines the status of the latest timing calibration sequence.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   100   * Definition in Ifx_RIF.ESI.B.CALSTAT
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   101   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   102  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   103  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   104      IfxRif_CalibrationStatus_fail,    /**< \brief Calibration is failed (signal paths uncalibrated) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   105      IfxRif_CalibrationStatus_success  /**< \brief Calibration is successful */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   106  } IfxRif_CalibrationStatus;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   107  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   108  /** \brief Defines the polarity of the clock signal on the clock input pins.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   109   * Definition in Ifx_RIF.ESI.B.CP
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   110   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   111  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   112  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   113      IfxRif_ClockPolarity_default,  /**< \brief Default polarity of the clock signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   114      IfxRif_ClockPolarity_inverted  /**< \brief Inverted polarity of the clock signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   115  } IfxRif_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   116  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   117  /** \brief Defines the Common control selection for all LVDS Pads .\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   118   * Definition in Ifx_RIF.LVDSCON1.B.MISC
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   119   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   120  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   121  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   122      IfxRif_CommonLvdsPadControl_5vMode,       /**< \brief enable 5V Mode for all LVDS pads */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   123      IfxRif_CommonLvdsPadControl_lowSpeedMode  /**< \brief enable low speed mode for all LVDS pads */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   124  } IfxRif_CommonLvdsPadControl;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   125  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   126  /** \brief Defines the alignment of the data delivered to the SPU.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   127   * Definition in Ifx_RIF.DFU.B.DA
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   128   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   129  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   130  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   131      IfxRif_DataAlignment_right,  /**< \brief Data alignment right (integer) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   132      IfxRif_DataAlignment_left    /**< \brief Data alignment left (fractional) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   133  } IfxRif_DataAlignment;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   134  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   135  /** \brief Defines the format of the data delivered to the SPU.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   136   * Definition in Ifx_RIF.DFU.B.DF
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   137   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   138  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   139  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   140      IfxRif_DataFormat_unsigned,  /**< \brief Data format unsigned */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   141      IfxRif_DataFormat_signed     /**< \brief Data format signed */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   142  } IfxRif_DataFormat;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   143  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   144  /** \brief Defines the data length of the frame signal.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   145   * Definition in Ifx_RIF.IPI.B.DL
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   146   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   147  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   148  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   149      IfxRif_DataLength_10bit,     /**< \brief Data length 10bit  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   150      IfxRif_DataLength_12bit,     /**< \brief Data length 12bit  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   151      IfxRif_DataLength_14bit,     /**< \brief Data length 14bit  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   152      IfxRif_DataLength_16bit      /**< \brief Data length 16bit  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   153  } IfxRif_DataLength;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   154  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   155  /** \brief Defines the polarity of the data signals on the data input pins.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   156   * Definition in Ifx_RIF.ESI.B.DP
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   157   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   158  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   159  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   160      IfxRif_DataPolarity_default,  /**< \brief Default polarity of the data signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   161      IfxRif_DataPolarity_inverted  /**< \brief Inverted polarity of the data signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   162  } IfxRif_DataPolarity;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   163  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   164  /** \brief Defines the deserializer number (0 to 3).\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   165   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   166  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   167  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   168      IfxRif_DeserializerId_0,     /**< \brief Deserializer 0  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   169      IfxRif_DeserializerId_1,     /**< \brief Deserializer 1  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   170      IfxRif_DeserializerId_2,     /**< \brief Deserializer 2  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   171      IfxRif_DeserializerId_3      /**< \brief Deserializer 3  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   172  } IfxRif_DeserializerId;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   173  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   174  /** \brief Defines the FIFO number (0 to 3).\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   175   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   176  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   177  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   178      IfxRif_FifoId_0,     /**< \brief Fifo 0  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   179      IfxRif_FifoId_1,     /**< \brief Fifo 1  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   180      IfxRif_FifoId_2,     /**< \brief Fifo 2  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   181      IfxRif_FifoId_3      /**< \brief Fifo 3  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   182  } IfxRif_FifoId;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   183  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   184  /** \brief Defines the FLM mode of operation.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   185   * Definition in Ifx_RIF.FLM.B.MODE
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   186   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   187  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   188  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   189      IfxRif_FlmMode_direct,  /**< \brief No swap of the data paths */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   190      IfxRif_FlmMode_swap     /**< \brief Swap of data paths of channels 0-1 and 2-3 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   191  } IfxRif_FlmMode;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   192  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   193  /** \brief Defines the polarity of the frame signal on the frame input pins.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   194   * Definition in Ifx_RIF.ESI.B.FP
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   195   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   196  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   197  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   198      IfxRif_FramePolarity_default,  /**< \brief Default polarity of the frame signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   199      IfxRif_FramePolarity_inverted  /**< \brief Inverted polarity of the frame signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   200  } IfxRif_FramePolarity;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   201  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   202  /** \brief Defines the Full swap mode operation of FLM.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   203   * Definition in Ifx_RIF.FLM.B.FSWP
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   204   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   205  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   206  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   207      IfxRif_FullSwapMode_direct,  /**< \brief No swap of the data paths */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   208      IfxRif_FullSwapMode_swap     /**< \brief Swap of data paths of channels 0-3 and 1-2 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   209  } IfxRif_FullSwapMode;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   210  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   211  /** \brief Defines the available interrupts in RIF module.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   212   * Definition in Ifx_RIF.INTCON and Ifx_RIF.CRC
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   213   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   214  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   215  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   216      IfxRif_Interrupt_calibrationEnd,         /**< \brief Calibration End interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   217      IfxRif_Interrupt_frameWatchdogOverflow,  /**< \brief Frame Watchdog Overflow interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   218      IfxRif_Interrupt_rampEnd,                /**< \brief Ramp End interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   219      IfxRif_Interrupt_chirpEnd,               /**< \brief Chirp End interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   220      IfxRif_Interrupt_crcErrorOnLine0,        /**< \brief CRC error interrupt on Line 0 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   221      IfxRif_Interrupt_crcErrorOnLine1,        /**< \brief CRC error interrupt on Line 1 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   222      IfxRif_Interrupt_crcErrorOnLine2,        /**< \brief CRC error interrupt on Line 2 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   223      IfxRif_Interrupt_crcErrorOnLine3,        /**< \brief CRC error interrupt on Line 3 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   224      IfxRif_Interrupt_ramp1Error,             /**< \brief Ramp1 Error interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   225      IfxRif_Interrupt_chirp1Error,            /**< \brief Chirp1 Error interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   226      IfxRif_Interrupt_ramp1Start              /**< \brief Ramp1 Start interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   227  } IfxRif_Interrupt;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   228  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   229  /** \brief Defines the mode of Lvds Bias DistributorMode.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   230   * Definition in Ifx_RIF.LVDSCON1.B.PWRDN
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   231   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   232  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   233  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   234      IfxRif_LvdsBiasDistributorMode_active,      /**< \brief Active */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   235      IfxRif_LvdsBiasDistributorMode_poweredDown  /**< \brief Powered Down */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   236  } IfxRif_LvdsBiasDistributorMode;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   237  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   238  /** \brief Defines the LVDS PAD control selection.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   239   * Definition in Ifx_RIF.LVDSCON0.B.FRAME / CLK / DATA0 / DATA1 / LVDSCON1.B.DATA2 / DATA3
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   240   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   241  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   242  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   243      IfxRif_LvdsPadControl_none       = 0x00,  /**< \brief NO selection */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   244      IfxRif_LvdsPadControl_test       = 0x01,  /**< \brief Test Enable (enable Weak Driver Mode) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   245      IfxRif_LvdsPadControl_rterm      = 0x02,  /**< \brief Rterm Enable */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   246      IfxRif_LvdsPadControl_frameClock = 0x04,  /**< \brief Frame Clock LVDS Pad Enable */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   247      IfxRif_LvdsPadControl_xor        = 0x08,  /**< \brief LVDS XOR-IN tied to LO by RIF-IP */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   248      IfxRif_LvdsPadControl_spareBit   = 0x10,  /**< \brief spare bit - tied to LO by RIF-IP */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   249      IfxRif_LvdsPadControl_TGatePTest = 0x20,  /**< \brief LVDS pad enable T-Gate P Test */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   250      IfxRif_LvdsPadControl_TGateNTest = 0x40   /**< \brief LVDS pad enable T-Gate N-Test */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   251  } IfxRif_LvdsPadControl;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   252  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   253  /** \brief Defines the number of samples, used in different phases of radar operation cycle
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   254   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   255  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   256  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   257      IfxRif_NumberOfSamples_1,     /**< \brief Number of samples 1  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   258      IfxRif_NumberOfSamples_2,     /**< \brief Number of samples 2  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   259      IfxRif_NumberOfSamples_3,     /**< \brief Number of samples 3  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   260      IfxRif_NumberOfSamples_4,     /**< \brief Number of samples 4  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   261      IfxRif_NumberOfSamples_5,     /**< \brief Number of samples 5  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   262      IfxRif_NumberOfSamples_6,     /**< \brief Number of samples 6  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   263      IfxRif_NumberOfSamples_7,     /**< \brief Number of samples 7  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   264      IfxRif_NumberOfSamples_8,     /**< \brief Number of samples 8  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   265      IfxRif_NumberOfSamples_9,     /**< \brief Number of samples 9  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   266      IfxRif_NumberOfSamples_10,    /**< \brief Number of samples 10  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   267      IfxRif_NumberOfSamples_11,    /**< \brief Number of samples 11  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   268      IfxRif_NumberOfSamples_12,    /**< \brief Number of samples 12  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   269      IfxRif_NumberOfSamples_13,    /**< \brief Number of samples 13  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   270      IfxRif_NumberOfSamples_14,    /**< \brief Number of samples 14  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   271      IfxRif_NumberOfSamples_15,    /**< \brief Number of samples 15  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   272      IfxRif_NumberOfSamples_16     /**< \brief Number of samples 16  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   273  } IfxRif_NumberOfSamples;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   274  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   275  /** \brief Defines the source for the RAMP1 signal multiplexer.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   276   * Definition in Ifx_RIF.RSM1.B.R1SEL
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   277   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   278  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   279  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   280      IfxRif_Ramp1SignalInput_0,     /**< \brief input 0  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   281      IfxRif_Ramp1SignalInput_1,     /**< \brief input 1  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   282      IfxRif_Ramp1SignalInput_2,     /**< \brief input 2  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   283      IfxRif_Ramp1SignalInput_3      /**< \brief input 3  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   284  } IfxRif_Ramp1SignalInput;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   285  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   286  /** \brief Defines the polarity of the RAMP1 signal .\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   287   * Definition in Ifx_RIF.RSM1.B.R1POL
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   288   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   289  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   290  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   291      IfxRif_Ramp1SignalPolarity_lowActive,  /**< \brief Low Active */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   292      IfxRif_Ramp1SignalPolarity_highActive  /**< \brief High Active */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   293  } IfxRif_Ramp1SignalPolarity;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   294  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   295  /** \brief Defines the shift direction of the serial data, corresponding to the data bit on
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   296   * the lsb position in the delivered parallel data.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   297   * Definition in Ifx_RIF.DFU.B.MSB
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   298   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   299  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   300  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   301      IfxRif_ShiftDirection_msbFirst,  /**< \brief Shift direction MSB first */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   302      IfxRif_ShiftDirection_lsbFirst   /**< \brief Shift direction LSB first */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   303  } IfxRif_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   304  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   305  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   306   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   307  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   308  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   309      IfxRif_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   310      IfxRif_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   311      IfxRif_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   312  } IfxRif_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   313  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   314  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   315  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   316  /** \addtogroup IfxLld_Rif_Std_Deserializer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   317   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   318  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   319  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   320  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   321  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   322  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   323  /** \brief Disables the selected deserializer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   324   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   325   * \param deserializerId Deserializer number
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   326   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   327   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   328  IFX_INLINE void IfxRif_disableDeserializer(Ifx_RIF *rif, IfxRif_DeserializerId deserializerId);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   329  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   330  /** \brief Enables the calibration mode of the deserializer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   331   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   332   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   333   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   334  IFX_INLINE void IfxRif_enableCalibration(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   335  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   336  /** \brief Enables the selected deserializer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   337   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   338   * \param deserializerId Deserializer number
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   339   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   340   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   341  IFX_INLINE void IfxRif_enableDeserializer(Ifx_RIF *rif, IfxRif_DeserializerId deserializerId);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   342  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   343  /** \brief Returns the current state of the deserializer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   344   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   345   * \return Calibration state (done / on going)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   346   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   347  IFX_INLINE IfxRif_CalibrationState IfxRif_getCalibrationState(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   348  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   349  /** \brief Returns the status of the latest timing calibration sequence
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   350   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   351   * \return Calibration status (fail / success)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   352   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   353  IFX_INLINE IfxRif_CalibrationStatus IfxRif_getCalibrationStatus(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   354  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   355  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   356  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   357  /** \addtogroup IfxLld_Rif_Std_FLM
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   358   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   359  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   360  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   361  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   362  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   363  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   364  /** \brief Enables the selected FIFO
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   365   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   366   * \param fifoId FIFO number
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   367   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   368   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   369  IFX_INLINE void IfxRif_enableFifo(Ifx_RIF *rif, IfxRif_FifoId fifoId);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   370  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   371  /** \brief Sets the FLM mode of operation
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   372   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   373   * \param mode FLM mode of operation
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   374   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   375   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   376  IFX_INLINE void IfxRif_setFlmMode(Ifx_RIF *rif, IfxRif_FlmMode mode);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   377  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   378  /** \brief Sets the Full Swap Mode of FLM unit
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   379   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   380   * \param swapMode Full Swap Mod eof FLM unit
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   381   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   382   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   383  IFX_INLINE void IfxRif_setFullSwapMode(Ifx_RIF *rif, IfxRif_FullSwapMode swapMode);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   384  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   385  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   386  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   387  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   388  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   389  /** \brief Enables the number of FIFOs based on number of ADC channels used
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   390   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   391   * \param count Number of ADC channels used
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   392   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   393   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   394  IFX_EXTERN void IfxRif_enableFifos(Ifx_RIF *rif, uint8 count);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   395  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   396  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   397  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   398  /** \addtogroup IfxLld_Rif_Std_DFU
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   399   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   400  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   401  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   402  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   403  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   404  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   405  /** \brief Returns the data length of the frame signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   406   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   407   * \return Data length of the frame signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   408   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   409  IFX_INLINE IfxRif_DataLength IfxRif_getDataLength(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   410  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   411  /** \brief Sets the polarity of the clock signal on the clock input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   412   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   413   * \param polarity Polarity of the clock signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   414   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   415   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   416  IFX_INLINE void IfxRif_setClockPolarity(Ifx_RIF *rif, IfxRif_ClockPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   417  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   418  /** \brief Sets the alignment of the data delivered to the SPU
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   419   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   420   * \param alignment Alignment of the data delivered to the SPU
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   421   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   422   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   423  IFX_INLINE void IfxRif_setDataAlignment(Ifx_RIF *rif, IfxRif_DataAlignment alignment);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   424  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   425  /** \brief Sets the format of the data delivered to the SPU
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   426   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   427   * \param format format of the data delivered to the SPU
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   428   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   429   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   430  IFX_INLINE void IfxRif_setDataFormat(Ifx_RIF *rif, IfxRif_DataFormat format);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   431  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   432  /** \brief Sets the data length of the frame signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   433   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   434   * \param length Data length of the frame signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   435   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   436   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   437  IFX_INLINE void IfxRif_setDataLength(Ifx_RIF *rif, IfxRif_DataLength length);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   438  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   439  /** \brief Sets the polarity of the data signal 0 on the data input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   440   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   441   * \param polarity Polarity of the data signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   442   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   443   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   444  IFX_INLINE void IfxRif_setDataPolarity0(Ifx_RIF *rif, IfxRif_DataPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   445  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   446  /** \brief Sets the polarity of the data signal 1 on the data input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   447   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   448   * \param polarity Polarity of the data signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   449   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   450   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   451  IFX_INLINE void IfxRif_setDataPolarity1(Ifx_RIF *rif, IfxRif_DataPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   452  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   453  /** \brief Sets the polarity of the data signal 2 on the data input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   454   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   455   * \param polarity Polarity of the data signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   456   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   457   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   458  IFX_INLINE void IfxRif_setDataPolarity2(Ifx_RIF *rif, IfxRif_DataPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   459  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   460  /** \brief Sets the polarity of the data signal 3 on the data input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   461   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   462   * \param polarity Polarity of the data signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   463   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   464   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   465  IFX_INLINE void IfxRif_setDataPolarity3(Ifx_RIF *rif, IfxRif_DataPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   466  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   467  /** \brief Sets the polarity of the frame signal on the frame input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   468   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   469   * \param polarity Polarity of the frame signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   471   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   472  IFX_INLINE void IfxRif_setFramePolarity(Ifx_RIF *rif, IfxRif_FramePolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   473  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   474  /** \brief Sets the polarity of the RAMP1 signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   475   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   476   * \param polarity Polarity of the RAMP1 signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   477   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   478   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   479  IFX_INLINE void IfxRif_setRamp1SignalPolarity(Ifx_RIF *rif, IfxRif_Ramp1SignalPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   480  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   481  /** \brief Sets the the shift direction of the serial data, corresponding to the data bit on
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   482   * the lsb position in the delivered parallel data
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   483   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   484   * \param direction Shift direction
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   485   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   486   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   487  IFX_INLINE void IfxRif_setShiftDirection(Ifx_RIF *rif, IfxRif_ShiftDirection direction);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   488  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   489  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   490  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   491  /** \addtogroup IfxLld_Rif_Std_RSM
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   492   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   493  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   494  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   495  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   496  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   497  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   498  /** \brief Enables the external ADCs, the radar interface to accepts input from the external ADCs.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   499   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   500   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   501   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   502  IFX_INLINE void IfxRif_enableExternalAdc(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   503  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   504  /** \brief Enables the internal ADCs, the radar interface to accepts input from the internal ADCs.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   505   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   506   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   507   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   508  IFX_INLINE void IfxRif_enableInternalAdc(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   509  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   510  /** \brief Enables lockstep, synchronous delivery of ADC samples from two RIFs to two SPUs\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   511   * (in case two RIF instances are available and used)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   512   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   513   * \param enabled Choise (enable / disable)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   514   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   515   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   516  IFX_INLINE void IfxRif_enableLockstep(Ifx_RIF *rif, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   517  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   518  /** \brief Enables the RAMP1 signal and disables the Frame Watchdog Timer\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   519   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   520   * \param enabled Choise (enable / disable)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   521   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   522   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   523  IFX_INLINE void IfxRif_enableRamp1Signal(Ifx_RIF *rif, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   524  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   525  /** \brief Returns the current ramp number of the chirp
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   526   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   527   * \return Current ramp number of the chirp
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   528   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   529  IFX_INLINE uint16 IfxRif_getCurrentRampNumber(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   530  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   531  /** \brief Returns the current valid data sample number of the chirp
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   532   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   533   * \return Current valid data sample number of the chirp
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   534   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   535  IFX_INLINE uint16 IfxRif_getCurrentValidDataSampleNumber(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   536  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   537  /** \brief Sets the number of ramps per chirp in the range of 1 to 2048 ramps
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   538   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   539   * \param rampsNum Number of ramps
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   540   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   541   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   542  IFX_INLINE void IfxRif_setChirpLength(Ifx_RIF *rif, uint16 rampsNum);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   543  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   544  /** \brief Sets the source for the RAMP1 signal multiplexer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   545   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   546   * \param signal Source for the RAMP1 signal multiplexer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   547   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   548   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   549  IFX_INLINE void IfxRif_setRamp1SignalInput(Ifx_RIF *rif, IfxRif_Ramp1SignalInput signal);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   550  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   551  /** \brief Sets the number of valid data samples per chirp in the range of 1 to 2048 samples
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   552   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   553   * \param samplesNum Number of valid data samples
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   554   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   555   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   556  IFX_INLINE void IfxRif_setValidDataSamplesNumber(Ifx_RIF *rif, uint16 samplesNum);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   557  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   558  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   559  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   560  /** \addtogroup IfxLld_Rif_Std_Interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   561   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   562  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   563  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   564  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   565  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   566  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   567  /** \brief Clears the selected interrupt flag status
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   568   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   569   * \param interrupt Type of interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   570   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   571   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   572  IFX_INLINE void IfxRif_clearInterruptFlag(Ifx_RIF *rif, IfxRif_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   573  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   574  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   575   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   576   * \param interrupt Type of interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   577   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   578   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   579  IFX_INLINE void IfxRif_disableInterrupt(Ifx_RIF *rif, IfxRif_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   580  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   581  /** \brief Enables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   582   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   583   * \param interrupt Type of interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   584   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   585   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   586  IFX_INLINE void IfxRif_enableInterrupt(Ifx_RIF *rif, IfxRif_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   587  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   588  /** \brief Returns the selected interrupt flag status
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   589   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   590   * \param interrupt Type of interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   591   * \return Status
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   592   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   593  IFX_INLINE uint8 IfxRif_getInterruptFlagStatus(Ifx_RIF *rif, IfxRif_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   594  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   595  /** \brief Sets the selected interrupt flag status
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   596   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   597   * \param interrupt Type of interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   598   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   599   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   600  IFX_INLINE void IfxRif_setInterruptFlag(Ifx_RIF *rif, IfxRif_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   601  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   602  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   603  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   604  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   605  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   606  /** \brief Returns the SRC pointer of RIF module ERR interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   607   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   608   * \return SRC pointer of RIF module ERR interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   609   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   610  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxRif_getSrcPointerErr(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   611  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   612  /** \brief Returns the SRC pointer of RIF module INT interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   613   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   614   * \return SRC pointer of RIF module INT interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   615   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   616  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxRif_getSrcPointerInt(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   617  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   618  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   619  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   620  /** \addtogroup IfxLld_Rif_Std_Monitor
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   621   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   622  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   623  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   624  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   625  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   626  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   627  /** \brief Disables the CRC.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   628   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   630   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   631  IFX_INLINE void IfxRif_disableCrc(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   632  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   633  /** \brief Enables the CRC.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   634   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   635   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   636   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   637  IFX_INLINE void IfxRif_enableCrc(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   638  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   639  /** \brief Sets the frame watchdog threshold, (the reload value for the watchdog timer) in the range of 0-255.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   640   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   641   * \param value Threshold value
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   642   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   643   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   644  IFX_INLINE void IfxRif_setFrameWatchdogThreshold(Ifx_RIF *rif, uint16 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   645  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   646  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   647  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   648  /** \addtogroup IfxLld_Rif_Std_Module
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   649   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   650  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   651  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   652  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   653  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   654  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   655  /** \brief Returns the status of module, enabled or disabled
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   656   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   657   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   658   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   659  IFX_INLINE boolean IfxRif_isModuleEnabled(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   660  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   661  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   662   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   663   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   664   * \param rif Pointer to RIF module registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   665   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   666   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   667  IFX_INLINE boolean IfxRif_isModuleSuspended(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   668  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   669  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   670   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   671   * \param rif Pointer to RIF module registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   672   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   673   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   674   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   675  IFX_INLINE void IfxRif_setSuspendMode(Ifx_RIF *rif, IfxRif_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   676  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   677  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   678  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   679  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   680  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   681  /** \brief Disables the module (clears the disable request)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   682   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   683   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   684   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   685  IFX_EXTERN void IfxRif_disableModule(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   686  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   687  /** \brief Enables the module (clears the disable request)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   688   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   689   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   690   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   691  IFX_EXTERN void IfxRif_enableModule(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   692  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   693  /** \brief Returns the module index of the selected RIF module
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   694   * \param rif Pointer to RIF module registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   695   * \return RIF module register address
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   696   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   697  IFX_EXTERN Ifx_RIF *IfxRif_getAddress(IfxRif_Index rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   698  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   699  /** \brief Returns the module index of the selected RIF module
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   700   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   701   * \return Module index
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   702   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   703  IFX_EXTERN IfxRif_Index IfxRif_getIndex(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   704  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   705  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   706  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   707  /** \addtogroup IfxLld_Rif_Std_LVDS
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   708   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   709  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   710  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   711  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   712  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   713  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   714  /** \brief Sets the Clock LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   715   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   716   * \param value Clock LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   717   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   718   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   719  IFX_INLINE void IfxRif_setClockLvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   720  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   721  /** \brief Sets the Miscellaneous Common LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   722   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   723   * \param mode Miscellaneous Common LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   724   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   725   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   726  IFX_INLINE void IfxRif_setCommonLvdsPadControl(Ifx_RIF *rif, IfxRif_CommonLvdsPadControl mode);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   727  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   728  /** \brief Sets the DATA0 LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   729   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   730   * \param value DATA0 LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   731   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   732   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   733  IFX_INLINE void IfxRif_setData0LvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   734  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   735  /** \brief Sets the DATA1 LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   736   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   737   * \param value DATA1 LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   738   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   739   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   740  IFX_INLINE void IfxRif_setData1LvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   741  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   742  /** \brief Sets the DATA2 LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   743   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   744   * \param value DATA2 LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   745   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   746   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   747  IFX_INLINE void IfxRif_setData2LvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   748  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   749  /** \brief Sets the DATA3 LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   750   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   751   * \param value DATA3 LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   752   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   753   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   754  IFX_INLINE void IfxRif_setData3LvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   755  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   756  /** \brief Sets the Frame LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   757   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   758   * \param value Frame LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   759   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   760   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   761  IFX_INLINE void IfxRif_setFrameLvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   762  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   763  /** \brief enbales / disables the Lvds Bias Distributor 5V Mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   764   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   765   * \param enabled enable / disable choise for LVDS Bias Distributor 5V mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   766   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   767   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   768  IFX_INLINE void IfxRif_setLvdsBiasDistributor5VMode(Ifx_RIF *rif, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   769  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   770  /** \brief Sets the Lvds Bias Distributor Mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   771   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   772   * \param mode LVDS Bias Distributor Power Down mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   773   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   774   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   775  IFX_INLINE void IfxRif_setLvdsBiasDistributorPowerDownMode(Ifx_RIF *rif, IfxRif_LvdsBiasDistributorMode mode);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   776  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   777  /** \brief Sets the Termination Resistor Trimming value
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   778   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   779   * \param value Termination Resistor Trimming value
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   780   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   781   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   782  IFX_INLINE void IfxRif_setRtermTrimmingValue(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   783  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   784  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   785  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   786  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   787  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   788  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   789  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   790  /**
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   791   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   792   * \param fifoId FIFO number
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   793   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   794   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   795  IFX_EXTERN void IfxRif_disableFifo(Ifx_RIF *rif, IfxRif_FifoId fifoId);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   796  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   797  /**
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   798   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   799   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   800   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   801  IFX_EXTERN void IfxRif_disableAllFifos(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   802  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   803  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   804  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   805  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   806  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   807  IFX_INLINE void IfxRif_clearInterruptFlag(Ifx_RIF *rif, IfxRif_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   808  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   809      uint32 shift    = (16 + interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   810      uint32 setValue = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   811      rif->FLAGSCL.U = rif->FLAGSCL.U | (setValue);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   812  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   813  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   814  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   815  IFX_INLINE void IfxRif_disableCrc(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   816  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   817      rif->FLM.B.CRCEN = 0U;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   818  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   819  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   820  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   821  IFX_INLINE void IfxRif_disableDeserializer(Ifx_RIF *rif, IfxRif_DeserializerId deserializerId)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   822  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   823      uint32 setValue = 1U << (deserializerId + 16);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   824      rif->IPI.U = (rif->IPI.U & (~setValue));
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   825  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   826  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   827  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   828  IFX_INLINE void IfxRif_disableInterrupt(Ifx_RIF *rif, IfxRif_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   829  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   830      uint32 setValue = (1U << interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   831      rif->INTCON.U = rif->INTCON.U & (~setValue);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   832  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   833  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   834  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   835  IFX_INLINE void IfxRif_enableCalibration(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   836  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   837      rif->ESI.B.CALEN = 1U;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   838  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   839  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   840  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   841  IFX_INLINE void IfxRif_enableCrc(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   842  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   843      rif->FLM.B.CRCEN = 1U;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   844  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   845  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   846  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   847  IFX_INLINE void IfxRif_enableDeserializer(Ifx_RIF *rif, IfxRif_DeserializerId deserializerId)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   848  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   849      uint32 setValue = 1U << (deserializerId + 16);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   850      rif->IPI.U = rif->IPI.U | setValue;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   851  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   852  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   853  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   854  IFX_INLINE void IfxRif_enableExternalAdc(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   855  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   856      rif->RSM0.B.INTADC = 0U;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   857  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   858  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   859  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   860  IFX_INLINE void IfxRif_enableFifo(Ifx_RIF *rif, IfxRif_FifoId fifoId)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   861  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   862      uint32 setValue = 1U << fifoId;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   863      rif->DMI.U = rif->DMI.U | setValue;
	ld.w	d15,[a15]28
.L141:
	or	d15,#1
	j	.L7
.L3:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     2   * \file IfxRif.h
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     3   * \brief RIF  basic functionality
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     4   * \ingroup IfxLld_Rif
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     5   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     8   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     9   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    11   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    16   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    18   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    25   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    32   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    40   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    41   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    42   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    43   * \defgroup IfxLld_Rif_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    44   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    45   * \defgroup IfxLld_Rif_Std_Deserializer Deserializer Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    46   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    47   * \defgroup IfxLld_Rif_Std_FLM Fifo and Line Management Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    48   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    49   * \defgroup IfxLld_Rif_Std_DFU Data Formating Unit Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    50   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    51   * \defgroup IfxLld_Rif_Std_RSM Radar State Machine Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    52   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    53   * \defgroup IfxLld_Rif_Std_Interrupt Interrupt Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    54   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    55   * \defgroup IfxLld_Rif_Std_Monitor Monitoring Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    56   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    57   * \defgroup IfxLld_Rif_Std_Module Module Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    58   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    59   * \defgroup IfxLld_Rif_Std_LVDS LDVS Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    60   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    61   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    62  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    63  #ifndef IFXRIF_H
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    64  #define IFXRIF_H 1
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    65  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    66  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    67  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    68  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    69  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    70  #include "_Impl/IfxRif_cfg.h"
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    71  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    72  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    73  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    74  #include "IfxRif_reg.h"
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    75  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    76  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    77  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    78  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    79  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    80  /** \addtogroup IfxLld_Rif_Std_Enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    81   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    82  /** \brief Defines the Type of ADCs used for radar cycle internal /external
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    83   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    84  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    85  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    86      IfxRif_Adc_external,  /**< \brief External ADCs (deserializer enabled) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    87      IfxRif_Adc_internal   /**< \brief Internal ADCs (deserializer disabled) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    88  } IfxRif_Adc;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    89  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    90  /** \brief Defines the current state of the deserializer\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    91   * Definition in Ifx_RIF.ESI.B.CALBSY
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    92   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    93  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    94  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    95      IfxRif_CalibrationState_done,  /**< \brief Calibration is finished (no calibration ongoing) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    96      IfxRif_CalibrationState_busy   /**< \brief Calibration is ongoing */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    97  } IfxRif_CalibrationState;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    98  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    99  /** \brief Defines the status of the latest timing calibration sequence.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   100   * Definition in Ifx_RIF.ESI.B.CALSTAT
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   101   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   102  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   103  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   104      IfxRif_CalibrationStatus_fail,    /**< \brief Calibration is failed (signal paths uncalibrated) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   105      IfxRif_CalibrationStatus_success  /**< \brief Calibration is successful */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   106  } IfxRif_CalibrationStatus;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   107  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   108  /** \brief Defines the polarity of the clock signal on the clock input pins.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   109   * Definition in Ifx_RIF.ESI.B.CP
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   110   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   111  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   112  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   113      IfxRif_ClockPolarity_default,  /**< \brief Default polarity of the clock signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   114      IfxRif_ClockPolarity_inverted  /**< \brief Inverted polarity of the clock signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   115  } IfxRif_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   116  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   117  /** \brief Defines the Common control selection for all LVDS Pads .\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   118   * Definition in Ifx_RIF.LVDSCON1.B.MISC
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   119   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   120  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   121  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   122      IfxRif_CommonLvdsPadControl_5vMode,       /**< \brief enable 5V Mode for all LVDS pads */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   123      IfxRif_CommonLvdsPadControl_lowSpeedMode  /**< \brief enable low speed mode for all LVDS pads */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   124  } IfxRif_CommonLvdsPadControl;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   125  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   126  /** \brief Defines the alignment of the data delivered to the SPU.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   127   * Definition in Ifx_RIF.DFU.B.DA
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   128   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   129  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   130  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   131      IfxRif_DataAlignment_right,  /**< \brief Data alignment right (integer) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   132      IfxRif_DataAlignment_left    /**< \brief Data alignment left (fractional) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   133  } IfxRif_DataAlignment;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   134  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   135  /** \brief Defines the format of the data delivered to the SPU.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   136   * Definition in Ifx_RIF.DFU.B.DF
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   137   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   138  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   139  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   140      IfxRif_DataFormat_unsigned,  /**< \brief Data format unsigned */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   141      IfxRif_DataFormat_signed     /**< \brief Data format signed */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   142  } IfxRif_DataFormat;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   143  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   144  /** \brief Defines the data length of the frame signal.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   145   * Definition in Ifx_RIF.IPI.B.DL
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   146   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   147  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   148  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   149      IfxRif_DataLength_10bit,     /**< \brief Data length 10bit  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   150      IfxRif_DataLength_12bit,     /**< \brief Data length 12bit  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   151      IfxRif_DataLength_14bit,     /**< \brief Data length 14bit  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   152      IfxRif_DataLength_16bit      /**< \brief Data length 16bit  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   153  } IfxRif_DataLength;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   154  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   155  /** \brief Defines the polarity of the data signals on the data input pins.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   156   * Definition in Ifx_RIF.ESI.B.DP
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   157   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   158  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   159  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   160      IfxRif_DataPolarity_default,  /**< \brief Default polarity of the data signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   161      IfxRif_DataPolarity_inverted  /**< \brief Inverted polarity of the data signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   162  } IfxRif_DataPolarity;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   163  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   164  /** \brief Defines the deserializer number (0 to 3).\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   165   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   166  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   167  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   168      IfxRif_DeserializerId_0,     /**< \brief Deserializer 0  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   169      IfxRif_DeserializerId_1,     /**< \brief Deserializer 1  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   170      IfxRif_DeserializerId_2,     /**< \brief Deserializer 2  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   171      IfxRif_DeserializerId_3      /**< \brief Deserializer 3  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   172  } IfxRif_DeserializerId;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   173  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   174  /** \brief Defines the FIFO number (0 to 3).\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   175   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   176  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   177  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   178      IfxRif_FifoId_0,     /**< \brief Fifo 0  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   179      IfxRif_FifoId_1,     /**< \brief Fifo 1  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   180      IfxRif_FifoId_2,     /**< \brief Fifo 2  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   181      IfxRif_FifoId_3      /**< \brief Fifo 3  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   182  } IfxRif_FifoId;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   183  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   184  /** \brief Defines the FLM mode of operation.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   185   * Definition in Ifx_RIF.FLM.B.MODE
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   186   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   187  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   188  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   189      IfxRif_FlmMode_direct,  /**< \brief No swap of the data paths */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   190      IfxRif_FlmMode_swap     /**< \brief Swap of data paths of channels 0-1 and 2-3 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   191  } IfxRif_FlmMode;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   192  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   193  /** \brief Defines the polarity of the frame signal on the frame input pins.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   194   * Definition in Ifx_RIF.ESI.B.FP
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   195   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   196  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   197  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   198      IfxRif_FramePolarity_default,  /**< \brief Default polarity of the frame signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   199      IfxRif_FramePolarity_inverted  /**< \brief Inverted polarity of the frame signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   200  } IfxRif_FramePolarity;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   201  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   202  /** \brief Defines the Full swap mode operation of FLM.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   203   * Definition in Ifx_RIF.FLM.B.FSWP
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   204   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   205  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   206  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   207      IfxRif_FullSwapMode_direct,  /**< \brief No swap of the data paths */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   208      IfxRif_FullSwapMode_swap     /**< \brief Swap of data paths of channels 0-3 and 1-2 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   209  } IfxRif_FullSwapMode;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   210  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   211  /** \brief Defines the available interrupts in RIF module.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   212   * Definition in Ifx_RIF.INTCON and Ifx_RIF.CRC
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   213   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   214  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   215  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   216      IfxRif_Interrupt_calibrationEnd,         /**< \brief Calibration End interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   217      IfxRif_Interrupt_frameWatchdogOverflow,  /**< \brief Frame Watchdog Overflow interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   218      IfxRif_Interrupt_rampEnd,                /**< \brief Ramp End interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   219      IfxRif_Interrupt_chirpEnd,               /**< \brief Chirp End interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   220      IfxRif_Interrupt_crcErrorOnLine0,        /**< \brief CRC error interrupt on Line 0 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   221      IfxRif_Interrupt_crcErrorOnLine1,        /**< \brief CRC error interrupt on Line 1 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   222      IfxRif_Interrupt_crcErrorOnLine2,        /**< \brief CRC error interrupt on Line 2 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   223      IfxRif_Interrupt_crcErrorOnLine3,        /**< \brief CRC error interrupt on Line 3 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   224      IfxRif_Interrupt_ramp1Error,             /**< \brief Ramp1 Error interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   225      IfxRif_Interrupt_chirp1Error,            /**< \brief Chirp1 Error interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   226      IfxRif_Interrupt_ramp1Start              /**< \brief Ramp1 Start interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   227  } IfxRif_Interrupt;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   228  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   229  /** \brief Defines the mode of Lvds Bias DistributorMode.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   230   * Definition in Ifx_RIF.LVDSCON1.B.PWRDN
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   231   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   232  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   233  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   234      IfxRif_LvdsBiasDistributorMode_active,      /**< \brief Active */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   235      IfxRif_LvdsBiasDistributorMode_poweredDown  /**< \brief Powered Down */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   236  } IfxRif_LvdsBiasDistributorMode;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   237  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   238  /** \brief Defines the LVDS PAD control selection.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   239   * Definition in Ifx_RIF.LVDSCON0.B.FRAME / CLK / DATA0 / DATA1 / LVDSCON1.B.DATA2 / DATA3
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   240   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   241  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   242  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   243      IfxRif_LvdsPadControl_none       = 0x00,  /**< \brief NO selection */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   244      IfxRif_LvdsPadControl_test       = 0x01,  /**< \brief Test Enable (enable Weak Driver Mode) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   245      IfxRif_LvdsPadControl_rterm      = 0x02,  /**< \brief Rterm Enable */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   246      IfxRif_LvdsPadControl_frameClock = 0x04,  /**< \brief Frame Clock LVDS Pad Enable */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   247      IfxRif_LvdsPadControl_xor        = 0x08,  /**< \brief LVDS XOR-IN tied to LO by RIF-IP */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   248      IfxRif_LvdsPadControl_spareBit   = 0x10,  /**< \brief spare bit - tied to LO by RIF-IP */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   249      IfxRif_LvdsPadControl_TGatePTest = 0x20,  /**< \brief LVDS pad enable T-Gate P Test */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   250      IfxRif_LvdsPadControl_TGateNTest = 0x40   /**< \brief LVDS pad enable T-Gate N-Test */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   251  } IfxRif_LvdsPadControl;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   252  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   253  /** \brief Defines the number of samples, used in different phases of radar operation cycle
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   254   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   255  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   256  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   257      IfxRif_NumberOfSamples_1,     /**< \brief Number of samples 1  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   258      IfxRif_NumberOfSamples_2,     /**< \brief Number of samples 2  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   259      IfxRif_NumberOfSamples_3,     /**< \brief Number of samples 3  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   260      IfxRif_NumberOfSamples_4,     /**< \brief Number of samples 4  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   261      IfxRif_NumberOfSamples_5,     /**< \brief Number of samples 5  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   262      IfxRif_NumberOfSamples_6,     /**< \brief Number of samples 6  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   263      IfxRif_NumberOfSamples_7,     /**< \brief Number of samples 7  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   264      IfxRif_NumberOfSamples_8,     /**< \brief Number of samples 8  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   265      IfxRif_NumberOfSamples_9,     /**< \brief Number of samples 9  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   266      IfxRif_NumberOfSamples_10,    /**< \brief Number of samples 10  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   267      IfxRif_NumberOfSamples_11,    /**< \brief Number of samples 11  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   268      IfxRif_NumberOfSamples_12,    /**< \brief Number of samples 12  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   269      IfxRif_NumberOfSamples_13,    /**< \brief Number of samples 13  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   270      IfxRif_NumberOfSamples_14,    /**< \brief Number of samples 14  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   271      IfxRif_NumberOfSamples_15,    /**< \brief Number of samples 15  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   272      IfxRif_NumberOfSamples_16     /**< \brief Number of samples 16  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   273  } IfxRif_NumberOfSamples;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   274  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   275  /** \brief Defines the source for the RAMP1 signal multiplexer.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   276   * Definition in Ifx_RIF.RSM1.B.R1SEL
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   277   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   278  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   279  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   280      IfxRif_Ramp1SignalInput_0,     /**< \brief input 0  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   281      IfxRif_Ramp1SignalInput_1,     /**< \brief input 1  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   282      IfxRif_Ramp1SignalInput_2,     /**< \brief input 2  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   283      IfxRif_Ramp1SignalInput_3      /**< \brief input 3  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   284  } IfxRif_Ramp1SignalInput;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   285  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   286  /** \brief Defines the polarity of the RAMP1 signal .\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   287   * Definition in Ifx_RIF.RSM1.B.R1POL
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   288   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   289  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   290  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   291      IfxRif_Ramp1SignalPolarity_lowActive,  /**< \brief Low Active */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   292      IfxRif_Ramp1SignalPolarity_highActive  /**< \brief High Active */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   293  } IfxRif_Ramp1SignalPolarity;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   294  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   295  /** \brief Defines the shift direction of the serial data, corresponding to the data bit on
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   296   * the lsb position in the delivered parallel data.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   297   * Definition in Ifx_RIF.DFU.B.MSB
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   298   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   299  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   300  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   301      IfxRif_ShiftDirection_msbFirst,  /**< \brief Shift direction MSB first */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   302      IfxRif_ShiftDirection_lsbFirst   /**< \brief Shift direction LSB first */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   303  } IfxRif_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   304  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   305  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   306   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   307  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   308  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   309      IfxRif_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   310      IfxRif_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   311      IfxRif_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   312  } IfxRif_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   313  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   314  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   315  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   316  /** \addtogroup IfxLld_Rif_Std_Deserializer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   317   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   318  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   319  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   320  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   321  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   322  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   323  /** \brief Disables the selected deserializer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   324   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   325   * \param deserializerId Deserializer number
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   326   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   327   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   328  IFX_INLINE void IfxRif_disableDeserializer(Ifx_RIF *rif, IfxRif_DeserializerId deserializerId);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   329  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   330  /** \brief Enables the calibration mode of the deserializer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   331   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   332   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   333   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   334  IFX_INLINE void IfxRif_enableCalibration(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   335  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   336  /** \brief Enables the selected deserializer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   337   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   338   * \param deserializerId Deserializer number
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   339   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   340   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   341  IFX_INLINE void IfxRif_enableDeserializer(Ifx_RIF *rif, IfxRif_DeserializerId deserializerId);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   342  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   343  /** \brief Returns the current state of the deserializer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   344   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   345   * \return Calibration state (done / on going)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   346   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   347  IFX_INLINE IfxRif_CalibrationState IfxRif_getCalibrationState(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   348  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   349  /** \brief Returns the status of the latest timing calibration sequence
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   350   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   351   * \return Calibration status (fail / success)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   352   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   353  IFX_INLINE IfxRif_CalibrationStatus IfxRif_getCalibrationStatus(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   354  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   355  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   356  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   357  /** \addtogroup IfxLld_Rif_Std_FLM
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   358   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   359  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   360  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   361  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   362  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   363  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   364  /** \brief Enables the selected FIFO
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   365   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   366   * \param fifoId FIFO number
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   367   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   368   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   369  IFX_INLINE void IfxRif_enableFifo(Ifx_RIF *rif, IfxRif_FifoId fifoId);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   370  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   371  /** \brief Sets the FLM mode of operation
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   372   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   373   * \param mode FLM mode of operation
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   374   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   375   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   376  IFX_INLINE void IfxRif_setFlmMode(Ifx_RIF *rif, IfxRif_FlmMode mode);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   377  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   378  /** \brief Sets the Full Swap Mode of FLM unit
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   379   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   380   * \param swapMode Full Swap Mod eof FLM unit
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   381   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   382   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   383  IFX_INLINE void IfxRif_setFullSwapMode(Ifx_RIF *rif, IfxRif_FullSwapMode swapMode);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   384  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   385  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   386  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   387  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   388  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   389  /** \brief Enables the number of FIFOs based on number of ADC channels used
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   390   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   391   * \param count Number of ADC channels used
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   392   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   393   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   394  IFX_EXTERN void IfxRif_enableFifos(Ifx_RIF *rif, uint8 count);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   395  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   396  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   397  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   398  /** \addtogroup IfxLld_Rif_Std_DFU
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   399   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   400  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   401  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   402  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   403  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   404  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   405  /** \brief Returns the data length of the frame signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   406   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   407   * \return Data length of the frame signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   408   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   409  IFX_INLINE IfxRif_DataLength IfxRif_getDataLength(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   410  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   411  /** \brief Sets the polarity of the clock signal on the clock input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   412   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   413   * \param polarity Polarity of the clock signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   414   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   415   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   416  IFX_INLINE void IfxRif_setClockPolarity(Ifx_RIF *rif, IfxRif_ClockPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   417  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   418  /** \brief Sets the alignment of the data delivered to the SPU
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   419   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   420   * \param alignment Alignment of the data delivered to the SPU
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   421   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   422   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   423  IFX_INLINE void IfxRif_setDataAlignment(Ifx_RIF *rif, IfxRif_DataAlignment alignment);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   424  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   425  /** \brief Sets the format of the data delivered to the SPU
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   426   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   427   * \param format format of the data delivered to the SPU
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   428   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   429   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   430  IFX_INLINE void IfxRif_setDataFormat(Ifx_RIF *rif, IfxRif_DataFormat format);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   431  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   432  /** \brief Sets the data length of the frame signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   433   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   434   * \param length Data length of the frame signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   435   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   436   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   437  IFX_INLINE void IfxRif_setDataLength(Ifx_RIF *rif, IfxRif_DataLength length);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   438  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   439  /** \brief Sets the polarity of the data signal 0 on the data input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   440   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   441   * \param polarity Polarity of the data signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   442   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   443   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   444  IFX_INLINE void IfxRif_setDataPolarity0(Ifx_RIF *rif, IfxRif_DataPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   445  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   446  /** \brief Sets the polarity of the data signal 1 on the data input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   447   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   448   * \param polarity Polarity of the data signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   449   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   450   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   451  IFX_INLINE void IfxRif_setDataPolarity1(Ifx_RIF *rif, IfxRif_DataPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   452  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   453  /** \brief Sets the polarity of the data signal 2 on the data input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   454   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   455   * \param polarity Polarity of the data signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   456   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   457   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   458  IFX_INLINE void IfxRif_setDataPolarity2(Ifx_RIF *rif, IfxRif_DataPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   459  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   460  /** \brief Sets the polarity of the data signal 3 on the data input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   461   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   462   * \param polarity Polarity of the data signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   463   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   464   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   465  IFX_INLINE void IfxRif_setDataPolarity3(Ifx_RIF *rif, IfxRif_DataPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   466  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   467  /** \brief Sets the polarity of the frame signal on the frame input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   468   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   469   * \param polarity Polarity of the frame signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   471   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   472  IFX_INLINE void IfxRif_setFramePolarity(Ifx_RIF *rif, IfxRif_FramePolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   473  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   474  /** \brief Sets the polarity of the RAMP1 signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   475   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   476   * \param polarity Polarity of the RAMP1 signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   477   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   478   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   479  IFX_INLINE void IfxRif_setRamp1SignalPolarity(Ifx_RIF *rif, IfxRif_Ramp1SignalPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   480  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   481  /** \brief Sets the the shift direction of the serial data, corresponding to the data bit on
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   482   * the lsb position in the delivered parallel data
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   483   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   484   * \param direction Shift direction
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   485   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   486   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   487  IFX_INLINE void IfxRif_setShiftDirection(Ifx_RIF *rif, IfxRif_ShiftDirection direction);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   488  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   489  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   490  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   491  /** \addtogroup IfxLld_Rif_Std_RSM
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   492   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   493  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   494  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   495  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   496  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   497  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   498  /** \brief Enables the external ADCs, the radar interface to accepts input from the external ADCs.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   499   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   500   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   501   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   502  IFX_INLINE void IfxRif_enableExternalAdc(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   503  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   504  /** \brief Enables the internal ADCs, the radar interface to accepts input from the internal ADCs.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   505   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   506   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   507   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   508  IFX_INLINE void IfxRif_enableInternalAdc(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   509  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   510  /** \brief Enables lockstep, synchronous delivery of ADC samples from two RIFs to two SPUs\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   511   * (in case two RIF instances are available and used)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   512   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   513   * \param enabled Choise (enable / disable)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   514   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   515   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   516  IFX_INLINE void IfxRif_enableLockstep(Ifx_RIF *rif, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   517  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   518  /** \brief Enables the RAMP1 signal and disables the Frame Watchdog Timer\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   519   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   520   * \param enabled Choise (enable / disable)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   521   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   522   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   523  IFX_INLINE void IfxRif_enableRamp1Signal(Ifx_RIF *rif, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   524  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   525  /** \brief Returns the current ramp number of the chirp
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   526   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   527   * \return Current ramp number of the chirp
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   528   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   529  IFX_INLINE uint16 IfxRif_getCurrentRampNumber(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   530  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   531  /** \brief Returns the current valid data sample number of the chirp
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   532   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   533   * \return Current valid data sample number of the chirp
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   534   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   535  IFX_INLINE uint16 IfxRif_getCurrentValidDataSampleNumber(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   536  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   537  /** \brief Sets the number of ramps per chirp in the range of 1 to 2048 ramps
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   538   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   539   * \param rampsNum Number of ramps
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   540   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   541   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   542  IFX_INLINE void IfxRif_setChirpLength(Ifx_RIF *rif, uint16 rampsNum);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   543  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   544  /** \brief Sets the source for the RAMP1 signal multiplexer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   545   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   546   * \param signal Source for the RAMP1 signal multiplexer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   547   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   548   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   549  IFX_INLINE void IfxRif_setRamp1SignalInput(Ifx_RIF *rif, IfxRif_Ramp1SignalInput signal);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   550  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   551  /** \brief Sets the number of valid data samples per chirp in the range of 1 to 2048 samples
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   552   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   553   * \param samplesNum Number of valid data samples
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   554   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   555   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   556  IFX_INLINE void IfxRif_setValidDataSamplesNumber(Ifx_RIF *rif, uint16 samplesNum);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   557  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   558  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   559  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   560  /** \addtogroup IfxLld_Rif_Std_Interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   561   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   562  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   563  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   564  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   565  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   566  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   567  /** \brief Clears the selected interrupt flag status
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   568   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   569   * \param interrupt Type of interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   570   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   571   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   572  IFX_INLINE void IfxRif_clearInterruptFlag(Ifx_RIF *rif, IfxRif_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   573  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   574  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   575   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   576   * \param interrupt Type of interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   577   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   578   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   579  IFX_INLINE void IfxRif_disableInterrupt(Ifx_RIF *rif, IfxRif_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   580  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   581  /** \brief Enables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   582   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   583   * \param interrupt Type of interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   584   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   585   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   586  IFX_INLINE void IfxRif_enableInterrupt(Ifx_RIF *rif, IfxRif_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   587  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   588  /** \brief Returns the selected interrupt flag status
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   589   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   590   * \param interrupt Type of interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   591   * \return Status
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   592   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   593  IFX_INLINE uint8 IfxRif_getInterruptFlagStatus(Ifx_RIF *rif, IfxRif_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   594  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   595  /** \brief Sets the selected interrupt flag status
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   596   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   597   * \param interrupt Type of interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   598   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   599   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   600  IFX_INLINE void IfxRif_setInterruptFlag(Ifx_RIF *rif, IfxRif_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   601  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   602  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   603  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   604  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   605  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   606  /** \brief Returns the SRC pointer of RIF module ERR interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   607   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   608   * \return SRC pointer of RIF module ERR interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   609   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   610  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxRif_getSrcPointerErr(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   611  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   612  /** \brief Returns the SRC pointer of RIF module INT interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   613   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   614   * \return SRC pointer of RIF module INT interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   615   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   616  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxRif_getSrcPointerInt(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   617  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   618  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   619  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   620  /** \addtogroup IfxLld_Rif_Std_Monitor
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   621   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   622  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   623  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   624  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   625  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   626  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   627  /** \brief Disables the CRC.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   628   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   630   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   631  IFX_INLINE void IfxRif_disableCrc(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   632  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   633  /** \brief Enables the CRC.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   634   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   635   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   636   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   637  IFX_INLINE void IfxRif_enableCrc(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   638  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   639  /** \brief Sets the frame watchdog threshold, (the reload value for the watchdog timer) in the range of 0-255.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   640   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   641   * \param value Threshold value
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   642   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   643   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   644  IFX_INLINE void IfxRif_setFrameWatchdogThreshold(Ifx_RIF *rif, uint16 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   645  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   646  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   647  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   648  /** \addtogroup IfxLld_Rif_Std_Module
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   649   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   650  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   651  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   652  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   653  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   654  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   655  /** \brief Returns the status of module, enabled or disabled
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   656   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   657   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   658   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   659  IFX_INLINE boolean IfxRif_isModuleEnabled(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   660  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   661  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   662   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   663   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   664   * \param rif Pointer to RIF module registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   665   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   666   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   667  IFX_INLINE boolean IfxRif_isModuleSuspended(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   668  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   669  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   670   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   671   * \param rif Pointer to RIF module registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   672   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   673   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   674   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   675  IFX_INLINE void IfxRif_setSuspendMode(Ifx_RIF *rif, IfxRif_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   676  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   677  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   678  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   679  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   680  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   681  /** \brief Disables the module (clears the disable request)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   682   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   683   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   684   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   685  IFX_EXTERN void IfxRif_disableModule(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   686  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   687  /** \brief Enables the module (clears the disable request)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   688   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   689   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   690   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   691  IFX_EXTERN void IfxRif_enableModule(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   692  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   693  /** \brief Returns the module index of the selected RIF module
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   694   * \param rif Pointer to RIF module registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   695   * \return RIF module register address
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   696   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   697  IFX_EXTERN Ifx_RIF *IfxRif_getAddress(IfxRif_Index rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   698  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   699  /** \brief Returns the module index of the selected RIF module
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   700   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   701   * \return Module index
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   702   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   703  IFX_EXTERN IfxRif_Index IfxRif_getIndex(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   704  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   705  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   706  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   707  /** \addtogroup IfxLld_Rif_Std_LVDS
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   708   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   709  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   710  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   711  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   712  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   713  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   714  /** \brief Sets the Clock LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   715   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   716   * \param value Clock LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   717   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   718   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   719  IFX_INLINE void IfxRif_setClockLvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   720  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   721  /** \brief Sets the Miscellaneous Common LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   722   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   723   * \param mode Miscellaneous Common LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   724   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   725   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   726  IFX_INLINE void IfxRif_setCommonLvdsPadControl(Ifx_RIF *rif, IfxRif_CommonLvdsPadControl mode);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   727  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   728  /** \brief Sets the DATA0 LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   729   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   730   * \param value DATA0 LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   731   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   732   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   733  IFX_INLINE void IfxRif_setData0LvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   734  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   735  /** \brief Sets the DATA1 LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   736   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   737   * \param value DATA1 LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   738   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   739   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   740  IFX_INLINE void IfxRif_setData1LvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   741  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   742  /** \brief Sets the DATA2 LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   743   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   744   * \param value DATA2 LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   745   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   746   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   747  IFX_INLINE void IfxRif_setData2LvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   748  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   749  /** \brief Sets the DATA3 LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   750   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   751   * \param value DATA3 LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   752   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   753   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   754  IFX_INLINE void IfxRif_setData3LvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   755  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   756  /** \brief Sets the Frame LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   757   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   758   * \param value Frame LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   759   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   760   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   761  IFX_INLINE void IfxRif_setFrameLvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   762  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   763  /** \brief enbales / disables the Lvds Bias Distributor 5V Mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   764   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   765   * \param enabled enable / disable choise for LVDS Bias Distributor 5V mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   766   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   767   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   768  IFX_INLINE void IfxRif_setLvdsBiasDistributor5VMode(Ifx_RIF *rif, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   769  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   770  /** \brief Sets the Lvds Bias Distributor Mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   771   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   772   * \param mode LVDS Bias Distributor Power Down mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   773   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   774   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   775  IFX_INLINE void IfxRif_setLvdsBiasDistributorPowerDownMode(Ifx_RIF *rif, IfxRif_LvdsBiasDistributorMode mode);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   776  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   777  /** \brief Sets the Termination Resistor Trimming value
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   778   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   779   * \param value Termination Resistor Trimming value
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   780   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   781   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   782  IFX_INLINE void IfxRif_setRtermTrimmingValue(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   783  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   784  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   785  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   786  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   787  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   788  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   789  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   790  /**
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   791   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   792   * \param fifoId FIFO number
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   793   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   794   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   795  IFX_EXTERN void IfxRif_disableFifo(Ifx_RIF *rif, IfxRif_FifoId fifoId);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   796  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   797  /**
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   798   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   799   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   800   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   801  IFX_EXTERN void IfxRif_disableAllFifos(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   802  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   803  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   804  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   805  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   806  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   807  IFX_INLINE void IfxRif_clearInterruptFlag(Ifx_RIF *rif, IfxRif_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   808  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   809      uint32 shift    = (16 + interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   810      uint32 setValue = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   811      rif->FLAGSCL.U = rif->FLAGSCL.U | (setValue);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   812  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   813  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   814  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   815  IFX_INLINE void IfxRif_disableCrc(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   816  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   817      rif->FLM.B.CRCEN = 0U;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   818  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   819  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   820  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   821  IFX_INLINE void IfxRif_disableDeserializer(Ifx_RIF *rif, IfxRif_DeserializerId deserializerId)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   822  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   823      uint32 setValue = 1U << (deserializerId + 16);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   824      rif->IPI.U = (rif->IPI.U & (~setValue));
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   825  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   826  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   827  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   828  IFX_INLINE void IfxRif_disableInterrupt(Ifx_RIF *rif, IfxRif_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   829  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   830      uint32 setValue = (1U << interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   831      rif->INTCON.U = rif->INTCON.U & (~setValue);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   832  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   833  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   834  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   835  IFX_INLINE void IfxRif_enableCalibration(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   836  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   837      rif->ESI.B.CALEN = 1U;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   838  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   839  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   840  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   841  IFX_INLINE void IfxRif_enableCrc(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   842  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   843      rif->FLM.B.CRCEN = 1U;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   844  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   845  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   846  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   847  IFX_INLINE void IfxRif_enableDeserializer(Ifx_RIF *rif, IfxRif_DeserializerId deserializerId)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   848  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   849      uint32 setValue = 1U << (deserializerId + 16);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   850      rif->IPI.U = rif->IPI.U | setValue;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   851  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   852  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   853  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   854  IFX_INLINE void IfxRif_enableExternalAdc(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   855  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   856      rif->RSM0.B.INTADC = 0U;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   857  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   858  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   859  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   860  IFX_INLINE void IfxRif_enableFifo(Ifx_RIF *rif, IfxRif_FifoId fifoId)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   861  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   862      uint32 setValue = 1U << fifoId;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   863      rif->DMI.U = rif->DMI.U | setValue;
	ld.w	d15,[a15]28
.L142:
	or	d15,#1
	st.w	[a15]28,d15
.L97:
	ld.w	d15,[a15]28
.L165:
	or	d15,#2
	j	.L8
.L5:
.L4:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     2   * \file IfxRif.h
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     3   * \brief RIF  basic functionality
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     4   * \ingroup IfxLld_Rif
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     5   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     8   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     9   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    11   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    16   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    18   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    25   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    32   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    40   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    41   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    42   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    43   * \defgroup IfxLld_Rif_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    44   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    45   * \defgroup IfxLld_Rif_Std_Deserializer Deserializer Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    46   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    47   * \defgroup IfxLld_Rif_Std_FLM Fifo and Line Management Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    48   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    49   * \defgroup IfxLld_Rif_Std_DFU Data Formating Unit Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    50   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    51   * \defgroup IfxLld_Rif_Std_RSM Radar State Machine Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    52   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    53   * \defgroup IfxLld_Rif_Std_Interrupt Interrupt Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    54   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    55   * \defgroup IfxLld_Rif_Std_Monitor Monitoring Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    56   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    57   * \defgroup IfxLld_Rif_Std_Module Module Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    58   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    59   * \defgroup IfxLld_Rif_Std_LVDS LDVS Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    60   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    61   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    62  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    63  #ifndef IFXRIF_H
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    64  #define IFXRIF_H 1
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    65  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    66  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    67  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    68  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    69  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    70  #include "_Impl/IfxRif_cfg.h"
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    71  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    72  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    73  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    74  #include "IfxRif_reg.h"
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    75  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    76  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    77  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    78  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    79  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    80  /** \addtogroup IfxLld_Rif_Std_Enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    81   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    82  /** \brief Defines the Type of ADCs used for radar cycle internal /external
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    83   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    84  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    85  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    86      IfxRif_Adc_external,  /**< \brief External ADCs (deserializer enabled) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    87      IfxRif_Adc_internal   /**< \brief Internal ADCs (deserializer disabled) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    88  } IfxRif_Adc;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    89  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    90  /** \brief Defines the current state of the deserializer\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    91   * Definition in Ifx_RIF.ESI.B.CALBSY
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    92   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    93  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    94  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    95      IfxRif_CalibrationState_done,  /**< \brief Calibration is finished (no calibration ongoing) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    96      IfxRif_CalibrationState_busy   /**< \brief Calibration is ongoing */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    97  } IfxRif_CalibrationState;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    98  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    99  /** \brief Defines the status of the latest timing calibration sequence.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   100   * Definition in Ifx_RIF.ESI.B.CALSTAT
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   101   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   102  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   103  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   104      IfxRif_CalibrationStatus_fail,    /**< \brief Calibration is failed (signal paths uncalibrated) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   105      IfxRif_CalibrationStatus_success  /**< \brief Calibration is successful */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   106  } IfxRif_CalibrationStatus;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   107  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   108  /** \brief Defines the polarity of the clock signal on the clock input pins.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   109   * Definition in Ifx_RIF.ESI.B.CP
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   110   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   111  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   112  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   113      IfxRif_ClockPolarity_default,  /**< \brief Default polarity of the clock signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   114      IfxRif_ClockPolarity_inverted  /**< \brief Inverted polarity of the clock signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   115  } IfxRif_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   116  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   117  /** \brief Defines the Common control selection for all LVDS Pads .\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   118   * Definition in Ifx_RIF.LVDSCON1.B.MISC
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   119   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   120  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   121  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   122      IfxRif_CommonLvdsPadControl_5vMode,       /**< \brief enable 5V Mode for all LVDS pads */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   123      IfxRif_CommonLvdsPadControl_lowSpeedMode  /**< \brief enable low speed mode for all LVDS pads */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   124  } IfxRif_CommonLvdsPadControl;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   125  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   126  /** \brief Defines the alignment of the data delivered to the SPU.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   127   * Definition in Ifx_RIF.DFU.B.DA
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   128   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   129  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   130  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   131      IfxRif_DataAlignment_right,  /**< \brief Data alignment right (integer) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   132      IfxRif_DataAlignment_left    /**< \brief Data alignment left (fractional) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   133  } IfxRif_DataAlignment;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   134  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   135  /** \brief Defines the format of the data delivered to the SPU.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   136   * Definition in Ifx_RIF.DFU.B.DF
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   137   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   138  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   139  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   140      IfxRif_DataFormat_unsigned,  /**< \brief Data format unsigned */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   141      IfxRif_DataFormat_signed     /**< \brief Data format signed */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   142  } IfxRif_DataFormat;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   143  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   144  /** \brief Defines the data length of the frame signal.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   145   * Definition in Ifx_RIF.IPI.B.DL
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   146   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   147  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   148  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   149      IfxRif_DataLength_10bit,     /**< \brief Data length 10bit  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   150      IfxRif_DataLength_12bit,     /**< \brief Data length 12bit  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   151      IfxRif_DataLength_14bit,     /**< \brief Data length 14bit  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   152      IfxRif_DataLength_16bit      /**< \brief Data length 16bit  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   153  } IfxRif_DataLength;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   154  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   155  /** \brief Defines the polarity of the data signals on the data input pins.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   156   * Definition in Ifx_RIF.ESI.B.DP
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   157   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   158  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   159  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   160      IfxRif_DataPolarity_default,  /**< \brief Default polarity of the data signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   161      IfxRif_DataPolarity_inverted  /**< \brief Inverted polarity of the data signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   162  } IfxRif_DataPolarity;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   163  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   164  /** \brief Defines the deserializer number (0 to 3).\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   165   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   166  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   167  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   168      IfxRif_DeserializerId_0,     /**< \brief Deserializer 0  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   169      IfxRif_DeserializerId_1,     /**< \brief Deserializer 1  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   170      IfxRif_DeserializerId_2,     /**< \brief Deserializer 2  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   171      IfxRif_DeserializerId_3      /**< \brief Deserializer 3  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   172  } IfxRif_DeserializerId;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   173  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   174  /** \brief Defines the FIFO number (0 to 3).\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   175   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   176  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   177  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   178      IfxRif_FifoId_0,     /**< \brief Fifo 0  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   179      IfxRif_FifoId_1,     /**< \brief Fifo 1  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   180      IfxRif_FifoId_2,     /**< \brief Fifo 2  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   181      IfxRif_FifoId_3      /**< \brief Fifo 3  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   182  } IfxRif_FifoId;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   183  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   184  /** \brief Defines the FLM mode of operation.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   185   * Definition in Ifx_RIF.FLM.B.MODE
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   186   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   187  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   188  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   189      IfxRif_FlmMode_direct,  /**< \brief No swap of the data paths */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   190      IfxRif_FlmMode_swap     /**< \brief Swap of data paths of channels 0-1 and 2-3 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   191  } IfxRif_FlmMode;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   192  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   193  /** \brief Defines the polarity of the frame signal on the frame input pins.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   194   * Definition in Ifx_RIF.ESI.B.FP
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   195   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   196  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   197  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   198      IfxRif_FramePolarity_default,  /**< \brief Default polarity of the frame signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   199      IfxRif_FramePolarity_inverted  /**< \brief Inverted polarity of the frame signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   200  } IfxRif_FramePolarity;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   201  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   202  /** \brief Defines the Full swap mode operation of FLM.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   203   * Definition in Ifx_RIF.FLM.B.FSWP
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   204   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   205  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   206  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   207      IfxRif_FullSwapMode_direct,  /**< \brief No swap of the data paths */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   208      IfxRif_FullSwapMode_swap     /**< \brief Swap of data paths of channels 0-3 and 1-2 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   209  } IfxRif_FullSwapMode;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   210  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   211  /** \brief Defines the available interrupts in RIF module.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   212   * Definition in Ifx_RIF.INTCON and Ifx_RIF.CRC
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   213   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   214  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   215  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   216      IfxRif_Interrupt_calibrationEnd,         /**< \brief Calibration End interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   217      IfxRif_Interrupt_frameWatchdogOverflow,  /**< \brief Frame Watchdog Overflow interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   218      IfxRif_Interrupt_rampEnd,                /**< \brief Ramp End interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   219      IfxRif_Interrupt_chirpEnd,               /**< \brief Chirp End interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   220      IfxRif_Interrupt_crcErrorOnLine0,        /**< \brief CRC error interrupt on Line 0 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   221      IfxRif_Interrupt_crcErrorOnLine1,        /**< \brief CRC error interrupt on Line 1 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   222      IfxRif_Interrupt_crcErrorOnLine2,        /**< \brief CRC error interrupt on Line 2 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   223      IfxRif_Interrupt_crcErrorOnLine3,        /**< \brief CRC error interrupt on Line 3 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   224      IfxRif_Interrupt_ramp1Error,             /**< \brief Ramp1 Error interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   225      IfxRif_Interrupt_chirp1Error,            /**< \brief Chirp1 Error interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   226      IfxRif_Interrupt_ramp1Start              /**< \brief Ramp1 Start interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   227  } IfxRif_Interrupt;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   228  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   229  /** \brief Defines the mode of Lvds Bias DistributorMode.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   230   * Definition in Ifx_RIF.LVDSCON1.B.PWRDN
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   231   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   232  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   233  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   234      IfxRif_LvdsBiasDistributorMode_active,      /**< \brief Active */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   235      IfxRif_LvdsBiasDistributorMode_poweredDown  /**< \brief Powered Down */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   236  } IfxRif_LvdsBiasDistributorMode;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   237  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   238  /** \brief Defines the LVDS PAD control selection.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   239   * Definition in Ifx_RIF.LVDSCON0.B.FRAME / CLK / DATA0 / DATA1 / LVDSCON1.B.DATA2 / DATA3
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   240   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   241  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   242  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   243      IfxRif_LvdsPadControl_none       = 0x00,  /**< \brief NO selection */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   244      IfxRif_LvdsPadControl_test       = 0x01,  /**< \brief Test Enable (enable Weak Driver Mode) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   245      IfxRif_LvdsPadControl_rterm      = 0x02,  /**< \brief Rterm Enable */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   246      IfxRif_LvdsPadControl_frameClock = 0x04,  /**< \brief Frame Clock LVDS Pad Enable */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   247      IfxRif_LvdsPadControl_xor        = 0x08,  /**< \brief LVDS XOR-IN tied to LO by RIF-IP */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   248      IfxRif_LvdsPadControl_spareBit   = 0x10,  /**< \brief spare bit - tied to LO by RIF-IP */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   249      IfxRif_LvdsPadControl_TGatePTest = 0x20,  /**< \brief LVDS pad enable T-Gate P Test */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   250      IfxRif_LvdsPadControl_TGateNTest = 0x40   /**< \brief LVDS pad enable T-Gate N-Test */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   251  } IfxRif_LvdsPadControl;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   252  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   253  /** \brief Defines the number of samples, used in different phases of radar operation cycle
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   254   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   255  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   256  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   257      IfxRif_NumberOfSamples_1,     /**< \brief Number of samples 1  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   258      IfxRif_NumberOfSamples_2,     /**< \brief Number of samples 2  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   259      IfxRif_NumberOfSamples_3,     /**< \brief Number of samples 3  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   260      IfxRif_NumberOfSamples_4,     /**< \brief Number of samples 4  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   261      IfxRif_NumberOfSamples_5,     /**< \brief Number of samples 5  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   262      IfxRif_NumberOfSamples_6,     /**< \brief Number of samples 6  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   263      IfxRif_NumberOfSamples_7,     /**< \brief Number of samples 7  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   264      IfxRif_NumberOfSamples_8,     /**< \brief Number of samples 8  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   265      IfxRif_NumberOfSamples_9,     /**< \brief Number of samples 9  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   266      IfxRif_NumberOfSamples_10,    /**< \brief Number of samples 10  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   267      IfxRif_NumberOfSamples_11,    /**< \brief Number of samples 11  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   268      IfxRif_NumberOfSamples_12,    /**< \brief Number of samples 12  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   269      IfxRif_NumberOfSamples_13,    /**< \brief Number of samples 13  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   270      IfxRif_NumberOfSamples_14,    /**< \brief Number of samples 14  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   271      IfxRif_NumberOfSamples_15,    /**< \brief Number of samples 15  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   272      IfxRif_NumberOfSamples_16     /**< \brief Number of samples 16  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   273  } IfxRif_NumberOfSamples;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   274  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   275  /** \brief Defines the source for the RAMP1 signal multiplexer.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   276   * Definition in Ifx_RIF.RSM1.B.R1SEL
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   277   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   278  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   279  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   280      IfxRif_Ramp1SignalInput_0,     /**< \brief input 0  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   281      IfxRif_Ramp1SignalInput_1,     /**< \brief input 1  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   282      IfxRif_Ramp1SignalInput_2,     /**< \brief input 2  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   283      IfxRif_Ramp1SignalInput_3      /**< \brief input 3  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   284  } IfxRif_Ramp1SignalInput;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   285  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   286  /** \brief Defines the polarity of the RAMP1 signal .\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   287   * Definition in Ifx_RIF.RSM1.B.R1POL
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   288   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   289  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   290  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   291      IfxRif_Ramp1SignalPolarity_lowActive,  /**< \brief Low Active */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   292      IfxRif_Ramp1SignalPolarity_highActive  /**< \brief High Active */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   293  } IfxRif_Ramp1SignalPolarity;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   294  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   295  /** \brief Defines the shift direction of the serial data, corresponding to the data bit on
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   296   * the lsb position in the delivered parallel data.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   297   * Definition in Ifx_RIF.DFU.B.MSB
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   298   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   299  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   300  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   301      IfxRif_ShiftDirection_msbFirst,  /**< \brief Shift direction MSB first */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   302      IfxRif_ShiftDirection_lsbFirst   /**< \brief Shift direction LSB first */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   303  } IfxRif_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   304  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   305  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   306   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   307  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   308  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   309      IfxRif_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   310      IfxRif_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   311      IfxRif_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   312  } IfxRif_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   313  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   314  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   315  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   316  /** \addtogroup IfxLld_Rif_Std_Deserializer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   317   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   318  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   319  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   320  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   321  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   322  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   323  /** \brief Disables the selected deserializer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   324   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   325   * \param deserializerId Deserializer number
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   326   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   327   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   328  IFX_INLINE void IfxRif_disableDeserializer(Ifx_RIF *rif, IfxRif_DeserializerId deserializerId);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   329  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   330  /** \brief Enables the calibration mode of the deserializer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   331   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   332   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   333   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   334  IFX_INLINE void IfxRif_enableCalibration(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   335  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   336  /** \brief Enables the selected deserializer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   337   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   338   * \param deserializerId Deserializer number
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   339   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   340   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   341  IFX_INLINE void IfxRif_enableDeserializer(Ifx_RIF *rif, IfxRif_DeserializerId deserializerId);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   342  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   343  /** \brief Returns the current state of the deserializer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   344   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   345   * \return Calibration state (done / on going)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   346   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   347  IFX_INLINE IfxRif_CalibrationState IfxRif_getCalibrationState(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   348  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   349  /** \brief Returns the status of the latest timing calibration sequence
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   350   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   351   * \return Calibration status (fail / success)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   352   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   353  IFX_INLINE IfxRif_CalibrationStatus IfxRif_getCalibrationStatus(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   354  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   355  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   356  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   357  /** \addtogroup IfxLld_Rif_Std_FLM
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   358   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   359  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   360  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   361  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   362  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   363  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   364  /** \brief Enables the selected FIFO
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   365   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   366   * \param fifoId FIFO number
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   367   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   368   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   369  IFX_INLINE void IfxRif_enableFifo(Ifx_RIF *rif, IfxRif_FifoId fifoId);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   370  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   371  /** \brief Sets the FLM mode of operation
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   372   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   373   * \param mode FLM mode of operation
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   374   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   375   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   376  IFX_INLINE void IfxRif_setFlmMode(Ifx_RIF *rif, IfxRif_FlmMode mode);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   377  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   378  /** \brief Sets the Full Swap Mode of FLM unit
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   379   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   380   * \param swapMode Full Swap Mod eof FLM unit
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   381   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   382   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   383  IFX_INLINE void IfxRif_setFullSwapMode(Ifx_RIF *rif, IfxRif_FullSwapMode swapMode);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   384  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   385  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   386  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   387  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   388  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   389  /** \brief Enables the number of FIFOs based on number of ADC channels used
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   390   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   391   * \param count Number of ADC channels used
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   392   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   393   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   394  IFX_EXTERN void IfxRif_enableFifos(Ifx_RIF *rif, uint8 count);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   395  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   396  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   397  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   398  /** \addtogroup IfxLld_Rif_Std_DFU
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   399   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   400  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   401  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   402  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   403  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   404  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   405  /** \brief Returns the data length of the frame signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   406   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   407   * \return Data length of the frame signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   408   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   409  IFX_INLINE IfxRif_DataLength IfxRif_getDataLength(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   410  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   411  /** \brief Sets the polarity of the clock signal on the clock input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   412   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   413   * \param polarity Polarity of the clock signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   414   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   415   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   416  IFX_INLINE void IfxRif_setClockPolarity(Ifx_RIF *rif, IfxRif_ClockPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   417  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   418  /** \brief Sets the alignment of the data delivered to the SPU
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   419   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   420   * \param alignment Alignment of the data delivered to the SPU
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   421   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   422   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   423  IFX_INLINE void IfxRif_setDataAlignment(Ifx_RIF *rif, IfxRif_DataAlignment alignment);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   424  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   425  /** \brief Sets the format of the data delivered to the SPU
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   426   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   427   * \param format format of the data delivered to the SPU
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   428   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   429   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   430  IFX_INLINE void IfxRif_setDataFormat(Ifx_RIF *rif, IfxRif_DataFormat format);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   431  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   432  /** \brief Sets the data length of the frame signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   433   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   434   * \param length Data length of the frame signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   435   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   436   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   437  IFX_INLINE void IfxRif_setDataLength(Ifx_RIF *rif, IfxRif_DataLength length);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   438  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   439  /** \brief Sets the polarity of the data signal 0 on the data input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   440   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   441   * \param polarity Polarity of the data signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   442   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   443   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   444  IFX_INLINE void IfxRif_setDataPolarity0(Ifx_RIF *rif, IfxRif_DataPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   445  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   446  /** \brief Sets the polarity of the data signal 1 on the data input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   447   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   448   * \param polarity Polarity of the data signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   449   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   450   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   451  IFX_INLINE void IfxRif_setDataPolarity1(Ifx_RIF *rif, IfxRif_DataPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   452  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   453  /** \brief Sets the polarity of the data signal 2 on the data input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   454   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   455   * \param polarity Polarity of the data signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   456   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   457   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   458  IFX_INLINE void IfxRif_setDataPolarity2(Ifx_RIF *rif, IfxRif_DataPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   459  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   460  /** \brief Sets the polarity of the data signal 3 on the data input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   461   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   462   * \param polarity Polarity of the data signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   463   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   464   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   465  IFX_INLINE void IfxRif_setDataPolarity3(Ifx_RIF *rif, IfxRif_DataPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   466  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   467  /** \brief Sets the polarity of the frame signal on the frame input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   468   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   469   * \param polarity Polarity of the frame signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   471   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   472  IFX_INLINE void IfxRif_setFramePolarity(Ifx_RIF *rif, IfxRif_FramePolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   473  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   474  /** \brief Sets the polarity of the RAMP1 signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   475   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   476   * \param polarity Polarity of the RAMP1 signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   477   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   478   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   479  IFX_INLINE void IfxRif_setRamp1SignalPolarity(Ifx_RIF *rif, IfxRif_Ramp1SignalPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   480  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   481  /** \brief Sets the the shift direction of the serial data, corresponding to the data bit on
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   482   * the lsb position in the delivered parallel data
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   483   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   484   * \param direction Shift direction
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   485   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   486   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   487  IFX_INLINE void IfxRif_setShiftDirection(Ifx_RIF *rif, IfxRif_ShiftDirection direction);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   488  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   489  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   490  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   491  /** \addtogroup IfxLld_Rif_Std_RSM
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   492   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   493  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   494  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   495  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   496  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   497  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   498  /** \brief Enables the external ADCs, the radar interface to accepts input from the external ADCs.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   499   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   500   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   501   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   502  IFX_INLINE void IfxRif_enableExternalAdc(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   503  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   504  /** \brief Enables the internal ADCs, the radar interface to accepts input from the internal ADCs.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   505   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   506   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   507   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   508  IFX_INLINE void IfxRif_enableInternalAdc(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   509  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   510  /** \brief Enables lockstep, synchronous delivery of ADC samples from two RIFs to two SPUs\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   511   * (in case two RIF instances are available and used)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   512   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   513   * \param enabled Choise (enable / disable)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   514   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   515   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   516  IFX_INLINE void IfxRif_enableLockstep(Ifx_RIF *rif, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   517  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   518  /** \brief Enables the RAMP1 signal and disables the Frame Watchdog Timer\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   519   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   520   * \param enabled Choise (enable / disable)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   521   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   522   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   523  IFX_INLINE void IfxRif_enableRamp1Signal(Ifx_RIF *rif, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   524  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   525  /** \brief Returns the current ramp number of the chirp
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   526   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   527   * \return Current ramp number of the chirp
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   528   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   529  IFX_INLINE uint16 IfxRif_getCurrentRampNumber(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   530  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   531  /** \brief Returns the current valid data sample number of the chirp
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   532   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   533   * \return Current valid data sample number of the chirp
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   534   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   535  IFX_INLINE uint16 IfxRif_getCurrentValidDataSampleNumber(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   536  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   537  /** \brief Sets the number of ramps per chirp in the range of 1 to 2048 ramps
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   538   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   539   * \param rampsNum Number of ramps
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   540   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   541   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   542  IFX_INLINE void IfxRif_setChirpLength(Ifx_RIF *rif, uint16 rampsNum);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   543  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   544  /** \brief Sets the source for the RAMP1 signal multiplexer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   545   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   546   * \param signal Source for the RAMP1 signal multiplexer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   547   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   548   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   549  IFX_INLINE void IfxRif_setRamp1SignalInput(Ifx_RIF *rif, IfxRif_Ramp1SignalInput signal);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   550  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   551  /** \brief Sets the number of valid data samples per chirp in the range of 1 to 2048 samples
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   552   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   553   * \param samplesNum Number of valid data samples
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   554   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   555   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   556  IFX_INLINE void IfxRif_setValidDataSamplesNumber(Ifx_RIF *rif, uint16 samplesNum);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   557  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   558  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   559  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   560  /** \addtogroup IfxLld_Rif_Std_Interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   561   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   562  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   563  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   564  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   565  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   566  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   567  /** \brief Clears the selected interrupt flag status
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   568   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   569   * \param interrupt Type of interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   570   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   571   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   572  IFX_INLINE void IfxRif_clearInterruptFlag(Ifx_RIF *rif, IfxRif_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   573  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   574  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   575   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   576   * \param interrupt Type of interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   577   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   578   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   579  IFX_INLINE void IfxRif_disableInterrupt(Ifx_RIF *rif, IfxRif_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   580  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   581  /** \brief Enables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   582   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   583   * \param interrupt Type of interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   584   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   585   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   586  IFX_INLINE void IfxRif_enableInterrupt(Ifx_RIF *rif, IfxRif_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   587  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   588  /** \brief Returns the selected interrupt flag status
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   589   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   590   * \param interrupt Type of interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   591   * \return Status
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   592   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   593  IFX_INLINE uint8 IfxRif_getInterruptFlagStatus(Ifx_RIF *rif, IfxRif_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   594  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   595  /** \brief Sets the selected interrupt flag status
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   596   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   597   * \param interrupt Type of interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   598   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   599   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   600  IFX_INLINE void IfxRif_setInterruptFlag(Ifx_RIF *rif, IfxRif_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   601  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   602  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   603  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   604  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   605  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   606  /** \brief Returns the SRC pointer of RIF module ERR interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   607   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   608   * \return SRC pointer of RIF module ERR interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   609   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   610  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxRif_getSrcPointerErr(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   611  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   612  /** \brief Returns the SRC pointer of RIF module INT interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   613   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   614   * \return SRC pointer of RIF module INT interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   615   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   616  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxRif_getSrcPointerInt(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   617  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   618  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   619  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   620  /** \addtogroup IfxLld_Rif_Std_Monitor
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   621   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   622  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   623  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   624  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   625  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   626  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   627  /** \brief Disables the CRC.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   628   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   630   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   631  IFX_INLINE void IfxRif_disableCrc(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   632  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   633  /** \brief Enables the CRC.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   634   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   635   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   636   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   637  IFX_INLINE void IfxRif_enableCrc(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   638  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   639  /** \brief Sets the frame watchdog threshold, (the reload value for the watchdog timer) in the range of 0-255.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   640   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   641   * \param value Threshold value
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   642   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   643   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   644  IFX_INLINE void IfxRif_setFrameWatchdogThreshold(Ifx_RIF *rif, uint16 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   645  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   646  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   647  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   648  /** \addtogroup IfxLld_Rif_Std_Module
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   649   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   650  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   651  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   652  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   653  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   654  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   655  /** \brief Returns the status of module, enabled or disabled
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   656   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   657   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   658   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   659  IFX_INLINE boolean IfxRif_isModuleEnabled(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   660  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   661  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   662   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   663   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   664   * \param rif Pointer to RIF module registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   665   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   666   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   667  IFX_INLINE boolean IfxRif_isModuleSuspended(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   668  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   669  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   670   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   671   * \param rif Pointer to RIF module registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   672   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   673   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   674   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   675  IFX_INLINE void IfxRif_setSuspendMode(Ifx_RIF *rif, IfxRif_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   676  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   677  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   678  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   679  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   680  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   681  /** \brief Disables the module (clears the disable request)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   682   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   683   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   684   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   685  IFX_EXTERN void IfxRif_disableModule(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   686  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   687  /** \brief Enables the module (clears the disable request)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   688   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   689   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   690   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   691  IFX_EXTERN void IfxRif_enableModule(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   692  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   693  /** \brief Returns the module index of the selected RIF module
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   694   * \param rif Pointer to RIF module registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   695   * \return RIF module register address
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   696   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   697  IFX_EXTERN Ifx_RIF *IfxRif_getAddress(IfxRif_Index rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   698  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   699  /** \brief Returns the module index of the selected RIF module
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   700   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   701   * \return Module index
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   702   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   703  IFX_EXTERN IfxRif_Index IfxRif_getIndex(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   704  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   705  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   706  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   707  /** \addtogroup IfxLld_Rif_Std_LVDS
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   708   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   709  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   710  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   711  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   712  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   713  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   714  /** \brief Sets the Clock LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   715   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   716   * \param value Clock LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   717   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   718   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   719  IFX_INLINE void IfxRif_setClockLvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   720  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   721  /** \brief Sets the Miscellaneous Common LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   722   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   723   * \param mode Miscellaneous Common LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   724   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   725   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   726  IFX_INLINE void IfxRif_setCommonLvdsPadControl(Ifx_RIF *rif, IfxRif_CommonLvdsPadControl mode);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   727  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   728  /** \brief Sets the DATA0 LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   729   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   730   * \param value DATA0 LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   731   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   732   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   733  IFX_INLINE void IfxRif_setData0LvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   734  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   735  /** \brief Sets the DATA1 LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   736   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   737   * \param value DATA1 LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   738   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   739   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   740  IFX_INLINE void IfxRif_setData1LvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   741  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   742  /** \brief Sets the DATA2 LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   743   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   744   * \param value DATA2 LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   745   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   746   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   747  IFX_INLINE void IfxRif_setData2LvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   748  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   749  /** \brief Sets the DATA3 LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   750   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   751   * \param value DATA3 LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   752   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   753   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   754  IFX_INLINE void IfxRif_setData3LvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   755  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   756  /** \brief Sets the Frame LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   757   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   758   * \param value Frame LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   759   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   760   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   761  IFX_INLINE void IfxRif_setFrameLvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   762  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   763  /** \brief enbales / disables the Lvds Bias Distributor 5V Mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   764   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   765   * \param enabled enable / disable choise for LVDS Bias Distributor 5V mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   766   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   767   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   768  IFX_INLINE void IfxRif_setLvdsBiasDistributor5VMode(Ifx_RIF *rif, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   769  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   770  /** \brief Sets the Lvds Bias Distributor Mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   771   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   772   * \param mode LVDS Bias Distributor Power Down mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   773   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   774   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   775  IFX_INLINE void IfxRif_setLvdsBiasDistributorPowerDownMode(Ifx_RIF *rif, IfxRif_LvdsBiasDistributorMode mode);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   776  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   777  /** \brief Sets the Termination Resistor Trimming value
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   778   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   779   * \param value Termination Resistor Trimming value
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   780   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   781   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   782  IFX_INLINE void IfxRif_setRtermTrimmingValue(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   783  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   784  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   785  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   786  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   787  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   788  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   789  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   790  /**
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   791   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   792   * \param fifoId FIFO number
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   793   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   794   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   795  IFX_EXTERN void IfxRif_disableFifo(Ifx_RIF *rif, IfxRif_FifoId fifoId);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   796  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   797  /**
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   798   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   799   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   800   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   801  IFX_EXTERN void IfxRif_disableAllFifos(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   802  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   803  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   804  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   805  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   806  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   807  IFX_INLINE void IfxRif_clearInterruptFlag(Ifx_RIF *rif, IfxRif_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   808  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   809      uint32 shift    = (16 + interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   810      uint32 setValue = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   811      rif->FLAGSCL.U = rif->FLAGSCL.U | (setValue);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   812  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   813  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   814  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   815  IFX_INLINE void IfxRif_disableCrc(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   816  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   817      rif->FLM.B.CRCEN = 0U;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   818  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   819  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   820  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   821  IFX_INLINE void IfxRif_disableDeserializer(Ifx_RIF *rif, IfxRif_DeserializerId deserializerId)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   822  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   823      uint32 setValue = 1U << (deserializerId + 16);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   824      rif->IPI.U = (rif->IPI.U & (~setValue));
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   825  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   826  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   827  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   828  IFX_INLINE void IfxRif_disableInterrupt(Ifx_RIF *rif, IfxRif_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   829  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   830      uint32 setValue = (1U << interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   831      rif->INTCON.U = rif->INTCON.U & (~setValue);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   832  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   833  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   834  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   835  IFX_INLINE void IfxRif_enableCalibration(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   836  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   837      rif->ESI.B.CALEN = 1U;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   838  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   839  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   840  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   841  IFX_INLINE void IfxRif_enableCrc(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   842  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   843      rif->FLM.B.CRCEN = 1U;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   844  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   845  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   846  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   847  IFX_INLINE void IfxRif_enableDeserializer(Ifx_RIF *rif, IfxRif_DeserializerId deserializerId)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   848  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   849      uint32 setValue = 1U << (deserializerId + 16);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   850      rif->IPI.U = rif->IPI.U | setValue;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   851  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   852  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   853  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   854  IFX_INLINE void IfxRif_enableExternalAdc(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   855  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   856      rif->RSM0.B.INTADC = 0U;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   857  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   858  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   859  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   860  IFX_INLINE void IfxRif_enableFifo(Ifx_RIF *rif, IfxRif_FifoId fifoId)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   861  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   862      uint32 setValue = 1U << fifoId;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   863      rif->DMI.U = rif->DMI.U | setValue;
	ld.w	d15,[a15]28
.L143:
	or	d15,#1
	st.w	[a15]28,d15
.L98:
	ld.w	d15,[a15]28
.L166:
	or	d15,#2
	st.w	[a15]28,d15
.L99:
	ld.w	d15,[a15]28
.L167:
	or	d15,#4
	st.w	[a15]28,d15
.L100:
	ld.w	d15,[a15]28
.L168:
	or	d15,#8
.L7:
.L8:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     2   * \file IfxRif.h
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     3   * \brief RIF  basic functionality
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     4   * \ingroup IfxLld_Rif
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     5   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     8   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     9   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    11   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    16   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    18   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    25   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    32   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    40   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    41   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    42   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    43   * \defgroup IfxLld_Rif_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    44   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    45   * \defgroup IfxLld_Rif_Std_Deserializer Deserializer Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    46   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    47   * \defgroup IfxLld_Rif_Std_FLM Fifo and Line Management Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    48   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    49   * \defgroup IfxLld_Rif_Std_DFU Data Formating Unit Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    50   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    51   * \defgroup IfxLld_Rif_Std_RSM Radar State Machine Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    52   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    53   * \defgroup IfxLld_Rif_Std_Interrupt Interrupt Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    54   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    55   * \defgroup IfxLld_Rif_Std_Monitor Monitoring Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    56   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    57   * \defgroup IfxLld_Rif_Std_Module Module Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    58   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    59   * \defgroup IfxLld_Rif_Std_LVDS LDVS Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    60   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    61   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    62  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    63  #ifndef IFXRIF_H
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    64  #define IFXRIF_H 1
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    65  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    66  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    67  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    68  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    69  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    70  #include "_Impl/IfxRif_cfg.h"
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    71  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    72  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    73  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    74  #include "IfxRif_reg.h"
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    75  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    76  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    77  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    78  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    79  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    80  /** \addtogroup IfxLld_Rif_Std_Enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    81   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    82  /** \brief Defines the Type of ADCs used for radar cycle internal /external
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    83   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    84  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    85  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    86      IfxRif_Adc_external,  /**< \brief External ADCs (deserializer enabled) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    87      IfxRif_Adc_internal   /**< \brief Internal ADCs (deserializer disabled) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    88  } IfxRif_Adc;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    89  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    90  /** \brief Defines the current state of the deserializer\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    91   * Definition in Ifx_RIF.ESI.B.CALBSY
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    92   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    93  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    94  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    95      IfxRif_CalibrationState_done,  /**< \brief Calibration is finished (no calibration ongoing) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    96      IfxRif_CalibrationState_busy   /**< \brief Calibration is ongoing */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    97  } IfxRif_CalibrationState;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    98  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    99  /** \brief Defines the status of the latest timing calibration sequence.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   100   * Definition in Ifx_RIF.ESI.B.CALSTAT
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   101   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   102  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   103  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   104      IfxRif_CalibrationStatus_fail,    /**< \brief Calibration is failed (signal paths uncalibrated) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   105      IfxRif_CalibrationStatus_success  /**< \brief Calibration is successful */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   106  } IfxRif_CalibrationStatus;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   107  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   108  /** \brief Defines the polarity of the clock signal on the clock input pins.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   109   * Definition in Ifx_RIF.ESI.B.CP
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   110   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   111  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   112  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   113      IfxRif_ClockPolarity_default,  /**< \brief Default polarity of the clock signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   114      IfxRif_ClockPolarity_inverted  /**< \brief Inverted polarity of the clock signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   115  } IfxRif_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   116  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   117  /** \brief Defines the Common control selection for all LVDS Pads .\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   118   * Definition in Ifx_RIF.LVDSCON1.B.MISC
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   119   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   120  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   121  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   122      IfxRif_CommonLvdsPadControl_5vMode,       /**< \brief enable 5V Mode for all LVDS pads */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   123      IfxRif_CommonLvdsPadControl_lowSpeedMode  /**< \brief enable low speed mode for all LVDS pads */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   124  } IfxRif_CommonLvdsPadControl;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   125  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   126  /** \brief Defines the alignment of the data delivered to the SPU.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   127   * Definition in Ifx_RIF.DFU.B.DA
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   128   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   129  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   130  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   131      IfxRif_DataAlignment_right,  /**< \brief Data alignment right (integer) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   132      IfxRif_DataAlignment_left    /**< \brief Data alignment left (fractional) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   133  } IfxRif_DataAlignment;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   134  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   135  /** \brief Defines the format of the data delivered to the SPU.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   136   * Definition in Ifx_RIF.DFU.B.DF
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   137   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   138  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   139  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   140      IfxRif_DataFormat_unsigned,  /**< \brief Data format unsigned */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   141      IfxRif_DataFormat_signed     /**< \brief Data format signed */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   142  } IfxRif_DataFormat;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   143  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   144  /** \brief Defines the data length of the frame signal.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   145   * Definition in Ifx_RIF.IPI.B.DL
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   146   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   147  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   148  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   149      IfxRif_DataLength_10bit,     /**< \brief Data length 10bit  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   150      IfxRif_DataLength_12bit,     /**< \brief Data length 12bit  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   151      IfxRif_DataLength_14bit,     /**< \brief Data length 14bit  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   152      IfxRif_DataLength_16bit      /**< \brief Data length 16bit  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   153  } IfxRif_DataLength;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   154  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   155  /** \brief Defines the polarity of the data signals on the data input pins.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   156   * Definition in Ifx_RIF.ESI.B.DP
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   157   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   158  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   159  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   160      IfxRif_DataPolarity_default,  /**< \brief Default polarity of the data signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   161      IfxRif_DataPolarity_inverted  /**< \brief Inverted polarity of the data signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   162  } IfxRif_DataPolarity;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   163  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   164  /** \brief Defines the deserializer number (0 to 3).\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   165   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   166  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   167  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   168      IfxRif_DeserializerId_0,     /**< \brief Deserializer 0  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   169      IfxRif_DeserializerId_1,     /**< \brief Deserializer 1  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   170      IfxRif_DeserializerId_2,     /**< \brief Deserializer 2  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   171      IfxRif_DeserializerId_3      /**< \brief Deserializer 3  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   172  } IfxRif_DeserializerId;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   173  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   174  /** \brief Defines the FIFO number (0 to 3).\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   175   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   176  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   177  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   178      IfxRif_FifoId_0,     /**< \brief Fifo 0  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   179      IfxRif_FifoId_1,     /**< \brief Fifo 1  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   180      IfxRif_FifoId_2,     /**< \brief Fifo 2  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   181      IfxRif_FifoId_3      /**< \brief Fifo 3  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   182  } IfxRif_FifoId;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   183  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   184  /** \brief Defines the FLM mode of operation.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   185   * Definition in Ifx_RIF.FLM.B.MODE
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   186   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   187  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   188  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   189      IfxRif_FlmMode_direct,  /**< \brief No swap of the data paths */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   190      IfxRif_FlmMode_swap     /**< \brief Swap of data paths of channels 0-1 and 2-3 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   191  } IfxRif_FlmMode;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   192  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   193  /** \brief Defines the polarity of the frame signal on the frame input pins.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   194   * Definition in Ifx_RIF.ESI.B.FP
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   195   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   196  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   197  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   198      IfxRif_FramePolarity_default,  /**< \brief Default polarity of the frame signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   199      IfxRif_FramePolarity_inverted  /**< \brief Inverted polarity of the frame signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   200  } IfxRif_FramePolarity;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   201  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   202  /** \brief Defines the Full swap mode operation of FLM.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   203   * Definition in Ifx_RIF.FLM.B.FSWP
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   204   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   205  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   206  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   207      IfxRif_FullSwapMode_direct,  /**< \brief No swap of the data paths */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   208      IfxRif_FullSwapMode_swap     /**< \brief Swap of data paths of channels 0-3 and 1-2 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   209  } IfxRif_FullSwapMode;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   210  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   211  /** \brief Defines the available interrupts in RIF module.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   212   * Definition in Ifx_RIF.INTCON and Ifx_RIF.CRC
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   213   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   214  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   215  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   216      IfxRif_Interrupt_calibrationEnd,         /**< \brief Calibration End interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   217      IfxRif_Interrupt_frameWatchdogOverflow,  /**< \brief Frame Watchdog Overflow interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   218      IfxRif_Interrupt_rampEnd,                /**< \brief Ramp End interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   219      IfxRif_Interrupt_chirpEnd,               /**< \brief Chirp End interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   220      IfxRif_Interrupt_crcErrorOnLine0,        /**< \brief CRC error interrupt on Line 0 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   221      IfxRif_Interrupt_crcErrorOnLine1,        /**< \brief CRC error interrupt on Line 1 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   222      IfxRif_Interrupt_crcErrorOnLine2,        /**< \brief CRC error interrupt on Line 2 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   223      IfxRif_Interrupt_crcErrorOnLine3,        /**< \brief CRC error interrupt on Line 3 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   224      IfxRif_Interrupt_ramp1Error,             /**< \brief Ramp1 Error interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   225      IfxRif_Interrupt_chirp1Error,            /**< \brief Chirp1 Error interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   226      IfxRif_Interrupt_ramp1Start              /**< \brief Ramp1 Start interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   227  } IfxRif_Interrupt;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   228  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   229  /** \brief Defines the mode of Lvds Bias DistributorMode.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   230   * Definition in Ifx_RIF.LVDSCON1.B.PWRDN
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   231   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   232  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   233  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   234      IfxRif_LvdsBiasDistributorMode_active,      /**< \brief Active */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   235      IfxRif_LvdsBiasDistributorMode_poweredDown  /**< \brief Powered Down */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   236  } IfxRif_LvdsBiasDistributorMode;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   237  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   238  /** \brief Defines the LVDS PAD control selection.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   239   * Definition in Ifx_RIF.LVDSCON0.B.FRAME / CLK / DATA0 / DATA1 / LVDSCON1.B.DATA2 / DATA3
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   240   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   241  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   242  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   243      IfxRif_LvdsPadControl_none       = 0x00,  /**< \brief NO selection */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   244      IfxRif_LvdsPadControl_test       = 0x01,  /**< \brief Test Enable (enable Weak Driver Mode) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   245      IfxRif_LvdsPadControl_rterm      = 0x02,  /**< \brief Rterm Enable */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   246      IfxRif_LvdsPadControl_frameClock = 0x04,  /**< \brief Frame Clock LVDS Pad Enable */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   247      IfxRif_LvdsPadControl_xor        = 0x08,  /**< \brief LVDS XOR-IN tied to LO by RIF-IP */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   248      IfxRif_LvdsPadControl_spareBit   = 0x10,  /**< \brief spare bit - tied to LO by RIF-IP */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   249      IfxRif_LvdsPadControl_TGatePTest = 0x20,  /**< \brief LVDS pad enable T-Gate P Test */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   250      IfxRif_LvdsPadControl_TGateNTest = 0x40   /**< \brief LVDS pad enable T-Gate N-Test */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   251  } IfxRif_LvdsPadControl;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   252  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   253  /** \brief Defines the number of samples, used in different phases of radar operation cycle
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   254   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   255  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   256  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   257      IfxRif_NumberOfSamples_1,     /**< \brief Number of samples 1  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   258      IfxRif_NumberOfSamples_2,     /**< \brief Number of samples 2  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   259      IfxRif_NumberOfSamples_3,     /**< \brief Number of samples 3  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   260      IfxRif_NumberOfSamples_4,     /**< \brief Number of samples 4  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   261      IfxRif_NumberOfSamples_5,     /**< \brief Number of samples 5  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   262      IfxRif_NumberOfSamples_6,     /**< \brief Number of samples 6  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   263      IfxRif_NumberOfSamples_7,     /**< \brief Number of samples 7  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   264      IfxRif_NumberOfSamples_8,     /**< \brief Number of samples 8  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   265      IfxRif_NumberOfSamples_9,     /**< \brief Number of samples 9  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   266      IfxRif_NumberOfSamples_10,    /**< \brief Number of samples 10  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   267      IfxRif_NumberOfSamples_11,    /**< \brief Number of samples 11  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   268      IfxRif_NumberOfSamples_12,    /**< \brief Number of samples 12  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   269      IfxRif_NumberOfSamples_13,    /**< \brief Number of samples 13  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   270      IfxRif_NumberOfSamples_14,    /**< \brief Number of samples 14  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   271      IfxRif_NumberOfSamples_15,    /**< \brief Number of samples 15  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   272      IfxRif_NumberOfSamples_16     /**< \brief Number of samples 16  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   273  } IfxRif_NumberOfSamples;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   274  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   275  /** \brief Defines the source for the RAMP1 signal multiplexer.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   276   * Definition in Ifx_RIF.RSM1.B.R1SEL
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   277   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   278  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   279  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   280      IfxRif_Ramp1SignalInput_0,     /**< \brief input 0  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   281      IfxRif_Ramp1SignalInput_1,     /**< \brief input 1  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   282      IfxRif_Ramp1SignalInput_2,     /**< \brief input 2  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   283      IfxRif_Ramp1SignalInput_3      /**< \brief input 3  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   284  } IfxRif_Ramp1SignalInput;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   285  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   286  /** \brief Defines the polarity of the RAMP1 signal .\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   287   * Definition in Ifx_RIF.RSM1.B.R1POL
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   288   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   289  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   290  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   291      IfxRif_Ramp1SignalPolarity_lowActive,  /**< \brief Low Active */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   292      IfxRif_Ramp1SignalPolarity_highActive  /**< \brief High Active */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   293  } IfxRif_Ramp1SignalPolarity;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   294  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   295  /** \brief Defines the shift direction of the serial data, corresponding to the data bit on
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   296   * the lsb position in the delivered parallel data.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   297   * Definition in Ifx_RIF.DFU.B.MSB
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   298   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   299  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   300  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   301      IfxRif_ShiftDirection_msbFirst,  /**< \brief Shift direction MSB first */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   302      IfxRif_ShiftDirection_lsbFirst   /**< \brief Shift direction LSB first */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   303  } IfxRif_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   304  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   305  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   306   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   307  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   308  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   309      IfxRif_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   310      IfxRif_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   311      IfxRif_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   312  } IfxRif_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   313  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   314  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   315  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   316  /** \addtogroup IfxLld_Rif_Std_Deserializer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   317   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   318  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   319  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   320  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   321  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   322  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   323  /** \brief Disables the selected deserializer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   324   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   325   * \param deserializerId Deserializer number
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   326   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   327   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   328  IFX_INLINE void IfxRif_disableDeserializer(Ifx_RIF *rif, IfxRif_DeserializerId deserializerId);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   329  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   330  /** \brief Enables the calibration mode of the deserializer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   331   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   332   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   333   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   334  IFX_INLINE void IfxRif_enableCalibration(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   335  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   336  /** \brief Enables the selected deserializer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   337   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   338   * \param deserializerId Deserializer number
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   339   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   340   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   341  IFX_INLINE void IfxRif_enableDeserializer(Ifx_RIF *rif, IfxRif_DeserializerId deserializerId);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   342  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   343  /** \brief Returns the current state of the deserializer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   344   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   345   * \return Calibration state (done / on going)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   346   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   347  IFX_INLINE IfxRif_CalibrationState IfxRif_getCalibrationState(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   348  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   349  /** \brief Returns the status of the latest timing calibration sequence
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   350   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   351   * \return Calibration status (fail / success)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   352   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   353  IFX_INLINE IfxRif_CalibrationStatus IfxRif_getCalibrationStatus(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   354  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   355  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   356  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   357  /** \addtogroup IfxLld_Rif_Std_FLM
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   358   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   359  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   360  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   361  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   362  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   363  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   364  /** \brief Enables the selected FIFO
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   365   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   366   * \param fifoId FIFO number
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   367   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   368   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   369  IFX_INLINE void IfxRif_enableFifo(Ifx_RIF *rif, IfxRif_FifoId fifoId);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   370  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   371  /** \brief Sets the FLM mode of operation
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   372   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   373   * \param mode FLM mode of operation
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   374   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   375   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   376  IFX_INLINE void IfxRif_setFlmMode(Ifx_RIF *rif, IfxRif_FlmMode mode);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   377  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   378  /** \brief Sets the Full Swap Mode of FLM unit
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   379   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   380   * \param swapMode Full Swap Mod eof FLM unit
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   381   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   382   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   383  IFX_INLINE void IfxRif_setFullSwapMode(Ifx_RIF *rif, IfxRif_FullSwapMode swapMode);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   384  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   385  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   386  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   387  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   388  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   389  /** \brief Enables the number of FIFOs based on number of ADC channels used
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   390   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   391   * \param count Number of ADC channels used
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   392   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   393   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   394  IFX_EXTERN void IfxRif_enableFifos(Ifx_RIF *rif, uint8 count);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   395  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   396  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   397  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   398  /** \addtogroup IfxLld_Rif_Std_DFU
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   399   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   400  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   401  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   402  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   403  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   404  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   405  /** \brief Returns the data length of the frame signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   406   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   407   * \return Data length of the frame signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   408   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   409  IFX_INLINE IfxRif_DataLength IfxRif_getDataLength(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   410  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   411  /** \brief Sets the polarity of the clock signal on the clock input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   412   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   413   * \param polarity Polarity of the clock signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   414   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   415   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   416  IFX_INLINE void IfxRif_setClockPolarity(Ifx_RIF *rif, IfxRif_ClockPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   417  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   418  /** \brief Sets the alignment of the data delivered to the SPU
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   419   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   420   * \param alignment Alignment of the data delivered to the SPU
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   421   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   422   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   423  IFX_INLINE void IfxRif_setDataAlignment(Ifx_RIF *rif, IfxRif_DataAlignment alignment);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   424  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   425  /** \brief Sets the format of the data delivered to the SPU
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   426   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   427   * \param format format of the data delivered to the SPU
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   428   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   429   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   430  IFX_INLINE void IfxRif_setDataFormat(Ifx_RIF *rif, IfxRif_DataFormat format);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   431  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   432  /** \brief Sets the data length of the frame signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   433   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   434   * \param length Data length of the frame signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   435   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   436   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   437  IFX_INLINE void IfxRif_setDataLength(Ifx_RIF *rif, IfxRif_DataLength length);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   438  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   439  /** \brief Sets the polarity of the data signal 0 on the data input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   440   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   441   * \param polarity Polarity of the data signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   442   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   443   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   444  IFX_INLINE void IfxRif_setDataPolarity0(Ifx_RIF *rif, IfxRif_DataPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   445  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   446  /** \brief Sets the polarity of the data signal 1 on the data input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   447   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   448   * \param polarity Polarity of the data signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   449   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   450   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   451  IFX_INLINE void IfxRif_setDataPolarity1(Ifx_RIF *rif, IfxRif_DataPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   452  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   453  /** \brief Sets the polarity of the data signal 2 on the data input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   454   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   455   * \param polarity Polarity of the data signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   456   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   457   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   458  IFX_INLINE void IfxRif_setDataPolarity2(Ifx_RIF *rif, IfxRif_DataPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   459  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   460  /** \brief Sets the polarity of the data signal 3 on the data input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   461   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   462   * \param polarity Polarity of the data signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   463   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   464   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   465  IFX_INLINE void IfxRif_setDataPolarity3(Ifx_RIF *rif, IfxRif_DataPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   466  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   467  /** \brief Sets the polarity of the frame signal on the frame input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   468   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   469   * \param polarity Polarity of the frame signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   471   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   472  IFX_INLINE void IfxRif_setFramePolarity(Ifx_RIF *rif, IfxRif_FramePolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   473  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   474  /** \brief Sets the polarity of the RAMP1 signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   475   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   476   * \param polarity Polarity of the RAMP1 signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   477   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   478   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   479  IFX_INLINE void IfxRif_setRamp1SignalPolarity(Ifx_RIF *rif, IfxRif_Ramp1SignalPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   480  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   481  /** \brief Sets the the shift direction of the serial data, corresponding to the data bit on
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   482   * the lsb position in the delivered parallel data
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   483   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   484   * \param direction Shift direction
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   485   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   486   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   487  IFX_INLINE void IfxRif_setShiftDirection(Ifx_RIF *rif, IfxRif_ShiftDirection direction);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   488  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   489  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   490  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   491  /** \addtogroup IfxLld_Rif_Std_RSM
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   492   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   493  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   494  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   495  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   496  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   497  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   498  /** \brief Enables the external ADCs, the radar interface to accepts input from the external ADCs.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   499   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   500   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   501   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   502  IFX_INLINE void IfxRif_enableExternalAdc(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   503  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   504  /** \brief Enables the internal ADCs, the radar interface to accepts input from the internal ADCs.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   505   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   506   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   507   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   508  IFX_INLINE void IfxRif_enableInternalAdc(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   509  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   510  /** \brief Enables lockstep, synchronous delivery of ADC samples from two RIFs to two SPUs\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   511   * (in case two RIF instances are available and used)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   512   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   513   * \param enabled Choise (enable / disable)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   514   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   515   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   516  IFX_INLINE void IfxRif_enableLockstep(Ifx_RIF *rif, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   517  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   518  /** \brief Enables the RAMP1 signal and disables the Frame Watchdog Timer\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   519   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   520   * \param enabled Choise (enable / disable)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   521   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   522   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   523  IFX_INLINE void IfxRif_enableRamp1Signal(Ifx_RIF *rif, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   524  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   525  /** \brief Returns the current ramp number of the chirp
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   526   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   527   * \return Current ramp number of the chirp
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   528   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   529  IFX_INLINE uint16 IfxRif_getCurrentRampNumber(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   530  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   531  /** \brief Returns the current valid data sample number of the chirp
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   532   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   533   * \return Current valid data sample number of the chirp
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   534   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   535  IFX_INLINE uint16 IfxRif_getCurrentValidDataSampleNumber(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   536  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   537  /** \brief Sets the number of ramps per chirp in the range of 1 to 2048 ramps
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   538   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   539   * \param rampsNum Number of ramps
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   540   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   541   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   542  IFX_INLINE void IfxRif_setChirpLength(Ifx_RIF *rif, uint16 rampsNum);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   543  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   544  /** \brief Sets the source for the RAMP1 signal multiplexer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   545   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   546   * \param signal Source for the RAMP1 signal multiplexer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   547   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   548   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   549  IFX_INLINE void IfxRif_setRamp1SignalInput(Ifx_RIF *rif, IfxRif_Ramp1SignalInput signal);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   550  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   551  /** \brief Sets the number of valid data samples per chirp in the range of 1 to 2048 samples
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   552   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   553   * \param samplesNum Number of valid data samples
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   554   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   555   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   556  IFX_INLINE void IfxRif_setValidDataSamplesNumber(Ifx_RIF *rif, uint16 samplesNum);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   557  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   558  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   559  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   560  /** \addtogroup IfxLld_Rif_Std_Interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   561   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   562  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   563  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   564  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   565  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   566  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   567  /** \brief Clears the selected interrupt flag status
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   568   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   569   * \param interrupt Type of interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   570   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   571   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   572  IFX_INLINE void IfxRif_clearInterruptFlag(Ifx_RIF *rif, IfxRif_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   573  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   574  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   575   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   576   * \param interrupt Type of interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   577   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   578   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   579  IFX_INLINE void IfxRif_disableInterrupt(Ifx_RIF *rif, IfxRif_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   580  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   581  /** \brief Enables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   582   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   583   * \param interrupt Type of interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   584   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   585   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   586  IFX_INLINE void IfxRif_enableInterrupt(Ifx_RIF *rif, IfxRif_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   587  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   588  /** \brief Returns the selected interrupt flag status
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   589   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   590   * \param interrupt Type of interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   591   * \return Status
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   592   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   593  IFX_INLINE uint8 IfxRif_getInterruptFlagStatus(Ifx_RIF *rif, IfxRif_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   594  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   595  /** \brief Sets the selected interrupt flag status
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   596   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   597   * \param interrupt Type of interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   598   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   599   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   600  IFX_INLINE void IfxRif_setInterruptFlag(Ifx_RIF *rif, IfxRif_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   601  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   602  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   603  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   604  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   605  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   606  /** \brief Returns the SRC pointer of RIF module ERR interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   607   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   608   * \return SRC pointer of RIF module ERR interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   609   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   610  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxRif_getSrcPointerErr(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   611  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   612  /** \brief Returns the SRC pointer of RIF module INT interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   613   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   614   * \return SRC pointer of RIF module INT interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   615   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   616  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxRif_getSrcPointerInt(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   617  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   618  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   619  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   620  /** \addtogroup IfxLld_Rif_Std_Monitor
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   621   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   622  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   623  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   624  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   625  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   626  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   627  /** \brief Disables the CRC.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   628   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   630   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   631  IFX_INLINE void IfxRif_disableCrc(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   632  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   633  /** \brief Enables the CRC.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   634   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   635   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   636   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   637  IFX_INLINE void IfxRif_enableCrc(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   638  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   639  /** \brief Sets the frame watchdog threshold, (the reload value for the watchdog timer) in the range of 0-255.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   640   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   641   * \param value Threshold value
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   642   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   643   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   644  IFX_INLINE void IfxRif_setFrameWatchdogThreshold(Ifx_RIF *rif, uint16 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   645  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   646  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   647  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   648  /** \addtogroup IfxLld_Rif_Std_Module
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   649   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   650  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   651  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   652  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   653  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   654  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   655  /** \brief Returns the status of module, enabled or disabled
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   656   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   657   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   658   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   659  IFX_INLINE boolean IfxRif_isModuleEnabled(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   660  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   661  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   662   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   663   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   664   * \param rif Pointer to RIF module registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   665   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   666   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   667  IFX_INLINE boolean IfxRif_isModuleSuspended(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   668  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   669  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   670   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   671   * \param rif Pointer to RIF module registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   672   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   673   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   674   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   675  IFX_INLINE void IfxRif_setSuspendMode(Ifx_RIF *rif, IfxRif_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   676  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   677  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   678  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   679  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   680  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   681  /** \brief Disables the module (clears the disable request)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   682   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   683   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   684   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   685  IFX_EXTERN void IfxRif_disableModule(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   686  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   687  /** \brief Enables the module (clears the disable request)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   688   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   689   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   690   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   691  IFX_EXTERN void IfxRif_enableModule(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   692  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   693  /** \brief Returns the module index of the selected RIF module
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   694   * \param rif Pointer to RIF module registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   695   * \return RIF module register address
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   696   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   697  IFX_EXTERN Ifx_RIF *IfxRif_getAddress(IfxRif_Index rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   698  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   699  /** \brief Returns the module index of the selected RIF module
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   700   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   701   * \return Module index
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   702   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   703  IFX_EXTERN IfxRif_Index IfxRif_getIndex(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   704  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   705  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   706  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   707  /** \addtogroup IfxLld_Rif_Std_LVDS
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   708   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   709  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   710  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   711  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   712  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   713  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   714  /** \brief Sets the Clock LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   715   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   716   * \param value Clock LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   717   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   718   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   719  IFX_INLINE void IfxRif_setClockLvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   720  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   721  /** \brief Sets the Miscellaneous Common LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   722   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   723   * \param mode Miscellaneous Common LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   724   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   725   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   726  IFX_INLINE void IfxRif_setCommonLvdsPadControl(Ifx_RIF *rif, IfxRif_CommonLvdsPadControl mode);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   727  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   728  /** \brief Sets the DATA0 LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   729   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   730   * \param value DATA0 LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   731   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   732   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   733  IFX_INLINE void IfxRif_setData0LvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   734  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   735  /** \brief Sets the DATA1 LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   736   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   737   * \param value DATA1 LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   738   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   739   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   740  IFX_INLINE void IfxRif_setData1LvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   741  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   742  /** \brief Sets the DATA2 LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   743   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   744   * \param value DATA2 LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   745   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   746   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   747  IFX_INLINE void IfxRif_setData2LvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   748  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   749  /** \brief Sets the DATA3 LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   750   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   751   * \param value DATA3 LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   752   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   753   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   754  IFX_INLINE void IfxRif_setData3LvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   755  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   756  /** \brief Sets the Frame LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   757   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   758   * \param value Frame LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   759   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   760   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   761  IFX_INLINE void IfxRif_setFrameLvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   762  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   763  /** \brief enbales / disables the Lvds Bias Distributor 5V Mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   764   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   765   * \param enabled enable / disable choise for LVDS Bias Distributor 5V mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   766   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   767   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   768  IFX_INLINE void IfxRif_setLvdsBiasDistributor5VMode(Ifx_RIF *rif, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   769  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   770  /** \brief Sets the Lvds Bias Distributor Mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   771   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   772   * \param mode LVDS Bias Distributor Power Down mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   773   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   774   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   775  IFX_INLINE void IfxRif_setLvdsBiasDistributorPowerDownMode(Ifx_RIF *rif, IfxRif_LvdsBiasDistributorMode mode);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   776  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   777  /** \brief Sets the Termination Resistor Trimming value
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   778   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   779   * \param value Termination Resistor Trimming value
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   780   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   781   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   782  IFX_INLINE void IfxRif_setRtermTrimmingValue(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   783  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   784  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   785  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   786  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   787  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   788  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   789  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   790  /**
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   791   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   792   * \param fifoId FIFO number
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   793   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   794   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   795  IFX_EXTERN void IfxRif_disableFifo(Ifx_RIF *rif, IfxRif_FifoId fifoId);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   796  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   797  /**
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   798   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   799   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   800   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   801  IFX_EXTERN void IfxRif_disableAllFifos(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   802  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   803  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   804  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   805  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   806  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   807  IFX_INLINE void IfxRif_clearInterruptFlag(Ifx_RIF *rif, IfxRif_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   808  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   809      uint32 shift    = (16 + interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   810      uint32 setValue = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   811      rif->FLAGSCL.U = rif->FLAGSCL.U | (setValue);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   812  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   813  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   814  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   815  IFX_INLINE void IfxRif_disableCrc(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   816  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   817      rif->FLM.B.CRCEN = 0U;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   818  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   819  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   820  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   821  IFX_INLINE void IfxRif_disableDeserializer(Ifx_RIF *rif, IfxRif_DeserializerId deserializerId)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   822  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   823      uint32 setValue = 1U << (deserializerId + 16);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   824      rif->IPI.U = (rif->IPI.U & (~setValue));
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   825  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   826  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   827  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   828  IFX_INLINE void IfxRif_disableInterrupt(Ifx_RIF *rif, IfxRif_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   829  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   830      uint32 setValue = (1U << interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   831      rif->INTCON.U = rif->INTCON.U & (~setValue);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   832  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   833  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   834  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   835  IFX_INLINE void IfxRif_enableCalibration(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   836  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   837      rif->ESI.B.CALEN = 1U;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   838  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   839  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   840  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   841  IFX_INLINE void IfxRif_enableCrc(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   842  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   843      rif->FLM.B.CRCEN = 1U;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   844  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   845  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   846  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   847  IFX_INLINE void IfxRif_enableDeserializer(Ifx_RIF *rif, IfxRif_DeserializerId deserializerId)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   848  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   849      uint32 setValue = 1U << (deserializerId + 16);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   850      rif->IPI.U = rif->IPI.U | setValue;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   851  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   852  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   853  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   854  IFX_INLINE void IfxRif_enableExternalAdc(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   855  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   856      rif->RSM0.B.INTADC = 0U;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   857  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   858  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   859  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   860  IFX_INLINE void IfxRif_enableFifo(Ifx_RIF *rif, IfxRif_FifoId fifoId)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   861  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   862      uint32 setValue = 1U << fifoId;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   863      rif->DMI.U = rif->DMI.U | setValue;
	st.w	[a15]28,d15
.L101:
	ret
.L86:
	
__IfxRif_enableFifos_function_end:
	.size	IfxRif_enableFifos,__IfxRif_enableFifos_function_end-IfxRif_enableFifos
.L45:
	; End of function
	
	.sdecl	'.text.IfxRif.IfxRif_enableModule',code,cluster('IfxRif_enableModule')
	.sect	'.text.IfxRif.IfxRif_enableModule'
	.align	2
	
	.global	IfxRif_enableModule

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    88  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    89  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    90  void IfxRif_enableModule(Ifx_RIF *rif)
; Function IfxRif_enableModule
.L24:
IfxRif_enableModule:	.type	func
	mov.aa	a15,a4
.L145:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    91  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    92      uint16 password = IfxScuWdt_getCpuWatchdogPassword();
	call	IfxScuWdt_getCpuWatchdogPassword
.L144:
	mov	d15,d2
.L147:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    93      IfxScuWdt_clearCpuEndinit(password);
	mov	d4,d15
	call	IfxScuWdt_clearCpuEndinit
.L146:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    94      rif->CLC.B.DISR = 0U;
	ld.bu	d0,[a15]
.L191:
	insert	d0,d0,#0,#0,#1
	st.b	[a15],d0
.L192:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    95      IfxScuWdt_setCpuEndinit(password);
	mov	d4,d15
	call	IfxScuWdt_setCpuEndinit

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    96  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    97      /* Wait until module is enabled */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    98      while (IfxRif_isModuleEnabled(rif) == FALSE)
.L9:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     1  /**
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     2   * \file IfxRif.h
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     3   * \brief RIF  basic functionality
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     4   * \ingroup IfxLld_Rif
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     5   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     6   * \version iLLD_1_0_1_12_0
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     7   * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     8   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	     9   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    10   *                                 IMPORTANT NOTICE
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    11   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    12   * Use of this file is subject to the terms of use agreed between (i) you or
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    13   * the company in which ordinary course of business you are acting and (ii)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    14   * Infineon Technologies AG or its licensees. If and as long as no such terms
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    15   * of use are agreed, use of this file is subject to following:
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    16   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    17   * Boost Software License - Version 1.0 - August 17th, 2003
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    18   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    19   * Permission is hereby granted, free of charge, to any person or organization
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    20   * obtaining a copy of the software and accompanying documentation covered by
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    21   * this license (the "Software") to use, reproduce, display, distribute,
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    22   * execute, and transmit the Software, and to prepare derivative works of the
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    23   * Software, and to permit third-parties to whom the Software is furnished to
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    24   * do so, all subject to the following:
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    25   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    26   * The copyright notices in the Software and this entire statement, including
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    27   * the above license grant, this restriction and the following disclaimer, must
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    28   * be included in all copies of the Software, in whole or in part, and all
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    29   * derivative works of the Software, unless such copies or derivative works are
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    30   * solely in the form of machine-executable object code generated by a source
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    31   * language processor.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    32   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    33   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    34   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    35   * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    36   * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    37   * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    38   * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    39   * DEALINGS IN THE SOFTWARE.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    40   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    41   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    42   *
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    43   * \defgroup IfxLld_Rif_Std_Enum Enumerations
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    44   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    45   * \defgroup IfxLld_Rif_Std_Deserializer Deserializer Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    46   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    47   * \defgroup IfxLld_Rif_Std_FLM Fifo and Line Management Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    48   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    49   * \defgroup IfxLld_Rif_Std_DFU Data Formating Unit Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    50   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    51   * \defgroup IfxLld_Rif_Std_RSM Radar State Machine Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    52   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    53   * \defgroup IfxLld_Rif_Std_Interrupt Interrupt Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    54   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    55   * \defgroup IfxLld_Rif_Std_Monitor Monitoring Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    56   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    57   * \defgroup IfxLld_Rif_Std_Module Module Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    58   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    59   * \defgroup IfxLld_Rif_Std_LVDS LDVS Functions
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    60   * \ingroup IfxLld_Rif_Std
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    61   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    62  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    63  #ifndef IFXRIF_H
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    64  #define IFXRIF_H 1
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    65  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    66  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    67  /*----------------------------------Includes----------------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    68  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    69  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    70  #include "_Impl/IfxRif_cfg.h"
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    71  #include "Src/Std/IfxSrc.h"
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    72  #include "Scu/Std/IfxScuWdt.h"
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    73  #include "_Utilities/Ifx_Assert.h"
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    74  #include "IfxRif_reg.h"
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    75  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    76  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    77  /*--------------------------------Enumerations--------------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    78  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    79  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    80  /** \addtogroup IfxLld_Rif_Std_Enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    81   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    82  /** \brief Defines the Type of ADCs used for radar cycle internal /external
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    83   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    84  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    85  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    86      IfxRif_Adc_external,  /**< \brief External ADCs (deserializer enabled) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    87      IfxRif_Adc_internal   /**< \brief Internal ADCs (deserializer disabled) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    88  } IfxRif_Adc;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    89  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    90  /** \brief Defines the current state of the deserializer\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    91   * Definition in Ifx_RIF.ESI.B.CALBSY
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    92   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    93  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    94  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    95      IfxRif_CalibrationState_done,  /**< \brief Calibration is finished (no calibration ongoing) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    96      IfxRif_CalibrationState_busy   /**< \brief Calibration is ongoing */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    97  } IfxRif_CalibrationState;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    98  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	    99  /** \brief Defines the status of the latest timing calibration sequence.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   100   * Definition in Ifx_RIF.ESI.B.CALSTAT
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   101   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   102  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   103  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   104      IfxRif_CalibrationStatus_fail,    /**< \brief Calibration is failed (signal paths uncalibrated) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   105      IfxRif_CalibrationStatus_success  /**< \brief Calibration is successful */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   106  } IfxRif_CalibrationStatus;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   107  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   108  /** \brief Defines the polarity of the clock signal on the clock input pins.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   109   * Definition in Ifx_RIF.ESI.B.CP
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   110   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   111  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   112  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   113      IfxRif_ClockPolarity_default,  /**< \brief Default polarity of the clock signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   114      IfxRif_ClockPolarity_inverted  /**< \brief Inverted polarity of the clock signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   115  } IfxRif_ClockPolarity;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   116  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   117  /** \brief Defines the Common control selection for all LVDS Pads .\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   118   * Definition in Ifx_RIF.LVDSCON1.B.MISC
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   119   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   120  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   121  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   122      IfxRif_CommonLvdsPadControl_5vMode,       /**< \brief enable 5V Mode for all LVDS pads */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   123      IfxRif_CommonLvdsPadControl_lowSpeedMode  /**< \brief enable low speed mode for all LVDS pads */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   124  } IfxRif_CommonLvdsPadControl;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   125  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   126  /** \brief Defines the alignment of the data delivered to the SPU.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   127   * Definition in Ifx_RIF.DFU.B.DA
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   128   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   129  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   130  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   131      IfxRif_DataAlignment_right,  /**< \brief Data alignment right (integer) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   132      IfxRif_DataAlignment_left    /**< \brief Data alignment left (fractional) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   133  } IfxRif_DataAlignment;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   134  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   135  /** \brief Defines the format of the data delivered to the SPU.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   136   * Definition in Ifx_RIF.DFU.B.DF
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   137   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   138  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   139  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   140      IfxRif_DataFormat_unsigned,  /**< \brief Data format unsigned */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   141      IfxRif_DataFormat_signed     /**< \brief Data format signed */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   142  } IfxRif_DataFormat;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   143  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   144  /** \brief Defines the data length of the frame signal.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   145   * Definition in Ifx_RIF.IPI.B.DL
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   146   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   147  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   148  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   149      IfxRif_DataLength_10bit,     /**< \brief Data length 10bit  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   150      IfxRif_DataLength_12bit,     /**< \brief Data length 12bit  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   151      IfxRif_DataLength_14bit,     /**< \brief Data length 14bit  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   152      IfxRif_DataLength_16bit      /**< \brief Data length 16bit  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   153  } IfxRif_DataLength;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   154  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   155  /** \brief Defines the polarity of the data signals on the data input pins.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   156   * Definition in Ifx_RIF.ESI.B.DP
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   157   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   158  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   159  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   160      IfxRif_DataPolarity_default,  /**< \brief Default polarity of the data signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   161      IfxRif_DataPolarity_inverted  /**< \brief Inverted polarity of the data signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   162  } IfxRif_DataPolarity;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   163  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   164  /** \brief Defines the deserializer number (0 to 3).\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   165   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   166  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   167  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   168      IfxRif_DeserializerId_0,     /**< \brief Deserializer 0  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   169      IfxRif_DeserializerId_1,     /**< \brief Deserializer 1  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   170      IfxRif_DeserializerId_2,     /**< \brief Deserializer 2  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   171      IfxRif_DeserializerId_3      /**< \brief Deserializer 3  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   172  } IfxRif_DeserializerId;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   173  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   174  /** \brief Defines the FIFO number (0 to 3).\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   175   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   176  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   177  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   178      IfxRif_FifoId_0,     /**< \brief Fifo 0  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   179      IfxRif_FifoId_1,     /**< \brief Fifo 1  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   180      IfxRif_FifoId_2,     /**< \brief Fifo 2  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   181      IfxRif_FifoId_3      /**< \brief Fifo 3  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   182  } IfxRif_FifoId;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   183  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   184  /** \brief Defines the FLM mode of operation.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   185   * Definition in Ifx_RIF.FLM.B.MODE
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   186   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   187  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   188  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   189      IfxRif_FlmMode_direct,  /**< \brief No swap of the data paths */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   190      IfxRif_FlmMode_swap     /**< \brief Swap of data paths of channels 0-1 and 2-3 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   191  } IfxRif_FlmMode;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   192  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   193  /** \brief Defines the polarity of the frame signal on the frame input pins.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   194   * Definition in Ifx_RIF.ESI.B.FP
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   195   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   196  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   197  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   198      IfxRif_FramePolarity_default,  /**< \brief Default polarity of the frame signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   199      IfxRif_FramePolarity_inverted  /**< \brief Inverted polarity of the frame signal */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   200  } IfxRif_FramePolarity;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   201  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   202  /** \brief Defines the Full swap mode operation of FLM.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   203   * Definition in Ifx_RIF.FLM.B.FSWP
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   204   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   205  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   206  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   207      IfxRif_FullSwapMode_direct,  /**< \brief No swap of the data paths */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   208      IfxRif_FullSwapMode_swap     /**< \brief Swap of data paths of channels 0-3 and 1-2 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   209  } IfxRif_FullSwapMode;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   210  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   211  /** \brief Defines the available interrupts in RIF module.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   212   * Definition in Ifx_RIF.INTCON and Ifx_RIF.CRC
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   213   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   214  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   215  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   216      IfxRif_Interrupt_calibrationEnd,         /**< \brief Calibration End interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   217      IfxRif_Interrupt_frameWatchdogOverflow,  /**< \brief Frame Watchdog Overflow interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   218      IfxRif_Interrupt_rampEnd,                /**< \brief Ramp End interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   219      IfxRif_Interrupt_chirpEnd,               /**< \brief Chirp End interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   220      IfxRif_Interrupt_crcErrorOnLine0,        /**< \brief CRC error interrupt on Line 0 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   221      IfxRif_Interrupt_crcErrorOnLine1,        /**< \brief CRC error interrupt on Line 1 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   222      IfxRif_Interrupt_crcErrorOnLine2,        /**< \brief CRC error interrupt on Line 2 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   223      IfxRif_Interrupt_crcErrorOnLine3,        /**< \brief CRC error interrupt on Line 3 */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   224      IfxRif_Interrupt_ramp1Error,             /**< \brief Ramp1 Error interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   225      IfxRif_Interrupt_chirp1Error,            /**< \brief Chirp1 Error interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   226      IfxRif_Interrupt_ramp1Start              /**< \brief Ramp1 Start interrupt */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   227  } IfxRif_Interrupt;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   228  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   229  /** \brief Defines the mode of Lvds Bias DistributorMode.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   230   * Definition in Ifx_RIF.LVDSCON1.B.PWRDN
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   231   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   232  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   233  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   234      IfxRif_LvdsBiasDistributorMode_active,      /**< \brief Active */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   235      IfxRif_LvdsBiasDistributorMode_poweredDown  /**< \brief Powered Down */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   236  } IfxRif_LvdsBiasDistributorMode;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   237  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   238  /** \brief Defines the LVDS PAD control selection.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   239   * Definition in Ifx_RIF.LVDSCON0.B.FRAME / CLK / DATA0 / DATA1 / LVDSCON1.B.DATA2 / DATA3
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   240   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   241  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   242  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   243      IfxRif_LvdsPadControl_none       = 0x00,  /**< \brief NO selection */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   244      IfxRif_LvdsPadControl_test       = 0x01,  /**< \brief Test Enable (enable Weak Driver Mode) */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   245      IfxRif_LvdsPadControl_rterm      = 0x02,  /**< \brief Rterm Enable */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   246      IfxRif_LvdsPadControl_frameClock = 0x04,  /**< \brief Frame Clock LVDS Pad Enable */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   247      IfxRif_LvdsPadControl_xor        = 0x08,  /**< \brief LVDS XOR-IN tied to LO by RIF-IP */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   248      IfxRif_LvdsPadControl_spareBit   = 0x10,  /**< \brief spare bit - tied to LO by RIF-IP */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   249      IfxRif_LvdsPadControl_TGatePTest = 0x20,  /**< \brief LVDS pad enable T-Gate P Test */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   250      IfxRif_LvdsPadControl_TGateNTest = 0x40   /**< \brief LVDS pad enable T-Gate N-Test */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   251  } IfxRif_LvdsPadControl;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   252  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   253  /** \brief Defines the number of samples, used in different phases of radar operation cycle
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   254   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   255  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   256  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   257      IfxRif_NumberOfSamples_1,     /**< \brief Number of samples 1  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   258      IfxRif_NumberOfSamples_2,     /**< \brief Number of samples 2  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   259      IfxRif_NumberOfSamples_3,     /**< \brief Number of samples 3  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   260      IfxRif_NumberOfSamples_4,     /**< \brief Number of samples 4  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   261      IfxRif_NumberOfSamples_5,     /**< \brief Number of samples 5  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   262      IfxRif_NumberOfSamples_6,     /**< \brief Number of samples 6  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   263      IfxRif_NumberOfSamples_7,     /**< \brief Number of samples 7  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   264      IfxRif_NumberOfSamples_8,     /**< \brief Number of samples 8  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   265      IfxRif_NumberOfSamples_9,     /**< \brief Number of samples 9  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   266      IfxRif_NumberOfSamples_10,    /**< \brief Number of samples 10  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   267      IfxRif_NumberOfSamples_11,    /**< \brief Number of samples 11  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   268      IfxRif_NumberOfSamples_12,    /**< \brief Number of samples 12  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   269      IfxRif_NumberOfSamples_13,    /**< \brief Number of samples 13  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   270      IfxRif_NumberOfSamples_14,    /**< \brief Number of samples 14  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   271      IfxRif_NumberOfSamples_15,    /**< \brief Number of samples 15  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   272      IfxRif_NumberOfSamples_16     /**< \brief Number of samples 16  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   273  } IfxRif_NumberOfSamples;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   274  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   275  /** \brief Defines the source for the RAMP1 signal multiplexer.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   276   * Definition in Ifx_RIF.RSM1.B.R1SEL
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   277   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   278  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   279  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   280      IfxRif_Ramp1SignalInput_0,     /**< \brief input 0  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   281      IfxRif_Ramp1SignalInput_1,     /**< \brief input 1  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   282      IfxRif_Ramp1SignalInput_2,     /**< \brief input 2  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   283      IfxRif_Ramp1SignalInput_3      /**< \brief input 3  */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   284  } IfxRif_Ramp1SignalInput;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   285  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   286  /** \brief Defines the polarity of the RAMP1 signal .\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   287   * Definition in Ifx_RIF.RSM1.B.R1POL
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   288   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   289  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   290  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   291      IfxRif_Ramp1SignalPolarity_lowActive,  /**< \brief Low Active */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   292      IfxRif_Ramp1SignalPolarity_highActive  /**< \brief High Active */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   293  } IfxRif_Ramp1SignalPolarity;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   294  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   295  /** \brief Defines the shift direction of the serial data, corresponding to the data bit on
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   296   * the lsb position in the delivered parallel data.\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   297   * Definition in Ifx_RIF.DFU.B.MSB
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   298   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   299  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   300  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   301      IfxRif_ShiftDirection_msbFirst,  /**< \brief Shift direction MSB first */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   302      IfxRif_ShiftDirection_lsbFirst   /**< \brief Shift direction LSB first */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   303  } IfxRif_ShiftDirection;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   304  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   305  /** \brief OCDS Suspend Control (OCDS.SUS)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   306   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   307  typedef enum
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   308  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   309      IfxRif_SuspendMode_none = 0,  /**< \brief No suspend */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   310      IfxRif_SuspendMode_hard = 1,  /**< \brief Hard Suspend */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   311      IfxRif_SuspendMode_soft = 2   /**< \brief Soft Suspend */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   312  } IfxRif_SuspendMode;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   313  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   314  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   315  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   316  /** \addtogroup IfxLld_Rif_Std_Deserializer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   317   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   318  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   319  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   320  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   321  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   322  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   323  /** \brief Disables the selected deserializer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   324   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   325   * \param deserializerId Deserializer number
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   326   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   327   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   328  IFX_INLINE void IfxRif_disableDeserializer(Ifx_RIF *rif, IfxRif_DeserializerId deserializerId);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   329  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   330  /** \brief Enables the calibration mode of the deserializer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   331   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   332   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   333   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   334  IFX_INLINE void IfxRif_enableCalibration(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   335  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   336  /** \brief Enables the selected deserializer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   337   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   338   * \param deserializerId Deserializer number
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   339   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   340   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   341  IFX_INLINE void IfxRif_enableDeserializer(Ifx_RIF *rif, IfxRif_DeserializerId deserializerId);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   342  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   343  /** \brief Returns the current state of the deserializer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   344   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   345   * \return Calibration state (done / on going)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   346   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   347  IFX_INLINE IfxRif_CalibrationState IfxRif_getCalibrationState(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   348  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   349  /** \brief Returns the status of the latest timing calibration sequence
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   350   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   351   * \return Calibration status (fail / success)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   352   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   353  IFX_INLINE IfxRif_CalibrationStatus IfxRif_getCalibrationStatus(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   354  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   355  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   356  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   357  /** \addtogroup IfxLld_Rif_Std_FLM
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   358   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   359  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   360  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   361  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   362  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   363  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   364  /** \brief Enables the selected FIFO
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   365   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   366   * \param fifoId FIFO number
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   367   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   368   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   369  IFX_INLINE void IfxRif_enableFifo(Ifx_RIF *rif, IfxRif_FifoId fifoId);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   370  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   371  /** \brief Sets the FLM mode of operation
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   372   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   373   * \param mode FLM mode of operation
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   374   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   375   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   376  IFX_INLINE void IfxRif_setFlmMode(Ifx_RIF *rif, IfxRif_FlmMode mode);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   377  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   378  /** \brief Sets the Full Swap Mode of FLM unit
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   379   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   380   * \param swapMode Full Swap Mod eof FLM unit
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   381   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   382   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   383  IFX_INLINE void IfxRif_setFullSwapMode(Ifx_RIF *rif, IfxRif_FullSwapMode swapMode);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   384  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   385  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   386  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   387  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   388  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   389  /** \brief Enables the number of FIFOs based on number of ADC channels used
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   390   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   391   * \param count Number of ADC channels used
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   392   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   393   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   394  IFX_EXTERN void IfxRif_enableFifos(Ifx_RIF *rif, uint8 count);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   395  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   396  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   397  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   398  /** \addtogroup IfxLld_Rif_Std_DFU
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   399   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   400  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   401  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   402  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   403  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   404  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   405  /** \brief Returns the data length of the frame signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   406   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   407   * \return Data length of the frame signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   408   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   409  IFX_INLINE IfxRif_DataLength IfxRif_getDataLength(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   410  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   411  /** \brief Sets the polarity of the clock signal on the clock input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   412   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   413   * \param polarity Polarity of the clock signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   414   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   415   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   416  IFX_INLINE void IfxRif_setClockPolarity(Ifx_RIF *rif, IfxRif_ClockPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   417  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   418  /** \brief Sets the alignment of the data delivered to the SPU
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   419   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   420   * \param alignment Alignment of the data delivered to the SPU
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   421   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   422   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   423  IFX_INLINE void IfxRif_setDataAlignment(Ifx_RIF *rif, IfxRif_DataAlignment alignment);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   424  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   425  /** \brief Sets the format of the data delivered to the SPU
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   426   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   427   * \param format format of the data delivered to the SPU
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   428   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   429   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   430  IFX_INLINE void IfxRif_setDataFormat(Ifx_RIF *rif, IfxRif_DataFormat format);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   431  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   432  /** \brief Sets the data length of the frame signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   433   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   434   * \param length Data length of the frame signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   435   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   436   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   437  IFX_INLINE void IfxRif_setDataLength(Ifx_RIF *rif, IfxRif_DataLength length);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   438  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   439  /** \brief Sets the polarity of the data signal 0 on the data input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   440   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   441   * \param polarity Polarity of the data signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   442   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   443   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   444  IFX_INLINE void IfxRif_setDataPolarity0(Ifx_RIF *rif, IfxRif_DataPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   445  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   446  /** \brief Sets the polarity of the data signal 1 on the data input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   447   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   448   * \param polarity Polarity of the data signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   449   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   450   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   451  IFX_INLINE void IfxRif_setDataPolarity1(Ifx_RIF *rif, IfxRif_DataPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   452  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   453  /** \brief Sets the polarity of the data signal 2 on the data input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   454   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   455   * \param polarity Polarity of the data signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   456   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   457   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   458  IFX_INLINE void IfxRif_setDataPolarity2(Ifx_RIF *rif, IfxRif_DataPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   459  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   460  /** \brief Sets the polarity of the data signal 3 on the data input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   461   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   462   * \param polarity Polarity of the data signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   463   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   464   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   465  IFX_INLINE void IfxRif_setDataPolarity3(Ifx_RIF *rif, IfxRif_DataPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   466  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   467  /** \brief Sets the polarity of the frame signal on the frame input pins
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   468   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   469   * \param polarity Polarity of the frame signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   470   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   471   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   472  IFX_INLINE void IfxRif_setFramePolarity(Ifx_RIF *rif, IfxRif_FramePolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   473  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   474  /** \brief Sets the polarity of the RAMP1 signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   475   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   476   * \param polarity Polarity of the RAMP1 signal
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   477   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   478   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   479  IFX_INLINE void IfxRif_setRamp1SignalPolarity(Ifx_RIF *rif, IfxRif_Ramp1SignalPolarity polarity);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   480  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   481  /** \brief Sets the the shift direction of the serial data, corresponding to the data bit on
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   482   * the lsb position in the delivered parallel data
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   483   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   484   * \param direction Shift direction
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   485   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   486   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   487  IFX_INLINE void IfxRif_setShiftDirection(Ifx_RIF *rif, IfxRif_ShiftDirection direction);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   488  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   489  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   490  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   491  /** \addtogroup IfxLld_Rif_Std_RSM
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   492   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   493  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   494  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   495  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   496  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   497  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   498  /** \brief Enables the external ADCs, the radar interface to accepts input from the external ADCs.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   499   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   500   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   501   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   502  IFX_INLINE void IfxRif_enableExternalAdc(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   503  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   504  /** \brief Enables the internal ADCs, the radar interface to accepts input from the internal ADCs.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   505   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   506   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   507   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   508  IFX_INLINE void IfxRif_enableInternalAdc(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   509  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   510  /** \brief Enables lockstep, synchronous delivery of ADC samples from two RIFs to two SPUs\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   511   * (in case two RIF instances are available and used)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   512   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   513   * \param enabled Choise (enable / disable)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   514   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   515   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   516  IFX_INLINE void IfxRif_enableLockstep(Ifx_RIF *rif, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   517  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   518  /** \brief Enables the RAMP1 signal and disables the Frame Watchdog Timer\n
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   519   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   520   * \param enabled Choise (enable / disable)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   521   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   522   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   523  IFX_INLINE void IfxRif_enableRamp1Signal(Ifx_RIF *rif, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   524  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   525  /** \brief Returns the current ramp number of the chirp
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   526   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   527   * \return Current ramp number of the chirp
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   528   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   529  IFX_INLINE uint16 IfxRif_getCurrentRampNumber(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   530  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   531  /** \brief Returns the current valid data sample number of the chirp
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   532   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   533   * \return Current valid data sample number of the chirp
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   534   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   535  IFX_INLINE uint16 IfxRif_getCurrentValidDataSampleNumber(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   536  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   537  /** \brief Sets the number of ramps per chirp in the range of 1 to 2048 ramps
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   538   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   539   * \param rampsNum Number of ramps
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   540   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   541   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   542  IFX_INLINE void IfxRif_setChirpLength(Ifx_RIF *rif, uint16 rampsNum);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   543  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   544  /** \brief Sets the source for the RAMP1 signal multiplexer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   545   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   546   * \param signal Source for the RAMP1 signal multiplexer
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   547   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   548   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   549  IFX_INLINE void IfxRif_setRamp1SignalInput(Ifx_RIF *rif, IfxRif_Ramp1SignalInput signal);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   550  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   551  /** \brief Sets the number of valid data samples per chirp in the range of 1 to 2048 samples
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   552   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   553   * \param samplesNum Number of valid data samples
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   554   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   555   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   556  IFX_INLINE void IfxRif_setValidDataSamplesNumber(Ifx_RIF *rif, uint16 samplesNum);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   557  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   558  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   559  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   560  /** \addtogroup IfxLld_Rif_Std_Interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   561   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   562  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   563  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   564  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   565  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   566  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   567  /** \brief Clears the selected interrupt flag status
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   568   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   569   * \param interrupt Type of interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   570   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   571   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   572  IFX_INLINE void IfxRif_clearInterruptFlag(Ifx_RIF *rif, IfxRif_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   573  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   574  /** \brief Disables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   575   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   576   * \param interrupt Type of interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   577   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   578   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   579  IFX_INLINE void IfxRif_disableInterrupt(Ifx_RIF *rif, IfxRif_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   580  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   581  /** \brief Enables the selected interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   582   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   583   * \param interrupt Type of interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   584   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   585   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   586  IFX_INLINE void IfxRif_enableInterrupt(Ifx_RIF *rif, IfxRif_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   587  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   588  /** \brief Returns the selected interrupt flag status
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   589   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   590   * \param interrupt Type of interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   591   * \return Status
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   592   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   593  IFX_INLINE uint8 IfxRif_getInterruptFlagStatus(Ifx_RIF *rif, IfxRif_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   594  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   595  /** \brief Sets the selected interrupt flag status
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   596   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   597   * \param interrupt Type of interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   598   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   599   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   600  IFX_INLINE void IfxRif_setInterruptFlag(Ifx_RIF *rif, IfxRif_Interrupt interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   601  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   602  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   603  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   604  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   605  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   606  /** \brief Returns the SRC pointer of RIF module ERR interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   607   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   608   * \return SRC pointer of RIF module ERR interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   609   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   610  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxRif_getSrcPointerErr(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   611  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   612  /** \brief Returns the SRC pointer of RIF module INT interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   613   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   614   * \return SRC pointer of RIF module INT interrupt
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   615   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   616  IFX_EXTERN volatile Ifx_SRC_SRCR *IfxRif_getSrcPointerInt(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   617  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   618  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   619  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   620  /** \addtogroup IfxLld_Rif_Std_Monitor
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   621   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   622  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   623  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   624  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   625  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   626  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   627  /** \brief Disables the CRC.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   628   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   629   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   630   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   631  IFX_INLINE void IfxRif_disableCrc(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   632  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   633  /** \brief Enables the CRC.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   634   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   635   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   636   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   637  IFX_INLINE void IfxRif_enableCrc(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   638  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   639  /** \brief Sets the frame watchdog threshold, (the reload value for the watchdog timer) in the range of 0-255.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   640   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   641   * \param value Threshold value
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   642   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   643   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   644  IFX_INLINE void IfxRif_setFrameWatchdogThreshold(Ifx_RIF *rif, uint16 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   645  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   646  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   647  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   648  /** \addtogroup IfxLld_Rif_Std_Module
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   649   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   650  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   651  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   652  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   653  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   654  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   655  /** \brief Returns the status of module, enabled or disabled
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   656   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   657   * \return Status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   658   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   659  IFX_INLINE boolean IfxRif_isModuleEnabled(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   660  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   661  /** \brief Returns the module's suspend state.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   662   * TRUE :if module is suspended.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   663   * FALSE:if module is not yet suspended.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   664   * \param rif Pointer to RIF module registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   665   * \return Suspend status (TRUE / FALSE)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   666   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   667  IFX_INLINE boolean IfxRif_isModuleSuspended(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   668  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   669  /** \brief Configure the Module to Hard/Soft suspend mode.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   670   * Note: The api works only when the OCDS is enabled and in Supervisor Mode. When OCDS is disabled the OCS suspend control is ineffective.
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   671   * \param rif Pointer to RIF module registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   672   * \param mode Module suspend mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   673   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   674   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   675  IFX_INLINE void IfxRif_setSuspendMode(Ifx_RIF *rif, IfxRif_SuspendMode mode);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   676  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   677  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   678  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   679  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   680  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   681  /** \brief Disables the module (clears the disable request)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   682   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   683   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   684   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   685  IFX_EXTERN void IfxRif_disableModule(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   686  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   687  /** \brief Enables the module (clears the disable request)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   688   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   689   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   690   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   691  IFX_EXTERN void IfxRif_enableModule(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   692  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   693  /** \brief Returns the module index of the selected RIF module
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   694   * \param rif Pointer to RIF module registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   695   * \return RIF module register address
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   696   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   697  IFX_EXTERN Ifx_RIF *IfxRif_getAddress(IfxRif_Index rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   698  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   699  /** \brief Returns the module index of the selected RIF module
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   700   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   701   * \return Module index
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   702   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   703  IFX_EXTERN IfxRif_Index IfxRif_getIndex(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   704  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   705  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   706  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   707  /** \addtogroup IfxLld_Rif_Std_LVDS
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   708   * \{ */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   709  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   710  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   711  /*-------------------------Inline Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   712  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   713  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   714  /** \brief Sets the Clock LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   715   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   716   * \param value Clock LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   717   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   718   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   719  IFX_INLINE void IfxRif_setClockLvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   720  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   721  /** \brief Sets the Miscellaneous Common LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   722   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   723   * \param mode Miscellaneous Common LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   724   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   725   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   726  IFX_INLINE void IfxRif_setCommonLvdsPadControl(Ifx_RIF *rif, IfxRif_CommonLvdsPadControl mode);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   727  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   728  /** \brief Sets the DATA0 LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   729   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   730   * \param value DATA0 LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   731   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   732   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   733  IFX_INLINE void IfxRif_setData0LvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   734  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   735  /** \brief Sets the DATA1 LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   736   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   737   * \param value DATA1 LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   738   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   739   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   740  IFX_INLINE void IfxRif_setData1LvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   741  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   742  /** \brief Sets the DATA2 LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   743   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   744   * \param value DATA2 LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   745   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   746   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   747  IFX_INLINE void IfxRif_setData2LvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   748  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   749  /** \brief Sets the DATA3 LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   750   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   751   * \param value DATA3 LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   752   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   753   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   754  IFX_INLINE void IfxRif_setData3LvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   755  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   756  /** \brief Sets the Frame LVDS PAD control mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   757   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   758   * \param value Frame LVDS PAD control
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   759   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   760   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   761  IFX_INLINE void IfxRif_setFrameLvdsPadControl(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   762  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   763  /** \brief enbales / disables the Lvds Bias Distributor 5V Mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   764   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   765   * \param enabled enable / disable choise for LVDS Bias Distributor 5V mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   766   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   767   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   768  IFX_INLINE void IfxRif_setLvdsBiasDistributor5VMode(Ifx_RIF *rif, boolean enabled);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   769  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   770  /** \brief Sets the Lvds Bias Distributor Mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   771   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   772   * \param mode LVDS Bias Distributor Power Down mode
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   773   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   774   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   775  IFX_INLINE void IfxRif_setLvdsBiasDistributorPowerDownMode(Ifx_RIF *rif, IfxRif_LvdsBiasDistributorMode mode);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   776  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   777  /** \brief Sets the Termination Resistor Trimming value
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   778   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   779   * \param value Termination Resistor Trimming value
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   780   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   781   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   782  IFX_INLINE void IfxRif_setRtermTrimmingValue(Ifx_RIF *rif, uint8 value);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   783  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   784  /** \} */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   785  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   786  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   787  /*-------------------------Global Function Prototypes-------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   788  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   789  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   790  /**
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   791   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   792   * \param fifoId FIFO number
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   793   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   794   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   795  IFX_EXTERN void IfxRif_disableFifo(Ifx_RIF *rif, IfxRif_FifoId fifoId);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   796  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   797  /**
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   798   * \param rif Specifies the pointer to the base of RIF registers
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   799   * \return None
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   800   */
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   801  IFX_EXTERN void IfxRif_disableAllFifos(Ifx_RIF *rif);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   802  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   803  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   804  /*---------------------Inline Function Implementations------------------------*/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   805  /******************************************************************************/
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   806  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   807  IFX_INLINE void IfxRif_clearInterruptFlag(Ifx_RIF *rif, IfxRif_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   808  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   809      uint32 shift    = (16 + interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   810      uint32 setValue = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   811      rif->FLAGSCL.U = rif->FLAGSCL.U | (setValue);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   812  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   813  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   814  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   815  IFX_INLINE void IfxRif_disableCrc(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   816  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   817      rif->FLM.B.CRCEN = 0U;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   818  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   819  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   820  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   821  IFX_INLINE void IfxRif_disableDeserializer(Ifx_RIF *rif, IfxRif_DeserializerId deserializerId)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   822  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   823      uint32 setValue = 1U << (deserializerId + 16);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   824      rif->IPI.U = (rif->IPI.U & (~setValue));
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   825  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   826  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   827  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   828  IFX_INLINE void IfxRif_disableInterrupt(Ifx_RIF *rif, IfxRif_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   829  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   830      uint32 setValue = (1U << interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   831      rif->INTCON.U = rif->INTCON.U & (~setValue);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   832  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   833  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   834  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   835  IFX_INLINE void IfxRif_enableCalibration(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   836  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   837      rif->ESI.B.CALEN = 1U;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   838  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   839  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   840  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   841  IFX_INLINE void IfxRif_enableCrc(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   842  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   843      rif->FLM.B.CRCEN = 1U;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   844  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   845  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   846  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   847  IFX_INLINE void IfxRif_enableDeserializer(Ifx_RIF *rif, IfxRif_DeserializerId deserializerId)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   848  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   849      uint32 setValue = 1U << (deserializerId + 16);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   850      rif->IPI.U = rif->IPI.U | setValue;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   851  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   852  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   853  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   854  IFX_INLINE void IfxRif_enableExternalAdc(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   855  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   856      rif->RSM0.B.INTADC = 0U;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   857  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   858  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   859  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   860  IFX_INLINE void IfxRif_enableFifo(Ifx_RIF *rif, IfxRif_FifoId fifoId)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   861  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   862      uint32 setValue = 1U << fifoId;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   863      rif->DMI.U = rif->DMI.U | setValue;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   864  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   865  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   866  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   867  IFX_INLINE void IfxRif_enableInternalAdc(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   868  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   869      rif->RSM0.B.INTADC = 1U;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   870  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   871  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   872  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   873  IFX_INLINE void IfxRif_enableInterrupt(Ifx_RIF *rif, IfxRif_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   874  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   875      uint32 setValue = 1U << interrupt;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   876      rif->INTCON.U = rif->INTCON.U | setValue;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   877  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   878  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   879  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   880  IFX_INLINE void IfxRif_enableLockstep(Ifx_RIF *rif, boolean enabled)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   881  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   882      rif->RSM0.B.LCKSTP = enabled ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   883  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   884  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   885  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   886  IFX_INLINE void IfxRif_enableRamp1Signal(Ifx_RIF *rif, boolean enabled)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   887  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   888      rif->RSM1.B.R1EN = enabled ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   889  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   890  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   891  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   892  IFX_INLINE IfxRif_CalibrationState IfxRif_getCalibrationState(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   893  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   894      return (IfxRif_CalibrationState)rif->ESI.B.CALBSY;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   895  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   896  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   897  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   898  IFX_INLINE IfxRif_CalibrationStatus IfxRif_getCalibrationStatus(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   899  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   900      return (IfxRif_CalibrationStatus)rif->ESI.B.CALSTAT;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   901  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   902  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   903  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   904  IFX_INLINE uint16 IfxRif_getCurrentRampNumber(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   905  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   906      return (uint16)rif->RSM1.B.CURRAMP;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   907  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   908  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   909  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   910  IFX_INLINE uint16 IfxRif_getCurrentValidDataSampleNumber(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   911  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   912      return (uint16)rif->RSM2.B.CURSAMPLE;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   913  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   914  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   915  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   916  IFX_INLINE IfxRif_DataLength IfxRif_getDataLength(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   917  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   918      return (IfxRif_DataLength)rif->IPI.B.DL;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   919  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   920  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   921  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   922  IFX_INLINE uint8 IfxRif_getInterruptFlagStatus(Ifx_RIF *rif, IfxRif_Interrupt interrupt)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   923  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   924      uint32 shift = (16 + interrupt);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   925      uint32 mask  = (1U << shift);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   926      return (rif->INTCON.U & mask) ? 1 : 0;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   927  }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   928  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   929  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   930  IFX_INLINE boolean IfxRif_isModuleEnabled(Ifx_RIF *rif)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   931  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.h	   932      return rif->CLC.B.DISS == 0;
	ld.bu	d15,[a15]
.L115:
	jnz.t	d15:1,.L9
.L193:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	    99      {}
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   100  }
	ret
.L111:
	
__IfxRif_enableModule_function_end:
	.size	IfxRif_enableModule,__IfxRif_enableModule_function_end-IfxRif_enableModule
.L65:
	; End of function
	
	.sdecl	'.text.IfxRif.IfxRif_getAddress',code,cluster('IfxRif_getAddress')
	.sect	'.text.IfxRif.IfxRif_getAddress'
	.align	2
	
	.global	IfxRif_getAddress

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   101  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   102  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   103  Ifx_RIF *IfxRif_getAddress(IfxRif_Index rif)
; Function IfxRif_getAddress
.L26:
IfxRif_getAddress:	.type	func

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   104  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   105      Ifx_RIF *module;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   106  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   107      if (rif < IFXRIF_NUM_MODULES)
	jge	d4,#2,.L10
.L198:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   108      {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   109          module = (Ifx_RIF *)IfxRif_cfg_indexMap[rif].module;
	movh.a	a15,#@his(IfxRif_cfg_indexMap)
	lea	a15,[a15]@los(IfxRif_cfg_indexMap)
.L199:
	addsc.a	a15,a15,d4,#3
.L200:
	ld.a	a2,[a15]
.L148:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   110      }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   111      else
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   112      {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   113          module = NULL_PTR;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   114      }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   115  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   116      return module;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   117  }
	ret
.L10:
	mov.a	a2,#0
.L149:
	ret
.L119:
	
__IfxRif_getAddress_function_end:
	.size	IfxRif_getAddress,__IfxRif_getAddress_function_end-IfxRif_getAddress
.L70:
	; End of function
	
	.sdecl	'.text.IfxRif.IfxRif_getIndex',code,cluster('IfxRif_getIndex')
	.sect	'.text.IfxRif.IfxRif_getIndex'
	.align	2
	
	.global	IfxRif_getIndex

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   118  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   119  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   120  IfxRif_Index IfxRif_getIndex(Ifx_RIF *rif)
; Function IfxRif_getIndex
.L28:
IfxRif_getIndex:	.type	func

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   121  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   122      uint32       index;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   123      IfxRif_Index result;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   124  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   125      result = IfxRif_Index_none;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   126  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   127      for (index = 0; index < IFXRIF_NUM_MODULES; index++)
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   128      {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   129          if (IfxRif_cfg_indexMap[index].module == rif)
	mov	d2,#-1
	movh.a	a15,#@his(IfxRif_cfg_indexMap)
.L150:
	lea	a15,[a15]@los(IfxRif_cfg_indexMap)
.L205:
	mov.a	a2,#1
.L13:
	ld.a	a5,[a15]
.L206:
	jne.a	a5,a4,.L14
.L207:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   130          {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   131              result = (IfxRif_Index)IfxRif_cfg_indexMap[index].index;
	ld.w	d15,[a15]4
.L208:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   132              break;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   133          }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   134      }
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   135  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   136      return result;
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   137  }
	extr	d2,d15,#0,#8
	ret
.L14:
	lea	a15,[a15]8
	loop	a2,.L13
.L209:
	ret
.L123:
	
__IfxRif_getIndex_function_end:
	.size	IfxRif_getIndex,__IfxRif_getIndex_function_end-IfxRif_getIndex
.L75:
	; End of function
	
	.sdecl	'.text.IfxRif.IfxRif_getSrcPointerErr',code,cluster('IfxRif_getSrcPointerErr')
	.sect	'.text.IfxRif.IfxRif_getSrcPointerErr'
	.align	2
	
	.global	IfxRif_getSrcPointerErr

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   138  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   139  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   140  volatile Ifx_SRC_SRCR *IfxRif_getSrcPointerErr(Ifx_RIF *rif)
; Function IfxRif_getSrcPointerErr
.L30:
IfxRif_getSrcPointerErr:	.type	func

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   141  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   142      return &MODULE_SRC.RIF.RIF[IfxRif_getIndex(rif)].ERR;
	ld.w	d15,.1.cnt
	mov.a	a15,d15
.L173:
	call	IfxRif_getIndex
.L151:
	addsc.a	a2,a15,d2,#3
.L174:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   143  }
	ret
.L103:
	
__IfxRif_getSrcPointerErr_function_end:
	.size	IfxRif_getSrcPointerErr,__IfxRif_getSrcPointerErr_function_end-IfxRif_getSrcPointerErr
.L50:
	; End of function
	
	.sdecl	'.text.IfxRif.IfxRif_getSrcPointerInt',code,cluster('IfxRif_getSrcPointerInt')
	.sect	'.text.IfxRif.IfxRif_getSrcPointerInt'
	.align	2
	
	.global	IfxRif_getSrcPointerInt

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   144  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   145  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   146  volatile Ifx_SRC_SRCR *IfxRif_getSrcPointerInt(Ifx_RIF *rif)
; Function IfxRif_getSrcPointerInt
.L32:
IfxRif_getSrcPointerInt:	.type	func

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   147  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   148      return &MODULE_SRC.RIF.RIF[IfxRif_getIndex(rif)].INT;
	ld.w	d15,.1.cnt
	mov.a	a15,d15
.L179:
	call	IfxRif_getIndex
.L152:
	addsc.a	a2,a15,d2,#3
.L180:
	add.a	a2,#4
.L181:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   149  }
	ret
.L105:
	
__IfxRif_getSrcPointerInt_function_end:
	.size	IfxRif_getSrcPointerInt,__IfxRif_getSrcPointerInt_function_end-IfxRif_getSrcPointerInt
.L55:
	; End of function
	
	.sdecl	'.text.IfxRif.IfxRif_disableFifo',code,cluster('IfxRif_disableFifo')
	.sect	'.text.IfxRif.IfxRif_disableFifo'
	.align	2
	
	.global	IfxRif_disableFifo

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   150  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   151  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   152  void IfxRif_disableFifo(Ifx_RIF *rif, IfxRif_FifoId fifoId)
; Function IfxRif_disableFifo
.L34:
IfxRif_disableFifo:	.type	func

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   153  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   154      uint32 setValue = ~(1U << fifoId);
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   155      rif->DMI.U = (rif->DMI.U & setValue);
	mov	d0,#1
	ld.w	d15,[a4]28
.L214:
	sh	d0,d0,d4
.L215:
	mov	d1,#-1
	xor	d0,d1
.L216:
	and	d15,d0
	st.w	[a4]28,d15
.L217:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   156  }
	ret
.L128:
	
__IfxRif_disableFifo_function_end:
	.size	IfxRif_disableFifo,__IfxRif_disableFifo_function_end-IfxRif_disableFifo
.L80:
	; End of function
	
	.sdecl	'.text.IfxRif.IfxRif_disableAllFifos',code,cluster('IfxRif_disableAllFifos')
	.sect	'.text.IfxRif.IfxRif_disableAllFifos'
	.align	2
	
	.global	IfxRif_disableAllFifos

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   157  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   158  
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   159  void IfxRif_disableAllFifos(Ifx_RIF *rif)
; Function IfxRif_disableAllFifos
.L36:
IfxRif_disableAllFifos:	.type	func

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   160  {
; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   161      rif->DMI.U = 0U;
	mov	d15,#0
	st.w	[a4]28,d15
.L222:

; ..\0_Src\4_McHal\Tricore\Rif\Std\IfxRif.c	   162  }
	ret
.L132:
	
__IfxRif_disableAllFifos_function_end:
	.size	IfxRif_disableAllFifos,__IfxRif_disableAllFifos_function_end-IfxRif_disableAllFifos
.L85:
	; End of function
	
	.calls	'IfxRif_disableModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxRif_disableModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxRif_disableModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxRif_enableFifos','IfxRif_disableAllFifos'
	.calls	'IfxRif_enableModule','IfxScuWdt_getCpuWatchdogPassword'
	.calls	'IfxRif_enableModule','IfxScuWdt_clearCpuEndinit'
	.calls	'IfxRif_enableModule','IfxScuWdt_setCpuEndinit'
	.calls	'IfxRif_getSrcPointerErr','IfxRif_getIndex'
	.calls	'IfxRif_getSrcPointerInt','IfxRif_getIndex'
	.calls	'IfxRif_disableModule','',0
	.calls	'IfxRif_enableFifos','',0
	.calls	'IfxRif_enableModule','',0
	.calls	'IfxRif_getAddress','',0
	.calls	'IfxRif_getIndex','',0
	.calls	'IfxRif_getSrcPointerErr','',0
	.calls	'IfxRif_getSrcPointerInt','',0
	.calls	'IfxRif_disableFifo','',0
	.extern	IfxRif_cfg_indexMap
	.extern	IfxScuWdt_clearCpuEndinit
	.extern	IfxScuWdt_setCpuEndinit
	.extern	IfxScuWdt_getCpuWatchdogPassword
	.calls	'IfxRif_disableAllFifos','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L38:
	.word	45582
	.half	3
	.word	.L39
	.byte	4
.L37:
	.byte	1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L40
	.byte	2,1,1,3
	.word	164
	.byte	4
	.byte	'Ifx__jump_and_link',0,3,1,58,17,1,1,5
	.byte	'fun',0,1,58,43
	.word	167
	.byte	6,0,7
	.byte	'__fract',0,4,128,1,7
	.byte	'float',0,4,4,8
	.byte	'Ifx__float_to_fract',0,3,1,149,2,18
	.word	212
	.byte	1,1,5
	.byte	'a',0,1,149,2,44
	.word	224
	.byte	6,0,7
	.byte	'unsigned long long int',0,8,7,9
	.byte	'void',0,3
	.word	304
	.byte	8
	.byte	'__ld64',0,3,2,132,1,19
	.word	278
	.byte	1,1,5
	.byte	'addr',0,2,132,1,32
	.word	310
	.byte	6,0,4
	.byte	'__st64',0,3,2,140,1,17,1,1,5
	.byte	'addr',0,2,140,1,30
	.word	310
	.byte	5
	.byte	'value',0,2,140,1,43
	.word	278
	.byte	6,0,7
	.byte	'unsigned int',0,4,7,7
	.byte	'int',0,4,5
.L89:
	.byte	7
	.byte	'unsigned char',0,1,8,10
	.byte	'_Ifx_SRC_SRCR_Bits',0,4,68,16,4,11
	.byte	'SRPN',0,1
	.word	419
	.byte	8,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	419
	.byte	2,6,2,35,1,11
	.byte	'SRE',0,1
	.word	419
	.byte	1,5,2,35,1,11
	.byte	'TOS',0,1
	.word	419
	.byte	3,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	419
	.byte	2,0,2,35,1,11
	.byte	'ECC',0,1
	.word	419
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	419
	.byte	3,0,2,35,2,11
	.byte	'SRR',0,1
	.word	419
	.byte	1,7,2,35,3,11
	.byte	'CLRR',0,1
	.word	419
	.byte	1,6,2,35,3,11
	.byte	'SETR',0,1
	.word	419
	.byte	1,5,2,35,3,11
	.byte	'IOV',0,1
	.word	419
	.byte	1,4,2,35,3,11
	.byte	'IOVCLR',0,1
	.word	419
	.byte	1,3,2,35,3,11
	.byte	'SWS',0,1
	.word	419
	.byte	1,2,2,35,3,11
	.byte	'SWSCLR',0,1
	.word	419
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	419
	.byte	1,0,2,35,3,0,12,4,93,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	436
	.byte	4,2,35,0,0,14
	.word	726
.L102:
	.byte	3
	.word	765
	.byte	4
	.byte	'IfxSrc_clearRequest',0,3,3,247,1,17,1,1,5
	.byte	'src',0,3,247,1,60
	.word	770
	.byte	6,0,10
	.byte	'_Ifx_RIF_CLC_Bits',0,6,111,16,4,11
	.byte	'DISR',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'DISS',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'EDIS',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	396
	.byte	28,0,2,35,0,0,12,6,219,3,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	818
	.byte	4,2,35,0,0,15,4
	.word	419
	.byte	16,3,0
.L109:
	.byte	7
	.byte	'unsigned short int',0,2,7,10
	.byte	'_Ifx_RIF_ID_Bits',0,6,142,2,16,4,11
	.byte	'MODREV',0,1
	.word	419
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	419
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	983
	.byte	16,0,2,35,2,0,12,6,187,4,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1005
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_ESI_Bits',0,6,192,1,16,4,11
	.byte	'CP',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'FP',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'DP0',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'DP1',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'DP2',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'DP3',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	983
	.byte	10,0,2,35,0,11
	.byte	'CALEN',0,1
	.word	419
	.byte	1,7,2,35,2,11
	.byte	'CALBSY',0,1
	.word	419
	.byte	1,6,2,35,2,11
	.byte	'CALSTAT',0,1
	.word	419
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,2
	.word	983
	.byte	13,0,2,35,2,0,12,6,147,4,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1127
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_IPI_Bits',0,6,182,2,16,4,11
	.byte	'DL',0,1
	.word	419
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'PFP',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	983
	.byte	12,0,2,35,0,11
	.byte	'EN0',0,1
	.word	419
	.byte	1,7,2,35,2,11
	.byte	'EN1',0,1
	.word	419
	.byte	1,6,2,35,2,11
	.byte	'EN2',0,1
	.word	419
	.byte	1,5,2,35,2,11
	.byte	'EN3',0,1
	.word	419
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	983
	.byte	9,3,2,35,2,11
	.byte	'DBGSEL',0,1
	.word	419
	.byte	2,1,2,35,3,11
	.byte	'SDDV',0,1
	.word	419
	.byte	1,0,2,35,3,0,12,6,203,4,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1379
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_FLM_Bits',0,6,247,1,16,4,11
	.byte	'MODE',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'FSWP',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	419
	.byte	6,0,2,35,0,11
	.byte	'CRCEN',0,1
	.word	419
	.byte	1,7,2,35,1,11
	.byte	'CRCALT',0,1
	.word	419
	.byte	1,6,2,35,1,11
	.byte	'CRCERIN',0,1
	.word	419
	.byte	1,5,2,35,1,11
	.byte	'EXPCRCWO',0,1
	.word	419
	.byte	1,4,2,35,1,11
	.byte	'CRCBS',0,1
	.word	419
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	419
	.byte	3,0,2,35,1,11
	.byte	'REGCRCEN',0,1
	.word	419
	.byte	2,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	983
	.byte	14,0,2,35,2,0,12,6,171,4,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1634
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_DMI_Bits',0,6,182,1,16,4,11
	.byte	'ENF0',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'ENF1',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'ENF2',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'ENF3',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	396
	.byte	28,0,2,35,0,0,12,6,139,4,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	1910
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_RSM0_Bits',0,6,133,3,16,4,11
	.byte	'reserved_0',0,4
	.word	396
	.byte	30,2,2,35,0,11
	.byte	'LCKSTP',0,1
	.word	419
	.byte	1,1,2,35,3,11
	.byte	'INTADC',0,1
	.word	419
	.byte	1,0,2,35,3,0,12,6,139,5,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2061
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_RSM1_Bits',0,6,141,3,16,4,11
	.byte	'RAMPS',0,2
	.word	983
	.byte	11,5,2,35,0,11
	.byte	'reserved_11',0,1
	.word	419
	.byte	1,4,2,35,1,11
	.byte	'RR12',0,1
	.word	419
	.byte	2,2,2,35,1,11
	.byte	'R1SEL',0,1
	.word	419
	.byte	2,0,2,35,1,11
	.byte	'CURRAMP',0,2
	.word	983
	.byte	12,4,2,35,2,11
	.byte	'reserved_28',0,1
	.word	419
	.byte	1,3,2,35,3,11
	.byte	'R1POL',0,1
	.word	419
	.byte	1,2,2,35,3,11
	.byte	'RR30',0,1
	.word	419
	.byte	1,1,2,35,3,11
	.byte	'R1EN',0,1
	.word	419
	.byte	1,0,2,35,3,0,12,6,147,5,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2185
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_RSM2_Bits',0,6,155,3,16,4,11
	.byte	'SAMPLES',0,2
	.word	983
	.byte	11,5,2,35,0,11
	.byte	'reserved_11',0,1
	.word	419
	.byte	5,0,2,35,1,11
	.byte	'CURSAMPLE',0,2
	.word	983
	.byte	12,4,2,35,2,11
	.byte	'reserved_28',0,1
	.word	419
	.byte	4,0,2,35,3,0,12,6,155,5,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2415
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_INTCON_Bits',0,6,150,2,16,4,11
	.byte	'CALE',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'FWE',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'REE',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'UEE',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'CRCE0',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'CRCE1',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'CRCE2',0,1
	.word	419
	.byte	1,1,2,35,0,11
	.byte	'CRCE3',0,1
	.word	419
	.byte	1,0,2,35,0,11
	.byte	'R1EE',0,1
	.word	419
	.byte	1,7,2,35,1,11
	.byte	'U1EE',0,1
	.word	419
	.byte	1,6,2,35,1,11
	.byte	'R1SE',0,1
	.word	419
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	419
	.byte	5,0,2,35,1,11
	.byte	'CALF',0,1
	.word	419
	.byte	1,7,2,35,2,11
	.byte	'FWF',0,1
	.word	419
	.byte	1,6,2,35,2,11
	.byte	'REF',0,1
	.word	419
	.byte	1,5,2,35,2,11
	.byte	'UEF',0,1
	.word	419
	.byte	1,4,2,35,2,11
	.byte	'CRCF0',0,1
	.word	419
	.byte	1,3,2,35,2,11
	.byte	'CRCF1',0,1
	.word	419
	.byte	1,2,2,35,2,11
	.byte	'CRCF2',0,1
	.word	419
	.byte	1,1,2,35,2,11
	.byte	'CRCF3',0,1
	.word	419
	.byte	1,0,2,35,2,11
	.byte	'R1EF',0,1
	.word	419
	.byte	1,7,2,35,3,11
	.byte	'U1EF',0,1
	.word	419
	.byte	1,6,2,35,3,11
	.byte	'R1SF',0,1
	.word	419
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	419
	.byte	2,3,2,35,3,11
	.byte	'SMCF',0,1
	.word	419
	.byte	1,2,2,35,3,11
	.byte	'REGCRCF',0,1
	.word	419
	.byte	1,1,2,35,3,11
	.byte	'LOCKIF',0,1
	.word	419
	.byte	1,0,2,35,3,0,12,6,195,4,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	2567
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_FLAGSSET_Bits',0,6,229,1,16,4,11
	.byte	'reserved_0',0,2
	.word	983
	.byte	16,0,2,35,0,11
	.byte	'CALS',0,1
	.word	419
	.byte	1,7,2,35,2,11
	.byte	'FWS',0,1
	.word	419
	.byte	1,6,2,35,2,11
	.byte	'RES',0,1
	.word	419
	.byte	1,5,2,35,2,11
	.byte	'UES',0,1
	.word	419
	.byte	1,4,2,35,2,11
	.byte	'CRCS0',0,1
	.word	419
	.byte	1,3,2,35,2,11
	.byte	'CRCS1',0,1
	.word	419
	.byte	1,2,2,35,2,11
	.byte	'CRCS2',0,1
	.word	419
	.byte	1,1,2,35,2,11
	.byte	'CRCS3',0,1
	.word	419
	.byte	1,0,2,35,2,11
	.byte	'R1ES',0,1
	.word	419
	.byte	1,7,2,35,3,11
	.byte	'U1ES',0,1
	.word	419
	.byte	1,6,2,35,3,11
	.byte	'R1SS',0,1
	.word	419
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	419
	.byte	5,0,2,35,3,0,12,6,163,4,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3088
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_FLAGSCL_Bits',0,6,208,1,16,4,11
	.byte	'reserved_0',0,2
	.word	983
	.byte	16,0,2,35,0,11
	.byte	'CALC',0,1
	.word	419
	.byte	1,7,2,35,2,11
	.byte	'FWC',0,1
	.word	419
	.byte	1,6,2,35,2,11
	.byte	'REC',0,1
	.word	419
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	419
	.byte	1,4,2,35,2,11
	.byte	'CRCC0',0,1
	.word	419
	.byte	1,3,2,35,2,11
	.byte	'CRCC1',0,1
	.word	419
	.byte	1,2,2,35,2,11
	.byte	'CRCC2',0,1
	.word	419
	.byte	1,1,2,35,2,11
	.byte	'CRCC3',0,1
	.word	419
	.byte	1,0,2,35,2,11
	.byte	'R1EC',0,1
	.word	419
	.byte	1,7,2,35,3,11
	.byte	'U1EC',0,1
	.word	419
	.byte	1,6,2,35,3,11
	.byte	'R1SC',0,1
	.word	419
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	419
	.byte	2,3,2,35,3,11
	.byte	'SMCC',0,1
	.word	419
	.byte	1,2,2,35,3,11
	.byte	'REGCRCC',0,1
	.word	419
	.byte	1,1,2,35,3,11
	.byte	'LOCKIC',0,1
	.word	419
	.byte	1,0,2,35,3,0,12,6,155,4,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3380
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_FWDG_Bits',0,6,135,2,16,4,11
	.byte	'THRESHOLD',0,2
	.word	983
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,4
	.word	396
	.byte	22,0,2,35,0,0,12,6,179,4,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3732
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_DFU_Bits',0,6,173,1,16,4,11
	.byte	'DF',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'DA',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'MSB',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	396
	.byte	29,0,2,35,0,0,12,6,131,4,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3842
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_SRIFOVRCFG_Bits',0,6,191,3,16,4,11
	.byte	'SKMR',0,1
	.word	419
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	396
	.byte	30,0,2,35,0,0,12,6,187,5,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	3972
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_RSM2CAP_Bits',0,6,164,3,16,4,11
	.byte	'reserved_0',0,2
	.word	983
	.byte	16,0,2,35,0,11
	.byte	'ENDSAMPLE',0,2
	.word	983
	.byte	12,4,2,35,2,11
	.byte	'reserved_28',0,1
	.word	419
	.byte	4,0,2,35,3,0,12,6,163,5,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4082
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_SKEWCAL_Bits',0,6,180,3,16,4,11
	.byte	'VALUE',0,1
	.word	419
	.byte	8,0,2,35,0,11
	.byte	'ACCP',0,1
	.word	419
	.byte	2,6,2,35,1,11
	.byte	'ACCN',0,1
	.word	419
	.byte	2,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	419
	.byte	4,0,2,35,1,11
	.byte	'CALRESULT',0,1
	.word	419
	.byte	8,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	419
	.byte	8,0,2,35,3,0,12,6,179,5,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4217
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_LVDSCON0_Bits',0,6,220,2,16,4,11
	.byte	'FRAME',0,1
	.word	419
	.byte	8,0,2,35,0,11
	.byte	'CLK',0,1
	.word	419
	.byte	8,0,2,35,1,11
	.byte	'DATA0',0,1
	.word	419
	.byte	8,0,2,35,2,11
	.byte	'DATA1',0,1
	.word	419
	.byte	8,0,2,35,3,0,12,6,235,4,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4402
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_LVDSCON1_Bits',0,6,229,2,16,4,11
	.byte	'DATA2',0,1
	.word	419
	.byte	8,0,2,35,0,11
	.byte	'DATA3',0,1
	.word	419
	.byte	8,0,2,35,1,11
	.byte	'MISC',0,1
	.word	419
	.byte	3,5,2,35,2,11
	.byte	'RTERM',0,1
	.word	419
	.byte	3,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	419
	.byte	2,0,2,35,2,11
	.byte	'PWRDN',0,1
	.word	419
	.byte	1,7,2,35,3,11
	.byte	'LVDS5VEN',0,1
	.word	419
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	419
	.byte	6,0,2,35,3,0,12,6,243,4,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4538
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_DBGDLY0_Bits',0,6,135,1,16,4,11
	.byte	'FDLY0',0,1
	.word	419
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'CDLY0',0,1
	.word	419
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	419
	.byte	1,0,2,35,0,11
	.byte	'DDLY0',0,1
	.word	419
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	419
	.byte	1,4,2,35,1,11
	.byte	'FDLY1',0,1
	.word	419
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	419
	.byte	1,0,2,35,1,11
	.byte	'CDLY1',0,1
	.word	419
	.byte	3,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	419
	.byte	1,4,2,35,2,11
	.byte	'DDLY1',0,1
	.word	419
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,2
	.word	983
	.byte	9,0,2,35,2,0,12,6,243,3,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	4758
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_DBGDLY1_Bits',0,6,152,1,16,4,11
	.byte	'FDLY2',0,1
	.word	419
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'CDLY2',0,1
	.word	419
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	419
	.byte	1,0,2,35,0,11
	.byte	'DDLY2',0,1
	.word	419
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	419
	.byte	1,4,2,35,1,11
	.byte	'FDLY3',0,1
	.word	419
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	419
	.byte	1,0,2,35,1,11
	.byte	'CDLY3',0,1
	.word	419
	.byte	3,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	419
	.byte	1,4,2,35,2,11
	.byte	'DDLY3',0,1
	.word	419
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	419
	.byte	1,0,2,35,2,11
	.byte	'BMDLY0',0,1
	.word	419
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	419
	.byte	1,4,2,35,3,11
	.byte	'BMDLY1',0,1
	.word	419
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	419
	.byte	1,0,2,35,3,0,12,6,251,3,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5065
	.byte	4,2,35,0,0,15,36
	.word	419
	.byte	16,35,0,10
	.byte	'_Ifx_RIF_DBG0_Bits',0,6,121,16,4,11
	.byte	'DD1',0,2
	.word	983
	.byte	16,0,2,35,0,11
	.byte	'DD2',0,2
	.word	983
	.byte	16,0,2,35,2,0,12,6,227,3,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5463
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_DBG1_Bits',0,6,128,1,16,4,11
	.byte	'DD3',0,2
	.word	983
	.byte	16,0,2,35,0,11
	.byte	'DD4',0,2
	.word	983
	.byte	16,0,2,35,2,0,12,6,235,3,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5558
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_SFCON_Bits',0,6,172,3,16,4,11
	.byte	'LOCKIEN',0,1
	.word	419
	.byte	2,6,2,35,0,11
	.byte	'SPUCRCEN',0,1
	.word	419
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	396
	.byte	28,0,2,35,0,0,12,6,171,5,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5654
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_REGCRC_Bits',0,6,255,2,16,4,11
	.byte	'CRC',0,4
	.word	396
	.byte	32,0,2,35,0,0,12,6,131,5,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5782
	.byte	4,2,35,0,0,15,88
	.word	419
	.byte	16,87,0,10
	.byte	'_Ifx_RIF_OCS_Bits',0,6,242,2,16,4,11
	.byte	'TGS',0,1
	.word	419
	.byte	2,6,2,35,0,11
	.byte	'TGB',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'TG_P',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	396
	.byte	20,8,2,35,0,11
	.byte	'SUS',0,1
	.word	419
	.byte	4,4,2,35,3,11
	.byte	'SUS_P',0,1
	.word	419
	.byte	1,3,2,35,3,11
	.byte	'SUSSTA',0,1
	.word	419
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	419
	.byte	2,0,2,35,3,0,12,6,251,4,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	5874
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_KRSTCLR_Bits',0,6,213,2,16,4,11
	.byte	'CLR',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	396
	.byte	31,0,2,35,0,0,12,6,227,4,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6080
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_KRST1_Bits',0,6,206,2,16,4,11
	.byte	'RST',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,4
	.word	396
	.byte	31,0,2,35,0,0,12,6,219,4,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6186
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_KRST0_Bits',0,6,198,2,16,4,11
	.byte	'RST',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'RSTSTAT',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	396
	.byte	30,0,2,35,0,0,12,6,211,4,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6290
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_ACCEN1_Bits',0,6,105,16,4,11
	.byte	'reserved_0',0,4
	.word	396
	.byte	32,0,2,35,0,0,12,6,211,3,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6413
	.byte	4,2,35,0,0,10
	.byte	'_Ifx_RIF_ACCEN0_Bits',0,6,68,16,4,11
	.byte	'EN0',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	419
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	419
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	419
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	419
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	419
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	419
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	419
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	419
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	419
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	419
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	419
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	419
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	419
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	419
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	419
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	419
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	419
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	419
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	419
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	419
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	419
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	419
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	419
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	419
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	419
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	419
	.byte	1,0,2,35,3,0,12,6,203,3,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	6502
	.byte	4,2,35,0,0,15,255,253,3
	.word	419
	.byte	16,254,253,3,0,10
	.byte	'_Ifx_RIF',0,6,204,5,25,128,128,4,13
	.byte	'CLC',0
	.word	934
	.byte	4,2,35,0,13
	.byte	'reserved_4',0
	.word	974
	.byte	4,2,35,4,13
	.byte	'ID',0
	.word	1087
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	974
	.byte	4,2,35,12,13
	.byte	'ESI',0
	.word	1339
	.byte	4,2,35,16,13
	.byte	'IPI',0
	.word	1594
	.byte	4,2,35,20,13
	.byte	'FLM',0
	.word	1870
	.byte	4,2,35,24,13
	.byte	'DMI',0
	.word	2021
	.byte	4,2,35,28,13
	.byte	'RSM0',0
	.word	2145
	.byte	4,2,35,32,13
	.byte	'RSM1',0
	.word	2375
	.byte	4,2,35,36,13
	.byte	'RSM2',0
	.word	2527
	.byte	4,2,35,40,13
	.byte	'INTCON',0
	.word	3048
	.byte	4,2,35,44,13
	.byte	'FLAGSSET',0
	.word	3340
	.byte	4,2,35,48,13
	.byte	'FLAGSCL',0
	.word	3692
	.byte	4,2,35,52,13
	.byte	'FWDG',0
	.word	3802
	.byte	4,2,35,56,13
	.byte	'DFU',0
	.word	3932
	.byte	4,2,35,60,13
	.byte	'SRIFOVRCFG',0
	.word	4042
	.byte	4,2,35,64,13
	.byte	'RSM2CAP',0
	.word	4177
	.byte	4,2,35,68,13
	.byte	'SKEWCAL',0
	.word	4362
	.byte	4,2,35,72,13
	.byte	'LVDSCON0',0
	.word	4498
	.byte	4,2,35,76,13
	.byte	'LVDSCON1',0
	.word	4718
	.byte	4,2,35,80,13
	.byte	'DBGDLY0',0
	.word	5025
	.byte	4,2,35,84,13
	.byte	'DBGDLY1',0
	.word	5414
	.byte	4,2,35,88,13
	.byte	'reserved_5C',0
	.word	5454
	.byte	36,2,35,92,13
	.byte	'DBG0',0
	.word	5518
	.byte	4,3,35,128,1,13
	.byte	'DBG1',0
	.word	5614
	.byte	4,3,35,132,1,13
	.byte	'SFCON',0
	.word	5742
	.byte	4,3,35,136,1,13
	.byte	'REGCRC',0
	.word	5825
	.byte	4,3,35,140,1,13
	.byte	'reserved_90',0
	.word	5865
	.byte	88,3,35,144,1,13
	.byte	'OCS',0
	.word	6040
	.byte	4,3,35,232,1,13
	.byte	'KRSTCLR',0
	.word	6146
	.byte	4,3,35,236,1,13
	.byte	'KRST1',0
	.word	6250
	.byte	4,3,35,240,1,13
	.byte	'KRST0',0
	.word	6373
	.byte	4,3,35,244,1,13
	.byte	'ACCEN1',0
	.word	6462
	.byte	4,3,35,248,1,13
	.byte	'ACCEN0',0
	.word	7031
	.byte	4,3,35,252,1,13
	.byte	'reserved_100',0
	.word	7071
	.byte	255,253,3,3,35,128,2,0,14
	.word	7084
.L87:
	.byte	3
	.word	7692
.L130:
	.byte	17,5,176,1,9,1,18
	.byte	'IfxRif_FifoId_0',0,0,18
	.byte	'IfxRif_FifoId_1',0,1,18
	.byte	'IfxRif_FifoId_2',0,2,18
	.byte	'IfxRif_FifoId_3',0,3,0
.L91:
	.byte	4
	.byte	'IfxRif_enableFifo',0,3,5,220,6,17,1,1
.L92:
	.byte	5
	.byte	'rif',0,5,220,6,44
	.word	7697
.L94:
	.byte	5
	.byte	'fifoId',0,5,220,6,63
	.word	7702
.L96:
	.byte	6,0
.L114:
	.byte	8
	.byte	'IfxRif_isModuleEnabled',0,3,5,162,7,20
	.word	419
	.byte	1,1
.L116:
	.byte	5
	.byte	'rif',0,5,162,7,52
	.word	7697
.L118:
	.byte	6,0,19
	.word	412
	.byte	20
	.byte	'__c11_atomic_thread_fence',0,1,1,1,1,21
	.word	7888
	.byte	0,14
	.word	396
	.byte	3
	.word	396
	.byte	22
	.byte	'__cmpswapw',0
	.word	7930
	.byte	1,1,1,1,23
	.byte	'p',0
	.word	7935
	.byte	23
	.byte	'value',0
	.word	396
	.byte	23
	.byte	'compare',0
	.word	396
	.byte	0,24
	.word	172
	.byte	25
	.word	198
	.byte	6,0,24
	.word	233
	.byte	25
	.word	265
	.byte	6,0,24
	.word	315
	.byte	25
	.word	334
	.byte	6,0,24
	.word	350
	.byte	25
	.word	365
	.byte	25
	.word	379
	.byte	6,0,24
	.word	775
	.byte	25
	.word	803
	.byte	6,0,26
	.byte	'IfxScuWdt_clearCpuEndinit',0,7,237,1,17,1,1,1,1,5
	.byte	'password',0,7,237,1,50
	.word	983
	.byte	0,26
	.byte	'IfxScuWdt_setCpuEndinit',0,7,157,2,17,1,1,1,1,5
	.byte	'password',0,7,157,2,48
	.word	983
	.byte	0,27
	.byte	'IfxScuWdt_getCpuWatchdogPassword',0,7,215,3,19
	.word	983
	.byte	1,1,1,1,24
	.word	7781
	.byte	25
	.word	7807
	.byte	25
	.word	7820
	.byte	6,0,24
	.word	7838
	.byte	25
	.word	7873
	.byte	6,0
.L120:
	.byte	17,8,79,9,1,18
	.byte	'IfxRif_Index_none',0,127,18
	.byte	'IfxRif_Index_0',0,0,18
	.byte	'IfxRif_Index_1',0,1,0
.L125:
	.byte	7
	.byte	'unsigned long int',0,4,7,7
	.byte	'short int',0,2,5,28
	.byte	'__wchar_t',0,9,1,1
	.word	8319
	.byte	28
	.byte	'__size_t',0,9,1,1
	.word	396
	.byte	28
	.byte	'__ptrdiff_t',0,9,1,1
	.word	412
	.byte	29,1,3
	.word	8387
	.byte	28
	.byte	'__codeptr',0,9,1,1
	.word	8389
	.byte	28
	.byte	'boolean',0,10,104,29
	.word	419
	.byte	28
	.byte	'uint8',0,10,108,29
	.word	419
	.byte	28
	.byte	'uint16',0,10,112,29
	.word	983
	.byte	28
	.byte	'uint32',0,10,116,29
	.word	8298
	.byte	28
	.byte	'uint64',0,10,121,29
	.word	278
	.byte	28
	.byte	'sint16',0,10,129,1,29
	.word	8319
	.byte	7
	.byte	'long int',0,4,5,28
	.byte	'sint32',0,10,134,1,29
	.word	8503
	.byte	7
	.byte	'long long int',0,8,5,28
	.byte	'sint64',0,10,141,1,29
	.word	8531
	.byte	28
	.byte	'float32',0,10,170,1,29
	.word	224
	.byte	28
	.byte	'pvoid',0,11,54,28
	.word	310
	.byte	28
	.byte	'Ifx_TickTime',0,11,76,28
	.word	8531
	.byte	28
	.byte	'Ifx_Priority',0,11,100,16
	.word	983
	.byte	14
	.word	304
	.byte	3
	.word	8637
	.byte	30,11,140,1,9,8,13
	.byte	'module',0
	.word	8642
	.byte	4,2,35,0,13
	.byte	'index',0
	.word	8503
	.byte	4,2,35,4,0,28
	.byte	'IfxModule_IndexMap',0,11,144,1,3
	.word	8647
	.byte	28
	.byte	'Ifx_UReg_8Bit',0,12,96,24
	.word	419
	.byte	28
	.byte	'Ifx_UReg_32Bit',0,12,98,24
	.word	396
	.byte	28
	.byte	'Ifx_SReg_32Bit',0,12,101,24
	.word	412
	.byte	28
	.byte	'Ifx_RIF_ACCEN0_Bits',0,6,102,3
	.word	6502
	.byte	28
	.byte	'Ifx_RIF_ACCEN1_Bits',0,6,108,3
	.word	6413
	.byte	28
	.byte	'Ifx_RIF_CLC_Bits',0,6,118,3
	.word	818
	.byte	28
	.byte	'Ifx_RIF_DBG0_Bits',0,6,125,3
	.word	5463
	.byte	28
	.byte	'Ifx_RIF_DBG1_Bits',0,6,132,1,3
	.word	5558
	.byte	28
	.byte	'Ifx_RIF_DBGDLY0_Bits',0,6,149,1,3
	.word	4758
	.byte	28
	.byte	'Ifx_RIF_DBGDLY1_Bits',0,6,170,1,3
	.word	5065
	.byte	28
	.byte	'Ifx_RIF_DFU_Bits',0,6,179,1,3
	.word	3842
	.byte	28
	.byte	'Ifx_RIF_DMI_Bits',0,6,189,1,3
	.word	1910
	.byte	28
	.byte	'Ifx_RIF_ESI_Bits',0,6,205,1,3
	.word	1127
	.byte	28
	.byte	'Ifx_RIF_FLAGSCL_Bits',0,6,226,1,3
	.word	3380
	.byte	28
	.byte	'Ifx_RIF_FLAGSSET_Bits',0,6,244,1,3
	.word	3088
	.byte	28
	.byte	'Ifx_RIF_FLM_Bits',0,6,132,2,3
	.word	1634
	.byte	28
	.byte	'Ifx_RIF_FWDG_Bits',0,6,139,2,3
	.word	3732
	.byte	28
	.byte	'Ifx_RIF_ID_Bits',0,6,147,2,3
	.word	1005
	.byte	28
	.byte	'Ifx_RIF_INTCON_Bits',0,6,179,2,3
	.word	2567
	.byte	28
	.byte	'Ifx_RIF_IPI_Bits',0,6,195,2,3
	.word	1379
	.byte	28
	.byte	'Ifx_RIF_KRST0_Bits',0,6,203,2,3
	.word	6290
	.byte	28
	.byte	'Ifx_RIF_KRST1_Bits',0,6,210,2,3
	.word	6186
	.byte	28
	.byte	'Ifx_RIF_KRSTCLR_Bits',0,6,217,2,3
	.word	6080
	.byte	28
	.byte	'Ifx_RIF_LVDSCON0_Bits',0,6,226,2,3
	.word	4402
	.byte	28
	.byte	'Ifx_RIF_LVDSCON1_Bits',0,6,239,2,3
	.word	4538
	.byte	28
	.byte	'Ifx_RIF_OCS_Bits',0,6,252,2,3
	.word	5874
	.byte	28
	.byte	'Ifx_RIF_REGCRC_Bits',0,6,130,3,3
	.word	5782
	.byte	28
	.byte	'Ifx_RIF_RSM0_Bits',0,6,138,3,3
	.word	2061
	.byte	28
	.byte	'Ifx_RIF_RSM1_Bits',0,6,152,3,3
	.word	2185
	.byte	28
	.byte	'Ifx_RIF_RSM2_Bits',0,6,161,3,3
	.word	2415
	.byte	28
	.byte	'Ifx_RIF_RSM2CAP_Bits',0,6,169,3,3
	.word	4082
	.byte	28
	.byte	'Ifx_RIF_SFCON_Bits',0,6,177,3,3
	.word	5654
	.byte	28
	.byte	'Ifx_RIF_SKEWCAL_Bits',0,6,188,3,3
	.word	4217
	.byte	28
	.byte	'Ifx_RIF_SRIFOVRCFG_Bits',0,6,195,3,3
	.word	3972
	.byte	28
	.byte	'Ifx_RIF_ACCEN0',0,6,208,3,3
	.word	7031
	.byte	28
	.byte	'Ifx_RIF_ACCEN1',0,6,216,3,3
	.word	6462
	.byte	28
	.byte	'Ifx_RIF_CLC',0,6,224,3,3
	.word	934
	.byte	28
	.byte	'Ifx_RIF_DBG0',0,6,232,3,3
	.word	5518
	.byte	28
	.byte	'Ifx_RIF_DBG1',0,6,240,3,3
	.word	5614
	.byte	28
	.byte	'Ifx_RIF_DBGDLY0',0,6,248,3,3
	.word	5025
	.byte	28
	.byte	'Ifx_RIF_DBGDLY1',0,6,128,4,3
	.word	5414
	.byte	28
	.byte	'Ifx_RIF_DFU',0,6,136,4,3
	.word	3932
	.byte	28
	.byte	'Ifx_RIF_DMI',0,6,144,4,3
	.word	2021
	.byte	28
	.byte	'Ifx_RIF_ESI',0,6,152,4,3
	.word	1339
	.byte	28
	.byte	'Ifx_RIF_FLAGSCL',0,6,160,4,3
	.word	3692
	.byte	28
	.byte	'Ifx_RIF_FLAGSSET',0,6,168,4,3
	.word	3340
	.byte	28
	.byte	'Ifx_RIF_FLM',0,6,176,4,3
	.word	1870
	.byte	28
	.byte	'Ifx_RIF_FWDG',0,6,184,4,3
	.word	3802
	.byte	28
	.byte	'Ifx_RIF_ID',0,6,192,4,3
	.word	1087
	.byte	28
	.byte	'Ifx_RIF_INTCON',0,6,200,4,3
	.word	3048
	.byte	28
	.byte	'Ifx_RIF_IPI',0,6,208,4,3
	.word	1594
	.byte	28
	.byte	'Ifx_RIF_KRST0',0,6,216,4,3
	.word	6373
	.byte	28
	.byte	'Ifx_RIF_KRST1',0,6,224,4,3
	.word	6250
	.byte	28
	.byte	'Ifx_RIF_KRSTCLR',0,6,232,4,3
	.word	6146
	.byte	28
	.byte	'Ifx_RIF_LVDSCON0',0,6,240,4,3
	.word	4498
	.byte	28
	.byte	'Ifx_RIF_LVDSCON1',0,6,248,4,3
	.word	4718
	.byte	28
	.byte	'Ifx_RIF_OCS',0,6,128,5,3
	.word	6040
	.byte	28
	.byte	'Ifx_RIF_REGCRC',0,6,136,5,3
	.word	5825
	.byte	28
	.byte	'Ifx_RIF_RSM0',0,6,144,5,3
	.word	2145
	.byte	28
	.byte	'Ifx_RIF_RSM1',0,6,152,5,3
	.word	2375
	.byte	28
	.byte	'Ifx_RIF_RSM2',0,6,160,5,3
	.word	2527
	.byte	28
	.byte	'Ifx_RIF_RSM2CAP',0,6,168,5,3
	.word	4177
	.byte	28
	.byte	'Ifx_RIF_SFCON',0,6,176,5,3
	.word	5742
	.byte	28
	.byte	'Ifx_RIF_SKEWCAL',0,6,184,5,3
	.word	4362
	.byte	28
	.byte	'Ifx_RIF_SRIFOVRCFG',0,6,192,5,3
	.word	4042
	.byte	14
	.word	7084
	.byte	28
	.byte	'Ifx_RIF',0,6,242,5,3
	.word	10372
	.byte	28
	.byte	'IfxRif_Index',0,8,84,3
	.word	8238
	.byte	15,16
	.word	8647
	.byte	16,1,0,31
	.byte	'IfxRif_cfg_indexMap',0,8,95,31
	.word	10415
	.byte	1,1,17,13,66,9,1,18
	.byte	'IfxSrc_Tos_cpu0',0,0,18
	.byte	'IfxSrc_Tos_dma',0,1,18
	.byte	'IfxSrc_Tos_cpu1',0,2,18
	.byte	'IfxSrc_Tos_cpu2',0,3,18
	.byte	'IfxSrc_Tos_cpu3',0,4,18
	.byte	'IfxSrc_Tos_cpu4',0,5,18
	.byte	'IfxSrc_Tos_cpu5',0,6,0,28
	.byte	'IfxSrc_Tos',0,13,75,3
	.word	10454
	.byte	28
	.byte	'Ifx_SRC_SRCR_Bits',0,4,85,3
	.word	436
	.byte	28
	.byte	'Ifx_SRC_SRCR',0,4,98,3
	.word	726
	.byte	10
	.byte	'_Ifx_SRC_CPU_CPU',0,4,110,25,4,13
	.byte	'SB',0
	.word	726
	.byte	4,2,35,0,0,14
	.word	10651
	.byte	28
	.byte	'Ifx_SRC_CPU_CPU',0,4,113,3
	.word	10686
	.byte	15,24
	.word	10651
	.byte	16,5,0,14
	.word	10715
	.byte	10
	.byte	'_Ifx_SRC_CPU',0,4,128,1,25,24,13
	.byte	'CPU',0
	.word	10724
	.byte	24,2,35,0,0,14
	.word	10729
	.byte	28
	.byte	'Ifx_SRC_CPU',0,4,131,1,3
	.word	10762
	.byte	10
	.byte	'_Ifx_SRC_AGBT_AGBT',0,4,146,1,25,4,13
	.byte	'SR',0
	.word	726
	.byte	4,2,35,0,0,14
	.word	10788
	.byte	28
	.byte	'Ifx_SRC_AGBT_AGBT',0,4,149,1,3
	.word	10826
	.byte	15,4
	.word	10788
	.byte	16,0,0,14
	.word	10858
	.byte	10
	.byte	'_Ifx_SRC_AGBT',0,4,164,1,25,4,13
	.byte	'AGBT',0
	.word	10867
	.byte	4,2,35,0,0,14
	.word	10872
	.byte	28
	.byte	'Ifx_SRC_AGBT',0,4,167,1,3
	.word	10907
	.byte	10
	.byte	'_Ifx_SRC_XBAR_XBAR',0,4,182,1,25,4,13
	.byte	'SR',0
	.word	726
	.byte	4,2,35,0,0,14
	.word	10934
	.byte	28
	.byte	'Ifx_SRC_XBAR_XBAR',0,4,185,1,3
	.word	10972
	.byte	15,12
	.word	10934
	.byte	16,2,0,14
	.word	11004
	.byte	10
	.byte	'_Ifx_SRC_XBAR',0,4,200,1,25,12,13
	.byte	'XBAR',0
	.word	11013
	.byte	12,2,35,0,0,14
	.word	11018
	.byte	28
	.byte	'Ifx_SRC_XBAR',0,4,203,1,3
	.word	11053
	.byte	15,8
	.word	726
	.byte	16,1,0,10
	.byte	'_Ifx_SRC_CERBERUS_CERBERUS',0,4,218,1,25,8,13
	.byte	'SR',0
	.word	11080
	.byte	8,2,35,0,0,14
	.word	11089
	.byte	28
	.byte	'Ifx_SRC_CERBERUS_CERBERUS',0,4,221,1,3
	.word	11135
	.byte	14
	.word	11089
	.byte	10
	.byte	'_Ifx_SRC_CERBERUS',0,4,236,1,25,8,13
	.byte	'CERBERUS',0
	.word	11175
	.byte	8,2,35,0,0,14
	.word	11180
	.byte	28
	.byte	'Ifx_SRC_CERBERUS',0,4,239,1,3
	.word	11223
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN_ASCLIN',0,4,254,1,25,12,13
	.byte	'TX',0
	.word	726
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	726
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	726
	.byte	4,2,35,8,0,14
	.word	11254
	.byte	28
	.byte	'Ifx_SRC_ASCLIN_ASCLIN',0,4,131,2,3
	.word	11321
	.byte	15,144,1
	.word	11254
	.byte	16,11,0,14
	.word	11357
	.byte	10
	.byte	'_Ifx_SRC_ASCLIN',0,4,146,2,25,144,1,13
	.byte	'ASCLIN',0
	.word	11367
	.byte	144,1,2,35,0,0,14
	.word	11372
	.byte	28
	.byte	'Ifx_SRC_ASCLIN',0,4,149,2,3
	.word	11413
	.byte	10
	.byte	'_Ifx_SRC_QSPI_QSPI',0,4,164,2,25,20,13
	.byte	'TX',0
	.word	726
	.byte	4,2,35,0,13
	.byte	'RX',0
	.word	726
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	726
	.byte	4,2,35,8,13
	.byte	'PT',0
	.word	726
	.byte	4,2,35,12,13
	.byte	'U',0
	.word	726
	.byte	4,2,35,16,0,14
	.word	11442
	.byte	28
	.byte	'Ifx_SRC_QSPI_QSPI',0,4,171,2,3
	.word	11528
	.byte	15,120
	.word	11442
	.byte	16,5,0,14
	.word	11560
	.byte	10
	.byte	'_Ifx_SRC_QSPI',0,4,186,2,25,120,13
	.byte	'QSPI',0
	.word	11569
	.byte	120,2,35,0,0,14
	.word	11574
	.byte	28
	.byte	'Ifx_SRC_QSPI',0,4,189,2,3
	.word	11609
	.byte	10
	.byte	'_Ifx_SRC_HSCT_HSCT',0,4,204,2,25,4,13
	.byte	'SR',0
	.word	726
	.byte	4,2,35,0,0,14
	.word	11636
	.byte	28
	.byte	'Ifx_SRC_HSCT_HSCT',0,4,207,2,3
	.word	11674
	.byte	15,8
	.word	11636
	.byte	16,1,0,14
	.word	11706
	.byte	10
	.byte	'_Ifx_SRC_HSCT',0,4,222,2,25,8,13
	.byte	'HSCT',0
	.word	11715
	.byte	8,2,35,0,0,14
	.word	11720
	.byte	28
	.byte	'Ifx_SRC_HSCT',0,4,225,2,3
	.word	11755
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL_CH',0,4,240,2,25,16,13
	.byte	'COK',0
	.word	726
	.byte	4,2,35,0,13
	.byte	'RDI',0
	.word	726
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	726
	.byte	4,2,35,8,13
	.byte	'TRG',0
	.word	726
	.byte	4,2,35,12,0,14
	.word	11782
	.byte	28
	.byte	'Ifx_SRC_HSSL_HSSL_CH',0,4,246,2,3
	.word	11863
	.byte	15,64
	.word	11782
	.byte	16,3,0,14
	.word	11898
	.byte	10
	.byte	'_Ifx_SRC_HSSL_HSSL',0,4,133,3,25,68,13
	.byte	'CH',0
	.word	11907
	.byte	64,2,35,0,13
	.byte	'EXI',0
	.word	726
	.byte	4,2,35,64,0,14
	.word	11912
	.byte	28
	.byte	'Ifx_SRC_HSSL_HSSL',0,4,137,3,3
	.word	11963
	.byte	15,136,1
	.word	11912
	.byte	16,1,0,14
	.word	11995
	.byte	10
	.byte	'_Ifx_SRC_HSSL',0,4,152,3,25,136,1,13
	.byte	'HSSL',0
	.word	12005
	.byte	136,1,2,35,0,0,14
	.word	12010
	.byte	28
	.byte	'Ifx_SRC_HSSL',0,4,155,3,3
	.word	12047
	.byte	10
	.byte	'_Ifx_SRC_I2C_I2C',0,4,170,3,25,16,13
	.byte	'DTR',0
	.word	726
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	726
	.byte	4,2,35,4,13
	.byte	'P',0
	.word	726
	.byte	4,2,35,8,13
	.byte	'reserved_C',0
	.word	974
	.byte	4,2,35,12,0,14
	.word	12074
	.byte	28
	.byte	'Ifx_SRC_I2C_I2C',0,4,176,3,3
	.word	12155
	.byte	15,32
	.word	12074
	.byte	16,1,0,14
	.word	12185
	.byte	10
	.byte	'_Ifx_SRC_I2C',0,4,191,3,25,32,13
	.byte	'I2C',0
	.word	12194
	.byte	32,2,35,0,0,14
	.word	12199
	.byte	28
	.byte	'Ifx_SRC_I2C',0,4,194,3,3
	.word	12232
	.byte	10
	.byte	'_Ifx_SRC_SENT_SENT',0,4,209,3,25,4,13
	.byte	'SR',0
	.word	726
	.byte	4,2,35,0,0,14
	.word	12258
	.byte	28
	.byte	'Ifx_SRC_SENT_SENT',0,4,212,3,3
	.word	12296
	.byte	15,40
	.word	12258
	.byte	16,9,0,14
	.word	12328
	.byte	10
	.byte	'_Ifx_SRC_SENT',0,4,227,3,25,40,13
	.byte	'SENT',0
	.word	12337
	.byte	40,2,35,0,0,14
	.word	12342
	.byte	28
	.byte	'Ifx_SRC_SENT',0,4,230,3,3
	.word	12377
	.byte	15,20
	.word	726
	.byte	16,4,0,10
	.byte	'_Ifx_SRC_MSC_MSC',0,4,245,3,25,20,13
	.byte	'SR',0
	.word	12404
	.byte	20,2,35,0,0,14
	.word	12413
	.byte	28
	.byte	'Ifx_SRC_MSC_MSC',0,4,248,3,3
	.word	12449
	.byte	15,80
	.word	12413
	.byte	16,3,0,14
	.word	12479
	.byte	10
	.byte	'_Ifx_SRC_MSC',0,4,135,4,25,80,13
	.byte	'MSC',0
	.word	12488
	.byte	80,2,35,0,0,14
	.word	12493
	.byte	28
	.byte	'Ifx_SRC_MSC',0,4,138,4,3
	.word	12526
	.byte	15,16
	.word	726
	.byte	16,3,0,10
	.byte	'_Ifx_SRC_CCU6_CCU',0,4,153,4,25,16,13
	.byte	'SR',0
	.word	12552
	.byte	16,2,35,0,0,14
	.word	12561
	.byte	28
	.byte	'Ifx_SRC_CCU6_CCU',0,4,156,4,3
	.word	12598
	.byte	15,32
	.word	12561
	.byte	16,1,0,14
	.word	12629
	.byte	10
	.byte	'_Ifx_SRC_CCU6',0,4,171,4,25,32,13
	.byte	'CCU',0
	.word	12638
	.byte	32,2,35,0,0,14
	.word	12643
	.byte	28
	.byte	'Ifx_SRC_CCU6',0,4,174,4,3
	.word	12677
	.byte	10
	.byte	'_Ifx_SRC_GPT12_GPT12',0,4,189,4,25,24,13
	.byte	'CIRQ',0
	.word	726
	.byte	4,2,35,0,13
	.byte	'T2',0
	.word	726
	.byte	4,2,35,4,13
	.byte	'T3',0
	.word	726
	.byte	4,2,35,8,13
	.byte	'T4',0
	.word	726
	.byte	4,2,35,12,13
	.byte	'T5',0
	.word	726
	.byte	4,2,35,16,13
	.byte	'T6',0
	.word	726
	.byte	4,2,35,20,0,14
	.word	12704
	.byte	28
	.byte	'Ifx_SRC_GPT12_GPT12',0,4,197,4,3
	.word	12806
	.byte	15,24
	.word	12704
	.byte	16,0,0,14
	.word	12840
	.byte	10
	.byte	'_Ifx_SRC_GPT12',0,4,212,4,25,24,13
	.byte	'GPT12',0
	.word	12849
	.byte	24,2,35,0,0,14
	.word	12854
	.byte	28
	.byte	'Ifx_SRC_GPT12',0,4,215,4,3
	.word	12891
	.byte	10
	.byte	'_Ifx_SRC_STM_STM',0,4,230,4,25,8,13
	.byte	'SR',0
	.word	11080
	.byte	8,2,35,0,0,14
	.word	12919
	.byte	28
	.byte	'Ifx_SRC_STM_STM',0,4,233,4,3
	.word	12955
	.byte	15,48
	.word	12919
	.byte	16,5,0,14
	.word	12985
	.byte	10
	.byte	'_Ifx_SRC_STM',0,4,248,4,25,48,13
	.byte	'STM',0
	.word	12994
	.byte	48,2,35,0,0,14
	.word	12999
	.byte	28
	.byte	'Ifx_SRC_STM',0,4,251,4,3
	.word	13032
	.byte	10
	.byte	'_Ifx_SRC_FCE_FCE0',0,4,138,5,25,4,13
	.byte	'SR',0
	.word	726
	.byte	4,2,35,0,0,14
	.word	13058
	.byte	28
	.byte	'Ifx_SRC_FCE_FCE0',0,4,141,5,3
	.word	13095
	.byte	14
	.word	13058
	.byte	10
	.byte	'_Ifx_SRC_FCE',0,4,156,5,25,4,13
	.byte	'FCE0',0
	.word	13126
	.byte	4,2,35,0,0,14
	.word	13131
	.byte	28
	.byte	'Ifx_SRC_FCE',0,4,159,5,3
	.word	13165
	.byte	15,32
	.word	419
	.byte	16,31,0,15,128,4
	.word	726
	.byte	16,127,0,10
	.byte	'_Ifx_SRC_DMA_DMA',0,4,174,5,25,176,4,13
	.byte	'ERR',0
	.word	12552
	.byte	16,2,35,0,13
	.byte	'reserved_10',0
	.word	13191
	.byte	32,2,35,16,13
	.byte	'CH',0
	.word	13200
	.byte	128,4,2,35,48,0,14
	.word	13210
	.byte	28
	.byte	'Ifx_SRC_DMA_DMA',0,4,179,5,3
	.word	13282
	.byte	15,176,4
	.word	13210
	.byte	16,0,0,14
	.word	13312
	.byte	10
	.byte	'_Ifx_SRC_DMA',0,4,194,5,25,176,4,13
	.byte	'DMA',0
	.word	13322
	.byte	176,4,2,35,0,0,14
	.word	13327
	.byte	28
	.byte	'Ifx_SRC_DMA',0,4,197,5,3
	.word	13362
	.byte	10
	.byte	'_Ifx_SRC_SDMMC_SDMMC',0,4,212,5,25,8,13
	.byte	'ERR',0
	.word	726
	.byte	4,2,35,0,13
	.byte	'DMA',0
	.word	726
	.byte	4,2,35,4,0,14
	.word	13388
	.byte	28
	.byte	'Ifx_SRC_SDMMC_SDMMC',0,4,216,5,3
	.word	13442
	.byte	15,8
	.word	13388
	.byte	16,0,0,14
	.word	13476
	.byte	10
	.byte	'_Ifx_SRC_SDMMC',0,4,231,5,25,8,13
	.byte	'SDMMC',0
	.word	13485
	.byte	8,2,35,0,0,14
	.word	13490
	.byte	28
	.byte	'Ifx_SRC_SDMMC',0,4,234,5,3
	.word	13527
	.byte	15,40
	.word	726
	.byte	16,9,0,10
	.byte	'_Ifx_SRC_GETH_GETH',0,4,249,5,25,40,13
	.byte	'SR',0
	.word	13555
	.byte	40,2,35,0,0,14
	.word	13564
	.byte	28
	.byte	'Ifx_SRC_GETH_GETH',0,4,252,5,3
	.word	13602
	.byte	15,40
	.word	13564
	.byte	16,0,0,14
	.word	13634
	.byte	10
	.byte	'_Ifx_SRC_GETH',0,4,139,6,25,40,13
	.byte	'GETH',0
	.word	13643
	.byte	40,2,35,0,0,14
	.word	13648
	.byte	28
	.byte	'Ifx_SRC_GETH',0,4,142,6,3
	.word	13683
	.byte	15,64
	.word	726
	.byte	16,15,0,10
	.byte	'_Ifx_SRC_CAN_CAN',0,4,157,6,25,64,13
	.byte	'INT',0
	.word	13710
	.byte	64,2,35,0,0,14
	.word	13719
	.byte	28
	.byte	'Ifx_SRC_CAN_CAN',0,4,160,6,3
	.word	13756
	.byte	15,192,1
	.word	13719
	.byte	16,2,0,14
	.word	13786
	.byte	10
	.byte	'_Ifx_SRC_CAN',0,4,175,6,25,192,1,13
	.byte	'CAN',0
	.word	13796
	.byte	192,1,2,35,0,0,14
	.word	13801
	.byte	28
	.byte	'Ifx_SRC_CAN',0,4,178,6,3
	.word	13836
	.byte	10
	.byte	'_Ifx_SRC_VADC_G',0,4,193,6,25,16,13
	.byte	'SR0',0
	.word	726
	.byte	4,2,35,0,13
	.byte	'SR1',0
	.word	726
	.byte	4,2,35,4,13
	.byte	'SR2',0
	.word	726
	.byte	4,2,35,8,13
	.byte	'SR3',0
	.word	726
	.byte	4,2,35,12,0,14
	.word	13862
	.byte	28
	.byte	'Ifx_SRC_VADC_G',0,4,199,6,3
	.word	13937
	.byte	10
	.byte	'_Ifx_SRC_VADC_FC',0,4,214,6,25,4,13
	.byte	'SR0',0
	.word	726
	.byte	4,2,35,0,0,14
	.word	13966
	.byte	28
	.byte	'Ifx_SRC_VADC_FC',0,4,217,6,3
	.word	14003
	.byte	15,192,1
	.word	13862
	.byte	16,11,0,14
	.word	14033
	.byte	15,32
	.word	13966
	.byte	16,7,0,14
	.word	14048
	.byte	15,32
	.word	13862
	.byte	16,1,0,14
	.word	14062
	.byte	10
	.byte	'_Ifx_SRC_VADC',0,4,233,6,25,128,2,13
	.byte	'G',0
	.word	14043
	.byte	192,1,2,35,0,13
	.byte	'FC',0
	.word	14057
	.byte	32,3,35,192,1,13
	.byte	'CG',0
	.word	14071
	.byte	32,3,35,224,1,0,14
	.word	14076
	.byte	28
	.byte	'Ifx_SRC_VADC',0,4,238,6,3
	.word	14136
	.byte	10
	.byte	'_Ifx_SRC_DSADC_DSADC',0,4,253,6,25,8,13
	.byte	'SRM',0
	.word	726
	.byte	4,2,35,0,13
	.byte	'SRA',0
	.word	726
	.byte	4,2,35,4,0,14
	.word	14163
	.byte	28
	.byte	'Ifx_SRC_DSADC_DSADC',0,4,129,7,3
	.word	14217
	.byte	15,112
	.word	14163
	.byte	16,13,0,14
	.word	14251
	.byte	10
	.byte	'_Ifx_SRC_DSADC',0,4,144,7,25,112,13
	.byte	'DSADC',0
	.word	14260
	.byte	112,2,35,0,0,14
	.word	14265
	.byte	28
	.byte	'Ifx_SRC_DSADC',0,4,147,7,3
	.word	14302
	.byte	15,8
	.word	419
	.byte	16,7,0,10
	.byte	'_Ifx_SRC_ERAY_ERAY',0,4,162,7,25,48,13
	.byte	'INT0',0
	.word	726
	.byte	4,2,35,0,13
	.byte	'INT1',0
	.word	726
	.byte	4,2,35,4,13
	.byte	'TINT0',0
	.word	726
	.byte	4,2,35,8,13
	.byte	'TINT1',0
	.word	726
	.byte	4,2,35,12,13
	.byte	'NDAT0',0
	.word	726
	.byte	4,2,35,16,13
	.byte	'NDAT1',0
	.word	726
	.byte	4,2,35,20,13
	.byte	'MBSC0',0
	.word	726
	.byte	4,2,35,24,13
	.byte	'MBSC1',0
	.word	726
	.byte	4,2,35,28,13
	.byte	'OBUSY',0
	.word	726
	.byte	4,2,35,32,13
	.byte	'IBUSY',0
	.word	726
	.byte	4,2,35,36,13
	.byte	'reserved_28',0
	.word	14330
	.byte	8,2,35,40,0,14
	.word	14339
	.byte	28
	.byte	'Ifx_SRC_ERAY_ERAY',0,4,175,7,3
	.word	14534
	.byte	15,96
	.word	14339
	.byte	16,1,0,14
	.word	14566
	.byte	10
	.byte	'_Ifx_SRC_ERAY',0,4,190,7,25,96,13
	.byte	'ERAY',0
	.word	14575
	.byte	96,2,35,0,0,14
	.word	14580
	.byte	28
	.byte	'Ifx_SRC_ERAY',0,4,193,7,3
	.word	14615
	.byte	10
	.byte	'_Ifx_SRC_HSM_HSM',0,4,208,7,25,8,13
	.byte	'HSM',0
	.word	11080
	.byte	8,2,35,0,0,14
	.word	14642
	.byte	28
	.byte	'Ifx_SRC_HSM_HSM',0,4,211,7,3
	.word	14679
	.byte	15,8
	.word	14642
	.byte	16,0,0,14
	.word	14709
	.byte	10
	.byte	'_Ifx_SRC_HSM',0,4,226,7,25,8,13
	.byte	'HSM',0
	.word	14718
	.byte	8,2,35,0,0,14
	.word	14723
	.byte	28
	.byte	'Ifx_SRC_HSM',0,4,229,7,3
	.word	14756
	.byte	10
	.byte	'_Ifx_SRC_SCU',0,4,244,7,25,16,13
	.byte	'SCUERU',0
	.word	12552
	.byte	16,2,35,0,0,14
	.word	14782
	.byte	28
	.byte	'Ifx_SRC_SCU',0,4,247,7,3
	.word	14818
	.byte	10
	.byte	'_Ifx_SRC_PMS_PMS',0,4,134,8,25,4,13
	.byte	'SR',0
	.word	726
	.byte	4,2,35,0,0,14
	.word	14844
	.byte	28
	.byte	'Ifx_SRC_PMS_PMS',0,4,137,8,3
	.word	14880
	.byte	15,16
	.word	14844
	.byte	16,3,0,14
	.word	14910
	.byte	10
	.byte	'_Ifx_SRC_PMS',0,4,152,8,25,16,13
	.byte	'PMS',0
	.word	14919
	.byte	16,2,35,0,0,14
	.word	14924
	.byte	28
	.byte	'Ifx_SRC_PMS',0,4,155,8,3
	.word	14957
	.byte	15,12
	.word	726
	.byte	16,2,0,10
	.byte	'_Ifx_SRC_SMU_SMU',0,4,170,8,25,12,13
	.byte	'SR',0
	.word	14983
	.byte	12,2,35,0,0,14
	.word	14992
	.byte	28
	.byte	'Ifx_SRC_SMU_SMU',0,4,173,8,3
	.word	15028
	.byte	15,12
	.word	14992
	.byte	16,0,0,14
	.word	15058
	.byte	10
	.byte	'_Ifx_SRC_SMU',0,4,188,8,25,12,13
	.byte	'SMU',0
	.word	15067
	.byte	12,2,35,0,0,14
	.word	15072
	.byte	28
	.byte	'Ifx_SRC_SMU',0,4,191,8,3
	.word	15105
	.byte	15,32
	.word	726
	.byte	16,7,0,10
	.byte	'_Ifx_SRC_PSI5_PSI5',0,4,206,8,25,32,13
	.byte	'SR',0
	.word	15131
	.byte	32,2,35,0,0,14
	.word	15140
	.byte	28
	.byte	'Ifx_SRC_PSI5_PSI5',0,4,209,8,3
	.word	15178
	.byte	15,32
	.word	15140
	.byte	16,0,0,14
	.word	15210
	.byte	10
	.byte	'_Ifx_SRC_PSI5',0,4,224,8,25,32,13
	.byte	'PSI5',0
	.word	15219
	.byte	32,2,35,0,0,14
	.word	15224
	.byte	28
	.byte	'Ifx_SRC_PSI5',0,4,227,8,3
	.word	15259
	.byte	10
	.byte	'_Ifx_SRC_HSPDM_HSPDM0',0,4,242,8,25,12,13
	.byte	'BFR',0
	.word	726
	.byte	4,2,35,0,13
	.byte	'RAMP',0
	.word	726
	.byte	4,2,35,4,13
	.byte	'ERR',0
	.word	726
	.byte	4,2,35,8,0,14
	.word	15286
	.byte	28
	.byte	'Ifx_SRC_HSPDM_HSPDM0',0,4,247,8,3
	.word	15355
	.byte	14
	.word	15286
	.byte	10
	.byte	'_Ifx_SRC_HSPDM',0,4,134,9,25,12,13
	.byte	'HSPDM0',0
	.word	15390
	.byte	12,2,35,0,0,14
	.word	15395
	.byte	28
	.byte	'Ifx_SRC_HSPDM',0,4,137,9,3
	.word	15433
	.byte	10
	.byte	'_Ifx_SRC_DAM_DAM',0,4,152,9,25,24,13
	.byte	'LI0',0
	.word	726
	.byte	4,2,35,0,13
	.byte	'RI0',0
	.word	726
	.byte	4,2,35,4,13
	.byte	'LI1',0
	.word	726
	.byte	4,2,35,8,13
	.byte	'RI1',0
	.word	726
	.byte	4,2,35,12,13
	.byte	'DR',0
	.word	726
	.byte	4,2,35,16,13
	.byte	'ERR',0
	.word	726
	.byte	4,2,35,20,0,14
	.word	15461
	.byte	28
	.byte	'Ifx_SRC_DAM_DAM',0,4,160,9,3
	.word	15562
	.byte	15,48
	.word	15461
	.byte	16,1,0,14
	.word	15592
	.byte	10
	.byte	'_Ifx_SRC_DAM',0,4,175,9,25,48,13
	.byte	'DAM',0
	.word	15601
	.byte	48,2,35,0,0,14
	.word	15606
	.byte	28
	.byte	'Ifx_SRC_DAM',0,4,178,9,3
	.word	15639
	.byte	10
	.byte	'_Ifx_SRC_PSI5S_PSI5S',0,4,193,9,25,32,13
	.byte	'SR',0
	.word	15131
	.byte	32,2,35,0,0,14
	.word	15665
	.byte	28
	.byte	'Ifx_SRC_PSI5S_PSI5S',0,4,196,9,3
	.word	15705
	.byte	15,32
	.word	15665
	.byte	16,0,0,14
	.word	15739
	.byte	10
	.byte	'_Ifx_SRC_PSI5S',0,4,211,9,25,32,13
	.byte	'PSI5S',0
	.word	15748
	.byte	32,2,35,0,0,14
	.word	15753
	.byte	28
	.byte	'Ifx_SRC_PSI5S',0,4,214,9,3
	.word	15790
	.byte	10
	.byte	'_Ifx_SRC_RIF_RIF',0,4,229,9,25,8,13
	.byte	'ERR',0
	.word	726
	.byte	4,2,35,0,13
	.byte	'INT',0
	.word	726
	.byte	4,2,35,4,0,14
	.word	15818
	.byte	28
	.byte	'Ifx_SRC_RIF_RIF',0,4,233,9,3
	.word	15868
	.byte	15,16
	.word	15818
	.byte	16,1,0,14
	.word	15898
	.byte	10
	.byte	'_Ifx_SRC_RIF',0,4,248,9,25,16,13
	.byte	'RIF',0
	.word	15907
	.byte	16,2,35,0,0,14
	.word	15912
	.byte	28
	.byte	'Ifx_SRC_RIF',0,4,251,9,3
	.word	15945
	.byte	10
	.byte	'_Ifx_SRC_SPU_SPU',0,4,138,10,25,8,13
	.byte	'INT',0
	.word	726
	.byte	4,2,35,0,13
	.byte	'ERR',0
	.word	726
	.byte	4,2,35,4,0,14
	.word	15971
	.byte	28
	.byte	'Ifx_SRC_SPU_SPU',0,4,142,10,3
	.word	16021
	.byte	15,16
	.word	15971
	.byte	16,1,0,14
	.word	16051
	.byte	10
	.byte	'_Ifx_SRC_SPU',0,4,157,10,25,16,13
	.byte	'SPU',0
	.word	16060
	.byte	16,2,35,0,0,14
	.word	16065
	.byte	28
	.byte	'Ifx_SRC_SPU',0,4,160,10,3
	.word	16098
	.byte	10
	.byte	'_Ifx_SRC_GPSR_GPSR',0,4,175,10,25,32,13
	.byte	'SR',0
	.word	15131
	.byte	32,2,35,0,0,14
	.word	16124
	.byte	28
	.byte	'Ifx_SRC_GPSR_GPSR',0,4,178,10,3
	.word	16162
	.byte	15,192,1
	.word	16124
	.byte	16,5,0,14
	.word	16194
	.byte	10
	.byte	'_Ifx_SRC_GPSR',0,4,193,10,25,192,1,13
	.byte	'GPSR',0
	.word	16204
	.byte	192,1,2,35,0,0,14
	.word	16209
	.byte	28
	.byte	'Ifx_SRC_GPSR',0,4,196,10,3
	.word	16246
	.byte	17,14,162,11,9,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy16384',0,0,18
	.byte	'IfxScu_WDTCON1_IR_divBy256',0,1,18
	.byte	'IfxScu_WDTCON1_IR_divBy64',0,2,0,28
	.byte	'IfxScu_WDTCON1_IR',0,14,167,11,3
	.word	16273
	.byte	10
	.byte	'_Ifx_SCU_ACCEN00_Bits',0,15,68,16,4,11
	.byte	'EN0',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	419
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	419
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	419
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	419
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	419
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	419
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	419
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	419
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	419
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	419
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	419
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	419
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	419
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	419
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	419
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	419
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	419
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	419
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	419
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	419
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	419
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	419
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	419
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	419
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	419
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	419
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_ACCEN00_Bits',0,15,102,3
	.word	16395
	.byte	10
	.byte	'_Ifx_SCU_ACCEN01_Bits',0,15,105,16,4,11
	.byte	'reserved_0',0,4
	.word	396
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_SCU_ACCEN01_Bits',0,15,108,3
	.word	16954
	.byte	10
	.byte	'_Ifx_SCU_ACCEN10_Bits',0,15,111,16,4,11
	.byte	'EN0',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'EN1',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'EN2',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'EN3',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'EN4',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'EN5',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'EN6',0,1
	.word	419
	.byte	1,1,2,35,0,11
	.byte	'EN7',0,1
	.word	419
	.byte	1,0,2,35,0,11
	.byte	'EN8',0,1
	.word	419
	.byte	1,7,2,35,1,11
	.byte	'EN9',0,1
	.word	419
	.byte	1,6,2,35,1,11
	.byte	'EN10',0,1
	.word	419
	.byte	1,5,2,35,1,11
	.byte	'EN11',0,1
	.word	419
	.byte	1,4,2,35,1,11
	.byte	'EN12',0,1
	.word	419
	.byte	1,3,2,35,1,11
	.byte	'EN13',0,1
	.word	419
	.byte	1,2,2,35,1,11
	.byte	'EN14',0,1
	.word	419
	.byte	1,1,2,35,1,11
	.byte	'EN15',0,1
	.word	419
	.byte	1,0,2,35,1,11
	.byte	'EN16',0,1
	.word	419
	.byte	1,7,2,35,2,11
	.byte	'EN17',0,1
	.word	419
	.byte	1,6,2,35,2,11
	.byte	'EN18',0,1
	.word	419
	.byte	1,5,2,35,2,11
	.byte	'EN19',0,1
	.word	419
	.byte	1,4,2,35,2,11
	.byte	'EN20',0,1
	.word	419
	.byte	1,3,2,35,2,11
	.byte	'EN21',0,1
	.word	419
	.byte	1,2,2,35,2,11
	.byte	'EN22',0,1
	.word	419
	.byte	1,1,2,35,2,11
	.byte	'EN23',0,1
	.word	419
	.byte	1,0,2,35,2,11
	.byte	'EN24',0,1
	.word	419
	.byte	1,7,2,35,3,11
	.byte	'EN25',0,1
	.word	419
	.byte	1,6,2,35,3,11
	.byte	'EN26',0,1
	.word	419
	.byte	1,5,2,35,3,11
	.byte	'EN27',0,1
	.word	419
	.byte	1,4,2,35,3,11
	.byte	'EN28',0,1
	.word	419
	.byte	1,3,2,35,3,11
	.byte	'EN29',0,1
	.word	419
	.byte	1,2,2,35,3,11
	.byte	'EN30',0,1
	.word	419
	.byte	1,1,2,35,3,11
	.byte	'EN31',0,1
	.word	419
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_ACCEN10_Bits',0,15,145,1,3
	.word	17033
	.byte	10
	.byte	'_Ifx_SCU_ACCEN11_Bits',0,15,148,1,16,4,11
	.byte	'reserved_0',0,4
	.word	396
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_SCU_ACCEN11_Bits',0,15,151,1,3
	.word	17593
	.byte	10
	.byte	'_Ifx_SCU_ARSTDIS_Bits',0,15,154,1,16,4,11
	.byte	'STM0DIS',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'STM1DIS',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'STM2DIS',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'STM3DIS',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'STM4DIS',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'STM5DIS',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	419
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	396
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_SCU_ARSTDIS_Bits',0,15,164,1,3
	.word	17674
	.byte	10
	.byte	'_Ifx_SCU_CCUCON0_Bits',0,15,167,1,16,4,11
	.byte	'STMDIV',0,1
	.word	419
	.byte	4,4,2,35,0,11
	.byte	'GTMDIV',0,1
	.word	419
	.byte	4,0,2,35,0,11
	.byte	'SRIDIV',0,1
	.word	419
	.byte	4,4,2,35,1,11
	.byte	'LPDIV',0,1
	.word	419
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	419
	.byte	1,0,2,35,1,11
	.byte	'SPBDIV',0,1
	.word	419
	.byte	4,4,2,35,2,11
	.byte	'BBBDIV',0,1
	.word	419
	.byte	4,0,2,35,2,11
	.byte	'FSIDIV',0,1
	.word	419
	.byte	2,6,2,35,3,11
	.byte	'FSI2DIV',0,1
	.word	419
	.byte	2,4,2,35,3,11
	.byte	'CLKSEL',0,1
	.word	419
	.byte	2,2,2,35,3,11
	.byte	'UP',0,1
	.word	419
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	419
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CCUCON0_Bits',0,15,181,1,3
	.word	17891
	.byte	10
	.byte	'_Ifx_SCU_CCUCON1_Bits',0,15,184,1,16,4,11
	.byte	'MCANDIV',0,1
	.word	419
	.byte	4,4,2,35,0,11
	.byte	'CLKSELMCAN',0,1
	.word	419
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	419
	.byte	1,1,2,35,0,11
	.byte	'PLL1DIVDIS',0,1
	.word	419
	.byte	1,0,2,35,0,11
	.byte	'I2CDIV',0,1
	.word	419
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	419
	.byte	4,0,2,35,1,11
	.byte	'MSCDIV',0,1
	.word	419
	.byte	4,4,2,35,2,11
	.byte	'CLKSELMSC',0,1
	.word	419
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	419
	.byte	2,0,2,35,2,11
	.byte	'QSPIDIV',0,1
	.word	419
	.byte	4,4,2,35,3,11
	.byte	'CLKSELQSPI',0,1
	.word	419
	.byte	2,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	419
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	419
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CCUCON1_Bits',0,15,199,1,3
	.word	18164
	.byte	10
	.byte	'_Ifx_SCU_CCUCON10_Bits',0,15,202,1,16,4,11
	.byte	'CPU4DIV',0,1
	.word	419
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	396
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON10_Bits',0,15,206,1,3
	.word	18490
	.byte	10
	.byte	'_Ifx_SCU_CCUCON11_Bits',0,15,209,1,16,4,11
	.byte	'CPU5DIV',0,1
	.word	419
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	396
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON11_Bits',0,15,213,1,3
	.word	18592
	.byte	10
	.byte	'_Ifx_SCU_CCUCON2_Bits',0,15,216,1,16,4,11
	.byte	'ASCLINFDIV',0,1
	.word	419
	.byte	4,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	419
	.byte	4,0,2,35,0,11
	.byte	'ASCLINSDIV',0,1
	.word	419
	.byte	4,4,2,35,1,11
	.byte	'CLKSELASCLINS',0,1
	.word	419
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,4
	.word	396
	.byte	10,8,2,35,0,11
	.byte	'EBUPERON',0,1
	.word	419
	.byte	1,7,2,35,3,11
	.byte	'ERAYPERON',0,1
	.word	419
	.byte	1,6,2,35,3,11
	.byte	'HSPDMPERON',0,1
	.word	419
	.byte	1,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	419
	.byte	4,1,2,35,3,11
	.byte	'LCK',0,1
	.word	419
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CCUCON2_Bits',0,15,228,1,3
	.word	18694
	.byte	10
	.byte	'_Ifx_SCU_CCUCON3_Bits',0,15,231,1,16,4,11
	.byte	'PLL0MONEN',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'PLL1MONEN',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'PLL2MONEN',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'SPBMONEN',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'BACKMONEN',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	419
	.byte	3,0,2,35,0,11
	.byte	'PLL0MONTST',0,1
	.word	419
	.byte	1,7,2,35,1,11
	.byte	'PLL1MONTST',0,1
	.word	419
	.byte	1,6,2,35,1,11
	.byte	'PLL2MONTST',0,1
	.word	419
	.byte	1,5,2,35,1,11
	.byte	'SPBMONTST',0,1
	.word	419
	.byte	1,4,2,35,1,11
	.byte	'BACKMONTST',0,1
	.word	419
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	396
	.byte	11,8,2,35,0,11
	.byte	'reserved_24',0,1
	.word	419
	.byte	6,2,2,35,3,11
	.byte	'UP',0,1
	.word	419
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	419
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CCUCON3_Bits',0,15,248,1,3
	.word	18968
	.byte	10
	.byte	'_Ifx_SCU_CCUCON4_Bits',0,15,251,1,16,4,11
	.byte	'LOTHR',0,2
	.word	983
	.byte	12,4,2,35,0,11
	.byte	'UPTHR',0,4
	.word	396
	.byte	12,8,2,35,0,11
	.byte	'MONEN',0,1
	.word	419
	.byte	1,7,2,35,3,11
	.byte	'MONTST',0,1
	.word	419
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	419
	.byte	4,2,2,35,3,11
	.byte	'UP',0,1
	.word	419
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	419
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CCUCON4_Bits',0,15,132,2,3
	.word	19337
	.byte	10
	.byte	'_Ifx_SCU_CCUCON5_Bits',0,15,135,2,16,4,11
	.byte	'GETHDIV',0,1
	.word	419
	.byte	4,4,2,35,0,11
	.byte	'MCANHDIV',0,1
	.word	419
	.byte	4,0,2,35,0,11
	.byte	'ADASDIV',0,1
	.word	419
	.byte	4,4,2,35,1,11
	.byte	'reserved_12',0,4
	.word	396
	.byte	18,2,2,35,0,11
	.byte	'UP',0,1
	.word	419
	.byte	1,1,2,35,3,11
	.byte	'LCK',0,1
	.word	419
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CCUCON5_Bits',0,15,143,2,3
	.word	19517
	.byte	10
	.byte	'_Ifx_SCU_CCUCON6_Bits',0,15,146,2,16,4,11
	.byte	'CPU0DIV',0,1
	.word	419
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	396
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON6_Bits',0,15,150,2,3
	.word	19686
	.byte	10
	.byte	'_Ifx_SCU_CCUCON7_Bits',0,15,153,2,16,4,11
	.byte	'CPU1DIV',0,1
	.word	419
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	396
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON7_Bits',0,15,157,2,3
	.word	19786
	.byte	10
	.byte	'_Ifx_SCU_CCUCON8_Bits',0,15,160,2,16,4,11
	.byte	'CPU2DIV',0,1
	.word	419
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	396
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON8_Bits',0,15,164,2,3
	.word	19886
	.byte	10
	.byte	'_Ifx_SCU_CCUCON9_Bits',0,15,167,2,16,4,11
	.byte	'CPU3DIV',0,1
	.word	419
	.byte	6,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	396
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON9_Bits',0,15,171,2,3
	.word	19986
	.byte	10
	.byte	'_Ifx_SCU_CHIPID_Bits',0,15,174,2,16,4,11
	.byte	'CHREV',0,1
	.word	419
	.byte	6,2,2,35,0,11
	.byte	'CHTEC',0,1
	.word	419
	.byte	2,0,2,35,0,11
	.byte	'CHPK',0,1
	.word	419
	.byte	4,4,2,35,1,11
	.byte	'CHID',0,1
	.word	419
	.byte	4,0,2,35,1,11
	.byte	'EEA',0,1
	.word	419
	.byte	1,7,2,35,2,11
	.byte	'UCODE',0,1
	.word	419
	.byte	7,0,2,35,2,11
	.byte	'FSIZE',0,1
	.word	419
	.byte	4,4,2,35,3,11
	.byte	'VART',0,1
	.word	419
	.byte	3,1,2,35,3,11
	.byte	'SEC',0,1
	.word	419
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_CHIPID_Bits',0,15,185,2,3
	.word	20086
	.byte	10
	.byte	'_Ifx_SCU_DTSCLIM_Bits',0,15,188,2,16,4,11
	.byte	'LOWER',0,2
	.word	983
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,1
	.word	419
	.byte	1,3,2,35,1,11
	.byte	'BGPOK',0,1
	.word	419
	.byte	1,2,2,35,1,11
	.byte	'EN',0,1
	.word	419
	.byte	1,1,2,35,1,11
	.byte	'LLU',0,1
	.word	419
	.byte	1,0,2,35,1,11
	.byte	'UPPER',0,2
	.word	983
	.byte	12,4,2,35,2,11
	.byte	'INTEN',0,1
	.word	419
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	419
	.byte	1,2,2,35,3,11
	.byte	'INT',0,1
	.word	419
	.byte	1,1,2,35,3,11
	.byte	'UOF',0,1
	.word	419
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_DTSCLIM_Bits',0,15,200,2,3
	.word	20289
	.byte	10
	.byte	'_Ifx_SCU_DTSCSTAT_Bits',0,15,203,2,16,4,11
	.byte	'RESULT',0,2
	.word	983
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	396
	.byte	20,0,2,35,0,0,28
	.byte	'Ifx_SCU_DTSCSTAT_Bits',0,15,207,2,3
	.word	20521
	.byte	7
	.byte	'unsigned int',0,4,7,10
	.byte	'_Ifx_SCU_EICON0_Bits',0,15,210,2,16,4,11
	.byte	'reserved_0',0,4
	.word	20623
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	20623
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	20623
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	20623
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_SCU_EICON0_Bits',0,15,216,2,3
	.word	20639
	.byte	10
	.byte	'_Ifx_SCU_EICON1_Bits',0,15,219,2,16,4,11
	.byte	'reserved_0',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	396
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_SCU_EICON1_Bits',0,15,228,2,3
	.word	20767
	.byte	10
	.byte	'_Ifx_SCU_EICR_Bits',0,15,231,2,16,4,11
	.byte	'reserved_0',0,1
	.word	419
	.byte	4,4,2,35,0,11
	.byte	'EXIS0',0,1
	.word	419
	.byte	3,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	419
	.byte	1,0,2,35,0,11
	.byte	'FEN0',0,1
	.word	419
	.byte	1,7,2,35,1,11
	.byte	'REN0',0,1
	.word	419
	.byte	1,6,2,35,1,11
	.byte	'LDEN0',0,1
	.word	419
	.byte	1,5,2,35,1,11
	.byte	'EIEN0',0,1
	.word	419
	.byte	1,4,2,35,1,11
	.byte	'INP0',0,1
	.word	419
	.byte	3,1,2,35,1,11
	.byte	'reserved_15',0,4
	.word	396
	.byte	5,12,2,35,0,11
	.byte	'EXIS1',0,1
	.word	419
	.byte	3,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	419
	.byte	1,0,2,35,2,11
	.byte	'FEN1',0,1
	.word	419
	.byte	1,7,2,35,3,11
	.byte	'REN1',0,1
	.word	419
	.byte	1,6,2,35,3,11
	.byte	'LDEN1',0,1
	.word	419
	.byte	1,5,2,35,3,11
	.byte	'EIEN1',0,1
	.word	419
	.byte	1,4,2,35,3,11
	.byte	'INP1',0,1
	.word	419
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	419
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_EICR_Bits',0,15,250,2,3
	.word	20956
	.byte	10
	.byte	'_Ifx_SCU_EIFILT_Bits',0,15,253,2,16,4,11
	.byte	'FILRQ0A',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'FILRQ5A',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'FILRQ2A',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'FILRQ3A',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'FILRQ0C',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'FILRQ1C',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'FILRQ3C',0,1
	.word	419
	.byte	1,1,2,35,0,11
	.byte	'FILRQ2C',0,1
	.word	419
	.byte	1,0,2,35,0,11
	.byte	'FILRQ4A',0,1
	.word	419
	.byte	1,7,2,35,1,11
	.byte	'FILRQ6A',0,1
	.word	419
	.byte	1,6,2,35,1,11
	.byte	'FILRQ1A',0,1
	.word	419
	.byte	1,5,2,35,1,11
	.byte	'FILRQ7A',0,1
	.word	419
	.byte	1,4,2,35,1,11
	.byte	'FILRQ6D',0,1
	.word	419
	.byte	1,3,2,35,1,11
	.byte	'FILRQ4D',0,1
	.word	419
	.byte	1,2,2,35,1,11
	.byte	'FILRQ2B',0,1
	.word	419
	.byte	1,1,2,35,1,11
	.byte	'FILRQ3B',0,1
	.word	419
	.byte	1,0,2,35,1,11
	.byte	'FILRQ7C',0,1
	.word	419
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	419
	.byte	7,0,2,35,2,11
	.byte	'FILTDIV',0,1
	.word	419
	.byte	4,4,2,35,3,11
	.byte	'DEPTH',0,1
	.word	419
	.byte	4,0,2,35,3,0,28
	.byte	'Ifx_SCU_EIFILT_Bits',0,15,147,3,3
	.word	21320
	.byte	10
	.byte	'_Ifx_SCU_EIFR_Bits',0,15,150,3,16,4,11
	.byte	'INTF0',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'INTF1',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'INTF2',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'INTF3',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'INTF4',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'INTF5',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'INTF6',0,1
	.word	419
	.byte	1,1,2,35,0,11
	.byte	'INTF7',0,1
	.word	419
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	396
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_SCU_EIFR_Bits',0,15,161,3,3
	.word	21759
	.byte	10
	.byte	'_Ifx_SCU_EISR_Bits',0,15,164,3,16,4,11
	.byte	'AE',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	983
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	983
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_EISR_Bits',0,15,174,3,3
	.word	21970
	.byte	10
	.byte	'_Ifx_SCU_EMSR_Bits',0,15,177,3,16,4,11
	.byte	'POL',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'MODE',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'ENON',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'PSEL',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,2
	.word	983
	.byte	12,0,2,35,0,11
	.byte	'EMSF',0,1
	.word	419
	.byte	1,7,2,35,2,11
	.byte	'SEMSF',0,1
	.word	419
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	983
	.byte	14,0,2,35,2,0,28
	.byte	'Ifx_SCU_EMSR_Bits',0,15,187,3,3
	.word	22146
	.byte	10
	.byte	'_Ifx_SCU_EMSSW_Bits',0,15,190,3,16,4,11
	.byte	'reserved_0',0,4
	.word	396
	.byte	24,8,2,35,0,11
	.byte	'EMSFM',0,1
	.word	419
	.byte	2,6,2,35,3,11
	.byte	'SEMSFM',0,1
	.word	419
	.byte	2,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	419
	.byte	4,0,2,35,3,0,28
	.byte	'Ifx_SCU_EMSSW_Bits',0,15,196,3,3
	.word	22340
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,15,199,3,16,4,11
	.byte	'reserved_0',0,1
	.word	419
	.byte	7,1,2,35,0,11
	.byte	'EDCON',0,2
	.word	983
	.byte	2,7,2,35,0,11
	.byte	'reserved_9',0,4
	.word	396
	.byte	23,0,2,35,0,0,28
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX_Bits',0,15,204,3,3
	.word	22475
	.byte	10
	.byte	'_Ifx_SCU_ESROCFG_Bits',0,15,207,3,16,4,11
	.byte	'ARI',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'ARC',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	396
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_SCU_ESROCFG_Bits',0,15,212,3,3
	.word	22611
	.byte	10
	.byte	'_Ifx_SCU_EXTCON_Bits',0,15,215,3,16,4,11
	.byte	'EN0',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'SEL0',0,1
	.word	419
	.byte	4,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	983
	.byte	10,0,2,35,0,11
	.byte	'EN1',0,1
	.word	419
	.byte	1,7,2,35,2,11
	.byte	'NSEL',0,1
	.word	419
	.byte	1,6,2,35,2,11
	.byte	'SEL1',0,1
	.word	419
	.byte	4,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	419
	.byte	2,0,2,35,2,11
	.byte	'DIV1',0,1
	.word	419
	.byte	8,0,2,35,3,0,28
	.byte	'Ifx_SCU_EXTCON_Bits',0,15,226,3,3
	.word	22722
	.byte	10
	.byte	'_Ifx_SCU_FDR_Bits',0,15,229,3,16,4,11
	.byte	'STEP',0,2
	.word	983
	.byte	10,6,2,35,0,11
	.byte	'reserved_10',0,1
	.word	419
	.byte	4,2,2,35,1,11
	.byte	'DM',0,1
	.word	419
	.byte	2,0,2,35,1,11
	.byte	'RESULT',0,2
	.word	983
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	419
	.byte	5,1,2,35,3,11
	.byte	'DISCLK',0,1
	.word	419
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_FDR_Bits',0,15,237,3,3
	.word	22940
	.byte	10
	.byte	'_Ifx_SCU_FMR_Bits',0,15,240,3,16,4,11
	.byte	'FS0',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'FS1',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'FS2',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'FS3',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'FS4',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'FS5',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'FS6',0,1
	.word	419
	.byte	1,1,2,35,0,11
	.byte	'FS7',0,1
	.word	419
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	419
	.byte	8,0,2,35,1,11
	.byte	'FC0',0,1
	.word	419
	.byte	1,7,2,35,2,11
	.byte	'FC1',0,1
	.word	419
	.byte	1,6,2,35,2,11
	.byte	'FC2',0,1
	.word	419
	.byte	1,5,2,35,2,11
	.byte	'FC3',0,1
	.word	419
	.byte	1,4,2,35,2,11
	.byte	'FC4',0,1
	.word	419
	.byte	1,3,2,35,2,11
	.byte	'FC5',0,1
	.word	419
	.byte	1,2,2,35,2,11
	.byte	'FC6',0,1
	.word	419
	.byte	1,1,2,35,2,11
	.byte	'FC7',0,1
	.word	419
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	419
	.byte	8,0,2,35,3,0,28
	.byte	'Ifx_SCU_FMR_Bits',0,15,132,4,3
	.word	23103
	.byte	10
	.byte	'_Ifx_SCU_ID_Bits',0,15,135,4,16,4,11
	.byte	'MODREV',0,1
	.word	419
	.byte	8,0,2,35,0,11
	.byte	'MODTYPE',0,1
	.word	419
	.byte	8,0,2,35,1,11
	.byte	'MODNUMBER',0,2
	.word	983
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_ID_Bits',0,15,140,4,3
	.word	23439
	.byte	10
	.byte	'_Ifx_SCU_IGCR_Bits',0,15,143,4,16,4,11
	.byte	'IPEN00',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'IPEN01',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'IPEN02',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'IPEN03',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'IPEN04',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'IPEN05',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'IPEN06',0,1
	.word	419
	.byte	1,1,2,35,0,11
	.byte	'IPEN07',0,1
	.word	419
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	419
	.byte	5,3,2,35,1,11
	.byte	'GEEN0',0,1
	.word	419
	.byte	1,2,2,35,1,11
	.byte	'IGP0',0,1
	.word	419
	.byte	2,0,2,35,1,11
	.byte	'IPEN10',0,1
	.word	419
	.byte	1,7,2,35,2,11
	.byte	'IPEN11',0,1
	.word	419
	.byte	1,6,2,35,2,11
	.byte	'IPEN12',0,1
	.word	419
	.byte	1,5,2,35,2,11
	.byte	'IPEN13',0,1
	.word	419
	.byte	1,4,2,35,2,11
	.byte	'IPEN14',0,1
	.word	419
	.byte	1,3,2,35,2,11
	.byte	'IPEN15',0,1
	.word	419
	.byte	1,2,2,35,2,11
	.byte	'IPEN16',0,1
	.word	419
	.byte	1,1,2,35,2,11
	.byte	'IPEN17',0,1
	.word	419
	.byte	1,0,2,35,2,11
	.byte	'reserved_24',0,1
	.word	419
	.byte	5,3,2,35,3,11
	.byte	'GEEN1',0,1
	.word	419
	.byte	1,2,2,35,3,11
	.byte	'IGP1',0,1
	.word	419
	.byte	2,0,2,35,3,0,28
	.byte	'Ifx_SCU_IGCR_Bits',0,15,167,4,3
	.word	23546
	.byte	10
	.byte	'_Ifx_SCU_IN_Bits',0,15,170,4,16,4,11
	.byte	'P0',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	396
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_SCU_IN_Bits',0,15,175,4,3
	.word	23998
	.byte	10
	.byte	'_Ifx_SCU_IOCR_Bits',0,15,178,4,16,4,11
	.byte	'reserved_0',0,1
	.word	419
	.byte	4,4,2,35,0,11
	.byte	'PC0',0,1
	.word	419
	.byte	4,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	419
	.byte	4,4,2,35,1,11
	.byte	'PC1',0,1
	.word	419
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	983
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_IOCR_Bits',0,15,185,4,3
	.word	24097
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL0_Bits',0,15,188,4,16,4,11
	.byte	'LBISTREQ',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'LBISTRES',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'PATTERNS',0,4
	.word	396
	.byte	18,12,2,35,0,11
	.byte	'reserved_20',0,2
	.word	983
	.byte	8,4,2,35,2,11
	.byte	'LBISTDONE',0,1
	.word	419
	.byte	1,3,2,35,3,11
	.byte	'reserved_29',0,1
	.word	419
	.byte	1,2,2,35,3,11
	.byte	'LBISTERRINJ',0,1
	.word	419
	.byte	1,1,2,35,3,11
	.byte	'LBISTREQRED',0,1
	.word	419
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_LBISTCTRL0_Bits',0,15,198,4,3
	.word	24247
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL1_Bits',0,15,201,4,16,4,11
	.byte	'SEED',0,4
	.word	396
	.byte	19,13,2,35,0,11
	.byte	'reserved_19',0,1
	.word	419
	.byte	5,0,2,35,2,11
	.byte	'SPLITSH',0,1
	.word	419
	.byte	3,5,2,35,3,11
	.byte	'BODY',0,1
	.word	419
	.byte	1,4,2,35,3,11
	.byte	'LBISTFREQU',0,1
	.word	419
	.byte	4,0,2,35,3,0,28
	.byte	'Ifx_SCU_LBISTCTRL1_Bits',0,15,208,4,3
	.word	24485
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL2_Bits',0,15,211,4,16,4,11
	.byte	'LENGTH',0,2
	.word	983
	.byte	12,4,2,35,0,11
	.byte	'reserved_12',0,4
	.word	396
	.byte	20,0,2,35,0,0,28
	.byte	'Ifx_SCU_LBISTCTRL2_Bits',0,15,215,4,3
	.word	24646
	.byte	10
	.byte	'_Ifx_SCU_LBISTCTRL3_Bits',0,15,218,4,16,4,11
	.byte	'SIGNATURE',0,4
	.word	396
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_SCU_LBISTCTRL3_Bits',0,15,221,4,3
	.word	24752
	.byte	10
	.byte	'_Ifx_SCU_LCLCON0_Bits',0,15,224,4,16,4,11
	.byte	'LS2',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	983
	.byte	14,1,2,35,0,11
	.byte	'LSEN2',0,1
	.word	419
	.byte	1,0,2,35,1,11
	.byte	'LS0',0,1
	.word	419
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	983
	.byte	14,1,2,35,2,11
	.byte	'LSEN0',0,1
	.word	419
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_LCLCON0_Bits',0,15,232,4,3
	.word	24838
	.byte	10
	.byte	'_Ifx_SCU_LCLCON1_Bits',0,15,235,4,16,4,11
	.byte	'LS3',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	983
	.byte	14,1,2,35,0,11
	.byte	'LSEN3',0,1
	.word	419
	.byte	1,0,2,35,1,11
	.byte	'LS1',0,1
	.word	419
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,2
	.word	983
	.byte	14,1,2,35,2,11
	.byte	'LSEN1',0,1
	.word	419
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_LCLCON1_Bits',0,15,243,4,3
	.word	25006
	.byte	10
	.byte	'_Ifx_SCU_LCLTEST_Bits',0,15,246,4,16,4,11
	.byte	'LCLT0',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'LCLT1',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'LCLT2',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'LCLT3',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'LCLT4',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'LCLT5',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	983
	.byte	10,0,2,35,0,11
	.byte	'PLCLT0',0,1
	.word	419
	.byte	1,7,2,35,2,11
	.byte	'PLCLT1',0,1
	.word	419
	.byte	1,6,2,35,2,11
	.byte	'PLCLT2',0,1
	.word	419
	.byte	1,5,2,35,2,11
	.byte	'PLCLT3',0,1
	.word	419
	.byte	1,4,2,35,2,11
	.byte	'PLCLT4',0,1
	.word	419
	.byte	1,3,2,35,2,11
	.byte	'PLCLT5',0,1
	.word	419
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	983
	.byte	10,0,2,35,2,0,28
	.byte	'Ifx_SCU_LCLTEST_Bits',0,15,134,5,3
	.word	25174
	.byte	10
	.byte	'_Ifx_SCU_MANID_Bits',0,15,137,5,16,4,11
	.byte	'DEPT',0,1
	.word	419
	.byte	5,3,2,35,0,11
	.byte	'MANUF',0,2
	.word	983
	.byte	11,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	983
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_MANID_Bits',0,15,142,5,3
	.word	25488
	.byte	10
	.byte	'_Ifx_SCU_OMR_Bits',0,15,145,5,16,4,11
	.byte	'PS0',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'PS1',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,2
	.word	983
	.byte	14,0,2,35,0,11
	.byte	'PCL0',0,1
	.word	419
	.byte	1,7,2,35,2,11
	.byte	'PCL1',0,1
	.word	419
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,2
	.word	983
	.byte	14,0,2,35,2,0,28
	.byte	'Ifx_SCU_OMR_Bits',0,15,153,5,3
	.word	25599
	.byte	10
	.byte	'_Ifx_SCU_OSCCON_Bits',0,15,156,5,16,4,11
	.byte	'reserved_0',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'PLLLV',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'OSCRES',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'GAINSEL',0,1
	.word	419
	.byte	2,3,2,35,0,11
	.byte	'MODE',0,1
	.word	419
	.byte	2,1,2,35,0,11
	.byte	'SHBY',0,1
	.word	419
	.byte	1,0,2,35,0,11
	.byte	'PLLHV',0,1
	.word	419
	.byte	1,7,2,35,1,11
	.byte	'HYSEN',0,1
	.word	419
	.byte	1,6,2,35,1,11
	.byte	'HYSCTL',0,1
	.word	419
	.byte	2,4,2,35,1,11
	.byte	'AMPCTL',0,1
	.word	419
	.byte	2,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	419
	.byte	2,0,2,35,1,11
	.byte	'OSCVAL',0,1
	.word	419
	.byte	5,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	419
	.byte	2,1,2,35,2,11
	.byte	'APREN',0,1
	.word	419
	.byte	1,0,2,35,2,11
	.byte	'CAP0EN',0,1
	.word	419
	.byte	1,7,2,35,3,11
	.byte	'CAP1EN',0,1
	.word	419
	.byte	1,6,2,35,3,11
	.byte	'CAP2EN',0,1
	.word	419
	.byte	1,5,2,35,3,11
	.byte	'CAP3EN',0,1
	.word	419
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	419
	.byte	4,0,2,35,3,0,28
	.byte	'Ifx_SCU_OSCCON_Bits',0,15,177,5,3
	.word	25757
	.byte	10
	.byte	'_Ifx_SCU_OUT_Bits',0,15,180,5,16,4,11
	.byte	'P0',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'P1',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	396
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_SCU_OUT_Bits',0,15,185,5,3
	.word	26168
	.byte	10
	.byte	'_Ifx_SCU_OVCCON_Bits',0,15,188,5,16,4,11
	.byte	'CSEL0',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'CSEL1',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'CSEL2',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'CSEL3',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'CSEL4',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'CSEL5',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	983
	.byte	10,0,2,35,0,11
	.byte	'OVSTRT',0,1
	.word	419
	.byte	1,7,2,35,2,11
	.byte	'OVSTP',0,1
	.word	419
	.byte	1,6,2,35,2,11
	.byte	'DCINVAL',0,1
	.word	419
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	419
	.byte	5,0,2,35,2,11
	.byte	'OVCONF',0,1
	.word	419
	.byte	1,7,2,35,3,11
	.byte	'POVCONF',0,1
	.word	419
	.byte	1,6,2,35,3,11
	.byte	'reserved_26',0,1
	.word	419
	.byte	6,0,2,35,3,0,28
	.byte	'Ifx_SCU_OVCCON_Bits',0,15,204,5,3
	.word	26269
	.byte	10
	.byte	'_Ifx_SCU_OVCENABLE_Bits',0,15,207,5,16,4,11
	.byte	'OVEN0',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'OVEN1',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'OVEN2',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'OVEN3',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'OVEN4',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'OVEN5',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	396
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_SCU_OVCENABLE_Bits',0,15,216,5,3
	.word	26587
	.byte	10
	.byte	'_Ifx_SCU_PDISC_Bits',0,15,219,5,16,4,11
	.byte	'PDIS0',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'PDIS1',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,4
	.word	396
	.byte	30,0,2,35,0,0,28
	.byte	'Ifx_SCU_PDISC_Bits',0,15,224,5,3
	.word	26774
	.byte	10
	.byte	'_Ifx_SCU_PDR_Bits',0,15,227,5,16,4,11
	.byte	'PD0',0,1
	.word	419
	.byte	2,6,2,35,0,11
	.byte	'PL0',0,1
	.word	419
	.byte	2,4,2,35,0,11
	.byte	'PD1',0,1
	.word	419
	.byte	2,2,2,35,0,11
	.byte	'PL1',0,1
	.word	419
	.byte	2,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	396
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_SCU_PDR_Bits',0,15,234,5,3
	.word	26885
	.byte	10
	.byte	'_Ifx_SCU_PDRR_Bits',0,15,237,5,16,4,11
	.byte	'PDR0',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'PDR1',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'PDR2',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'PDR3',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'PDR4',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'PDR5',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'PDR6',0,1
	.word	419
	.byte	1,1,2,35,0,11
	.byte	'PDR7',0,1
	.word	419
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	396
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_SCU_PDRR_Bits',0,15,248,5,3
	.word	27018
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON0_Bits',0,15,251,5,16,4,11
	.byte	'DIVBY',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,2
	.word	983
	.byte	8,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	419
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	419
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	419
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	419
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	419
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	419
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	419
	.byte	5,0,2,35,3,0,28
	.byte	'Ifx_SCU_PERPLLCON0_Bits',0,15,134,6,3
	.word	27221
	.byte	10
	.byte	'_Ifx_SCU_PERPLLCON1_Bits',0,15,137,6,16,4,11
	.byte	'K2DIV',0,1
	.word	419
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	419
	.byte	5,0,2,35,0,11
	.byte	'K3DIV',0,1
	.word	419
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	396
	.byte	21,0,2,35,0,0,28
	.byte	'Ifx_SCU_PERPLLCON1_Bits',0,15,143,6,3
	.word	27461
	.byte	10
	.byte	'_Ifx_SCU_PERPLLSTAT_Bits',0,15,146,6,16,4,11
	.byte	'reserved_0',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'K3RDY',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	419
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,4
	.word	396
	.byte	25,0,2,35,0,0,28
	.byte	'Ifx_SCU_PERPLLSTAT_Bits',0,15,156,6,3
	.word	27605
	.byte	10
	.byte	'_Ifx_SCU_PMCSR0_Bits',0,15,159,6,16,4,11
	.byte	'REQSLP',0,1
	.word	419
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	419
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	419
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	396
	.byte	21,0,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR0_Bits',0,15,165,6,3
	.word	27827
	.byte	10
	.byte	'_Ifx_SCU_PMCSR1_Bits',0,15,168,6,16,4,11
	.byte	'REQSLP',0,1
	.word	419
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	419
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	419
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	396
	.byte	21,0,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR1_Bits',0,15,174,6,3
	.word	27963
	.byte	10
	.byte	'_Ifx_SCU_PMCSR2_Bits',0,15,177,6,16,4,11
	.byte	'REQSLP',0,1
	.word	419
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	419
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	419
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	396
	.byte	21,0,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR2_Bits',0,15,183,6,3
	.word	28099
	.byte	10
	.byte	'_Ifx_SCU_PMCSR3_Bits',0,15,186,6,16,4,11
	.byte	'REQSLP',0,1
	.word	419
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	419
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	419
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	396
	.byte	21,0,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR3_Bits',0,15,192,6,3
	.word	28235
	.byte	10
	.byte	'_Ifx_SCU_PMCSR4_Bits',0,15,195,6,16,4,11
	.byte	'REQSLP',0,1
	.word	419
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	419
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	419
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	396
	.byte	21,0,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR4_Bits',0,15,201,6,3
	.word	28371
	.byte	10
	.byte	'_Ifx_SCU_PMCSR5_Bits',0,15,204,6,16,4,11
	.byte	'REQSLP',0,1
	.word	419
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	419
	.byte	6,0,2,35,0,11
	.byte	'PMST',0,1
	.word	419
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,4
	.word	396
	.byte	21,0,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR5_Bits',0,15,210,6,3
	.word	28507
	.byte	10
	.byte	'_Ifx_SCU_PMSTAT0_Bits',0,15,213,6,16,4,11
	.byte	'CPU0',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'CPU1',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'CPU2',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'CPU3',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'CPU4',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'CPU5',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	983
	.byte	10,0,2,35,0,11
	.byte	'CPU0LS',0,1
	.word	419
	.byte	1,7,2,35,2,11
	.byte	'CPU1LS',0,1
	.word	419
	.byte	1,6,2,35,2,11
	.byte	'CPU2LS',0,1
	.word	419
	.byte	1,5,2,35,2,11
	.byte	'CPU3LS',0,1
	.word	419
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,2
	.word	983
	.byte	12,0,2,35,2,0,28
	.byte	'Ifx_SCU_PMSTAT0_Bits',0,15,227,6,3
	.word	28643
	.byte	10
	.byte	'_Ifx_SCU_PMSWCR1_Bits',0,15,230,6,16,4,11
	.byte	'reserved_0',0,1
	.word	419
	.byte	8,0,2,35,0,11
	.byte	'CPUIDLSEL',0,1
	.word	419
	.byte	3,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	419
	.byte	1,4,2,35,1,11
	.byte	'IRADIS',0,1
	.word	419
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,4
	.word	396
	.byte	11,8,2,35,0,11
	.byte	'CPUSEL',0,1
	.word	419
	.byte	3,5,2,35,3,11
	.byte	'STBYEVEN',0,1
	.word	419
	.byte	1,4,2,35,3,11
	.byte	'STBYEV',0,1
	.word	419
	.byte	3,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	419
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_PMSWCR1_Bits',0,15,241,6,3
	.word	28915
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR0_Bits',0,15,244,6,16,4,11
	.byte	'LJTEN',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'LJTOVEN',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'LJTOVIEN',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'LJTSTRT',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'LJTSTP',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'LJTCLR',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	983
	.byte	6,4,2,35,0,11
	.byte	'SDSTEP',0,1
	.word	419
	.byte	4,0,2,35,1,11
	.byte	'VDTEN',0,1
	.word	419
	.byte	1,7,2,35,2,11
	.byte	'VDTOVEN',0,1
	.word	419
	.byte	1,6,2,35,2,11
	.byte	'VDTOVIEN',0,1
	.word	419
	.byte	1,5,2,35,2,11
	.byte	'VDTSTRT',0,1
	.word	419
	.byte	1,4,2,35,2,11
	.byte	'VDTSTP',0,1
	.word	419
	.byte	1,3,2,35,2,11
	.byte	'VDTCLR',0,1
	.word	419
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	983
	.byte	7,3,2,35,2,11
	.byte	'LPSLPEN',0,1
	.word	419
	.byte	1,2,2,35,3,11
	.byte	'reserved_30',0,1
	.word	419
	.byte	2,0,2,35,3,0,28
	.byte	'Ifx_SCU_PMTRCSR0_Bits',0,15,135,7,3
	.word	29160
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR1_Bits',0,15,138,7,16,4,11
	.byte	'LJTCV',0,2
	.word	983
	.byte	16,0,2,35,0,11
	.byte	'VDTCV',0,2
	.word	983
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	419
	.byte	6,0,2,35,3,0,28
	.byte	'Ifx_SCU_PMTRCSR1_Bits',0,15,143,7,3
	.word	29548
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR2_Bits',0,15,146,7,16,4,11
	.byte	'LDJMPREQ',0,1
	.word	419
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	419
	.byte	2,4,2,35,0,11
	.byte	'LJTRUN',0,1
	.word	419
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	419
	.byte	2,0,2,35,0,11
	.byte	'LJTOV',0,1
	.word	419
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	419
	.byte	3,4,2,35,1,11
	.byte	'LJTOVCLR',0,1
	.word	419
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	419
	.byte	3,0,2,35,1,11
	.byte	'LJTCNT',0,2
	.word	983
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_PMTRCSR2_Bits',0,15,157,7,3
	.word	29666
	.byte	10
	.byte	'_Ifx_SCU_PMTRCSR3_Bits',0,15,160,7,16,4,11
	.byte	'VDROOPREQ',0,1
	.word	419
	.byte	2,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	419
	.byte	2,4,2,35,0,11
	.byte	'VDTRUN',0,1
	.word	419
	.byte	2,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	419
	.byte	2,0,2,35,0,11
	.byte	'VDTOV',0,1
	.word	419
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	419
	.byte	3,4,2,35,1,11
	.byte	'VDTOVCLR',0,1
	.word	419
	.byte	1,3,2,35,1,11
	.byte	'reserved_13',0,1
	.word	419
	.byte	3,0,2,35,1,11
	.byte	'VDTCNT',0,2
	.word	983
	.byte	10,6,2,35,2,11
	.byte	'reserved_26',0,1
	.word	419
	.byte	6,0,2,35,3,0,28
	.byte	'Ifx_SCU_PMTRCSR3_Bits',0,15,172,7,3
	.word	29909
	.byte	10
	.byte	'_Ifx_SCU_RSTCON_Bits',0,15,175,7,16,4,11
	.byte	'ESR0',0,1
	.word	419
	.byte	2,6,2,35,0,11
	.byte	'ESR1',0,1
	.word	419
	.byte	2,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	419
	.byte	2,2,2,35,0,11
	.byte	'SMU',0,1
	.word	419
	.byte	2,0,2,35,0,11
	.byte	'SW',0,1
	.word	419
	.byte	2,6,2,35,1,11
	.byte	'STM0',0,1
	.word	419
	.byte	2,4,2,35,1,11
	.byte	'STM1',0,1
	.word	419
	.byte	2,2,2,35,1,11
	.byte	'STM2',0,1
	.word	419
	.byte	2,0,2,35,1,11
	.byte	'STM3',0,1
	.word	419
	.byte	2,6,2,35,2,11
	.byte	'STM4',0,1
	.word	419
	.byte	2,4,2,35,2,11
	.byte	'STM5',0,1
	.word	419
	.byte	2,2,2,35,2,11
	.byte	'reserved_22',0,2
	.word	983
	.byte	10,0,2,35,2,0,28
	.byte	'Ifx_SCU_RSTCON_Bits',0,15,189,7,3
	.word	30176
	.byte	10
	.byte	'_Ifx_SCU_RSTCON2_Bits',0,15,192,7,16,4,11
	.byte	'FRTO',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'CLRC',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	419
	.byte	1,1,2,35,0,11
	.byte	'CSSX',0,2
	.word	983
	.byte	6,3,2,35,0,11
	.byte	'reserved_13',0,1
	.word	419
	.byte	1,2,2,35,1,11
	.byte	'reserved_14',0,1
	.word	419
	.byte	1,1,2,35,1,11
	.byte	'reserved_15',0,1
	.word	419
	.byte	1,0,2,35,1,11
	.byte	'USRINFO',0,2
	.word	983
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_RSTCON2_Bits',0,15,206,7,3
	.word	30435
	.byte	10
	.byte	'_Ifx_SCU_RSTCON3_Bits',0,15,209,7,16,4,11
	.byte	'reserved_0',0,4
	.word	396
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_SCU_RSTCON3_Bits',0,15,212,7,3
	.word	30740
	.byte	10
	.byte	'_Ifx_SCU_RSTSTAT_Bits',0,15,215,7,16,4,11
	.byte	'ESR0',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'ESR1',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'SMU',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'SW',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'STM0',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'STM1',0,1
	.word	419
	.byte	1,1,2,35,0,11
	.byte	'STM2',0,1
	.word	419
	.byte	1,0,2,35,0,11
	.byte	'STM3',0,1
	.word	419
	.byte	1,7,2,35,1,11
	.byte	'STM4',0,1
	.word	419
	.byte	1,6,2,35,1,11
	.byte	'STM5',0,1
	.word	419
	.byte	1,5,2,35,1,11
	.byte	'reserved_11',0,1
	.word	419
	.byte	5,0,2,35,1,11
	.byte	'PORST',0,1
	.word	419
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	419
	.byte	1,6,2,35,2,11
	.byte	'CB0',0,1
	.word	419
	.byte	1,5,2,35,2,11
	.byte	'CB1',0,1
	.word	419
	.byte	1,4,2,35,2,11
	.byte	'CB3',0,1
	.word	419
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	419
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	419
	.byte	1,1,2,35,2,11
	.byte	'EVRC',0,1
	.word	419
	.byte	1,0,2,35,2,11
	.byte	'EVR33',0,1
	.word	419
	.byte	1,7,2,35,3,11
	.byte	'SWD',0,1
	.word	419
	.byte	1,6,2,35,3,11
	.byte	'HSMS',0,1
	.word	419
	.byte	1,5,2,35,3,11
	.byte	'HSMA',0,1
	.word	419
	.byte	1,4,2,35,3,11
	.byte	'STBYR',0,1
	.word	419
	.byte	1,3,2,35,3,11
	.byte	'LBPORST',0,1
	.word	419
	.byte	1,2,2,35,3,11
	.byte	'LBTERM',0,1
	.word	419
	.byte	1,1,2,35,3,11
	.byte	'reserved_31',0,1
	.word	419
	.byte	1,0,2,35,3,0,28
	.byte	'Ifx_SCU_RSTSTAT_Bits',0,15,245,7,3
	.word	30821
	.byte	10
	.byte	'_Ifx_SCU_SEICON0_Bits',0,15,248,7,16,4,11
	.byte	'reserved_0',0,4
	.word	20623
	.byte	1,31,2,35,0,11
	.byte	'ENDINIT',0,4
	.word	20623
	.byte	1,30,2,35,0,11
	.byte	'EPW',0,4
	.word	20623
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	20623
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_SCU_SEICON0_Bits',0,15,254,7,3
	.word	31370
	.byte	10
	.byte	'_Ifx_SCU_SEICON1_Bits',0,15,129,8,16,4,11
	.byte	'reserved_0',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,4
	.word	396
	.byte	26,0,2,35,0,0,28
	.byte	'Ifx_SCU_SEICON1_Bits',0,15,138,8,3
	.word	31500
	.byte	10
	.byte	'_Ifx_SCU_SEISR_Bits',0,15,141,8,16,4,11
	.byte	'AE',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,2
	.word	983
	.byte	10,0,2,35,0,11
	.byte	'TIM',0,2
	.word	983
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_SEISR_Bits',0,15,151,8,3
	.word	31691
	.byte	10
	.byte	'_Ifx_SCU_STCON_Bits',0,15,154,8,16,4,11
	.byte	'reserved_0',0,2
	.word	983
	.byte	13,3,2,35,0,11
	.byte	'SFCBAE',0,1
	.word	419
	.byte	1,2,2,35,1,11
	.byte	'CFCBAE',0,1
	.word	419
	.byte	1,1,2,35,1,11
	.byte	'STP',0,1
	.word	419
	.byte	1,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	983
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_STCON_Bits',0,15,161,8,3
	.word	31869
	.byte	10
	.byte	'_Ifx_SCU_STMEM1_Bits',0,15,164,8,16,4,11
	.byte	'MEM',0,4
	.word	396
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_SCU_STMEM1_Bits',0,15,167,8,3
	.word	32020
	.byte	10
	.byte	'_Ifx_SCU_STMEM2_Bits',0,15,170,8,16,4,11
	.byte	'MEM',0,4
	.word	396
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_SCU_STMEM2_Bits',0,15,173,8,3
	.word	32092
	.byte	10
	.byte	'_Ifx_SCU_STMEM3_Bits',0,15,176,8,16,4,11
	.byte	'MEM',0,4
	.word	396
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_SCU_STMEM3_Bits',0,15,179,8,3
	.word	32164
	.byte	10
	.byte	'_Ifx_SCU_STMEM4_Bits',0,15,182,8,16,4,11
	.byte	'MEM',0,4
	.word	396
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_SCU_STMEM4_Bits',0,15,185,8,3
	.word	32236
	.byte	10
	.byte	'_Ifx_SCU_STMEM5_Bits',0,15,188,8,16,4,11
	.byte	'MEM',0,4
	.word	396
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_SCU_STMEM5_Bits',0,15,191,8,3
	.word	32308
	.byte	10
	.byte	'_Ifx_SCU_STMEM6_Bits',0,15,194,8,16,4,11
	.byte	'MEM',0,4
	.word	396
	.byte	32,0,2,35,0,0,28
	.byte	'Ifx_SCU_STMEM6_Bits',0,15,197,8,3
	.word	32380
	.byte	10
	.byte	'_Ifx_SCU_STSTAT_Bits',0,15,200,8,16,4,11
	.byte	'HWCFG',0,1
	.word	419
	.byte	8,0,2,35,0,11
	.byte	'FTM',0,1
	.word	419
	.byte	7,1,2,35,1,11
	.byte	'MODE',0,1
	.word	419
	.byte	1,0,2,35,1,11
	.byte	'FCBAE',0,1
	.word	419
	.byte	1,7,2,35,2,11
	.byte	'LUDIS',0,1
	.word	419
	.byte	1,6,2,35,2,11
	.byte	'reserved_18',0,1
	.word	419
	.byte	1,5,2,35,2,11
	.byte	'TRSTL',0,1
	.word	419
	.byte	1,4,2,35,2,11
	.byte	'SPDEN',0,1
	.word	419
	.byte	1,3,2,35,2,11
	.byte	'reserved_21',0,1
	.word	419
	.byte	1,2,2,35,2,11
	.byte	'reserved_22',0,1
	.word	419
	.byte	1,1,2,35,2,11
	.byte	'reserved_23',0,1
	.word	419
	.byte	1,0,2,35,2,11
	.byte	'RAMINT',0,1
	.word	419
	.byte	1,7,2,35,3,11
	.byte	'reserved_25',0,1
	.word	419
	.byte	3,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	419
	.byte	4,0,2,35,3,0,28
	.byte	'Ifx_SCU_STSTAT_Bits',0,15,216,8,3
	.word	32452
	.byte	10
	.byte	'_Ifx_SCU_SWAPCTRL_Bits',0,15,219,8,16,4,11
	.byte	'ADDRCFG',0,1
	.word	419
	.byte	2,6,2,35,0,11
	.byte	'SPARE',0,2
	.word	983
	.byte	14,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	983
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_SWAPCTRL_Bits',0,15,224,8,3
	.word	32781
	.byte	10
	.byte	'_Ifx_SCU_SWRSTCON_Bits',0,15,227,8,16,4,11
	.byte	'reserved_0',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'SWRSTREQ',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'reserved_2',0,1
	.word	419
	.byte	6,0,2,35,0,11
	.byte	'reserved_8',0,1
	.word	419
	.byte	8,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	983
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_SWRSTCON_Bits',0,15,234,8,3
	.word	32901
	.byte	10
	.byte	'_Ifx_SCU_SYSCON_Bits',0,15,237,8,16,4,11
	.byte	'CCTRIG0',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'RAMINTM',0,1
	.word	419
	.byte	2,4,2,35,0,11
	.byte	'SETLUDIS',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'reserved_5',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	419
	.byte	1,1,2,35,0,11
	.byte	'reserved_7',0,1
	.word	419
	.byte	1,0,2,35,0,11
	.byte	'DDC',0,1
	.word	419
	.byte	1,7,2,35,1,11
	.byte	'reserved_9',0,1
	.word	419
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	983
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_SYSCON_Bits',0,15,249,8,3
	.word	33071
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON0_Bits',0,15,252,8,16,4,11
	.byte	'reserved_0',0,1
	.word	419
	.byte	2,6,2,35,0,11
	.byte	'MODEN',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,2
	.word	983
	.byte	6,7,2,35,0,11
	.byte	'NDIV',0,1
	.word	419
	.byte	7,0,2,35,1,11
	.byte	'PLLPWD',0,1
	.word	419
	.byte	1,7,2,35,2,11
	.byte	'reserved_17',0,1
	.word	419
	.byte	1,6,2,35,2,11
	.byte	'RESLD',0,1
	.word	419
	.byte	1,5,2,35,2,11
	.byte	'reserved_19',0,1
	.word	419
	.byte	5,0,2,35,2,11
	.byte	'PDIV',0,1
	.word	419
	.byte	3,5,2,35,3,11
	.byte	'reserved_27',0,1
	.word	419
	.byte	3,2,2,35,3,11
	.byte	'INSEL',0,1
	.word	419
	.byte	2,0,2,35,3,0,28
	.byte	'Ifx_SCU_SYSPLLCON0_Bits',0,15,137,9,3
	.word	33334
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON1_Bits',0,15,140,9,16,4,11
	.byte	'K2DIV',0,1
	.word	419
	.byte	3,5,2,35,0,11
	.byte	'reserved_3',0,4
	.word	396
	.byte	29,0,2,35,0,0,28
	.byte	'Ifx_SCU_SYSPLLCON1_Bits',0,15,144,9,3
	.word	33613
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLCON2_Bits',0,15,147,9,16,4,11
	.byte	'MODCFG',0,2
	.word	983
	.byte	16,0,2,35,0,11
	.byte	'reserved_16',0,2
	.word	983
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_SYSPLLCON2_Bits',0,15,151,9,3
	.word	33717
	.byte	10
	.byte	'_Ifx_SCU_SYSPLLSTAT_Bits',0,15,154,9,16,4,11
	.byte	'reserved_0',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'PWDSTAT',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'LOCK',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'reserved_3',0,1
	.word	419
	.byte	2,3,2,35,0,11
	.byte	'K2RDY',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'reserved_6',0,1
	.word	419
	.byte	1,1,2,35,0,11
	.byte	'MODRUN',0,1
	.word	419
	.byte	1,0,2,35,0,11
	.byte	'reserved_8',0,4
	.word	396
	.byte	24,0,2,35,0,0,28
	.byte	'Ifx_SCU_SYSPLLSTAT_Bits',0,15,164,9,3
	.word	33823
	.byte	10
	.byte	'_Ifx_SCU_TRAPCLR_Bits',0,15,167,9,16,4,11
	.byte	'ESR0T',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	396
	.byte	28,0,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPCLR_Bits',0,15,174,9,3
	.word	34046
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS0_Bits',0,15,177,9,16,4,11
	.byte	'CPU0ESR0T',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'CPU0ESR1T',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'CPU0TRAP2T',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'CPU0SMUT',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	419
	.byte	4,0,2,35,0,11
	.byte	'CPU1ESR0T',0,1
	.word	419
	.byte	1,7,2,35,1,11
	.byte	'CPU1ESR1T',0,1
	.word	419
	.byte	1,6,2,35,1,11
	.byte	'CPU1TRAP2T',0,1
	.word	419
	.byte	1,5,2,35,1,11
	.byte	'CPU1SMUT',0,1
	.word	419
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	419
	.byte	4,0,2,35,1,11
	.byte	'CPU2ESR0T',0,1
	.word	419
	.byte	1,7,2,35,2,11
	.byte	'CPU2ESR1T',0,1
	.word	419
	.byte	1,6,2,35,2,11
	.byte	'CPU2TRAP2T',0,1
	.word	419
	.byte	1,5,2,35,2,11
	.byte	'CPU2SMUT',0,1
	.word	419
	.byte	1,4,2,35,2,11
	.byte	'reserved_20',0,1
	.word	419
	.byte	4,0,2,35,2,11
	.byte	'CPU3ESR0T',0,1
	.word	419
	.byte	1,7,2,35,3,11
	.byte	'CPU3ESR1T',0,1
	.word	419
	.byte	1,6,2,35,3,11
	.byte	'CPU3TRAP2T',0,1
	.word	419
	.byte	1,5,2,35,3,11
	.byte	'CPU3SMUT',0,1
	.word	419
	.byte	1,4,2,35,3,11
	.byte	'reserved_28',0,1
	.word	419
	.byte	4,0,2,35,3,0,28
	.byte	'Ifx_SCU_TRAPDIS0_Bits',0,15,199,9,3
	.word	34194
	.byte	10
	.byte	'_Ifx_SCU_TRAPDIS1_Bits',0,15,202,9,16,4,11
	.byte	'CPU4ESR0T',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'CPU4ESR1T',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'CPU4TRAP2T',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'CPU4SMUT',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	419
	.byte	4,0,2,35,0,11
	.byte	'CPU5ESR0T',0,1
	.word	419
	.byte	1,7,2,35,1,11
	.byte	'CPU5ESR1T',0,1
	.word	419
	.byte	1,6,2,35,1,11
	.byte	'CPU5TRAP2T',0,1
	.word	419
	.byte	1,5,2,35,1,11
	.byte	'CPU5SMUT',0,1
	.word	419
	.byte	1,4,2,35,1,11
	.byte	'reserved_12',0,1
	.word	419
	.byte	4,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	983
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_TRAPDIS1_Bits',0,15,215,9,3
	.word	34682
	.byte	10
	.byte	'_Ifx_SCU_TRAPSET_Bits',0,15,218,9,16,4,11
	.byte	'ESR0T',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	396
	.byte	28,0,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPSET_Bits',0,15,225,9,3
	.word	34979
	.byte	10
	.byte	'_Ifx_SCU_TRAPSTAT_Bits',0,15,228,9,16,4,11
	.byte	'ESR0T',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'ESR1T',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'TRAP2',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'SMUT',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,4
	.word	396
	.byte	28,0,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPSTAT_Bits',0,15,235,9,3
	.word	35127
	.byte	10
	.byte	'_Ifx_SCU_WDTCPU_CON0_Bits',0,15,238,9,16,4,11
	.byte	'ENDINIT',0,4
	.word	20623
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	20623
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	20623
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	20623
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_SCU_WDTCPU_CON0_Bits',0,15,244,9,3
	.word	35277
	.byte	10
	.byte	'_Ifx_SCU_WDTCPU_CON1_Bits',0,15,247,9,16,4,11
	.byte	'reserved_0',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	419
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	419
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	419
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	419
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	983
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_WDTCPU_CON1_Bits',0,15,132,10,3
	.word	35407
	.byte	10
	.byte	'_Ifx_SCU_WDTCPU_SR_Bits',0,15,135,10,16,4,11
	.byte	'AE',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	419
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	419
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	419
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	419
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	983
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_WDTCPU_SR_Bits',0,15,148,10,3
	.word	35667
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON0_Bits',0,15,151,10,16,4,11
	.byte	'ENDINIT',0,4
	.word	20623
	.byte	1,31,2,35,0,11
	.byte	'LCK',0,4
	.word	20623
	.byte	1,30,2,35,0,11
	.byte	'PW',0,4
	.word	20623
	.byte	14,16,2,35,0,11
	.byte	'REL',0,4
	.word	20623
	.byte	16,0,2,35,0,0,28
	.byte	'Ifx_SCU_WDTS_CON0_Bits',0,15,157,10,3
	.word	35890
	.byte	10
	.byte	'_Ifx_SCU_WDTS_CON1_Bits',0,15,160,10,16,4,11
	.byte	'CLRIRF',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'reserved_1',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'IR0',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'DR',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'reserved_4',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'IR1',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'UR',0,1
	.word	419
	.byte	1,1,2,35,0,11
	.byte	'PAR',0,1
	.word	419
	.byte	1,0,2,35,0,11
	.byte	'TCR',0,1
	.word	419
	.byte	1,7,2,35,1,11
	.byte	'TCTR',0,1
	.word	419
	.byte	7,0,2,35,1,11
	.byte	'reserved_16',0,2
	.word	983
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_WDTS_CON1_Bits',0,15,173,10,3
	.word	36016
	.byte	10
	.byte	'_Ifx_SCU_WDTS_SR_Bits',0,15,176,10,16,4,11
	.byte	'AE',0,1
	.word	419
	.byte	1,7,2,35,0,11
	.byte	'OE',0,1
	.word	419
	.byte	1,6,2,35,0,11
	.byte	'IS0',0,1
	.word	419
	.byte	1,5,2,35,0,11
	.byte	'DS',0,1
	.word	419
	.byte	1,4,2,35,0,11
	.byte	'TO',0,1
	.word	419
	.byte	1,3,2,35,0,11
	.byte	'IS1',0,1
	.word	419
	.byte	1,2,2,35,0,11
	.byte	'US',0,1
	.word	419
	.byte	1,1,2,35,0,11
	.byte	'PAS',0,1
	.word	419
	.byte	1,0,2,35,0,11
	.byte	'TCS',0,1
	.word	419
	.byte	1,7,2,35,1,11
	.byte	'TCT',0,1
	.word	419
	.byte	7,0,2,35,1,11
	.byte	'TIM',0,2
	.word	983
	.byte	16,0,2,35,2,0,28
	.byte	'Ifx_SCU_WDTS_SR_Bits',0,15,189,10,3
	.word	36268
	.byte	12,15,197,10,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16395
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ACCEN00',0,15,202,10,3
	.word	36487
	.byte	12,15,205,10,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	16954
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ACCEN01',0,15,210,10,3
	.word	36552
	.byte	12,15,213,10,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17033
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ACCEN10',0,15,218,10,3
	.word	36617
	.byte	12,15,221,10,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17593
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ACCEN11',0,15,226,10,3
	.word	36682
	.byte	12,15,229,10,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17674
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ARSTDIS',0,15,234,10,3
	.word	36747
	.byte	12,15,237,10,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	17891
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON0',0,15,242,10,3
	.word	36812
	.byte	12,15,245,10,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18164
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON1',0,15,250,10,3
	.word	36877
	.byte	12,15,253,10,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18490
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON10',0,15,130,11,3
	.word	36942
	.byte	12,15,133,11,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18592
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON11',0,15,138,11,3
	.word	37008
	.byte	12,15,141,11,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18694
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON2',0,15,146,11,3
	.word	37074
	.byte	12,15,149,11,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	18968
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON3',0,15,154,11,3
	.word	37139
	.byte	12,15,157,11,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19337
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON4',0,15,162,11,3
	.word	37204
	.byte	12,15,165,11,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19517
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON5',0,15,170,11,3
	.word	37269
	.byte	12,15,173,11,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19686
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON6',0,15,178,11,3
	.word	37334
	.byte	12,15,181,11,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19786
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON7',0,15,186,11,3
	.word	37399
	.byte	12,15,189,11,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19886
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON8',0,15,194,11,3
	.word	37464
	.byte	12,15,197,11,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	19986
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CCUCON9',0,15,202,11,3
	.word	37529
	.byte	12,15,205,11,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20086
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_CHIPID',0,15,210,11,3
	.word	37594
	.byte	12,15,213,11,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20289
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_DTSCLIM',0,15,218,11,3
	.word	37658
	.byte	12,15,221,11,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20521
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_DTSCSTAT',0,15,226,11,3
	.word	37723
	.byte	12,15,229,11,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20639
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EICON0',0,15,234,11,3
	.word	37789
	.byte	12,15,237,11,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20767
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EICON1',0,15,242,11,3
	.word	37853
	.byte	12,15,245,11,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	20956
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EICR',0,15,250,11,3
	.word	37917
	.byte	12,15,253,11,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21320
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EIFILT',0,15,130,12,3
	.word	37979
	.byte	12,15,133,12,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21759
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EIFR',0,15,138,12,3
	.word	38043
	.byte	12,15,141,12,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	21970
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EISR',0,15,146,12,3
	.word	38105
	.byte	12,15,149,12,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22146
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EMSR',0,15,154,12,3
	.word	38167
	.byte	12,15,157,12,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22340
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EMSSW',0,15,162,12,3
	.word	38229
	.byte	12,15,165,12,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22475
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ESRCFGX_ESRCFGX',0,15,170,12,3
	.word	38292
	.byte	12,15,173,12,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22611
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ESROCFG',0,15,178,12,3
	.word	38365
	.byte	12,15,181,12,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22722
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_EXTCON',0,15,186,12,3
	.word	38430
	.byte	12,15,189,12,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	22940
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_FDR',0,15,194,12,3
	.word	38494
	.byte	12,15,197,12,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23103
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_FMR',0,15,202,12,3
	.word	38555
	.byte	12,15,205,12,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23439
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_ID',0,15,210,12,3
	.word	38616
	.byte	12,15,213,12,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23546
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_IGCR',0,15,218,12,3
	.word	38676
	.byte	12,15,221,12,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	23998
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_IN',0,15,226,12,3
	.word	38738
	.byte	12,15,229,12,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24097
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_IOCR',0,15,234,12,3
	.word	38798
	.byte	12,15,237,12,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24247
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_LBISTCTRL0',0,15,242,12,3
	.word	38860
	.byte	12,15,245,12,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24485
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_LBISTCTRL1',0,15,250,12,3
	.word	38928
	.byte	12,15,253,12,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24646
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_LBISTCTRL2',0,15,130,13,3
	.word	38996
	.byte	12,15,133,13,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24752
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_LBISTCTRL3',0,15,138,13,3
	.word	39064
	.byte	12,15,141,13,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	24838
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_LCLCON0',0,15,146,13,3
	.word	39132
	.byte	12,15,149,13,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25006
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_LCLCON1',0,15,154,13,3
	.word	39197
	.byte	12,15,157,13,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25174
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_LCLTEST',0,15,162,13,3
	.word	39262
	.byte	12,15,165,13,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25488
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_MANID',0,15,170,13,3
	.word	39327
	.byte	12,15,173,13,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25599
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_OMR',0,15,178,13,3
	.word	39390
	.byte	12,15,181,13,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	25757
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_OSCCON',0,15,186,13,3
	.word	39451
	.byte	12,15,189,13,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26168
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_OUT',0,15,194,13,3
	.word	39515
	.byte	12,15,197,13,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26269
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_OVCCON',0,15,202,13,3
	.word	39576
	.byte	12,15,205,13,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26587
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_OVCENABLE',0,15,210,13,3
	.word	39640
	.byte	12,15,213,13,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26774
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PDISC',0,15,218,13,3
	.word	39707
	.byte	12,15,221,13,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	26885
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PDR',0,15,226,13,3
	.word	39770
	.byte	12,15,229,13,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27018
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PDRR',0,15,234,13,3
	.word	39831
	.byte	12,15,237,13,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27221
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PERPLLCON0',0,15,242,13,3
	.word	39893
	.byte	12,15,245,13,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27461
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PERPLLCON1',0,15,250,13,3
	.word	39961
	.byte	12,15,253,13,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27605
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PERPLLSTAT',0,15,130,14,3
	.word	40029
	.byte	12,15,133,14,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27827
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR0',0,15,138,14,3
	.word	40097
	.byte	12,15,141,14,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	27963
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR1',0,15,146,14,3
	.word	40161
	.byte	12,15,149,14,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28099
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR2',0,15,154,14,3
	.word	40225
	.byte	12,15,157,14,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28235
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR3',0,15,162,14,3
	.word	40289
	.byte	12,15,165,14,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28371
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR4',0,15,170,14,3
	.word	40353
	.byte	12,15,173,14,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28507
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMCSR5',0,15,178,14,3
	.word	40417
	.byte	12,15,181,14,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28643
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMSTAT0',0,15,186,14,3
	.word	40481
	.byte	12,15,189,14,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	28915
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMSWCR1',0,15,194,14,3
	.word	40546
	.byte	12,15,197,14,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29160
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMTRCSR0',0,15,202,14,3
	.word	40611
	.byte	12,15,205,14,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29548
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMTRCSR1',0,15,210,14,3
	.word	40677
	.byte	12,15,213,14,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29666
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMTRCSR2',0,15,218,14,3
	.word	40743
	.byte	12,15,221,14,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	29909
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_PMTRCSR3',0,15,226,14,3
	.word	40809
	.byte	12,15,229,14,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30176
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_RSTCON',0,15,234,14,3
	.word	40875
	.byte	12,15,237,14,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30435
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_RSTCON2',0,15,242,14,3
	.word	40939
	.byte	12,15,245,14,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30740
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_RSTCON3',0,15,250,14,3
	.word	41004
	.byte	12,15,253,14,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	30821
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_RSTSTAT',0,15,130,15,3
	.word	41069
	.byte	12,15,133,15,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31370
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_SEICON0',0,15,138,15,3
	.word	41134
	.byte	12,15,141,15,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31500
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_SEICON1',0,15,146,15,3
	.word	41199
	.byte	12,15,149,15,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31691
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_SEISR',0,15,154,15,3
	.word	41264
	.byte	12,15,157,15,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	31869
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_STCON',0,15,162,15,3
	.word	41327
	.byte	12,15,165,15,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32020
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_STMEM1',0,15,170,15,3
	.word	41390
	.byte	12,15,173,15,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32092
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_STMEM2',0,15,178,15,3
	.word	41454
	.byte	12,15,181,15,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32164
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_STMEM3',0,15,186,15,3
	.word	41518
	.byte	12,15,189,15,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32236
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_STMEM4',0,15,194,15,3
	.word	41582
	.byte	12,15,197,15,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32308
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_STMEM5',0,15,202,15,3
	.word	41646
	.byte	12,15,205,15,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32380
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_STMEM6',0,15,210,15,3
	.word	41710
	.byte	12,15,213,15,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32452
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_STSTAT',0,15,218,15,3
	.word	41774
	.byte	12,15,221,15,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32781
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_SWAPCTRL',0,15,226,15,3
	.word	41838
	.byte	12,15,229,15,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	32901
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_SWRSTCON',0,15,234,15,3
	.word	41904
	.byte	12,15,237,15,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33071
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_SYSCON',0,15,242,15,3
	.word	41970
	.byte	12,15,245,15,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33334
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_SYSPLLCON0',0,15,250,15,3
	.word	42034
	.byte	12,15,253,15,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33613
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_SYSPLLCON1',0,15,130,16,3
	.word	42102
	.byte	12,15,133,16,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33717
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_SYSPLLCON2',0,15,138,16,3
	.word	42170
	.byte	12,15,141,16,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	33823
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_SYSPLLSTAT',0,15,146,16,3
	.word	42238
	.byte	12,15,149,16,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34046
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPCLR',0,15,154,16,3
	.word	42306
	.byte	12,15,157,16,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34194
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPDIS0',0,15,162,16,3
	.word	42371
	.byte	12,15,165,16,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34682
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPDIS1',0,15,170,16,3
	.word	42437
	.byte	12,15,173,16,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	34979
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPSET',0,15,178,16,3
	.word	42503
	.byte	12,15,181,16,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35127
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_TRAPSTAT',0,15,186,16,3
	.word	42568
	.byte	12,15,189,16,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35277
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_WDTCPU_CON0',0,15,194,16,3
	.word	42634
	.byte	12,15,197,16,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35407
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_WDTCPU_CON1',0,15,202,16,3
	.word	42703
	.byte	12,15,205,16,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35667
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_WDTCPU_SR',0,15,210,16,3
	.word	42772
	.byte	12,15,213,16,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	35890
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_WDTS_CON0',0,15,218,16,3
	.word	42839
	.byte	12,15,221,16,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36016
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_WDTS_CON1',0,15,226,16,3
	.word	42906
	.byte	12,15,229,16,9,4,13
	.byte	'U',0
	.word	396
	.byte	4,2,35,0,13
	.byte	'I',0
	.word	412
	.byte	4,2,35,0,13
	.byte	'B',0
	.word	36268
	.byte	4,2,35,0,0,28
	.byte	'Ifx_SCU_WDTS_SR',0,15,234,16,3
	.word	42973
	.byte	10
	.byte	'_Ifx_SCU_ESRCFGX',0,15,246,16,25,4,13
	.byte	'ESRCFGX',0
	.word	38292
	.byte	4,2,35,0,0,14
	.word	43038
	.byte	28
	.byte	'Ifx_SCU_ESRCFGX',0,15,249,16,3
	.word	43079
	.byte	10
	.byte	'_Ifx_SCU_WDTCPU',0,15,136,17,25,12,13
	.byte	'CON0',0
	.word	42634
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	42703
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	42772
	.byte	4,2,35,8,0,14
	.word	43109
	.byte	28
	.byte	'Ifx_SCU_WDTCPU',0,15,141,17,3
	.word	43172
	.byte	10
	.byte	'_Ifx_SCU_WDTS',0,15,156,17,25,12,13
	.byte	'CON0',0
	.word	42839
	.byte	4,2,35,0,13
	.byte	'CON1',0
	.word	42906
	.byte	4,2,35,4,13
	.byte	'SR',0
	.word	42973
	.byte	4,2,35,8,0,14
	.word	43201
	.byte	28
	.byte	'Ifx_SCU_WDTS',0,15,161,17,3
	.word	43262
	.byte	17,5,93,9,1,18
	.byte	'IfxRif_CalibrationState_done',0,0,18
	.byte	'IfxRif_CalibrationState_busy',0,1,0,28
	.byte	'IfxRif_CalibrationState',0,5,97,3
	.word	43289
	.byte	17,5,102,9,1,18
	.byte	'IfxRif_CalibrationStatus_fail',0,0,18
	.byte	'IfxRif_CalibrationStatus_success',0,1,0,28
	.byte	'IfxRif_CalibrationStatus',0,5,106,3
	.word	43389
	.byte	17,5,111,9,1,18
	.byte	'IfxRif_ClockPolarity_default',0,0,18
	.byte	'IfxRif_ClockPolarity_inverted',0,1,0,28
	.byte	'IfxRif_ClockPolarity',0,5,115,3
	.word	43495
	.byte	17,5,120,9,1,18
	.byte	'IfxRif_CommonLvdsPadControl_5vMode',0,0,18
	.byte	'IfxRif_CommonLvdsPadControl_lowSpeedMode',0,1,0,28
	.byte	'IfxRif_CommonLvdsPadControl',0,5,124,3
	.word	43593
	.byte	17,5,129,1,9,1,18
	.byte	'IfxRif_DataAlignment_right',0,0,18
	.byte	'IfxRif_DataAlignment_left',0,1,0,28
	.byte	'IfxRif_DataAlignment',0,5,133,1,3
	.word	43715
	.byte	17,5,138,1,9,1,18
	.byte	'IfxRif_DataFormat_unsigned',0,0,18
	.byte	'IfxRif_DataFormat_signed',0,1,0,28
	.byte	'IfxRif_DataFormat',0,5,142,1,3
	.word	43809
	.byte	17,5,147,1,9,1,18
	.byte	'IfxRif_DataLength_10bit',0,0,18
	.byte	'IfxRif_DataLength_12bit',0,1,18
	.byte	'IfxRif_DataLength_14bit',0,2,18
	.byte	'IfxRif_DataLength_16bit',0,3,0,28
	.byte	'IfxRif_DataLength',0,5,153,1,3
	.word	43899
	.byte	17,5,158,1,9,1,18
	.byte	'IfxRif_DataPolarity_default',0,0,18
	.byte	'IfxRif_DataPolarity_inverted',0,1,0,28
	.byte	'IfxRif_DataPolarity',0,5,162,1,3
	.word	44037
	.byte	17,5,166,1,9,1,18
	.byte	'IfxRif_DeserializerId_0',0,0,18
	.byte	'IfxRif_DeserializerId_1',0,1,18
	.byte	'IfxRif_DeserializerId_2',0,2,18
	.byte	'IfxRif_DeserializerId_3',0,3,0,28
	.byte	'IfxRif_DeserializerId',0,5,172,1,3
	.word	44134
	.byte	28
	.byte	'IfxRif_FifoId',0,5,182,1,3
	.word	7702
	.byte	17,5,187,1,9,1,18
	.byte	'IfxRif_FlmMode_direct',0,0,18
	.byte	'IfxRif_FlmMode_swap',0,1,0,28
	.byte	'IfxRif_FlmMode',0,5,191,1,3
	.word	44299
	.byte	17,5,196,1,9,1,18
	.byte	'IfxRif_FramePolarity_default',0,0,18
	.byte	'IfxRif_FramePolarity_inverted',0,1,0,28
	.byte	'IfxRif_FramePolarity',0,5,200,1,3
	.word	44376
	.byte	17,5,205,1,9,1,18
	.byte	'IfxRif_FullSwapMode_direct',0,0,18
	.byte	'IfxRif_FullSwapMode_swap',0,1,0,28
	.byte	'IfxRif_FullSwapMode',0,5,209,1,3
	.word	44476
	.byte	17,5,214,1,9,1,18
	.byte	'IfxRif_Interrupt_calibrationEnd',0,0,18
	.byte	'IfxRif_Interrupt_frameWatchdogOverflow',0,1,18
	.byte	'IfxRif_Interrupt_rampEnd',0,2,18
	.byte	'IfxRif_Interrupt_chirpEnd',0,3,18
	.byte	'IfxRif_Interrupt_crcErrorOnLine0',0,4,18
	.byte	'IfxRif_Interrupt_crcErrorOnLine1',0,5,18
	.byte	'IfxRif_Interrupt_crcErrorOnLine2',0,6,18
	.byte	'IfxRif_Interrupt_crcErrorOnLine3',0,7,18
	.byte	'IfxRif_Interrupt_ramp1Error',0,8,18
	.byte	'IfxRif_Interrupt_chirp1Error',0,9,18
	.byte	'IfxRif_Interrupt_ramp1Start',0,10,0,28
	.byte	'IfxRif_Interrupt',0,5,227,1,3
	.word	44568
	.byte	17,5,232,1,9,1,18
	.byte	'IfxRif_LvdsBiasDistributorMode_active',0,0,18
	.byte	'IfxRif_LvdsBiasDistributorMode_poweredDown',0,1,0,28
	.byte	'IfxRif_LvdsBiasDistributorMode',0,5,236,1,3
	.word	44962
	.byte	17,5,150,2,9,1,18
	.byte	'IfxRif_Ramp1SignalInput_0',0,0,18
	.byte	'IfxRif_Ramp1SignalInput_1',0,1,18
	.byte	'IfxRif_Ramp1SignalInput_2',0,2,18
	.byte	'IfxRif_Ramp1SignalInput_3',0,3,0,28
	.byte	'IfxRif_Ramp1SignalInput',0,5,156,2,3
	.word	45094
	.byte	17,5,161,2,9,1,18
	.byte	'IfxRif_Ramp1SignalPolarity_lowActive',0,0,18
	.byte	'IfxRif_Ramp1SignalPolarity_highActive',0,1,0,28
	.byte	'IfxRif_Ramp1SignalPolarity',0,5,165,2,3
	.word	45246
	.byte	17,5,171,2,9,1,18
	.byte	'IfxRif_ShiftDirection_msbFirst',0,0,18
	.byte	'IfxRif_ShiftDirection_lsbFirst',0,1,0,28
	.byte	'IfxRif_ShiftDirection',0,5,175,2,3
	.word	45368
	.byte	17,5,179,2,9,1,18
	.byte	'IfxRif_SuspendMode_none',0,0,18
	.byte	'IfxRif_SuspendMode_hard',0,1,18
	.byte	'IfxRif_SuspendMode_soft',0,2,0,28
	.byte	'IfxRif_SuspendMode',0,5,184,2,3
	.word	45472
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L39:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,21,0,54,15,39,12,0,0,3,15,0,73,19,0,0,4,46,1,3,8,32,13
	.byte	58,15,59,15,57,15,54,15,39,12,0,0,5,5,0,3,8,58,15,59,15,57,15,73,19,0,0,6,11,0,0,0,7,36,0,3,8,11,15,62
	.byte	15,0,0,8,46,1,3,8,32,13,58,15,59,15,57,15,73,19,54,15,39,12,0,0,9,59,0,3,8,0,0,10,19,1,3,8,58,15,59,15
	.byte	57,15,11,15,0,0,11,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,12,23,1,58,15,59,15,57,15,11,15,0,0,13,13
	.byte	0,3,8,73,19,11,15,56,9,0,0,14,53,0,73,19,0,0,15,1,1,11,15,73,19,0,0,16,33,0,47,15,0,0,17,4,1,58,15,59
	.byte	15,57,15,11,15,0,0,18,40,0,3,8,28,13,0,0,19,38,0,73,19,0,0,20,46,1,3,8,54,15,39,12,63,12,60,12,0,0,21
	.byte	5,0,73,19,0,0,22,46,1,3,8,73,19,54,15,39,12,63,12,60,12,0,0,23,5,0,3,8,73,19,0,0,24,46,1,49,19,0,0,25
	.byte	5,0,49,19,0,0,26,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,27,46,0,3,8,58,15,59,15,57,15
	.byte	73,19,54,15,39,12,63,12,60,12,0,0,28,22,0,3,8,58,15,59,15,57,15,73,19,0,0,29,21,0,54,15,0,0,30,19,1,58
	.byte	15,59,15,57,15,11,15,0,0,31,52,0,3,8,58,15,59,15,57,15,73,19,63,12,60,12,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L40:
	.word	.L154-.L153
.L153:
	.half	3
	.word	.L156-.L155
.L155:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Cpu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Src\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Reg',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\Scu\\Std',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\0_Src\\4_McHal\\Tricore\\_Impl',0,0
	.byte	'IfxCpu_IntrinsicsTasking.h',0,1,0,0
	.byte	'IfxCpu_Intrinsics.h',0,1,0,0
	.byte	'IfxSrc.h',0,2,0,0
	.byte	'IfxSrc_regdef.h',0,3,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.h',0,0,0,0
	.byte	'IfxRif_regdef.h',0,3,0,0
	.byte	'IfxScuWdt.h',0,4,0,0
	.byte	'IfxRif_cfg.h',0,5,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.c',0,0,0,0
	.byte	'Platform_Types.h',0,1,0,0
	.byte	'Ifx_Types.h',0,1,0,0
	.byte	'Ifx_TypesReg.h',0,3,0,0
	.byte	'IfxSrc_cfg.h',0,5,0,0
	.byte	'IfxScu_cfg.h',0,5,0,0
	.byte	'IfxScu_regdef.h',0,3,0,0,0
.L156:
.L154:
	.sdecl	'.debug_info',debug,cluster('IfxRif_enableFifos')
	.sect	'.debug_info'
.L41:
	.word	568
	.half	3
	.word	.L42
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L44,.L43
	.byte	2
	.word	.L37
	.byte	3
	.byte	'IfxRif_enableFifos',0,1,61,6,1,1,1
	.word	.L22,.L86,.L21
	.byte	4
	.byte	'rif',0,1,61,34
	.word	.L87,.L88
	.byte	4
	.byte	'count',0,1,61,45
	.word	.L89,.L90
	.byte	5
	.word	.L22,.L86
	.byte	6
	.word	.L91,.L2,.L3
	.byte	7
	.word	.L92,.L93
	.byte	7
	.word	.L94,.L95
	.byte	8
	.word	.L96,.L2,.L3
	.byte	0,6
	.word	.L91,.L3,.L97
	.byte	7
	.word	.L92,.L93
	.byte	7
	.word	.L94,.L95
	.byte	8
	.word	.L96,.L3,.L97
	.byte	0,6
	.word	.L91,.L97,.L4
	.byte	7
	.word	.L92,.L93
	.byte	7
	.word	.L94,.L95
	.byte	8
	.word	.L96,.L97,.L4
	.byte	0,6
	.word	.L91,.L4,.L98
	.byte	7
	.word	.L92,.L93
	.byte	7
	.word	.L94,.L95
	.byte	8
	.word	.L96,.L4,.L98
	.byte	0,6
	.word	.L91,.L98,.L99
	.byte	7
	.word	.L92,.L93
	.byte	7
	.word	.L94,.L95
	.byte	8
	.word	.L96,.L98,.L99
	.byte	0,6
	.word	.L91,.L99,.L100
	.byte	7
	.word	.L92,.L93
	.byte	7
	.word	.L94,.L95
	.byte	8
	.word	.L96,.L99,.L100
	.byte	0,6
	.word	.L91,.L100,.L101
	.byte	7
	.word	.L92,.L93
	.byte	7
	.word	.L94,.L95
	.byte	8
	.word	.L96,.L100,.L101
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxRif_enableFifos')
	.sect	'.debug_abbrev'
.L42:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,0,49,16,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxRif_enableFifos')
	.sect	'.debug_line'
.L43:
	.word	.L158-.L157
.L157:
	.half	3
	.word	.L160-.L159
.L159:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.h',0,0,0,0,0
.L160:
	.byte	5,6,7,0,5,2
	.word	.L22
	.byte	3,60,1,5,28,9
	.half	.L140-.L22
	.byte	3,2,1,5,10,9
	.half	.L139-.L140
	.byte	3,6,1,7,9
	.half	.L161-.L139
	.byte	3,3,1,7,9
	.half	.L162-.L161
	.byte	3,4,1,7,9
	.half	.L163-.L162
	.byte	3,1,1,5,1,7,9
	.half	.L164-.L163
	.byte	3,10,1,4,2,5,26,7,9
	.half	.L2-.L164
	.byte	3,136,6,1,5,29,9
	.half	.L141-.L2
	.byte	1,4,1,5,9,3,232,121,1,4,2,5,26,9
	.half	.L3-.L141
	.byte	3,152,6,1,5,29,9
	.half	.L142-.L3
	.byte	1,5,16,1,5,26,9
	.half	.L97-.L142
	.byte	1,5,29,9
	.half	.L165-.L97
	.byte	1,4,1,5,9,3,236,121,1,4,2,5,26,9
	.half	.L4-.L165
	.byte	3,148,6,1,5,29,9
	.half	.L143-.L4
	.byte	1,5,16,1,5,26,9
	.half	.L98-.L143
	.byte	1,5,29,9
	.half	.L166-.L98
	.byte	1,5,16,1,5,26,9
	.half	.L99-.L166
	.byte	1,5,29,9
	.half	.L167-.L99
	.byte	1,5,16,1,5,26,9
	.half	.L100-.L167
	.byte	1,5,29,9
	.half	.L168-.L100
	.byte	1,5,16,9
	.half	.L8-.L168
	.byte	1,4,1,5,1,9
	.half	.L101-.L8
	.byte	3,248,121,1,7,9
	.half	.L45-.L101
	.byte	0,1,1
.L158:
	.sdecl	'.debug_ranges',debug,cluster('IfxRif_enableFifos')
	.sect	'.debug_ranges'
.L44:
	.word	-1,.L22,0,.L45-.L22,0,0
	.sdecl	'.debug_info',debug,cluster('IfxRif_getSrcPointerErr')
	.sect	'.debug_info'
.L46:
	.word	245
	.half	3
	.word	.L47
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L49,.L48
	.byte	2
	.word	.L37
	.byte	3
	.byte	'IfxRif_getSrcPointerErr',0,1,140,1,24
	.word	.L102
	.byte	1,1,1
	.word	.L30,.L103,.L29
	.byte	4
	.byte	'rif',0,1,140,1,57
	.word	.L87,.L104
	.byte	5
	.word	.L30,.L103
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxRif_getSrcPointerErr')
	.sect	'.debug_abbrev'
.L47:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxRif_getSrcPointerErr')
	.sect	'.debug_line'
.L48:
	.word	.L170-.L169
.L169:
	.half	3
	.word	.L172-.L171
.L171:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.c',0,0,0,0,0
.L172:
	.byte	5,27,7,0,5,2
	.word	.L30
	.byte	3,141,1,1,5,48,9
	.half	.L173-.L30
	.byte	1,5,31,9
	.half	.L151-.L173
	.byte	1,5,1,9
	.half	.L174-.L151
	.byte	3,1,1,7,9
	.half	.L50-.L174
	.byte	0,1,1
.L170:
	.sdecl	'.debug_ranges',debug,cluster('IfxRif_getSrcPointerErr')
	.sect	'.debug_ranges'
.L49:
	.word	-1,.L30,0,.L50-.L30,0,0
	.sdecl	'.debug_info',debug,cluster('IfxRif_getSrcPointerInt')
	.sect	'.debug_info'
.L51:
	.word	245
	.half	3
	.word	.L52
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L54,.L53
	.byte	2
	.word	.L37
	.byte	3
	.byte	'IfxRif_getSrcPointerInt',0,1,146,1,24
	.word	.L102
	.byte	1,1,1
	.word	.L32,.L105,.L31
	.byte	4
	.byte	'rif',0,1,146,1,57
	.word	.L87,.L106
	.byte	5
	.word	.L32,.L105
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxRif_getSrcPointerInt')
	.sect	'.debug_abbrev'
.L52:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxRif_getSrcPointerInt')
	.sect	'.debug_line'
.L53:
	.word	.L176-.L175
.L175:
	.half	3
	.word	.L178-.L177
.L177:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.c',0,0,0,0,0
.L178:
	.byte	5,27,7,0,5,2
	.word	.L32
	.byte	3,147,1,1,5,48,9
	.half	.L179-.L32
	.byte	1,5,31,9
	.half	.L152-.L179
	.byte	1,5,53,9
	.half	.L180-.L152
	.byte	1,5,1,9
	.half	.L181-.L180
	.byte	3,1,1,7,9
	.half	.L55-.L181
	.byte	0,1,1
.L176:
	.sdecl	'.debug_ranges',debug,cluster('IfxRif_getSrcPointerInt')
	.sect	'.debug_ranges'
.L54:
	.word	-1,.L32,0,.L55-.L32,0,0
	.sdecl	'.debug_info',debug,cluster('IfxRif_disableModule')
	.sect	'.debug_info'
.L56:
	.word	258
	.half	3
	.word	.L57
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L59,.L58
	.byte	2
	.word	.L37
	.byte	3
	.byte	'IfxRif_disableModule',0,1,52,6,1,1,1
	.word	.L20,.L107,.L19
	.byte	4
	.byte	'rif',0,1,52,36
	.word	.L87,.L108
	.byte	5
	.word	.L20,.L107
	.byte	6
	.byte	'password',0,1,54,12
	.word	.L109,.L110
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxRif_disableModule')
	.sect	'.debug_abbrev'
.L57:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxRif_disableModule')
	.sect	'.debug_line'
.L58:
	.word	.L183-.L182
.L182:
	.half	3
	.word	.L185-.L184
.L184:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.c',0,0,0,0,0
.L185:
	.byte	5,6,7,0,5,2
	.word	.L20
	.byte	3,51,1,5,55,9
	.half	.L135-.L20
	.byte	3,2,1,5,21,9
	.half	.L134-.L135
	.byte	1,5,31,9
	.half	.L137-.L134
	.byte	3,1,1,5,29,9
	.half	.L136-.L137
	.byte	3,2,1,5,15,3,127,1,5,21,9
	.half	.L138-.L136
	.byte	1,5,29,9
	.half	.L186-.L138
	.byte	3,1,1,5,1,7,9
	.half	.L60-.L186
	.byte	3,1,0,1,1
.L183:
	.sdecl	'.debug_ranges',debug,cluster('IfxRif_disableModule')
	.sect	'.debug_ranges'
.L59:
	.word	-1,.L20,0,.L60-.L20,0,0
	.sdecl	'.debug_info',debug,cluster('IfxRif_enableModule')
	.sect	'.debug_info'
.L61:
	.word	293
	.half	3
	.word	.L62
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L64,.L63
	.byte	2
	.word	.L37
	.byte	3
	.byte	'IfxRif_enableModule',0,1,90,6,1,1,1
	.word	.L24,.L111,.L23
	.byte	4
	.byte	'rif',0,1,90,35
	.word	.L87,.L112
	.byte	5
	.word	.L24,.L111
	.byte	6
	.byte	'password',0,1,92,12
	.word	.L109,.L113
	.byte	7
	.word	.L114,.L9,.L115
	.byte	8
	.word	.L116,.L117
	.byte	9
	.word	.L118,.L9,.L115
	.byte	0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxRif_enableModule')
	.sect	'.debug_abbrev'
.L62:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,7,29,1,49,16,17,1,18,1,0,0,8,5,0,49,16,2,6,0,0,9,11,0,49,16,17,1,18
	.byte	1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxRif_enableModule')
	.sect	'.debug_line'
.L63:
	.word	.L188-.L187
.L187:
	.half	3
	.word	.L190-.L189
.L189:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.c',0,0,0,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.h',0,0,0,0,0
.L190:
	.byte	5,6,7,0,5,2
	.word	.L24
	.byte	3,217,0,1,5,55,9
	.half	.L145-.L24
	.byte	3,2,1,5,21,9
	.half	.L144-.L145
	.byte	1,5,31,9
	.half	.L147-.L144
	.byte	3,1,1,5,15,9
	.half	.L146-.L147
	.byte	3,1,1,5,21,9
	.half	.L191-.L146
	.byte	1,5,29,9
	.half	.L192-.L191
	.byte	3,1,1,4,2,5,22,9
	.half	.L9-.L192
	.byte	3,197,6,1,4,1,5,48,9
	.half	.L115-.L9
	.byte	3,190,121,1,5,1,7,9
	.half	.L193-.L115
	.byte	3,2,1,7,9
	.half	.L65-.L193
	.byte	0,1,1
.L188:
	.sdecl	'.debug_ranges',debug,cluster('IfxRif_enableModule')
	.sect	'.debug_ranges'
.L64:
	.word	-1,.L24,0,.L65-.L24,0,0
	.sdecl	'.debug_info',debug,cluster('IfxRif_getAddress')
	.sect	'.debug_info'
.L66:
	.word	257
	.half	3
	.word	.L67
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L69,.L68
	.byte	2
	.word	.L37
	.byte	3
	.byte	'IfxRif_getAddress',0,1,103,10
	.word	.L87
	.byte	1,1,1
	.word	.L26,.L119,.L25
	.byte	4
	.byte	'rif',0,1,103,41
	.word	.L120,.L121
	.byte	5
	.word	.L26,.L119
	.byte	6
	.byte	'module',0,1,105,14
	.word	.L87,.L122
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxRif_getAddress')
	.sect	'.debug_abbrev'
.L67:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxRif_getAddress')
	.sect	'.debug_line'
.L68:
	.word	.L195-.L194
.L194:
	.half	3
	.word	.L197-.L196
.L196:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.c',0,0,0,0,0
.L197:
	.byte	5,5,7,0,5,2
	.word	.L26
	.byte	3,234,0,1,5,29,7,9
	.half	.L198-.L26
	.byte	3,2,1,5,48,9
	.half	.L199-.L198
	.byte	1,5,53,9
	.half	.L200-.L199
	.byte	1,5,1,9
	.half	.L148-.L200
	.byte	3,8,1,5,16,7,9
	.half	.L10-.L148
	.byte	3,124,1,5,1,9
	.half	.L149-.L10
	.byte	3,4,1,7,9
	.half	.L70-.L149
	.byte	0,1,1
.L195:
	.sdecl	'.debug_ranges',debug,cluster('IfxRif_getAddress')
	.sect	'.debug_ranges'
.L69:
	.word	-1,.L26,0,.L70-.L26,0,0
	.sdecl	'.debug_info',debug,cluster('IfxRif_getIndex')
	.sect	'.debug_info'
.L71:
	.word	273
	.half	3
	.word	.L72
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L74,.L73
	.byte	2
	.word	.L37
	.byte	3
	.byte	'IfxRif_getIndex',0,1,120,14
	.word	.L120
	.byte	1,1,1
	.word	.L28,.L123,.L27
	.byte	4
	.byte	'rif',0,1,120,39
	.word	.L87,.L124
	.byte	5
	.word	.L28,.L123
	.byte	6
	.byte	'index',0,1,122,18
	.word	.L125,.L126
	.byte	6
	.byte	'result',0,1,123,18
	.word	.L120,.L127
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxRif_getIndex')
	.sect	'.debug_abbrev'
.L72:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxRif_getIndex')
	.sect	'.debug_line'
.L73:
	.word	.L202-.L201
.L201:
	.half	3
	.word	.L204-.L203
.L203:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.c',0,0,0,0,0
.L204:
	.byte	5,12,7,0,5,2
	.word	.L28
	.byte	3,252,0,1,5,13,3,4,1,5,47,9
	.half	.L205-.L28
	.byte	3,126,1,5,39,9
	.half	.L13-.L205
	.byte	3,2,1,5,9,9
	.half	.L206-.L13
	.byte	1,5,62,7,9
	.half	.L207-.L206
	.byte	3,2,1,5,22,9
	.half	.L208-.L207
	.byte	1,5,1,3,6,1,5,54,7,9
	.half	.L14-.L208
	.byte	3,118,1,5,47,1,5,1,7,9
	.half	.L209-.L14
	.byte	3,10,1,7,9
	.half	.L75-.L209
	.byte	0,1,1
.L202:
	.sdecl	'.debug_ranges',debug,cluster('IfxRif_getIndex')
	.sect	'.debug_ranges'
.L74:
	.word	-1,.L28,0,.L75-.L28,0,0
	.sdecl	'.debug_info',debug,cluster('IfxRif_disableFifo')
	.sect	'.debug_info'
.L76:
	.word	256
	.half	3
	.word	.L77
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L79,.L78
	.byte	2
	.word	.L37
	.byte	3
	.byte	'IfxRif_disableFifo',0,1,152,1,6,1,1,1
	.word	.L34,.L128,.L33
	.byte	4
	.byte	'rif',0,1,152,1,34
	.word	.L87,.L129
	.byte	4
	.byte	'fifoId',0,1,152,1,53
	.word	.L130,.L131
	.byte	5
	.word	.L34,.L128
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxRif_disableFifo')
	.sect	'.debug_abbrev'
.L77:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxRif_disableFifo')
	.sect	'.debug_line'
.L78:
	.word	.L211-.L210
.L210:
	.half	3
	.word	.L213-.L212
.L212:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.c',0,0,0,0,0
.L213:
	.byte	5,25,7,0,5,2
	.word	.L34
	.byte	3,153,1,1,5,27,3,1,1,5,28,9
	.half	.L214-.L34
	.byte	3,127,1,5,23,9
	.half	.L215-.L214
	.byte	1,5,30,9
	.half	.L216-.L215
	.byte	3,1,1,5,16,1,5,1,9
	.half	.L217-.L216
	.byte	3,1,1,7,9
	.half	.L80-.L217
	.byte	0,1,1
.L211:
	.sdecl	'.debug_ranges',debug,cluster('IfxRif_disableFifo')
	.sect	'.debug_ranges'
.L79:
	.word	-1,.L34,0,.L80-.L34,0,0
	.sdecl	'.debug_info',debug,cluster('IfxRif_disableAllFifos')
	.sect	'.debug_info'
.L81:
	.word	240
	.half	3
	.word	.L82
	.byte	4,1
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'D:\\WorkSpace\\Tasking\\Tasking_TC397_MultiCore_RTThread\\Debug\\',0,12,1
	.word	.L84,.L83
	.byte	2
	.word	.L37
	.byte	3
	.byte	'IfxRif_disableAllFifos',0,1,159,1,6,1,1,1
	.word	.L36,.L132,.L35
	.byte	4
	.byte	'rif',0,1,159,1,38
	.word	.L87,.L133
	.byte	5
	.word	.L36,.L132
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('IfxRif_disableAllFifos')
	.sect	'.debug_abbrev'
.L82:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('IfxRif_disableAllFifos')
	.sect	'.debug_line'
.L83:
	.word	.L219-.L218
.L218:
	.half	3
	.word	.L221-.L220
.L220:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\0_Src\\4_McHal\\Tricore\\Rif\\Std\\IfxRif.c',0,0,0,0,0
.L221:
	.byte	5,18,7,0,5,2
	.word	.L36
	.byte	3,160,1,1,5,16,1,5,1,9
	.half	.L222-.L36
	.byte	3,1,1,7,9
	.half	.L85-.L222
	.byte	0,1,1
.L219:
	.sdecl	'.debug_ranges',debug,cluster('IfxRif_disableAllFifos')
	.sect	'.debug_ranges'
.L84:
	.word	-1,.L36,0,.L85-.L36,0,0
	.sdecl	'.debug_loc',debug,cluster('IfxRif_disableAllFifos')
	.sect	'.debug_loc'
.L35:
	.word	-1,.L36,0,.L132-.L36
	.half	2
	.byte	138,0
	.word	0,0
.L133:
	.word	-1,.L36,0,.L132-.L36
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxRif_disableFifo')
	.sect	'.debug_loc'
.L33:
	.word	-1,.L34,0,.L128-.L34
	.half	2
	.byte	138,0
	.word	0,0
.L131:
	.word	-1,.L34,0,.L128-.L34
	.half	1
	.byte	84
	.word	0,0
.L129:
	.word	-1,.L34,0,.L128-.L34
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxRif_disableModule')
	.sect	'.debug_loc'
.L19:
	.word	-1,.L20,0,.L107-.L20
	.half	2
	.byte	138,0
	.word	0,0
.L110:
	.word	-1,.L20,.L134-.L20,.L136-.L20
	.half	1
	.byte	82
	.word	.L137-.L20,.L107-.L20
	.half	1
	.byte	88
	.word	.L138-.L20,.L107-.L20
	.half	1
	.byte	84
	.word	0,0
.L108:
	.word	-1,.L20,0,.L134-.L20
	.half	1
	.byte	100
	.word	.L135-.L20,.L107-.L20
	.half	1
	.byte	111
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxRif_enableFifos')
	.sect	'.debug_loc'
.L21:
	.word	-1,.L22,0,.L86-.L22
	.half	2
	.byte	138,0
	.word	0,0
.L90:
	.word	-1,.L22,0,.L139-.L22
	.half	1
	.byte	84
	.word	.L139-.L22,.L141-.L22
	.half	1
	.byte	95
	.word	.L3-.L22,.L142-.L22
	.half	1
	.byte	95
	.word	.L4-.L22,.L143-.L22
	.half	1
	.byte	95
	.word	0,0
.L95:
	.word	0,0
.L88:
	.word	-1,.L22,0,.L139-.L22
	.half	1
	.byte	100
	.word	.L140-.L22,.L86-.L22
	.half	1
	.byte	111
	.word	0,0
.L93:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxRif_enableModule')
	.sect	'.debug_loc'
.L23:
	.word	-1,.L24,0,.L111-.L24
	.half	2
	.byte	138,0
	.word	0,0
.L113:
	.word	-1,.L24,.L144-.L24,.L146-.L24
	.half	1
	.byte	82
	.word	.L147-.L24,.L9-.L24
	.half	1
	.byte	95
	.word	0,0
.L112:
	.word	-1,.L24,0,.L144-.L24
	.half	1
	.byte	100
	.word	.L145-.L24,.L111-.L24
	.half	1
	.byte	111
	.word	0,0
.L117:
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxRif_getAddress')
	.sect	'.debug_loc'
.L25:
	.word	-1,.L26,0,.L119-.L26
	.half	2
	.byte	138,0
	.word	0,0
.L122:
	.word	-1,.L26,.L148-.L26,.L10-.L26
	.half	1
	.byte	98
	.word	.L149-.L26,.L119-.L26
	.half	1
	.byte	98
	.word	0,0
.L121:
	.word	-1,.L26,0,.L119-.L26
	.half	1
	.byte	84
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxRif_getIndex')
	.sect	'.debug_loc'
.L27:
	.word	-1,.L28,0,.L123-.L28
	.half	2
	.byte	138,0
	.word	0,0
.L126:
	.word	0,0
.L127:
	.word	-1,.L28,.L150-.L28,.L123-.L28
	.half	1
	.byte	82
	.word	0,0
.L124:
	.word	-1,.L28,0,.L123-.L28
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxRif_getSrcPointerErr')
	.sect	'.debug_loc'
.L29:
	.word	-1,.L30,0,.L103-.L30
	.half	2
	.byte	138,0
	.word	0,0
.L104:
	.word	-1,.L30,0,.L151-.L30
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('IfxRif_getSrcPointerInt')
	.sect	'.debug_loc'
.L31:
	.word	-1,.L32,0,.L105-.L32
	.half	2
	.byte	138,0
	.word	0,0
.L106:
	.word	-1,.L32,0,.L152-.L32
	.half	1
	.byte	100
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L223:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,27,8,26,8,28,8,29,8,30,8,31,8,34,8,35,8,32,8,33,8,16,8,17,8,24,8,25,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('IfxRif_disableModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L223,.L20,.L107-.L20
	.sdecl	'.debug_frame',debug,cluster('IfxRif_enableFifos')
	.sect	'.debug_frame'
	.word	12
	.word	.L223,.L22,.L86-.L22
	.sdecl	'.debug_frame',debug,cluster('IfxRif_enableModule')
	.sect	'.debug_frame'
	.word	12
	.word	.L223,.L24,.L111-.L24
	.sdecl	'.debug_frame',debug,cluster('IfxRif_getAddress')
	.sect	'.debug_frame'
	.word	24
	.word	.L223,.L26,.L119-.L26
	.byte	8,19,8,20,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxRif_getIndex')
	.sect	'.debug_frame'
	.word	20
	.word	.L223,.L28,.L123-.L28
	.byte	8,19,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxRif_getSrcPointerErr')
	.sect	'.debug_frame'
	.word	12
	.word	.L223,.L30,.L103-.L30
	.sdecl	'.debug_frame',debug,cluster('IfxRif_getSrcPointerInt')
	.sect	'.debug_frame'
	.word	12
	.word	.L223,.L32,.L105-.L32
	.sdecl	'.debug_frame',debug,cluster('IfxRif_disableFifo')
	.sect	'.debug_frame'
	.word	24
	.word	.L223,.L34,.L128-.L34
	.byte	8,18,8,19,8,21,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('IfxRif_disableAllFifos')
	.sect	'.debug_frame'
	.word	24
	.word	.L223,.L36,.L132-.L36
	.byte	8,18,8,19,8,21,8,22,8,23,0,0


	; Module end
